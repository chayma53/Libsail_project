
Fx_uSD_File_Edit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c7c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e94  08016e40  08016e40  00026e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ccd4  0801ccd4  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ccd4  0801ccd4  0002ccd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ccdc  0801ccdc  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ccdc  0801ccdc  0002ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cce0  0801cce0  0002cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0801cce4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003025c  2**0
                  CONTENTS
 10 .bss          00003c28  2000025c  2000025c  0003025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003e84  20003e84  0003025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b8d9  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b01c  00000000  00000000  0007bb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a50  00000000  00000000  00086b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002488  00000000  00000000  000895d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003eef7  00000000  00000000  0008ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047d27  00000000  00000000  000ca957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ff58  00000000  00000000  0011267e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002325d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b808  00000000  00000000  00232628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0023de30  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0023de54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016e24 	.word	0x08016e24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000260 	.word	0x20000260
 80001fc:	08016e24 	.word	0x08016e24

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4919      	ldr	r1, [pc, #100]	; (800026c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4915      	ldr	r1, [pc, #84]	; (8000278 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490f      	ldr	r1, [pc, #60]	; (800027c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800024c:	f7ff bffe 	b.w	800024c <__tx_SVCallHandler>

08000250 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000250:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000252:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000256:	4770      	bx	lr

08000258 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000258:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800025a:	f000 f891 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000262:	4770      	bx	lr

08000264 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_NMIHandler>

08000268 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800026c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000270:	20003860 	.word	0x20003860
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000274:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000278:	001b773f 	.word	0x001b773f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	40ff0000 	.word	0x40ff0000

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20003900 	.word	0x20003900
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	20003864 	.word	0x20003864
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	20003868 	.word	0x20003868
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	20003e70 	.word	0x20003e70

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f011 fe1b 	bl	8012014 <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f011 fd24 	bl	8011e30 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	2000390c 	.word	0x2000390c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	20003e70 	.word	0x20003e70
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	20003910 	.word	0x20003910
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	2000399c 	.word	0x2000399c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	200039a0 	.word	0x200039a0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	20003998 	.word	0x20003998
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	20003994 	.word	0x20003994
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20003900 	.word	0x20003900
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	20003864 	.word	0x20003864
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	20003868 	.word	0x20003868
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <strcmp>:
 80004e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	bf28      	it	cs
 80004ec:	429a      	cmpcs	r2, r3
 80004ee:	d0f7      	beq.n	80004e0 <strcmp>
 80004f0:	1ad0      	subs	r0, r2, r3
 80004f2:	4770      	bx	lr

080004f4 <strlen>:
 80004f4:	4603      	mov	r3, r0
 80004f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d1fb      	bne.n	80004f6 <strlen+0x2>
 80004fe:	1a18      	subs	r0, r3, r0
 8000500:	3801      	subs	r0, #1
 8000502:	4770      	bx	lr

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_dmul>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8de 	bleq	8000a58 <__aeabi_dmul+0x1dc>
 800089c:	442c      	add	r4, r5
 800089e:	ea81 0603 	eor.w	r6, r1, r3
 80008a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ae:	bf18      	it	ne
 80008b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008bc:	d038      	beq.n	8000930 <__aeabi_dmul+0xb4>
 80008be:	fba0 ce02 	umull	ip, lr, r0, r2
 80008c2:	f04f 0500 	mov.w	r5, #0
 80008c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008d2:	f04f 0600 	mov.w	r6, #0
 80008d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008da:	f09c 0f00 	teq	ip, #0
 80008de:	bf18      	it	ne
 80008e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008f0:	d204      	bcs.n	80008fc <__aeabi_dmul+0x80>
 80008f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008f6:	416d      	adcs	r5, r5
 80008f8:	eb46 0606 	adc.w	r6, r6, r6
 80008fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000900:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000904:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000908:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800090c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000910:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000914:	bf88      	it	hi
 8000916:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091a:	d81e      	bhi.n	800095a <__aeabi_dmul+0xde>
 800091c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000920:	bf08      	it	eq
 8000922:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000934:	ea46 0101 	orr.w	r1, r6, r1
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	f300 80ab 	bgt.w	8000ab4 <__aeabi_dmul+0x238>
 800095e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000962:	bfde      	ittt	le
 8000964:	2000      	movle	r0, #0
 8000966:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800096a:	bd70      	pople	{r4, r5, r6, pc}
 800096c:	f1c4 0400 	rsb	r4, r4, #0
 8000970:	3c20      	subs	r4, #32
 8000972:	da35      	bge.n	80009e0 <__aeabi_dmul+0x164>
 8000974:	340c      	adds	r4, #12
 8000976:	dc1b      	bgt.n	80009b0 <__aeabi_dmul+0x134>
 8000978:	f104 0414 	add.w	r4, r4, #20
 800097c:	f1c4 0520 	rsb	r5, r4, #32
 8000980:	fa00 f305 	lsl.w	r3, r0, r5
 8000984:	fa20 f004 	lsr.w	r0, r0, r4
 8000988:	fa01 f205 	lsl.w	r2, r1, r5
 800098c:	ea40 0002 	orr.w	r0, r0, r2
 8000990:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000994:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800099c:	fa21 f604 	lsr.w	r6, r1, r4
 80009a0:	eb42 0106 	adc.w	r1, r2, r6
 80009a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a8:	bf08      	it	eq
 80009aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f1c4 040c 	rsb	r4, r4, #12
 80009b4:	f1c4 0520 	rsb	r5, r4, #32
 80009b8:	fa00 f304 	lsl.w	r3, r0, r4
 80009bc:	fa20 f005 	lsr.w	r0, r0, r5
 80009c0:	fa01 f204 	lsl.w	r2, r1, r4
 80009c4:	ea40 0002 	orr.w	r0, r0, r2
 80009c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009d0:	f141 0100 	adc.w	r1, r1, #0
 80009d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d8:	bf08      	it	eq
 80009da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f1c4 0520 	rsb	r5, r4, #32
 80009e4:	fa00 f205 	lsl.w	r2, r0, r5
 80009e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009ec:	fa20 f304 	lsr.w	r3, r0, r4
 80009f0:	fa01 f205 	lsl.w	r2, r1, r5
 80009f4:	ea43 0302 	orr.w	r3, r3, r2
 80009f8:	fa21 f004 	lsr.w	r0, r1, r4
 80009fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a00:	fa21 f204 	lsr.w	r2, r1, r4
 8000a04:	ea20 0002 	bic.w	r0, r0, r2
 8000a08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f094 0f00 	teq	r4, #0
 8000a1c:	d10f      	bne.n	8000a3e <__aeabi_dmul+0x1c2>
 8000a1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a22:	0040      	lsls	r0, r0, #1
 8000a24:	eb41 0101 	adc.w	r1, r1, r1
 8000a28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a2c:	bf08      	it	eq
 8000a2e:	3c01      	subeq	r4, #1
 8000a30:	d0f7      	beq.n	8000a22 <__aeabi_dmul+0x1a6>
 8000a32:	ea41 0106 	orr.w	r1, r1, r6
 8000a36:	f095 0f00 	teq	r5, #0
 8000a3a:	bf18      	it	ne
 8000a3c:	4770      	bxne	lr
 8000a3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a42:	0052      	lsls	r2, r2, #1
 8000a44:	eb43 0303 	adc.w	r3, r3, r3
 8000a48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a4c:	bf08      	it	eq
 8000a4e:	3d01      	subeq	r5, #1
 8000a50:	d0f7      	beq.n	8000a42 <__aeabi_dmul+0x1c6>
 8000a52:	ea43 0306 	orr.w	r3, r3, r6
 8000a56:	4770      	bx	lr
 8000a58:	ea94 0f0c 	teq	r4, ip
 8000a5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a60:	bf18      	it	ne
 8000a62:	ea95 0f0c 	teqne	r5, ip
 8000a66:	d00c      	beq.n	8000a82 <__aeabi_dmul+0x206>
 8000a68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a6c:	bf18      	it	ne
 8000a6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a72:	d1d1      	bne.n	8000a18 <__aeabi_dmul+0x19c>
 8000a74:	ea81 0103 	eor.w	r1, r1, r3
 8000a78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a86:	bf06      	itte	eq
 8000a88:	4610      	moveq	r0, r2
 8000a8a:	4619      	moveq	r1, r3
 8000a8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a90:	d019      	beq.n	8000ac6 <__aeabi_dmul+0x24a>
 8000a92:	ea94 0f0c 	teq	r4, ip
 8000a96:	d102      	bne.n	8000a9e <__aeabi_dmul+0x222>
 8000a98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a9c:	d113      	bne.n	8000ac6 <__aeabi_dmul+0x24a>
 8000a9e:	ea95 0f0c 	teq	r5, ip
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_dmul+0x234>
 8000aa4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000aa8:	bf1c      	itt	ne
 8000aaa:	4610      	movne	r0, r2
 8000aac:	4619      	movne	r1, r3
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dmul+0x24a>
 8000ab0:	ea81 0103 	eor.w	r1, r1, r3
 8000ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000abc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ace:	bd70      	pop	{r4, r5, r6, pc}

08000ad0 <__aeabi_ddiv>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ade:	bf1d      	ittte	ne
 8000ae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ae4:	ea94 0f0c 	teqne	r4, ip
 8000ae8:	ea95 0f0c 	teqne	r5, ip
 8000aec:	f000 f8a7 	bleq	8000c3e <__aeabi_ddiv+0x16e>
 8000af0:	eba4 0405 	sub.w	r4, r4, r5
 8000af4:	ea81 0e03 	eor.w	lr, r1, r3
 8000af8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000afc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b00:	f000 8088 	beq.w	8000c14 <__aeabi_ddiv+0x144>
 8000b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b20:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b28:	429d      	cmp	r5, r3
 8000b2a:	bf08      	it	eq
 8000b2c:	4296      	cmpeq	r6, r2
 8000b2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b32:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b36:	d202      	bcs.n	8000b3e <__aeabi_ddiv+0x6e>
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	eb65 0503 	sbc.w	r5, r5, r3
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5a:	bf22      	ittt	cs
 8000b5c:	1ab6      	subcs	r6, r6, r2
 8000b5e:	4675      	movcs	r5, lr
 8000b60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b72:	bf22      	ittt	cs
 8000b74:	1ab6      	subcs	r6, r6, r2
 8000b76:	4675      	movcs	r5, lr
 8000b78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b7c:	085b      	lsrs	r3, r3, #1
 8000b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b82:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b8a:	bf22      	ittt	cs
 8000b8c:	1ab6      	subcs	r6, r6, r2
 8000b8e:	4675      	movcs	r5, lr
 8000b90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ba2:	bf22      	ittt	cs
 8000ba4:	1ab6      	subcs	r6, r6, r2
 8000ba6:	4675      	movcs	r5, lr
 8000ba8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bac:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bb0:	d018      	beq.n	8000be4 <__aeabi_ddiv+0x114>
 8000bb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bce:	d1c0      	bne.n	8000b52 <__aeabi_ddiv+0x82>
 8000bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd4:	d10b      	bne.n	8000bee <__aeabi_ddiv+0x11e>
 8000bd6:	ea41 0100 	orr.w	r1, r1, r0
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000be2:	e7b6      	b.n	8000b52 <__aeabi_ddiv+0x82>
 8000be4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be8:	bf04      	itt	eq
 8000bea:	4301      	orreq	r1, r0
 8000bec:	2000      	moveq	r0, #0
 8000bee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bf2:	bf88      	it	hi
 8000bf4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bf8:	f63f aeaf 	bhi.w	800095a <__aeabi_dmul+0xde>
 8000bfc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c00:	bf04      	itt	eq
 8000c02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c0a:	f150 0000 	adcs.w	r0, r0, #0
 8000c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
 8000c14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c20:	bfc2      	ittt	gt
 8000c22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c2a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c30:	f04f 0e00 	mov.w	lr, #0
 8000c34:	3c01      	subs	r4, #1
 8000c36:	e690      	b.n	800095a <__aeabi_dmul+0xde>
 8000c38:	ea45 0e06 	orr.w	lr, r5, r6
 8000c3c:	e68d      	b.n	800095a <__aeabi_dmul+0xde>
 8000c3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c42:	ea94 0f0c 	teq	r4, ip
 8000c46:	bf08      	it	eq
 8000c48:	ea95 0f0c 	teqeq	r5, ip
 8000c4c:	f43f af3b 	beq.w	8000ac6 <__aeabi_dmul+0x24a>
 8000c50:	ea94 0f0c 	teq	r4, ip
 8000c54:	d10a      	bne.n	8000c6c <__aeabi_ddiv+0x19c>
 8000c56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c5a:	f47f af34 	bne.w	8000ac6 <__aeabi_dmul+0x24a>
 8000c5e:	ea95 0f0c 	teq	r5, ip
 8000c62:	f47f af25 	bne.w	8000ab0 <__aeabi_dmul+0x234>
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	e72c      	b.n	8000ac6 <__aeabi_dmul+0x24a>
 8000c6c:	ea95 0f0c 	teq	r5, ip
 8000c70:	d106      	bne.n	8000c80 <__aeabi_ddiv+0x1b0>
 8000c72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c76:	f43f aefd 	beq.w	8000a74 <__aeabi_dmul+0x1f8>
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	e722      	b.n	8000ac6 <__aeabi_dmul+0x24a>
 8000c80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c84:	bf18      	it	ne
 8000c86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c8a:	f47f aec5 	bne.w	8000a18 <__aeabi_dmul+0x19c>
 8000c8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c92:	f47f af0d 	bne.w	8000ab0 <__aeabi_dmul+0x234>
 8000c96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c9a:	f47f aeeb 	bne.w	8000a74 <__aeabi_dmul+0x1f8>
 8000c9e:	e712      	b.n	8000ac6 <__aeabi_dmul+0x24a>

08000ca0 <__gedf2>:
 8000ca0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ca4:	e006      	b.n	8000cb4 <__cmpdf2+0x4>
 8000ca6:	bf00      	nop

08000ca8 <__ledf2>:
 8000ca8:	f04f 0c01 	mov.w	ip, #1
 8000cac:	e002      	b.n	8000cb4 <__cmpdf2+0x4>
 8000cae:	bf00      	nop

08000cb0 <__cmpdf2>:
 8000cb0:	f04f 0c01 	mov.w	ip, #1
 8000cb4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cca:	d01b      	beq.n	8000d04 <__cmpdf2+0x54>
 8000ccc:	b001      	add	sp, #4
 8000cce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cd2:	bf0c      	ite	eq
 8000cd4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cd8:	ea91 0f03 	teqne	r1, r3
 8000cdc:	bf02      	ittt	eq
 8000cde:	ea90 0f02 	teqeq	r0, r2
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	4770      	bxeq	lr
 8000ce6:	f110 0f00 	cmn.w	r0, #0
 8000cea:	ea91 0f03 	teq	r1, r3
 8000cee:	bf58      	it	pl
 8000cf0:	4299      	cmppl	r1, r3
 8000cf2:	bf08      	it	eq
 8000cf4:	4290      	cmpeq	r0, r2
 8000cf6:	bf2c      	ite	cs
 8000cf8:	17d8      	asrcs	r0, r3, #31
 8000cfa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cfe:	f040 0001 	orr.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	d102      	bne.n	8000d14 <__cmpdf2+0x64>
 8000d0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d12:	d107      	bne.n	8000d24 <__cmpdf2+0x74>
 8000d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d1c:	d1d6      	bne.n	8000ccc <__cmpdf2+0x1c>
 8000d1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d22:	d0d3      	beq.n	8000ccc <__cmpdf2+0x1c>
 8000d24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <__aeabi_cdrcmple>:
 8000d2c:	4684      	mov	ip, r0
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4662      	mov	r2, ip
 8000d32:	468c      	mov	ip, r1
 8000d34:	4619      	mov	r1, r3
 8000d36:	4663      	mov	r3, ip
 8000d38:	e000      	b.n	8000d3c <__aeabi_cdcmpeq>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_cdcmpeq>:
 8000d3c:	b501      	push	{r0, lr}
 8000d3e:	f7ff ffb7 	bl	8000cb0 <__cmpdf2>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	bf48      	it	mi
 8000d46:	f110 0f00 	cmnmi.w	r0, #0
 8000d4a:	bd01      	pop	{r0, pc}

08000d4c <__aeabi_dcmpeq>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff fff4 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d54:	bf0c      	ite	eq
 8000d56:	2001      	moveq	r0, #1
 8000d58:	2000      	movne	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_dcmplt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffea 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_dcmple>:
 8000d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d78:	f7ff ffe0 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d7c:	bf94      	ite	ls
 8000d7e:	2001      	movls	r0, #1
 8000d80:	2000      	movhi	r0, #0
 8000d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d86:	bf00      	nop

08000d88 <__aeabi_dcmpge>:
 8000d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d8c:	f7ff ffce 	bl	8000d2c <__aeabi_cdrcmple>
 8000d90:	bf94      	ite	ls
 8000d92:	2001      	movls	r0, #1
 8000d94:	2000      	movhi	r0, #0
 8000d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9a:	bf00      	nop

08000d9c <__aeabi_dcmpgt>:
 8000d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da0:	f7ff ffc4 	bl	8000d2c <__aeabi_cdrcmple>
 8000da4:	bf34      	ite	cc
 8000da6:	2001      	movcc	r0, #1
 8000da8:	2000      	movcs	r0, #0
 8000daa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dae:	bf00      	nop

08000db0 <__aeabi_d2uiz>:
 8000db0:	004a      	lsls	r2, r1, #1
 8000db2:	d211      	bcs.n	8000dd8 <__aeabi_d2uiz+0x28>
 8000db4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000db8:	d211      	bcs.n	8000dde <__aeabi_d2uiz+0x2e>
 8000dba:	d50d      	bpl.n	8000dd8 <__aeabi_d2uiz+0x28>
 8000dbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000dc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dc4:	d40e      	bmi.n	8000de4 <__aeabi_d2uiz+0x34>
 8000dc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd6:	4770      	bx	lr
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	4770      	bx	lr
 8000dde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000de2:	d102      	bne.n	8000dea <__aeabi_d2uiz+0x3a>
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de8:	4770      	bx	lr
 8000dea:	f04f 0000 	mov.w	r0, #0
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_uldivmod>:
 8000df0:	b953      	cbnz	r3, 8000e08 <__aeabi_uldivmod+0x18>
 8000df2:	b94a      	cbnz	r2, 8000e08 <__aeabi_uldivmod+0x18>
 8000df4:	2900      	cmp	r1, #0
 8000df6:	bf08      	it	eq
 8000df8:	2800      	cmpeq	r0, #0
 8000dfa:	bf1c      	itt	ne
 8000dfc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 b9fe 	b.w	8001204 <__aeabi_idiv0>
 8000e08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e10:	f000 f83c 	bl	8000e8c <__udivmoddi4>
 8000e14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_d2lz>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	2200      	movs	r2, #0
 8000e24:	2300      	movs	r3, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	460d      	mov	r5, r1
 8000e2a:	f7ff ff99 	bl	8000d60 <__aeabi_dcmplt>
 8000e2e:	b928      	cbnz	r0, 8000e3c <__aeabi_d2lz+0x1c>
 8000e30:	4620      	mov	r0, r4
 8000e32:	4629      	mov	r1, r5
 8000e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e38:	f000 b80a 	b.w	8000e50 <__aeabi_d2ulz>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e42:	f000 f805 	bl	8000e50 <__aeabi_d2ulz>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	bd38      	pop	{r3, r4, r5, pc}
 8000e4e:	bf00      	nop

08000e50 <__aeabi_d2ulz>:
 8000e50:	b5d0      	push	{r4, r6, r7, lr}
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__aeabi_d2ulz+0x34>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	4606      	mov	r6, r0
 8000e58:	460f      	mov	r7, r1
 8000e5a:	f7ff fd0f 	bl	800087c <__aeabi_dmul>
 8000e5e:	f7ff ffa7 	bl	8000db0 <__aeabi_d2uiz>
 8000e62:	4604      	mov	r4, r0
 8000e64:	f7ff fc90 	bl	8000788 <__aeabi_ui2d>
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <__aeabi_d2ulz+0x38>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f7ff fd06 	bl	800087c <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4630      	mov	r0, r6
 8000e76:	4639      	mov	r1, r7
 8000e78:	f7ff fb48 	bl	800050c <__aeabi_dsub>
 8000e7c:	f7ff ff98 	bl	8000db0 <__aeabi_d2uiz>
 8000e80:	4621      	mov	r1, r4
 8000e82:	bdd0      	pop	{r4, r6, r7, pc}
 8000e84:	3df00000 	.word	0x3df00000
 8000e88:	41f00000 	.word	0x41f00000

08000e8c <__udivmoddi4>:
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	9d08      	ldr	r5, [sp, #32]
 8000e92:	4604      	mov	r4, r0
 8000e94:	468e      	mov	lr, r1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14d      	bne.n	8000f36 <__udivmoddi4+0xaa>
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	4694      	mov	ip, r2
 8000e9e:	d969      	bls.n	8000f74 <__udivmoddi4+0xe8>
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	b152      	cbz	r2, 8000ebc <__udivmoddi4+0x30>
 8000ea6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eaa:	f1c2 0120 	rsb	r1, r2, #32
 8000eae:	fa20 f101 	lsr.w	r1, r0, r1
 8000eb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000eba:	4094      	lsls	r4, r2
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	0c21      	lsrs	r1, r4, #16
 8000ec2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ec6:	fa1f f78c 	uxth.w	r7, ip
 8000eca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ece:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ed2:	fb06 f107 	mul.w	r1, r6, r7
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d90a      	bls.n	8000ef0 <__udivmoddi4+0x64>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ee2:	f080 811f 	bcs.w	8001124 <__udivmoddi4+0x298>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 811c 	bls.w	8001124 <__udivmoddi4+0x298>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef8:	fb08 3310 	mls	r3, r8, r0, r3
 8000efc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f00:	fb00 f707 	mul.w	r7, r0, r7
 8000f04:	42a7      	cmp	r7, r4
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x92>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f10:	f080 810a 	bcs.w	8001128 <__udivmoddi4+0x29c>
 8000f14:	42a7      	cmp	r7, r4
 8000f16:	f240 8107 	bls.w	8001128 <__udivmoddi4+0x29c>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	1be4      	subs	r4, r4, r7
 8000f24:	2600      	movs	r6, #0
 8000f26:	b11d      	cbz	r5, 8000f30 <__udivmoddi4+0xa4>
 8000f28:	40d4      	lsrs	r4, r2
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d909      	bls.n	8000f4e <__udivmoddi4+0xc2>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	f000 80ef 	beq.w	800111e <__udivmoddi4+0x292>
 8000f40:	2600      	movs	r6, #0
 8000f42:	e9c5 0100 	strd	r0, r1, [r5]
 8000f46:	4630      	mov	r0, r6
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	fab3 f683 	clz	r6, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d14a      	bne.n	8000fec <__udivmoddi4+0x160>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d302      	bcc.n	8000f60 <__udivmoddi4+0xd4>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	f200 80f9 	bhi.w	8001152 <__udivmoddi4+0x2c6>
 8000f60:	1a84      	subs	r4, r0, r2
 8000f62:	eb61 0303 	sbc.w	r3, r1, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	469e      	mov	lr, r3
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	d0e0      	beq.n	8000f30 <__udivmoddi4+0xa4>
 8000f6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f72:	e7dd      	b.n	8000f30 <__udivmoddi4+0xa4>
 8000f74:	b902      	cbnz	r2, 8000f78 <__udivmoddi4+0xec>
 8000f76:	deff      	udf	#255	; 0xff
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	f040 8092 	bne.w	80010a6 <__udivmoddi4+0x21a>
 8000f82:	eba1 010c 	sub.w	r1, r1, ip
 8000f86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8a:	fa1f fe8c 	uxth.w	lr, ip
 8000f8e:	2601      	movs	r6, #1
 8000f90:	0c20      	lsrs	r0, r4, #16
 8000f92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f96:	fb07 1113 	mls	r1, r7, r3, r1
 8000f9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f9e:	fb0e f003 	mul.w	r0, lr, r3
 8000fa2:	4288      	cmp	r0, r1
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x12c>
 8000fa6:	eb1c 0101 	adds.w	r1, ip, r1
 8000faa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x12a>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f200 80cb 	bhi.w	800114c <__udivmoddi4+0x2c0>
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	1a09      	subs	r1, r1, r0
 8000fba:	b2a4      	uxth	r4, r4
 8000fbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000fc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000fcc:	45a6      	cmp	lr, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x156>
 8000fd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fd8:	d202      	bcs.n	8000fe0 <__udivmoddi4+0x154>
 8000fda:	45a6      	cmp	lr, r4
 8000fdc:	f200 80bb 	bhi.w	8001156 <__udivmoddi4+0x2ca>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	eba4 040e 	sub.w	r4, r4, lr
 8000fe6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fea:	e79c      	b.n	8000f26 <__udivmoddi4+0x9a>
 8000fec:	f1c6 0720 	rsb	r7, r6, #32
 8000ff0:	40b3      	lsls	r3, r6
 8000ff2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffa:	fa20 f407 	lsr.w	r4, r0, r7
 8000ffe:	fa01 f306 	lsl.w	r3, r1, r6
 8001002:	431c      	orrs	r4, r3
 8001004:	40f9      	lsrs	r1, r7
 8001006:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800100a:	fa00 f306 	lsl.w	r3, r0, r6
 800100e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001012:	0c20      	lsrs	r0, r4, #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fb09 1118 	mls	r1, r9, r8, r1
 800101c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001020:	fb08 f00e 	mul.w	r0, r8, lr
 8001024:	4288      	cmp	r0, r1
 8001026:	fa02 f206 	lsl.w	r2, r2, r6
 800102a:	d90b      	bls.n	8001044 <__udivmoddi4+0x1b8>
 800102c:	eb1c 0101 	adds.w	r1, ip, r1
 8001030:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001034:	f080 8088 	bcs.w	8001148 <__udivmoddi4+0x2bc>
 8001038:	4288      	cmp	r0, r1
 800103a:	f240 8085 	bls.w	8001148 <__udivmoddi4+0x2bc>
 800103e:	f1a8 0802 	sub.w	r8, r8, #2
 8001042:	4461      	add	r1, ip
 8001044:	1a09      	subs	r1, r1, r0
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb1 f0f9 	udiv	r0, r1, r9
 800104c:	fb09 1110 	mls	r1, r9, r0, r1
 8001050:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001054:	fb00 fe0e 	mul.w	lr, r0, lr
 8001058:	458e      	cmp	lr, r1
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x1e2>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8001064:	d26c      	bcs.n	8001140 <__udivmoddi4+0x2b4>
 8001066:	458e      	cmp	lr, r1
 8001068:	d96a      	bls.n	8001140 <__udivmoddi4+0x2b4>
 800106a:	3802      	subs	r0, #2
 800106c:	4461      	add	r1, ip
 800106e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001072:	fba0 9402 	umull	r9, r4, r0, r2
 8001076:	eba1 010e 	sub.w	r1, r1, lr
 800107a:	42a1      	cmp	r1, r4
 800107c:	46c8      	mov	r8, r9
 800107e:	46a6      	mov	lr, r4
 8001080:	d356      	bcc.n	8001130 <__udivmoddi4+0x2a4>
 8001082:	d053      	beq.n	800112c <__udivmoddi4+0x2a0>
 8001084:	b15d      	cbz	r5, 800109e <__udivmoddi4+0x212>
 8001086:	ebb3 0208 	subs.w	r2, r3, r8
 800108a:	eb61 010e 	sbc.w	r1, r1, lr
 800108e:	fa01 f707 	lsl.w	r7, r1, r7
 8001092:	fa22 f306 	lsr.w	r3, r2, r6
 8001096:	40f1      	lsrs	r1, r6
 8001098:	431f      	orrs	r7, r3
 800109a:	e9c5 7100 	strd	r7, r1, [r5]
 800109e:	2600      	movs	r6, #0
 80010a0:	4631      	mov	r1, r6
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	f1c2 0320 	rsb	r3, r2, #32
 80010aa:	40d8      	lsrs	r0, r3
 80010ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80010b0:	fa21 f303 	lsr.w	r3, r1, r3
 80010b4:	4091      	lsls	r1, r2
 80010b6:	4301      	orrs	r1, r0
 80010b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010bc:	fa1f fe8c 	uxth.w	lr, ip
 80010c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80010c4:	fb07 3610 	mls	r6, r7, r0, r3
 80010c8:	0c0b      	lsrs	r3, r1, #16
 80010ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010ce:	fb00 f60e 	mul.w	r6, r0, lr
 80010d2:	429e      	cmp	r6, r3
 80010d4:	fa04 f402 	lsl.w	r4, r4, r2
 80010d8:	d908      	bls.n	80010ec <__udivmoddi4+0x260>
 80010da:	eb1c 0303 	adds.w	r3, ip, r3
 80010de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010e2:	d22f      	bcs.n	8001144 <__udivmoddi4+0x2b8>
 80010e4:	429e      	cmp	r6, r3
 80010e6:	d92d      	bls.n	8001144 <__udivmoddi4+0x2b8>
 80010e8:	3802      	subs	r0, #2
 80010ea:	4463      	add	r3, ip
 80010ec:	1b9b      	subs	r3, r3, r6
 80010ee:	b289      	uxth	r1, r1
 80010f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80010f4:	fb07 3316 	mls	r3, r7, r6, r3
 80010f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fc:	fb06 f30e 	mul.w	r3, r6, lr
 8001100:	428b      	cmp	r3, r1
 8001102:	d908      	bls.n	8001116 <__udivmoddi4+0x28a>
 8001104:	eb1c 0101 	adds.w	r1, ip, r1
 8001108:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800110c:	d216      	bcs.n	800113c <__udivmoddi4+0x2b0>
 800110e:	428b      	cmp	r3, r1
 8001110:	d914      	bls.n	800113c <__udivmoddi4+0x2b0>
 8001112:	3e02      	subs	r6, #2
 8001114:	4461      	add	r1, ip
 8001116:	1ac9      	subs	r1, r1, r3
 8001118:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800111c:	e738      	b.n	8000f90 <__udivmoddi4+0x104>
 800111e:	462e      	mov	r6, r5
 8001120:	4628      	mov	r0, r5
 8001122:	e705      	b.n	8000f30 <__udivmoddi4+0xa4>
 8001124:	4606      	mov	r6, r0
 8001126:	e6e3      	b.n	8000ef0 <__udivmoddi4+0x64>
 8001128:	4618      	mov	r0, r3
 800112a:	e6f8      	b.n	8000f1e <__udivmoddi4+0x92>
 800112c:	454b      	cmp	r3, r9
 800112e:	d2a9      	bcs.n	8001084 <__udivmoddi4+0x1f8>
 8001130:	ebb9 0802 	subs.w	r8, r9, r2
 8001134:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001138:	3801      	subs	r0, #1
 800113a:	e7a3      	b.n	8001084 <__udivmoddi4+0x1f8>
 800113c:	4646      	mov	r6, r8
 800113e:	e7ea      	b.n	8001116 <__udivmoddi4+0x28a>
 8001140:	4620      	mov	r0, r4
 8001142:	e794      	b.n	800106e <__udivmoddi4+0x1e2>
 8001144:	4640      	mov	r0, r8
 8001146:	e7d1      	b.n	80010ec <__udivmoddi4+0x260>
 8001148:	46d0      	mov	r8, sl
 800114a:	e77b      	b.n	8001044 <__udivmoddi4+0x1b8>
 800114c:	3b02      	subs	r3, #2
 800114e:	4461      	add	r1, ip
 8001150:	e732      	b.n	8000fb8 <__udivmoddi4+0x12c>
 8001152:	4630      	mov	r0, r6
 8001154:	e709      	b.n	8000f6a <__udivmoddi4+0xde>
 8001156:	4464      	add	r4, ip
 8001158:	3802      	subs	r0, #2
 800115a:	e742      	b.n	8000fe2 <__udivmoddi4+0x156>

0800115c <__gthread_active_p>:
 800115c:	2000      	movs	r0, #0
 800115e:	4770      	bx	lr

08001160 <emutls_alloc>:
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	6845      	ldr	r5, [r0, #4]
 8001164:	6806      	ldr	r6, [r0, #0]
 8001166:	2d04      	cmp	r5, #4
 8001168:	4604      	mov	r4, r0
 800116a:	d80f      	bhi.n	800118c <emutls_alloc+0x2c>
 800116c:	1d30      	adds	r0, r6, #4
 800116e:	f011 febd 	bl	8012eec <malloc>
 8001172:	4603      	mov	r3, r0
 8001174:	b1f8      	cbz	r0, 80011b6 <emutls_alloc+0x56>
 8001176:	68e1      	ldr	r1, [r4, #12]
 8001178:	6000      	str	r0, [r0, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	4632      	mov	r2, r6
 800117e:	4618      	mov	r0, r3
 8001180:	b1a1      	cbz	r1, 80011ac <emutls_alloc+0x4c>
 8001182:	f011 fed3 	bl	8012f2c <memcpy>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	19a8      	adds	r0, r5, r6
 800118e:	3003      	adds	r0, #3
 8001190:	f011 feac 	bl	8012eec <malloc>
 8001194:	b178      	cbz	r0, 80011b6 <emutls_alloc+0x56>
 8001196:	1ceb      	adds	r3, r5, #3
 8001198:	4403      	add	r3, r0
 800119a:	426d      	negs	r5, r5
 800119c:	402b      	ands	r3, r5
 800119e:	4632      	mov	r2, r6
 80011a0:	f843 0c04 	str.w	r0, [r3, #-4]
 80011a4:	68e1      	ldr	r1, [r4, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	2900      	cmp	r1, #0
 80011aa:	d1ea      	bne.n	8001182 <emutls_alloc+0x22>
 80011ac:	f011 fecc 	bl	8012f48 <memset>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	f015 fde1 	bl	8016d7c <abort>
 80011ba:	bf00      	nop

080011bc <__emutls_get_address>:
 80011bc:	b510      	push	{r4, lr}
 80011be:	4604      	mov	r4, r0
 80011c0:	f7ff ffcc 	bl	800115c <__gthread_active_p>
 80011c4:	b938      	cbnz	r0, 80011d6 <__emutls_get_address+0x1a>
 80011c6:	68a0      	ldr	r0, [r4, #8]
 80011c8:	b100      	cbz	r0, 80011cc <__emutls_get_address+0x10>
 80011ca:	bd10      	pop	{r4, pc}
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff ffc7 	bl	8001160 <emutls_alloc>
 80011d2:	60a0      	str	r0, [r4, #8]
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	f015 fdd1 	bl	8016d7c <abort>
 80011da:	bf00      	nop

080011dc <__emutls_register_common>:
 80011dc:	b410      	push	{r4}
 80011de:	6804      	ldr	r4, [r0, #0]
 80011e0:	428c      	cmp	r4, r1
 80011e2:	d202      	bcs.n	80011ea <__emutls_register_common+0xe>
 80011e4:	2400      	movs	r4, #0
 80011e6:	6001      	str	r1, [r0, #0]
 80011e8:	60c4      	str	r4, [r0, #12]
 80011ea:	6844      	ldr	r4, [r0, #4]
 80011ec:	4294      	cmp	r4, r2
 80011ee:	bf38      	it	cc
 80011f0:	6042      	strcc	r2, [r0, #4]
 80011f2:	b11b      	cbz	r3, 80011fc <__emutls_register_common+0x20>
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	428a      	cmp	r2, r1
 80011f8:	bf08      	it	eq
 80011fa:	60c3      	streq	r3, [r0, #12]
 80011fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__aeabi_idiv0>:
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001210:	2334      	movs	r3, #52	; 0x34
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <tx_application_define+0x74>)
 800121a:	4919      	ldr	r1, [pc, #100]	; (8001280 <tx_application_define+0x78>)
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <tx_application_define+0x7c>)
 800121e:	f011 f9a3 	bl	8012568 <_txe_byte_pool_create>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 8001228:	f000 f98a 	bl	8001540 <Error_Handler>
 800122c:	e009      	b.n	8001242 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <tx_application_define+0x7c>)
 8001230:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f82e 	bl	8001294 <App_ThreadX_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 800123e:	f000 f97f 	bl	8001540 <Error_Handler>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001242:	2334      	movs	r3, #52	; 0x34
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <tx_application_define+0x80>)
 800124c:	490f      	ldr	r1, [pc, #60]	; (800128c <tx_application_define+0x84>)
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <tx_application_define+0x88>)
 8001250:	f011 f98a 	bl	8012568 <_txe_byte_pool_create>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <tx_application_define+0x58>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Error */
    Error_Handler();
 800125a:	f000 f971 	bl	8001540 <Error_Handler>
    /* USER CODE BEGIN MX_FileX_Init_Success */

    /* USER CODE END MX_FileX_Init_Success */
  }

}
 800125e:	e009      	b.n	8001274 <tx_application_define+0x6c>
    memory_ptr = (VOID *)&fx_app_byte_pool;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <tx_application_define+0x88>)
 8001262:	60fb      	str	r3, [r7, #12]
    if (MX_FileX_Init(memory_ptr) != FX_SUCCESS)
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 fafd 	bl	8001864 <MX_FileX_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <tx_application_define+0x6c>
      Error_Handler();
 8001270:	f000 f966 	bl	8001540 <Error_Handler>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000278 	.word	0x20000278
 8001280:	08016e40 	.word	0x08016e40
 8001284:	20002278 	.word	0x20002278
 8001288:	200022ac 	.word	0x200022ac
 800128c:	08016e54 	.word	0x08016e54
 8001290:	200032ac 	.word	0x200032ac

08001294 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80012b6:	f010 f8ad 	bl	8011414 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f001 fd63 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f849 	bl	800135c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LED */
  BSP_LED_Init(LED_GREEN);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fd60 	bl	8001d90 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 fd5d 	bl	8001d90 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f8dd 	bl	8001494 <MX_GPIO_Init>
  MX_DMA_Init();
 80012da:	f000 f8b3 	bl	8001444 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Configuration => ajouté par moi */
  LCD_Config();
 80012de:	f000 f803 	bl	80012e8 <LCD_Config>


  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80012e2:	f7ff ffe6 	bl	80012b2 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <main+0x28>

080012e8 <LCD_Config>:
  * @brief lcd Configuration
  * @retval None
  * =>ajouté par moi
  */
static void LCD_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	uint8_t lcd_status = LCD_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]

  /* LCD DSI initialization */
  lcd_status = BSP_LCD_Init();
 80012f2:	f000 fe14 	bl	8001f1e <BSP_LCD_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if(lcd_status != LCD_OK)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <LCD_Config+0x1c>
  {
    Error_Handler();
 8001300:	f000 f91e 	bl	8001540 <Error_Handler>
  }

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001304:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001308:	2000      	movs	r0, #0
 800130a:	f000 ffa9 	bl	8002260 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f001 f806 	bl	8002320 <BSP_LCD_SelectLayer>

  /* Clear the LCD Background layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f001 f85e 	bl	80023d8 <BSP_LCD_Clear>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <LCD_Config+0x68>)
 800131e:	f001 f841 	bl	80023a4 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001326:	f001 f823 	bl	8002370 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800132a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132e:	f001 f853 	bl	80023d8 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <LCD_Config+0x6c>)
 8001334:	f001 f804 	bl	8002340 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 430, (uint8_t *)"Application BMP_Image_Decoding", CENTER_MODE);
 8001338:	2301      	movs	r3, #1
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <LCD_Config+0x70>)
 800133c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001340:	2000      	movs	r0, #0
 8001342:	f001 f8b5 	bl	80024b0 <BSP_LCD_DisplayStringAt>

  /* Compute centered position to draw on screen the decoded pixels */
  //Xpos = (uint16_t)((BSP_LCD_GetXSize() - IMAGE_WIDTH) / 2);
  //Ypos = (uint16_t)((BSP_LCD_GetYSize() - IMAGE_HEIGHT) / 2);
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000044 	.word	0x20000044
 8001354:	ff000080 	.word	0xff000080
 8001358:	08016e68 	.word	0x08016e68

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2234      	movs	r2, #52	; 0x34
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f011 fdec 	bl	8012f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <SystemClock_Config+0xe0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <SystemClock_Config+0xe0>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <SystemClock_Config+0xe0>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <SystemClock_Config+0xe4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <SystemClock_Config+0xe4>)
 80013a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <SystemClock_Config+0xe4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013cc:	2308      	movs	r3, #8
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80013d0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013da:	2308      	movs	r3, #8
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fb16 	bl	8005a18 <HAL_RCC_OscConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013f2:	f000 f8a5 	bl	8001540 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013f6:	f003 fe43 	bl	8005080 <HAL_PWREx_EnableOverDrive>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001400:	f000 f89e 	bl	8001540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001410:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2105      	movs	r1, #5
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fe7c 	bl	8005120 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800142e:	f000 f887 	bl	8001540 <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	; 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_DMA_Init>:
/**
  * Enable DMA controller clock
  */

static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_DMA_Init+0x4c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_DMA_Init+0x4c>)
 8001454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_DMA_Init+0x4c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 15, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210f      	movs	r1, #15
 800146a:	203b      	movs	r0, #59	; 0x3b
 800146c:	f001 fdac 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001470:	203b      	movs	r0, #59	; 0x3b
 8001472:	f001 fdc5 	bl	8003000 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 15, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	210f      	movs	r1, #15
 800147a:	2045      	movs	r0, #69	; 0x45
 800147c:	f001 fda4 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001480:	2045      	movs	r0, #69	; 0x45
 8001482:	f001 fdbd 	bl	8003000 <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_GPIO_Init+0x84>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <MX_GPIO_Init+0x84>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_GPIO_Init+0x84>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_GPIO_Init+0x84>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <MX_GPIO_Init+0x84>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_GPIO_Init+0x84>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_GPIO_Init+0x84>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <MX_GPIO_Init+0x84>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_GPIO_Init+0x84>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_GPIO_Init+0x84>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <MX_GPIO_Init+0x84>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_GPIO_Init+0x84>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800152e:	f001 fc4f 	bl	8002dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40001000 	.word	0x40001000

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_GREEN);
 8001544:	2000      	movs	r0, #0
 8001546:	f000 fca3 	bl	8001e90 <BSP_LED_Off>
  while (1)
  {
    BSP_LED_Toggle(LED_RED);
 800154a:	2002      	movs	r0, #2
 800154c:	f000 fcbe 	bl	8001ecc <BSP_LED_Toggle>
    HAL_Delay(200);
 8001550:	20c8      	movs	r0, #200	; 0xc8
 8001552:	f001 fc5d 	bl	8002e10 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 8001556:	e7f8      	b.n	800154a <Error_Handler+0xa>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_MspInit+0x4c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2036      	movs	r0, #54	; 0x36
 80015be:	f001 fd03 	bl	8002fc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c2:	2036      	movs	r0, #54	; 0x36
 80015c4:	f001 fd1c 	bl	8003000 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_InitTick+0xa4>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_InitTick+0xa4>)
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_InitTick+0xa4>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015e4:	f107 0210 	add.w	r2, r7, #16
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 ffa2 	bl	8005538 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015f4:	f003 ff8c 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 80015f8:	4603      	mov	r3, r0
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_InitTick+0xa8>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0c9b      	lsrs	r3, r3, #18
 8001608:	3b01      	subs	r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_InitTick+0xac>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_InitTick+0xb0>)
 8001610:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_InitTick+0xac>)
 8001614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001618:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_InitTick+0xac>)
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_InitTick+0xac>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_InitTick+0xac>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_InitTick+0xac>)
 800162e:	f004 ffe6 	bl	80065fe <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d104      	bne.n	8001642 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <HAL_InitTick+0xac>)
 800163a:	f005 f839 	bl	80066b0 <HAL_TIM_Base_Start_IT>
 800163e:	4603      	mov	r3, r0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	431bde83 	.word	0x431bde83
 8001654:	20003424 	.word	0x20003424
 8001658:	40001000 	.word	0x40001000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <SDIO_IRQHandler+0x10>)
 800168e:	f004 fc47 	bl	8005f20 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200032e0 	.word	0x200032e0

0800169c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM6_DAC_IRQHandler+0x10>)
 80016a2:	f005 f875 	bl	8006790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20003424 	.word	0x20003424

080016b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <DMA2_Stream3_IRQHandler+0x10>)
 80016b6:	f001 fddf 	bl	8003278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20003364 	.word	0x20003364

080016c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA2_Stream6_IRQHandler+0x10>)
 80016ca:	f001 fdd5 	bl	8003278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200033c4 	.word	0x200033c4

080016d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_kill>:

int _kill(int pid, int sig)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016f2:	f011 f8f1 	bl	80128d8 <__errno>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2216      	movs	r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
	return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_exit>:

void _exit (int status)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffe7 	bl	80016e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800171a:	e7fe      	b.n	800171a <_exit+0x12>

0800171c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
	}

return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e009      	b.n	800177c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf1      	blt.n	8001768 <_write+0x12>
	}
	return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
	return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f011 f856 	bl	80128d8 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20050000 	.word	0x20050000
 8001858:	00000400 	.word	0x00000400
 800185c:	2000346c 	.word	0x2000346c
 8001860:	20003e88 	.word	0x20003e88

08001864 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af08      	add	r7, sp, #32
 800186a:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN MX_FileX_Init */
  VOID *pointer;

  /* Allocate memory for the main thread's stack */
  ret = tx_byte_allocate(byte_pool, &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	2300      	movs	r3, #0
 800187a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800187e:	6938      	ldr	r0, [r7, #16]
 8001880:	f010 fdfe 	bl	8012480 <_txe_byte_allocate>
 8001884:	6178      	str	r0, [r7, #20]

  if (ret != FX_SUCCESS)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_FileX_Init+0x2c>
  {
    /* Failed at allocating memory */
    Error_Handler();
 800188c:	f7ff fe58 	bl	8001540 <Error_Handler>
  }

  /* Create the main thread.  */
  tx_thread_create(&fx_app_thread, "FileX App Thread", fx_thread_entry, 0, pointer, DEFAULT_STACK_SIZE,
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	22b4      	movs	r2, #180	; 0xb4
 8001894:	9206      	str	r2, [sp, #24]
 8001896:	2201      	movs	r2, #1
 8001898:	9205      	str	r2, [sp, #20]
 800189a:	2200      	movs	r2, #0
 800189c:	9204      	str	r2, [sp, #16]
 800189e:	220a      	movs	r2, #10
 80018a0:	9203      	str	r2, [sp, #12]
 80018a2:	220a      	movs	r2, #10
 80018a4:	9202      	str	r2, [sp, #8]
 80018a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018aa:	9201      	str	r2, [sp, #4]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <MX_FileX_Init+0x64>)
 80018b2:	4906      	ldr	r1, [pc, #24]	; (80018cc <MX_FileX_Init+0x68>)
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_FileX_Init+0x6c>)
 80018b6:	f010 ff15 	bl	80126e4 <_txe_thread_create>
                   DEFAULT_THREAD_PRIO, DEFAULT_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);

  /* Initialize FileX.  */
  fx_system_initialize();
 80018ba:	f005 fc29 	bl	8007110 <_fx_system_initialize>

  /* USER CODE END MX_FileX_Init */
  return ret;
 80018be:	697b      	ldr	r3, [r7, #20]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	080018d5 	.word	0x080018d5
 80018cc:	08016e8c 	.word	0x08016e8c
 80018d0:	20003474 	.word	0x20003474

080018d4 <fx_thread_entry>:

/* USER CODE BEGIN 1 */

void fx_thread_entry(ULONG thread_input)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
/* UINT status;
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";*/
  //sail_load_image_from_memory((const void *)bmp_buffer, bmp_buffer_len, &image_bmp);
	UINT check_load_image=SAIL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]

	check_load_image = sail_load_image_from_memory(bmp_buffer, bmp_buffer_len, &fst_bmp);
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <fx_thread_entry+0x34>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <fx_thread_entry+0x38>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <fx_thread_entry+0x3c>)
 80018ec:	4619      	mov	r1, r3
 80018ee:	f00d ff25 	bl	800f73c <sail_load_image_from_memory>
 80018f2:	4603      	mov	r3, r0
 80018f4:	60fb      	str	r3, [r7, #12]
	if(check_load_image != SAIL_OK)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <fx_thread_entry+0x2c>
	{
		Error_Handler();
 80018fc:	f7ff fe20 	bl	8001540 <Error_Handler>
  {
    BSP_LED_Toggle(LED_GREEN);
    tx_thread_sleep(50);
  }
#endif
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08019908 	.word	0x08019908
 800190c:	20000020 	.word	0x20000020
 8001910:	20003470 	.word	0x20003470

08001914 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <HAL_SD_TxCpltCallback+0x18>)
 800191e:	f010 fec3 	bl	80126a8 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20003528 	.word	0x20003528

08001930 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <HAL_SD_RxCpltCallback+0x18>)
 800193a:	f010 feb5 	bl	80126a8 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20003528 	.word	0x20003528

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001952:	490e      	ldr	r1, [pc, #56]	; (800198c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001968:	4c0b      	ldr	r4, [pc, #44]	; (8001998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001976:	f001 f9f7 	bl	8002d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197a:	f011 fa2b 	bl	8012dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7ff fc9e 	bl	80012be <main>
  bx  lr    
 8001982:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001984:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001990:	0801cce4 	.word	0x0801cce4
  ldr r2, =_sbss
 8001994:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001998:	20003e84 	.word	0x20003e84

0800199c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC_IRQHandler>
	...

080019a0 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0b2      	sub	sp, #200	; 0xc8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 80019aa:	2078      	movs	r0, #120	; 0x78
 80019ac:	f000 faac 	bl	8001f08 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80019b0:	4ac8      	ldr	r2, [pc, #800]	; (8001cd4 <NT35510_Init+0x334>)
 80019b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ba:	6018      	str	r0, [r3, #0]
 80019bc:	3304      	adds	r3, #4
 80019be:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80019c0:	4bc5      	ldr	r3, [pc, #788]	; (8001cd8 <NT35510_Init+0x338>)
 80019c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80019c6:	4bc5      	ldr	r3, [pc, #788]	; (8001cdc <NT35510_Init+0x33c>)
 80019c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80019cc:	4bc4      	ldr	r3, [pc, #784]	; (8001ce0 <NT35510_Init+0x340>)
 80019ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 80019d2:	4bc4      	ldr	r3, [pc, #784]	; (8001ce4 <NT35510_Init+0x344>)
 80019d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 80019d8:	4bc3      	ldr	r3, [pc, #780]	; (8001ce8 <NT35510_Init+0x348>)
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 80019de:	4bc3      	ldr	r3, [pc, #780]	; (8001cec <NT35510_Init+0x34c>)
 80019e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 80019e4:	f240 13bf 	movw	r3, #447	; 0x1bf
 80019e8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 80019ec:	4bc0      	ldr	r3, [pc, #768]	; (8001cf0 <NT35510_Init+0x350>)
 80019ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 80019f2:	4bc0      	ldr	r3, [pc, #768]	; (8001cf4 <NT35510_Init+0x354>)
 80019f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 80019f8:	4bbf      	ldr	r3, [pc, #764]	; (8001cf8 <NT35510_Init+0x358>)
 80019fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 80019fe:	4bbf      	ldr	r3, [pc, #764]	; (8001cfc <NT35510_Init+0x35c>)
 8001a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8001a04:	4bbe      	ldr	r3, [pc, #760]	; (8001d00 <NT35510_Init+0x360>)
 8001a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8001a0a:	4bbe      	ldr	r3, [pc, #760]	; (8001d04 <NT35510_Init+0x364>)
 8001a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8001a10:	4abd      	ldr	r2, [pc, #756]	; (8001d08 <NT35510_Init+0x368>)
 8001a12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	8019      	strh	r1, [r3, #0]
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	0c12      	lsrs	r2, r2, #16
 8001a20:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8001a22:	4aba      	ldr	r2, [pc, #744]	; (8001d0c <NT35510_Init+0x36c>)
 8001a24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a2c:	6018      	str	r0, [r3, #0]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8001a32:	4ab7      	ldr	r2, [pc, #732]	; (8001d10 <NT35510_Init+0x370>)
 8001a34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	8019      	strh	r1, [r3, #0]
 8001a3e:	3302      	adds	r3, #2
 8001a40:	0c12      	lsrs	r2, r2, #16
 8001a42:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8001a44:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001a48:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8001a4c:	f245 13b5 	movw	r3, #20917	; 0x51b5
 8001a50:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8001a54:	4aaf      	ldr	r2, [pc, #700]	; (8001d14 <NT35510_Init+0x374>)
 8001a56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	8019      	strh	r1, [r3, #0]
 8001a60:	3302      	adds	r3, #2
 8001a62:	0c12      	lsrs	r2, r2, #16
 8001a64:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8001a66:	4aac      	ldr	r2, [pc, #688]	; (8001d18 <NT35510_Init+0x378>)
 8001a68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a70:	6018      	str	r0, [r3, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8001a76:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 8001a7a:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8001a7c:	4ba7      	ldr	r3, [pc, #668]	; (8001d1c <NT35510_Init+0x37c>)
 8001a7e:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8001a80:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8001a84:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8001a88:	2336      	movs	r3, #54	; 0x36
 8001a8a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8001a8e:	4aa4      	ldr	r2, [pc, #656]	; (8001d20 <NT35510_Init+0x380>)
 8001a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a98:	6018      	str	r0, [r3, #0]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8001a9e:	4aa1      	ldr	r2, [pc, #644]	; (8001d24 <NT35510_Init+0x384>)
 8001aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa8:	6018      	str	r0, [r3, #0]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8001aae:	f246 0336 	movw	r3, #24630	; 0x6036
 8001ab2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8001ab6:	4a9c      	ldr	r2, [pc, #624]	; (8001d28 <NT35510_Init+0x388>)
 8001ab8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac0:	6018      	str	r0, [r3, #0]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8001ac6:	4a99      	ldr	r2, [pc, #612]	; (8001d2c <NT35510_Init+0x38c>)
 8001ac8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad0:	6018      	str	r0, [r3, #0]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8001ad6:	2335      	movs	r3, #53	; 0x35
 8001ad8:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8001ada:	2311      	movs	r3, #17
 8001adc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8001ade:	2329      	movs	r3, #41	; 0x29
 8001ae0:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8001ae2:	f647 7351 	movw	r3, #32593	; 0x7f51
 8001ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8001ae8:	f642 4353 	movw	r3, #11347	; 0x2c53
 8001aec:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8001aee:	f240 2355 	movw	r3, #597	; 0x255
 8001af2:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8001af4:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8001af8:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8001afa:	232c      	movs	r3, #44	; 0x2c
 8001afc:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8001afe:	f245 533a 	movw	r3, #21818	; 0x553a
 8001b02:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8001b04:	f247 733a 	movw	r3, #30522	; 0x773a
 8001b08:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8001b0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2005      	movs	r0, #5
 8001b12:	f000 fd95 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8001b16:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 fd8f 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8001b22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b26:	4619      	mov	r1, r3
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 fd89 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8001b2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b32:	4619      	mov	r1, r3
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 fd83 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8001b3a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 fd7d 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8001b46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 fd77 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8001b52:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b56:	4619      	mov	r1, r3
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 fd71 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8001b5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b62:	4619      	mov	r1, r3
 8001b64:	2001      	movs	r0, #1
 8001b66:	f000 fd6b 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8001b6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 fd65 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8001b76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 fd5f 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8001b82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b86:	4619      	mov	r1, r3
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 fd59 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8001b8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b92:	4619      	mov	r1, r3
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 fd53 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8001b9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 fd4d 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8001ba6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fd47 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8001bb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f000 fd41 	bl	8002640 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8001bbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2005      	movs	r0, #5
 8001bc6:	f000 fd3b 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8001bca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f000 fd35 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8001bd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bda:	4619      	mov	r1, r3
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f000 fd2f 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8001be2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001be6:	4619      	mov	r1, r3
 8001be8:	2001      	movs	r0, #1
 8001bea:	f000 fd29 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8001bee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	f000 fd23 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8001bfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2004      	movs	r0, #4
 8001c02:	f000 fd1d 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8001c06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 fd17 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8001c12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c16:	4619      	mov	r1, r3
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 fd11 	bl	8002640 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8001c1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c22:	4619      	mov	r1, r3
 8001c24:	2001      	movs	r0, #1
 8001c26:	f000 fd0b 	bl	8002640 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8001c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 fd05 	bl	8002640 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f000 fcff 	bl	8002640 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8001c42:	20c8      	movs	r0, #200	; 0xc8
 8001c44:	f000 f960 	bl	8001f08 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8001c4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c52:	4619      	mov	r1, r3
 8001c54:	2001      	movs	r0, #1
 8001c56:	f000 fcf3 	bl	8002640 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8001c5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2004      	movs	r0, #4
 8001c62:	f000 fced 	bl	8002640 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8001c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f000 fce7 	bl	8002640 <DSI_IO_WriteCmd>
 8001c72:	e011      	b.n	8001c98 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8001c74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c78:	4619      	mov	r1, r3
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f000 fce0 	bl	8002640 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8001c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c84:	4619      	mov	r1, r3
 8001c86:	2004      	movs	r0, #4
 8001c88:	f000 fcda 	bl	8002640 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8001c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c90:	4619      	mov	r1, r3
 8001c92:	2004      	movs	r0, #4
 8001c94:	f000 fcd4 	bl	8002640 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8001c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 fcce 	bl	8002640 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8001ca4:	2078      	movs	r0, #120	; 0x78
 8001ca6:	f000 f92f 	bl	8001f08 <NT35510_IO_Delay>

  switch(ColorCoding)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <NT35510_Init+0x324>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d13c      	bne.n	8001d30 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 fcbf 	bl	8002640 <DSI_IO_WriteCmd>
      break;
 8001cc2:	e03c      	b.n	8001d3e <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 fcb8 	bl	8002640 <DSI_IO_WriteCmd>
      break;
 8001cd0:	e035      	b.n	8001d3e <NT35510_Init+0x39e>
 8001cd2:	bf00      	nop
 8001cd4:	08016ea0 	.word	0x08016ea0
 8001cd8:	b0030303 	.word	0xb0030303
 8001cdc:	b6464646 	.word	0xb6464646
 8001ce0:	b1030303 	.word	0xb1030303
 8001ce4:	b7363636 	.word	0xb7363636
 8001ce8:	b2020000 	.word	0xb2020000
 8001cec:	b8262626 	.word	0xb8262626
 8001cf0:	b3090909 	.word	0xb3090909
 8001cf4:	b9363636 	.word	0xb9363636
 8001cf8:	b5080808 	.word	0xb5080808
 8001cfc:	ba262626 	.word	0xba262626
 8001d00:	bc008000 	.word	0xbc008000
 8001d04:	bd008000 	.word	0xbd008000
 8001d08:	08016ea8 	.word	0x08016ea8
 8001d0c:	08016eac 	.word	0x08016eac
 8001d10:	08016eb4 	.word	0x08016eb4
 8001d14:	08016eb8 	.word	0x08016eb8
 8001d18:	08016ebc 	.word	0x08016ebc
 8001d1c:	cc000003 	.word	0xcc000003
 8001d20:	08016ec4 	.word	0x08016ec4
 8001d24:	08016ecc 	.word	0x08016ecc
 8001d28:	08016ed4 	.word	0x08016ed4
 8001d2c:	08016edc 	.word	0x08016edc
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4619      	mov	r1, r3
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 fc82 	bl	8002640 <DSI_IO_WriteCmd>
      break;
 8001d3c:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	2001      	movs	r0, #1
 8001d46:	f000 fc7b 	bl	8002640 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	4619      	mov	r1, r3
 8001d50:	2001      	movs	r0, #1
 8001d52:	f000 fc75 	bl	8002640 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f000 fc6f 	bl	8002640 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4619      	mov	r1, r3
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f000 fc69 	bl	8002640 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	4619      	mov	r1, r3
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 fc63 	bl	8002640 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 fc5d 	bl	8002640 <DSI_IO_WriteCmd>

  return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	37c8      	adds	r7, #200	; 0xc8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d86d      	bhi.n	8001e7c <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4a38      	ldr	r2, [pc, #224]	; (8001e84 <BSP_LED_Init+0xf4>)
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d847      	bhi.n	8001e4c <BSP_LED_Init+0xbc>
 8001dbc:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <BSP_LED_Init+0x34>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001dd5 	.word	0x08001dd5
 8001dc8:	08001df3 	.word	0x08001df3
 8001dcc:	08001e11 	.word	0x08001e11
 8001dd0:	08001e2f 	.word	0x08001e2f
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	69bb      	ldr	r3, [r7, #24]
      break;
 8001df0:	e02d      	b.n	8001e4e <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
      break;
 8001e0e:	e01e      	b.n	8001e4e <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
      break;
 8001e2c:	e00f      	b.n	8001e4e <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <BSP_LED_Init+0xf8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
      break;
 8001e4a:	e000      	b.n	8001e4e <BSP_LED_Init+0xbe>
    default :
      break;
 8001e4c:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <BSP_LED_Init+0xfc>)
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	f107 021c 	add.w	r2, r7, #28
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fc2f 	bl	80046c0 <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <BSP_LED_Init+0xfc>)
 8001e66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <BSP_LED_Init+0xf4>)
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	f002 fdce 	bl	8004a18 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 8001e7c:	bf00      	nop
 8001e7e:	3730      	adds	r7, #48	; 0x30
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000024 	.word	0x20000024
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	20000034 	.word	0x20000034

08001e90 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d80c      	bhi.n	8001eba <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <BSP_LED_Off+0x34>)
 8001ea4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <BSP_LED_Off+0x38>)
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f002 fdaf 	bl	8004a18 <HAL_GPIO_WritePin>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000034 	.word	0x20000034
 8001ec8:	20000024 	.word	0x20000024

08001ecc <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d80c      	bhi.n	8001ef6 <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <BSP_LED_Toggle+0x34>)
 8001ee0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4907      	ldr	r1, [pc, #28]	; (8001f04 <BSP_LED_Toggle+0x38>)
 8001ee8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f002 fdaa 	bl	8004a4a <HAL_GPIO_TogglePin>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000034 	.word	0x20000034
 8001f04:	20000024 	.word	0x20000024

08001f08 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 ff7d 	bl	8002e10 <HAL_Delay>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 f804 	bl	8001f30 <BSP_LCD_InitEx>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b096      	sub	sp, #88	; 0x58
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001f3a:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001f3e:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001f44:	f000 f93e 	bl	80021c4 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001f48:	f000 fba4 	bl	8002694 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8001f4c:	4b93      	ldr	r3, [pc, #588]	; (800219c <BSP_LCD_InitEx+0x26c>)
 8001f4e:	4a94      	ldr	r2, [pc, #592]	; (80021a0 <BSP_LCD_InitEx+0x270>)
 8001f50:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8001f52:	4892      	ldr	r0, [pc, #584]	; (800219c <BSP_LCD_InitEx+0x26c>)
 8001f54:	f001 ffc4 	bl	8003ee0 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8001f58:	237d      	movs	r3, #125	; 0x7d
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001f64:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f68:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001f6a:	4b8c      	ldr	r3, [pc, #560]	; (800219c <BSP_LCD_InitEx+0x26c>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	4a8b      	ldr	r2, [pc, #556]	; (80021a4 <BSP_LCD_InitEx+0x274>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	4a87      	ldr	r2, [pc, #540]	; (800219c <BSP_LCD_InitEx+0x26c>)
 8001f7e:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4885      	ldr	r0, [pc, #532]	; (800219c <BSP_LCD_InitEx+0x26c>)
 8001f88:	f001 fe90 	bl	8003cac <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d108      	bne.n	8001fa4 <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <BSP_LCD_InitEx+0x278>)
 8001f94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f98:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001f9a:	4b84      	ldr	r3, [pc, #528]	; (80021ac <BSP_LCD_InitEx+0x27c>)
 8001f9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e007      	b.n	8001fb4 <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <BSP_LCD_InitEx+0x278>)
 8001fa6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001faa:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001fac:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <BSP_LCD_InitEx+0x27c>)
 8001fae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fb2:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8001fb4:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <BSP_LCD_InitEx+0x278>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 8001fba:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <BSP_LCD_InitEx+0x27c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
#if defined (USE_STM32469I_DISCO_REVC)
  VSA  = NT35510_480X800_VSYNC;
 8001fc0:	2378      	movs	r3, #120	; 0x78
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = NT35510_480X800_VBP;
 8001fc4:	2396      	movs	r3, #150	; 0x96
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = NT35510_480X800_VFP;
 8001fc8:	2396      	movs	r3, #150	; 0x96
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = NT35510_480X800_HSYNC;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = NT35510_480X800_HBP;
 8001fd0:	2322      	movs	r3, #34	; 0x22
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = NT35510_480X800_HFP;
 8001fd4:	2322      	movs	r3, #34	; 0x22
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HBP  = OTM8009A_480X800_HBP;
  HFP  = OTM8009A_480X800_HFP;
#endif /* USE_STM32469I_DISCO_REVC */
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001fde:	4b74      	ldr	r3, [pc, #464]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001fe4:	4b72      	ldr	r3, [pc, #456]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001ff0:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8001ffe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002002:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800200a:	4a69      	ldr	r2, [pc, #420]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 800200c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200e:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002014:	fb03 f202 	mul.w	r2, r3, r2
 8002018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4a64      	ldr	r2, [pc, #400]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002020:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002026:	fb03 f202 	mul.w	r2, r3, r2
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4a5f      	ldr	r2, [pc, #380]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002032:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8002034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	441a      	add	r2, r3
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	441a      	add	r2, r3
 800203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002040:	4413      	add	r3, r2
 8002042:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002044:	fb03 f202 	mul.w	r2, r3, r2
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8002052:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8002058:	4a55      	ldr	r2, [pc, #340]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 800205a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205c:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800205e:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002062:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 800206c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8002072:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002074:	2210      	movs	r2, #16
 8002076:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8002078:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 800207a:	2200      	movs	r2, #0
 800207c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 800207e:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002084:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 800208e:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002094:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8002096:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 8002098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209c:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 80020a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80020a6:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 80020a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ac:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 80020ae:	4940      	ldr	r1, [pc, #256]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 80020b0:	483a      	ldr	r0, [pc, #232]	; (800219c <BSP_LCD_InitEx+0x26c>)
 80020b2:	f001 ff9d 	bl	8003ff0 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 80020b6:	2323      	movs	r3, #35	; 0x23
 80020b8:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 80020ba:	2323      	movs	r3, #35	; 0x23
 80020bc:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 80020be:	2323      	movs	r3, #35	; 0x23
 80020c0:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 80020c2:	2323      	movs	r3, #35	; 0x23
 80020c4:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 80020ca:	230a      	movs	r3, #10
 80020cc:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	4831      	ldr	r0, [pc, #196]	; (800219c <BSP_LCD_InitEx+0x26c>)
 80020d6:	f002 f993 	bl	8004400 <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	3b01      	subs	r3, #1
 80020de:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 80020e0:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 80020e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e6:	4413      	add	r3, r2
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 80020ec:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <BSP_LCD_InitEx+0x278>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f4:	441a      	add	r2, r3
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	4413      	add	r3, r2
 80020fa:	3b01      	subs	r3, #1
 80020fc:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 80020fe:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <BSP_LCD_InitEx+0x278>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002106:	441a      	add	r2, r3
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	441a      	add	r2, r3
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	4413      	add	r3, r2
 8002110:	3b01      	subs	r3, #1
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002114:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <BSP_LCD_InitEx+0x278>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 800211c:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <BSP_LCD_InitEx+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002124:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <BSP_LCD_InitEx+0x288>)
 8002128:	2208      	movs	r2, #8
 800212a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <BSP_LCD_InitEx+0x288>)
 800212e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002132:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <BSP_LCD_InitEx+0x288>)
 8002136:	2207      	movs	r2, #7
 8002138:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <BSP_LCD_InitEx+0x288>)
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002140:	481d      	ldr	r0, [pc, #116]	; (80021b8 <BSP_LCD_InitEx+0x288>)
 8002142:	f003 fa2b 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <BSP_LCD_InitEx+0x28c>)
 8002168:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 800216a:	4911      	ldr	r1, [pc, #68]	; (80021b0 <BSP_LCD_InitEx+0x280>)
 800216c:	4811      	ldr	r0, [pc, #68]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 800216e:	f002 ff36 	bl	8004fde <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <BSP_LCD_InitEx+0x284>)
 8002174:	f002 fc84 	bl	8004a80 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 8002178:	4808      	ldr	r0, [pc, #32]	; (800219c <BSP_LCD_InitEx+0x26c>)
 800217a:	f002 f9ab 	bl	80044d4 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800217e:	f000 fc0f 	bl	80029a0 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <BSP_LCD_InitEx+0x290>)
 8002184:	f000 f90e 	bl	80023a4 <BSP_LCD_SetFont>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4619      	mov	r1, r3
 800218c:	2000      	movs	r0, #0
 800218e:	f7ff fc07 	bl	80019a0 <NT35510_Init>
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32469I_DISCO_REVC */

  return LCD_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3758      	adds	r7, #88	; 0x58
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000369c 	.word	0x2000369c
 80021a0:	40016c00 	.word	0x40016c00
 80021a4:	43215e57 	.word	0x43215e57
 80021a8:	2000004c 	.word	0x2000004c
 80021ac:	20000050 	.word	0x20000050
 80021b0:	20003548 	.word	0x20003548
 80021b4:	200035f4 	.word	0x200035f4
 80021b8:	200036d4 	.word	0x200036d4
 80021bc:	40016800 	.word	0x40016800
 80021c0:	20000044 	.word	0x20000044

080021c4 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <BSP_LCD_Reset+0x64>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <BSP_LCD_Reset+0x64>)
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <BSP_LCD_Reset+0x64>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	607b      	str	r3, [r7, #4]
#if defined(USE_STM32469I_DISCO_REVC)
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
#else
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	480c      	ldr	r0, [pc, #48]	; (800222c <BSP_LCD_Reset+0x68>)
 80021fc:	f002 fa60 	bl	80046c0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <BSP_LCD_Reset+0x68>)
 8002206:	f002 fc07 	bl	8004a18 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800220a:	2014      	movs	r0, #20
 800220c:	f000 fe00 	bl	8002e10 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <BSP_LCD_Reset+0x68>)
 8002216:	f002 fbff 	bl	8004a18 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 800221a:	2014      	movs	r0, #20
 800221c:	f000 fdf8 	bl	8002e10 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	40021c00 	.word	0x40021c00

08002230 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <BSP_LCD_GetXSize+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000004c 	.word	0x2000004c

08002248 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <BSP_LCD_GetYSize+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000050 	.word	0x20000050

08002260 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b090      	sub	sp, #64	; 0x40
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002270:	f7ff ffde 	bl	8002230 <BSP_LCD_GetXSize>
 8002274:	4603      	mov	r3, r0
 8002276:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800227c:	f7ff ffe4 	bl	8002248 <BSP_LCD_GetYSize>
 8002280:	4603      	mov	r3, r0
 8002282:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800228c:	23ff      	movs	r3, #255	; 0xff
 800228e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80022a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80022ac:	2307      	movs	r3, #7
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80022b0:	f7ff ffbe 	bl	8002230 <BSP_LCD_GetXSize>
 80022b4:	4603      	mov	r3, r0
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80022b8:	f7ff ffc6 	bl	8002248 <BSP_LCD_GetYSize>
 80022bc:	4603      	mov	r3, r0
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	4812      	ldr	r0, [pc, #72]	; (8002314 <BSP_LCD_LayerDefaultInit+0xb4>)
 80022ca:	f002 fcb3 	bl	8004c34 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	4911      	ldr	r1, [pc, #68]	; (8002318 <BSP_LCD_LayerDefaultInit+0xb8>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3304      	adds	r3, #4
 80022de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	490c      	ldr	r1, [pc, #48]	; (8002318 <BSP_LCD_LayerDefaultInit+0xb8>)
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3308      	adds	r3, #8
 80022f4:	4a09      	ldr	r2, [pc, #36]	; (800231c <BSP_LCD_LayerDefaultInit+0xbc>)
 80022f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	4907      	ldr	r1, [pc, #28]	; (8002318 <BSP_LCD_LayerDefaultInit+0xb8>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	3740      	adds	r7, #64	; 0x40
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200035f4 	.word	0x200035f4
 8002318:	200036bc 	.word	0x200036bc
 800231c:	20000044 	.word	0x20000044

08002320 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <BSP_LCD_SelectLayer+0x1c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200036b8 	.word	0x200036b8

08002340 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <BSP_LCD_SetTextColor+0x28>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <BSP_LCD_SetTextColor+0x2c>)
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	200036b8 	.word	0x200036b8
 800236c:	200036bc 	.word	0x200036bc

08002370 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <BSP_LCD_SetBackColor+0x2c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4908      	ldr	r1, [pc, #32]	; (80023a0 <BSP_LCD_SetBackColor+0x30>)
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3304      	adds	r3, #4
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200036b8 	.word	0x200036b8
 80023a0:	200036bc 	.word	0x200036bc

080023a4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <BSP_LCD_SetFont+0x2c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4908      	ldr	r1, [pc, #32]	; (80023d4 <BSP_LCD_SetFont+0x30>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3308      	adds	r3, #8
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200036b8 	.word	0x200036b8
 80023d4:	200036bc 	.word	0x200036bc

080023d8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af02      	add	r7, sp, #8
 80023de:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <BSP_LCD_Clear+0x48>)
 80023e2:	681c      	ldr	r4, [r3, #0]
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <BSP_LCD_Clear+0x48>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <BSP_LCD_Clear+0x4c>)
 80023ea:	2134      	movs	r1, #52	; 0x34
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	335c      	adds	r3, #92	; 0x5c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461e      	mov	r6, r3
 80023f8:	f7ff ff1a 	bl	8002230 <BSP_LCD_GetXSize>
 80023fc:	4605      	mov	r5, r0
 80023fe:	f7ff ff23 	bl	8002248 <BSP_LCD_GetYSize>
 8002402:	4602      	mov	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2300      	movs	r3, #0
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	462a      	mov	r2, r5
 8002410:	4631      	mov	r1, r6
 8002412:	4620      	mov	r0, r4
 8002414:	f000 fa8c 	bl	8002930 <LL_FillBuffer>
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002420:	200036b8 	.word	0x200036b8
 8002424:	200035f4 	.word	0x200035f4

08002428 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	80fb      	strh	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	80bb      	strh	r3, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <BSP_LCD_DisplayChar+0x80>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	491b      	ldr	r1, [pc, #108]	; (80024ac <BSP_LCD_DisplayChar+0x84>)
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3308      	adds	r3, #8
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <BSP_LCD_DisplayChar+0x80>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4c14      	ldr	r4, [pc, #80]	; (80024ac <BSP_LCD_DisplayChar+0x84>)
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4423      	add	r3, r4
 8002466:	3308      	adds	r3, #8
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800246c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <BSP_LCD_DisplayChar+0x80>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4c0d      	ldr	r4, [pc, #52]	; (80024ac <BSP_LCD_DisplayChar+0x84>)
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4423      	add	r3, r4
 8002480:	3308      	adds	r3, #8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	889b      	ldrh	r3, [r3, #4]
 8002486:	3307      	adds	r3, #7
 8002488:	2b00      	cmp	r3, #0
 800248a:	da00      	bge.n	800248e <BSP_LCD_DisplayChar+0x66>
 800248c:	3307      	adds	r3, #7
 800248e:	10db      	asrs	r3, r3, #3
 8002490:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002494:	18ca      	adds	r2, r1, r3
 8002496:	88b9      	ldrh	r1, [r7, #4]
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f990 	bl	80027c0 <DrawChar>
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	200036b8 	.word	0x200036b8
 80024ac:	200036bc 	.word	0x200036bc

080024b0 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60ba      	str	r2, [r7, #8]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	81fb      	strh	r3, [r7, #14]
 80024be:	460b      	mov	r3, r1
 80024c0:	81bb      	strh	r3, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80024c6:	2301      	movs	r3, #1
 80024c8:	83fb      	strh	r3, [r7, #30]
 80024ca:	2300      	movs	r3, #0
 80024cc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80024da:	e002      	b.n	80024e2 <BSP_LCD_DisplayStringAt+0x32>
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3301      	adds	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	617a      	str	r2, [r7, #20]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f6      	bne.n	80024dc <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80024ee:	f7ff fe9f 	bl	8002230 <BSP_LCD_GetXSize>
 80024f2:	4601      	mov	r1, r0
 80024f4:	4b50      	ldr	r3, [pc, #320]	; (8002638 <BSP_LCD_DisplayStringAt+0x188>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4850      	ldr	r0, [pc, #320]	; (800263c <BSP_LCD_DisplayStringAt+0x18c>)
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4403      	add	r3, r0
 8002504:	3308      	adds	r3, #8
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	889b      	ldrh	r3, [r3, #4]
 800250a:	fbb1 f3f3 	udiv	r3, r1, r3
 800250e:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d01c      	beq.n	8002550 <BSP_LCD_DisplayStringAt+0xa0>
 8002516:	2b03      	cmp	r3, #3
 8002518:	dc33      	bgt.n	8002582 <BSP_LCD_DisplayStringAt+0xd2>
 800251a:	2b01      	cmp	r3, #1
 800251c:	d002      	beq.n	8002524 <BSP_LCD_DisplayStringAt+0x74>
 800251e:	2b02      	cmp	r3, #2
 8002520:	d019      	beq.n	8002556 <BSP_LCD_DisplayStringAt+0xa6>
 8002522:	e02e      	b.n	8002582 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad1      	subs	r1, r2, r3
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <BSP_LCD_DisplayStringAt+0x188>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4843      	ldr	r0, [pc, #268]	; (800263c <BSP_LCD_DisplayStringAt+0x18c>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4403      	add	r3, r0
 800253a:	3308      	adds	r3, #8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	4413      	add	r3, r2
 800254c:	83fb      	strh	r3, [r7, #30]
      break;
 800254e:	e01b      	b.n	8002588 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	83fb      	strh	r3, [r7, #30]
      break;
 8002554:	e018      	b.n	8002588 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	b299      	uxth	r1, r3
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <BSP_LCD_DisplayStringAt+0x188>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4836      	ldr	r0, [pc, #216]	; (800263c <BSP_LCD_DisplayStringAt+0x18c>)
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4403      	add	r3, r0
 800256e:	3308      	adds	r3, #8
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	889b      	ldrh	r3, [r3, #4]
 8002574:	fb11 f303 	smulbb	r3, r1, r3
 8002578:	b29a      	uxth	r2, r3
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	83fb      	strh	r3, [r7, #30]
      break;
 8002580:	e002      	b.n	8002588 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	83fb      	strh	r3, [r7, #30]
      break;
 8002586:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002588:	8bfb      	ldrh	r3, [r7, #30]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <BSP_LCD_DisplayStringAt+0xe6>
 800258e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002592:	2b00      	cmp	r3, #0
 8002594:	da1d      	bge.n	80025d2 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800259a:	e01a      	b.n	80025d2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	89b9      	ldrh	r1, [r7, #12]
 80025a2:	8bfb      	ldrh	r3, [r7, #30]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff3f 	bl	8002428 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <BSP_LCD_DisplayStringAt+0x188>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4923      	ldr	r1, [pc, #140]	; (800263c <BSP_LCD_DisplayStringAt+0x18c>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3308      	adds	r3, #8
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	889a      	ldrh	r2, [r3, #4]
 80025c0:	8bfb      	ldrh	r3, [r7, #30]
 80025c2:	4413      	add	r3, r2
 80025c4:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
    i++;
 80025cc:	8bbb      	ldrh	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2dc      	uxtb	r4, r3
 80025e0:	f7ff fe26 	bl	8002230 <BSP_LCD_GetXSize>
 80025e4:	8bb9      	ldrh	r1, [r7, #28]
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <BSP_LCD_DisplayStringAt+0x188>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4d14      	ldr	r5, [pc, #80]	; (800263c <BSP_LCD_DisplayStringAt+0x18c>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	442b      	add	r3, r5
 80025f6:	3308      	adds	r3, #8
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	889b      	ldrh	r3, [r3, #4]
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ac3      	subs	r3, r0, r3
 8002602:	b299      	uxth	r1, r3
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <BSP_LCD_DisplayStringAt+0x188>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <BSP_LCD_DisplayStringAt+0x18c>)
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	3308      	adds	r3, #8
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	889b      	ldrh	r3, [r3, #4]
 800261a:	4299      	cmp	r1, r3
 800261c:	bf2c      	ite	cs
 800261e:	2301      	movcs	r3, #1
 8002620:	2300      	movcc	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4023      	ands	r3, r4
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1b7      	bne.n	800259c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bdb0      	pop	{r4, r5, r7, pc}
 8002636:	bf00      	nop
 8002638:	200036b8 	.word	0x200036b8
 800263c:	200036bc 	.word	0x200036bc

08002640 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af02      	add	r7, sp, #8
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d80d      	bhi.n	800266c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	2215      	movs	r2, #21
 8002662:	2100      	movs	r1, #0
 8002664:	480a      	ldr	r0, [pc, #40]	; (8002690 <DSI_IO_WriteCmd+0x50>)
 8002666:	f001 ff71 	bl	800454c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 800266a:	e00d      	b.n	8002688 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	9200      	str	r2, [sp, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2239      	movs	r2, #57	; 0x39
 8002680:	2100      	movs	r1, #0
 8002682:	4803      	ldr	r0, [pc, #12]	; (8002690 <DSI_IO_WriteCmd+0x50>)
 8002684:	f001 ff84 	bl	8004590 <HAL_DSI_LongWrite>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000369c 	.word	0x2000369c

08002694 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b34      	ldr	r3, [pc, #208]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026c0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026cc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f4:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 80026fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002700:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a19      	ldr	r2, [pc, #100]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 800270c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 8002724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002728:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <BSP_LCD_MspInit+0xdc>)
 8002730:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002734:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2103      	movs	r1, #3
 800273a:	2058      	movs	r0, #88	; 0x58
 800273c:	f000 fc44 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002740:	2058      	movs	r0, #88	; 0x58
 8002742:	f000 fc5d 	bl	8003000 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2103      	movs	r1, #3
 800274a:	205a      	movs	r0, #90	; 0x5a
 800274c:	f000 fc3c 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002750:	205a      	movs	r0, #90	; 0x5a
 8002752:	f000 fc55 	bl	8003000 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2103      	movs	r1, #3
 800275a:	205c      	movs	r0, #92	; 0x5c
 800275c:	f000 fc34 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002760:	205c      	movs	r0, #92	; 0x5c
 8002762:	f000 fc4d 	bl	8003000 <HAL_NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	603a      	str	r2, [r7, #0]
 800277e:	80fb      	strh	r3, [r7, #6]
 8002780:	460b      	mov	r3, r1
 8002782:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <BSP_LCD_DrawPixel+0x44>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <BSP_LCD_DrawPixel+0x48>)
 800278a:	2134      	movs	r1, #52	; 0x34
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	681c      	ldr	r4, [r3, #0]
 8002796:	88bd      	ldrh	r5, [r7, #4]
 8002798:	f7ff fd4a 	bl	8002230 <BSP_LCD_GetXSize>
 800279c:	4603      	mov	r3, r0
 800279e:	fb03 f205 	mul.w	r2, r3, r5
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4423      	add	r3, r4
 80027aa:	461a      	mov	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdb0      	pop	{r4, r5, r7, pc}
 80027b8:	200036b8 	.word	0x200036b8
 80027bc:	200035f4 	.word	0x200035f4

080027c0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	460b      	mov	r3, r1
 80027ce:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <DrawChar+0x168>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4953      	ldr	r1, [pc, #332]	; (800292c <DrawChar+0x16c>)
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3308      	adds	r3, #8
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	88db      	ldrh	r3, [r3, #6]
 80027ee:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80027f0:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <DrawChar+0x168>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	494d      	ldr	r1, [pc, #308]	; (800292c <DrawChar+0x16c>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3308      	adds	r3, #8
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	889b      	ldrh	r3, [r3, #4]
 8002806:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8002808:	8a3b      	ldrh	r3, [r7, #16]
 800280a:	3307      	adds	r3, #7
 800280c:	2b00      	cmp	r3, #0
 800280e:	da00      	bge.n	8002812 <DrawChar+0x52>
 8002810:	3307      	adds	r3, #7
 8002812:	10db      	asrs	r3, r3, #3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	b2da      	uxtb	r2, r3
 800281a:	8a3b      	ldrh	r3, [r7, #16]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e076      	b.n	8002916 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002828:	8a3b      	ldrh	r3, [r7, #16]
 800282a:	3307      	adds	r3, #7
 800282c:	2b00      	cmp	r3, #0
 800282e:	da00      	bge.n	8002832 <DrawChar+0x72>
 8002830:	3307      	adds	r3, #7
 8002832:	10db      	asrs	r3, r3, #3
 8002834:	461a      	mov	r2, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002842:	8a3b      	ldrh	r3, [r7, #16]
 8002844:	3307      	adds	r3, #7
 8002846:	2b00      	cmp	r3, #0
 8002848:	da00      	bge.n	800284c <DrawChar+0x8c>
 800284a:	3307      	adds	r3, #7
 800284c:	10db      	asrs	r3, r3, #3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d002      	beq.n	8002858 <DrawChar+0x98>
 8002852:	2b02      	cmp	r3, #2
 8002854:	d004      	beq.n	8002860 <DrawChar+0xa0>
 8002856:	e00c      	b.n	8002872 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
      break;
 800285e:	e016      	b.n	800288e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	3201      	adds	r2, #1
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
      break;
 8002870:	e00d      	b.n	800288e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	041a      	lsls	r2, r3, #16
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3301      	adds	r3, #1
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4313      	orrs	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	3202      	adds	r2, #2
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
      break;
 800288c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e036      	b.n	8002902 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002894:	8a3a      	ldrh	r2, [r7, #16]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	4413      	add	r3, r2
 800289e:	3b01      	subs	r3, #1
 80028a0:	2201      	movs	r2, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4413      	add	r3, r2
 80028b8:	b298      	uxth	r0, r3
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <DrawChar+0x168>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	491b      	ldr	r1, [pc, #108]	; (800292c <DrawChar+0x16c>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	88bb      	ldrh	r3, [r7, #4]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7ff ff50 	bl	8002774 <BSP_LCD_DrawPixel>
 80028d4:	e012      	b.n	80028fc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	4413      	add	r3, r2
 80028de:	b298      	uxth	r0, r3
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <DrawChar+0x168>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4911      	ldr	r1, [pc, #68]	; (800292c <DrawChar+0x16c>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3304      	adds	r3, #4
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	88bb      	ldrh	r3, [r7, #4]
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7ff ff3c 	bl	8002774 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	3301      	adds	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	8a3b      	ldrh	r3, [r7, #16]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	429a      	cmp	r2, r3
 8002908:	d3c4      	bcc.n	8002894 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800290a:	88bb      	ldrh	r3, [r7, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	3301      	adds	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	8a7b      	ldrh	r3, [r7, #18]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	429a      	cmp	r2, r3
 800291c:	d384      	bcc.n	8002828 <DrawChar+0x68>
  }
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200036b8 	.word	0x200036b8
 800292c:	200036bc 	.word	0x200036bc

08002930 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <LL_FillBuffer+0x68>)
 8002940:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002944:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <LL_FillBuffer+0x68>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <LL_FillBuffer+0x68>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <LL_FillBuffer+0x68>)
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <LL_FillBuffer+0x6c>)
 8002956:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <LL_FillBuffer+0x68>)
 800295a:	f000 fec9 	bl	80036f0 <HAL_DMA2D_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d115      	bne.n	8002990 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	480c      	ldr	r0, [pc, #48]	; (8002998 <LL_FillBuffer+0x68>)
 8002968:	f001 f82a 	bl	80039c0 <HAL_DMA2D_ConfigLayer>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10e      	bne.n	8002990 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69f9      	ldr	r1, [r7, #28]
 800297c:	4806      	ldr	r0, [pc, #24]	; (8002998 <LL_FillBuffer+0x68>)
 800297e:	f000 ff0a 	bl	8003796 <HAL_DMA2D_Start>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8002988:	210a      	movs	r1, #10
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <LL_FillBuffer+0x68>)
 800298c:	f000 ff2e 	bl	80037ec <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200035b4 	.word	0x200035b4
 800299c:	4002b000 	.word	0x4002b000

080029a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029a6:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <BSP_SDRAM_Init+0xb0>)
 80029a8:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029b2:	2207      	movs	r2, #7
 80029b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029b8:	2204      	movs	r2, #4
 80029ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029be:	2207      	movs	r2, #7
 80029c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029c4:	2202      	movs	r2, #2
 80029c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029ca:	2202      	movs	r2, #2
 80029cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 80029d0:	2202      	movs	r2, #2
 80029d2:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029e2:	2204      	movs	r2, #4
 80029e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029e8:	2220      	movs	r2, #32
 80029ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80029ec:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029ee:	2240      	movs	r2, #64	; 0x40
 80029f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80029f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 8002a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a06:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 8002a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8002a16:	2100      	movs	r1, #0
 8002a18:	480c      	ldr	r0, [pc, #48]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 8002a1a:	f000 f87f 	bl	8002b1c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002a1e:	490d      	ldr	r1, [pc, #52]	; (8002a54 <BSP_SDRAM_Init+0xb4>)
 8002a20:	480a      	ldr	r0, [pc, #40]	; (8002a4c <BSP_SDRAM_Init+0xac>)
 8002a22:	f003 fd63 	bl	80064ec <HAL_SDRAM_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <BSP_SDRAM_Init+0xb8>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e002      	b.n	8002a3a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <BSP_SDRAM_Init+0xb8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a3a:	f240 5069 	movw	r0, #1385	; 0x569
 8002a3e:	f000 f80d 	bl	8002a5c <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <BSP_SDRAM_Init+0xb8>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20003710 	.word	0x20003710
 8002a50:	a0000140 	.word	0xa0000140
 8002a54:	20003744 	.word	0x20003744
 8002a58:	20000054 	.word	0x20000054

08002a5c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a70:	2210      	movs	r2, #16
 8002a72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a84:	4923      	ldr	r1, [pc, #140]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a86:	4824      	ldr	r0, [pc, #144]	; (8002b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a88:	f003 fd6e 	bl	8006568 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f000 f9bf 	bl	8002e10 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a94:	2202      	movs	r2, #2
 8002a96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aae:	4919      	ldr	r1, [pc, #100]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab0:	4819      	ldr	r0, [pc, #100]	; (8002b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ab2:	f003 fd59 	bl	8006568 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab8:	2203      	movs	r2, #3
 8002aba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002abe:	2210      	movs	r2, #16
 8002ac0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad2:	4910      	ldr	r1, [pc, #64]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ad4:	4810      	ldr	r0, [pc, #64]	; (8002b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ad6:	f003 fd47 	bl	8006568 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002ada:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002ade:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae8:	2210      	movs	r2, #16
 8002aea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afc:	4905      	ldr	r1, [pc, #20]	; (8002b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002afe:	4806      	ldr	r0, [pc, #24]	; (8002b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b00:	f003 fd32 	bl	8006568 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4804      	ldr	r0, [pc, #16]	; (8002b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b08:	f003 fd59 	bl	80065be <HAL_SDRAM_ProgramRefreshRate>
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20003760 	.word	0x20003760
 8002b18:	20003710 	.word	0x20003710

08002b1c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b090      	sub	sp, #64	; 0x40
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8104 	beq.w	8002d36 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b32:	4b83      	ldr	r3, [pc, #524]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	4a82      	ldr	r2, [pc, #520]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b3e:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	4b7c      	ldr	r3, [pc, #496]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a7b      	ldr	r2, [pc, #492]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a74      	ldr	r2, [pc, #464]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b72      	ldr	r3, [pc, #456]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	4b6e      	ldr	r3, [pc, #440]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a6d      	ldr	r2, [pc, #436]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a66      	ldr	r2, [pc, #408]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002ba8:	f043 0310 	orr.w	r3, r3, #16
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	4b60      	ldr	r3, [pc, #384]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a5f      	ldr	r2, [pc, #380]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a51      	ldr	r2, [pc, #324]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b48      	ldr	r3, [pc, #288]	; (8002d40 <BSP_SDRAM_MspInit+0x224>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c32:	2302      	movs	r3, #2
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002c36:	230c      	movs	r3, #12
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c42:	4619      	mov	r1, r3
 8002c44:	483f      	ldr	r0, [pc, #252]	; (8002d44 <BSP_SDRAM_MspInit+0x228>)
 8002c46:	f001 fd3b 	bl	80046c0 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002c4a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c54:	4619      	mov	r1, r3
 8002c56:	483c      	ldr	r0, [pc, #240]	; (8002d48 <BSP_SDRAM_MspInit+0x22c>)
 8002c58:	f001 fd32 	bl	80046c0 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c5c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c66:	4619      	mov	r1, r3
 8002c68:	4838      	ldr	r0, [pc, #224]	; (8002d4c <BSP_SDRAM_MspInit+0x230>)
 8002c6a:	f001 fd29 	bl	80046c0 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4835      	ldr	r0, [pc, #212]	; (8002d50 <BSP_SDRAM_MspInit+0x234>)
 8002c7c:	f001 fd20 	bl	80046c0 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002c80:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4831      	ldr	r0, [pc, #196]	; (8002d54 <BSP_SDRAM_MspInit+0x238>)
 8002c8e:	f001 fd17 	bl	80046c0 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c92:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	482e      	ldr	r0, [pc, #184]	; (8002d58 <BSP_SDRAM_MspInit+0x23c>)
 8002ca0:	f001 fd0e 	bl	80046c0 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ca4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	482a      	ldr	r0, [pc, #168]	; (8002d5c <BSP_SDRAM_MspInit+0x240>)
 8002cb2:	f001 fd05 	bl	80046c0 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002cc2:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc8:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd0:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cd8:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cda:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ce0:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cee:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002d0a:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <BSP_SDRAM_MspInit+0x248>)
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8002d1a:	4811      	ldr	r0, [pc, #68]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002d1c:	f000 fa2c 	bl	8003178 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8002d20:	480f      	ldr	r0, [pc, #60]	; (8002d60 <BSP_SDRAM_MspInit+0x244>)
 8002d22:	f000 f97b 	bl	800301c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2105      	movs	r1, #5
 8002d2a:	2038      	movs	r0, #56	; 0x38
 8002d2c:	f000 f94c 	bl	8002fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d30:	2038      	movs	r0, #56	; 0x38
 8002d32:	f000 f965 	bl	8003000 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002d36:	bf00      	nop
 8002d38:	3740      	adds	r7, #64	; 0x40
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40021c00 	.word	0x40021c00
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	20003770 	.word	0x20003770
 8002d64:	40026410 	.word	0x40026410

08002d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <SystemInit+0x20>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <SystemInit+0x20>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_Init+0x40>)
 8002d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <HAL_Init+0x40>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_Init+0x40>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 f8fc 	bl	8002fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dba:	200f      	movs	r0, #15
 8002dbc:	f7fe fbf4 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc0:	f7fe fbca 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023c00 	.word	0x40023c00

08002dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x20>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_IncTick+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_IncTick+0x24>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000060 	.word	0x20000060
 8002df4:	200037d0 	.word	0x200037d0

08002df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_GetTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	200037d0 	.word	0x200037d0

08002e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff ffee 	bl	8002df8 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e28:	d005      	beq.n	8002e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_Delay+0x44>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e36:	bf00      	nop
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8f7      	bhi.n	8002e38 <HAL_Delay+0x28>
  {
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000060 	.word	0x20000060

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	; (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	; (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff4c 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fda:	f7ff ff61 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8002fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6978      	ldr	r0, [r7, #20]
 8002fe6:	f7ff ffb1 	bl	8002f4c <NVIC_EncodePriority>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff80 	bl	8002ef8 <__NVIC_SetPriority>
}
 8002ff8:	bf00      	nop
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ff54 	bl	8002ebc <__NVIC_EnableIRQ>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff fee6 	bl	8002df8 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e099      	b.n	800316c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003058:	e00f      	b.n	800307a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800305a:	f7ff fecd 	bl	8002df8 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b05      	cmp	r3, #5
 8003066:	d908      	bls.n	800307a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e078      	b.n	800316c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e8      	bne.n	800305a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <HAL_DMA_Init+0x158>)
 8003094:	4013      	ands	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d107      	bne.n	80030e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	4313      	orrs	r3, r2
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b04      	cmp	r3, #4
 800310c:	d117      	bne.n	800313e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fa69 	bl	80035f8 <DMA_CheckFifoParam>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800313a:	2301      	movs	r3, #1
 800313c:	e016      	b.n	800316c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa20 	bl	800358c <DMA_CalcBaseAndBitshift>
 800314c:	4603      	mov	r3, r0
 800314e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	223f      	movs	r2, #63	; 0x3f
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	f010803f 	.word	0xf010803f

08003178 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e050      	b.n	800322c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d101      	bne.n	800319a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
 8003198:	e048      	b.n	800322c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2221      	movs	r2, #33	; 0x21
 80031d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9d6 	bl	800358c <DMA_CalcBaseAndBitshift>
 80031e0:	4603      	mov	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	223f      	movs	r2, #63	; 0x3f
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d004      	beq.n	8003252 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00c      	b.n	800326c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2205      	movs	r2, #5
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003284:	4b8e      	ldr	r3, [pc, #568]	; (80034c0 <HAL_DMA_IRQHandler+0x248>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a8e      	ldr	r2, [pc, #568]	; (80034c4 <HAL_DMA_IRQHandler+0x24c>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2208      	movs	r2, #8
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01a      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2208      	movs	r2, #8
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d012      	beq.n	800331a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	2204      	movs	r2, #4
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2204      	movs	r2, #4
 800333e:	409a      	lsls	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2210      	movs	r2, #16
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d043      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03c      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2210      	movs	r2, #16
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d018      	beq.n	80033ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d024      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
 80033a6:	e01f      	b.n	80033e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e016      	b.n	80033e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0208 	bic.w	r2, r2, #8
 80033d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	2220      	movs	r2, #32
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 808f 	beq.w	8003518 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8087 	beq.w	8003518 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2220      	movs	r2, #32
 8003410:	409a      	lsls	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b05      	cmp	r3, #5
 8003420:	d136      	bne.n	8003490 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0216 	bic.w	r2, r2, #22
 8003430:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003440:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_DMA_IRQHandler+0x1da>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0208 	bic.w	r2, r2, #8
 8003460:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	223f      	movs	r2, #63	; 0x3f
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d07e      	beq.n	8003584 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
        }
        return;
 800348e:	e079      	b.n	8003584 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01d      	beq.n	80034da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d031      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e02c      	b.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
 80034be:	bf00      	nop
 80034c0:	20000058 	.word	0x20000058
 80034c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e01e      	b.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0210 	bic.w	r2, r2, #16
 80034f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	2b00      	cmp	r3, #0
 800351e:	d032      	beq.n	8003586 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d022      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2205      	movs	r2, #5
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	3301      	adds	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	d307      	bcc.n	8003560 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f2      	bne.n	8003544 <HAL_DMA_IRQHandler+0x2cc>
 800355e:	e000      	b.n	8003562 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003560:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
 8003582:	e000      	b.n	8003586 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003584:	bf00      	nop
    }
  }
}
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3b10      	subs	r3, #16
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <DMA_CalcBaseAndBitshift+0x64>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <DMA_CalcBaseAndBitshift+0x68>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d909      	bls.n	80035ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	; 0x58
 80035cc:	e007      	b.n	80035de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	aaaaaaab 	.word	0xaaaaaaab
 80035f4:	0801c1e4 	.word	0x0801c1e4

080035f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11f      	bne.n	8003652 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d856      	bhi.n	80036c6 <DMA_CheckFifoParam+0xce>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <DMA_CheckFifoParam+0x28>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003631 	.word	0x08003631
 8003624:	08003643 	.word	0x08003643
 8003628:	08003631 	.word	0x08003631
 800362c:	080036c7 	.word	0x080036c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d046      	beq.n	80036ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e043      	b.n	80036ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800364a:	d140      	bne.n	80036ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003650:	e03d      	b.n	80036ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365a:	d121      	bne.n	80036a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d837      	bhi.n	80036d2 <DMA_CheckFifoParam+0xda>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <DMA_CheckFifoParam+0x70>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	08003679 	.word	0x08003679
 800366c:	0800367f 	.word	0x0800367f
 8003670:	08003679 	.word	0x08003679
 8003674:	08003691 	.word	0x08003691
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e030      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d025      	beq.n	80036d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368e:	e022      	b.n	80036d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003698:	d11f      	bne.n	80036da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800369e:	e01c      	b.n	80036da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d903      	bls.n	80036ae <DMA_CheckFifoParam+0xb6>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d003      	beq.n	80036b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036ac:	e018      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      break;
 80036b2:	e015      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	e00b      	b.n	80036de <DMA_CheckFifoParam+0xe6>
      break;
 80036c6:	bf00      	nop
 80036c8:	e00a      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e008      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
 80036d0:	e006      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
 80036d4:	e004      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
    }
  } 
  
  return status; 
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e03b      	b.n	800377a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f833 	bl	8003782 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	f023 0107 	bic.w	r1, r3, #7
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800375a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d1      	ldr	r1, [r2, #12]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	430b      	orrs	r3, r1
 8003768:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af02      	add	r7, sp, #8
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA2D_Start+0x1c>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e018      	b.n	80037e4 <HAL_DMA2D_Start+0x4e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f989 	bl	8003ae4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d056      	beq.n	80038b6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003808:	f7ff faf6 	bl	8002df8 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800380e:	e04b      	b.n	80038a8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800381e:	2b00      	cmp	r3, #0
 8003820:	d023      	beq.n	800386a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	f043 0202 	orr.w	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2221      	movs	r2, #33	; 0x21
 8003854:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e0a5      	b.n	80039b6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003870:	d01a      	beq.n	80038a8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7ff fac1 	bl	8002df8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <HAL_DMA2D_PollForTransfer+0x9c>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2203      	movs	r2, #3
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e086      	b.n	80039b6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0ac      	beq.n	8003810 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d061      	beq.n	800399c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d8:	f7ff fa8e 	bl	8002df8 <HAL_GetTick>
 80038dc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038de:	e056      	b.n	800398e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02e      	beq.n	8003950 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	f043 0202 	orr.w	r2, r3, #2
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2229      	movs	r2, #41	; 0x29
 800393a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2204      	movs	r2, #4
 8003940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003956:	d01a      	beq.n	800398e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7ff fa4e 	bl	8002df8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <HAL_DMA2D_PollForTransfer+0x182>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2203      	movs	r2, #3
 800397e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e013      	b.n	80039b6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0a1      	beq.n	80038e0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2212      	movs	r2, #18
 80039a2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_DMA2D_ConfigLayer+0x20>
 80039dc:	2302      	movs	r3, #2
 80039de:	e079      	b.n	8003ad4 <HAL_DMA2D_ConfigLayer+0x114>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	3318      	adds	r3, #24
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a0a:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003a0c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b0a      	cmp	r3, #10
 8003a14:	d003      	beq.n	8003a1e <HAL_DMA2D_ConfigLayer+0x5e>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b09      	cmp	r3, #9
 8003a1c:	d107      	bne.n	8003a2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e005      	b.n	8003a3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d120      	bne.n	8003a82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	ea02 0103 	and.w	r1, r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b0a      	cmp	r3, #10
 8003a68:	d003      	beq.n	8003a72 <HAL_DMA2D_ConfigLayer+0xb2>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	d127      	bne.n	8003ac2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a80:	e01f      	b.n	8003ac2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	ea02 0103 	and.w	r1, r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b0a      	cmp	r3, #10
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d106      	bne.n	8003ac2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ac0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	ff03000f 	.word	0xff03000f

08003ae4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b08b      	sub	sp, #44	; 0x2c
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	041a      	lsls	r2, r3, #16
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b1c:	d174      	bne.n	8003c08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b24:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b2c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b34:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d108      	bne.n	8003b56 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	e053      	b.n	8003bfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d106      	bne.n	8003b6c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e048      	b.n	8003bfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d111      	bne.n	8003b98 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	0cdb      	lsrs	r3, r3, #19
 8003b78:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	0a9b      	lsrs	r3, r3, #10
 8003b7e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	08db      	lsrs	r3, r3, #3
 8003b84:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	02db      	lsls	r3, r3, #11
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	e032      	b.n	8003bfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d117      	bne.n	8003bd0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	0fdb      	lsrs	r3, r3, #31
 8003ba4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	0cdb      	lsrs	r3, r3, #19
 8003baa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	0adb      	lsrs	r3, r3, #11
 8003bb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	029b      	lsls	r3, r3, #10
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	03db      	lsls	r3, r3, #15
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e016      	b.n	8003bfe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	0f1b      	lsrs	r3, r3, #28
 8003bd4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	0d1b      	lsrs	r3, r3, #20
 8003bda:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	0b1b      	lsrs	r3, r3, #12
 8003be0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	011a      	lsls	r2, r3, #4
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	031b      	lsls	r3, r3, #12
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c06:	e003      	b.n	8003c10 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
}
 8003c10:	bf00      	nop
 8003c12:	372c      	adds	r7, #44	; 0x2c
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	019a      	lsls	r2, r3, #6
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	431a      	orrs	r2, r3
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c5c:	f7ff f8cc 	bl	8002df8 <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c62:	e009      	b.n	8003c78 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003c64:	f7ff f8c8 	bl	8002df8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c72:	d901      	bls.n	8003c78 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e015      	b.n	8003ca4 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ee      	beq.n	8003c64 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	019a      	lsls	r2, r3, #6
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	ea42 0103 	orr.w	r1, r2, r3
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e108      	b.n	8003ed2 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	7c5b      	ldrb	r3, [r3, #17]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f97c 	bl	8003fc8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003cea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfe:	f7ff f87b 	bl	8002df8 <HAL_GetTick>
 8003d02:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d04:	e009      	b.n	8003d1a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d06:	f7ff f877 	bl	8002df8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d14:	d901      	bls.n	8003d1a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0db      	b.n	8003ed2 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ed      	beq.n	8003d06 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003d3a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003d3e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	02db      	lsls	r3, r3, #11
 8003d56:	431a      	orrs	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d92:	f7ff f831 	bl	8002df8 <HAL_GetTick>
 8003d96:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d98:	e009      	b.n	8003dae <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d9a:	f7ff f82d 	bl	8002df8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da8:	d901      	bls.n	8003dae <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e091      	b.n	8003ed2 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ed      	beq.n	8003d9a <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0206 	orr.w	r2, r2, #6
 8003dce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0203 	bic.w	r2, r2, #3
 8003de2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0203 	bic.w	r2, r2, #3
 8003e10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e38:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_DSI_Init+0x1ae>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	e000      	b.n	8003e5c <HAL_DSI_Init+0x1b0>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <HAL_DSI_Init+0x230>)
 8003e62:	fb03 f202 	mul.w	r2, r3, r2
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003e92:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	003d0900 	.word	0x003d0900

08003ee0 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e066      	b.n	8003fc0 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0206 	bic.w	r2, r2, #6
 8003f52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f92:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f818 	bl	8003fdc <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7c1b      	ldrb	r3, [r3, #16]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_DSI_ConfigVideoMode+0x16>
 8004002:	2302      	movs	r3, #2
 8004004:	e1f6      	b.n	80043f4 <HAL_DSI_ConfigVideoMode+0x404>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0203 	bic.w	r2, r2, #3
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004064:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004086:	f023 031f 	bic.w	r3, r3, #31
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80040ac:	f023 031f 	bic.w	r3, r3, #31
 80040b0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0203 	bic.w	r2, r2, #3
 80040d2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68d9      	ldr	r1, [r3, #12]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0207 	bic.w	r2, r2, #7
 80040f4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6959      	ldr	r1, [r3, #20]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	431a      	orrs	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 020f 	bic.w	r2, r2, #15
 8004122:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 020e 	bic.w	r2, r2, #14
 8004146:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	005a      	lsls	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d110      	bne.n	800418c <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004178:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6919      	ldr	r1, [r3, #16]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800419a:	f023 030f 	bic.w	r3, r3, #15
 800419e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80041c0:	f023 030f 	bic.w	r3, r3, #15
 80041c4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041ea:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004258:	f023 0303 	bic.w	r3, r3, #3
 800425c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800427e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004282:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80042c6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6999      	ldr	r1, [r3, #24]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	041a      	lsls	r2, r3, #16
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042ea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6999      	ldr	r1, [r3, #24]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004372:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	7c1b      	ldrb	r3, [r3, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_DSI_ConfigPhyTimer+0x16>
 8004412:	2302      	movs	r3, #2
 8004414:	e058      	b.n	80044c8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4293      	cmp	r3, r2
 8004426:	bf38      	it	cc
 8004428:	4613      	movcc	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800443c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	041a      	lsls	r2, r3, #16
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800446a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80044a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	021a      	lsls	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7c1b      	ldrb	r3, [r3, #16]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_DSI_Start+0x14>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e02b      	b.n	8004540 <HAL_DSI_Start+0x6c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0208 	orr.w	r2, r2, #8
 8004524:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	7c1b      	ldrb	r3, [r3, #16]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_DSI_ShortWrite+0x1a>
 8004562:	2302      	movs	r3, #2
 8004564:	e010      	b.n	8004588 <HAL_DSI_ShortWrite+0x3c>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fb69 	bl	8003c4e <DSI_ShortWrite>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	741a      	strb	r2, [r3, #16]

  return status;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08c      	sub	sp, #48	; 0x30
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	7c1b      	ldrb	r3, [r3, #16]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_DSI_LongWrite+0x1e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e084      	b.n	80046b8 <HAL_DSI_LongWrite+0x128>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b4:	f7fe fc20 	bl	8002df8 <HAL_GetTick>
 80045b8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80045ba:	e00c      	b.n	80045d6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80045bc:	f7fe fc1c 	bl	8002df8 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ca:	d904      	bls.n	80045d6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e070      	b.n	80046b8 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0eb      	beq.n	80045bc <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	bf28      	it	cs
 80045ee:	2303      	movcs	r3, #3
 80045f0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	e00f      	b.n	8004618 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	4413      	add	r3, r2
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	3301      	adds	r3, #1
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	4313      	orrs	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	3301      	adds	r3, #1
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d3eb      	bcc.n	80045f8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004638:	e028      	b.n	800468c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	2b04      	cmp	r3, #4
 800463e:	bf28      	it	cs
 8004640:	2304      	movcs	r3, #4
 8004642:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004648:	2300      	movs	r3, #0
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	e00e      	b.n	800466c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	4413      	add	r3, r2
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	4313      	orrs	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	3301      	adds	r3, #1
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3ec      	bcc.n	800464e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800467c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1d3      	bne.n	800463a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800469a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	f7ff fab6 	bl	8003c1c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e177      	b.n	80049cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046dc:	2201      	movs	r2, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	f040 8166 	bne.w	80049c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d005      	beq.n	8004712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470e:	2b02      	cmp	r3, #2
 8004710:	d130      	bne.n	8004774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004748:	2201      	movs	r2, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 0201 	and.w	r2, r3, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d017      	beq.n	80047b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d123      	bne.n	8004804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	08da      	lsrs	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3208      	adds	r2, #8
 80047c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	220f      	movs	r2, #15
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	08da      	lsrs	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	69b9      	ldr	r1, [r7, #24]
 8004800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0203 	and.w	r2, r3, #3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80c0 	beq.w	80049c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_GPIO_Init+0x324>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	4a65      	ldr	r2, [pc, #404]	; (80049e4 <HAL_GPIO_Init+0x324>)
 8004850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004854:	6453      	str	r3, [r2, #68]	; 0x44
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_GPIO_Init+0x324>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004862:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <HAL_GPIO_Init+0x328>)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a58      	ldr	r2, [pc, #352]	; (80049ec <HAL_GPIO_Init+0x32c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d037      	beq.n	80048fe <HAL_GPIO_Init+0x23e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a57      	ldr	r2, [pc, #348]	; (80049f0 <HAL_GPIO_Init+0x330>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_GPIO_Init+0x23a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a56      	ldr	r2, [pc, #344]	; (80049f4 <HAL_GPIO_Init+0x334>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02b      	beq.n	80048f6 <HAL_GPIO_Init+0x236>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a55      	ldr	r2, [pc, #340]	; (80049f8 <HAL_GPIO_Init+0x338>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d025      	beq.n	80048f2 <HAL_GPIO_Init+0x232>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a54      	ldr	r2, [pc, #336]	; (80049fc <HAL_GPIO_Init+0x33c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01f      	beq.n	80048ee <HAL_GPIO_Init+0x22e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a53      	ldr	r2, [pc, #332]	; (8004a00 <HAL_GPIO_Init+0x340>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d019      	beq.n	80048ea <HAL_GPIO_Init+0x22a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_GPIO_Init+0x344>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x226>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a51      	ldr	r2, [pc, #324]	; (8004a08 <HAL_GPIO_Init+0x348>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x222>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a50      	ldr	r2, [pc, #320]	; (8004a0c <HAL_GPIO_Init+0x34c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x21e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4f      	ldr	r2, [pc, #316]	; (8004a10 <HAL_GPIO_Init+0x350>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x21a>
 80048d6:	2309      	movs	r3, #9
 80048d8:	e012      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048da:	230a      	movs	r3, #10
 80048dc:	e010      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048de:	2308      	movs	r3, #8
 80048e0:	e00e      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048e2:	2307      	movs	r3, #7
 80048e4:	e00c      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048e6:	2306      	movs	r3, #6
 80048e8:	e00a      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048ea:	2305      	movs	r3, #5
 80048ec:	e008      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048ee:	2304      	movs	r3, #4
 80048f0:	e006      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048f2:	2303      	movs	r3, #3
 80048f4:	e004      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e002      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048fe:	2300      	movs	r3, #0
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	f002 0203 	and.w	r2, r2, #3
 8004906:	0092      	lsls	r2, r2, #2
 8004908:	4093      	lsls	r3, r2
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004910:	4935      	ldr	r1, [pc, #212]	; (80049e8 <HAL_GPIO_Init+0x328>)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	3302      	adds	r3, #2
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <HAL_GPIO_Init+0x354>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004942:	4a34      	ldr	r2, [pc, #208]	; (8004a14 <HAL_GPIO_Init+0x354>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004948:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_GPIO_Init+0x354>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <HAL_GPIO_Init+0x354>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004972:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_GPIO_Init+0x354>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004996:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_GPIO_Init+0x354>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_GPIO_Init+0x354>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <HAL_GPIO_Init+0x354>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	f67f ae84 	bls.w	80046dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40013800 	.word	0x40013800
 80049ec:	40020000 	.word	0x40020000
 80049f0:	40020400 	.word	0x40020400
 80049f4:	40020800 	.word	0x40020800
 80049f8:	40020c00 	.word	0x40020c00
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40021400 	.word	0x40021400
 8004a04:	40021800 	.word	0x40021800
 8004a08:	40021c00 	.word	0x40021c00
 8004a0c:	40022000 	.word	0x40022000
 8004a10:	40022400 	.word	0x40022400
 8004a14:	40013c00 	.word	0x40013c00

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a34:	e003      	b.n	8004a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	041a      	lsls	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	619a      	str	r2, [r3, #24]
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a5c:	887a      	ldrh	r2, [r7, #2]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4013      	ands	r3, r2
 8004a62:	041a      	lsls	r2, r3, #16
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	43d9      	mvns	r1, r3
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	400b      	ands	r3, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	619a      	str	r2, [r3, #24]
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0bf      	b.n	8004c12 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8ba 	bl	8004c20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004ac2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6999      	ldr	r1, [r3, #24]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ad8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6899      	ldr	r1, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b4a      	ldr	r3, [pc, #296]	; (8004c1c <HAL_LTDC_Init+0x19c>)
 8004af4:	400b      	ands	r3, r1
 8004af6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6899      	ldr	r1, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68d9      	ldr	r1, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <HAL_LTDC_Init+0x19c>)
 8004b22:	400b      	ands	r3, r1
 8004b24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68d9      	ldr	r1, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6919      	ldr	r1, [r3, #16]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b33      	ldr	r3, [pc, #204]	; (8004c1c <HAL_LTDC_Init+0x19c>)
 8004b50:	400b      	ands	r3, r1
 8004b52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6919      	ldr	r1, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6959      	ldr	r1, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <HAL_LTDC_Init+0x19c>)
 8004b7e:	400b      	ands	r3, r1
 8004b80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6959      	ldr	r1, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0206 	orr.w	r2, r2, #6
 8004bee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	f000f800 	.word	0xf000f800

08004c20 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_LTDC_ConfigLayer+0x1a>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e02c      	b.n	8004ca8 <HAL_LTDC_ConfigLayer+0x74>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2134      	movs	r1, #52	; 0x34
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4614      	mov	r4, r2
 8004c72:	461d      	mov	r5, r3
 8004c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f811 	bl	8004cb0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bdb0      	pop	{r4, r5, r7, pc}

08004cb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	4413      	add	r3, r2
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	01db      	lsls	r3, r3, #7
 8004cdc:	4413      	add	r3, r2
 8004cde:	3384      	adds	r3, #132	; 0x84
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	01d2      	lsls	r2, r2, #7
 8004cec:	440a      	add	r2, r1
 8004cee:	3284      	adds	r2, #132	; 0x84
 8004cf0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cf4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d06:	4413      	add	r3, r2
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	01db      	lsls	r3, r3, #7
 8004d14:	440b      	add	r3, r1
 8004d16:	3384      	adds	r3, #132	; 0x84
 8004d18:	4619      	mov	r1, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d2e:	4413      	add	r3, r2
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	01db      	lsls	r3, r3, #7
 8004d3e:	4413      	add	r3, r2
 8004d40:	3384      	adds	r3, #132	; 0x84
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	01d2      	lsls	r2, r2, #7
 8004d4e:	440a      	add	r2, r1
 8004d50:	3284      	adds	r2, #132	; 0x84
 8004d52:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d66:	4413      	add	r3, r2
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	01db      	lsls	r3, r3, #7
 8004d74:	440b      	add	r3, r1
 8004d76:	3384      	adds	r3, #132	; 0x84
 8004d78:	4619      	mov	r1, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	01db      	lsls	r3, r3, #7
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3384      	adds	r3, #132	; 0x84
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	4611      	mov	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	01d2      	lsls	r2, r2, #7
 8004d9a:	440a      	add	r2, r1
 8004d9c:	3284      	adds	r2, #132	; 0x84
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	01db      	lsls	r3, r3, #7
 8004dae:	4413      	add	r3, r2
 8004db0:	3384      	adds	r3, #132	; 0x84
 8004db2:	461a      	mov	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	01db      	lsls	r3, r3, #7
 8004de0:	4413      	add	r3, r2
 8004de2:	3384      	adds	r3, #132	; 0x84
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	4413      	add	r3, r2
 8004df2:	3384      	adds	r3, #132	; 0x84
 8004df4:	461a      	mov	r2, r3
 8004df6:	2300      	movs	r3, #0
 8004df8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e00:	461a      	mov	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	01db      	lsls	r3, r3, #7
 8004e14:	440b      	add	r3, r1
 8004e16:	3384      	adds	r3, #132	; 0x84
 8004e18:	4619      	mov	r1, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	01db      	lsls	r3, r3, #7
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3384      	adds	r3, #132	; 0x84
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	4611      	mov	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	01d2      	lsls	r2, r2, #7
 8004e3a:	440a      	add	r2, r1
 8004e3c:	3284      	adds	r2, #132	; 0x84
 8004e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e42:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	01db      	lsls	r3, r3, #7
 8004e4e:	4413      	add	r3, r2
 8004e50:	3384      	adds	r3, #132	; 0x84
 8004e52:	461a      	mov	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	4413      	add	r3, r2
 8004e66:	3384      	adds	r3, #132	; 0x84
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	01d2      	lsls	r2, r2, #7
 8004e74:	440a      	add	r2, r1
 8004e76:	3284      	adds	r2, #132	; 0x84
 8004e78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	6809      	ldr	r1, [r1, #0]
 8004e8e:	4608      	mov	r0, r1
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	01c9      	lsls	r1, r1, #7
 8004e94:	4401      	add	r1, r0
 8004e96:	3184      	adds	r1, #132	; 0x84
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	01db      	lsls	r3, r3, #7
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3384      	adds	r3, #132	; 0x84
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	01db      	lsls	r3, r3, #7
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3384      	adds	r3, #132	; 0x84
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	01db      	lsls	r3, r3, #7
 8004eca:	4413      	add	r3, r2
 8004ecc:	3384      	adds	r3, #132	; 0x84
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004ede:	2304      	movs	r3, #4
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e01b      	b.n	8004f1c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d102      	bne.n	8004ef2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004eec:	2303      	movs	r3, #3
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e014      	b.n	8004f1c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d00b      	beq.n	8004f12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d007      	beq.n	8004f12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d003      	beq.n	8004f12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f0e:	2b07      	cmp	r3, #7
 8004f10:	d102      	bne.n	8004f18 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004f12:	2302      	movs	r3, #2
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e001      	b.n	8004f1c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	01db      	lsls	r3, r3, #7
 8004f26:	4413      	add	r3, r2
 8004f28:	3384      	adds	r3, #132	; 0x84
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	4611      	mov	r1, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	01d2      	lsls	r2, r2, #7
 8004f36:	440a      	add	r2, r1
 8004f38:	3284      	adds	r2, #132	; 0x84
 8004f3a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	041a      	lsls	r2, r3, #16
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	1acb      	subs	r3, r1, r3
 8004f56:	69f9      	ldr	r1, [r7, #28]
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	3303      	adds	r3, #3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6809      	ldr	r1, [r1, #0]
 8004f62:	4608      	mov	r0, r1
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	01c9      	lsls	r1, r1, #7
 8004f68:	4401      	add	r1, r0
 8004f6a:	3184      	adds	r1, #132	; 0x84
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	01db      	lsls	r3, r3, #7
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3384      	adds	r3, #132	; 0x84
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	4611      	mov	r1, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	01d2      	lsls	r2, r2, #7
 8004f8a:	440a      	add	r2, r1
 8004f8c:	3284      	adds	r2, #132	; 0x84
 8004f8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f92:	f023 0307 	bic.w	r3, r3, #7
 8004f96:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	01db      	lsls	r3, r3, #7
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3384      	adds	r3, #132	; 0x84
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	01db      	lsls	r3, r3, #7
 8004fb8:	4413      	add	r3, r2
 8004fba:	3384      	adds	r3, #132	; 0x84
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	01d2      	lsls	r2, r2, #7
 8004fc8:	440a      	add	r2, r1
 8004fca:	3284      	adds	r2, #132	; 0x84
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3724      	adds	r7, #36	; 0x24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	e001      	b.n	8004ff8 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004ff4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8005004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005008:	e000      	b.n	800500c <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800500a:	2200      	movs	r2, #0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8005018:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800501c:	e000      	b.n	8005020 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800501e:	2200      	movs	r2, #0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	4413      	add	r3, r2
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	441a      	add	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	4413      	add	r3, r2
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	441a      	add	r2, r3
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	441a      	add	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	4413      	add	r3, r2
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_PWREx_EnableOverDrive+0x90>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <HAL_PWREx_EnableOverDrive+0x90>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <HAL_PWREx_EnableOverDrive+0x90>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80050a6:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_PWREx_EnableOverDrive+0x94>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050ac:	f7fd fea4 	bl	8002df8 <HAL_GetTick>
 80050b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050b2:	e009      	b.n	80050c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050b4:	f7fd fea0 	bl	8002df8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c2:	d901      	bls.n	80050c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e01f      	b.n	8005108 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_PWREx_EnableOverDrive+0x98>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d1ee      	bne.n	80050b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <HAL_PWREx_EnableOverDrive+0x9c>)
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050dc:	f7fd fe8c 	bl	8002df8 <HAL_GetTick>
 80050e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050e2:	e009      	b.n	80050f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050e4:	f7fd fe88 	bl	8002df8 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f2:	d901      	bls.n	80050f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e007      	b.n	8005108 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <HAL_PWREx_EnableOverDrive+0x98>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005104:	d1ee      	bne.n	80050e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	420e0040 	.word	0x420e0040
 8005118:	40007000 	.word	0x40007000
 800511c:	420e0044 	.word	0x420e0044

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0cc      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d90c      	bls.n	800515c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b65      	ldr	r3, [pc, #404]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0b8      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005174:	4b59      	ldr	r3, [pc, #356]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a58      	ldr	r2, [pc, #352]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800517e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800518c:	4b53      	ldr	r3, [pc, #332]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a52      	ldr	r2, [pc, #328]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005198:	4b50      	ldr	r3, [pc, #320]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	494d      	ldr	r1, [pc, #308]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d044      	beq.n	8005240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	4b47      	ldr	r3, [pc, #284]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d119      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e07f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d003      	beq.n	80051de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e06f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ee:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e067      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fe:	4b37      	ldr	r3, [pc, #220]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f023 0203 	bic.w	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4934      	ldr	r1, [pc, #208]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005210:	f7fd fdf2 	bl	8002df8 <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	e00a      	b.n	800522e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005218:	f7fd fdee 	bl	8002df8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e04f      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 020c 	and.w	r2, r3, #12
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	429a      	cmp	r2, r3
 800523e:	d1eb      	bne.n	8005218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d20c      	bcs.n	8005268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e032      	b.n	80052ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4916      	ldr	r1, [pc, #88]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	490e      	ldr	r1, [pc, #56]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052a6:	f000 f821 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	490a      	ldr	r1, [pc, #40]	; (80052e0 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	5ccb      	ldrb	r3, [r1, r3]
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCC_ClockConfig+0x1c8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fc f96e 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023c00 	.word	0x40023c00
 80052dc:	40023800 	.word	0x40023800
 80052e0:	0801c1cc 	.word	0x0801c1cc
 80052e4:	20000058 	.word	0x20000058
 80052e8:	2000005c 	.word	0x2000005c

080052ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f0:	b094      	sub	sp, #80	; 0x50
 80052f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	2300      	movs	r3, #0
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	2300      	movs	r3, #0
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005304:	4b79      	ldr	r3, [pc, #484]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 030c 	and.w	r3, r3, #12
 800530c:	2b08      	cmp	r3, #8
 800530e:	d00d      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x40>
 8005310:	2b08      	cmp	r3, #8
 8005312:	f200 80e1 	bhi.w	80054d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x34>
 800531a:	2b04      	cmp	r3, #4
 800531c:	d003      	beq.n	8005326 <HAL_RCC_GetSysClockFreq+0x3a>
 800531e:	e0db      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005320:	4b73      	ldr	r3, [pc, #460]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005324:	e0db      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005326:	4b73      	ldr	r3, [pc, #460]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800532a:	e0d8      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800532c:	4b6f      	ldr	r3, [pc, #444]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005336:	4b6d      	ldr	r3, [pc, #436]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d063      	beq.n	800540a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005342:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	2200      	movs	r2, #0
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
 800534c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
 8005356:	2300      	movs	r3, #0
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
 800535a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f04f 0100 	mov.w	r1, #0
 800536a:	0159      	lsls	r1, r3, #5
 800536c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005370:	0150      	lsls	r0, r2, #5
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4621      	mov	r1, r4
 8005378:	1a51      	subs	r1, r2, r1
 800537a:	6139      	str	r1, [r7, #16]
 800537c:	4629      	mov	r1, r5
 800537e:	eb63 0301 	sbc.w	r3, r3, r1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005390:	4659      	mov	r1, fp
 8005392:	018b      	lsls	r3, r1, #6
 8005394:	4651      	mov	r1, sl
 8005396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800539a:	4651      	mov	r1, sl
 800539c:	018a      	lsls	r2, r1, #6
 800539e:	4651      	mov	r1, sl
 80053a0:	ebb2 0801 	subs.w	r8, r2, r1
 80053a4:	4659      	mov	r1, fp
 80053a6:	eb63 0901 	sbc.w	r9, r3, r1
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053be:	4690      	mov	r8, r2
 80053c0:	4699      	mov	r9, r3
 80053c2:	4623      	mov	r3, r4
 80053c4:	eb18 0303 	adds.w	r3, r8, r3
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	462b      	mov	r3, r5
 80053cc:	eb49 0303 	adc.w	r3, r9, r3
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053de:	4629      	mov	r1, r5
 80053e0:	024b      	lsls	r3, r1, #9
 80053e2:	4621      	mov	r1, r4
 80053e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e8:	4621      	mov	r1, r4
 80053ea:	024a      	lsls	r2, r1, #9
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	2200      	movs	r2, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053fc:	f7fb fcf8 	bl	8000df0 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005408:	e058      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540a:	4b38      	ldr	r3, [pc, #224]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	099b      	lsrs	r3, r3, #6
 8005410:	2200      	movs	r2, #0
 8005412:	4618      	mov	r0, r3
 8005414:	4611      	mov	r1, r2
 8005416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	f04f 0000 	mov.w	r0, #0
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	0159      	lsls	r1, r3, #5
 8005432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005436:	0150      	lsls	r0, r2, #5
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4641      	mov	r1, r8
 800543e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005442:	4649      	mov	r1, r9
 8005444:	eb63 0b01 	sbc.w	fp, r3, r1
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800545c:	ebb2 040a 	subs.w	r4, r2, sl
 8005460:	eb63 050b 	sbc.w	r5, r3, fp
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	00eb      	lsls	r3, r5, #3
 800546e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005472:	00e2      	lsls	r2, r4, #3
 8005474:	4614      	mov	r4, r2
 8005476:	461d      	mov	r5, r3
 8005478:	4643      	mov	r3, r8
 800547a:	18e3      	adds	r3, r4, r3
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	464b      	mov	r3, r9
 8005480:	eb45 0303 	adc.w	r3, r5, r3
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005492:	4629      	mov	r1, r5
 8005494:	028b      	lsls	r3, r1, #10
 8005496:	4621      	mov	r1, r4
 8005498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800549c:	4621      	mov	r1, r4
 800549e:	028a      	lsls	r2, r1, #10
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a6:	2200      	movs	r2, #0
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	61fa      	str	r2, [r7, #28]
 80054ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b0:	f7fb fc9e 	bl	8000df0 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4613      	mov	r3, r2
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCC_GetSysClockFreq+0x200>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	3301      	adds	r3, #1
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d6:	e002      	b.n	80054de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3750      	adds	r7, #80	; 0x50
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ea:	bf00      	nop
 80054ec:	40023800 	.word	0x40023800
 80054f0:	00f42400 	.word	0x00f42400
 80054f4:	007a1200 	.word	0x007a1200

080054f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <HAL_RCC_GetHCLKFreq+0x14>)
 80054fe:	681b      	ldr	r3, [r3, #0]
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000058 	.word	0x20000058

08005510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005514:	f7ff fff0 	bl	80054f8 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	0a9b      	lsrs	r3, r3, #10
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4903      	ldr	r1, [pc, #12]	; (8005534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40023800 	.word	0x40023800
 8005534:	0801c1dc 	.word	0x0801c1dc

08005538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	220f      	movs	r2, #15
 8005546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005548:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCC_GetClockConfig+0x5c>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0203 	and.w	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_RCC_GetClockConfig+0x5c>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <HAL_RCC_GetClockConfig+0x5c>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <HAL_RCC_GetClockConfig+0x5c>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	08db      	lsrs	r3, r3, #3
 8005572:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800557a:	4b07      	ldr	r3, [pc, #28]	; (8005598 <HAL_RCC_GetClockConfig+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 020f 	and.w	r2, r3, #15
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800
 8005598:	40023c00 	.word	0x40023c00

0800559c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055c4:	4b66      	ldr	r3, [pc, #408]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	4963      	ldr	r1, [pc, #396]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80055e6:	4b5e      	ldr	r3, [pc, #376]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	495a      	ldr	r1, [pc, #360]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800561c:	2b00      	cmp	r3, #0
 800561e:	d075      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005620:	4b50      	ldr	r3, [pc, #320]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005626:	f7fd fbe7 	bl	8002df8 <HAL_GetTick>
 800562a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800562e:	f7fd fbe3 	bl	8002df8 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1dc      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005640:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f0      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	019a      	lsls	r2, r3, #6
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	071b      	lsls	r3, r3, #28
 8005664:	493e      	ldr	r1, [pc, #248]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01f      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005678:	4b39      	ldr	r3, [pc, #228]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	0f1b      	lsrs	r3, r3, #28
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	019a      	lsls	r2, r3, #6
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	431a      	orrs	r2, r3
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	071b      	lsls	r3, r3, #28
 8005698:	4931      	ldr	r1, [pc, #196]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a6:	f023 021f 	bic.w	r2, r3, #31
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	492b      	ldr	r1, [pc, #172]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	019a      	lsls	r2, r3, #6
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	061b      	lsls	r3, r3, #24
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	071b      	lsls	r3, r3, #28
 80056d8:	4921      	ldr	r1, [pc, #132]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056e6:	f7fd fb87 	bl	8002df8 <HAL_GetTick>
 80056ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056ee:	f7fd fb83 	bl	8002df8 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e17c      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d112      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10c      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80ce 	beq.w	80058ce <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800573a:	f040 80c8 	bne.w	80058ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005744:	f7fd fb58 	bl	8002df8 <HAL_GetTick>
 8005748:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800574a:	e00f      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800574c:	f7fd fb54 	bl	8002df8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d908      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e14d      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	42470068 	.word	0x42470068
 8005768:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800576c:	4ba5      	ldr	r3, [pc, #660]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005778:	d0e8      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d02e      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005786:	4b9f      	ldr	r3, [pc, #636]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005798:	4b9a      	ldr	r3, [pc, #616]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	0f1b      	lsrs	r3, r3, #28
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	019a      	lsls	r2, r3, #6
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	3b01      	subs	r3, #1
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	431a      	orrs	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	071b      	lsls	r3, r3, #28
 80057c2:	4990      	ldr	r1, [pc, #576]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ca:	4b8e      	ldr	r3, [pc, #568]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	3b01      	subs	r3, #1
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	4989      	ldr	r1, [pc, #548]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02c      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80057f0:	4b84      	ldr	r3, [pc, #528]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	3301      	adds	r3, #1
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005802:	4b80      	ldr	r3, [pc, #512]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	019a      	lsls	r2, r3, #6
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	3b01      	subs	r3, #1
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	431a      	orrs	r2, r3
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	071b      	lsls	r3, r3, #28
 800582c:	4975      	ldr	r1, [pc, #468]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005834:	4b73      	ldr	r3, [pc, #460]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	4970      	ldr	r1, [pc, #448]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d024      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800585a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800585e:	d11f      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005860:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	0e1b      	lsrs	r3, r3, #24
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800586e:	4b65      	ldr	r3, [pc, #404]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	0f1b      	lsrs	r3, r3, #28
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	019a      	lsls	r2, r3, #6
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	3b01      	subs	r3, #1
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	431a      	orrs	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	431a      	orrs	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	071b      	lsls	r3, r3, #28
 8005898:	495a      	ldr	r1, [pc, #360]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058a0:	4b59      	ldr	r3, [pc, #356]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058a6:	f7fd faa7 	bl	8002df8 <HAL_GetTick>
 80058aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ac:	e008      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058ae:	f7fd faa3 	bl	8002df8 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e09c      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058c0:	4b50      	ldr	r3, [pc, #320]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058cc:	d1ef      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8083 	beq.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	4b48      	ldr	r3, [pc, #288]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	4a47      	ldr	r2, [pc, #284]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ea:	6413      	str	r3, [r2, #64]	; 0x40
 80058ec:	4b45      	ldr	r3, [pc, #276]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058f8:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a43      	ldr	r2, [pc, #268]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80058fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005902:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005904:	f7fd fa78 	bl	8002df8 <HAL_GetTick>
 8005908:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800590c:	f7fd fa74 	bl	8002df8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e06d      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800592a:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005932:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d02f      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	429a      	cmp	r2, r3
 8005946:	d028      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005948:	4b2e      	ldr	r3, [pc, #184]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005950:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005952:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005958:	4b2d      	ldr	r3, [pc, #180]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800595e:	4a29      	ldr	r2, [pc, #164]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005964:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d114      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005970:	f7fd fa42 	bl	8002df8 <HAL_GetTick>
 8005974:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005976:	e00a      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005978:	f7fd fa3e 	bl	8002df8 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e035      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598e:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ee      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a6:	d10d      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80059a8:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059bc:	4911      	ldr	r1, [pc, #68]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
 80059c2:	e005      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059ce:	6093      	str	r3, [r2, #8]
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059dc:	4909      	ldr	r1, [pc, #36]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80059f6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	42470070 	.word	0x42470070
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	42470e40 	.word	0x42470e40
 8005a14:	424711e0 	.word	0x424711e0

08005a18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e273      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d075      	beq.n	8005b22 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a36:	4b88      	ldr	r3, [pc, #544]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d00c      	beq.n	8005a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a42:	4b85      	ldr	r3, [pc, #532]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d112      	bne.n	8005a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4e:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5a:	d10b      	bne.n	8005a74 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5c:	4b7e      	ldr	r3, [pc, #504]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d05b      	beq.n	8005b20 <HAL_RCC_OscConfig+0x108>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d157      	bne.n	8005b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e24e      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d106      	bne.n	8005a8c <HAL_RCC_OscConfig+0x74>
 8005a7e:	4b76      	ldr	r3, [pc, #472]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a75      	ldr	r2, [pc, #468]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e01d      	b.n	8005ac8 <HAL_RCC_OscConfig+0xb0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x98>
 8005a96:	4b70      	ldr	r3, [pc, #448]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a6f      	ldr	r2, [pc, #444]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6c      	ldr	r2, [pc, #432]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e00b      	b.n	8005ac8 <HAL_RCC_OscConfig+0xb0>
 8005ab0:	4b69      	ldr	r3, [pc, #420]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a68      	ldr	r2, [pc, #416]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b66      	ldr	r3, [pc, #408]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a65      	ldr	r2, [pc, #404]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd f992 	bl	8002df8 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad8:	f7fd f98e 	bl	8002df8 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	; 0x64
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e213      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0xc0>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fd f97e 	bl	8002df8 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b00:	f7fd f97a 	bl	8002df8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	; 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e1ff      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	4b51      	ldr	r3, [pc, #324]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0xe8>
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d063      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b2e:	4b4a      	ldr	r3, [pc, #296]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d11c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b46:	4b44      	ldr	r3, [pc, #272]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d116      	bne.n	8005b80 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b52:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_RCC_OscConfig+0x152>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e1d3      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4937      	ldr	r1, [pc, #220]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7e:	e03a      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b88:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8e:	f7fd f933 	bl	8002df8 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b96:	f7fd f92f 	bl	8002df8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e1b4      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	4b2b      	ldr	r3, [pc, #172]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb4:	4b28      	ldr	r3, [pc, #160]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4925      	ldr	r1, [pc, #148]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	600b      	str	r3, [r1, #0]
 8005bc8:	e015      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_RCC_OscConfig+0x244>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fd f912 	bl	8002df8 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd8:	f7fd f90e 	bl	8002df8 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e193      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d036      	beq.n	8005c70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <HAL_RCC_OscConfig+0x248>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fd f8f2 	bl	8002df8 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c18:	f7fd f8ee 	bl	8002df8 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e173      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x200>
 8005c36:	e01b      	b.n	8005c70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_RCC_OscConfig+0x248>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3e:	f7fd f8db 	bl	8002df8 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c44:	e00e      	b.n	8005c64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c46:	f7fd f8d7 	bl	8002df8 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d907      	bls.n	8005c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e15c      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	42470000 	.word	0x42470000
 8005c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c64:	4b8a      	ldr	r3, [pc, #552]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1ea      	bne.n	8005c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8097 	beq.w	8005dac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c82:	4b83      	ldr	r3, [pc, #524]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10f      	bne.n	8005cae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	4b7f      	ldr	r3, [pc, #508]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	4a7e      	ldr	r2, [pc, #504]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9e:	4b7c      	ldr	r3, [pc, #496]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cae:	4b79      	ldr	r3, [pc, #484]	; (8005e94 <HAL_RCC_OscConfig+0x47c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d118      	bne.n	8005cec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cba:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <HAL_RCC_OscConfig+0x47c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a75      	ldr	r2, [pc, #468]	; (8005e94 <HAL_RCC_OscConfig+0x47c>)
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc6:	f7fd f897 	bl	8002df8 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cce:	f7fd f893 	bl	8002df8 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e118      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	4b6c      	ldr	r3, [pc, #432]	; (8005e94 <HAL_RCC_OscConfig+0x47c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d106      	bne.n	8005d02 <HAL_RCC_OscConfig+0x2ea>
 8005cf4:	4b66      	ldr	r3, [pc, #408]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	4a65      	ldr	r2, [pc, #404]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005d00:	e01c      	b.n	8005d3c <HAL_RCC_OscConfig+0x324>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x30c>
 8005d0a:	4b61      	ldr	r3, [pc, #388]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	4a60      	ldr	r2, [pc, #384]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d10:	f043 0304 	orr.w	r3, r3, #4
 8005d14:	6713      	str	r3, [r2, #112]	; 0x70
 8005d16:	4b5e      	ldr	r3, [pc, #376]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	4a5d      	ldr	r2, [pc, #372]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	6713      	str	r3, [r2, #112]	; 0x70
 8005d22:	e00b      	b.n	8005d3c <HAL_RCC_OscConfig+0x324>
 8005d24:	4b5a      	ldr	r3, [pc, #360]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	4a59      	ldr	r2, [pc, #356]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d30:	4b57      	ldr	r3, [pc, #348]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	4a56      	ldr	r2, [pc, #344]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d36:	f023 0304 	bic.w	r3, r3, #4
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d44:	f7fd f858 	bl	8002df8 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4c:	f7fd f854 	bl	8002df8 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e0d7      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d62:	4b4b      	ldr	r3, [pc, #300]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0ee      	beq.n	8005d4c <HAL_RCC_OscConfig+0x334>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fd f842 	bl	8002df8 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fd f83e 	bl	8002df8 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e0c1      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8e:	4b40      	ldr	r3, [pc, #256]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1ee      	bne.n	8005d78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d105      	bne.n	8005dac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da0:	4b3b      	ldr	r3, [pc, #236]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	4a3a      	ldr	r2, [pc, #232]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80ad 	beq.w	8005f10 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005db6:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d060      	beq.n	8005e84 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d145      	bne.n	8005e56 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dca:	4b33      	ldr	r3, [pc, #204]	; (8005e98 <HAL_RCC_OscConfig+0x480>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd0:	f7fd f812 	bl	8002df8 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd8:	f7fd f80e 	bl	8002df8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e093      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dea:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	019b      	lsls	r3, r3, #6
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	071b      	lsls	r3, r3, #28
 8005e22:	491b      	ldr	r1, [pc, #108]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <HAL_RCC_OscConfig+0x480>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2e:	f7fc ffe3 	bl	8002df8 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e36:	f7fc ffdf 	bl	8002df8 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e064      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x41e>
 8005e54:	e05c      	b.n	8005f10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_RCC_OscConfig+0x480>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fc ffcc 	bl	8002df8 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fc ffc8 	bl	8002df8 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e04d      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCC_OscConfig+0x478>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x44c>
 8005e82:	e045      	b.n	8005f10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e040      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40007000 	.word	0x40007000
 8005e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e9c:	4b1f      	ldr	r3, [pc, #124]	; (8005f1c <HAL_RCC_OscConfig+0x504>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d030      	beq.n	8005f0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d129      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d122      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d119      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d10f      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023800 	.word	0x40023800

08005f20 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_SD_IRQHandler+0x2e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa2a 	bl	80063a0 <SD_Read_IT>
 8005f4c:	e155      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 808f 	beq.w	800607c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005f76:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005f7a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d039      	beq.n	800600a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <HAL_SD_IRQHandler+0x8a>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d011      	beq.n	8005fce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 ff7c 	bl	8006eac <SDMMC_CmdStopTransfer>
 8005fb4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f91f 	bl	800620c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <HAL_SD_IRQHandler+0xda>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb fc98 	bl	8001930 <HAL_SD_RxCpltCallback>
 8006000:	e0fb      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb fc86 	bl	8001914 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006008:	e0f7      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80f2 	beq.w	80061fa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d011      	beq.n	8006044 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 ff41 	bl	8006eac <SDMMC_CmdStopTransfer>
 800602a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8e4 	bl	800620c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 80d5 	bne.w	80061fa <HAL_SD_IRQHandler+0x2da>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 80cf 	bne.w	80061fa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0208 	bic.w	r2, r2, #8
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fb fc4d 	bl	8001914 <HAL_SD_TxCpltCallback>
}
 800607a:	e0be      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_SD_IRQHandler+0x17c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9d4 	bl	8006442 <SD_Write_IT>
 800609a:	e0ae      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80a7 	beq.w	80061fa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	f043 0202 	orr.w	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f043 0208 	orr.w	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	f043 0210 	orr.w	r2, r3, #16
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f240 523a 	movw	r2, #1338	; 0x53a
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 feba 	bl	8006eac <SDMMC_CmdStopTransfer>
 8006138:	4602      	mov	r2, r0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f855 	bl	800620c <HAL_SD_ErrorCallback>
}
 8006162:	e04a      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b00      	cmp	r3, #0
 800616c:	d045      	beq.n	80061fa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_SD_IRQHandler+0x262>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d011      	beq.n	80061a6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_SD_IRQHandler+0x2e4>)
 8006188:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	4618      	mov	r0, r3
 8006190:	f7fd f850 	bl	8003234 <HAL_DMA_Abort_IT>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d02f      	beq.n	80061fa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f868 	bl	8006274 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80061a4:	e029      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_SD_IRQHandler+0x29a>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d011      	beq.n	80061de <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	4a12      	ldr	r2, [pc, #72]	; (8006208 <HAL_SD_IRQHandler+0x2e8>)
 80061c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd f834 	bl	8003234 <HAL_DMA_Abort_IT>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d013      	beq.n	80061fa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f883 	bl	80062e2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80061dc:	e00d      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f814 	bl	8006220 <HAL_SD_AbortCallback>
}
 80061f8:	e7ff      	b.n	80061fa <HAL_SD_IRQHandler+0x2da>
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	08006275 	.word	0x08006275
 8006208:	080062e3 	.word	0x080062e3

0800620c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f882 	bl	8006350 <SD_SendStatus>
 800624c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	0a5b      	lsrs	r3, r3, #9
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800626a:	693b      	ldr	r3, [r7, #16]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f240 523a 	movw	r2, #1338	; 0x53a
 800628a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff ffd1 	bl	8006234 <HAL_SD_GetCardState>
 8006292:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d002      	beq.n	80062ae <SD_DMATxAbort+0x3a>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d10a      	bne.n	80062c4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fdfa 	bl	8006eac <SDMMC_CmdStopTransfer>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff ffa7 	bl	8006220 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80062d2:	e002      	b.n	80062da <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ff99 	bl	800620c <HAL_SD_ErrorCallback>
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff ff9a 	bl	8006234 <HAL_SD_GetCardState>
 8006300:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b06      	cmp	r3, #6
 8006314:	d002      	beq.n	800631c <SD_DMARxAbort+0x3a>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b05      	cmp	r3, #5
 800631a:	d10a      	bne.n	8006332 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fdc3 	bl	8006eac <SDMMC_CmdStopTransfer>
 8006326:	4602      	mov	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	431a      	orrs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff ff70 	bl	8006220 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006340:	e002      	b.n	8006348 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff ff62 	bl	800620c <HAL_SD_ErrorCallback>
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006364:	e018      	b.n	8006398 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fdbc 	bl	8006ef0 <SDMMC_CmdSendStatus>
 8006378:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	e009      	b.n	8006398 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fd7a 	bl	8006e84 <SDIO_GetResponse>
 8006390:	4602      	mov	r2, r0
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03f      	beq.n	800643a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	e033      	b.n	8006428 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fd08 	bl	8006dda <SDIO_ReadFIFO>
 80063ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3b01      	subs	r3, #1
 80063de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3b01      	subs	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	0e1b      	lsrs	r3, r3, #24
 8006410:	b2da      	uxtb	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3b01      	subs	r3, #1
 8006420:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3301      	adds	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b07      	cmp	r3, #7
 800642c:	d9c8      	bls.n	80063c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d043      	beq.n	80064e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e037      	b.n	80064d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3301      	adds	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3b01      	subs	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	021a      	lsls	r2, r3, #8
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4313      	orrs	r3, r2
 800647e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3b01      	subs	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	041a      	lsls	r2, r3, #16
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4313      	orrs	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	061a      	lsls	r2, r3, #24
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f107 0208 	add.w	r2, r7, #8
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fc94 	bl	8006df4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	3301      	adds	r3, #1
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b07      	cmp	r3, #7
 80064d6:	d9c4      	bls.n	8006462 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80064e4:	bf00      	nop
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e025      	b.n	800654c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f81d 	bl	8006554 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f000 fb13 	bl	8006b58 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	461a      	mov	r2, r3
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	f000 fb7e 	bl	8006c3e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d101      	bne.n	8006584 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
 8006582:	e018      	b.n	80065b6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fbd1 	bl	8006d3c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d104      	bne.n	80065ac <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2205      	movs	r2, #5
 80065a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80065aa:	e003      	b.n	80065b4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d101      	bne.n	80065d8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
 80065d6:	e00e      	b.n	80065f6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fbe4 	bl	8006db4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e041      	b.n	8006694 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f839 	bl	800669c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f000 f9d7 	bl	80069f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d001      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e04e      	b.n	8006766 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a23      	ldr	r2, [pc, #140]	; (8006774 <HAL_TIM_Base_Start_IT+0xc4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d022      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f2:	d01d      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1f      	ldr	r2, [pc, #124]	; (8006778 <HAL_TIM_Base_Start_IT+0xc8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1e      	ldr	r2, [pc, #120]	; (800677c <HAL_TIM_Base_Start_IT+0xcc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <HAL_TIM_Base_Start_IT+0xd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <HAL_TIM_Base_Start_IT+0xd4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a19      	ldr	r2, [pc, #100]	; (8006788 <HAL_TIM_Base_Start_IT+0xd8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0x80>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a18      	ldr	r2, [pc, #96]	; (800678c <HAL_TIM_Base_Start_IT+0xdc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d111      	bne.n	8006754 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b06      	cmp	r3, #6
 8006740:	d010      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006752:	e007      	b.n	8006764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40010400 	.word	0x40010400
 8006788:	40014000 	.word	0x40014000
 800678c:	40001800 	.word	0x40001800

08006790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0202 	mvn.w	r2, #2
 80067bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8ee 	bl	80069b4 <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8e0 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f8f1 	bl	80069c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d122      	bne.n	8006840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b04      	cmp	r3, #4
 8006806:	d11b      	bne.n	8006840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0204 	mvn.w	r2, #4
 8006810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8c4 	bl	80069b4 <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f8b6 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8c7 	bl	80069c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b08      	cmp	r3, #8
 800684c:	d122      	bne.n	8006894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b08      	cmp	r3, #8
 800685a:	d11b      	bne.n	8006894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0208 	mvn.w	r2, #8
 8006864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2204      	movs	r2, #4
 800686a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f89a 	bl	80069b4 <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f88c 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f89d 	bl	80069c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d122      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	d11b      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0210 	mvn.w	r2, #16
 80068b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2208      	movs	r2, #8
 80068be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f870 	bl	80069b4 <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f862 	bl	80069a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f873 	bl	80069c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10e      	bne.n	8006914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d107      	bne.n	8006914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0201 	mvn.w	r2, #1
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fa fe04 	bl	800151c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691e:	2b80      	cmp	r3, #128	; 0x80
 8006920:	d10e      	bne.n	8006940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692c:	2b80      	cmp	r3, #128	; 0x80
 800692e:	d107      	bne.n	8006940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f902 	bl	8006b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d10e      	bne.n	800696c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d107      	bne.n	800696c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f838 	bl	80069dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b20      	cmp	r3, #32
 8006978:	d10e      	bne.n	8006998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b20      	cmp	r3, #32
 8006986:	d107      	bne.n	8006998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0220 	mvn.w	r2, #32
 8006990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f8cc 	bl	8006b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a40      	ldr	r2, [pc, #256]	; (8006b04 <TIM_Base_SetConfig+0x114>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_Base_SetConfig+0x40>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0e:	d00f      	beq.n	8006a30 <TIM_Base_SetConfig+0x40>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a3d      	ldr	r2, [pc, #244]	; (8006b08 <TIM_Base_SetConfig+0x118>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_Base_SetConfig+0x40>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a3c      	ldr	r2, [pc, #240]	; (8006b0c <TIM_Base_SetConfig+0x11c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_Base_SetConfig+0x40>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a3b      	ldr	r2, [pc, #236]	; (8006b10 <TIM_Base_SetConfig+0x120>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_Base_SetConfig+0x40>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <TIM_Base_SetConfig+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d108      	bne.n	8006a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2f      	ldr	r2, [pc, #188]	; (8006b04 <TIM_Base_SetConfig+0x114>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d02b      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a50:	d027      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2c      	ldr	r2, [pc, #176]	; (8006b08 <TIM_Base_SetConfig+0x118>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d023      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <TIM_Base_SetConfig+0x11c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01f      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2a      	ldr	r2, [pc, #168]	; (8006b10 <TIM_Base_SetConfig+0x120>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01b      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <TIM_Base_SetConfig+0x124>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d017      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a28      	ldr	r2, [pc, #160]	; (8006b18 <TIM_Base_SetConfig+0x128>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a27      	ldr	r2, [pc, #156]	; (8006b1c <TIM_Base_SetConfig+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00f      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a26      	ldr	r2, [pc, #152]	; (8006b20 <TIM_Base_SetConfig+0x130>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00b      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a25      	ldr	r2, [pc, #148]	; (8006b24 <TIM_Base_SetConfig+0x134>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d007      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a24      	ldr	r2, [pc, #144]	; (8006b28 <TIM_Base_SetConfig+0x138>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a23      	ldr	r2, [pc, #140]	; (8006b2c <TIM_Base_SetConfig+0x13c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <TIM_Base_SetConfig+0x114>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_Base_SetConfig+0xf8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a0c      	ldr	r2, [pc, #48]	; (8006b14 <TIM_Base_SetConfig+0x124>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d103      	bne.n	8006af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	615a      	str	r2, [r3, #20]
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40010400 	.word	0x40010400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800
 8006b24:	40001800 	.word	0x40001800
 8006b28:	40001c00 	.word	0x40001c00
 8006b2c:	40002000 	.word	0x40002000

08006b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d029      	beq.n	8006bc6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006b7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b82:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006b8c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006b92:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006b98:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006b9e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006ba4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006baa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006bb0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006bb6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e034      	b.n	8006c30 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006bdc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006be2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bfa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006c04:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006c0a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006c10:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006c16:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006c1c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d02e      	beq.n	8006cb6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c64:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006c74:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006c7e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006c88:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006c92:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006c9c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	e03b      	b.n	8006d2e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cc6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006cec:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006cfc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006d06:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006d10:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006d58:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006d62:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006d74:	f7fc f840 	bl	8002df8 <HAL_GetTick>
 8006d78:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d7a:	e010      	b.n	8006d9e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d82:	d00c      	beq.n	8006d9e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <FMC_SDRAM_SendCommand+0x5e>
 8006d8a:	f7fc f835 	bl	8002df8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d201      	bcs.n	8006d9e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e006      	b.n	8006dac <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d0e8      	beq.n	8006d7c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e34:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006e3a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006e40:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e50:	f023 030f 	bic.w	r3, r3, #15
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	b2db      	uxtb	r3, r3
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3314      	adds	r3, #20
 8006e92:	461a      	mov	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4413      	add	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
}  
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006eb8:	230c      	movs	r3, #12
 8006eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ebc:	2340      	movs	r3, #64	; 0x40
 8006ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eca:	f107 0308 	add.w	r3, r7, #8
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ffa0 	bl	8006e16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006ed6:	4a05      	ldr	r2, [pc, #20]	; (8006eec <SDMMC_CmdStopTransfer+0x40>)
 8006ed8:	210c      	movs	r1, #12
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f82a 	bl	8006f34 <SDMMC_GetCmdResp1>
 8006ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	05f5e100 	.word	0x05f5e100

08006ef0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006efe:	230d      	movs	r3, #13
 8006f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f02:	2340      	movs	r3, #64	; 0x40
 8006f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f10:	f107 0308 	add.w	r3, r7, #8
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff ff7d 	bl	8006e16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f20:	210d      	movs	r1, #13
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f806 	bl	8006f34 <SDMMC_GetCmdResp1>
 8006f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f42:	4b70      	ldr	r3, [pc, #448]	; (8007104 <SDMMC_GetCmdResp1+0x1d0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a70      	ldr	r2, [pc, #448]	; (8007108 <SDMMC_GetCmdResp1+0x1d4>)
 8006f48:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4c:	0a5a      	lsrs	r2, r3, #9
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	fb02 f303 	mul.w	r3, r2, r3
 8006f54:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	61fa      	str	r2, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f64:	e0c9      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0ef      	beq.n	8006f56 <SDMMC_GetCmdResp1+0x22>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ea      	bne.n	8006f56 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f92:	2304      	movs	r3, #4
 8006f94:	e0b1      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0a6      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	22c5      	movs	r2, #197	; 0xc5
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff ff59 	bl	8006e6a <SDIO_GetCommandResponse>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	461a      	mov	r2, r3
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d001      	beq.n	8006fc6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e099      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff ff5b 	bl	8006e84 <SDIO_GetResponse>
 8006fce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4b4e      	ldr	r3, [pc, #312]	; (800710c <SDMMC_GetCmdResp1+0x1d8>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e08d      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	da02      	bge.n	8006fea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fe8:	e087      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006ff4:	2340      	movs	r3, #64	; 0x40
 8006ff6:	e080      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	e079      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007014:	e071      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007024:	e069      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007034:	e061      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007044:	e059      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007054:	e051      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007064:	e049      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007074:	e041      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007084:	e039      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007094:	e031      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070a4:	e029      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070b4:	e021      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070c4:	e019      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80070d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070d4:	e011      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80070e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070e4:	e009      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80070f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070f4:	e001      	b.n	80070fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000058 	.word	0x20000058
 8007108:	10624dd3 	.word	0x10624dd3
 800710c:	fdffe008 	.word	0xfdffe008

08007110 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <_fx_system_initialize+0xa4>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <_fx_system_initialize+0xa8>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <_fx_system_initialize+0xac>)
 8007124:	f644 2221 	movw	r2, #18977	; 0x4a21
 8007128:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800712a:	4b25      	ldr	r3, [pc, #148]	; (80071c0 <_fx_system_initialize+0xb0>)
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8007130:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <_fx_system_initialize+0xb4>)
 8007132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007136:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8007138:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <_fx_system_initialize+0xb8>)
 800713a:	2210      	movs	r2, #16
 800713c:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800713e:	2301      	movs	r3, #1
 8007140:	9302      	str	r3, [sp, #8]
 8007142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4b1f      	ldr	r3, [pc, #124]	; (80071cc <_fx_system_initialize+0xbc>)
 8007150:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <_fx_system_initialize+0xc0>)
 8007152:	4920      	ldr	r1, [pc, #128]	; (80071d4 <_fx_system_initialize+0xc4>)
 8007154:	4820      	ldr	r0, [pc, #128]	; (80071d8 <_fx_system_initialize+0xc8>)
 8007156:	f00a fef9 	bl	8011f4c <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800715a:	4b20      	ldr	r3, [pc, #128]	; (80071dc <_fx_system_initialize+0xcc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007162:	4a1e      	ldr	r2, [pc, #120]	; (80071dc <_fx_system_initialize+0xcc>)
 8007164:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8007166:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <_fx_system_initialize+0xcc>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716e:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <_fx_system_initialize+0xcc>)
 8007170:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 8007172:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <_fx_system_initialize+0xd0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800717a:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <_fx_system_initialize+0xd0>)
 800717c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800717e:	4b18      	ldr	r3, [pc, #96]	; (80071e0 <_fx_system_initialize+0xd0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007186:	4a16      	ldr	r2, [pc, #88]	; (80071e0 <_fx_system_initialize+0xd0>)
 8007188:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800718a:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <_fx_system_initialize+0xd0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f043 0310 	orr.w	r3, r3, #16
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <_fx_system_initialize+0xd0>)
 8007194:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <_fx_system_initialize+0xd4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800719e:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <_fx_system_initialize+0xd4>)
 80071a0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <_fx_system_initialize+0xd4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 80071aa:	4a0e      	ldr	r2, [pc, #56]	; (80071e4 <_fx_system_initialize+0xd4>)
 80071ac:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	200037d4 	.word	0x200037d4
 80071b8:	200037d8 	.word	0x200037d8
 80071bc:	200037dc 	.word	0x200037dc
 80071c0:	200037e0 	.word	0x200037e0
 80071c4:	200037e4 	.word	0x200037e4
 80071c8:	200037e8 	.word	0x200037e8
 80071cc:	46585359 	.word	0x46585359
 80071d0:	080071e9 	.word	0x080071e9
 80071d4:	08016ee4 	.word	0x08016ee4
 80071d8:	200037f8 	.word	0x200037f8
 80071dc:	200037ec 	.word	0x200037ec
 80071e0:	200037f0 	.word	0x200037f0
 80071e4:	200037f4 	.word	0x200037f4

080071e8 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b089      	sub	sp, #36	; 0x24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a9d      	ldr	r2, [pc, #628]	; (8007468 <_fx_system_timer_entry+0x280>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	f040 8132 	bne.w	800745e <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80071fa:	4b9c      	ldr	r3, [pc, #624]	; (800746c <_fx_system_timer_entry+0x284>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8007206:	4b99      	ldr	r3, [pc, #612]	; (800746c <_fx_system_timer_entry+0x284>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007210:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8007212:	4b96      	ldr	r3, [pc, #600]	; (800746c <_fx_system_timer_entry+0x284>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	0adb      	lsrs	r3, r3, #11
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800721e:	4b94      	ldr	r3, [pc, #592]	; (8007470 <_fx_system_timer_entry+0x288>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 031f 	and.w	r3, r3, #31
 8007226:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8007228:	4b91      	ldr	r3, [pc, #580]	; (8007470 <_fx_system_timer_entry+0x288>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8007234:	4b8e      	ldr	r3, [pc, #568]	; (8007470 <_fx_system_timer_entry+0x288>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	0a5b      	lsrs	r3, r3, #9
 800723a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8007242:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	330a      	adds	r3, #10
 8007248:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	2b3b      	cmp	r3, #59	; 0x3b
 800724e:	f240 80d4 	bls.w	80073fa <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4a87      	ldr	r2, [pc, #540]	; (8007474 <_fx_system_timer_entry+0x28c>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	4413      	add	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	4b83      	ldr	r3, [pc, #524]	; (8007474 <_fx_system_timer_entry+0x28c>)
 8007266:	fba3 1302 	umull	r1, r3, r3, r2
 800726a:	0959      	lsrs	r1, r3, #5
 800726c:	460b      	mov	r3, r1
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	1a5b      	subs	r3, r3, r1
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b3b      	cmp	r3, #59	; 0x3b
 800727c:	f240 80bd 	bls.w	80073fa <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	4a7c      	ldr	r2, [pc, #496]	; (8007474 <_fx_system_timer_entry+0x28c>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	4b78      	ldr	r3, [pc, #480]	; (8007474 <_fx_system_timer_entry+0x28c>)
 8007294:	fba3 1302 	umull	r1, r3, r3, r2
 8007298:	0959      	lsrs	r1, r3, #5
 800729a:	460b      	mov	r3, r1
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	1a5b      	subs	r3, r3, r1
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b17      	cmp	r3, #23
 80072aa:	f240 80a6 	bls.w	80073fa <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
                    day++;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3301      	adds	r3, #1
 80072b6:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	2b0b      	cmp	r3, #11
 80072be:	f200 80cb 	bhi.w	8007458 <_fx_system_timer_entry+0x270>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <_fx_system_timer_entry+0xe0>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072f9 	.word	0x080072f9
 80072cc:	0800730b 	.word	0x0800730b
 80072d0:	08007339 	.word	0x08007339
 80072d4:	0800734b 	.word	0x0800734b
 80072d8:	0800735d 	.word	0x0800735d
 80072dc:	0800736f 	.word	0x0800736f
 80072e0:	08007381 	.word	0x08007381
 80072e4:	08007393 	.word	0x08007393
 80072e8:	080073a5 	.word	0x080073a5
 80072ec:	080073b7 	.word	0x080073b7
 80072f0:	080073c9 	.word	0x080073c9
 80072f4:	080073db 	.word	0x080073db

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b1f      	cmp	r3, #31
 80072fc:	d97f      	bls.n	80073fe <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	613b      	str	r3, [r7, #16]
                            month++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007308:	e079      	b.n	80073fe <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d108      	bne.n	8007326 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b1d      	cmp	r3, #29
 8007318:	d973      	bls.n	8007402 <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800731a:	2301      	movs	r3, #1
 800731c:	613b      	str	r3, [r7, #16]
                                month++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8007324:	e06d      	b.n	8007402 <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b1c      	cmp	r3, #28
 800732a:	d96a      	bls.n	8007402 <_fx_system_timer_entry+0x21a>
                                day = 1;
 800732c:	2301      	movs	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
                                month++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]
                        break;
 8007336:	e064      	b.n	8007402 <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b1f      	cmp	r3, #31
 800733c:	d963      	bls.n	8007406 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800733e:	2301      	movs	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
                            month++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007348:	e05d      	b.n	8007406 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b1e      	cmp	r3, #30
 800734e:	d95c      	bls.n	800740a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
                            month++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800735a:	e056      	b.n	800740a <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b1f      	cmp	r3, #31
 8007360:	d955      	bls.n	800740e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007362:	2301      	movs	r3, #1
 8007364:	613b      	str	r3, [r7, #16]
                            month++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800736c:	e04f      	b.n	800740e <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b1e      	cmp	r3, #30
 8007372:	d94e      	bls.n	8007412 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007374:	2301      	movs	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
                            month++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800737e:	e048      	b.n	8007412 <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b1f      	cmp	r3, #31
 8007384:	d947      	bls.n	8007416 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	613b      	str	r3, [r7, #16]
                            month++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007390:	e041      	b.n	8007416 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b1f      	cmp	r3, #31
 8007396:	d940      	bls.n	800741a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007398:	2301      	movs	r3, #1
 800739a:	613b      	str	r3, [r7, #16]
                            month++;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3301      	adds	r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80073a2:	e03a      	b.n	800741a <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b1e      	cmp	r3, #30
 80073a8:	d939      	bls.n	800741e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 80073aa:	2301      	movs	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
                            month++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80073b4:	e033      	b.n	800741e <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b1f      	cmp	r3, #31
 80073ba:	d932      	bls.n	8007422 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 80073bc:	2301      	movs	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
                            month++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80073c6:	e02c      	b.n	8007422 <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b1e      	cmp	r3, #30
 80073cc:	d92b      	bls.n	8007426 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	613b      	str	r3, [r7, #16]
                            month++;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80073d8:	e025      	b.n	8007426 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b1f      	cmp	r3, #31
 80073de:	d924      	bls.n	800742a <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 80073e0:	2301      	movs	r3, #1
 80073e2:	613b      	str	r3, [r7, #16]
                            month = 1;
 80073e4:	2301      	movs	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f640 023b 	movw	r2, #2107	; 0x83b
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d831      	bhi.n	800745c <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 80073f8:	e017      	b.n	800742a <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 80073fa:	bf00      	nop
 80073fc:	e016      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 80073fe:	bf00      	nop
 8007400:	e014      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 8007402:	bf00      	nop
 8007404:	e012      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 8007406:	bf00      	nop
 8007408:	e010      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 800740a:	bf00      	nop
 800740c:	e00e      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 800740e:	bf00      	nop
 8007410:	e00c      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 8007412:	bf00      	nop
 8007414:	e00a      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 8007416:	bf00      	nop
 8007418:	e008      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 800741a:	bf00      	nop
 800741c:	e006      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 800741e:	bf00      	nop
 8007420:	e004      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <_fx_system_timer_entry+0x244>
                        break;
 800742a:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 8007432:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8007438:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800743e:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <_fx_system_timer_entry+0x288>)
 8007440:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800744a:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8007452:	4a06      	ldr	r2, [pc, #24]	; (800746c <_fx_system_timer_entry+0x284>)
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	e002      	b.n	800745e <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <_fx_system_timer_entry+0x276>
                                return;
 800745c:	bf00      	nop
    }
}
 800745e:	3724      	adds	r7, #36	; 0x24
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	46585359 	.word	0x46585359
 800746c:	200037e0 	.word	0x200037e0
 8007470:	200037dc 	.word	0x200037dc
 8007474:	88888889 	.word	0x88888889

08007478 <alloc_bmp_state>:

    bool frame_loaded;
    void *common_bmp_state;
};

static sail_status_t alloc_bmp_state(struct bmp_state **bmp_state) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct bmp_state), &ptr));
 8007480:	f107 0308 	add.w	r3, r7, #8
 8007484:	4619      	mov	r1, r3
 8007486:	2010      	movs	r0, #16
 8007488:	f007 fcb8 	bl	800edfc <sail_malloc>
 800748c:	4603      	mov	r3, r0
 800748e:	81fb      	strh	r3, [r7, #14]
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2301      	movne	r3, #1
 8007498:	2300      	moveq	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <alloc_bmp_state+0x2c>
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	e013      	b.n	80074cc <alloc_bmp_state+0x54>
    *bmp_state = ptr;
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	601a      	str	r2, [r3, #0]

    (*bmp_state)->load_options = NULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
    (*bmp_state)->save_options = NULL;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	605a      	str	r2, [r3, #4]

    (*bmp_state)->frame_loaded     = false;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	721a      	strb	r2, [r3, #8]
    (*bmp_state)->common_bmp_state = NULL;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	60da      	str	r2, [r3, #12]

    return SAIL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <destroy_bmp_state>:

static void destroy_bmp_state(struct bmp_state *bmp_state) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

    if (bmp_state == NULL) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <destroy_bmp_state+0x2a>
        return;
    }

    sail_destroy_load_options(bmp_state->load_options);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f007 fa80 	bl	800e9ec <sail_destroy_load_options>
    sail_destroy_save_options(bmp_state->save_options);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f008 fcbe 	bl	800fe72 <sail_destroy_save_options>

    sail_free(bmp_state);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f007 fd08 	bl	800ef0c <sail_free>
 80074fc:	e000      	b.n	8007500 <destroy_bmp_state+0x2c>
        return;
 80074fe:	bf00      	nop
}
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <sail_codec_load_init_v7_bmp>:

/*
 * Decoding functions.
 */

SAIL_EXPORT sail_status_t sail_codec_load_init_v7_bmp(struct sail_io *io, const struct sail_load_options *load_options, void **state) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	bf0c      	ite	eq
 800751a:	2301      	moveq	r3, #1
 800751c:	2300      	movne	r3, #0
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d011      	beq.n	8007548 <sail_codec_load_init_v7_bmp+0x40>
 8007524:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <sail_codec_load_init_v7_bmp+0x118>)
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	4b3e      	ldr	r3, [pc, #248]	; (8007624 <sail_codec_load_init_v7_bmp+0x11c>)
 800752a:	224c      	movs	r2, #76	; 0x4c
 800752c:	493e      	ldr	r1, [pc, #248]	; (8007628 <sail_codec_load_init_v7_bmp+0x120>)
 800752e:	2001      	movs	r0, #1
 8007530:	f007 fb6c 	bl	800ec0c <sail_log>
 8007534:	4b3d      	ldr	r3, [pc, #244]	; (800762c <sail_codec_load_init_v7_bmp+0x124>)
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	4b3d      	ldr	r3, [pc, #244]	; (8007630 <sail_codec_load_init_v7_bmp+0x128>)
 800753a:	224c      	movs	r2, #76	; 0x4c
 800753c:	493a      	ldr	r1, [pc, #232]	; (8007628 <sail_codec_load_init_v7_bmp+0x120>)
 800753e:	2001      	movs	r0, #1
 8007540:	f007 fb64 	bl	800ec0c <sail_log>
 8007544:	2301      	movs	r3, #1
 8007546:	e066      	b.n	8007616 <sail_codec_load_init_v7_bmp+0x10e>
    *state = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]

    SAIL_TRY(sail_check_io_valid(io));
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f006 fcaa 	bl	800dea8 <sail_check_io_valid>
 8007554:	4603      	mov	r3, r0
 8007556:	83fb      	strh	r3, [r7, #30]
 8007558:	8bfb      	ldrh	r3, [r7, #30]
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <sail_codec_load_init_v7_bmp+0x64>
 8007568:	8bfb      	ldrh	r3, [r7, #30]
 800756a:	e054      	b.n	8007616 <sail_codec_load_init_v7_bmp+0x10e>
    SAIL_CHECK_PTR(load_options);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d011      	beq.n	80075a0 <sail_codec_load_init_v7_bmp+0x98>
 800757c:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <sail_codec_load_init_v7_bmp+0x12c>)
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <sail_codec_load_init_v7_bmp+0x11c>)
 8007582:	2250      	movs	r2, #80	; 0x50
 8007584:	4928      	ldr	r1, [pc, #160]	; (8007628 <sail_codec_load_init_v7_bmp+0x120>)
 8007586:	2001      	movs	r0, #1
 8007588:	f007 fb40 	bl	800ec0c <sail_log>
 800758c:	4b27      	ldr	r3, [pc, #156]	; (800762c <sail_codec_load_init_v7_bmp+0x124>)
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4b27      	ldr	r3, [pc, #156]	; (8007630 <sail_codec_load_init_v7_bmp+0x128>)
 8007592:	2250      	movs	r2, #80	; 0x50
 8007594:	4924      	ldr	r1, [pc, #144]	; (8007628 <sail_codec_load_init_v7_bmp+0x120>)
 8007596:	2001      	movs	r0, #1
 8007598:	f007 fb38 	bl	800ec0c <sail_log>
 800759c:	2301      	movs	r3, #1
 800759e:	e03a      	b.n	8007616 <sail_codec_load_init_v7_bmp+0x10e>

    /* Allocate a new state. */
    struct bmp_state *bmp_state;
    SAIL_TRY(alloc_bmp_state(&bmp_state));
 80075a0:	f107 0314 	add.w	r3, r7, #20
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff67 	bl	8007478 <alloc_bmp_state>
 80075aa:	4603      	mov	r3, r0
 80075ac:	83bb      	strh	r3, [r7, #28]
 80075ae:	8bbb      	ldrh	r3, [r7, #28]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <sail_codec_load_init_v7_bmp+0xba>
 80075be:	8bbb      	ldrh	r3, [r7, #28]
 80075c0:	e029      	b.n	8007616 <sail_codec_load_init_v7_bmp+0x10e>
    *state = bmp_state;
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]

    /* Deep copy load options. */
    SAIL_TRY(sail_copy_load_options(load_options, &bmp_state->load_options));
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	4619      	mov	r1, r3
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f007 fa7f 	bl	800ead0 <sail_copy_load_options>
 80075d2:	4603      	mov	r3, r0
 80075d4:	837b      	strh	r3, [r7, #26]
 80075d6:	8b7b      	ldrh	r3, [r7, #26]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <sail_codec_load_init_v7_bmp+0xe2>
 80075e6:	8b7b      	ldrh	r3, [r7, #26]
 80075e8:	e015      	b.n	8007616 <sail_codec_load_init_v7_bmp+0x10e>

    SAIL_TRY(bmp_private_read_init(io, bmp_state->load_options, &bmp_state->common_bmp_state, SAIL_READ_BMP_FILE_HEADER));
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f103 020c 	add.w	r2, r3, #12
 80075f4:	2301      	movs	r3, #1
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fc4a 	bl	8007e90 <bmp_private_read_init>
 80075fc:	4603      	mov	r3, r0
 80075fe:	833b      	strh	r3, [r7, #24]
 8007600:	8b3b      	ldrh	r3, [r7, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf14      	ite	ne
 8007606:	2301      	movne	r3, #1
 8007608:	2300      	moveq	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <sail_codec_load_init_v7_bmp+0x10c>
 8007610:	8b3b      	ldrh	r3, [r7, #24]
 8007612:	e000      	b.n	8007616 <sail_codec_load_init_v7_bmp+0x10e>

    return SAIL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	08016f60 	.word	0x08016f60
 8007624:	08016ef8 	.word	0x08016ef8
 8007628:	08016f10 	.word	0x08016f10
 800762c:	08016f6c 	.word	0x08016f6c
 8007630:	08016f68 	.word	0x08016f68
 8007634:	08016f80 	.word	0x08016f80

08007638 <sail_codec_load_seek_next_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_seek_next_frame_v7_bmp(void *state, struct sail_io *io, struct sail_image **image) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf0c      	ite	eq
 800764a:	2301      	moveq	r3, #1
 800764c:	2300      	movne	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d011      	beq.n	8007678 <sail_codec_load_seek_next_frame_v7_bmp+0x40>
 8007654:	4b32      	ldr	r3, [pc, #200]	; (8007720 <sail_codec_load_seek_next_frame_v7_bmp+0xe8>)
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4b32      	ldr	r3, [pc, #200]	; (8007724 <sail_codec_load_seek_next_frame_v7_bmp+0xec>)
 800765a:	2261      	movs	r2, #97	; 0x61
 800765c:	4932      	ldr	r1, [pc, #200]	; (8007728 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 800765e:	2001      	movs	r0, #1
 8007660:	f007 fad4 	bl	800ec0c <sail_log>
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <sail_codec_load_seek_next_frame_v7_bmp+0xf4>)
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4b31      	ldr	r3, [pc, #196]	; (8007730 <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 800766a:	2261      	movs	r2, #97	; 0x61
 800766c:	492e      	ldr	r1, [pc, #184]	; (8007728 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 800766e:	2001      	movs	r0, #1
 8007670:	f007 facc 	bl	800ec0c <sail_log>
 8007674:	2301      	movs	r3, #1
 8007676:	e04f      	b.n	8007718 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    SAIL_TRY(sail_check_io_valid(io));
 8007678:	68b8      	ldr	r0, [r7, #8]
 800767a:	f006 fc15 	bl	800dea8 <sail_check_io_valid>
 800767e:	4603      	mov	r3, r0
 8007680:	83fb      	strh	r3, [r7, #30]
 8007682:	8bfb      	ldrh	r3, [r7, #30]
 8007684:	2b00      	cmp	r3, #0
 8007686:	bf14      	ite	ne
 8007688:	2301      	movne	r3, #1
 800768a:	2300      	moveq	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <sail_codec_load_seek_next_frame_v7_bmp+0x5e>
 8007692:	8bfb      	ldrh	r3, [r7, #30]
 8007694:	e040      	b.n	8007718 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    SAIL_CHECK_PTR(image);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d011      	beq.n	80076ca <sail_codec_load_seek_next_frame_v7_bmp+0x92>
 80076a6:	4b23      	ldr	r3, [pc, #140]	; (8007734 <sail_codec_load_seek_next_frame_v7_bmp+0xfc>)
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <sail_codec_load_seek_next_frame_v7_bmp+0xec>)
 80076ac:	2263      	movs	r2, #99	; 0x63
 80076ae:	491e      	ldr	r1, [pc, #120]	; (8007728 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 80076b0:	2001      	movs	r0, #1
 80076b2:	f007 faab 	bl	800ec0c <sail_log>
 80076b6:	4b1d      	ldr	r3, [pc, #116]	; (800772c <sail_codec_load_seek_next_frame_v7_bmp+0xf4>)
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 80076bc:	2263      	movs	r2, #99	; 0x63
 80076be:	491a      	ldr	r1, [pc, #104]	; (8007728 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 80076c0:	2001      	movs	r0, #1
 80076c2:	f007 faa3 	bl	800ec0c <sail_log>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e026      	b.n	8007718 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	61bb      	str	r3, [r7, #24]

    if (bmp_state->frame_loaded) {
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	7a1b      	ldrb	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <sail_codec_load_seek_next_frame_v7_bmp+0xb2>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_NO_MORE_FRAMES);
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <sail_codec_load_seek_next_frame_v7_bmp+0x100>)
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4b15      	ldr	r3, [pc, #84]	; (8007730 <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 80076dc:	2268      	movs	r2, #104	; 0x68
 80076de:	4912      	ldr	r1, [pc, #72]	; (8007728 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 80076e0:	2001      	movs	r0, #1
 80076e2:	f007 fa93 	bl	800ec0c <sail_log>
 80076e6:	23ce      	movs	r3, #206	; 0xce
 80076e8:	e016      	b.n	8007718 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    }

    bmp_state->frame_loaded = true;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2201      	movs	r2, #1
 80076ee:	721a      	strb	r2, [r3, #8]

    SAIL_TRY(bmp_private_read_seek_next_frame(bmp_state->common_bmp_state, io, image));
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 ff05 	bl	8008508 <bmp_private_read_seek_next_frame>
 80076fe:	4603      	mov	r3, r0
 8007700:	82fb      	strh	r3, [r7, #22]
 8007702:	8afb      	ldrh	r3, [r7, #22]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <sail_codec_load_seek_next_frame_v7_bmp+0xde>
 8007712:	8afb      	ldrh	r3, [r7, #22]
 8007714:	e000      	b.n	8007718 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>

    return SAIL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	08016f60 	.word	0x08016f60
 8007724:	08016ef8 	.word	0x08016ef8
 8007728:	08016f10 	.word	0x08016f10
 800772c:	08016f6c 	.word	0x08016f6c
 8007730:	08016f68 	.word	0x08016f68
 8007734:	08016f90 	.word	0x08016f90
 8007738:	08016f98 	.word	0x08016f98

0800773c <sail_codec_load_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_frame_v7_bmp(void *state, struct sail_io *io, struct sail_image *image) {
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d011      	beq.n	800777c <sail_codec_load_frame_v7_bmp+0x40>
 8007758:	4b24      	ldr	r3, [pc, #144]	; (80077ec <sail_codec_load_frame_v7_bmp+0xb0>)
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <sail_codec_load_frame_v7_bmp+0xb4>)
 800775e:	2274      	movs	r2, #116	; 0x74
 8007760:	4924      	ldr	r1, [pc, #144]	; (80077f4 <sail_codec_load_frame_v7_bmp+0xb8>)
 8007762:	2001      	movs	r0, #1
 8007764:	f007 fa52 	bl	800ec0c <sail_log>
 8007768:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <sail_codec_load_frame_v7_bmp+0xbc>)
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4b23      	ldr	r3, [pc, #140]	; (80077fc <sail_codec_load_frame_v7_bmp+0xc0>)
 800776e:	2274      	movs	r2, #116	; 0x74
 8007770:	4920      	ldr	r1, [pc, #128]	; (80077f4 <sail_codec_load_frame_v7_bmp+0xb8>)
 8007772:	2001      	movs	r0, #1
 8007774:	f007 fa4a 	bl	800ec0c <sail_log>
 8007778:	2301      	movs	r3, #1
 800777a:	e033      	b.n	80077e4 <sail_codec_load_frame_v7_bmp+0xa8>
    SAIL_TRY(sail_check_io_valid(io));
 800777c:	68b8      	ldr	r0, [r7, #8]
 800777e:	f006 fb93 	bl	800dea8 <sail_check_io_valid>
 8007782:	4603      	mov	r3, r0
 8007784:	83fb      	strh	r3, [r7, #30]
 8007786:	8bfb      	ldrh	r3, [r7, #30]
 8007788:	2b00      	cmp	r3, #0
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <sail_codec_load_frame_v7_bmp+0x5e>
 8007796:	8bfb      	ldrh	r3, [r7, #30]
 8007798:	e024      	b.n	80077e4 <sail_codec_load_frame_v7_bmp+0xa8>
    SAIL_TRY(sail_check_image_skeleton_valid(image));
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f005 ffaa 	bl	800d6f4 <sail_check_image_skeleton_valid>
 80077a0:	4603      	mov	r3, r0
 80077a2:	83bb      	strh	r3, [r7, #28]
 80077a4:	8bbb      	ldrh	r3, [r7, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <sail_codec_load_frame_v7_bmp+0x7c>
 80077b4:	8bbb      	ldrh	r3, [r7, #28]
 80077b6:	e015      	b.n	80077e4 <sail_codec_load_frame_v7_bmp+0xa8>

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	61bb      	str	r3, [r7, #24]

    SAIL_TRY(bmp_private_read_frame(bmp_state->common_bmp_state, io, image));
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 ffd1 	bl	800876c <bmp_private_read_frame>
 80077ca:	4603      	mov	r3, r0
 80077cc:	82fb      	strh	r3, [r7, #22]
 80077ce:	8afb      	ldrh	r3, [r7, #22]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <sail_codec_load_frame_v7_bmp+0xa6>
 80077de:	8afb      	ldrh	r3, [r7, #22]
 80077e0:	e000      	b.n	80077e4 <sail_codec_load_frame_v7_bmp+0xa8>

    return SAIL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	08016f60 	.word	0x08016f60
 80077f0:	08016ef8 	.word	0x08016ef8
 80077f4:	08016f10 	.word	0x08016f10
 80077f8:	08016f6c 	.word	0x08016f6c
 80077fc:	08016f68 	.word	0x08016f68

08007800 <sail_codec_load_finish_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_finish_v7_bmp(void **state, struct sail_io *io) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	bf0c      	ite	eq
 8007810:	2301      	moveq	r3, #1
 8007812:	2300      	movne	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d011      	beq.n	800783e <sail_codec_load_finish_v7_bmp+0x3e>
 800781a:	4b24      	ldr	r3, [pc, #144]	; (80078ac <sail_codec_load_finish_v7_bmp+0xac>)
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <sail_codec_load_finish_v7_bmp+0xb0>)
 8007820:	2281      	movs	r2, #129	; 0x81
 8007822:	4924      	ldr	r1, [pc, #144]	; (80078b4 <sail_codec_load_finish_v7_bmp+0xb4>)
 8007824:	2001      	movs	r0, #1
 8007826:	f007 f9f1 	bl	800ec0c <sail_log>
 800782a:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <sail_codec_load_finish_v7_bmp+0xb8>)
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	4b23      	ldr	r3, [pc, #140]	; (80078bc <sail_codec_load_finish_v7_bmp+0xbc>)
 8007830:	2281      	movs	r2, #129	; 0x81
 8007832:	4920      	ldr	r1, [pc, #128]	; (80078b4 <sail_codec_load_finish_v7_bmp+0xb4>)
 8007834:	2001      	movs	r0, #1
 8007836:	f007 f9e9 	bl	800ec0c <sail_log>
 800783a:	2301      	movs	r3, #1
 800783c:	e031      	b.n	80078a2 <sail_codec_load_finish_v7_bmp+0xa2>
    SAIL_TRY(sail_check_io_valid(io));
 800783e:	6838      	ldr	r0, [r7, #0]
 8007840:	f006 fb32 	bl	800dea8 <sail_check_io_valid>
 8007844:	4603      	mov	r3, r0
 8007846:	82fb      	strh	r3, [r7, #22]
 8007848:	8afb      	ldrh	r3, [r7, #22]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf14      	ite	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2300      	moveq	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <sail_codec_load_finish_v7_bmp+0x5c>
 8007858:	8afb      	ldrh	r3, [r7, #22]
 800785a:	e022      	b.n	80078a2 <sail_codec_load_finish_v7_bmp+0xa2>

    struct bmp_state *bmp_state = (struct bmp_state *)(*state);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	613b      	str	r3, [r7, #16]

    *state = NULL;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

    if (bmp_state->common_bmp_state != NULL) {
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d014      	beq.n	800789a <sail_codec_load_finish_v7_bmp+0x9a>
        SAIL_TRY_OR_CLEANUP(bmp_private_read_finish(&bmp_state->common_bmp_state, io),
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	330c      	adds	r3, #12
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f001 fa24 	bl	8008cc4 <bmp_private_read_finish>
 800787c:	4603      	mov	r3, r0
 800787e:	81fb      	strh	r3, [r7, #14]
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <sail_codec_load_finish_v7_bmp+0x9a>
 8007890:	6938      	ldr	r0, [r7, #16]
 8007892:	f7ff fe1f 	bl	80074d4 <destroy_bmp_state>
 8007896:	89fb      	ldrh	r3, [r7, #14]
 8007898:	e003      	b.n	80078a2 <sail_codec_load_finish_v7_bmp+0xa2>
                            /* cleanup */ destroy_bmp_state(bmp_state));
    }

    destroy_bmp_state(bmp_state);
 800789a:	6938      	ldr	r0, [r7, #16]
 800789c:	f7ff fe1a 	bl	80074d4 <destroy_bmp_state>

    return SAIL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	08016f60 	.word	0x08016f60
 80078b0:	08016ef8 	.word	0x08016ef8
 80078b4:	08016f10 	.word	0x08016f10
 80078b8:	08016f6c 	.word	0x08016f6c
 80078bc:	08016f68 	.word	0x08016f68

080078c0 <sail_codec_save_init_v7_bmp>:

/*
 * Encoding functions.
 */

SAIL_EXPORT sail_status_t sail_codec_save_init_v7_bmp(struct sail_io *io, const struct sail_save_options *save_options, void **state) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bf0c      	ite	eq
 80078d2:	2301      	moveq	r3, #1
 80078d4:	2300      	movne	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d011      	beq.n	8007900 <sail_codec_save_init_v7_bmp+0x40>
 80078dc:	4b23      	ldr	r3, [pc, #140]	; (800796c <sail_codec_save_init_v7_bmp+0xac>)
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	4b23      	ldr	r3, [pc, #140]	; (8007970 <sail_codec_save_init_v7_bmp+0xb0>)
 80078e2:	2298      	movs	r2, #152	; 0x98
 80078e4:	4923      	ldr	r1, [pc, #140]	; (8007974 <sail_codec_save_init_v7_bmp+0xb4>)
 80078e6:	2001      	movs	r0, #1
 80078e8:	f007 f990 	bl	800ec0c <sail_log>
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <sail_codec_save_init_v7_bmp+0xb8>)
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	4b22      	ldr	r3, [pc, #136]	; (800797c <sail_codec_save_init_v7_bmp+0xbc>)
 80078f2:	2298      	movs	r2, #152	; 0x98
 80078f4:	491f      	ldr	r1, [pc, #124]	; (8007974 <sail_codec_save_init_v7_bmp+0xb4>)
 80078f6:	2001      	movs	r0, #1
 80078f8:	f007 f988 	bl	800ec0c <sail_log>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e031      	b.n	8007964 <sail_codec_save_init_v7_bmp+0xa4>
    SAIL_TRY(sail_check_io_valid(io));
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f006 fad1 	bl	800dea8 <sail_check_io_valid>
 8007906:	4603      	mov	r3, r0
 8007908:	82fb      	strh	r3, [r7, #22]
 800790a:	8afb      	ldrh	r3, [r7, #22]
 800790c:	2b00      	cmp	r3, #0
 800790e:	bf14      	ite	ne
 8007910:	2301      	movne	r3, #1
 8007912:	2300      	moveq	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <sail_codec_save_init_v7_bmp+0x5e>
 800791a:	8afb      	ldrh	r3, [r7, #22]
 800791c:	e022      	b.n	8007964 <sail_codec_save_init_v7_bmp+0xa4>
    SAIL_CHECK_PTR(save_options);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d011      	beq.n	8007952 <sail_codec_save_init_v7_bmp+0x92>
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <sail_codec_save_init_v7_bmp+0xc0>)
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <sail_codec_save_init_v7_bmp+0xb0>)
 8007934:	229a      	movs	r2, #154	; 0x9a
 8007936:	490f      	ldr	r1, [pc, #60]	; (8007974 <sail_codec_save_init_v7_bmp+0xb4>)
 8007938:	2001      	movs	r0, #1
 800793a:	f007 f967 	bl	800ec0c <sail_log>
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <sail_codec_save_init_v7_bmp+0xb8>)
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4b0e      	ldr	r3, [pc, #56]	; (800797c <sail_codec_save_init_v7_bmp+0xbc>)
 8007944:	229a      	movs	r2, #154	; 0x9a
 8007946:	490b      	ldr	r1, [pc, #44]	; (8007974 <sail_codec_save_init_v7_bmp+0xb4>)
 8007948:	2001      	movs	r0, #1
 800794a:	f007 f95f 	bl	800ec0c <sail_log>
 800794e:	2301      	movs	r3, #1
 8007950:	e008      	b.n	8007964 <sail_codec_save_init_v7_bmp+0xa4>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007952:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <sail_codec_save_init_v7_bmp+0xc4>)
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <sail_codec_save_init_v7_bmp+0xbc>)
 8007958:	229c      	movs	r2, #156	; 0x9c
 800795a:	4906      	ldr	r1, [pc, #24]	; (8007974 <sail_codec_save_init_v7_bmp+0xb4>)
 800795c:	2001      	movs	r0, #1
 800795e:	f007 f955 	bl	800ec0c <sail_log>
 8007962:	2311      	movs	r3, #17
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	08016f60 	.word	0x08016f60
 8007970:	08016ef8 	.word	0x08016ef8
 8007974:	08016f10 	.word	0x08016f10
 8007978:	08016f6c 	.word	0x08016f6c
 800797c:	08016f68 	.word	0x08016f68
 8007980:	08016fb4 	.word	0x08016fb4
 8007984:	08016fc4 	.word	0x08016fc4

08007988 <sail_codec_save_seek_next_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_seek_next_frame_v7_bmp(void *state, struct sail_io *io, const struct sail_image *image) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	bf0c      	ite	eq
 800799a:	2301      	moveq	r3, #1
 800799c:	2300      	movne	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d011      	beq.n	80079c8 <sail_codec_save_seek_next_frame_v7_bmp+0x40>
 80079a4:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <sail_codec_save_seek_next_frame_v7_bmp+0x98>)
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <sail_codec_save_seek_next_frame_v7_bmp+0x9c>)
 80079aa:	22a1      	movs	r2, #161	; 0xa1
 80079ac:	491e      	ldr	r1, [pc, #120]	; (8007a28 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 80079ae:	2001      	movs	r0, #1
 80079b0:	f007 f92c 	bl	800ec0c <sail_log>
 80079b4:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <sail_codec_save_seek_next_frame_v7_bmp+0xa4>)
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <sail_codec_save_seek_next_frame_v7_bmp+0xa8>)
 80079ba:	22a1      	movs	r2, #161	; 0xa1
 80079bc:	491a      	ldr	r1, [pc, #104]	; (8007a28 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 80079be:	2001      	movs	r0, #1
 80079c0:	f007 f924 	bl	800ec0c <sail_log>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e026      	b.n	8007a16 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_io_valid(io));
 80079c8:	68b8      	ldr	r0, [r7, #8]
 80079ca:	f006 fa6d 	bl	800dea8 <sail_check_io_valid>
 80079ce:	4603      	mov	r3, r0
 80079d0:	82fb      	strh	r3, [r7, #22]
 80079d2:	8afb      	ldrh	r3, [r7, #22]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf14      	ite	ne
 80079d8:	2301      	movne	r3, #1
 80079da:	2300      	moveq	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <sail_codec_save_seek_next_frame_v7_bmp+0x5e>
 80079e2:	8afb      	ldrh	r3, [r7, #22]
 80079e4:	e017      	b.n	8007a16 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_image_valid(image));
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f005 fee6 	bl	800d7b8 <sail_check_image_valid>
 80079ec:	4603      	mov	r3, r0
 80079ee:	82bb      	strh	r3, [r7, #20]
 80079f0:	8abb      	ldrh	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <sail_codec_save_seek_next_frame_v7_bmp+0x7c>
 8007a00:	8abb      	ldrh	r3, [r7, #20]
 8007a02:	e008      	b.n	8007a16 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <sail_codec_save_seek_next_frame_v7_bmp+0xac>)
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <sail_codec_save_seek_next_frame_v7_bmp+0xa8>)
 8007a0a:	22a5      	movs	r2, #165	; 0xa5
 8007a0c:	4906      	ldr	r1, [pc, #24]	; (8007a28 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 8007a0e:	2001      	movs	r0, #1
 8007a10:	f007 f8fc 	bl	800ec0c <sail_log>
 8007a14:	2311      	movs	r3, #17
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	08016f60 	.word	0x08016f60
 8007a24:	08016ef8 	.word	0x08016ef8
 8007a28:	08016f10 	.word	0x08016f10
 8007a2c:	08016f6c 	.word	0x08016f6c
 8007a30:	08016f68 	.word	0x08016f68
 8007a34:	08016fc4 	.word	0x08016fc4

08007a38 <sail_codec_save_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_frame_v7_bmp(void *state, struct sail_io *io, const struct sail_image *image) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf0c      	ite	eq
 8007a4a:	2301      	moveq	r3, #1
 8007a4c:	2300      	movne	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d011      	beq.n	8007a78 <sail_codec_save_frame_v7_bmp+0x40>
 8007a54:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <sail_codec_save_frame_v7_bmp+0x98>)
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <sail_codec_save_frame_v7_bmp+0x9c>)
 8007a5a:	22aa      	movs	r2, #170	; 0xaa
 8007a5c:	491e      	ldr	r1, [pc, #120]	; (8007ad8 <sail_codec_save_frame_v7_bmp+0xa0>)
 8007a5e:	2001      	movs	r0, #1
 8007a60:	f007 f8d4 	bl	800ec0c <sail_log>
 8007a64:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <sail_codec_save_frame_v7_bmp+0xa4>)
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <sail_codec_save_frame_v7_bmp+0xa8>)
 8007a6a:	22aa      	movs	r2, #170	; 0xaa
 8007a6c:	491a      	ldr	r1, [pc, #104]	; (8007ad8 <sail_codec_save_frame_v7_bmp+0xa0>)
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f007 f8cc 	bl	800ec0c <sail_log>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e026      	b.n	8007ac6 <sail_codec_save_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_io_valid(io));
 8007a78:	68b8      	ldr	r0, [r7, #8]
 8007a7a:	f006 fa15 	bl	800dea8 <sail_check_io_valid>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	82fb      	strh	r3, [r7, #22]
 8007a82:	8afb      	ldrh	r3, [r7, #22]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <sail_codec_save_frame_v7_bmp+0x5e>
 8007a92:	8afb      	ldrh	r3, [r7, #22]
 8007a94:	e017      	b.n	8007ac6 <sail_codec_save_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_image_valid(image));
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f005 fe8e 	bl	800d7b8 <sail_check_image_valid>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	82bb      	strh	r3, [r7, #20]
 8007aa0:	8abb      	ldrh	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <sail_codec_save_frame_v7_bmp+0x7c>
 8007ab0:	8abb      	ldrh	r3, [r7, #20]
 8007ab2:	e008      	b.n	8007ac6 <sail_codec_save_frame_v7_bmp+0x8e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <sail_codec_save_frame_v7_bmp+0xac>)
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <sail_codec_save_frame_v7_bmp+0xa8>)
 8007aba:	22ae      	movs	r2, #174	; 0xae
 8007abc:	4906      	ldr	r1, [pc, #24]	; (8007ad8 <sail_codec_save_frame_v7_bmp+0xa0>)
 8007abe:	2001      	movs	r0, #1
 8007ac0:	f007 f8a4 	bl	800ec0c <sail_log>
 8007ac4:	2311      	movs	r3, #17
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08016f60 	.word	0x08016f60
 8007ad4:	08016ef8 	.word	0x08016ef8
 8007ad8:	08016f10 	.word	0x08016f10
 8007adc:	08016f6c 	.word	0x08016f6c
 8007ae0:	08016f68 	.word	0x08016f68
 8007ae4:	08016fc4 	.word	0x08016fc4

08007ae8 <sail_codec_save_finish_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_finish_v7_bmp(void **state, struct sail_io *io) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <sail_codec_save_finish_v7_bmp+0x3e>
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <sail_codec_save_finish_v7_bmp+0x78>)
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <sail_codec_save_finish_v7_bmp+0x7c>)
 8007b08:	22b3      	movs	r2, #179	; 0xb3
 8007b0a:	4917      	ldr	r1, [pc, #92]	; (8007b68 <sail_codec_save_finish_v7_bmp+0x80>)
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	f007 f87d 	bl	800ec0c <sail_log>
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <sail_codec_save_finish_v7_bmp+0x84>)
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <sail_codec_save_finish_v7_bmp+0x88>)
 8007b18:	22b3      	movs	r2, #179	; 0xb3
 8007b1a:	4913      	ldr	r1, [pc, #76]	; (8007b68 <sail_codec_save_finish_v7_bmp+0x80>)
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	f007 f875 	bl	800ec0c <sail_log>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e017      	b.n	8007b56 <sail_codec_save_finish_v7_bmp+0x6e>
    SAIL_TRY(sail_check_io_valid(io));
 8007b26:	6838      	ldr	r0, [r7, #0]
 8007b28:	f006 f9be 	bl	800dea8 <sail_check_io_valid>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	81fb      	strh	r3, [r7, #14]
 8007b30:	89fb      	ldrh	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	2300      	moveq	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <sail_codec_save_finish_v7_bmp+0x5c>
 8007b40:	89fb      	ldrh	r3, [r7, #14]
 8007b42:	e008      	b.n	8007b56 <sail_codec_save_finish_v7_bmp+0x6e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <sail_codec_save_finish_v7_bmp+0x8c>)
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <sail_codec_save_finish_v7_bmp+0x88>)
 8007b4a:	22b6      	movs	r2, #182	; 0xb6
 8007b4c:	4906      	ldr	r1, [pc, #24]	; (8007b68 <sail_codec_save_finish_v7_bmp+0x80>)
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f007 f85c 	bl	800ec0c <sail_log>
 8007b54:	2311      	movs	r3, #17
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	08016f60 	.word	0x08016f60
 8007b64:	08016ef8 	.word	0x08016ef8
 8007b68:	08016f10 	.word	0x08016f10
 8007b6c:	08016f6c 	.word	0x08016f6c
 8007b70:	08016f68 	.word	0x08016f68
 8007b74:	08016fc4 	.word	0x08016fc4

08007b78 <alloc_bmp_state>:
    /* Number of bytes to pad scan lines to 4-byte boundary. */
    unsigned pad_bytes;
    bool flipped;
};

static sail_status_t alloc_bmp_state(struct bmp_state **bmp_state) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct bmp_state), &ptr));
 8007b80:	f107 0308 	add.w	r3, r7, #8
 8007b84:	4619      	mov	r1, r3
 8007b86:	20c4      	movs	r0, #196	; 0xc4
 8007b88:	f007 f938 	bl	800edfc <sail_malloc>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	81fb      	strh	r3, [r7, #14]
 8007b90:	89fb      	ldrh	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bf14      	ite	ne
 8007b96:	2301      	movne	r3, #1
 8007b98:	2300      	moveq	r3, #0
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <alloc_bmp_state+0x2c>
 8007ba0:	89fb      	ldrh	r3, [r7, #14]
 8007ba2:	e03b      	b.n	8007c1c <alloc_bmp_state+0xa4>
    *bmp_state = ptr;
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]

    if (*bmp_state == NULL) {
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <alloc_bmp_state+0x4e>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <alloc_bmp_state+0xac>)
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4b1c      	ldr	r3, [pc, #112]	; (8007c28 <alloc_bmp_state+0xb0>)
 8007bb8:	226b      	movs	r2, #107	; 0x6b
 8007bba:	491c      	ldr	r1, [pc, #112]	; (8007c2c <alloc_bmp_state+0xb4>)
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	f007 f825 	bl	800ec0c <sail_log>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e02a      	b.n	8007c1c <alloc_bmp_state+0xa4>
    }

    (*bmp_state)->load_options     = NULL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
    (*bmp_state)->save_options     = NULL;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	605a      	str	r2, [r3, #4]
    (*bmp_state)->bmp_load_options = 0;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	609a      	str	r2, [r3, #8]
    (*bmp_state)->iccp             = NULL;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    (*bmp_state)->palette          = NULL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    (*bmp_state)->palette_count    = 0;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    (*bmp_state)->bytes_in_row     = 0;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    (*bmp_state)->pad_bytes        = 0;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    (*bmp_state)->flipped          = false;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    return SAIL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	0801703c 	.word	0x0801703c
 8007c28:	08016fe0 	.word	0x08016fe0
 8007c2c:	08016fe4 	.word	0x08016fe4

08007c30 <destroy_bmp_state>:

static void destroy_bmp_state(struct bmp_state *bmp_state) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]

    if (bmp_state == NULL) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00f      	beq.n	8007c5e <destroy_bmp_state+0x2e>
        return;
    }

    sail_destroy_iccp(bmp_state->iccp);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c44:	4618      	mov	r0, r3
 8007c46:	f005 fc97 	bl	800d578 <sail_destroy_iccp>

    sail_free(bmp_state->palette);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f007 f95b 	bl	800ef0c <sail_free>

    sail_free(bmp_state);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f007 f958 	bl	800ef0c <sail_free>
 8007c5c:	e000      	b.n	8007c60 <destroy_bmp_state+0x30>
        return;
 8007c5e:	bf00      	nop
}
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <read_bmp_headers>:

static sail_status_t read_bmp_headers(struct sail_io *io, struct bmp_state *bmp_state) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]

    size_t offset_of_bitmap_header;
    SAIL_TRY(io->tell(io->stream, &offset_of_bitmap_header));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68d2      	ldr	r2, [r2, #12]
 8007c7a:	f107 0108 	add.w	r1, r7, #8
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4798      	blx	r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	83fb      	strh	r3, [r7, #30]
 8007c86:	8bfb      	ldrh	r3, [r7, #30]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bf14      	ite	ne
 8007c8c:	2301      	movne	r3, #1
 8007c8e:	2300      	moveq	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <read_bmp_headers+0x32>
 8007c96:	8bfb      	ldrh	r3, [r7, #30]
 8007c98:	e0eb      	b.n	8007e72 <read_bmp_headers+0x20a>

    SAIL_TRY(bmp_private_read_v2(io, &bmp_state->v2));
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	3330      	adds	r3, #48	; 0x30
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f947 	bl	8008f34 <bmp_private_read_v2>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	83bb      	strh	r3, [r7, #28]
 8007caa:	8bbb      	ldrh	r3, [r7, #28]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <read_bmp_headers+0x56>
 8007cba:	8bbb      	ldrh	r3, [r7, #28]
 8007cbc:	e0d9      	b.n	8007e72 <read_bmp_headers+0x20a>

    /* If the height is negative, the bitmap is top-to-bottom. */
    if (bmp_state->v2.height < 0) {
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da09      	bge.n	8007cda <read_bmp_headers+0x72>
        bmp_state->v2.height = -bmp_state->v2.height;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	425a      	negs	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38
        bmp_state->flipped = false;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8007cd8:	e003      	b.n	8007ce2 <read_bmp_headers+0x7a>
    } else {
        bmp_state->flipped = true;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    switch (bmp_state->v2.size) {
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	2b7c      	cmp	r3, #124	; 0x7c
 8007ce8:	d04d      	beq.n	8007d86 <read_bmp_headers+0x11e>
 8007cea:	2b7c      	cmp	r3, #124	; 0x7c
 8007cec:	f200 80a8 	bhi.w	8007e40 <read_bmp_headers+0x1d8>
 8007cf0:	2b6c      	cmp	r3, #108	; 0x6c
 8007cf2:	d021      	beq.n	8007d38 <read_bmp_headers+0xd0>
 8007cf4:	2b6c      	cmp	r3, #108	; 0x6c
 8007cf6:	f200 80a3 	bhi.w	8007e40 <read_bmp_headers+0x1d8>
 8007cfa:	2b0c      	cmp	r3, #12
 8007cfc:	d002      	beq.n	8007d04 <read_bmp_headers+0x9c>
 8007cfe:	2b28      	cmp	r3, #40	; 0x28
 8007d00:	d004      	beq.n	8007d0c <read_bmp_headers+0xa4>
 8007d02:	e09d      	b.n	8007e40 <read_bmp_headers+0x1d8>
        case SAIL_BITMAP_DIB_HEADER_V2_SIZE: {
            bmp_state->version = SAIL_BMP_V2;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2202      	movs	r2, #2
 8007d08:	735a      	strb	r2, [r3, #13]
            break;
 8007d0a:	e0b1      	b.n	8007e70 <read_bmp_headers+0x208>
        }
        case SAIL_BITMAP_DIB_HEADER_V3_SIZE: {
            bmp_state->version = SAIL_BMP_V3;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	3340      	adds	r3, #64	; 0x40
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f97b 	bl	8009014 <bmp_private_read_v3>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	81fb      	strh	r3, [r7, #14]
 8007d22:	89fb      	ldrh	r3, [r7, #14]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf14      	ite	ne
 8007d28:	2301      	movne	r3, #1
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8099 	beq.w	8007e66 <read_bmp_headers+0x1fe>
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	e09c      	b.n	8007e72 <read_bmp_headers+0x20a>
            break;
        }
        case SAIL_BITMAP_DIB_HEADER_V4_SIZE: {
            bmp_state->version = SAIL_BMP_V4;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	3340      	adds	r3, #64	; 0x40
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f965 	bl	8009014 <bmp_private_read_v3>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	827b      	strh	r3, [r7, #18]
 8007d4e:	8a7b      	ldrh	r3, [r7, #18]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf14      	ite	ne
 8007d54:	2301      	movne	r3, #1
 8007d56:	2300      	moveq	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <read_bmp_headers+0xfa>
 8007d5e:	8a7b      	ldrh	r3, [r7, #18]
 8007d60:	e087      	b.n	8007e72 <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v4(io, &bmp_state->v4));
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3358      	adds	r3, #88	; 0x58
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 f9d8 	bl	800911e <bmp_private_read_v4>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	823b      	strh	r3, [r7, #16]
 8007d72:	8a3b      	ldrh	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d073      	beq.n	8007e6a <read_bmp_headers+0x202>
 8007d82:	8a3b      	ldrh	r3, [r7, #16]
 8007d84:	e075      	b.n	8007e72 <read_bmp_headers+0x20a>
            break;
        }
        case SAIL_BITMAP_DIB_HEADER_V5_SIZE: {
            bmp_state->version = SAIL_BMP_V5;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2205      	movs	r2, #5
 8007d8a:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	3340      	adds	r3, #64	; 0x40
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 f93e 	bl	8009014 <bmp_private_read_v3>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	837b      	strh	r3, [r7, #26]
 8007d9c:	8b7b      	ldrh	r3, [r7, #26]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bf14      	ite	ne
 8007da2:	2301      	movne	r3, #1
 8007da4:	2300      	moveq	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <read_bmp_headers+0x148>
 8007dac:	8b7b      	ldrh	r3, [r7, #26]
 8007dae:	e060      	b.n	8007e72 <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v4(io, &bmp_state->v4));
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	3358      	adds	r3, #88	; 0x58
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 f9b1 	bl	800911e <bmp_private_read_v4>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	833b      	strh	r3, [r7, #24]
 8007dc0:	8b3b      	ldrh	r3, [r7, #24]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <read_bmp_headers+0x16c>
 8007dd0:	8b3b      	ldrh	r3, [r7, #24]
 8007dd2:	e04e      	b.n	8007e72 <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v5(io, &bmp_state->v5));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	339c      	adds	r3, #156	; 0x9c
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 fb0b 	bl	80093f6 <bmp_private_read_v5>
 8007de0:	4603      	mov	r3, r0
 8007de2:	82fb      	strh	r3, [r7, #22]
 8007de4:	8afb      	ldrh	r3, [r7, #22]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf14      	ite	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	2300      	moveq	r3, #0
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <read_bmp_headers+0x190>
 8007df4:	8afb      	ldrh	r3, [r7, #22]
 8007df6:	e03c      	b.n	8007e72 <read_bmp_headers+0x20a>

            if (memcmp(&bmp_state->v4.color_space_type, SAIL_PROFILE_EMBEDDED, sizeof(SAIL_PROFILE_EMBEDDED)) == 0) {
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	3368      	adds	r3, #104	; 0x68
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	491f      	ldr	r1, [pc, #124]	; (8007e7c <read_bmp_headers+0x214>)
 8007e00:	4618      	mov	r0, r3
 8007e02:	f00b f883 	bl	8012f0c <memcmp>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d130      	bne.n	8007e6e <read_bmp_headers+0x206>
                SAIL_TRY(bmp_private_fetch_iccp(io, (long)(offset_of_bitmap_header + bmp_state->v5.profile_data), bmp_state->v5.profile_size, &bmp_state->iccp));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4413      	add	r3, r2
 8007e16:	4619      	mov	r1, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	33ac      	adds	r3, #172	; 0xac
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fbc2 	bl	80095ac <bmp_private_fetch_iccp>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	82bb      	strh	r3, [r7, #20]
 8007e2c:	8abb      	ldrh	r3, [r7, #20]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bf14      	ite	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	2300      	moveq	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d018      	beq.n	8007e6e <read_bmp_headers+0x206>
 8007e3c:	8abb      	ldrh	r3, [r7, #20]
 8007e3e:	e018      	b.n	8007e72 <read_bmp_headers+0x20a>
            }

            break;
        }
        default: {
            SAIL_LOG_ERROR("BMP: Unsupported file header size %u", bmp_state->v2.size);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <read_bmp_headers+0x218>)
 8007e48:	22b4      	movs	r2, #180	; 0xb4
 8007e4a:	490e      	ldr	r1, [pc, #56]	; (8007e84 <read_bmp_headers+0x21c>)
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	f006 fedd 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8007e52:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <read_bmp_headers+0x220>)
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <read_bmp_headers+0x224>)
 8007e58:	22b5      	movs	r2, #181	; 0xb5
 8007e5a:	490a      	ldr	r1, [pc, #40]	; (8007e84 <read_bmp_headers+0x21c>)
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	f006 fed5 	bl	800ec0c <sail_log>
 8007e62:	23d4      	movs	r3, #212	; 0xd4
 8007e64:	e005      	b.n	8007e72 <read_bmp_headers+0x20a>
            break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <read_bmp_headers+0x208>
            break;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <read_bmp_headers+0x208>
            break;
 8007e6e:	bf00      	nop
        }
    }

    return SAIL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	0801c1ec 	.word	0x0801c1ec
 8007e80:	0801705c 	.word	0x0801705c
 8007e84:	08016fe4 	.word	0x08016fe4
 8007e88:	08017084 	.word	0x08017084
 8007e8c:	08016fe0 	.word	0x08016fe0

08007e90 <bmp_private_read_init>:

/*
 * Decoding functions.
 */

sail_status_t bmp_private_read_init(struct sail_io *io, const struct sail_load_options *load_options, void **state, int bmp_load_options) {
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b097      	sub	sp, #92	; 0x5c
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]

    /* Allocate a new state. */
    struct bmp_state *bmp_state;
    SAIL_TRY(alloc_bmp_state(&bmp_state));
 8007e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fe68 	bl	8007b78 <alloc_bmp_state>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007eae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bf14      	ite	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	2300      	moveq	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <bmp_private_read_init+0x36>
 8007ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ec4:	e312      	b.n	80084ec <bmp_private_read_init+0x65c>
    *state = bmp_state;
 8007ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]

    /* Shallow copy load options. */
    bmp_state->load_options = load_options;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	601a      	str	r2, [r3, #0]

    bmp_state->bmp_load_options = bmp_load_options;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	609a      	str	r2, [r3, #8]

    if (bmp_load_options & SAIL_READ_BMP_FILE_HEADER) {
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8092 	beq.w	8008008 <bmp_private_read_init+0x178>
        /* "BM" or 0x02. */
        uint16_t magic;
        SAIL_TRY(io->strict_read(io->stream, &magic, sizeof(magic)));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	68d0      	ldr	r0, [r2, #12]
 8007eec:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	4798      	blx	r3
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007efa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bf14      	ite	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	2300      	moveq	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <bmp_private_read_init+0x82>
 8007f0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f10:	e2ec      	b.n	80084ec <bmp_private_read_init+0x65c>
        SAIL_TRY(io->seek(io->stream, 0, SEEK_SET));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	68d0      	ldr	r0, [r2, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4798      	blx	r3
 8007f20:	4603      	mov	r3, r0
 8007f22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <bmp_private_read_init+0xae>
 8007f38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f3c:	e2d6      	b.n	80084ec <bmp_private_read_init+0x65c>

        if (magic == SAIL_DDB_IDENTIFIER) {
 8007f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f40:	2202      	movs	r2, #2
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d126      	bne.n	8007f94 <bmp_private_read_init+0x104>
            bmp_state->version = SAIL_BMP_V1;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2201      	movs	r2, #1
 8007f4a:	735a      	strb	r2, [r3, #13]

            SAIL_TRY(bmp_private_read_ddb_file_header(io, &bmp_state->ddb_file_header));
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	330e      	adds	r3, #14
 8007f50:	4619      	mov	r1, r3
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fec9 	bl	8008cea <bmp_private_read_ddb_file_header>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007f5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bf14      	ite	ne
 8007f62:	2301      	movne	r3, #1
 8007f64:	2300      	moveq	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <bmp_private_read_init+0xe0>
 8007f6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f6e:	e2bd      	b.n	80084ec <bmp_private_read_init+0x65c>
            SAIL_TRY(bmp_private_read_v1(io, &bmp_state->v1));
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	3310      	adds	r3, #16
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fed4 	bl	8008d24 <bmp_private_read_v1>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007f80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bf14      	ite	ne
 8007f86:	2301      	movne	r3, #1
 8007f88:	2300      	moveq	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d04f      	beq.n	8008030 <bmp_private_read_init+0x1a0>
 8007f90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007f92:	e2ab      	b.n	80084ec <bmp_private_read_init+0x65c>
        } else if (magic == SAIL_DIB_IDENTIFIER) {
 8007f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f96:	f644 5242 	movw	r2, #19778	; 0x4d42
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d122      	bne.n	8007fe4 <bmp_private_read_init+0x154>
            SAIL_TRY(bmp_private_read_dib_file_header(io, &bmp_state->dib_file_header));
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	3320      	adds	r3, #32
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 ff55 	bl	8008e54 <bmp_private_read_dib_file_header>
 8007faa:	4603      	mov	r3, r0
 8007fac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007fae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <bmp_private_read_init+0x132>
 8007fbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fc0:	e294      	b.n	80084ec <bmp_private_read_init+0x65c>
            SAIL_TRY(read_bmp_headers(io, bmp_state));
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff fe4e 	bl	8007c68 <read_bmp_headers>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007fd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bf14      	ite	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	2300      	moveq	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d027      	beq.n	8008030 <bmp_private_read_init+0x1a0>
 8007fe0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007fe2:	e283      	b.n	80084ec <bmp_private_read_init+0x65c>
        } else {
            SAIL_LOG_ERROR("BMP: 0x%x is not a valid magic number", magic);
 8007fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	4b90      	ldr	r3, [pc, #576]	; (800822c <bmp_private_read_init+0x39c>)
 8007fea:	22db      	movs	r2, #219	; 0xdb
 8007fec:	4990      	ldr	r1, [pc, #576]	; (8008230 <bmp_private_read_init+0x3a0>)
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f006 fe0c 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8007ff4:	4b8f      	ldr	r3, [pc, #572]	; (8008234 <bmp_private_read_init+0x3a4>)
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	4b8f      	ldr	r3, [pc, #572]	; (8008238 <bmp_private_read_init+0x3a8>)
 8007ffa:	22dc      	movs	r2, #220	; 0xdc
 8007ffc:	498c      	ldr	r1, [pc, #560]	; (8008230 <bmp_private_read_init+0x3a0>)
 8007ffe:	2001      	movs	r0, #1
 8008000:	f006 fe04 	bl	800ec0c <sail_log>
 8008004:	23d4      	movs	r3, #212	; 0xd4
 8008006:	e271      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
    } else {
        SAIL_TRY(read_bmp_headers(io, bmp_state));
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fe2b 	bl	8007c68 <read_bmp_headers>
 8008012:	4603      	mov	r3, r0
 8008014:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800801c:	2b00      	cmp	r3, #0
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <bmp_private_read_init+0x1a0>
 800802a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800802e:	e25d      	b.n	80084ec <bmp_private_read_init+0x65c>
    }

    /* Check BMP restrictions. */
    if (bmp_state->version == SAIL_BMP_V1) {
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	7b5b      	ldrb	r3, [r3, #13]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d15a      	bne.n	80080ee <bmp_private_read_init+0x25e>
        if (bmp_state->v1.type != 0) {
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	8a1b      	ldrh	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00f      	beq.n	8008060 <bmp_private_read_init+0x1d0>
            SAIL_LOG_ERROR("BMP: DDB type must always be 0");
 8008040:	4b7e      	ldr	r3, [pc, #504]	; (800823c <bmp_private_read_init+0x3ac>)
 8008042:	22e5      	movs	r2, #229	; 0xe5
 8008044:	497a      	ldr	r1, [pc, #488]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008046:	2001      	movs	r0, #1
 8008048:	f006 fde0 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800804c:	4b7c      	ldr	r3, [pc, #496]	; (8008240 <bmp_private_read_init+0x3b0>)
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4b79      	ldr	r3, [pc, #484]	; (8008238 <bmp_private_read_init+0x3a8>)
 8008052:	22e6      	movs	r2, #230	; 0xe6
 8008054:	4976      	ldr	r1, [pc, #472]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008056:	2001      	movs	r0, #1
 8008058:	f006 fdd8 	bl	800ec0c <sail_log>
 800805c:	23d5      	movs	r3, #213	; 0xd5
 800805e:	e245      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.planes != 1) {
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	7e1b      	ldrb	r3, [r3, #24]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d00f      	beq.n	8008088 <bmp_private_read_init+0x1f8>
            SAIL_LOG_ERROR("BMP: DDB planes must always be 1");
 8008068:	4b76      	ldr	r3, [pc, #472]	; (8008244 <bmp_private_read_init+0x3b4>)
 800806a:	22e9      	movs	r2, #233	; 0xe9
 800806c:	4970      	ldr	r1, [pc, #448]	; (8008230 <bmp_private_read_init+0x3a0>)
 800806e:	2001      	movs	r0, #1
 8008070:	f006 fdcc 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8008074:	4b72      	ldr	r3, [pc, #456]	; (8008240 <bmp_private_read_init+0x3b0>)
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	4b6f      	ldr	r3, [pc, #444]	; (8008238 <bmp_private_read_init+0x3a8>)
 800807a:	22ea      	movs	r2, #234	; 0xea
 800807c:	496c      	ldr	r1, [pc, #432]	; (8008230 <bmp_private_read_init+0x3a0>)
 800807e:	2001      	movs	r0, #1
 8008080:	f006 fdc4 	bl	800ec0c <sail_log>
 8008084:	23d5      	movs	r3, #213	; 0xd5
 8008086:	e231      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.pixels != 0) {
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00f      	beq.n	80080b0 <bmp_private_read_init+0x220>
            SAIL_LOG_ERROR("BMP: DDB pixels must always be 0");
 8008090:	4b6d      	ldr	r3, [pc, #436]	; (8008248 <bmp_private_read_init+0x3b8>)
 8008092:	22ed      	movs	r2, #237	; 0xed
 8008094:	4966      	ldr	r1, [pc, #408]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008096:	2001      	movs	r0, #1
 8008098:	f006 fdb8 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800809c:	4b68      	ldr	r3, [pc, #416]	; (8008240 <bmp_private_read_init+0x3b0>)
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4b65      	ldr	r3, [pc, #404]	; (8008238 <bmp_private_read_init+0x3a8>)
 80080a2:	22ee      	movs	r2, #238	; 0xee
 80080a4:	4962      	ldr	r1, [pc, #392]	; (8008230 <bmp_private_read_init+0x3a0>)
 80080a6:	2001      	movs	r0, #1
 80080a8:	f006 fdb0 	bl	800ec0c <sail_log>
 80080ac:	23d5      	movs	r3, #213	; 0xd5
 80080ae:	e21d      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.bit_count != 1 && bmp_state->v1.bit_count != 4 && bmp_state->v1.bit_count != 8) {
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	7e5b      	ldrb	r3, [r3, #25]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	f000 808e 	beq.w	80081d6 <bmp_private_read_init+0x346>
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	7e5b      	ldrb	r3, [r3, #25]
 80080be:	2b04      	cmp	r3, #4
 80080c0:	f000 8089 	beq.w	80081d6 <bmp_private_read_init+0x346>
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	7e5b      	ldrb	r3, [r3, #25]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	f000 8084 	beq.w	80081d6 <bmp_private_read_init+0x346>
            SAIL_LOG_ERROR("BMP: DDB bpp must be 1, 4, or 8");
 80080ce:	4b5f      	ldr	r3, [pc, #380]	; (800824c <bmp_private_read_init+0x3bc>)
 80080d0:	22f1      	movs	r2, #241	; 0xf1
 80080d2:	4957      	ldr	r1, [pc, #348]	; (8008230 <bmp_private_read_init+0x3a0>)
 80080d4:	2001      	movs	r0, #1
 80080d6:	f006 fd99 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 80080da:	4b59      	ldr	r3, [pc, #356]	; (8008240 <bmp_private_read_init+0x3b0>)
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	4b56      	ldr	r3, [pc, #344]	; (8008238 <bmp_private_read_init+0x3a8>)
 80080e0:	22f2      	movs	r2, #242	; 0xf2
 80080e2:	4953      	ldr	r1, [pc, #332]	; (8008230 <bmp_private_read_init+0x3a0>)
 80080e4:	2001      	movs	r0, #1
 80080e6:	f006 fd91 	bl	800ec0c <sail_log>
 80080ea:	23d5      	movs	r3, #213	; 0xd5
 80080ec:	e1fe      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
    } else if (bmp_state->version >= SAIL_BMP_V3) {
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	7b5b      	ldrb	r3, [r3, #13]
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d96f      	bls.n	80081d6 <bmp_private_read_init+0x346>
        if (bmp_state->v3.compression == SAIL_BI_BITFIELDS && bmp_state->v2.bit_count != 16 && bmp_state->v2.bit_count != 32) {
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	2203      	movs	r2, #3
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d117      	bne.n	8008130 <bmp_private_read_init+0x2a0>
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008104:	2b10      	cmp	r3, #16
 8008106:	d013      	beq.n	8008130 <bmp_private_read_init+0x2a0>
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800810c:	2b20      	cmp	r3, #32
 800810e:	d00f      	beq.n	8008130 <bmp_private_read_init+0x2a0>
            SAIL_LOG_ERROR("BMP: BitFields compression is allowed only for 16 or 32 bpp");
 8008110:	4b4f      	ldr	r3, [pc, #316]	; (8008250 <bmp_private_read_init+0x3c0>)
 8008112:	22f6      	movs	r2, #246	; 0xf6
 8008114:	4946      	ldr	r1, [pc, #280]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008116:	2001      	movs	r0, #1
 8008118:	f006 fd78 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800811c:	4b48      	ldr	r3, [pc, #288]	; (8008240 <bmp_private_read_init+0x3b0>)
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4b45      	ldr	r3, [pc, #276]	; (8008238 <bmp_private_read_init+0x3a8>)
 8008122:	22f7      	movs	r2, #247	; 0xf7
 8008124:	4942      	ldr	r1, [pc, #264]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008126:	2001      	movs	r0, #1
 8008128:	f006 fd70 	bl	800ec0c <sail_log>
 800812c:	23d5      	movs	r3, #213	; 0xd5
 800812e:	e1dd      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression != SAIL_BI_RGB && bmp_state->v3.compression != SAIL_BI_RLE4 && bmp_state->v3.compression != SAIL_BI_RLE8) {
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	2200      	movs	r2, #0
 8008136:	4293      	cmp	r3, r2
 8008138:	d019      	beq.n	800816e <bmp_private_read_init+0x2de>
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2202      	movs	r2, #2
 8008140:	4293      	cmp	r3, r2
 8008142:	d014      	beq.n	800816e <bmp_private_read_init+0x2de>
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2201      	movs	r2, #1
 800814a:	4293      	cmp	r3, r2
 800814c:	d00f      	beq.n	800816e <bmp_private_read_init+0x2de>
            SAIL_LOG_ERROR("BMP: Only RGB, RLE4, and RLE8 compressions are supported");
 800814e:	4b41      	ldr	r3, [pc, #260]	; (8008254 <bmp_private_read_init+0x3c4>)
 8008150:	22fa      	movs	r2, #250	; 0xfa
 8008152:	4937      	ldr	r1, [pc, #220]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008154:	2001      	movs	r0, #1
 8008156:	f006 fd59 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_COMPRESSION);
 800815a:	4b3f      	ldr	r3, [pc, #252]	; (8008258 <bmp_private_read_init+0x3c8>)
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4b36      	ldr	r3, [pc, #216]	; (8008238 <bmp_private_read_init+0x3a8>)
 8008160:	22fb      	movs	r2, #251	; 0xfb
 8008162:	4933      	ldr	r1, [pc, #204]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008164:	2001      	movs	r0, #1
 8008166:	f006 fd51 	bl	800ec0c <sail_log>
 800816a:	23cb      	movs	r3, #203	; 0xcb
 800816c:	e1be      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression == SAIL_BI_RLE4 && bmp_state->v2.bit_count != 4) {
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	2202      	movs	r2, #2
 8008174:	4293      	cmp	r3, r2
 8008176:	d113      	bne.n	80081a0 <bmp_private_read_init+0x310>
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817c:	2b04      	cmp	r3, #4
 800817e:	d00f      	beq.n	80081a0 <bmp_private_read_init+0x310>
            SAIL_LOG_ERROR("BMP: RLE4 compression must only be used with 4 bpp");
 8008180:	4b36      	ldr	r3, [pc, #216]	; (800825c <bmp_private_read_init+0x3cc>)
 8008182:	22fe      	movs	r2, #254	; 0xfe
 8008184:	492a      	ldr	r1, [pc, #168]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008186:	2001      	movs	r0, #1
 8008188:	f006 fd40 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800818c:	4b2c      	ldr	r3, [pc, #176]	; (8008240 <bmp_private_read_init+0x3b0>)
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4b29      	ldr	r3, [pc, #164]	; (8008238 <bmp_private_read_init+0x3a8>)
 8008192:	22ff      	movs	r2, #255	; 0xff
 8008194:	4926      	ldr	r1, [pc, #152]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008196:	2001      	movs	r0, #1
 8008198:	f006 fd38 	bl	800ec0c <sail_log>
 800819c:	23d5      	movs	r3, #213	; 0xd5
 800819e:	e1a5      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression == SAIL_BI_RLE8 && bmp_state->v2.bit_count != 8) {
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	2201      	movs	r2, #1
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d115      	bne.n	80081d6 <bmp_private_read_init+0x346>
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d011      	beq.n	80081d6 <bmp_private_read_init+0x346>
            SAIL_LOG_ERROR("BMP: RLE8 compression must only be used with 8 bpp");
 80081b2:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <bmp_private_read_init+0x3d0>)
 80081b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80081b8:	491d      	ldr	r1, [pc, #116]	; (8008230 <bmp_private_read_init+0x3a0>)
 80081ba:	2001      	movs	r0, #1
 80081bc:	f006 fd26 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 80081c0:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <bmp_private_read_init+0x3b0>)
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4b1c      	ldr	r3, [pc, #112]	; (8008238 <bmp_private_read_init+0x3a8>)
 80081c6:	f240 1203 	movw	r2, #259	; 0x103
 80081ca:	4919      	ldr	r1, [pc, #100]	; (8008230 <bmp_private_read_init+0x3a0>)
 80081cc:	2001      	movs	r0, #1
 80081ce:	f006 fd1d 	bl	800ec0c <sail_log>
 80081d2:	23d5      	movs	r3, #213	; 0xd5
 80081d4:	e18a      	b.n	80084ec <bmp_private_read_init+0x65c>
        }
    }

    SAIL_TRY(bmp_private_bit_count_to_pixel_format(bmp_state->version == SAIL_BMP_V1 ? bmp_state->v1.bit_count : bmp_state->v2.bit_count,
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	7b5b      	ldrb	r3, [r3, #13]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d103      	bne.n	80081e6 <bmp_private_read_init+0x356>
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	7e5b      	ldrb	r3, [r3, #25]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	e001      	b.n	80081ea <bmp_private_read_init+0x35a>
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ec:	320c      	adds	r2, #12
 80081ee:	4611      	mov	r1, r2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 f95b 	bl	80094ac <bmp_private_bit_count_to_pixel_format>
 80081f6:	4603      	mov	r3, r0
 80081f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80081fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bf14      	ite	ne
 8008200:	2301      	movne	r3, #1
 8008202:	2300      	moveq	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <bmp_private_read_init+0x37e>
 800820a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800820c:	e16e      	b.n	80084ec <bmp_private_read_init+0x65c>
                                                    &bmp_state->source_pixel_format));

    if (bmp_state->version < SAIL_BMP_V3) {
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	7b5b      	ldrb	r3, [r3, #13]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d828      	bhi.n	8008268 <bmp_private_read_init+0x3d8>
        SAIL_LOG_DEBUG("BMP: Version(%d)", bmp_state->version);
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	7b5b      	ldrb	r3, [r3, #13]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <bmp_private_read_init+0x3d4>)
 800821e:	f240 120b 	movw	r2, #267	; 0x10b
 8008222:	4903      	ldr	r1, [pc, #12]	; (8008230 <bmp_private_read_init+0x3a0>)
 8008224:	2005      	movs	r0, #5
 8008226:	f006 fcf1 	bl	800ec0c <sail_log>
 800822a:	e02b      	b.n	8008284 <bmp_private_read_init+0x3f4>
 800822c:	080170a4 	.word	0x080170a4
 8008230:	08016fe4 	.word	0x08016fe4
 8008234:	08017084 	.word	0x08017084
 8008238:	08016fe0 	.word	0x08016fe0
 800823c:	080170cc 	.word	0x080170cc
 8008240:	080170ec 	.word	0x080170ec
 8008244:	08017104 	.word	0x08017104
 8008248:	08017128 	.word	0x08017128
 800824c:	0801714c 	.word	0x0801714c
 8008250:	0801716c 	.word	0x0801716c
 8008254:	080171a8 	.word	0x080171a8
 8008258:	080171e4 	.word	0x080171e4
 800825c:	08017208 	.word	0x08017208
 8008260:	0801723c 	.word	0x0801723c
 8008264:	08017270 	.word	0x08017270
    } else {
        SAIL_LOG_DEBUG("BMP: Version(%d), compression(%u)", bmp_state->version, bmp_state->v3.compression);
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	7b5b      	ldrb	r3, [r3, #13]
 800826c:	461a      	mov	r2, r3
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	9200      	str	r2, [sp, #0]
 8008276:	4b9f      	ldr	r3, [pc, #636]	; (80084f4 <bmp_private_read_init+0x664>)
 8008278:	f240 120d 	movw	r2, #269	; 0x10d
 800827c:	499e      	ldr	r1, [pc, #632]	; (80084f8 <bmp_private_read_init+0x668>)
 800827e:	2005      	movs	r0, #5
 8008280:	f006 fcc4 	bl	800ec0c <sail_log>
    }

    /* Read palette.  */
    if (bmp_state->version == SAIL_BMP_V1) {
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	7b5b      	ldrb	r3, [r3, #13]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d117      	bne.n	80082bc <bmp_private_read_init+0x42c>
        SAIL_TRY(bmp_private_fill_system_palette(bmp_state->v1.bit_count, &bmp_state->palette, &bmp_state->palette_count));
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	7e5b      	ldrb	r3, [r3, #25]
 8008290:	4618      	mov	r0, r3
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	33b4      	adds	r3, #180	; 0xb4
 800829c:	461a      	mov	r2, r3
 800829e:	f001 fae3 	bl	8009868 <bmp_private_fill_system_palette>
 80082a2:	4603      	mov	r3, r0
 80082a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80082a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf14      	ite	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	2300      	moveq	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80d2 	beq.w	800845c <bmp_private_read_init+0x5cc>
 80082b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082ba:	e117      	b.n	80084ec <bmp_private_read_init+0x65c>
    } else if (bmp_state->v2.bit_count < 16) {
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c0:	2b0f      	cmp	r3, #15
 80082c2:	f200 80cb 	bhi.w	800845c <bmp_private_read_init+0x5cc>
        if (bmp_state->version == SAIL_BMP_V2) {
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	7b5b      	ldrb	r3, [r3, #13]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d109      	bne.n	80082e2 <bmp_private_read_init+0x452>
            bmp_state->palette_count = 1 << bmp_state->v2.bit_count;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d2:	461a      	mov	r2, r3
 80082d4:	2301      	movs	r3, #1
 80082d6:	fa03 f202 	lsl.w	r2, r3, r2
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80082e0:	e00e      	b.n	8008300 <bmp_private_read_init+0x470>
        } else {
            bmp_state->palette_count = (bmp_state->v3.colors_used == 0) ? (1U << bmp_state->v2.bit_count) : bmp_state->v3.colors_used;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <bmp_private_read_init+0x466>
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ee:	461a      	mov	r2, r3
 80082f0:	2301      	movs	r3, #1
 80082f2:	4093      	lsls	r3, r2
 80082f4:	e001      	b.n	80082fa <bmp_private_read_init+0x46a>
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        }

        if (bmp_state->palette_count == 0) {
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d111      	bne.n	800832e <bmp_private_read_init+0x49e>
            SAIL_LOG_ERROR("BMP: Indexed image has no palette");
 800830a:	4b7c      	ldr	r3, [pc, #496]	; (80084fc <bmp_private_read_init+0x66c>)
 800830c:	f240 121b 	movw	r2, #283	; 0x11b
 8008310:	4979      	ldr	r1, [pc, #484]	; (80084f8 <bmp_private_read_init+0x668>)
 8008312:	2001      	movs	r0, #1
 8008314:	f006 fc7a 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8008318:	4b79      	ldr	r3, [pc, #484]	; (8008500 <bmp_private_read_init+0x670>)
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	4b79      	ldr	r3, [pc, #484]	; (8008504 <bmp_private_read_init+0x674>)
 800831e:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8008322:	4975      	ldr	r1, [pc, #468]	; (80084f8 <bmp_private_read_init+0x668>)
 8008324:	2001      	movs	r0, #1
 8008326:	f006 fc71 	bl	800ec0c <sail_log>
 800832a:	23d3      	movs	r3, #211	; 0xd3
 800832c:	e0de      	b.n	80084ec <bmp_private_read_init+0x65c>
        }

        void *ptr;
        SAIL_TRY(sail_malloc(sizeof(sail_rgba32_t) * bmp_state->palette_count, &ptr));
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	f107 021c 	add.w	r2, r7, #28
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f006 fd5d 	bl	800edfc <sail_malloc>
 8008342:	4603      	mov	r3, r0
 8008344:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008346:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <bmp_private_read_init+0x4ca>
 8008356:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008358:	e0c8      	b.n	80084ec <bmp_private_read_init+0x65c>
        bmp_state->palette = ptr;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        if (bmp_state->version == SAIL_BMP_V2) {
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	7b5b      	ldrb	r3, [r3, #13]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d13c      	bne.n	80083e4 <bmp_private_read_init+0x554>
            sail_rgb24_t rgb;

            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 800836a:	2300      	movs	r3, #0
 800836c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800836e:	e032      	b.n	80083d6 <bmp_private_read_init+0x546>
                SAIL_TRY(sail_read_pixel3_uint8(io, &rgb));
 8008370:	f107 0318 	add.w	r3, r7, #24
 8008374:	4619      	mov	r1, r3
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f006 fed8 	bl	800f12c <sail_read_pixel3_uint8>
 800837c:	4603      	mov	r3, r0
 800837e:	863b      	strh	r3, [r7, #48]	; 0x30
 8008380:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf14      	ite	ne
 8008386:	2301      	movne	r3, #1
 8008388:	2300      	moveq	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <bmp_private_read_init+0x504>
 8008390:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8008392:	e0ab      	b.n	80084ec <bmp_private_read_init+0x65c>

                bmp_state->palette[i].component1 = rgb.component1;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800839a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800839c:	4613      	mov	r3, r2
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	4413      	add	r3, r2
 80083a2:	440b      	add	r3, r1
 80083a4:	7e3a      	ldrb	r2, [r7, #24]
 80083a6:	701a      	strb	r2, [r3, #0]
                bmp_state->palette[i].component2 = rgb.component2;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80083ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	440b      	add	r3, r1
 80083b8:	7e7a      	ldrb	r2, [r7, #25]
 80083ba:	705a      	strb	r2, [r3, #1]
                bmp_state->palette[i].component3 = rgb.component3;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80083c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c4:	4613      	mov	r3, r2
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	4413      	add	r3, r2
 80083ca:	440b      	add	r3, r1
 80083cc:	7eba      	ldrb	r2, [r7, #26]
 80083ce:	709a      	strb	r2, [r3, #2]
            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 80083d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d2:	3301      	adds	r3, #1
 80083d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083de:	429a      	cmp	r2, r3
 80083e0:	d3c6      	bcc.n	8008370 <bmp_private_read_init+0x4e0>
 80083e2:	e03b      	b.n	800845c <bmp_private_read_init+0x5cc>
            }
        } else {
            sail_rgba32_t rgba;

            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 80083e4:	2300      	movs	r3, #0
 80083e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e8:	e032      	b.n	8008450 <bmp_private_read_init+0x5c0>
                SAIL_TRY(sail_read_pixel4_uint8(io, &rgba));
 80083ea:	f107 0314 	add.w	r3, r7, #20
 80083ee:	4619      	mov	r1, r3
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f006 ff03 	bl	800f1fc <sail_read_pixel4_uint8>
 80083f6:	4603      	mov	r3, r0
 80083f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80083fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bf14      	ite	ne
 8008400:	2301      	movne	r3, #1
 8008402:	2300      	moveq	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <bmp_private_read_init+0x57e>
 800840a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 800840c:	e06e      	b.n	80084ec <bmp_private_read_init+0x65c>

                bmp_state->palette[i].component1 = rgba.component1;
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008416:	4613      	mov	r3, r2
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	4413      	add	r3, r2
 800841c:	440b      	add	r3, r1
 800841e:	7d3a      	ldrb	r2, [r7, #20]
 8008420:	701a      	strb	r2, [r3, #0]
                bmp_state->palette[i].component2 = rgba.component2;
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842a:	4613      	mov	r3, r2
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	4413      	add	r3, r2
 8008430:	440b      	add	r3, r1
 8008432:	7d7a      	ldrb	r2, [r7, #21]
 8008434:	705a      	strb	r2, [r3, #1]
                bmp_state->palette[i].component3 = rgba.component3;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800843c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843e:	4613      	mov	r3, r2
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	4413      	add	r3, r2
 8008444:	440b      	add	r3, r1
 8008446:	7dba      	ldrb	r2, [r7, #22]
 8008448:	709a      	strb	r2, [r3, #2]
            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 800844a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844c:	3301      	adds	r3, #1
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008458:	429a      	cmp	r2, r3
 800845a:	d3c6      	bcc.n	80083ea <bmp_private_read_init+0x55a>
            }
        }
    }

    /* Calculate the number of pad bytes to align scan lines to 4-byte boundary. */
    if (bmp_state->version == SAIL_BMP_V1) {
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	7b5b      	ldrb	r3, [r3, #13]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d121      	bne.n	80084a8 <bmp_private_read_init+0x618>
        SAIL_TRY(bmp_private_bytes_in_row(bmp_state->v1.width, bmp_state->v1.bit_count, &bmp_state->bytes_in_row));
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	8a5b      	ldrh	r3, [r3, #18]
 8008468:	4618      	mov	r0, r3
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	7e5b      	ldrb	r3, [r3, #25]
 800846e:	4619      	mov	r1, r3
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	33b8      	adds	r3, #184	; 0xb8
 8008474:	461a      	mov	r2, r3
 8008476:	f001 f959 	bl	800972c <bmp_private_bytes_in_row>
 800847a:	4603      	mov	r3, r0
 800847c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800847e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <bmp_private_read_init+0x602>
 800848e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008490:	e02c      	b.n	80084ec <bmp_private_read_init+0x65c>
        bmp_state->pad_bytes = bmp_state->v1.byte_width - bmp_state->bytes_in_row;
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	8adb      	ldrh	r3, [r3, #22]
 8008496:	4619      	mov	r1, r3
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	1a8a      	subs	r2, r1, r2
 80084a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80084a6:	e020      	b.n	80084ea <bmp_private_read_init+0x65a>
    } else {
        SAIL_TRY(bmp_private_bytes_in_row(bmp_state->v2.width, bmp_state->v2.bit_count, &bmp_state->bytes_in_row));
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ac:	4618      	mov	r0, r3
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b2:	4619      	mov	r1, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	33b8      	adds	r3, #184	; 0xb8
 80084b8:	461a      	mov	r2, r3
 80084ba:	f001 f937 	bl	800972c <bmp_private_bytes_in_row>
 80084be:	4603      	mov	r3, r0
 80084c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80084c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bf14      	ite	ne
 80084c8:	2301      	movne	r3, #1
 80084ca:	2300      	moveq	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <bmp_private_read_init+0x646>
 80084d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80084d4:	e00a      	b.n	80084ec <bmp_private_read_init+0x65c>
        bmp_state->pad_bytes = bmp_private_pad_bytes(bmp_state->bytes_in_row);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084dc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 f9ac 	bl	800983c <bmp_private_pad_bytes>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    }

    return SAIL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3754      	adds	r7, #84	; 0x54
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd90      	pop	{r4, r7, pc}
 80084f4:	08017284 	.word	0x08017284
 80084f8:	08016fe4 	.word	0x08016fe4
 80084fc:	080172a8 	.word	0x080172a8
 8008500:	080172cc 	.word	0x080172cc
 8008504:	08016fe0 	.word	0x08016fe0

08008508 <bmp_private_read_seek_next_frame>:

sail_status_t bmp_private_read_seek_next_frame(void *state, struct sail_io *io, struct sail_image **image) {
 8008508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800850c:	b08c      	sub	sp, #48	; 0x30
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	627b      	str	r3, [r7, #36]	; 0x24

    struct sail_image *image_local;
    SAIL_TRY(sail_alloc_image(&image_local));
 800851a:	f107 0314 	add.w	r3, r7, #20
 800851e:	4618      	mov	r0, r3
 8008520:	f005 f83e 	bl	800d5a0 <sail_alloc_image>
 8008524:	4603      	mov	r3, r0
 8008526:	847b      	strh	r3, [r7, #34]	; 0x22
 8008528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800852a:	2b00      	cmp	r3, #0
 800852c:	bf14      	ite	ne
 800852e:	2301      	movne	r3, #1
 8008530:	2300      	moveq	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <bmp_private_read_seek_next_frame+0x34>
 8008538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800853a:	e112      	b.n	8008762 <bmp_private_read_seek_next_frame+0x25a>
    SAIL_TRY_OR_CLEANUP(sail_alloc_source_image(&image_local->source_image),
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	3334      	adds	r3, #52	; 0x34
 8008540:	4618      	mov	r0, r3
 8008542:	f007 fca5 	bl	800fe90 <sail_alloc_source_image>
 8008546:	4603      	mov	r3, r0
 8008548:	843b      	strh	r3, [r7, #32]
 800854a:	8c3b      	ldrh	r3, [r7, #32]
 800854c:	2b00      	cmp	r3, #0
 800854e:	bf14      	ite	ne
 8008550:	2301      	movne	r3, #1
 8008552:	2300      	moveq	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <bmp_private_read_seek_next_frame+0x5e>
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	4618      	mov	r0, r3
 800855e:	f005 f89b 	bl	800d698 <sail_destroy_image>
 8008562:	8c3b      	ldrh	r3, [r7, #32]
 8008564:	e0fd      	b.n	8008762 <bmp_private_read_seek_next_frame+0x25a>
                        /* cleanup */ sail_destroy_image(image_local));

    image_local->source_image->pixel_format = bmp_state->source_pixel_format;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856c:	7b12      	ldrb	r2, [r2, #12]
 800856e:	701a      	strb	r2, [r3, #0]
    image_local->source_image->properties = bmp_state->flipped ? SAIL_IMAGE_PROPERTY_FLIPPED_VERTICALLY : 0;
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <bmp_private_read_seek_next_frame+0x76>
 800857a:	2202      	movs	r2, #2
 800857c:	e000      	b.n	8008580 <bmp_private_read_seek_next_frame+0x78>
 800857e:	2200      	movs	r2, #0
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	605a      	str	r2, [r3, #4]
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	2202      	movs	r2, #2
                                             ? SAIL_COMPRESSION_RLE : SAIL_COMPRESSION_NONE;
 800858c:	4293      	cmp	r3, r2
 800858e:	d004      	beq.n	800859a <bmp_private_read_seek_next_frame+0x92>
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	2201      	movs	r2, #1
 8008596:	4293      	cmp	r3, r2
 8008598:	d101      	bne.n	800859e <bmp_private_read_seek_next_frame+0x96>
                                             ? SAIL_COMPRESSION_RLE : SAIL_COMPRESSION_NONE;
 800859a:	221e      	movs	r2, #30
 800859c:	e000      	b.n	80085a0 <bmp_private_read_seek_next_frame+0x98>
 800859e:	2201      	movs	r2, #1
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a4:	721a      	strb	r2, [r3, #8]
    image_local->width = (bmp_state->version == SAIL_BMP_V1) ? bmp_state->v1.width : bmp_state->v2.width;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	7b5b      	ldrb	r3, [r3, #13]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d103      	bne.n	80085b6 <bmp_private_read_seek_next_frame+0xae>
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	8a5b      	ldrh	r3, [r3, #18]
 80085b2:	461a      	mov	r2, r3
 80085b4:	e002      	b.n	80085bc <bmp_private_read_seek_next_frame+0xb4>
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	461a      	mov	r2, r3
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	605a      	str	r2, [r3, #4]
    image_local->height = (bmp_state->version == SAIL_BMP_V1) ? bmp_state->v1.height : bmp_state->v2.height;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	7b5b      	ldrb	r3, [r3, #13]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d103      	bne.n	80085d0 <bmp_private_read_seek_next_frame+0xc8>
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	8a9b      	ldrh	r3, [r3, #20]
 80085cc:	461a      	mov	r2, r3
 80085ce:	e002      	b.n	80085d6 <bmp_private_read_seek_next_frame+0xce>
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	461a      	mov	r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	609a      	str	r2, [r3, #8]

    if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE4) {
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	7b5b      	ldrb	r3, [r3, #13]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d90e      	bls.n	8008600 <bmp_private_read_seek_next_frame+0xf8>
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	2202      	movs	r2, #2
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d109      	bne.n	8008600 <bmp_private_read_seek_next_frame+0xf8>
        /* We expand RLE-encoded 4-bit pixels to 8-bit. TODO: Unpack into 4-bit indexed image. */
        image_local->pixel_format = SAIL_PIXEL_FORMAT_BPP8_INDEXED;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2210      	movs	r2, #16
 80085f0:	751a      	strb	r2, [r3, #20]
        image_local->bytes_per_line = bmp_state->bytes_in_row * 2;
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	0052      	lsls	r2, r2, #1
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	e008      	b.n	8008612 <bmp_private_read_seek_next_frame+0x10a>
    } else {
        image_local->pixel_format = bmp_state->source_pixel_format;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008604:	7b12      	ldrb	r2, [r2, #12]
 8008606:	751a      	strb	r2, [r3, #20]
        image_local->bytes_per_line = bmp_state->bytes_in_row;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008610:	60da      	str	r2, [r3, #12]
    }

    if (bmp_state->palette != NULL) {
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d04f      	beq.n	80086bc <bmp_private_read_seek_next_frame+0x1b4>
        SAIL_TRY_OR_CLEANUP(sail_alloc_palette_for_data(SAIL_PIXEL_FORMAT_BPP24_RGB, bmp_state->palette_count, &image_local->palette),
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	3324      	adds	r3, #36	; 0x24
 8008626:	461a      	mov	r2, r3
 8008628:	201f      	movs	r0, #31
 800862a:	f006 fd03 	bl	800f034 <sail_alloc_palette_for_data>
 800862e:	4603      	mov	r3, r0
 8008630:	83fb      	strh	r3, [r7, #30]
 8008632:	8bfb      	ldrh	r3, [r7, #30]
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d005      	beq.n	800864e <bmp_private_read_seek_next_frame+0x146>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	4618      	mov	r0, r3
 8008646:	f005 f827 	bl	800d698 <sail_destroy_image>
 800864a:	8bfb      	ldrh	r3, [r7, #30]
 800864c:	e089      	b.n	8008762 <bmp_private_read_seek_next_frame+0x25a>
                            /* cleanup */ sail_destroy_image(image_local));

        unsigned char *palette_ptr = image_local->palette->data;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c

        for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8008656:	2300      	movs	r3, #0
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
 800865a:	e029      	b.n	80086b0 <bmp_private_read_seek_next_frame+0x1a8>
            *palette_ptr++ = bmp_state->palette[i].component3;
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008664:	4613      	mov	r3, r2
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	4413      	add	r3, r2
 800866a:	18ca      	adds	r2, r1, r3
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	1c59      	adds	r1, r3, #1
 8008670:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008672:	7892      	ldrb	r2, [r2, #2]
 8008674:	701a      	strb	r2, [r3, #0]
            *palette_ptr++ = bmp_state->palette[i].component2;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800867c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800867e:	4613      	mov	r3, r2
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	4413      	add	r3, r2
 8008684:	18ca      	adds	r2, r1, r3
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	1c59      	adds	r1, r3, #1
 800868a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800868c:	7852      	ldrb	r2, [r2, #1]
 800868e:	701a      	strb	r2, [r3, #0]
            *palette_ptr++ = bmp_state->palette[i].component1;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008698:	4613      	mov	r3, r2
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	4413      	add	r3, r2
 800869e:	18ca      	adds	r2, r1, r3
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	1c59      	adds	r1, r3, #1
 80086a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80086a6:	7812      	ldrb	r2, [r2, #0]
 80086a8:	701a      	strb	r2, [r3, #0]
        for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	3301      	adds	r3, #1
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d3cf      	bcc.n	800865c <bmp_private_read_seek_next_frame+0x154>
        }
    }

    /* Resolution. */
    if (bmp_state->version >= SAIL_BMP_V3) {
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	7b5b      	ldrb	r3, [r3, #13]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d927      	bls.n	8008714 <bmp_private_read_seek_next_frame+0x20c>
        SAIL_TRY_OR_CLEANUP(
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f8 f86d 	bl	80007a8 <__aeabi_i2d>
 80086ce:	4604      	mov	r4, r0
 80086d0:	460d      	mov	r5, r1
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f8 f866 	bl	80007a8 <__aeabi_i2d>
 80086dc:	4680      	mov	r8, r0
 80086de:	4689      	mov	r9, r1
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	3310      	adds	r3, #16
 80086e4:	4619      	mov	r1, r3
 80086e6:	ec49 8b11 	vmov	d1, r8, r9
 80086ea:	ec45 4b10 	vmov	d0, r4, r5
 80086ee:	2003      	movs	r0, #3
 80086f0:	f006 fdee 	bl	800f2d0 <sail_alloc_resolution_from_data>
 80086f4:	4603      	mov	r3, r0
 80086f6:	83bb      	strh	r3, [r7, #28]
 80086f8:	8bbb      	ldrh	r3, [r7, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bf14      	ite	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	2300      	moveq	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <bmp_private_read_seek_next_frame+0x20c>
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	4618      	mov	r0, r3
 800870c:	f004 ffc4 	bl	800d698 <sail_destroy_image>
 8008710:	8bbb      	ldrh	r3, [r7, #28]
 8008712:	e026      	b.n	8008762 <bmp_private_read_seek_next_frame+0x25a>
            sail_alloc_resolution_from_data(SAIL_RESOLUTION_UNIT_METER, bmp_state->v3.x_pixels_per_meter, bmp_state->v3.y_pixels_per_meter, &image_local->resolution),
                        /* cleanup */ sail_destroy_image(image_local));
    }

    /* Seek to the bitmap data if we have the file header. */
    if (bmp_state->bmp_load_options & SAIL_READ_BMP_FILE_HEADER) {
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01c      	beq.n	800875a <bmp_private_read_seek_next_frame+0x252>
        if (bmp_state->version > SAIL_BMP_V1) {
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	7b5b      	ldrb	r3, [r3, #13]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d918      	bls.n	800875a <bmp_private_read_seek_next_frame+0x252>
            SAIL_TRY_OR_CLEANUP(io->seek(io->stream, bmp_state->dib_file_header.offset, SEEK_SET),
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	68d0      	ldr	r0, [r2, #12]
 8008730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008732:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008734:	4611      	mov	r1, r2
 8008736:	2200      	movs	r2, #0
 8008738:	4798      	blx	r3
 800873a:	4603      	mov	r3, r0
 800873c:	837b      	strh	r3, [r7, #26]
 800873e:	8b7b      	ldrh	r3, [r7, #26]
 8008740:	2b00      	cmp	r3, #0
 8008742:	bf14      	ite	ne
 8008744:	2301      	movne	r3, #1
 8008746:	2300      	moveq	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <bmp_private_read_seek_next_frame+0x252>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	4618      	mov	r0, r3
 8008752:	f004 ffa1 	bl	800d698 <sail_destroy_image>
 8008756:	8b7b      	ldrh	r3, [r7, #26]
 8008758:	e003      	b.n	8008762 <bmp_private_read_seek_next_frame+0x25a>
                                /* cleanup */ sail_destroy_image(image_local));
        }
    }

    *image = image_local;
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3730      	adds	r7, #48	; 0x30
 8008766:	46bd      	mov	sp, r7
 8008768:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800876c <bmp_private_read_frame>:

sail_status_t bmp_private_read_frame(void *state, struct sail_io *io, struct sail_image *image) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b098      	sub	sp, #96	; 0x60
 8008770:	af02      	add	r7, sp, #8
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* RLE-encoded images don't need to skip pad bytes. */
    bool skip_pad_bytes = true;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    for (unsigned i = image->height; i > 0; i--) {
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	653b      	str	r3, [r7, #80]	; 0x50
 8008788:	e28a      	b.n	8008ca0 <bmp_private_read_frame+0x534>
        unsigned char *scan = (unsigned char *)image->pixels + image->bytes_per_line * (bmp_state->flipped ? (i - 1) : (image->height - i));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68d9      	ldr	r1, [r3, #12]
 8008792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008794:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <bmp_private_read_frame+0x36>
 800879c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879e:	3b01      	subs	r3, #1
 80087a0:	e003      	b.n	80087aa <bmp_private_read_frame+0x3e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6898      	ldr	r0, [r3, #8]
 80087a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a8:	1ac3      	subs	r3, r0, r3
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        for (unsigned pixel_index = 0; pixel_index < image->width;) {
 80087b2:	2300      	movs	r3, #0
 80087b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b6:	e250      	b.n	8008c5a <bmp_private_read_frame+0x4ee>
            if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE4) {
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	7b5b      	ldrb	r3, [r3, #13]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	f240 812f 	bls.w	8008a20 <bmp_private_read_frame+0x2b4>
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	2202      	movs	r2, #2
 80087c8:	4293      	cmp	r3, r2
 80087ca:	f040 8129 	bne.w	8008a20 <bmp_private_read_frame+0x2b4>
                skip_pad_bytes = false;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                uint8_t marker;
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	68d0      	ldr	r0, [r2, #12]
 80087dc:	f107 011d 	add.w	r1, r7, #29
 80087e0:	2201      	movs	r2, #1
 80087e2:	4798      	blx	r3
 80087e4:	4603      	mov	r3, r0
 80087e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80087e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bf14      	ite	ne
 80087ee:	2301      	movne	r3, #1
 80087f0:	2300      	moveq	r3, #0
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <bmp_private_read_frame+0x90>
 80087f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80087fa:	e256      	b.n	8008caa <bmp_private_read_frame+0x53e>

                if (marker == SAIL_UNENCODED_RUN_MARKER) {
 80087fc:	7f7b      	ldrb	r3, [r7, #29]
 80087fe:	2200      	movs	r2, #0
 8008800:	4293      	cmp	r3, r2
 8008802:	f040 80b3 	bne.w	800896c <bmp_private_read_frame+0x200>
                    uint8_t count_or_marker;
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	68d0      	ldr	r0, [r2, #12]
 800880e:	f107 011c 	add.w	r1, r7, #28
 8008812:	2201      	movs	r2, #1
 8008814:	4798      	blx	r3
 8008816:	4603      	mov	r3, r0
 8008818:	86bb      	strh	r3, [r7, #52]	; 0x34
 800881a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <bmp_private_read_frame+0xc2>
 800882a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800882c:	e09d      	b.n	800896a <bmp_private_read_frame+0x1fe>

                    if (count_or_marker == SAIL_END_OF_SCAN_LINE_MARKER) {
 800882e:	7f3b      	ldrb	r3, [r7, #28]
 8008830:	2200      	movs	r2, #0
 8008832:	4293      	cmp	r3, r2
 8008834:	d104      	bne.n	8008840 <bmp_private_read_frame+0xd4>
                        /* Jump to the end of scan line. +1 to avoid reading end-of-scan-line marker twice below. */
                        pixel_index = image->width + 1;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	3301      	adds	r3, #1
 800883c:	64bb      	str	r3, [r7, #72]	; 0x48
 800883e:	e0d9      	b.n	80089f4 <bmp_private_read_frame+0x288>
                    } else if (count_or_marker == SAIL_END_OF_RLE_DATA_MARKER) {
 8008840:	7f3b      	ldrb	r3, [r7, #28]
 8008842:	2201      	movs	r2, #1
 8008844:	4293      	cmp	r3, r2
 8008846:	d111      	bne.n	800886c <bmp_private_read_frame+0x100>
                        SAIL_LOG_ERROR("BMP: Unexpected end-of-rle-data marker");
 8008848:	4ba2      	ldr	r3, [pc, #648]	; (8008ad4 <bmp_private_read_frame+0x368>)
 800884a:	f240 1299 	movw	r2, #409	; 0x199
 800884e:	49a2      	ldr	r1, [pc, #648]	; (8008ad8 <bmp_private_read_frame+0x36c>)
 8008850:	2001      	movs	r0, #1
 8008852:	f006 f9db 	bl	800ec0c <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8008856:	4ba1      	ldr	r3, [pc, #644]	; (8008adc <bmp_private_read_frame+0x370>)
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	4ba1      	ldr	r3, [pc, #644]	; (8008ae0 <bmp_private_read_frame+0x374>)
 800885c:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008860:	499d      	ldr	r1, [pc, #628]	; (8008ad8 <bmp_private_read_frame+0x36c>)
 8008862:	2001      	movs	r0, #1
 8008864:	f006 f9d2 	bl	800ec0c <sail_log>
 8008868:	23d5      	movs	r3, #213	; 0xd5
 800886a:	e07e      	b.n	800896a <bmp_private_read_frame+0x1fe>
                    } else if (count_or_marker == SAIL_DELTA_MARKER) {
 800886c:	7f3b      	ldrb	r3, [r7, #28]
 800886e:	2202      	movs	r2, #2
 8008870:	4293      	cmp	r3, r2
 8008872:	d111      	bne.n	8008898 <bmp_private_read_frame+0x12c>
                        SAIL_LOG_ERROR("BMP: Delta marker is not supported");
 8008874:	4b9b      	ldr	r3, [pc, #620]	; (8008ae4 <bmp_private_read_frame+0x378>)
 8008876:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800887a:	4997      	ldr	r1, [pc, #604]	; (8008ad8 <bmp_private_read_frame+0x36c>)
 800887c:	2001      	movs	r0, #1
 800887e:	f006 f9c5 	bl	800ec0c <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8008882:	4b99      	ldr	r3, [pc, #612]	; (8008ae8 <bmp_private_read_frame+0x37c>)
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4b96      	ldr	r3, [pc, #600]	; (8008ae0 <bmp_private_read_frame+0x374>)
 8008888:	f240 129d 	movw	r2, #413	; 0x19d
 800888c:	4992      	ldr	r1, [pc, #584]	; (8008ad8 <bmp_private_read_frame+0x36c>)
 800888e:	2001      	movs	r0, #1
 8008890:	f006 f9bc 	bl	800ec0c <sail_log>
 8008894:	23d4      	movs	r3, #212	; 0xd4
 8008896:	e068      	b.n	800896a <bmp_private_read_frame+0x1fe>
                    } else {
                        bool read_byte = true;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        uint8_t byte = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	76fb      	strb	r3, [r7, #27]
                        uint8_t index;

                        for (uint8_t k = 0; k < count_or_marker; k++) {
 80088a2:	2300      	movs	r3, #0
 80088a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80088a8:	e032      	b.n	8008910 <bmp_private_read_frame+0x1a4>
                            if (read_byte) {
 80088aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01b      	beq.n	80088ea <bmp_private_read_frame+0x17e>
                                SAIL_TRY(io->strict_read(io->stream, &byte, sizeof(byte)));
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	68d0      	ldr	r0, [r2, #12]
 80088ba:	f107 011b 	add.w	r1, r7, #27
 80088be:	2201      	movs	r2, #1
 80088c0:	4798      	blx	r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80088c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <bmp_private_read_frame+0x16e>
 80088d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088d8:	e046      	b.n	8008968 <bmp_private_read_frame+0x1fc>
                                index = (byte >> 4) & 0xf;
 80088da:	7efb      	ldrb	r3, [r7, #27]
 80088dc:	091b      	lsrs	r3, r3, #4
 80088de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                                read_byte = false;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80088e8:	e007      	b.n	80088fa <bmp_private_read_frame+0x18e>
                            } else {
                                index = byte & 0xf;
 80088ea:	7efb      	ldrb	r3, [r7, #27]
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                                read_byte = true;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            }

                            *scan++ = index;
 80088fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008900:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008904:	701a      	strb	r2, [r3, #0]
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008906:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800890a:	3301      	adds	r3, #1
 800890c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008910:	7f3b      	ldrb	r3, [r7, #28]
 8008912:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008916:	429a      	cmp	r2, r3
 8008918:	d3c7      	bcc.n	80088aa <bmp_private_read_frame+0x13e>
                        }

                        /* Odd number of bytes is accompanied with an additional byte. */
                        uint8_t number_of_unencoded_bytes = (count_or_marker + 1) / 2;
 800891a:	7f3b      	ldrb	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	0fda      	lsrs	r2, r3, #31
 8008920:	4413      	add	r3, r2
 8008922:	105b      	asrs	r3, r3, #1
 8008924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        if ((number_of_unencoded_bytes % 2) != 0) {
 8008928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d012      	beq.n	800895c <bmp_private_read_frame+0x1f0>
                            SAIL_TRY(io->seek(io->stream, 1, SEEK_CUR));
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	68d0      	ldr	r0, [r2, #12]
 800893e:	2201      	movs	r2, #1
 8008940:	2101      	movs	r1, #1
 8008942:	4798      	blx	r3
 8008944:	4603      	mov	r3, r0
 8008946:	863b      	strh	r3, [r7, #48]	; 0x30
 8008948:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <bmp_private_read_frame+0x1f0>
 8008958:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800895a:	e005      	b.n	8008968 <bmp_private_read_frame+0x1fc>
                        }

                        pixel_index += count_or_marker;
 800895c:	7f3b      	ldrb	r3, [r7, #28]
 800895e:	461a      	mov	r2, r3
 8008960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008962:	4413      	add	r3, r2
 8008964:	64bb      	str	r3, [r7, #72]	; 0x48
 8008966:	e045      	b.n	80089f4 <bmp_private_read_frame+0x288>
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008968:	e19f      	b.n	8008caa <bmp_private_read_frame+0x53e>
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 800896a:	e19e      	b.n	8008caa <bmp_private_read_frame+0x53e>
                    }
                } else {
                    /* Normal RLE: count + value. */
                    bool high_4_bits = true;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                    uint8_t index;

                    uint8_t byte;
                    SAIL_TRY(io->strict_read(io->stream, &byte, sizeof(byte)));
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	68d0      	ldr	r0, [r2, #12]
 800897a:	f107 011a 	add.w	r1, r7, #26
 800897e:	2201      	movs	r2, #1
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008986:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <bmp_private_read_frame+0x22e>
 8008996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008998:	e187      	b.n	8008caa <bmp_private_read_frame+0x53e>

                    for (uint8_t k = 0; k < marker; k++) {
 800899a:	2300      	movs	r3, #0
 800899c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089a0:	e01e      	b.n	80089e0 <bmp_private_read_frame+0x274>
                        if (high_4_bits) {
 80089a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d007      	beq.n	80089ba <bmp_private_read_frame+0x24e>
                            index = (byte >> 4) & 0xf;
 80089aa:	7ebb      	ldrb	r3, [r7, #26]
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            high_4_bits = false;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80089b8:	e007      	b.n	80089ca <bmp_private_read_frame+0x25e>
                        } else {
                            index = byte & 0xf;
 80089ba:	7ebb      	ldrb	r3, [r7, #26]
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            high_4_bits = true;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                        }

                        *scan++ = index;
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80089d0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80089d4:	701a      	strb	r2, [r3, #0]
                    for (uint8_t k = 0; k < marker; k++) {
 80089d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80089da:	3301      	adds	r3, #1
 80089dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089e0:	7f7b      	ldrb	r3, [r7, #29]
 80089e2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d3db      	bcc.n	80089a2 <bmp_private_read_frame+0x236>
                    }

                    pixel_index += marker;
 80089ea:	7f7b      	ldrb	r3, [r7, #29]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f0:	4413      	add	r3, r2
 80089f2:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Read a possible end-of-scan-line marker at the end of line. */
                if (pixel_index == image->width) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089fa:	429a      	cmp	r2, r3
 80089fc:	f040 812d 	bne.w	8008c5a <bmp_private_read_frame+0x4ee>
                    SAIL_TRY(bmp_private_skip_end_of_scan_line(io));
 8008a00:	68b8      	ldr	r0, [r7, #8]
 8008a02:	f000 fe31 	bl	8009668 <bmp_private_skip_end_of_scan_line>
 8008a06:	4603      	mov	r3, r0
 8008a08:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bf14      	ite	ne
 8008a10:	2301      	movne	r3, #1
 8008a12:	2300      	moveq	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 811f 	beq.w	8008c5a <bmp_private_read_frame+0x4ee>
 8008a1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a1e:	e144      	b.n	8008caa <bmp_private_read_frame+0x53e>
                }
            } else if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE8) {
 8008a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a22:	7b5b      	ldrb	r3, [r3, #13]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	f240 80fe 	bls.w	8008c26 <bmp_private_read_frame+0x4ba>
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4293      	cmp	r3, r2
 8008a32:	f040 80f8 	bne.w	8008c26 <bmp_private_read_frame+0x4ba>
                skip_pad_bytes = false;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                uint8_t marker;
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	68d0      	ldr	r0, [r2, #12]
 8008a44:	f107 0119 	add.w	r1, r7, #25
 8008a48:	2201      	movs	r2, #1
 8008a4a:	4798      	blx	r3
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bf14      	ite	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	2300      	moveq	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <bmp_private_read_frame+0x2f8>
 8008a60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a62:	e122      	b.n	8008caa <bmp_private_read_frame+0x53e>

                if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8008a64:	7e7b      	ldrb	r3, [r7, #25]
 8008a66:	2200      	movs	r2, #0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	f040 809c 	bne.w	8008ba6 <bmp_private_read_frame+0x43a>
                    uint8_t count_or_marker;
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	68d0      	ldr	r0, [r2, #12]
 8008a76:	f107 0118 	add.w	r1, r7, #24
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4798      	blx	r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bf14      	ite	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	2300      	moveq	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <bmp_private_read_frame+0x32a>
 8008a92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a94:	e086      	b.n	8008ba4 <bmp_private_read_frame+0x438>

                    if (count_or_marker == SAIL_END_OF_SCAN_LINE_MARKER) {
 8008a96:	7e3b      	ldrb	r3, [r7, #24]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d104      	bne.n	8008aa8 <bmp_private_read_frame+0x33c>
                        /* Jump to the end of scan line. +1 to avoid reading end-of-scan-line marker twice below. */
                        pixel_index = image->width + 1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aa6:	e0aa      	b.n	8008bfe <bmp_private_read_frame+0x492>
                    } else if (count_or_marker == SAIL_END_OF_RLE_DATA_MARKER) {
 8008aa8:	7e3b      	ldrb	r3, [r7, #24]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d11d      	bne.n	8008aec <bmp_private_read_frame+0x380>
                        SAIL_LOG_ERROR("BMP: Unexpected end-of-rle-data marker");
 8008ab0:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <bmp_private_read_frame+0x368>)
 8008ab2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008ab6:	4908      	ldr	r1, [pc, #32]	; (8008ad8 <bmp_private_read_frame+0x36c>)
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f006 f8a7 	bl	800ec0c <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8008abe:	4b07      	ldr	r3, [pc, #28]	; (8008adc <bmp_private_read_frame+0x370>)
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <bmp_private_read_frame+0x374>)
 8008ac4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8008ac8:	4903      	ldr	r1, [pc, #12]	; (8008ad8 <bmp_private_read_frame+0x36c>)
 8008aca:	2001      	movs	r0, #1
 8008acc:	f006 f89e 	bl	800ec0c <sail_log>
 8008ad0:	23d5      	movs	r3, #213	; 0xd5
 8008ad2:	e067      	b.n	8008ba4 <bmp_private_read_frame+0x438>
 8008ad4:	080172e8 	.word	0x080172e8
 8008ad8:	08016fe4 	.word	0x08016fe4
 8008adc:	080170ec 	.word	0x080170ec
 8008ae0:	08016fe0 	.word	0x08016fe0
 8008ae4:	08017310 	.word	0x08017310
 8008ae8:	08017084 	.word	0x08017084
                    } else if (count_or_marker == SAIL_DELTA_MARKER) {
 8008aec:	7e3b      	ldrb	r3, [r7, #24]
 8008aee:	2202      	movs	r2, #2
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d111      	bne.n	8008b18 <bmp_private_read_frame+0x3ac>
                        SAIL_LOG_ERROR("BMP: Delta marker is not supported");
 8008af4:	4b6f      	ldr	r3, [pc, #444]	; (8008cb4 <bmp_private_read_frame+0x548>)
 8008af6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008afa:	496f      	ldr	r1, [pc, #444]	; (8008cb8 <bmp_private_read_frame+0x54c>)
 8008afc:	2001      	movs	r0, #1
 8008afe:	f006 f885 	bl	800ec0c <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8008b02:	4b6e      	ldr	r3, [pc, #440]	; (8008cbc <bmp_private_read_frame+0x550>)
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	4b6e      	ldr	r3, [pc, #440]	; (8008cc0 <bmp_private_read_frame+0x554>)
 8008b08:	f240 12e5 	movw	r2, #485	; 0x1e5
 8008b0c:	496a      	ldr	r1, [pc, #424]	; (8008cb8 <bmp_private_read_frame+0x54c>)
 8008b0e:	2001      	movs	r0, #1
 8008b10:	f006 f87c 	bl	800ec0c <sail_log>
 8008b14:	23d4      	movs	r3, #212	; 0xd4
 8008b16:	e045      	b.n	8008ba4 <bmp_private_read_frame+0x438>
                    } else {
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008b1e:	e01d      	b.n	8008b5c <bmp_private_read_frame+0x3f0>
                            uint8_t index;
                            SAIL_TRY(io->strict_read(io->stream, &index, sizeof(index)));
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	68d0      	ldr	r0, [r2, #12]
 8008b28:	f107 0117 	add.w	r1, r7, #23
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	4798      	blx	r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <bmp_private_read_frame+0x3dc>
 8008b44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008b46:	e0b0      	b.n	8008caa <bmp_private_read_frame+0x53e>

                            *scan++ = index;
 8008b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008b4e:	7dfa      	ldrb	r2, [r7, #23]
 8008b50:	701a      	strb	r2, [r3, #0]
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008b52:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008b56:	3301      	adds	r3, #1
 8008b58:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008b5c:	7e3b      	ldrb	r3, [r7, #24]
 8008b5e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3dc      	bcc.n	8008b20 <bmp_private_read_frame+0x3b4>
                        }

                        /* Odd number of pixels is accompanied with an additional byte. */
                        if ((count_or_marker % 2) != 0) {
 8008b66:	7e3b      	ldrb	r3, [r7, #24]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d012      	beq.n	8008b98 <bmp_private_read_frame+0x42c>
                            SAIL_TRY(io->seek(io->stream, 1, SEEK_CUR));
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	68d0      	ldr	r0, [r2, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4798      	blx	r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008b84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bf14      	ite	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	2300      	moveq	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <bmp_private_read_frame+0x42c>
 8008b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b96:	e005      	b.n	8008ba4 <bmp_private_read_frame+0x438>
                        }

                        pixel_index += count_or_marker;
 8008b98:	7e3b      	ldrb	r3, [r7, #24]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9e:	4413      	add	r3, r2
 8008ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba2:	e02c      	b.n	8008bfe <bmp_private_read_frame+0x492>
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008ba4:	e081      	b.n	8008caa <bmp_private_read_frame+0x53e>
                    }
                } else {
                    /* Normal RLE: count + value. */
                    uint8_t index;
                    SAIL_TRY(io->strict_read(io->stream, &index, sizeof(index)));
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	68d0      	ldr	r0, [r2, #12]
 8008bae:	f107 0116 	add.w	r1, r7, #22
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	4798      	blx	r3
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	853b      	strh	r3, [r7, #40]	; 0x28
 8008bba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bf14      	ite	ne
 8008bc0:	2301      	movne	r3, #1
 8008bc2:	2300      	moveq	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <bmp_private_read_frame+0x462>
 8008bca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008bcc:	e06d      	b.n	8008caa <bmp_private_read_frame+0x53e>

                    for (uint8_t k = 0; k < marker; k++) {
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008bd4:	e009      	b.n	8008bea <bmp_private_read_frame+0x47e>
                        *scan++ = index;
 8008bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008bdc:	7dba      	ldrb	r2, [r7, #22]
 8008bde:	701a      	strb	r2, [r3, #0]
                    for (uint8_t k = 0; k < marker; k++) {
 8008be0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008be4:	3301      	adds	r3, #1
 8008be6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008bea:	7e7b      	ldrb	r3, [r7, #25]
 8008bec:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d3f0      	bcc.n	8008bd6 <bmp_private_read_frame+0x46a>
                    }

                    pixel_index += marker;
 8008bf4:	7e7b      	ldrb	r3, [r7, #25]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfa:	4413      	add	r3, r2
 8008bfc:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Read a possible end-of-scan-line marker at the end of line. */
                if (pixel_index == image->width) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d128      	bne.n	8008c5a <bmp_private_read_frame+0x4ee>
                    SAIL_TRY(bmp_private_skip_end_of_scan_line(io));
 8008c08:	68b8      	ldr	r0, [r7, #8]
 8008c0a:	f000 fd2d 	bl	8009668 <bmp_private_skip_end_of_scan_line>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	843b      	strh	r3, [r7, #32]
 8008c12:	8c3b      	ldrh	r3, [r7, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bf14      	ite	ne
 8008c18:	2301      	movne	r3, #1
 8008c1a:	2300      	moveq	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01b      	beq.n	8008c5a <bmp_private_read_frame+0x4ee>
 8008c22:	8c3b      	ldrh	r3, [r7, #32]
 8008c24:	e041      	b.n	8008caa <bmp_private_read_frame+0x53e>
                }
            } else {
                /* Read a whole scan line. */
                SAIL_TRY(io->strict_read(io->stream, scan, bmp_state->bytes_in_row));
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	68d0      	ldr	r0, [r2, #12]
 8008c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c30:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008c34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c36:	4798      	blx	r3
 8008c38:	4603      	mov	r3, r0
 8008c3a:	83fb      	strh	r3, [r7, #30]
 8008c3c:	8bfb      	ldrh	r3, [r7, #30]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bf14      	ite	ne
 8008c42:	2301      	movne	r3, #1
 8008c44:	2300      	moveq	r3, #0
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <bmp_private_read_frame+0x4e4>
 8008c4c:	8bfb      	ldrh	r3, [r7, #30]
 8008c4e:	e02c      	b.n	8008caa <bmp_private_read_frame+0x53e>
                pixel_index += image->width;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c56:	4413      	add	r3, r2
 8008c58:	64bb      	str	r3, [r7, #72]	; 0x48
        for (unsigned pixel_index = 0; pixel_index < image->width;) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c60:	429a      	cmp	r2, r3
 8008c62:	f4ff ada9 	bcc.w	80087b8 <bmp_private_read_frame+0x4c>
            }
        }

        /* Skip pad bytes. */
        if (skip_pad_bytes) {
 8008c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d015      	beq.n	8008c9a <bmp_private_read_frame+0x52e>
            SAIL_TRY(io->seek(io->stream, bmp_state->pad_bytes, SEEK_CUR));
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	68d0      	ldr	r0, [r2, #12]
 8008c76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c78:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	2201      	movs	r2, #1
 8008c80:	4798      	blx	r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008c86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bf14      	ite	ne
 8008c8c:	2301      	movne	r3, #1
 8008c8e:	2300      	moveq	r3, #0
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <bmp_private_read_frame+0x52e>
 8008c96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c98:	e007      	b.n	8008caa <bmp_private_read_frame+0x53e>
    for (unsigned i = image->height; i > 0; i--) {
 8008c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f47f ad71 	bne.w	800878a <bmp_private_read_frame+0x1e>
        }
    }

    return SAIL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3758      	adds	r7, #88	; 0x58
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08017310 	.word	0x08017310
 8008cb8:	08016fe4 	.word	0x08016fe4
 8008cbc:	08017084 	.word	0x08017084
 8008cc0:	08016fe0 	.word	0x08016fe0

08008cc4 <bmp_private_read_finish>:

sail_status_t bmp_private_read_finish(void **state, struct sail_io *io) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]

    (void)io;

    struct bmp_state *bmp_state = (struct bmp_state *)(*state);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]

    *state = NULL;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]

    destroy_bmp_state(bmp_state);
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7fe ffa8 	bl	8007c30 <destroy_bmp_state>

    return SAIL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <bmp_private_read_ddb_file_header>:

#include "sail-common.h"

#include "helpers.h"

sail_status_t bmp_private_read_ddb_file_header(struct sail_io *io, struct SailBmpDdbFileHeader *ddb_file_header) {
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &ddb_file_header->type, sizeof(ddb_file_header->type)));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	68d0      	ldr	r0, [r2, #12]
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	4798      	blx	r3
 8008d02:	4603      	mov	r3, r0
 8008d04:	81fb      	strh	r3, [r7, #14]
 8008d06:	89fb      	ldrh	r3, [r7, #14]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bf14      	ite	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	2300      	moveq	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <bmp_private_read_ddb_file_header+0x30>
 8008d16:	89fb      	ldrh	r3, [r7, #14]
 8008d18:	e000      	b.n	8008d1c <bmp_private_read_ddb_file_header+0x32>

    return SAIL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <bmp_private_read_v1>:

sail_status_t bmp_private_read_v1(struct sail_io *io, struct SailBmpDdbBitmap *v1) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v1->type,       sizeof(v1->type)));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68d0      	ldr	r0, [r2, #12]
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	4798      	blx	r3
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	82fb      	strh	r3, [r7, #22]
 8008d40:	8afb      	ldrh	r3, [r7, #22]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	bf14      	ite	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	2300      	moveq	r3, #0
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <bmp_private_read_v1+0x30>
 8008d50:	8afb      	ldrh	r3, [r7, #22]
 8008d52:	e07b      	b.n	8008e4c <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->width,      sizeof(v1->width)));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	68d0      	ldr	r0, [r2, #12]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	1c91      	adds	r1, r2, #2
 8008d60:	2202      	movs	r2, #2
 8008d62:	4798      	blx	r3
 8008d64:	4603      	mov	r3, r0
 8008d66:	82bb      	strh	r3, [r7, #20]
 8008d68:	8abb      	ldrh	r3, [r7, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bf14      	ite	ne
 8008d6e:	2301      	movne	r3, #1
 8008d70:	2300      	moveq	r3, #0
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <bmp_private_read_v1+0x58>
 8008d78:	8abb      	ldrh	r3, [r7, #20]
 8008d7a:	e067      	b.n	8008e4c <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->height,     sizeof(v1->height)));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	68d0      	ldr	r0, [r2, #12]
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	1d11      	adds	r1, r2, #4
 8008d88:	2202      	movs	r2, #2
 8008d8a:	4798      	blx	r3
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	827b      	strh	r3, [r7, #18]
 8008d90:	8a7b      	ldrh	r3, [r7, #18]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bf14      	ite	ne
 8008d96:	2301      	movne	r3, #1
 8008d98:	2300      	moveq	r3, #0
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <bmp_private_read_v1+0x80>
 8008da0:	8a7b      	ldrh	r3, [r7, #18]
 8008da2:	e053      	b.n	8008e4c <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->byte_width, sizeof(v1->byte_width)));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	68d0      	ldr	r0, [r2, #12]
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	1d91      	adds	r1, r2, #6
 8008db0:	2202      	movs	r2, #2
 8008db2:	4798      	blx	r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	823b      	strh	r3, [r7, #16]
 8008db8:	8a3b      	ldrh	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bf14      	ite	ne
 8008dbe:	2301      	movne	r3, #1
 8008dc0:	2300      	moveq	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <bmp_private_read_v1+0xa8>
 8008dc8:	8a3b      	ldrh	r3, [r7, #16]
 8008dca:	e03f      	b.n	8008e4c <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->planes,     sizeof(v1->planes)));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68d0      	ldr	r0, [r2, #12]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	f102 0108 	add.w	r1, r2, #8
 8008dda:	2201      	movs	r2, #1
 8008ddc:	4798      	blx	r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	81fb      	strh	r3, [r7, #14]
 8008de2:	89fb      	ldrh	r3, [r7, #14]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bf14      	ite	ne
 8008de8:	2301      	movne	r3, #1
 8008dea:	2300      	moveq	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <bmp_private_read_v1+0xd2>
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	e02a      	b.n	8008e4c <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->bit_count,  sizeof(v1->bit_count)));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	68d0      	ldr	r0, [r2, #12]
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	f102 0109 	add.w	r1, r2, #9
 8008e04:	2201      	movs	r2, #1
 8008e06:	4798      	blx	r3
 8008e08:	4603      	mov	r3, r0
 8008e0a:	81bb      	strh	r3, [r7, #12]
 8008e0c:	89bb      	ldrh	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bf14      	ite	ne
 8008e12:	2301      	movne	r3, #1
 8008e14:	2300      	moveq	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <bmp_private_read_v1+0xfc>
 8008e1c:	89bb      	ldrh	r3, [r7, #12]
 8008e1e:	e015      	b.n	8008e4c <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->pixels,     sizeof(v1->pixels)));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	68d0      	ldr	r0, [r2, #12]
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	f102 010c 	add.w	r1, r2, #12
 8008e2e:	2204      	movs	r2, #4
 8008e30:	4798      	blx	r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	817b      	strh	r3, [r7, #10]
 8008e36:	897b      	ldrh	r3, [r7, #10]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bf14      	ite	ne
 8008e3c:	2301      	movne	r3, #1
 8008e3e:	2300      	moveq	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <bmp_private_read_v1+0x126>
 8008e46:	897b      	ldrh	r3, [r7, #10]
 8008e48:	e000      	b.n	8008e4c <bmp_private_read_v1+0x128>

    return SAIL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <bmp_private_read_dib_file_header>:

sail_status_t bmp_private_read_dib_file_header(struct sail_io *io, struct SailBmpDibFileHeader *fh) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &fh->type,      sizeof(fh->type)));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68d0      	ldr	r0, [r2, #12]
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	4798      	blx	r3
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	82fb      	strh	r3, [r7, #22]
 8008e70:	8afb      	ldrh	r3, [r7, #22]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <bmp_private_read_dib_file_header+0x30>
 8008e80:	8afb      	ldrh	r3, [r7, #22]
 8008e82:	e053      	b.n	8008f2c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->size,      sizeof(fh->size)));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68d0      	ldr	r0, [r2, #12]
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	1d11      	adds	r1, r2, #4
 8008e90:	2204      	movs	r2, #4
 8008e92:	4798      	blx	r3
 8008e94:	4603      	mov	r3, r0
 8008e96:	82bb      	strh	r3, [r7, #20]
 8008e98:	8abb      	ldrh	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bf14      	ite	ne
 8008e9e:	2301      	movne	r3, #1
 8008ea0:	2300      	moveq	r3, #0
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <bmp_private_read_dib_file_header+0x58>
 8008ea8:	8abb      	ldrh	r3, [r7, #20]
 8008eaa:	e03f      	b.n	8008f2c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->reserved1, sizeof(fh->reserved1)));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	68d0      	ldr	r0, [r2, #12]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	f102 0108 	add.w	r1, r2, #8
 8008eba:	2202      	movs	r2, #2
 8008ebc:	4798      	blx	r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	827b      	strh	r3, [r7, #18]
 8008ec2:	8a7b      	ldrh	r3, [r7, #18]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf14      	ite	ne
 8008ec8:	2301      	movne	r3, #1
 8008eca:	2300      	moveq	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <bmp_private_read_dib_file_header+0x82>
 8008ed2:	8a7b      	ldrh	r3, [r7, #18]
 8008ed4:	e02a      	b.n	8008f2c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->reserved2, sizeof(fh->reserved2)));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68d0      	ldr	r0, [r2, #12]
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	f102 010a 	add.w	r1, r2, #10
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	4798      	blx	r3
 8008ee8:	4603      	mov	r3, r0
 8008eea:	823b      	strh	r3, [r7, #16]
 8008eec:	8a3b      	ldrh	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bf14      	ite	ne
 8008ef2:	2301      	movne	r3, #1
 8008ef4:	2300      	moveq	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <bmp_private_read_dib_file_header+0xac>
 8008efc:	8a3b      	ldrh	r3, [r7, #16]
 8008efe:	e015      	b.n	8008f2c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->offset,    sizeof(fh->offset)));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	68d0      	ldr	r0, [r2, #12]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	f102 010c 	add.w	r1, r2, #12
 8008f0e:	2204      	movs	r2, #4
 8008f10:	4798      	blx	r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	81fb      	strh	r3, [r7, #14]
 8008f16:	89fb      	ldrh	r3, [r7, #14]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <bmp_private_read_dib_file_header+0xd6>
 8008f26:	89fb      	ldrh	r3, [r7, #14]
 8008f28:	e000      	b.n	8008f2c <bmp_private_read_dib_file_header+0xd8>

    return SAIL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <bmp_private_read_v2>:

sail_status_t bmp_private_read_v2(struct sail_io *io, struct SailBmpDibHeaderV2 *v2) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v2->size,      sizeof(v2->size)));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68d0      	ldr	r0, [r2, #12]
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	2204      	movs	r2, #4
 8008f4a:	4798      	blx	r3
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	82fb      	strh	r3, [r7, #22]
 8008f50:	8afb      	ldrh	r3, [r7, #22]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bf14      	ite	ne
 8008f56:	2301      	movne	r3, #1
 8008f58:	2300      	moveq	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <bmp_private_read_v2+0x30>
 8008f60:	8afb      	ldrh	r3, [r7, #22]
 8008f62:	e053      	b.n	800900c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->width,     sizeof(v2->width)));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68d0      	ldr	r0, [r2, #12]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	1d11      	adds	r1, r2, #4
 8008f70:	2204      	movs	r2, #4
 8008f72:	4798      	blx	r3
 8008f74:	4603      	mov	r3, r0
 8008f76:	82bb      	strh	r3, [r7, #20]
 8008f78:	8abb      	ldrh	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bf14      	ite	ne
 8008f7e:	2301      	movne	r3, #1
 8008f80:	2300      	moveq	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <bmp_private_read_v2+0x58>
 8008f88:	8abb      	ldrh	r3, [r7, #20]
 8008f8a:	e03f      	b.n	800900c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->height,    sizeof(v2->height)));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	68d0      	ldr	r0, [r2, #12]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	f102 0108 	add.w	r1, r2, #8
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	4798      	blx	r3
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	827b      	strh	r3, [r7, #18]
 8008fa2:	8a7b      	ldrh	r3, [r7, #18]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bf14      	ite	ne
 8008fa8:	2301      	movne	r3, #1
 8008faa:	2300      	moveq	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <bmp_private_read_v2+0x82>
 8008fb2:	8a7b      	ldrh	r3, [r7, #18]
 8008fb4:	e02a      	b.n	800900c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->planes,    sizeof(v2->planes)));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68d0      	ldr	r0, [r2, #12]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	f102 010c 	add.w	r1, r2, #12
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	4798      	blx	r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	823b      	strh	r3, [r7, #16]
 8008fcc:	8a3b      	ldrh	r3, [r7, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf14      	ite	ne
 8008fd2:	2301      	movne	r3, #1
 8008fd4:	2300      	moveq	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <bmp_private_read_v2+0xac>
 8008fdc:	8a3b      	ldrh	r3, [r7, #16]
 8008fde:	e015      	b.n	800900c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->bit_count, sizeof(v2->bit_count)));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	68d0      	ldr	r0, [r2, #12]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	f102 010e 	add.w	r1, r2, #14
 8008fee:	2202      	movs	r2, #2
 8008ff0:	4798      	blx	r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	81fb      	strh	r3, [r7, #14]
 8008ff6:	89fb      	ldrh	r3, [r7, #14]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bf14      	ite	ne
 8008ffc:	2301      	movne	r3, #1
 8008ffe:	2300      	moveq	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <bmp_private_read_v2+0xd6>
 8009006:	89fb      	ldrh	r3, [r7, #14]
 8009008:	e000      	b.n	800900c <bmp_private_read_v2+0xd8>

    return SAIL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <bmp_private_read_v3>:

sail_status_t bmp_private_read_v3(struct sail_io *io, struct SailBmpDibHeaderV3 *v3) {
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v3->compression,        sizeof(v3->compression)));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	68d0      	ldr	r0, [r2, #12]
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	2204      	movs	r2, #4
 800902a:	4798      	blx	r3
 800902c:	4603      	mov	r3, r0
 800902e:	82fb      	strh	r3, [r7, #22]
 8009030:	8afb      	ldrh	r3, [r7, #22]
 8009032:	2b00      	cmp	r3, #0
 8009034:	bf14      	ite	ne
 8009036:	2301      	movne	r3, #1
 8009038:	2300      	moveq	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <bmp_private_read_v3+0x30>
 8009040:	8afb      	ldrh	r3, [r7, #22]
 8009042:	e068      	b.n	8009116 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->bitmap_size,        sizeof(v3->bitmap_size)));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	68d0      	ldr	r0, [r2, #12]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	1d11      	adds	r1, r2, #4
 8009050:	2204      	movs	r2, #4
 8009052:	4798      	blx	r3
 8009054:	4603      	mov	r3, r0
 8009056:	82bb      	strh	r3, [r7, #20]
 8009058:	8abb      	ldrh	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bf14      	ite	ne
 800905e:	2301      	movne	r3, #1
 8009060:	2300      	moveq	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <bmp_private_read_v3+0x58>
 8009068:	8abb      	ldrh	r3, [r7, #20]
 800906a:	e054      	b.n	8009116 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->x_pixels_per_meter, sizeof(v3->x_pixels_per_meter)));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	68d0      	ldr	r0, [r2, #12]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	f102 0108 	add.w	r1, r2, #8
 800907a:	2204      	movs	r2, #4
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	827b      	strh	r3, [r7, #18]
 8009082:	8a7b      	ldrh	r3, [r7, #18]
 8009084:	2b00      	cmp	r3, #0
 8009086:	bf14      	ite	ne
 8009088:	2301      	movne	r3, #1
 800908a:	2300      	moveq	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <bmp_private_read_v3+0x82>
 8009092:	8a7b      	ldrh	r3, [r7, #18]
 8009094:	e03f      	b.n	8009116 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->y_pixels_per_meter, sizeof(v3->y_pixels_per_meter)));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68d0      	ldr	r0, [r2, #12]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	f102 010c 	add.w	r1, r2, #12
 80090a4:	2204      	movs	r2, #4
 80090a6:	4798      	blx	r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	823b      	strh	r3, [r7, #16]
 80090ac:	8a3b      	ldrh	r3, [r7, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bf14      	ite	ne
 80090b2:	2301      	movne	r3, #1
 80090b4:	2300      	moveq	r3, #0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <bmp_private_read_v3+0xac>
 80090bc:	8a3b      	ldrh	r3, [r7, #16]
 80090be:	e02a      	b.n	8009116 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->colors_used,        sizeof(v3->colors_used)));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	68d0      	ldr	r0, [r2, #12]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	f102 0110 	add.w	r1, r2, #16
 80090ce:	2204      	movs	r2, #4
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	81fb      	strh	r3, [r7, #14]
 80090d6:	89fb      	ldrh	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bf14      	ite	ne
 80090dc:	2301      	movne	r3, #1
 80090de:	2300      	moveq	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <bmp_private_read_v3+0xd6>
 80090e6:	89fb      	ldrh	r3, [r7, #14]
 80090e8:	e015      	b.n	8009116 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->colors_important,   sizeof(v3->colors_important)));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68d0      	ldr	r0, [r2, #12]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	f102 0114 	add.w	r1, r2, #20
 80090f8:	2204      	movs	r2, #4
 80090fa:	4798      	blx	r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	81bb      	strh	r3, [r7, #12]
 8009100:	89bb      	ldrh	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	bf14      	ite	ne
 8009106:	2301      	movne	r3, #1
 8009108:	2300      	moveq	r3, #0
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <bmp_private_read_v3+0x100>
 8009110:	89bb      	ldrh	r3, [r7, #12]
 8009112:	e000      	b.n	8009116 <bmp_private_read_v3+0x102>

    return SAIL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <bmp_private_read_v4>:

sail_status_t bmp_private_read_v4(struct sail_io *io, struct SailBmpDibHeaderV4 *v4) {
 800911e:	b580      	push	{r7, lr}
 8009120:	b08c      	sub	sp, #48	; 0x30
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v4->red_mask,         sizeof(v4->red_mask)));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	68d0      	ldr	r0, [r2, #12]
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	2204      	movs	r2, #4
 8009134:	4798      	blx	r3
 8009136:	4603      	mov	r3, r0
 8009138:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800913a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800913c:	2b00      	cmp	r3, #0
 800913e:	bf14      	ite	ne
 8009140:	2301      	movne	r3, #1
 8009142:	2300      	moveq	r3, #0
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <bmp_private_read_v4+0x30>
 800914a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800914c:	e14f      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_mask,       sizeof(v4->green_mask)));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	68d0      	ldr	r0, [r2, #12]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	1d11      	adds	r1, r2, #4
 800915a:	2204      	movs	r2, #4
 800915c:	4798      	blx	r3
 800915e:	4603      	mov	r3, r0
 8009160:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009162:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	bf14      	ite	ne
 8009168:	2301      	movne	r3, #1
 800916a:	2300      	moveq	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <bmp_private_read_v4+0x58>
 8009172:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009174:	e13b      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_mask,        sizeof(v4->blue_mask)));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	68d0      	ldr	r0, [r2, #12]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	f102 0108 	add.w	r1, r2, #8
 8009184:	2204      	movs	r2, #4
 8009186:	4798      	blx	r3
 8009188:	4603      	mov	r3, r0
 800918a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800918c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800918e:	2b00      	cmp	r3, #0
 8009190:	bf14      	ite	ne
 8009192:	2301      	movne	r3, #1
 8009194:	2300      	moveq	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <bmp_private_read_v4+0x82>
 800919c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800919e:	e126      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->alpha_mask,       sizeof(v4->alpha_mask)));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	68d0      	ldr	r0, [r2, #12]
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	f102 010c 	add.w	r1, r2, #12
 80091ae:	2204      	movs	r2, #4
 80091b0:	4798      	blx	r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80091b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bf14      	ite	ne
 80091bc:	2301      	movne	r3, #1
 80091be:	2300      	moveq	r3, #0
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <bmp_private_read_v4+0xac>
 80091c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091c8:	e111      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->color_space_type, sizeof(v4->color_space_type)));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68d0      	ldr	r0, [r2, #12]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	f102 0110 	add.w	r1, r2, #16
 80091d8:	2204      	movs	r2, #4
 80091da:	4798      	blx	r3
 80091dc:	4603      	mov	r3, r0
 80091de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80091e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bf14      	ite	ne
 80091e6:	2301      	movne	r3, #1
 80091e8:	2300      	moveq	r3, #0
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <bmp_private_read_v4+0xd6>
 80091f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091f2:	e0fc      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_x,            sizeof(v4->red_x)));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68d0      	ldr	r0, [r2, #12]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	f102 0114 	add.w	r1, r2, #20
 8009202:	2204      	movs	r2, #4
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	84bb      	strh	r3, [r7, #36]	; 0x24
 800920a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	bf14      	ite	ne
 8009210:	2301      	movne	r3, #1
 8009212:	2300      	moveq	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <bmp_private_read_v4+0x100>
 800921a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800921c:	e0e7      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_y,            sizeof(v4->red_y)));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	68d0      	ldr	r0, [r2, #12]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	f102 0118 	add.w	r1, r2, #24
 800922c:	2204      	movs	r2, #4
 800922e:	4798      	blx	r3
 8009230:	4603      	mov	r3, r0
 8009232:	847b      	strh	r3, [r7, #34]	; 0x22
 8009234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009236:	2b00      	cmp	r3, #0
 8009238:	bf14      	ite	ne
 800923a:	2301      	movne	r3, #1
 800923c:	2300      	moveq	r3, #0
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <bmp_private_read_v4+0x12a>
 8009244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009246:	e0d2      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_z,            sizeof(v4->red_z)));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	68d0      	ldr	r0, [r2, #12]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	f102 011c 	add.w	r1, r2, #28
 8009256:	2204      	movs	r2, #4
 8009258:	4798      	blx	r3
 800925a:	4603      	mov	r3, r0
 800925c:	843b      	strh	r3, [r7, #32]
 800925e:	8c3b      	ldrh	r3, [r7, #32]
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf14      	ite	ne
 8009264:	2301      	movne	r3, #1
 8009266:	2300      	moveq	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <bmp_private_read_v4+0x154>
 800926e:	8c3b      	ldrh	r3, [r7, #32]
 8009270:	e0bd      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_x,          sizeof(v4->green_x)));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	68d0      	ldr	r0, [r2, #12]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	f102 0120 	add.w	r1, r2, #32
 8009280:	2204      	movs	r2, #4
 8009282:	4798      	blx	r3
 8009284:	4603      	mov	r3, r0
 8009286:	83fb      	strh	r3, [r7, #30]
 8009288:	8bfb      	ldrh	r3, [r7, #30]
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf14      	ite	ne
 800928e:	2301      	movne	r3, #1
 8009290:	2300      	moveq	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <bmp_private_read_v4+0x17e>
 8009298:	8bfb      	ldrh	r3, [r7, #30]
 800929a:	e0a8      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_y,          sizeof(v4->green_y)));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	68d0      	ldr	r0, [r2, #12]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	f102 0124 	add.w	r1, r2, #36	; 0x24
 80092aa:	2204      	movs	r2, #4
 80092ac:	4798      	blx	r3
 80092ae:	4603      	mov	r3, r0
 80092b0:	83bb      	strh	r3, [r7, #28]
 80092b2:	8bbb      	ldrh	r3, [r7, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bf14      	ite	ne
 80092b8:	2301      	movne	r3, #1
 80092ba:	2300      	moveq	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <bmp_private_read_v4+0x1a8>
 80092c2:	8bbb      	ldrh	r3, [r7, #28]
 80092c4:	e093      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_z,          sizeof(v4->green_z)));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	68d0      	ldr	r0, [r2, #12]
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80092d4:	2204      	movs	r2, #4
 80092d6:	4798      	blx	r3
 80092d8:	4603      	mov	r3, r0
 80092da:	837b      	strh	r3, [r7, #26]
 80092dc:	8b7b      	ldrh	r3, [r7, #26]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf14      	ite	ne
 80092e2:	2301      	movne	r3, #1
 80092e4:	2300      	moveq	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <bmp_private_read_v4+0x1d2>
 80092ec:	8b7b      	ldrh	r3, [r7, #26]
 80092ee:	e07e      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_x,           sizeof(v4->blue_x)));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	68d0      	ldr	r0, [r2, #12]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80092fe:	2204      	movs	r2, #4
 8009300:	4798      	blx	r3
 8009302:	4603      	mov	r3, r0
 8009304:	833b      	strh	r3, [r7, #24]
 8009306:	8b3b      	ldrh	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	bf14      	ite	ne
 800930c:	2301      	movne	r3, #1
 800930e:	2300      	moveq	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <bmp_private_read_v4+0x1fc>
 8009316:	8b3b      	ldrh	r3, [r7, #24]
 8009318:	e069      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_y,           sizeof(v4->blue_y)));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	68d0      	ldr	r0, [r2, #12]
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8009328:	2204      	movs	r2, #4
 800932a:	4798      	blx	r3
 800932c:	4603      	mov	r3, r0
 800932e:	82fb      	strh	r3, [r7, #22]
 8009330:	8afb      	ldrh	r3, [r7, #22]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bf14      	ite	ne
 8009336:	2301      	movne	r3, #1
 8009338:	2300      	moveq	r3, #0
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <bmp_private_read_v4+0x226>
 8009340:	8afb      	ldrh	r3, [r7, #22]
 8009342:	e054      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_z,           sizeof(v4->blue_z)));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	68d0      	ldr	r0, [r2, #12]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	f102 0134 	add.w	r1, r2, #52	; 0x34
 8009352:	2204      	movs	r2, #4
 8009354:	4798      	blx	r3
 8009356:	4603      	mov	r3, r0
 8009358:	82bb      	strh	r3, [r7, #20]
 800935a:	8abb      	ldrh	r3, [r7, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	bf14      	ite	ne
 8009360:	2301      	movne	r3, #1
 8009362:	2300      	moveq	r3, #0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <bmp_private_read_v4+0x250>
 800936a:	8abb      	ldrh	r3, [r7, #20]
 800936c:	e03f      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_red,        sizeof(v4->gamma_red)));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	68d0      	ldr	r0, [r2, #12]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800937c:	2204      	movs	r2, #4
 800937e:	4798      	blx	r3
 8009380:	4603      	mov	r3, r0
 8009382:	827b      	strh	r3, [r7, #18]
 8009384:	8a7b      	ldrh	r3, [r7, #18]
 8009386:	2b00      	cmp	r3, #0
 8009388:	bf14      	ite	ne
 800938a:	2301      	movne	r3, #1
 800938c:	2300      	moveq	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <bmp_private_read_v4+0x27a>
 8009394:	8a7b      	ldrh	r3, [r7, #18]
 8009396:	e02a      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_green,      sizeof(v4->gamma_green)));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68d0      	ldr	r0, [r2, #12]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 80093a6:	2204      	movs	r2, #4
 80093a8:	4798      	blx	r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	823b      	strh	r3, [r7, #16]
 80093ae:	8a3b      	ldrh	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <bmp_private_read_v4+0x2a4>
 80093be:	8a3b      	ldrh	r3, [r7, #16]
 80093c0:	e015      	b.n	80093ee <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_blue,       sizeof(v4->gamma_blue)));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	68d0      	ldr	r0, [r2, #12]
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	f102 0140 	add.w	r1, r2, #64	; 0x40
 80093d0:	2204      	movs	r2, #4
 80093d2:	4798      	blx	r3
 80093d4:	4603      	mov	r3, r0
 80093d6:	81fb      	strh	r3, [r7, #14]
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bf14      	ite	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	2300      	moveq	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <bmp_private_read_v4+0x2ce>
 80093e8:	89fb      	ldrh	r3, [r7, #14]
 80093ea:	e000      	b.n	80093ee <bmp_private_read_v4+0x2d0>

    return SAIL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3730      	adds	r7, #48	; 0x30
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <bmp_private_read_v5>:

sail_status_t bmp_private_read_v5(struct sail_io *io, struct SailBmpDibHeaderV5 *v5) {
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v5->intent,       sizeof(v5->intent)));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68d0      	ldr	r0, [r2, #12]
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	2204      	movs	r2, #4
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	81fb      	strh	r3, [r7, #14]
 8009412:	89fb      	ldrh	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	bf14      	ite	ne
 8009418:	2301      	movne	r3, #1
 800941a:	2300      	moveq	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <bmp_private_read_v5+0x30>
 8009422:	89fb      	ldrh	r3, [r7, #14]
 8009424:	e03e      	b.n	80094a4 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->profile_data, sizeof(v5->profile_data)));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	68d0      	ldr	r0, [r2, #12]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	1d11      	adds	r1, r2, #4
 8009432:	2204      	movs	r2, #4
 8009434:	4798      	blx	r3
 8009436:	4603      	mov	r3, r0
 8009438:	81bb      	strh	r3, [r7, #12]
 800943a:	89bb      	ldrh	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	bf14      	ite	ne
 8009440:	2301      	movne	r3, #1
 8009442:	2300      	moveq	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <bmp_private_read_v5+0x58>
 800944a:	89bb      	ldrh	r3, [r7, #12]
 800944c:	e02a      	b.n	80094a4 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->profile_size, sizeof(v5->profile_size)));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	68d0      	ldr	r0, [r2, #12]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	f102 0108 	add.w	r1, r2, #8
 800945c:	2204      	movs	r2, #4
 800945e:	4798      	blx	r3
 8009460:	4603      	mov	r3, r0
 8009462:	817b      	strh	r3, [r7, #10]
 8009464:	897b      	ldrh	r3, [r7, #10]
 8009466:	2b00      	cmp	r3, #0
 8009468:	bf14      	ite	ne
 800946a:	2301      	movne	r3, #1
 800946c:	2300      	moveq	r3, #0
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <bmp_private_read_v5+0x82>
 8009474:	897b      	ldrh	r3, [r7, #10]
 8009476:	e015      	b.n	80094a4 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->reserved,     sizeof(v5->reserved)));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	68d0      	ldr	r0, [r2, #12]
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	f102 010c 	add.w	r1, r2, #12
 8009486:	2204      	movs	r2, #4
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	813b      	strh	r3, [r7, #8]
 800948e:	893b      	ldrh	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bf14      	ite	ne
 8009494:	2301      	movne	r3, #1
 8009496:	2300      	moveq	r3, #0
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <bmp_private_read_v5+0xac>
 800949e:	893b      	ldrh	r3, [r7, #8]
 80094a0:	e000      	b.n	80094a4 <bmp_private_read_v5+0xae>

    return SAIL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <bmp_private_bit_count_to_pixel_format>:

sail_status_t bmp_private_bit_count_to_pixel_format(uint16_t bit_count, enum SailPixelFormat *pixel_format) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	4603      	mov	r3, r0
 80094b4:	6039      	str	r1, [r7, #0]
 80094b6:	80fb      	strh	r3, [r7, #6]

    switch (bit_count) {
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	2b1f      	cmp	r3, #31
 80094be:	d861      	bhi.n	8009584 <bmp_private_bit_count_to_pixel_format+0xd8>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <bmp_private_bit_count_to_pixel_format+0x1c>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	08009549 	.word	0x08009549
 80094cc:	08009585 	.word	0x08009585
 80094d0:	08009585 	.word	0x08009585
 80094d4:	08009553 	.word	0x08009553
 80094d8:	08009585 	.word	0x08009585
 80094dc:	08009585 	.word	0x08009585
 80094e0:	08009585 	.word	0x08009585
 80094e4:	0800955d 	.word	0x0800955d
 80094e8:	08009585 	.word	0x08009585
 80094ec:	08009585 	.word	0x08009585
 80094f0:	08009585 	.word	0x08009585
 80094f4:	08009585 	.word	0x08009585
 80094f8:	08009585 	.word	0x08009585
 80094fc:	08009585 	.word	0x08009585
 8009500:	08009585 	.word	0x08009585
 8009504:	08009567 	.word	0x08009567
 8009508:	08009585 	.word	0x08009585
 800950c:	08009585 	.word	0x08009585
 8009510:	08009585 	.word	0x08009585
 8009514:	08009585 	.word	0x08009585
 8009518:	08009585 	.word	0x08009585
 800951c:	08009585 	.word	0x08009585
 8009520:	08009585 	.word	0x08009585
 8009524:	08009571 	.word	0x08009571
 8009528:	08009585 	.word	0x08009585
 800952c:	08009585 	.word	0x08009585
 8009530:	08009585 	.word	0x08009585
 8009534:	08009585 	.word	0x08009585
 8009538:	08009585 	.word	0x08009585
 800953c:	08009585 	.word	0x08009585
 8009540:	08009585 	.word	0x08009585
 8009544:	0800957b 	.word	0x0800957b
        case 1:  *pixel_format = SAIL_PIXEL_FORMAT_BPP1_INDEXED; return SAIL_OK;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	220d      	movs	r2, #13
 800954c:	701a      	strb	r2, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	e021      	b.n	8009596 <bmp_private_bit_count_to_pixel_format+0xea>
        case 4:  *pixel_format = SAIL_PIXEL_FORMAT_BPP4_INDEXED; return SAIL_OK;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	220f      	movs	r2, #15
 8009556:	701a      	strb	r2, [r3, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	e01c      	b.n	8009596 <bmp_private_bit_count_to_pixel_format+0xea>
        case 8:  *pixel_format = SAIL_PIXEL_FORMAT_BPP8_INDEXED; return SAIL_OK;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2210      	movs	r2, #16
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	2300      	movs	r3, #0
 8009564:	e017      	b.n	8009596 <bmp_private_bit_count_to_pixel_format+0xea>
        case 16: *pixel_format = SAIL_PIXEL_FORMAT_BPP16_BGR555; return SAIL_OK;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	221c      	movs	r2, #28
 800956a:	701a      	strb	r2, [r3, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	e012      	b.n	8009596 <bmp_private_bit_count_to_pixel_format+0xea>
        case 24: *pixel_format = SAIL_PIXEL_FORMAT_BPP24_BGR;    return SAIL_OK;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2220      	movs	r2, #32
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	2300      	movs	r3, #0
 8009578:	e00d      	b.n	8009596 <bmp_private_bit_count_to_pixel_format+0xea>
        case 32: *pixel_format = SAIL_PIXEL_FORMAT_BPP32_BGRA;   return SAIL_OK;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2230      	movs	r2, #48	; 0x30
 800957e:	701a      	strb	r2, [r3, #0]
 8009580:	2300      	movs	r3, #0
 8009582:	e008      	b.n	8009596 <bmp_private_bit_count_to_pixel_format+0xea>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_BIT_DEPTH);
 8009584:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <bmp_private_bit_count_to_pixel_format+0xf4>)
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <bmp_private_bit_count_to_pixel_format+0xf8>)
 800958a:	2282      	movs	r2, #130	; 0x82
 800958c:	4906      	ldr	r1, [pc, #24]	; (80095a8 <bmp_private_bit_count_to_pixel_format+0xfc>)
 800958e:	2001      	movs	r0, #1
 8009590:	f005 fb3c 	bl	800ec0c <sail_log>
 8009594:	23d2      	movs	r3, #210	; 0xd2
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	08017394 	.word	0x08017394
 80095a4:	08017334 	.word	0x08017334
 80095a8:	08017338 	.word	0x08017338

080095ac <bmp_private_fetch_iccp>:

sail_status_t bmp_private_fetch_iccp(struct sail_io *io, long offset_of_data, uint32_t profile_size, struct sail_iccp **iccp) {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	603b      	str	r3, [r7, #0]

    SAIL_TRY(io->seek(io->stream, offset_of_data, SEEK_SET));
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	68d0      	ldr	r0, [r2, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	68b9      	ldr	r1, [r7, #8]
 80095c6:	4798      	blx	r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	83fb      	strh	r3, [r7, #30]
 80095cc:	8bfb      	ldrh	r3, [r7, #30]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bf14      	ite	ne
 80095d2:	2301      	movne	r3, #1
 80095d4:	2300      	moveq	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <bmp_private_fetch_iccp+0x34>
 80095dc:	8bfb      	ldrh	r3, [r7, #30]
 80095de:	e03f      	b.n	8009660 <bmp_private_fetch_iccp+0xb4>

    void *profile_data;
    SAIL_TRY(sail_malloc(profile_size, &profile_data));
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f005 fc08 	bl	800edfc <sail_malloc>
 80095ec:	4603      	mov	r3, r0
 80095ee:	83bb      	strh	r3, [r7, #28]
 80095f0:	8bbb      	ldrh	r3, [r7, #28]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	bf14      	ite	ne
 80095f6:	2301      	movne	r3, #1
 80095f8:	2300      	moveq	r3, #0
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <bmp_private_fetch_iccp+0x58>
 8009600:	8bbb      	ldrh	r3, [r7, #28]
 8009602:	e02d      	b.n	8009660 <bmp_private_fetch_iccp+0xb4>

    SAIL_TRY_OR_CLEANUP(io->strict_read(io->stream, profile_data, profile_size),
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	68d0      	ldr	r0, [r2, #12]
 800960c:	6979      	ldr	r1, [r7, #20]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	4798      	blx	r3
 8009612:	4603      	mov	r3, r0
 8009614:	837b      	strh	r3, [r7, #26]
 8009616:	8b7b      	ldrh	r3, [r7, #26]
 8009618:	2b00      	cmp	r3, #0
 800961a:	bf14      	ite	ne
 800961c:	2301      	movne	r3, #1
 800961e:	2300      	moveq	r3, #0
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d005      	beq.n	8009632 <bmp_private_fetch_iccp+0x86>
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	4618      	mov	r0, r3
 800962a:	f005 fc6f 	bl	800ef0c <sail_free>
 800962e:	8b7b      	ldrh	r3, [r7, #26]
 8009630:	e016      	b.n	8009660 <bmp_private_fetch_iccp+0xb4>
                        /* cleanup */ sail_free(profile_data));

    SAIL_TRY_OR_CLEANUP(sail_alloc_iccp_move_data(profile_data, profile_size, iccp),
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	f003 ff3b 	bl	800d4b4 <sail_alloc_iccp_move_data>
 800963e:	4603      	mov	r3, r0
 8009640:	833b      	strh	r3, [r7, #24]
 8009642:	8b3b      	ldrh	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf14      	ite	ne
 8009648:	2301      	movne	r3, #1
 800964a:	2300      	moveq	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d005      	beq.n	800965e <bmp_private_fetch_iccp+0xb2>
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	4618      	mov	r0, r3
 8009656:	f005 fc59 	bl	800ef0c <sail_free>
 800965a:	8b3b      	ldrh	r3, [r7, #24]
 800965c:	e000      	b.n	8009660 <bmp_private_fetch_iccp+0xb4>
                        /* cleanup */ sail_free(profile_data));

    return SAIL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3720      	adds	r7, #32
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <bmp_private_skip_end_of_scan_line>:

sail_status_t bmp_private_skip_end_of_scan_line(struct sail_io *io) {
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]

    uint8_t marker;
    SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	68d0      	ldr	r0, [r2, #12]
 8009678:	f107 010f 	add.w	r1, r7, #15
 800967c:	2201      	movs	r2, #1
 800967e:	4798      	blx	r3
 8009680:	4603      	mov	r3, r0
 8009682:	82fb      	strh	r3, [r7, #22]
 8009684:	8afb      	ldrh	r3, [r7, #22]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bf14      	ite	ne
 800968a:	2301      	movne	r3, #1
 800968c:	2300      	moveq	r3, #0
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <bmp_private_skip_end_of_scan_line+0x30>
 8009694:	8afb      	ldrh	r3, [r7, #22]
 8009696:	e044      	b.n	8009722 <bmp_private_skip_end_of_scan_line+0xba>

    if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	2200      	movs	r2, #0
 800969c:	4293      	cmp	r3, r2
 800969e:	d12b      	bne.n	80096f8 <bmp_private_skip_end_of_scan_line+0x90>
        SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68d0      	ldr	r0, [r2, #12]
 80096a8:	f107 010f 	add.w	r1, r7, #15
 80096ac:	2201      	movs	r2, #1
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	827b      	strh	r3, [r7, #18]
 80096b4:	8a7b      	ldrh	r3, [r7, #18]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bf14      	ite	ne
 80096ba:	2301      	movne	r3, #1
 80096bc:	2300      	moveq	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <bmp_private_skip_end_of_scan_line+0x60>
 80096c4:	8a7b      	ldrh	r3, [r7, #18]
 80096c6:	e02c      	b.n	8009722 <bmp_private_skip_end_of_scan_line+0xba>

        if (marker != SAIL_END_OF_SCAN_LINE_MARKER) {
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2200      	movs	r2, #0
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d027      	beq.n	8009720 <bmp_private_skip_end_of_scan_line+0xb8>
            SAIL_TRY(io->seek(io->stream, -2, SEEK_CUR));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	68d0      	ldr	r0, [r2, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f06f 0101 	mvn.w	r1, #1
 80096de:	4798      	blx	r3
 80096e0:	4603      	mov	r3, r0
 80096e2:	823b      	strh	r3, [r7, #16]
 80096e4:	8a3b      	ldrh	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d015      	beq.n	8009720 <bmp_private_skip_end_of_scan_line+0xb8>
 80096f4:	8a3b      	ldrh	r3, [r7, #16]
 80096f6:	e014      	b.n	8009722 <bmp_private_skip_end_of_scan_line+0xba>
        }
    } else {
        SAIL_TRY(io->seek(io->stream, -1, SEEK_CUR));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	68d0      	ldr	r0, [r2, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009706:	4798      	blx	r3
 8009708:	4603      	mov	r3, r0
 800970a:	82bb      	strh	r3, [r7, #20]
 800970c:	8abb      	ldrh	r3, [r7, #20]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf14      	ite	ne
 8009712:	2301      	movne	r3, #1
 8009714:	2300      	moveq	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <bmp_private_skip_end_of_scan_line+0xb8>
 800971c:	8abb      	ldrh	r3, [r7, #20]
 800971e:	e000      	b.n	8009722 <bmp_private_skip_end_of_scan_line+0xba>
    }

    return SAIL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <bmp_private_bytes_in_row>:

sail_status_t bmp_private_bytes_in_row(unsigned width, unsigned bit_count, unsigned *bytes_in_row) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]

    switch (bit_count) {
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	3b01      	subs	r3, #1
 800973c:	2b1f      	cmp	r3, #31
 800973e:	d86a      	bhi.n	8009816 <bmp_private_bytes_in_row+0xea>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <bmp_private_bytes_in_row+0x1c>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	080097c9 	.word	0x080097c9
 800974c:	08009817 	.word	0x08009817
 8009750:	08009817 	.word	0x08009817
 8009754:	080097d7 	.word	0x080097d7
 8009758:	08009817 	.word	0x08009817
 800975c:	08009817 	.word	0x08009817
 8009760:	08009817 	.word	0x08009817
 8009764:	080097e5 	.word	0x080097e5
 8009768:	08009817 	.word	0x08009817
 800976c:	08009817 	.word	0x08009817
 8009770:	08009817 	.word	0x08009817
 8009774:	08009817 	.word	0x08009817
 8009778:	08009817 	.word	0x08009817
 800977c:	08009817 	.word	0x08009817
 8009780:	08009817 	.word	0x08009817
 8009784:	080097ef 	.word	0x080097ef
 8009788:	08009817 	.word	0x08009817
 800978c:	08009817 	.word	0x08009817
 8009790:	08009817 	.word	0x08009817
 8009794:	08009817 	.word	0x08009817
 8009798:	08009817 	.word	0x08009817
 800979c:	08009817 	.word	0x08009817
 80097a0:	08009817 	.word	0x08009817
 80097a4:	080097fb 	.word	0x080097fb
 80097a8:	08009817 	.word	0x08009817
 80097ac:	08009817 	.word	0x08009817
 80097b0:	08009817 	.word	0x08009817
 80097b4:	08009817 	.word	0x08009817
 80097b8:	08009817 	.word	0x08009817
 80097bc:	08009817 	.word	0x08009817
 80097c0:	08009817 	.word	0x08009817
 80097c4:	0800980b 	.word	0x0800980b
        case 1:  *bytes_in_row = (width + 7) / 8; return SAIL_OK;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3307      	adds	r3, #7
 80097cc:	08da      	lsrs	r2, r3, #3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	2300      	movs	r3, #0
 80097d4:	e028      	b.n	8009828 <bmp_private_bytes_in_row+0xfc>
        case 4:  *bytes_in_row = (width + 1) / 2; return SAIL_OK;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	085a      	lsrs	r2, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	2300      	movs	r3, #0
 80097e2:	e021      	b.n	8009828 <bmp_private_bytes_in_row+0xfc>
        case 8:  *bytes_in_row = width;           return SAIL_OK;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	2300      	movs	r3, #0
 80097ec:	e01c      	b.n	8009828 <bmp_private_bytes_in_row+0xfc>
        case 16: *bytes_in_row = width * 2;       return SAIL_OK;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	005a      	lsls	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	2300      	movs	r3, #0
 80097f8:	e016      	b.n	8009828 <bmp_private_bytes_in_row+0xfc>
        case 24: *bytes_in_row = width * 3;       return SAIL_OK;
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4613      	mov	r3, r2
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	441a      	add	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	2300      	movs	r3, #0
 8009808:	e00e      	b.n	8009828 <bmp_private_bytes_in_row+0xfc>
        case 32: *bytes_in_row = width * 4;       return SAIL_OK;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	009a      	lsls	r2, r3, #2
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	e008      	b.n	8009828 <bmp_private_bytes_in_row+0xfc>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <bmp_private_bytes_in_row+0x104>)
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <bmp_private_bytes_in_row+0x108>)
 800981c:	22b2      	movs	r2, #178	; 0xb2
 800981e:	4906      	ldr	r1, [pc, #24]	; (8009838 <bmp_private_bytes_in_row+0x10c>)
 8009820:	2001      	movs	r0, #1
 8009822:	f005 f9f3 	bl	800ec0c <sail_log>
 8009826:	23d4      	movs	r3, #212	; 0xd4
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	080173b8 	.word	0x080173b8
 8009834:	08017334 	.word	0x08017334
 8009838:	08017338 	.word	0x08017338

0800983c <bmp_private_pad_bytes>:

unsigned bmp_private_pad_bytes(unsigned bytes_in_row) {
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]

    const unsigned remainder = bytes_in_row % 4;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	60fb      	str	r3, [r7, #12]
    return (remainder == 0) ? 0 : (4 - remainder);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <bmp_private_pad_bytes+0x1e>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f1c3 0304 	rsb	r3, r3, #4
 8009858:	e000      	b.n	800985c <bmp_private_pad_bytes+0x20>
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <bmp_private_fill_system_palette>:

sail_status_t bmp_private_fill_system_palette(unsigned bit_count, sail_rgb24_t **palette, unsigned *palette_count) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b09c      	sub	sp, #112	; 0x70
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]

    switch (bit_count) {
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d003      	beq.n	8009882 <bmp_private_fill_system_palette+0x1a>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b04      	cmp	r3, #4
 800987e:	d032      	beq.n	80098e6 <bmp_private_fill_system_palette+0x7e>
 8009880:	e0d9      	b.n	8009a36 <bmp_private_fill_system_palette+0x1ce>
        case 1: {
            *palette_count = 2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2202      	movs	r2, #2
 8009886:	601a      	str	r2, [r3, #0]

            void *ptr;
            SAIL_TRY(sail_malloc(sizeof(sail_rgb24_t) * (*palette_count), &ptr));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	4413      	add	r3, r2
 8009892:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f005 faaf 	bl	800edfc <sail_malloc>
 800989e:	4603      	mov	r3, r0
 80098a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80098a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bf14      	ite	ne
 80098ac:	2301      	movne	r3, #1
 80098ae:	2300      	moveq	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <bmp_private_fill_system_palette+0x54>
 80098b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80098ba:	e0c5      	b.n	8009a48 <bmp_private_fill_system_palette+0x1e0>
            *palette = ptr;
 80098bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	601a      	str	r2, [r3, #0]

            (*palette)[0] = (sail_rgb24_t) { 0,   0,   0   };
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	705a      	strb	r2, [r3, #1]
 80098ce:	2200      	movs	r2, #0
 80098d0:	709a      	strb	r2, [r3, #2]
            (*palette)[1] = (sail_rgb24_t) { 255, 255, 255 };
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3303      	adds	r3, #3
 80098d8:	4a5d      	ldr	r2, [pc, #372]	; (8009a50 <bmp_private_fill_system_palette+0x1e8>)
 80098da:	8811      	ldrh	r1, [r2, #0]
 80098dc:	7892      	ldrb	r2, [r2, #2]
 80098de:	8019      	strh	r1, [r3, #0]
 80098e0:	709a      	strb	r2, [r3, #2]

            return SAIL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	e0b0      	b.n	8009a48 <bmp_private_fill_system_palette+0x1e0>
        }
        case 4: {
            *palette_count = 16;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2210      	movs	r2, #16
 80098ea:	601a      	str	r2, [r3, #0]

            void *ptr;
            SAIL_TRY(sail_malloc(sizeof(sail_rgb24_t) * (*palette_count), &ptr));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	4613      	mov	r3, r2
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	4413      	add	r3, r2
 80098f6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f005 fa7d 	bl	800edfc <sail_malloc>
 8009902:	4603      	mov	r3, r0
 8009904:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009908:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800990c:	2b00      	cmp	r3, #0
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <bmp_private_fill_system_palette+0xb8>
 800991a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800991e:	e093      	b.n	8009a48 <bmp_private_fill_system_palette+0x1e0>
            *palette = ptr;
 8009920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	601a      	str	r2, [r3, #0]

            (*palette)[0]  = (sail_rgb24_t) { 0,   0,   0   };
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	705a      	strb	r2, [r3, #1]
 8009932:	2200      	movs	r2, #0
 8009934:	709a      	strb	r2, [r3, #2]
            (*palette)[1]  = (sail_rgb24_t) { 128, 0,   0   };
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3303      	adds	r3, #3
 800993c:	2280      	movs	r2, #128	; 0x80
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	2200      	movs	r2, #0
 8009942:	705a      	strb	r2, [r3, #1]
 8009944:	2200      	movs	r2, #0
 8009946:	709a      	strb	r2, [r3, #2]
            (*palette)[2]  = (sail_rgb24_t) { 0,   128, 0   };
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3306      	adds	r3, #6
 800994e:	2200      	movs	r2, #0
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	2280      	movs	r2, #128	; 0x80
 8009954:	705a      	strb	r2, [r3, #1]
 8009956:	2200      	movs	r2, #0
 8009958:	709a      	strb	r2, [r3, #2]
            (*palette)[3]  = (sail_rgb24_t) { 128, 128, 0   };
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3309      	adds	r3, #9
 8009960:	4a3c      	ldr	r2, [pc, #240]	; (8009a54 <bmp_private_fill_system_palette+0x1ec>)
 8009962:	8811      	ldrh	r1, [r2, #0]
 8009964:	7892      	ldrb	r2, [r2, #2]
 8009966:	8019      	strh	r1, [r3, #0]
 8009968:	709a      	strb	r2, [r3, #2]
            (*palette)[4]  = (sail_rgb24_t) { 0,   0,   128 };
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	330c      	adds	r3, #12
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	2200      	movs	r2, #0
 8009976:	705a      	strb	r2, [r3, #1]
 8009978:	2280      	movs	r2, #128	; 0x80
 800997a:	709a      	strb	r2, [r3, #2]
            (*palette)[5]  = (sail_rgb24_t) { 128, 0,   128 };
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	330f      	adds	r3, #15
 8009982:	4a35      	ldr	r2, [pc, #212]	; (8009a58 <bmp_private_fill_system_palette+0x1f0>)
 8009984:	8811      	ldrh	r1, [r2, #0]
 8009986:	7892      	ldrb	r2, [r2, #2]
 8009988:	8019      	strh	r1, [r3, #0]
 800998a:	709a      	strb	r2, [r3, #2]
            (*palette)[6]  = (sail_rgb24_t) { 0,   128, 128 };
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3312      	adds	r3, #18
 8009992:	4a32      	ldr	r2, [pc, #200]	; (8009a5c <bmp_private_fill_system_palette+0x1f4>)
 8009994:	8811      	ldrh	r1, [r2, #0]
 8009996:	7892      	ldrb	r2, [r2, #2]
 8009998:	8019      	strh	r1, [r3, #0]
 800999a:	709a      	strb	r2, [r3, #2]
            (*palette)[7]  = (sail_rgb24_t) { 192, 192, 192 };
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3315      	adds	r3, #21
 80099a2:	4a2f      	ldr	r2, [pc, #188]	; (8009a60 <bmp_private_fill_system_palette+0x1f8>)
 80099a4:	8811      	ldrh	r1, [r2, #0]
 80099a6:	7892      	ldrb	r2, [r2, #2]
 80099a8:	8019      	strh	r1, [r3, #0]
 80099aa:	709a      	strb	r2, [r3, #2]
            (*palette)[8]  = (sail_rgb24_t) { 128, 128, 128 };
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3318      	adds	r3, #24
 80099b2:	4a2c      	ldr	r2, [pc, #176]	; (8009a64 <bmp_private_fill_system_palette+0x1fc>)
 80099b4:	8811      	ldrh	r1, [r2, #0]
 80099b6:	7892      	ldrb	r2, [r2, #2]
 80099b8:	8019      	strh	r1, [r3, #0]
 80099ba:	709a      	strb	r2, [r3, #2]
            (*palette)[9]  = (sail_rgb24_t) { 255, 0,   0   };
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	331b      	adds	r3, #27
 80099c2:	22ff      	movs	r2, #255	; 0xff
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	2200      	movs	r2, #0
 80099c8:	705a      	strb	r2, [r3, #1]
 80099ca:	2200      	movs	r2, #0
 80099cc:	709a      	strb	r2, [r3, #2]
            (*palette)[10] = (sail_rgb24_t) { 0,   255, 0   };
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	331e      	adds	r3, #30
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	22ff      	movs	r2, #255	; 0xff
 80099da:	705a      	strb	r2, [r3, #1]
 80099dc:	2200      	movs	r2, #0
 80099de:	709a      	strb	r2, [r3, #2]
            (*palette)[11] = (sail_rgb24_t) { 255, 255, 0   };
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3321      	adds	r3, #33	; 0x21
 80099e6:	4a20      	ldr	r2, [pc, #128]	; (8009a68 <bmp_private_fill_system_palette+0x200>)
 80099e8:	8811      	ldrh	r1, [r2, #0]
 80099ea:	7892      	ldrb	r2, [r2, #2]
 80099ec:	8019      	strh	r1, [r3, #0]
 80099ee:	709a      	strb	r2, [r3, #2]
            (*palette)[12] = (sail_rgb24_t) { 0,   0,   255 };
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3324      	adds	r3, #36	; 0x24
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	2200      	movs	r2, #0
 80099fc:	705a      	strb	r2, [r3, #1]
 80099fe:	22ff      	movs	r2, #255	; 0xff
 8009a00:	709a      	strb	r2, [r3, #2]
            (*palette)[13] = (sail_rgb24_t) { 255, 0,   255 };
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3327      	adds	r3, #39	; 0x27
 8009a08:	4a18      	ldr	r2, [pc, #96]	; (8009a6c <bmp_private_fill_system_palette+0x204>)
 8009a0a:	8811      	ldrh	r1, [r2, #0]
 8009a0c:	7892      	ldrb	r2, [r2, #2]
 8009a0e:	8019      	strh	r1, [r3, #0]
 8009a10:	709a      	strb	r2, [r3, #2]
            (*palette)[14] = (sail_rgb24_t) { 0,   255, 255 };
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	332a      	adds	r3, #42	; 0x2a
 8009a18:	4a15      	ldr	r2, [pc, #84]	; (8009a70 <bmp_private_fill_system_palette+0x208>)
 8009a1a:	8811      	ldrh	r1, [r2, #0]
 8009a1c:	7892      	ldrb	r2, [r2, #2]
 8009a1e:	8019      	strh	r1, [r3, #0]
 8009a20:	709a      	strb	r2, [r3, #2]
            (*palette)[15] = (sail_rgb24_t) { 255, 255, 255 };
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	332d      	adds	r3, #45	; 0x2d
 8009a28:	4a09      	ldr	r2, [pc, #36]	; (8009a50 <bmp_private_fill_system_palette+0x1e8>)
 8009a2a:	8811      	ldrh	r1, [r2, #0]
 8009a2c:	7892      	ldrb	r2, [r2, #2]
 8009a2e:	8019      	strh	r1, [r3, #0]
 8009a30:	709a      	strb	r2, [r3, #2]

            return SAIL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e008      	b.n	8009a48 <bmp_private_fill_system_palette+0x1e0>
        }
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_BIT_DEPTH);
 8009a36:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <bmp_private_fill_system_palette+0x20c>)
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <bmp_private_fill_system_palette+0x210>)
 8009a3c:	22e6      	movs	r2, #230	; 0xe6
 8009a3e:	490f      	ldr	r1, [pc, #60]	; (8009a7c <bmp_private_fill_system_palette+0x214>)
 8009a40:	2001      	movs	r0, #1
 8009a42:	f005 f8e3 	bl	800ec0c <sail_log>
 8009a46:	23d2      	movs	r3, #210	; 0xd2
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3768      	adds	r7, #104	; 0x68
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	080173d8 	.word	0x080173d8
 8009a54:	080173dc 	.word	0x080173dc
 8009a58:	080173e0 	.word	0x080173e0
 8009a5c:	080173e4 	.word	0x080173e4
 8009a60:	080173e8 	.word	0x080173e8
 8009a64:	080173ec 	.word	0x080173ec
 8009a68:	080173f0 	.word	0x080173f0
 8009a6c:	080173f4 	.word	0x080173f4
 8009a70:	080173f8 	.word	0x080173f8
 8009a74:	08017394 	.word	0x08017394
 8009a78:	08017334 	.word	0x08017334
 8009a7c:	08017338 	.word	0x08017338

08009a80 <alloc_codec>:

/*
 * Private functions.
 */

static sail_status_t alloc_codec(struct sail_codec **codec) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d011      	beq.n	8009abc <alloc_codec+0x3c>
 8009a98:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <alloc_codec+0x88>)
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4b1b      	ldr	r3, [pc, #108]	; (8009b0c <alloc_codec+0x8c>)
 8009a9e:	2232      	movs	r2, #50	; 0x32
 8009aa0:	491b      	ldr	r1, [pc, #108]	; (8009b10 <alloc_codec+0x90>)
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	f005 f8b2 	bl	800ec0c <sail_log>
 8009aa8:	4b1a      	ldr	r3, [pc, #104]	; (8009b14 <alloc_codec+0x94>)
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <alloc_codec+0x98>)
 8009aae:	2232      	movs	r2, #50	; 0x32
 8009ab0:	4917      	ldr	r1, [pc, #92]	; (8009b10 <alloc_codec+0x90>)
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	f005 f8aa 	bl	800ec0c <sail_log>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e021      	b.n	8009b00 <alloc_codec+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec), &ptr));
 8009abc:	f107 0308 	add.w	r3, r7, #8
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	200c      	movs	r0, #12
 8009ac4:	f005 f99a 	bl	800edfc <sail_malloc>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	81fb      	strh	r3, [r7, #14]
 8009acc:	89fb      	ldrh	r3, [r7, #14]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	bf14      	ite	ne
 8009ad2:	2301      	movne	r3, #1
 8009ad4:	2300      	moveq	r3, #0
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <alloc_codec+0x60>
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	e00f      	b.n	8009b00 <alloc_codec+0x80>
    *codec = ptr;
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	601a      	str	r2, [r3, #0]

    (*codec)->layout = 0;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	601a      	str	r2, [r3, #0]
    (*codec)->handle = NULL;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	605a      	str	r2, [r3, #4]
    (*codec)->v7     = NULL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2200      	movs	r2, #0
 8009afc:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	0801745c 	.word	0x0801745c
 8009b0c:	080173fc 	.word	0x080173fc
 8009b10:	08017414 	.word	0x08017414
 8009b14:	08017468 	.word	0x08017468
 8009b18:	08017464 	.word	0x08017464

08009b1c <load_combined_codec>:

#ifdef SAIL_COMBINE_CODECS
static sail_status_t load_combined_codec(const struct sail_codec_info *codec_info, struct sail_codec *codec) {
 8009b1c:	b5b0      	push	{r4, r5, r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af02      	add	r7, sp, #8
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
    extern struct sail_codec_layout_v7 const sail_enabled_codecs_layouts[];
#else
    SAIL_IMPORT extern const char * const sail_enabled_codecs[];
    SAIL_IMPORT extern struct sail_codec_layout_v7 const sail_enabled_codecs_layouts[];
#endif
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e01f      	b.n	8009b6c <load_combined_codec+0x50>
        if (strcmp(sail_enabled_codecs[i], codec_info->name) == 0) {
 8009b2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ba8 <load_combined_codec+0x8c>)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7f6 fcd0 	bl	80004e0 <strcmp>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10f      	bne.n	8009b66 <load_combined_codec+0x4a>
            *codec->v7 = sail_enabled_codecs_layouts[i];
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6899      	ldr	r1, [r3, #8]
 8009b4a:	4a18      	ldr	r2, [pc, #96]	; (8009bac <load_combined_codec+0x90>)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	015b      	lsls	r3, r3, #5
 8009b50:	4413      	add	r3, r2
 8009b52:	460c      	mov	r4, r1
 8009b54:	461d      	mov	r5, r3
 8009b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            return SAIL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	e01b      	b.n	8009b9e <load_combined_codec+0x82>
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	4a0e      	ldr	r2, [pc, #56]	; (8009ba8 <load_combined_codec+0x8c>)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1d9      	bne.n	8009b2c <load_combined_codec+0x10>
        }
    }

    SAIL_LOG_ERROR("Failed to find combined %s codec", codec_info->name);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <load_combined_codec+0x94>)
 8009b80:	2251      	movs	r2, #81	; 0x51
 8009b82:	490c      	ldr	r1, [pc, #48]	; (8009bb4 <load_combined_codec+0x98>)
 8009b84:	2001      	movs	r0, #1
 8009b86:	f005 f841 	bl	800ec0c <sail_log>
    SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <load_combined_codec+0x9c>)
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <load_combined_codec+0xa0>)
 8009b90:	2252      	movs	r2, #82	; 0x52
 8009b92:	4908      	ldr	r1, [pc, #32]	; (8009bb4 <load_combined_codec+0x98>)
 8009b94:	2001      	movs	r0, #1
 8009b96:	f005 f839 	bl	800ec0c <sail_log>
 8009b9a:	f240 132d 	movw	r3, #301	; 0x12d
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	08019904 	.word	0x08019904
 8009bac:	20000000 	.word	0x20000000
 8009bb0:	0801747c 	.word	0x0801747c
 8009bb4:	08017414 	.word	0x08017414
 8009bb8:	080174a0 	.word	0x080174a0
 8009bbc:	08017464 	.word	0x08017464

08009bc0 <load_codec_from_file>:
#endif

static sail_status_t load_codec_from_file(const struct sail_codec_info *codec_info, struct sail_codec *codec) {
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
    SAIL_RESOLVE(codec->v7->save_init,            handle, sail_codec_save_init_v7,            codec_info->name);
    SAIL_RESOLVE(codec->v7->save_seek_next_frame, handle, sail_codec_save_seek_next_frame_v7, codec_info->name);
    SAIL_RESOLVE(codec->v7->save_frame,           handle, sail_codec_save_frame_v7,           codec_info->name);
    SAIL_RESOLVE(codec->v7->save_finish,          handle, sail_codec_save_finish_v7,          codec_info->name);
# endif
    return SAIL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <alloc_and_load_codec>:

/*
 * Public functions.
 */

sail_status_t alloc_and_load_codec(const struct sail_codec_info *codec_info, struct sail_codec **codec) {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08c      	sub	sp, #48	; 0x30
 8009bdc:	af04      	add	r7, sp, #16
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bf0c      	ite	eq
 8009be8:	2301      	moveq	r3, #1
 8009bea:	2300      	movne	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d011      	beq.n	8009c16 <alloc_and_load_codec+0x3e>
 8009bf2:	4b67      	ldr	r3, [pc, #412]	; (8009d90 <alloc_and_load_codec+0x1b8>)
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	4b67      	ldr	r3, [pc, #412]	; (8009d94 <alloc_and_load_codec+0x1bc>)
 8009bf8:	229f      	movs	r2, #159	; 0x9f
 8009bfa:	4967      	ldr	r1, [pc, #412]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	f005 f805 	bl	800ec0c <sail_log>
 8009c02:	4b66      	ldr	r3, [pc, #408]	; (8009d9c <alloc_and_load_codec+0x1c4>)
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	4b66      	ldr	r3, [pc, #408]	; (8009da0 <alloc_and_load_codec+0x1c8>)
 8009c08:	229f      	movs	r2, #159	; 0x9f
 8009c0a:	4963      	ldr	r1, [pc, #396]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	f004 fffd 	bl	800ec0c <sail_log>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e0b8      	b.n	8009d88 <alloc_and_load_codec+0x1b0>
    SAIL_CHECK_PTR(codec);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf0c      	ite	eq
 8009c1c:	2301      	moveq	r3, #1
 8009c1e:	2300      	movne	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d011      	beq.n	8009c4a <alloc_and_load_codec+0x72>
 8009c26:	4b5f      	ldr	r3, [pc, #380]	; (8009da4 <alloc_and_load_codec+0x1cc>)
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4b5a      	ldr	r3, [pc, #360]	; (8009d94 <alloc_and_load_codec+0x1bc>)
 8009c2c:	22a0      	movs	r2, #160	; 0xa0
 8009c2e:	495a      	ldr	r1, [pc, #360]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009c30:	2001      	movs	r0, #1
 8009c32:	f004 ffeb 	bl	800ec0c <sail_log>
 8009c36:	4b59      	ldr	r3, [pc, #356]	; (8009d9c <alloc_and_load_codec+0x1c4>)
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	4b59      	ldr	r3, [pc, #356]	; (8009da0 <alloc_and_load_codec+0x1c8>)
 8009c3c:	22a0      	movs	r2, #160	; 0xa0
 8009c3e:	4956      	ldr	r1, [pc, #344]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009c40:	2001      	movs	r0, #1
 8009c42:	f004 ffe3 	bl	800ec0c <sail_log>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e09e      	b.n	8009d88 <alloc_and_load_codec+0x1b0>

    if (codec_info->layout != SAIL_CODEC_LAYOUT_V7) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	2b07      	cmp	r3, #7
 8009c50:	d018      	beq.n	8009c84 <alloc_and_load_codec+0xac>
        SAIL_LOG_ERROR("Failed to load %s codec with unsupported layout V%d (expected V%d)", codec_info->name, codec_info->layout, SAIL_CODEC_LAYOUT_V7);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	6852      	ldr	r2, [r2, #4]
 8009c5a:	2107      	movs	r1, #7
 8009c5c:	9102      	str	r1, [sp, #8]
 8009c5e:	9201      	str	r2, [sp, #4]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4b51      	ldr	r3, [pc, #324]	; (8009da8 <alloc_and_load_codec+0x1d0>)
 8009c64:	22a3      	movs	r2, #163	; 0xa3
 8009c66:	494c      	ldr	r1, [pc, #304]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009c68:	2001      	movs	r0, #1
 8009c6a:	f004 ffcf 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_CODEC_LAYOUT);
 8009c6e:	4b4f      	ldr	r3, [pc, #316]	; (8009dac <alloc_and_load_codec+0x1d4>)
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4b4b      	ldr	r3, [pc, #300]	; (8009da0 <alloc_and_load_codec+0x1c8>)
 8009c74:	22a4      	movs	r2, #164	; 0xa4
 8009c76:	4948      	ldr	r1, [pc, #288]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009c78:	2001      	movs	r0, #1
 8009c7a:	f004 ffc7 	bl	800ec0c <sail_log>
 8009c7e:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8009c82:	e081      	b.n	8009d88 <alloc_and_load_codec+0x1b0>
        SAIL_LOG_ERROR("Failed to load %s codec with empty path when SAIL_COMBINE_CODECS is disabled", codec_info->name);
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
    }
#endif

    const bool fetch_combined_codec = codec_info->path == NULL;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bf0c      	ite	eq
 8009c8c:	2301      	moveq	r3, #1
 8009c8e:	2300      	movne	r3, #0
 8009c90:	77fb      	strb	r3, [r7, #31]

    struct sail_codec *codec_local;
    SAIL_TRY(alloc_codec(&codec_local));
 8009c92:	f107 0310 	add.w	r3, r7, #16
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7ff fef2 	bl	8009a80 <alloc_codec>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	83bb      	strh	r3, [r7, #28]
 8009ca0:	8bbb      	ldrh	r3, [r7, #28]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bf14      	ite	ne
 8009ca6:	2301      	movne	r3, #1
 8009ca8:	2300      	moveq	r3, #0
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <alloc_and_load_codec+0xdc>
 8009cb0:	8bbb      	ldrh	r3, [r7, #28]
 8009cb2:	e069      	b.n	8009d88 <alloc_and_load_codec+0x1b0>
    codec_local->layout = codec_info->layout;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	6852      	ldr	r2, [r2, #4]
 8009cba:	601a      	str	r2, [r3, #0]

    if (fetch_combined_codec) {
 8009cbc:	7ffb      	ldrb	r3, [r7, #31]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00c      	beq.n	8009cdc <alloc_and_load_codec+0x104>
        SAIL_LOG_DEBUG("Fetching V%d functions for %s codec", codec_info->layout, codec_info->name);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6912      	ldr	r2, [r2, #16]
 8009cca:	9201      	str	r2, [sp, #4]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	4b38      	ldr	r3, [pc, #224]	; (8009db0 <alloc_and_load_codec+0x1d8>)
 8009cd0:	22bb      	movs	r2, #187	; 0xbb
 8009cd2:	4931      	ldr	r1, [pc, #196]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009cd4:	2005      	movs	r0, #5
 8009cd6:	f004 ff99 	bl	800ec0c <sail_log>
 8009cda:	e00b      	b.n	8009cf4 <alloc_and_load_codec+0x11c>
    } else {
        SAIL_LOG_DEBUG("Loading %s codec from %s", codec_info->name, codec_info->path);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	9201      	str	r2, [sp, #4]
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	4b32      	ldr	r3, [pc, #200]	; (8009db4 <alloc_and_load_codec+0x1dc>)
 8009cea:	22bd      	movs	r2, #189	; 0xbd
 8009cec:	492a      	ldr	r1, [pc, #168]	; (8009d98 <alloc_and_load_codec+0x1c0>)
 8009cee:	2005      	movs	r0, #5
 8009cf0:	f004 ff8c 	bl	800ec0c <sail_log>
    }

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct sail_codec_layout_v7), &ptr),
 8009cf4:	f107 030c 	add.w	r3, r7, #12
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	2020      	movs	r0, #32
 8009cfc:	f005 f87e 	bl	800edfc <sail_malloc>
 8009d00:	4603      	mov	r3, r0
 8009d02:	837b      	strh	r3, [r7, #26]
 8009d04:	8b7b      	ldrh	r3, [r7, #26]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	bf14      	ite	ne
 8009d0a:	2301      	movne	r3, #1
 8009d0c:	2300      	moveq	r3, #0
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <alloc_and_load_codec+0x148>
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f84e 	bl	8009db8 <destroy_codec>
 8009d1c:	8b7b      	ldrh	r3, [r7, #26]
 8009d1e:	e033      	b.n	8009d88 <alloc_and_load_codec+0x1b0>
                        /* cleanup */ destroy_codec(codec_local));
    codec_local->v7 = ptr;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	609a      	str	r2, [r3, #8]

#ifdef SAIL_COMBINE_CODECS
    if (fetch_combined_codec) {
 8009d26:	7ffb      	ldrb	r3, [r7, #31]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d014      	beq.n	8009d56 <alloc_and_load_codec+0x17e>
        SAIL_TRY_OR_CLEANUP(load_combined_codec(codec_info, codec_local),
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff fef3 	bl	8009b1c <load_combined_codec>
 8009d36:	4603      	mov	r3, r0
 8009d38:	82fb      	strh	r3, [r7, #22]
 8009d3a:	8afb      	ldrh	r3, [r7, #22]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d01a      	beq.n	8009d80 <alloc_and_load_codec+0x1a8>
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f833 	bl	8009db8 <destroy_codec>
 8009d52:	8afb      	ldrh	r3, [r7, #22]
 8009d54:	e018      	b.n	8009d88 <alloc_and_load_codec+0x1b0>
                            /* cleanup */ destroy_codec(codec_local));
    } else {
        SAIL_TRY_OR_CLEANUP(load_codec_from_file(codec_info, codec_local),
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff ff30 	bl	8009bc0 <load_codec_from_file>
 8009d60:	4603      	mov	r3, r0
 8009d62:	833b      	strh	r3, [r7, #24]
 8009d64:	8b3b      	ldrh	r3, [r7, #24]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bf14      	ite	ne
 8009d6a:	2301      	movne	r3, #1
 8009d6c:	2300      	moveq	r3, #0
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <alloc_and_load_codec+0x1a8>
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f81e 	bl	8009db8 <destroy_codec>
 8009d7c:	8b3b      	ldrh	r3, [r7, #24]
 8009d7e:	e003      	b.n	8009d88 <alloc_and_load_codec+0x1b0>
#else
    SAIL_TRY_OR_CLEANUP(load_codec_from_file(codec_info, codec_local),
                        /* cleanup */ destroy_codec(codec_local));
#endif

    *codec = codec_local;
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3720      	adds	r7, #32
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	080174bc 	.word	0x080174bc
 8009d94:	080173fc 	.word	0x080173fc
 8009d98:	08017414 	.word	0x08017414
 8009d9c:	08017468 	.word	0x08017468
 8009da0:	08017464 	.word	0x08017464
 8009da4:	0801745c 	.word	0x0801745c
 8009da8:	080174c8 	.word	0x080174c8
 8009dac:	0801750c 	.word	0x0801750c
 8009db0:	08017530 	.word	0x08017530
 8009db4:	08017554 	.word	0x08017554

08009db8 <destroy_codec>:

void destroy_codec(struct sail_codec *codec) {
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
    }

    sail_free(codec->v7);
    sail_free(codec);
#endif
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <alloc_codec_bundle_node>:
    SOFTWARE.
*/

#include "sail.h"

sail_status_t alloc_codec_bundle_node(struct sail_codec_bundle_node **codec_bundle_node) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]

    SAIL_TRY(sail_private_alloc_linked_list_node((struct linked_list_node **)codec_bundle_node));
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f004 fbff 	bl	800e5d8 <sail_private_alloc_linked_list_node>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	81fb      	strh	r3, [r7, #14]
 8009dde:	89fb      	ldrh	r3, [r7, #14]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf14      	ite	ne
 8009de4:	2301      	movne	r3, #1
 8009de6:	2300      	moveq	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <alloc_codec_bundle_node+0x26>
 8009dee:	89fb      	ldrh	r3, [r7, #14]
 8009df0:	e000      	b.n	8009df4 <alloc_codec_bundle_node+0x28>

    return SAIL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <destroy_codec_bundle_node>:

void destroy_codec_bundle_node(struct sail_codec_bundle_node *codec_bundle_node) {
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node((struct linked_list_node *)codec_bundle_node,
 8009e04:	4903      	ldr	r1, [pc, #12]	; (8009e14 <destroy_codec_bundle_node+0x18>)
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f004 fc30 	bl	800e66c <sail_private_destroy_linked_list_node>
                                          (linked_list_value_deallocator_t)&destroy_codec_bundle);
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08009ead 	.word	0x08009ead

08009e18 <alloc_codec_bundle>:
    SOFTWARE.
*/

#include "sail.h"

sail_status_t alloc_codec_bundle(struct sail_codec_bundle **codec_bundle) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec_bundle);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bf0c      	ite	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	2300      	movne	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d011      	beq.n	8009e54 <alloc_codec_bundle+0x3c>
 8009e30:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <alloc_codec_bundle+0x80>)
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <alloc_codec_bundle+0x84>)
 8009e36:	221e      	movs	r2, #30
 8009e38:	4919      	ldr	r1, [pc, #100]	; (8009ea0 <alloc_codec_bundle+0x88>)
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f004 fee6 	bl	800ec0c <sail_log>
 8009e40:	4b18      	ldr	r3, [pc, #96]	; (8009ea4 <alloc_codec_bundle+0x8c>)
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <alloc_codec_bundle+0x90>)
 8009e46:	221e      	movs	r2, #30
 8009e48:	4915      	ldr	r1, [pc, #84]	; (8009ea0 <alloc_codec_bundle+0x88>)
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f004 fede 	bl	800ec0c <sail_log>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e01d      	b.n	8009e90 <alloc_codec_bundle+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_bundle), &ptr));
 8009e54:	f107 0308 	add.w	r3, r7, #8
 8009e58:	4619      	mov	r1, r3
 8009e5a:	2008      	movs	r0, #8
 8009e5c:	f004 ffce 	bl	800edfc <sail_malloc>
 8009e60:	4603      	mov	r3, r0
 8009e62:	81fb      	strh	r3, [r7, #14]
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bf14      	ite	ne
 8009e6a:	2301      	movne	r3, #1
 8009e6c:	2300      	moveq	r3, #0
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <alloc_codec_bundle+0x60>
 8009e74:	89fb      	ldrh	r3, [r7, #14]
 8009e76:	e00b      	b.n	8009e90 <alloc_codec_bundle+0x78>
    *codec_bundle = ptr;
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]

    (*codec_bundle)->codec_info = NULL;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]
    (*codec_bundle)->codec      = NULL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	080175e0 	.word	0x080175e0
 8009e9c:	08017570 	.word	0x08017570
 8009ea0:	08017588 	.word	0x08017588
 8009ea4:	080175f4 	.word	0x080175f4
 8009ea8:	080175f0 	.word	0x080175f0

08009eac <destroy_codec_bundle>:

void destroy_codec_bundle(struct sail_codec_bundle *codec_bundle) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]

    if (codec_bundle == NULL) {
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00d      	beq.n	8009ed6 <destroy_codec_bundle+0x2a>
        return;
    }

    destroy_codec_info(codec_bundle->codec_info);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f001 faa8 	bl	800b414 <destroy_codec_info>
    destroy_codec(codec_bundle->codec);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7ff ff75 	bl	8009db8 <destroy_codec>

    sail_free(codec_bundle);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f005 f81c 	bl	800ef0c <sail_free>
 8009ed4:	e000      	b.n	8009ed8 <destroy_codec_bundle+0x2c>
        return;
 8009ed6:	bf00      	nop
}
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <sail_codec_info_by_magic_number_from_memory>:
    sail_destroy_io(io);

    return SAIL_OK;
}

sail_status_t sail_codec_info_by_magic_number_from_memory(const unsigned char *bmp_buffer[], size_t buffer_length, const struct sail_codec_info **codec_info) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(bmp_buffer);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bf0c      	ite	eq
 8009ef2:	2301      	moveq	r3, #1
 8009ef4:	2300      	movne	r3, #0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d011      	beq.n	8009f20 <sail_codec_info_by_magic_number_from_memory+0x40>
 8009efc:	4b2e      	ldr	r3, [pc, #184]	; (8009fb8 <sail_codec_info_by_magic_number_from_memory+0xd8>)
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	4b2e      	ldr	r3, [pc, #184]	; (8009fbc <sail_codec_info_by_magic_number_from_memory+0xdc>)
 8009f02:	225d      	movs	r2, #93	; 0x5d
 8009f04:	492e      	ldr	r1, [pc, #184]	; (8009fc0 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8009f06:	2001      	movs	r0, #1
 8009f08:	f004 fe80 	bl	800ec0c <sail_log>
 8009f0c:	4b2d      	ldr	r3, [pc, #180]	; (8009fc4 <sail_codec_info_by_magic_number_from_memory+0xe4>)
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	4b2d      	ldr	r3, [pc, #180]	; (8009fc8 <sail_codec_info_by_magic_number_from_memory+0xe8>)
 8009f12:	225d      	movs	r2, #93	; 0x5d
 8009f14:	492a      	ldr	r1, [pc, #168]	; (8009fc0 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8009f16:	2001      	movs	r0, #1
 8009f18:	f004 fe78 	bl	800ec0c <sail_log>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e046      	b.n	8009fae <sail_codec_info_by_magic_number_from_memory+0xce>
    SAIL_CHECK_PTR(codec_info);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bf0c      	ite	eq
 8009f26:	2301      	moveq	r3, #1
 8009f28:	2300      	movne	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d011      	beq.n	8009f54 <sail_codec_info_by_magic_number_from_memory+0x74>
 8009f30:	4b26      	ldr	r3, [pc, #152]	; (8009fcc <sail_codec_info_by_magic_number_from_memory+0xec>)
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	4b21      	ldr	r3, [pc, #132]	; (8009fbc <sail_codec_info_by_magic_number_from_memory+0xdc>)
 8009f36:	225e      	movs	r2, #94	; 0x5e
 8009f38:	4921      	ldr	r1, [pc, #132]	; (8009fc0 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	f004 fe66 	bl	800ec0c <sail_log>
 8009f40:	4b20      	ldr	r3, [pc, #128]	; (8009fc4 <sail_codec_info_by_magic_number_from_memory+0xe4>)
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	4b20      	ldr	r3, [pc, #128]	; (8009fc8 <sail_codec_info_by_magic_number_from_memory+0xe8>)
 8009f46:	225e      	movs	r2, #94	; 0x5e
 8009f48:	491d      	ldr	r1, [pc, #116]	; (8009fc0 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	f004 fe5e 	bl	800ec0c <sail_log>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e02c      	b.n	8009fae <sail_codec_info_by_magic_number_from_memory+0xce>

    struct sail_io *io;
    SAIL_TRY(sail_alloc_io_read_memory(bmp_buffer, buffer_length, &io));
 8009f54:	f107 0310 	add.w	r3, r7, #16
 8009f58:	461a      	mov	r2, r3
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f004 fa27 	bl	800e3b0 <sail_alloc_io_read_memory>
 8009f62:	4603      	mov	r3, r0
 8009f64:	82fb      	strh	r3, [r7, #22]
 8009f66:	8afb      	ldrh	r3, [r7, #22]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bf14      	ite	ne
 8009f6c:	2301      	movne	r3, #1
 8009f6e:	2300      	moveq	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <sail_codec_info_by_magic_number_from_memory+0x9a>
 8009f76:	8afb      	ldrh	r3, [r7, #22]
 8009f78:	e019      	b.n	8009fae <sail_codec_info_by_magic_number_from_memory+0xce>

    SAIL_TRY_OR_CLEANUP(sail_codec_info_by_magic_number_from_io(io, codec_info),
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f826 	bl	8009fd0 <sail_codec_info_by_magic_number_from_io>
 8009f84:	4603      	mov	r3, r0
 8009f86:	82bb      	strh	r3, [r7, #20]
 8009f88:	8abb      	ldrh	r3, [r7, #20]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bf14      	ite	ne
 8009f8e:	2301      	movne	r3, #1
 8009f90:	2300      	moveq	r3, #0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <sail_codec_info_by_magic_number_from_memory+0xc4>
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f003 ff58 	bl	800de50 <sail_destroy_io>
 8009fa0:	8abb      	ldrh	r3, [r7, #20]
 8009fa2:	e004      	b.n	8009fae <sail_codec_info_by_magic_number_from_memory+0xce>
                        /* cleanup */ sail_destroy_io(io));

    sail_destroy_io(io);
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f003 ff52 	bl	800de50 <sail_destroy_io>

    return SAIL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	080176f8 	.word	0x080176f8
 8009fbc:	08017608 	.word	0x08017608
 8009fc0:	08017620 	.word	0x08017620
 8009fc4:	0801767c 	.word	0x0801767c
 8009fc8:	08017678 	.word	0x08017678
 8009fcc:	08017690 	.word	0x08017690

08009fd0 <sail_codec_info_by_magic_number_from_io>:

sail_status_t sail_codec_info_by_magic_number_from_io(struct sail_io *io, const struct sail_codec_info **codec_info) {
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b0a4      	sub	sp, #144	; 0x90
 8009fd4:	af02      	add	r7, sp, #8
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bf0c      	ite	eq
 8009fe0:	2301      	moveq	r3, #1
 8009fe2:	2300      	movne	r3, #0
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d011      	beq.n	800a00e <sail_codec_info_by_magic_number_from_io+0x3e>
 8009fea:	4b9c      	ldr	r3, [pc, #624]	; (800a25c <sail_codec_info_by_magic_number_from_io+0x28c>)
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	4b9c      	ldr	r3, [pc, #624]	; (800a260 <sail_codec_info_by_magic_number_from_io+0x290>)
 8009ff0:	226d      	movs	r2, #109	; 0x6d
 8009ff2:	499c      	ldr	r1, [pc, #624]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f004 fe09 	bl	800ec0c <sail_log>
 8009ffa:	4b9b      	ldr	r3, [pc, #620]	; (800a268 <sail_codec_info_by_magic_number_from_io+0x298>)
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	4b9b      	ldr	r3, [pc, #620]	; (800a26c <sail_codec_info_by_magic_number_from_io+0x29c>)
 800a000:	226d      	movs	r2, #109	; 0x6d
 800a002:	4998      	ldr	r1, [pc, #608]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a004:	2001      	movs	r0, #1
 800a006:	f004 fe01 	bl	800ec0c <sail_log>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e160      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>
    SAIL_CHECK_PTR(codec_info);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	bf0c      	ite	eq
 800a014:	2301      	moveq	r3, #1
 800a016:	2300      	movne	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d011      	beq.n	800a042 <sail_codec_info_by_magic_number_from_io+0x72>
 800a01e:	4b94      	ldr	r3, [pc, #592]	; (800a270 <sail_codec_info_by_magic_number_from_io+0x2a0>)
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	4b8f      	ldr	r3, [pc, #572]	; (800a260 <sail_codec_info_by_magic_number_from_io+0x290>)
 800a024:	226e      	movs	r2, #110	; 0x6e
 800a026:	498f      	ldr	r1, [pc, #572]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a028:	2001      	movs	r0, #1
 800a02a:	f004 fdef 	bl	800ec0c <sail_log>
 800a02e:	4b8e      	ldr	r3, [pc, #568]	; (800a268 <sail_codec_info_by_magic_number_from_io+0x298>)
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	4b8e      	ldr	r3, [pc, #568]	; (800a26c <sail_codec_info_by_magic_number_from_io+0x29c>)
 800a034:	226e      	movs	r2, #110	; 0x6e
 800a036:	498b      	ldr	r1, [pc, #556]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a038:	2001      	movs	r0, #1
 800a03a:	f004 fde7 	bl	800ec0c <sail_log>
 800a03e:	2301      	movs	r3, #1
 800a040:	e146      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>

    struct sail_context *context;
    SAIL_TRY(fetch_global_context_guarded(&context));
 800a042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a046:	4618      	mov	r0, r3
 800a048:	f002 fff0 	bl	800d02c <fetch_global_context_guarded>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800a052:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a056:	2b00      	cmp	r3, #0
 800a058:	bf14      	ite	ne
 800a05a:	2301      	movne	r3, #1
 800a05c:	2300      	moveq	r3, #0
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <sail_codec_info_by_magic_number_from_io+0x9a>
 800a064:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a068:	e132      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>

    size_t saved_offset;
    SAIL_TRY(io->tell(io->stream, &saved_offset));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	68d2      	ldr	r2, [r2, #12]
 800a072:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a076:	4610      	mov	r0, r2
 800a078:	4798      	blx	r3
 800a07a:	4603      	mov	r3, r0
 800a07c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800a080:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a084:	2b00      	cmp	r3, #0
 800a086:	bf14      	ite	ne
 800a088:	2301      	movne	r3, #1
 800a08a:	2300      	moveq	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <sail_codec_info_by_magic_number_from_io+0xc8>
 800a092:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a096:	e11b      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>

    /* Read the image magic. */
    unsigned char buffer[SAIL_MAGIC_BUFFER_SIZE];
    SAIL_TRY(io->strict_read(io->stream, buffer, sizeof(buffer)));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	68d0      	ldr	r0, [r2, #12]
 800a0a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a0a4:	2210      	movs	r2, #16
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a0ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bf14      	ite	ne
 800a0b6:	2301      	movne	r3, #1
 800a0b8:	2300      	moveq	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <sail_codec_info_by_magic_number_from_io+0xf6>
 800a0c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a0c4:	e104      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>

    /* Seek back. */
    SAIL_TRY(io->seek(io->stream, (long)saved_offset, SEEK_SET));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68d0      	ldr	r0, [r2, #12]
 800a0ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4798      	blx	r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a0dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bf14      	ite	ne
 800a0e4:	2301      	movne	r3, #1
 800a0e6:	2300      	moveq	r3, #0
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <sail_codec_info_by_magic_number_from_io+0x124>
 800a0ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a0f2:	e0ed      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>
    /* \xFF\xDD => "FF DD" + string terminator. */
    char hex_numbers[sizeof(buffer) * 3 + 1];

    /* Debug print. */
    {
        char *hex_numbers_ptr = hex_numbers;
 800a0f4:	f107 0314 	add.w	r3, r7, #20
 800a0f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        for (size_t i = 0; i < sizeof(buffer); i++, hex_numbers_ptr += 3) {
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a102:	e015      	b.n	800a130 <sail_codec_info_by_magic_number_from_io+0x160>
#ifdef _MSC_VER
            sprintf_s(hex_numbers_ptr, 4, "%02x ", buffer[i]);
#else
            sprintf(hex_numbers_ptr, "%02x ", buffer[i]);
 800a104:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a10c:	4413      	add	r3, r2
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	4958      	ldr	r1, [pc, #352]	; (800a274 <sail_codec_info_by_magic_number_from_io+0x2a4>)
 800a114:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800a118:	f009 fcf4 	bl	8013b04 <siprintf>
        for (size_t i = 0; i < sizeof(buffer); i++, hex_numbers_ptr += 3) {
 800a11c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a120:	3301      	adds	r3, #1
 800a122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a12a:	3303      	adds	r3, #3
 800a12c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a134:	2b0f      	cmp	r3, #15
 800a136:	d9e5      	bls.n	800a104 <sail_codec_info_by_magic_number_from_io+0x134>
#endif
        }

        *(hex_numbers_ptr-1) = '\0';
 800a138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a13c:	3b01      	subs	r3, #1
 800a13e:	2200      	movs	r2, #0
 800a140:	701a      	strb	r2, [r3, #0]
        SAIL_LOG_DEBUG("Read magic number: '%s'", hex_numbers);
 800a142:	f107 0314 	add.w	r3, r7, #20
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	4b4b      	ldr	r3, [pc, #300]	; (800a278 <sail_codec_info_by_magic_number_from_io+0x2a8>)
 800a14a:	228d      	movs	r2, #141	; 0x8d
 800a14c:	4945      	ldr	r1, [pc, #276]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a14e:	2005      	movs	r0, #5
 800a150:	f004 fd5c 	bl	800ec0c <sail_log>
    }

    /* Find the codec info. */
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800a154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a15a:	e0a2      	b.n	800a2a2 <sail_codec_info_by_magic_number_from_io+0x2d2>
        const struct sail_codec_bundle *codec_bundle = codec_bundle_node->codec_bundle;
 800a15c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	663b      	str	r3, [r7, #96]	; 0x60
        const struct sail_string_node *magic_number_node = codec_bundle->codec_info->magic_number_node;
 800a162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	67bb      	str	r3, [r7, #120]	; 0x78
        /*
         * Split "ab cd" into bytes and compare individual bytes against the read magic number.
         * Additionally, we support "??" pattern matching any byte. For example, "?? ?? 66 74"
         * matches both "00 20 66 74" and "20 30 66 74".
         */
        while (magic_number_node != NULL) {
 800a16a:	e093      	b.n	800a294 <sail_codec_info_by_magic_number_from_io+0x2c4>
            size_t buffer_index = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	677b      	str	r3, [r7, #116]	; 0x74
            const char *magic = magic_number_node->string;
 800a170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	673b      	str	r3, [r7, #112]	; 0x70
            char hex_byte[3];
            int bytes_consumed = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
            bool mismatch = false;
 800a17a:	2300      	movs	r3, #0
 800a17c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            SAIL_LOG_TRACE("Check against %s magic '%s'", codec_bundle->codec_info->name, magic);
 800a180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a188:	9201      	str	r2, [sp, #4]
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	4b3b      	ldr	r3, [pc, #236]	; (800a27c <sail_codec_info_by_magic_number_from_io+0x2ac>)
 800a18e:	22a1      	movs	r2, #161	; 0xa1
 800a190:	4934      	ldr	r1, [pc, #208]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a192:	2006      	movs	r0, #6
 800a194:	f004 fd3a 	bl	800ec0c <sail_log>

#ifdef _MSC_VER
            while (buffer_index < sizeof(buffer) && sscanf_s(magic, "%2s%n", hex_byte, (unsigned)sizeof(hex_byte), &bytes_consumed) == 1) {
#else
            while (buffer_index < sizeof(buffer) && sscanf(magic, "%2s%n", hex_byte, &bytes_consumed) == 1) {
 800a198:	e03a      	b.n	800a210 <sail_codec_info_by_magic_number_from_io+0x240>
#endif
                if (hex_byte[0] == '?') {
 800a19a:	7c3b      	ldrb	r3, [r7, #16]
 800a19c:	2b3f      	cmp	r3, #63	; 0x3f
 800a19e:	d106      	bne.n	800a1ae <sail_codec_info_by_magic_number_from_io+0x1de>
                    SAIL_LOG_TRACE("Skipping ? character");
 800a1a0:	4b37      	ldr	r3, [pc, #220]	; (800a280 <sail_codec_info_by_magic_number_from_io+0x2b0>)
 800a1a2:	22a9      	movs	r2, #169	; 0xa9
 800a1a4:	492f      	ldr	r1, [pc, #188]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a1a6:	2006      	movs	r0, #6
 800a1a8:	f004 fd30 	bl	800ec0c <sail_log>
 800a1ac:	e028      	b.n	800a200 <sail_codec_info_by_magic_number_from_io+0x230>
                } else {
                    unsigned byte = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60bb      	str	r3, [r7, #8]

#ifdef _MSC_VER
                    if (sscanf_s(hex_byte, "%02x", &byte) != 1 || byte != buffer[buffer_index]) {
#else
                    if (sscanf(hex_byte, "%02x", &byte) != 1 || byte != buffer[buffer_index]) {
 800a1b2:	f107 0208 	add.w	r2, r7, #8
 800a1b6:	f107 0310 	add.w	r3, r7, #16
 800a1ba:	4932      	ldr	r1, [pc, #200]	; (800a284 <sail_codec_info_by_magic_number_from_io+0x2b4>)
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f009 fcc1 	bl	8013b44 <siscanf>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d108      	bne.n	800a1da <sail_codec_info_by_magic_number_from_io+0x20a>
 800a1c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ce:	4413      	add	r3, r2
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d012      	beq.n	800a200 <sail_codec_info_by_magic_number_from_io+0x230>
#endif
                        SAIL_LOG_TRACE("Character mismatch %02x != %02x", buffer[buffer_index], byte);
 800a1da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1e0:	4413      	add	r3, r2
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	9200      	str	r2, [sp, #0]
 800a1ec:	4b26      	ldr	r3, [pc, #152]	; (800a288 <sail_codec_info_by_magic_number_from_io+0x2b8>)
 800a1ee:	22b2      	movs	r2, #178	; 0xb2
 800a1f0:	491c      	ldr	r1, [pc, #112]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a1f2:	2006      	movs	r0, #6
 800a1f4:	f004 fd0a 	bl	800ec0c <sail_log>
                        mismatch = true;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a1fe:	e015      	b.n	800a22c <sail_codec_info_by_magic_number_from_io+0x25c>
                        break;
                    }
                }

                magic += bytes_consumed;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	461a      	mov	r2, r3
 800a204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a206:	4413      	add	r3, r2
 800a208:	673b      	str	r3, [r7, #112]	; 0x70
                buffer_index++;
 800a20a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a20c:	3301      	adds	r3, #1
 800a20e:	677b      	str	r3, [r7, #116]	; 0x74
            while (buffer_index < sizeof(buffer) && sscanf(magic, "%2s%n", hex_byte, &bytes_consumed) == 1) {
 800a210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a212:	2b0f      	cmp	r3, #15
 800a214:	d80a      	bhi.n	800a22c <sail_codec_info_by_magic_number_from_io+0x25c>
 800a216:	f107 030c 	add.w	r3, r7, #12
 800a21a:	f107 0210 	add.w	r2, r7, #16
 800a21e:	491b      	ldr	r1, [pc, #108]	; (800a28c <sail_codec_info_by_magic_number_from_io+0x2bc>)
 800a220:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a222:	f009 fc8f 	bl	8013b44 <siscanf>
 800a226:	4603      	mov	r3, r0
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d0b6      	beq.n	800a19a <sail_codec_info_by_magic_number_from_io+0x1ca>
            }

            if (mismatch) {
 800a22c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <sail_codec_info_by_magic_number_from_io+0x26c>
                magic_number_node = magic_number_node->next;
 800a234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	67bb      	str	r3, [r7, #120]	; 0x78
 800a23a:	e02b      	b.n	800a294 <sail_codec_info_by_magic_number_from_io+0x2c4>
            } else {
                *codec_info = codec_bundle->codec_info;
 800a23c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	601a      	str	r2, [r3, #0]
                SAIL_LOG_DEBUG("Found codec info: %s", (*codec_info)->name);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <sail_codec_info_by_magic_number_from_io+0x2c0>)
 800a24e:	22c0      	movs	r2, #192	; 0xc0
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a252:	2005      	movs	r0, #5
 800a254:	f004 fcda 	bl	800ec0c <sail_log>
                return SAIL_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	e039      	b.n	800a2d0 <sail_codec_info_by_magic_number_from_io+0x300>
 800a25c:	08017704 	.word	0x08017704
 800a260:	08017608 	.word	0x08017608
 800a264:	08017620 	.word	0x08017620
 800a268:	0801767c 	.word	0x0801767c
 800a26c:	08017678 	.word	0x08017678
 800a270:	08017690 	.word	0x08017690
 800a274:	08017708 	.word	0x08017708
 800a278:	08017710 	.word	0x08017710
 800a27c:	08017728 	.word	0x08017728
 800a280:	08017744 	.word	0x08017744
 800a284:	0801775c 	.word	0x0801775c
 800a288:	08017764 	.word	0x08017764
 800a28c:	08017784 	.word	0x08017784
 800a290:	0801778c 	.word	0x0801778c
        while (magic_number_node != NULL) {
 800a294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a296:	2b00      	cmp	r3, #0
 800a298:	f47f af68 	bne.w	800a16c <sail_codec_info_by_magic_number_from_io+0x19c>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800a29c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f47f af59 	bne.w	800a15c <sail_codec_info_by_magic_number_from_io+0x18c>
            }
        }
    }

    SAIL_LOG_ERROR("Magic number '%s' is not supported by any codec", hex_numbers);
 800a2aa:	f107 0314 	add.w	r3, r7, #20
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <sail_codec_info_by_magic_number_from_io+0x308>)
 800a2b2:	22c6      	movs	r2, #198	; 0xc6
 800a2b4:	4909      	ldr	r1, [pc, #36]	; (800a2dc <sail_codec_info_by_magic_number_from_io+0x30c>)
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	f004 fca8 	bl	800ec0c <sail_log>
    SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 800a2bc:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <sail_codec_info_by_magic_number_from_io+0x310>)
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <sail_codec_info_by_magic_number_from_io+0x314>)
 800a2c2:	22c7      	movs	r2, #199	; 0xc7
 800a2c4:	4905      	ldr	r1, [pc, #20]	; (800a2dc <sail_codec_info_by_magic_number_from_io+0x30c>)
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	f004 fca0 	bl	800ec0c <sail_log>
 800a2cc:	f240 132d 	movw	r3, #301	; 0x12d
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3788      	adds	r7, #136	; 0x88
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	080177a4 	.word	0x080177a4
 800a2dc:	08017620 	.word	0x08017620
 800a2e0:	080177d4 	.word	0x080177d4
 800a2e4:	08017678 	.word	0x08017678

0800a2e8 <pixel_format_from_string>:

/*
 * Private functions.
 */

static int pixel_format_from_string(const char *str) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]

    return sail_pixel_format_from_string(str);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f92d 	bl	800b550 <sail_pixel_format_from_string>
 800a2f6:	4603      	mov	r3, r0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <compression_from_string>:

static int compression_from_string(const char *str) {
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]

    return sail_compression_from_string(str);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 ff21 	bl	800c150 <sail_compression_from_string>
 800a30e:	4603      	mov	r3, r0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <parse_serialized_ints>:

static sail_status_t parse_serialized_ints(const char *value, int **target, unsigned *length, int (*converter)(const char *str)) {
 800a318:	b590      	push	{r4, r7, lr}
 800a31a:	b08d      	sub	sp, #52	; 0x34
 800a31c:	af02      	add	r7, sp, #8
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(value);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bf0c      	ite	eq
 800a32c:	2301      	moveq	r3, #1
 800a32e:	2300      	movne	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d011      	beq.n	800a35a <parse_serialized_ints+0x42>
 800a336:	4b55      	ldr	r3, [pc, #340]	; (800a48c <parse_serialized_ints+0x174>)
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	4b55      	ldr	r3, [pc, #340]	; (800a490 <parse_serialized_ints+0x178>)
 800a33c:	2231      	movs	r2, #49	; 0x31
 800a33e:	4955      	ldr	r1, [pc, #340]	; (800a494 <parse_serialized_ints+0x17c>)
 800a340:	2001      	movs	r0, #1
 800a342:	f004 fc63 	bl	800ec0c <sail_log>
 800a346:	4b54      	ldr	r3, [pc, #336]	; (800a498 <parse_serialized_ints+0x180>)
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	4b54      	ldr	r3, [pc, #336]	; (800a49c <parse_serialized_ints+0x184>)
 800a34c:	2231      	movs	r2, #49	; 0x31
 800a34e:	4951      	ldr	r1, [pc, #324]	; (800a494 <parse_serialized_ints+0x17c>)
 800a350:	2001      	movs	r0, #1
 800a352:	f004 fc5b 	bl	800ec0c <sail_log>
 800a356:	2301      	movs	r3, #1
 800a358:	e093      	b.n	800a482 <parse_serialized_ints+0x16a>
    SAIL_CHECK_PTR(target);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bf0c      	ite	eq
 800a360:	2301      	moveq	r3, #1
 800a362:	2300      	movne	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d011      	beq.n	800a38e <parse_serialized_ints+0x76>
 800a36a:	4b4d      	ldr	r3, [pc, #308]	; (800a4a0 <parse_serialized_ints+0x188>)
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	4b48      	ldr	r3, [pc, #288]	; (800a490 <parse_serialized_ints+0x178>)
 800a370:	2232      	movs	r2, #50	; 0x32
 800a372:	4948      	ldr	r1, [pc, #288]	; (800a494 <parse_serialized_ints+0x17c>)
 800a374:	2001      	movs	r0, #1
 800a376:	f004 fc49 	bl	800ec0c <sail_log>
 800a37a:	4b47      	ldr	r3, [pc, #284]	; (800a498 <parse_serialized_ints+0x180>)
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	4b47      	ldr	r3, [pc, #284]	; (800a49c <parse_serialized_ints+0x184>)
 800a380:	2232      	movs	r2, #50	; 0x32
 800a382:	4944      	ldr	r1, [pc, #272]	; (800a494 <parse_serialized_ints+0x17c>)
 800a384:	2001      	movs	r0, #1
 800a386:	f004 fc41 	bl	800ec0c <sail_log>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e079      	b.n	800a482 <parse_serialized_ints+0x16a>
    SAIL_CHECK_PTR(length);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d011      	beq.n	800a3c2 <parse_serialized_ints+0xaa>
 800a39e:	4b41      	ldr	r3, [pc, #260]	; (800a4a4 <parse_serialized_ints+0x18c>)
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	4b3b      	ldr	r3, [pc, #236]	; (800a490 <parse_serialized_ints+0x178>)
 800a3a4:	2233      	movs	r2, #51	; 0x33
 800a3a6:	493b      	ldr	r1, [pc, #236]	; (800a494 <parse_serialized_ints+0x17c>)
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f004 fc2f 	bl	800ec0c <sail_log>
 800a3ae:	4b3a      	ldr	r3, [pc, #232]	; (800a498 <parse_serialized_ints+0x180>)
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4b3a      	ldr	r3, [pc, #232]	; (800a49c <parse_serialized_ints+0x184>)
 800a3b4:	2233      	movs	r2, #51	; 0x33
 800a3b6:	4937      	ldr	r1, [pc, #220]	; (800a494 <parse_serialized_ints+0x17c>)
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	f004 fc27 	bl	800ec0c <sail_log>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e05f      	b.n	800a482 <parse_serialized_ints+0x16a>

    struct sail_string_node *string_node;
    SAIL_TRY(sail_split_into_string_node_chain(value, &string_node));
 800a3c2:	f107 0314 	add.w	r3, r7, #20
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f005 fdff 	bl	800ffcc <sail_split_into_string_node_chain>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	837b      	strh	r3, [r7, #26]
 800a3d2:	8b7b      	ldrh	r3, [r7, #26]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bf14      	ite	ne
 800a3d8:	2301      	movne	r3, #1
 800a3da:	2300      	moveq	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <parse_serialized_ints+0xce>
 800a3e2:	8b7b      	ldrh	r3, [r7, #26]
 800a3e4:	e04d      	b.n	800a482 <parse_serialized_ints+0x16a>

    *length = 0;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]

    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a3f0:	e007      	b.n	800a402 <parse_serialized_ints+0xea>
        (*length)++;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f4      	bne.n	800a3f2 <parse_serialized_ints+0xda>
    }

    if (*length > 0) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d033      	beq.n	800a478 <parse_serialized_ints+0x160>
        void *ptr;
        SAIL_TRY_OR_CLEANUP(sail_malloc((size_t)*length * sizeof(int), &ptr),
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	f107 0210 	add.w	r2, r7, #16
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f004 fced 	bl	800edfc <sail_malloc>
 800a422:	4603      	mov	r3, r0
 800a424:	833b      	strh	r3, [r7, #24]
 800a426:	8b3b      	ldrh	r3, [r7, #24]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bf14      	ite	ne
 800a42c:	2301      	movne	r3, #1
 800a42e:	2300      	moveq	r3, #0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d005      	beq.n	800a442 <parse_serialized_ints+0x12a>
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	4618      	mov	r0, r3
 800a43a:	f005 fdb9 	bl	800ffb0 <sail_destroy_string_node_chain>
 800a43e:	8b3b      	ldrh	r3, [r7, #24]
 800a440:	e01f      	b.n	800a482 <parse_serialized_ints+0x16a>
                            /* cleanup */ sail_destroy_string_node_chain(string_node));
        *target = ptr;
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	601a      	str	r2, [r3, #0]

        int i = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	623b      	str	r3, [r7, #32]

        for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	61fb      	str	r3, [r7, #28]
 800a450:	e00f      	b.n	800a472 <parse_serialized_ints+0x15a>
            *(*target + i++) = converter(node->string);
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	1c59      	adds	r1, r3, #1
 800a45e:	6239      	str	r1, [r7, #32]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	18d4      	adds	r4, r2, r3
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	4798      	blx	r3
 800a468:	4603      	mov	r3, r0
 800a46a:	6023      	str	r3, [r4, #0]
        for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	61fb      	str	r3, [r7, #28]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1ec      	bne.n	800a452 <parse_serialized_ints+0x13a>
        }
    }

    sail_destroy_string_node_chain(string_node);
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f005 fd98 	bl	800ffb0 <sail_destroy_string_node_chain>

    return SAIL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	372c      	adds	r7, #44	; 0x2c
 800a486:	46bd      	mov	sp, r7
 800a488:	bd90      	pop	{r4, r7, pc}
 800a48a:	bf00      	nop
 800a48c:	080179a0 	.word	0x080179a0
 800a490:	08017930 	.word	0x08017930
 800a494:	08017948 	.word	0x08017948
 800a498:	080179ac 	.word	0x080179ac
 800a49c:	080179a8 	.word	0x080179a8
 800a4a0:	080179c0 	.word	0x080179c0
 800a4a4:	080179c8 	.word	0x080179c8

0800a4a8 <codec_feature_from_string>:

static int codec_feature_from_string(const char *str) {
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]

    return sail_codec_feature_from_string(str);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f002 f943 	bl	800c73c <sail_codec_feature_from_string>
 800a4b6:	4603      	mov	r3, r0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <parse_flags>:

static sail_status_t parse_flags(const char *value, int *features, int (*converter)(const char *str)) {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b08a      	sub	sp, #40	; 0x28
 800a4c4:	af02      	add	r7, sp, #8
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(value);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bf0c      	ite	eq
 800a4d2:	2301      	moveq	r3, #1
 800a4d4:	2300      	movne	r3, #0
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d011      	beq.n	800a500 <parse_flags+0x40>
 800a4dc:	4b2e      	ldr	r3, [pc, #184]	; (800a598 <parse_flags+0xd8>)
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	4b2e      	ldr	r3, [pc, #184]	; (800a59c <parse_flags+0xdc>)
 800a4e2:	2257      	movs	r2, #87	; 0x57
 800a4e4:	492e      	ldr	r1, [pc, #184]	; (800a5a0 <parse_flags+0xe0>)
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	f004 fb90 	bl	800ec0c <sail_log>
 800a4ec:	4b2d      	ldr	r3, [pc, #180]	; (800a5a4 <parse_flags+0xe4>)
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	4b2d      	ldr	r3, [pc, #180]	; (800a5a8 <parse_flags+0xe8>)
 800a4f2:	2257      	movs	r2, #87	; 0x57
 800a4f4:	492a      	ldr	r1, [pc, #168]	; (800a5a0 <parse_flags+0xe0>)
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	f004 fb88 	bl	800ec0c <sail_log>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e047      	b.n	800a590 <parse_flags+0xd0>
    SAIL_CHECK_PTR(features);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bf0c      	ite	eq
 800a506:	2301      	moveq	r3, #1
 800a508:	2300      	movne	r3, #0
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d011      	beq.n	800a534 <parse_flags+0x74>
 800a510:	4b26      	ldr	r3, [pc, #152]	; (800a5ac <parse_flags+0xec>)
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4b21      	ldr	r3, [pc, #132]	; (800a59c <parse_flags+0xdc>)
 800a516:	2258      	movs	r2, #88	; 0x58
 800a518:	4921      	ldr	r1, [pc, #132]	; (800a5a0 <parse_flags+0xe0>)
 800a51a:	2001      	movs	r0, #1
 800a51c:	f004 fb76 	bl	800ec0c <sail_log>
 800a520:	4b20      	ldr	r3, [pc, #128]	; (800a5a4 <parse_flags+0xe4>)
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4b20      	ldr	r3, [pc, #128]	; (800a5a8 <parse_flags+0xe8>)
 800a526:	2258      	movs	r2, #88	; 0x58
 800a528:	491d      	ldr	r1, [pc, #116]	; (800a5a0 <parse_flags+0xe0>)
 800a52a:	2001      	movs	r0, #1
 800a52c:	f004 fb6e 	bl	800ec0c <sail_log>
 800a530:	2301      	movs	r3, #1
 800a532:	e02d      	b.n	800a590 <parse_flags+0xd0>

    struct sail_string_node *string_node;
    SAIL_TRY(sail_split_into_string_node_chain(value, &string_node));
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	4619      	mov	r1, r3
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f005 fd46 	bl	800ffcc <sail_split_into_string_node_chain>
 800a540:	4603      	mov	r3, r0
 800a542:	837b      	strh	r3, [r7, #26]
 800a544:	8b7b      	ldrh	r3, [r7, #26]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bf14      	ite	ne
 800a54a:	2301      	movne	r3, #1
 800a54c:	2300      	moveq	r3, #0
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <parse_flags+0x98>
 800a554:	8b7b      	ldrh	r3, [r7, #26]
 800a556:	e01b      	b.n	800a590 <parse_flags+0xd0>

    *features = 0;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]

    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	61fb      	str	r3, [r7, #28]
 800a562:	e00d      	b.n	800a580 <parse_flags+0xc0>
        *features |= converter(node->string);
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4610      	mov	r0, r2
 800a56c:	4798      	blx	r3
 800a56e:	4602      	mov	r2, r0
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	431a      	orrs	r2, r3
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	601a      	str	r2, [r3, #0]
    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	61fb      	str	r3, [r7, #28]
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1ee      	bne.n	800a564 <parse_flags+0xa4>
    }

    sail_destroy_string_node_chain(string_node);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	4618      	mov	r0, r3
 800a58a:	f005 fd11 	bl	800ffb0 <sail_destroy_string_node_chain>

    return SAIL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	080179a0 	.word	0x080179a0
 800a59c:	08017930 	.word	0x08017930
 800a5a0:	08017948 	.word	0x08017948
 800a5a4:	080179ac 	.word	0x080179ac
 800a5a8:	080179a8 	.word	0x080179a8
 800a5ac:	080179d0 	.word	0x080179d0

0800a5b0 <codec_priority_from_string>:

struct init_data {
    struct sail_codec_info *codec_info;
};

static sail_status_t codec_priority_from_string(const char *str, enum SailCodecPriority *result) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f005 fe99 	bl	80102f8 <sail_string_hash>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	82fb      	strh	r3, [r7, #22]
 800a5ca:	8afb      	ldrh	r3, [r7, #22]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bf14      	ite	ne
 800a5d0:	2301      	movne	r3, #1
 800a5d2:	2300      	moveq	r3, #0
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <codec_priority_from_string+0x30>
 800a5da:	f44f 7399 	mov.w	r3, #306	; 0x132
 800a5de:	e050      	b.n	800a682 <codec_priority_from_string+0xd2>
                        /* cleanup */ return SAIL_ERROR_UNSUPPORTED_CODEC_PRIORITY);

    switch (hash) {
 800a5e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5e4:	4829      	ldr	r0, [pc, #164]	; (800a68c <codec_priority_from_string+0xdc>)
 800a5e6:	f24d 01a9 	movw	r1, #53417	; 0xd0a9
 800a5ea:	428b      	cmp	r3, r1
 800a5ec:	bf08      	it	eq
 800a5ee:	4282      	cmpeq	r2, r0
 800a5f0:	d02c      	beq.n	800a64c <codec_priority_from_string+0x9c>
 800a5f2:	4927      	ldr	r1, [pc, #156]	; (800a690 <codec_priority_from_string+0xe0>)
 800a5f4:	428a      	cmp	r2, r1
 800a5f6:	f24d 01a9 	movw	r1, #53417	; 0xd0a9
 800a5fa:	eb73 0101 	sbcs.w	r1, r3, r1
 800a5fe:	d23e      	bcs.n	800a67e <codec_priority_from_string+0xce>
 800a600:	4824      	ldr	r0, [pc, #144]	; (800a694 <codec_priority_from_string+0xe4>)
 800a602:	f240 6152 	movw	r1, #1618	; 0x652
 800a606:	428b      	cmp	r3, r1
 800a608:	bf08      	it	eq
 800a60a:	4282      	cmpeq	r2, r0
 800a60c:	d028      	beq.n	800a660 <codec_priority_from_string+0xb0>
 800a60e:	4922      	ldr	r1, [pc, #136]	; (800a698 <codec_priority_from_string+0xe8>)
 800a610:	428a      	cmp	r2, r1
 800a612:	f240 6152 	movw	r1, #1618	; 0x652
 800a616:	eb73 0101 	sbcs.w	r1, r3, r1
 800a61a:	d230      	bcs.n	800a67e <codec_priority_from_string+0xce>
 800a61c:	481f      	ldr	r0, [pc, #124]	; (800a69c <codec_priority_from_string+0xec>)
 800a61e:	f240 6152 	movw	r1, #1618	; 0x652
 800a622:	428b      	cmp	r3, r1
 800a624:	bf08      	it	eq
 800a626:	4282      	cmpeq	r2, r0
 800a628:	d024      	beq.n	800a674 <codec_priority_from_string+0xc4>
 800a62a:	491d      	ldr	r1, [pc, #116]	; (800a6a0 <codec_priority_from_string+0xf0>)
 800a62c:	428a      	cmp	r2, r1
 800a62e:	f240 6152 	movw	r1, #1618	; 0x652
 800a632:	eb73 0101 	sbcs.w	r1, r3, r1
 800a636:	d222      	bcs.n	800a67e <codec_priority_from_string+0xce>
 800a638:	491a      	ldr	r1, [pc, #104]	; (800a6a4 <codec_priority_from_string+0xf4>)
 800a63a:	4411      	add	r1, r2
 800a63c:	4319      	orrs	r1, r3
 800a63e:	d014      	beq.n	800a66a <codec_priority_from_string+0xba>
 800a640:	4919      	ldr	r1, [pc, #100]	; (800a6a8 <codec_priority_from_string+0xf8>)
 800a642:	2b01      	cmp	r3, #1
 800a644:	bf08      	it	eq
 800a646:	428a      	cmpeq	r2, r1
 800a648:	d005      	beq.n	800a656 <codec_priority_from_string+0xa6>
 800a64a:	e018      	b.n	800a67e <codec_priority_from_string+0xce>
        case UINT64_C(229425771102513): *result = SAIL_CODEC_PRIORITY_HIGHEST; return SAIL_OK;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	e015      	b.n	800a682 <codec_priority_from_string+0xd2>
        case UINT64_C(6384110277):      *result = SAIL_CODEC_PRIORITY_HIGH;    return SAIL_OK;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2201      	movs	r2, #1
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	2300      	movs	r3, #0
 800a65e:	e010      	b.n	800a682 <codec_priority_from_string+0xd2>
        case UINT64_C(6952486921094):   *result = SAIL_CODEC_PRIORITY_MEDIUM;  return SAIL_OK;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2202      	movs	r2, #2
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	2300      	movs	r3, #0
 800a668:	e00b      	b.n	800a682 <codec_priority_from_string+0xd2>
        case UINT64_C(193462455):       *result = SAIL_CODEC_PRIORITY_LOW;     return SAIL_OK;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2203      	movs	r2, #3
 800a66e:	701a      	strb	r2, [r3, #0]
 800a670:	2300      	movs	r3, #0
 800a672:	e006      	b.n	800a682 <codec_priority_from_string+0xd2>
        case UINT64_C(6952460323299):   *result = SAIL_CODEC_PRIORITY_LOWEST;  return SAIL_OK;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2204      	movs	r2, #4
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	e001      	b.n	800a682 <codec_priority_from_string+0xd2>

        default: return SAIL_ERROR_UNSUPPORTED_CODEC_PRIORITY;
 800a67e:	f44f 7399 	mov.w	r3, #306	; 0x132
    }
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	5996c131 	.word	0x5996c131
 800a690:	5996c132 	.word	0x5996c132
 800a694:	c0836386 	.word	0xc0836386
 800a698:	c0836387 	.word	0xc0836387
 800a69c:	beed89e3 	.word	0xbeed89e3
 800a6a0:	beed89e4 	.word	0xbeed89e4
 800a6a4:	f477ff49 	.word	0xf477ff49
 800a6a8:	7c85cac5 	.word	0x7c85cac5

0800a6ac <inih_handler_sail_error>:

static sail_status_t inih_handler_sail_error(void *data, const char *section, const char *name, const char *value) {
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b095      	sub	sp, #84	; 0x54
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]

    /* Silently ignore empty values. */
    if (strlen(value) == 0) {
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <inih_handler_sail_error+0x1a>
        return SAIL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e35b      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
    }

    struct init_data *init_data = (struct init_data *)data;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	63bb      	str	r3, [r7, #56]	; 0x38
    struct sail_codec_info *codec_info = init_data->codec_info;
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	637b      	str	r3, [r7, #52]	; 0x34

    if (strcmp(section, "codec") == 0) {
 800a6d0:	4998      	ldr	r1, [pc, #608]	; (800a934 <inih_handler_sail_error+0x288>)
 800a6d2:	68b8      	ldr	r0, [r7, #8]
 800a6d4:	f7f5 ff04 	bl	80004e0 <strcmp>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f040 8148 	bne.w	800a970 <inih_handler_sail_error+0x2c4>
        if (strcmp(name, "layout") == 0) {
 800a6e0:	4995      	ldr	r1, [pc, #596]	; (800a938 <inih_handler_sail_error+0x28c>)
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7f5 fefc 	bl	80004e0 <strcmp>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <inih_handler_sail_error+0x50>
            codec_info->layout = atoi(value);
 800a6ee:	6838      	ldr	r0, [r7, #0]
 800a6f0:	f008 f8ed 	bl	80128ce <atoi>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	605a      	str	r2, [r3, #4]
 800a6fa:	e33f      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "version") == 0) {
 800a6fc:	498f      	ldr	r1, [pc, #572]	; (800a93c <inih_handler_sail_error+0x290>)
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7f5 feee 	bl	80004e0 <strcmp>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d112      	bne.n	800a730 <inih_handler_sail_error+0x84>
            SAIL_TRY(sail_strdup(value, &codec_info->version));
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	330c      	adds	r3, #12
 800a70e:	4619      	mov	r1, r3
 800a710:	6838      	ldr	r0, [r7, #0]
 800a712:	f005 fd3f 	bl	8010194 <sail_strdup>
 800a716:	4603      	mov	r3, r0
 800a718:	827b      	strh	r3, [r7, #18]
 800a71a:	8a7b      	ldrh	r3, [r7, #18]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bf14      	ite	ne
 800a720:	2301      	movne	r3, #1
 800a722:	2300      	moveq	r3, #0
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 8328 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800a72c:	8a7b      	ldrh	r3, [r7, #18]
 800a72e:	e326      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "priority") == 0) {
 800a730:	4983      	ldr	r1, [pc, #524]	; (800a940 <inih_handler_sail_error+0x294>)
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f5 fed4 	bl	80004e0 <strcmp>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d11a      	bne.n	800a774 <inih_handler_sail_error+0xc8>
            SAIL_TRY_OR_CLEANUP(codec_priority_from_string(value, &codec_info->priority),
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a740:	3308      	adds	r3, #8
 800a742:	4619      	mov	r1, r3
 800a744:	6838      	ldr	r0, [r7, #0]
 800a746:	f7ff ff33 	bl	800a5b0 <codec_priority_from_string>
 800a74a:	4603      	mov	r3, r0
 800a74c:	82bb      	strh	r3, [r7, #20]
 800a74e:	8abb      	ldrh	r3, [r7, #20]
 800a750:	2b00      	cmp	r3, #0
 800a752:	bf14      	ite	ne
 800a754:	2301      	movne	r3, #1
 800a756:	2300      	moveq	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 830e 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	4b77      	ldr	r3, [pc, #476]	; (800a944 <inih_handler_sail_error+0x298>)
 800a766:	228e      	movs	r2, #142	; 0x8e
 800a768:	4977      	ldr	r1, [pc, #476]	; (800a948 <inih_handler_sail_error+0x29c>)
 800a76a:	2001      	movs	r0, #1
 800a76c:	f004 fa4e 	bl	800ec0c <sail_log>
 800a770:	8abb      	ldrh	r3, [r7, #20]
 800a772:	e304      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec priority: '%s'", value));
        } else if (strcmp(name, "name") == 0) {
 800a774:	4975      	ldr	r1, [pc, #468]	; (800a94c <inih_handler_sail_error+0x2a0>)
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7f5 feb2 	bl	80004e0 <strcmp>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d112      	bne.n	800a7a8 <inih_handler_sail_error+0xfc>
            SAIL_TRY(sail_strdup(value, &codec_info->name));
 800a782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a784:	3310      	adds	r3, #16
 800a786:	4619      	mov	r1, r3
 800a788:	6838      	ldr	r0, [r7, #0]
 800a78a:	f005 fd03 	bl	8010194 <sail_strdup>
 800a78e:	4603      	mov	r3, r0
 800a790:	82fb      	strh	r3, [r7, #22]
 800a792:	8afb      	ldrh	r3, [r7, #22]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bf14      	ite	ne
 800a798:	2301      	movne	r3, #1
 800a79a:	2300      	moveq	r3, #0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 82ec 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800a7a4:	8afb      	ldrh	r3, [r7, #22]
 800a7a6:	e2ea      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "description") == 0) {
 800a7a8:	4969      	ldr	r1, [pc, #420]	; (800a950 <inih_handler_sail_error+0x2a4>)
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f5 fe98 	bl	80004e0 <strcmp>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d112      	bne.n	800a7dc <inih_handler_sail_error+0x130>
            SAIL_TRY(sail_strdup(value, &codec_info->description));
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b8:	3314      	adds	r3, #20
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6838      	ldr	r0, [r7, #0]
 800a7be:	f005 fce9 	bl	8010194 <sail_strdup>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	833b      	strh	r3, [r7, #24]
 800a7c6:	8b3b      	ldrh	r3, [r7, #24]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bf14      	ite	ne
 800a7cc:	2301      	movne	r3, #1
 800a7ce:	2300      	moveq	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 82d2 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800a7d8:	8b3b      	ldrh	r3, [r7, #24]
 800a7da:	e2d0      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "magic-numbers") == 0) {
 800a7dc:	495d      	ldr	r1, [pc, #372]	; (800a954 <inih_handler_sail_error+0x2a8>)
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7f5 fe7e 	bl	80004e0 <strcmp>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d13e      	bne.n	800a868 <inih_handler_sail_error+0x1bc>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->magic_number_node));
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ec:	3318      	adds	r3, #24
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6838      	ldr	r0, [r7, #0]
 800a7f2:	f005 fbeb 	bl	800ffcc <sail_split_into_string_node_chain>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	837b      	strh	r3, [r7, #26]
 800a7fa:	8b7b      	ldrh	r3, [r7, #26]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bf14      	ite	ne
 800a800:	2301      	movne	r3, #1
 800a802:	2300      	moveq	r3, #0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <inih_handler_sail_error+0x162>
 800a80a:	8b7b      	ldrh	r3, [r7, #26]
 800a80c:	e2b7      	b.n	800ad7e <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->magic_number_node; node != NULL; node = node->next) {
 800a80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	647b      	str	r3, [r7, #68]	; 0x44
 800a814:	e024      	b.n	800a860 <inih_handler_sail_error+0x1b4>
                if (strlen(node->string) > SAIL_MAGIC_BUFFER_SIZE * 3 - 1) {
 800a816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7f5 fe6a 	bl	80004f4 <strlen>
 800a820:	4603      	mov	r3, r0
 800a822:	2b2f      	cmp	r3, #47	; 0x2f
 800a824:	d914      	bls.n	800a850 <inih_handler_sail_error+0x1a4>
                    SAIL_LOG_ERROR("Magic number '%s' is too long. Magic numbers for the '%s' codec are disabled",
 800a826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82c:	6912      	ldr	r2, [r2, #16]
 800a82e:	9201      	str	r2, [sp, #4]
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	4b49      	ldr	r3, [pc, #292]	; (800a958 <inih_handler_sail_error+0x2ac>)
 800a834:	2298      	movs	r2, #152	; 0x98
 800a836:	4944      	ldr	r1, [pc, #272]	; (800a948 <inih_handler_sail_error+0x29c>)
 800a838:	2001      	movs	r0, #1
 800a83a:	f004 f9e7 	bl	800ec0c <sail_log>
                                    node->string, codec_info->name);
                    sail_destroy_string_node_chain(codec_info->magic_number_node);
 800a83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	4618      	mov	r0, r3
 800a844:	f005 fbb4 	bl	800ffb0 <sail_destroy_string_node_chain>
                    codec_info->magic_number_node = NULL;
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	2200      	movs	r2, #0
 800a84c:	619a      	str	r2, [r3, #24]
                    break;
 800a84e:	e295      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
                }

                sail_to_lower(node->string);
 800a850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	f005 fd1b 	bl	8010290 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->magic_number_node; node != NULL; node = node->next) {
 800a85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	647b      	str	r3, [r7, #68]	; 0x44
 800a860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d7      	bne.n	800a816 <inih_handler_sail_error+0x16a>
 800a866:	e289      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
            }
        } else if (strcmp(name, "extensions") == 0) {
 800a868:	493c      	ldr	r1, [pc, #240]	; (800a95c <inih_handler_sail_error+0x2b0>)
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7f5 fe38 	bl	80004e0 <strcmp>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d121      	bne.n	800a8ba <inih_handler_sail_error+0x20e>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->extension_node));
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a878:	331c      	adds	r3, #28
 800a87a:	4619      	mov	r1, r3
 800a87c:	6838      	ldr	r0, [r7, #0]
 800a87e:	f005 fba5 	bl	800ffcc <sail_split_into_string_node_chain>
 800a882:	4603      	mov	r3, r0
 800a884:	83bb      	strh	r3, [r7, #28]
 800a886:	8bbb      	ldrh	r3, [r7, #28]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bf14      	ite	ne
 800a88c:	2301      	movne	r3, #1
 800a88e:	2300      	moveq	r3, #0
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <inih_handler_sail_error+0x1ee>
 800a896:	8bbb      	ldrh	r3, [r7, #28]
 800a898:	e271      	b.n	800ad7e <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->extension_node; node != NULL; node = node->next) {
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a0:	e007      	b.n	800a8b2 <inih_handler_sail_error+0x206>
                sail_to_lower(node->string);
 800a8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f005 fcf2 	bl	8010290 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->extension_node; node != NULL; node = node->next) {
 800a8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f4      	bne.n	800a8a2 <inih_handler_sail_error+0x1f6>
 800a8b8:	e260      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
            }
        } else if (strcmp(name, "mime-types") == 0) {
 800a8ba:	4929      	ldr	r1, [pc, #164]	; (800a960 <inih_handler_sail_error+0x2b4>)
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7f5 fe0f 	bl	80004e0 <strcmp>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d121      	bne.n	800a90c <inih_handler_sail_error+0x260>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->mime_type_node));
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	3320      	adds	r3, #32
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6838      	ldr	r0, [r7, #0]
 800a8d0:	f005 fb7c 	bl	800ffcc <sail_split_into_string_node_chain>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	83fb      	strh	r3, [r7, #30]
 800a8d8:	8bfb      	ldrh	r3, [r7, #30]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	bf14      	ite	ne
 800a8de:	2301      	movne	r3, #1
 800a8e0:	2300      	moveq	r3, #0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <inih_handler_sail_error+0x240>
 800a8e8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ea:	e248      	b.n	800ad7e <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->mime_type_node; node != NULL; node = node->next) {
 800a8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8f2:	e007      	b.n	800a904 <inih_handler_sail_error+0x258>
                sail_to_lower(node->string);
 800a8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f005 fcc9 	bl	8010290 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->mime_type_node; node != NULL; node = node->next) {
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1f4      	bne.n	800a8f4 <inih_handler_sail_error+0x248>
 800a90a:	e237      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
            }
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	4b13      	ldr	r3, [pc, #76]	; (800a964 <inih_handler_sail_error+0x2b8>)
 800a916:	22ae      	movs	r2, #174	; 0xae
 800a918:	490b      	ldr	r1, [pc, #44]	; (800a948 <inih_handler_sail_error+0x29c>)
 800a91a:	2001      	movs	r0, #1
 800a91c:	f004 f976 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800a920:	4b11      	ldr	r3, [pc, #68]	; (800a968 <inih_handler_sail_error+0x2bc>)
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	4b11      	ldr	r3, [pc, #68]	; (800a96c <inih_handler_sail_error+0x2c0>)
 800a926:	22af      	movs	r2, #175	; 0xaf
 800a928:	4907      	ldr	r1, [pc, #28]	; (800a948 <inih_handler_sail_error+0x29c>)
 800a92a:	2001      	movs	r0, #1
 800a92c:	f004 f96e 	bl	800ec0c <sail_log>
 800a930:	2308      	movs	r3, #8
 800a932:	e224      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
 800a934:	080179dc 	.word	0x080179dc
 800a938:	080179e4 	.word	0x080179e4
 800a93c:	080179ec 	.word	0x080179ec
 800a940:	080179f4 	.word	0x080179f4
 800a944:	08017a00 	.word	0x08017a00
 800a948:	08017948 	.word	0x08017948
 800a94c:	08017a28 	.word	0x08017a28
 800a950:	08017a30 	.word	0x08017a30
 800a954:	08017a3c 	.word	0x08017a3c
 800a958:	08017a4c 	.word	0x08017a4c
 800a95c:	08017a9c 	.word	0x08017a9c
 800a960:	08017aa8 	.word	0x08017aa8
 800a964:	08017ab4 	.word	0x08017ab4
 800a968:	08017adc 	.word	0x08017adc
 800a96c:	080179a8 	.word	0x080179a8
        }
    } else if (strcmp(section, "load-features") == 0) {
 800a970:	499f      	ldr	r1, [pc, #636]	; (800abf0 <inih_handler_sail_error+0x544>)
 800a972:	68b8      	ldr	r0, [r7, #8]
 800a974:	f7f5 fdb4 	bl	80004e0 <strcmp>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d159      	bne.n	800aa32 <inih_handler_sail_error+0x386>
        if (strcmp(name, "features") == 0) {
 800a97e:	499d      	ldr	r1, [pc, #628]	; (800abf4 <inih_handler_sail_error+0x548>)
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7f5 fdad 	bl	80004e0 <strcmp>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d11b      	bne.n	800a9c4 <inih_handler_sail_error+0x318>
            SAIL_TRY_OR_CLEANUP(parse_flags(value, &codec_info->load_features->features, codec_feature_from_string),
 800a98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	4a99      	ldr	r2, [pc, #612]	; (800abf8 <inih_handler_sail_error+0x54c>)
 800a992:	4619      	mov	r1, r3
 800a994:	6838      	ldr	r0, [r7, #0]
 800a996:	f7ff fd93 	bl	800a4c0 <parse_flags>
 800a99a:	4603      	mov	r3, r0
 800a99c:	843b      	strh	r3, [r7, #32]
 800a99e:	8c3b      	ldrh	r3, [r7, #32]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	bf14      	ite	ne
 800a9a4:	2301      	movne	r3, #1
 800a9a6:	2300      	moveq	r3, #0
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 81e6 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	4b91      	ldr	r3, [pc, #580]	; (800abfc <inih_handler_sail_error+0x550>)
 800a9b6:	22b4      	movs	r2, #180	; 0xb4
 800a9b8:	4991      	ldr	r1, [pc, #580]	; (800ac00 <inih_handler_sail_error+0x554>)
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	f004 f926 	bl	800ec0c <sail_log>
 800a9c0:	8c3b      	ldrh	r3, [r7, #32]
 800a9c2:	e1dc      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec features: '%s'", value));
        } else if (strcmp(name, "tuning") == 0) {
 800a9c4:	498f      	ldr	r1, [pc, #572]	; (800ac04 <inih_handler_sail_error+0x558>)
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7f5 fd8a 	bl	80004e0 <strcmp>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d11b      	bne.n	800aa0a <inih_handler_sail_error+0x35e>
            SAIL_TRY_OR_CLEANUP(sail_split_into_string_node_chain(value, &codec_info->load_features->tuning),
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6838      	ldr	r0, [r7, #0]
 800a9dc:	f005 faf6 	bl	800ffcc <sail_split_into_string_node_chain>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a9e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bf14      	ite	ne
 800a9ea:	2301      	movne	r3, #1
 800a9ec:	2300      	moveq	r3, #0
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 81c3 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	4b83      	ldr	r3, [pc, #524]	; (800ac08 <inih_handler_sail_error+0x55c>)
 800a9fc:	22b7      	movs	r2, #183	; 0xb7
 800a9fe:	4980      	ldr	r1, [pc, #512]	; (800ac00 <inih_handler_sail_error+0x554>)
 800aa00:	2001      	movs	r0, #1
 800aa02:	f004 f903 	bl	800ec0c <sail_log>
 800aa06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa08:	e1b9      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                    /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec tuning: '%s'", value));
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	4b7e      	ldr	r3, [pc, #504]	; (800ac0c <inih_handler_sail_error+0x560>)
 800aa14:	22b9      	movs	r2, #185	; 0xb9
 800aa16:	497a      	ldr	r1, [pc, #488]	; (800ac00 <inih_handler_sail_error+0x554>)
 800aa18:	2001      	movs	r0, #1
 800aa1a:	f004 f8f7 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800aa1e:	4b7c      	ldr	r3, [pc, #496]	; (800ac10 <inih_handler_sail_error+0x564>)
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	4b7c      	ldr	r3, [pc, #496]	; (800ac14 <inih_handler_sail_error+0x568>)
 800aa24:	22ba      	movs	r2, #186	; 0xba
 800aa26:	4976      	ldr	r1, [pc, #472]	; (800ac00 <inih_handler_sail_error+0x554>)
 800aa28:	2001      	movs	r0, #1
 800aa2a:	f004 f8ef 	bl	800ec0c <sail_log>
 800aa2e:	2308      	movs	r3, #8
 800aa30:	e1a5      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
        }
    } else if (strcmp(section, "save-features") == 0) {
 800aa32:	4979      	ldr	r1, [pc, #484]	; (800ac18 <inih_handler_sail_error+0x56c>)
 800aa34:	68b8      	ldr	r0, [r7, #8]
 800aa36:	f7f5 fd53 	bl	80004e0 <strcmp>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 818b 	bne.w	800ad58 <inih_handler_sail_error+0x6ac>
        if (strcmp(name, "features") == 0) {
 800aa42:	496c      	ldr	r1, [pc, #432]	; (800abf4 <inih_handler_sail_error+0x548>)
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7f5 fd4b 	bl	80004e0 <strcmp>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11c      	bne.n	800aa8a <inih_handler_sail_error+0x3de>
            SAIL_TRY_OR_CLEANUP(parse_flags(value, &codec_info->save_features->features, codec_feature_from_string),
 800aa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	3308      	adds	r3, #8
 800aa56:	4a68      	ldr	r2, [pc, #416]	; (800abf8 <inih_handler_sail_error+0x54c>)
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6838      	ldr	r0, [r7, #0]
 800aa5c:	f7ff fd30 	bl	800a4c0 <parse_flags>
 800aa60:	4603      	mov	r3, r0
 800aa62:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aa64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bf14      	ite	ne
 800aa6a:	2301      	movne	r3, #1
 800aa6c:	2300      	moveq	r3, #0
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8183 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	4b60      	ldr	r3, [pc, #384]	; (800abfc <inih_handler_sail_error+0x550>)
 800aa7c:	22bf      	movs	r2, #191	; 0xbf
 800aa7e:	4960      	ldr	r1, [pc, #384]	; (800ac00 <inih_handler_sail_error+0x554>)
 800aa80:	2001      	movs	r0, #1
 800aa82:	f004 f8c3 	bl	800ec0c <sail_log>
 800aa86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa88:	e179      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec features: '%s'", value));
        } else if (strcmp(name, "pixel-formats") == 0) {
 800aa8a:	4964      	ldr	r1, [pc, #400]	; (800ac1c <inih_handler_sail_error+0x570>)
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7f5 fd27 	bl	80004e0 <strcmp>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d11e      	bne.n	800aad6 <inih_handler_sail_error+0x42a>
            SAIL_TRY_OR_CLEANUP(parse_serialized_ints(value,
 800aa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	4b5e      	ldr	r3, [pc, #376]	; (800ac20 <inih_handler_sail_error+0x574>)
 800aaa6:	6838      	ldr	r0, [r7, #0]
 800aaa8:	f7ff fc36 	bl	800a318 <parse_serialized_ints>
 800aaac:	4603      	mov	r3, r0
 800aaae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bf14      	ite	ne
 800aab6:	2301      	movne	r3, #1
 800aab8:	2300      	moveq	r3, #0
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 815d 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	4b57      	ldr	r3, [pc, #348]	; (800ac24 <inih_handler_sail_error+0x578>)
 800aac8:	22c5      	movs	r2, #197	; 0xc5
 800aaca:	494d      	ldr	r1, [pc, #308]	; (800ac00 <inih_handler_sail_error+0x554>)
 800aacc:	2001      	movs	r0, #1
 800aace:	f004 f89d 	bl	800ec0c <sail_log>
 800aad2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aad4:	e153      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                                        (int **)&codec_info->save_features->pixel_formats,
                                                        &codec_info->save_features->pixel_formats_length,
                                                        pixel_format_from_string),
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse output pixel formats: '%s'", value));
        } else if (strcmp(name, "compressions") == 0) {
 800aad6:	4954      	ldr	r1, [pc, #336]	; (800ac28 <inih_handler_sail_error+0x57c>)
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7f5 fd01 	bl	80004e0 <strcmp>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d120      	bne.n	800ab26 <inih_handler_sail_error+0x47a>
            SAIL_TRY_OR_CLEANUP(parse_serialized_ints(value,
 800aae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae8:	f103 010c 	add.w	r1, r3, #12
 800aaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf0:	f103 0210 	add.w	r2, r3, #16
 800aaf4:	4b4d      	ldr	r3, [pc, #308]	; (800ac2c <inih_handler_sail_error+0x580>)
 800aaf6:	6838      	ldr	r0, [r7, #0]
 800aaf8:	f7ff fc0e 	bl	800a318 <parse_serialized_ints>
 800aafc:	4603      	mov	r3, r0
 800aafe:	853b      	strh	r3, [r7, #40]	; 0x28
 800ab00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	2300      	moveq	r3, #0
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8135 	beq.w	800ad7c <inih_handler_sail_error+0x6d0>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	4b46      	ldr	r3, [pc, #280]	; (800ac30 <inih_handler_sail_error+0x584>)
 800ab18:	22cb      	movs	r2, #203	; 0xcb
 800ab1a:	4939      	ldr	r1, [pc, #228]	; (800ac00 <inih_handler_sail_error+0x554>)
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	f004 f875 	bl	800ec0c <sail_log>
 800ab22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab24:	e12b      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                                        (int **)&codec_info->save_features->compressions,
                                                        &codec_info->save_features->compressions_length,
                                                        compression_from_string),
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse compressions: '%s'", value));
        } else if (strcmp(name, "default-compression") == 0) {
 800ab26:	4943      	ldr	r1, [pc, #268]	; (800ac34 <inih_handler_sail_error+0x588>)
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7f5 fcd9 	bl	80004e0 <strcmp>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d107      	bne.n	800ab44 <inih_handler_sail_error+0x498>
            codec_info->save_features->default_compression = sail_compression_from_string(value);
 800ab34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab36:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ab38:	6838      	ldr	r0, [r7, #0]
 800ab3a:	f001 fb09 	bl	800c150 <sail_compression_from_string>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	7523      	strb	r3, [r4, #20]
 800ab42:	e11b      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-min") == 0) {
 800ab44:	493c      	ldr	r1, [pc, #240]	; (800ac38 <inih_handler_sail_error+0x58c>)
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7f5 fcca 	bl	80004e0 <strcmp>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d123      	bne.n	800ab9a <inih_handler_sail_error+0x4ee>
            if (codec_info->save_features->compression_level == NULL) {
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d111      	bne.n	800ab80 <inih_handler_sail_error+0x4d4>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	3318      	adds	r3, #24
 800ab62:	4618      	mov	r0, r3
 800ab64:	f001 fe80 	bl	800c868 <sail_alloc_compression_level>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ab6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <inih_handler_sail_error+0x4d4>
 800ab7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab7e:	e0fe      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->min_level = atof(value);
 800ab80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab84:	699c      	ldr	r4, [r3, #24]
 800ab86:	6838      	ldr	r0, [r7, #0]
 800ab88:	f007 fe9e 	bl	80128c8 <atof>
 800ab8c:	eeb0 7a40 	vmov.f32	s14, s0
 800ab90:	eef0 7a60 	vmov.f32	s15, s1
 800ab94:	ed84 7b00 	vstr	d7, [r4]
 800ab98:	e0f0      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-max") == 0) {
 800ab9a:	4928      	ldr	r1, [pc, #160]	; (800ac3c <inih_handler_sail_error+0x590>)
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7f5 fc9f 	bl	80004e0 <strcmp>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d14b      	bne.n	800ac40 <inih_handler_sail_error+0x594>
            if (codec_info->save_features->compression_level == NULL) {
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d111      	bne.n	800abd6 <inih_handler_sail_error+0x52a>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800abb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb6:	3318      	adds	r3, #24
 800abb8:	4618      	mov	r0, r3
 800abba:	f001 fe55 	bl	800c868 <sail_alloc_compression_level>
 800abbe:	4603      	mov	r3, r0
 800abc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800abc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <inih_handler_sail_error+0x52a>
 800abd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800abd4:	e0d3      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->max_level = atof(value);
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abda:	699c      	ldr	r4, [r3, #24]
 800abdc:	6838      	ldr	r0, [r7, #0]
 800abde:	f007 fe73 	bl	80128c8 <atof>
 800abe2:	eeb0 7a40 	vmov.f32	s14, s0
 800abe6:	eef0 7a60 	vmov.f32	s15, s1
 800abea:	ed84 7b02 	vstr	d7, [r4, #8]
 800abee:	e0c5      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
 800abf0:	08017af4 	.word	0x08017af4
 800abf4:	080179d0 	.word	0x080179d0
 800abf8:	0800a4a9 	.word	0x0800a4a9
 800abfc:	08017b04 	.word	0x08017b04
 800ac00:	08017948 	.word	0x08017948
 800ac04:	08017b2c 	.word	0x08017b2c
 800ac08:	08017b34 	.word	0x08017b34
 800ac0c:	08017ab4 	.word	0x08017ab4
 800ac10:	08017adc 	.word	0x08017adc
 800ac14:	080179a8 	.word	0x080179a8
 800ac18:	08017b58 	.word	0x08017b58
 800ac1c:	08017b68 	.word	0x08017b68
 800ac20:	0800a2e9 	.word	0x0800a2e9
 800ac24:	08017b78 	.word	0x08017b78
 800ac28:	08017ba4 	.word	0x08017ba4
 800ac2c:	0800a301 	.word	0x0800a301
 800ac30:	08017bb4 	.word	0x08017bb4
 800ac34:	08017bd8 	.word	0x08017bd8
 800ac38:	08017bec 	.word	0x08017bec
 800ac3c:	08017c04 	.word	0x08017c04
        } else if (strcmp(name, "compression-level-default") == 0) {
 800ac40:	4951      	ldr	r1, [pc, #324]	; (800ad88 <inih_handler_sail_error+0x6dc>)
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7f5 fc4c 	bl	80004e0 <strcmp>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d123      	bne.n	800ac96 <inih_handler_sail_error+0x5ea>
            if (codec_info->save_features->compression_level == NULL) {
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d111      	bne.n	800ac7c <inih_handler_sail_error+0x5d0>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800ac58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	3318      	adds	r3, #24
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f001 fe02 	bl	800c868 <sail_alloc_compression_level>
 800ac64:	4603      	mov	r3, r0
 800ac66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ac68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bf14      	ite	ne
 800ac6e:	2301      	movne	r3, #1
 800ac70:	2300      	moveq	r3, #0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <inih_handler_sail_error+0x5d0>
 800ac78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac7a:	e080      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->default_level = atof(value);
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	699c      	ldr	r4, [r3, #24]
 800ac82:	6838      	ldr	r0, [r7, #0]
 800ac84:	f007 fe20 	bl	80128c8 <atof>
 800ac88:	eeb0 7a40 	vmov.f32	s14, s0
 800ac8c:	eef0 7a60 	vmov.f32	s15, s1
 800ac90:	ed84 7b04 	vstr	d7, [r4, #16]
 800ac94:	e072      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-step") == 0) {
 800ac96:	493d      	ldr	r1, [pc, #244]	; (800ad8c <inih_handler_sail_error+0x6e0>)
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7f5 fc21 	bl	80004e0 <strcmp>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d123      	bne.n	800acec <inih_handler_sail_error+0x640>
            if (codec_info->save_features->compression_level == NULL) {
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d111      	bne.n	800acd2 <inih_handler_sail_error+0x626>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800acae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	3318      	adds	r3, #24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f001 fdd7 	bl	800c868 <sail_alloc_compression_level>
 800acba:	4603      	mov	r3, r0
 800acbc:	863b      	strh	r3, [r7, #48]	; 0x30
 800acbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf14      	ite	ne
 800acc4:	2301      	movne	r3, #1
 800acc6:	2300      	moveq	r3, #0
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <inih_handler_sail_error+0x626>
 800acce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800acd0:	e055      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->step = atof(value);
 800acd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd6:	699c      	ldr	r4, [r3, #24]
 800acd8:	6838      	ldr	r0, [r7, #0]
 800acda:	f007 fdf5 	bl	80128c8 <atof>
 800acde:	eeb0 7a40 	vmov.f32	s14, s0
 800ace2:	eef0 7a60 	vmov.f32	s15, s1
 800ace6:	ed84 7b06 	vstr	d7, [r4, #24]
 800acea:	e047      	b.n	800ad7c <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "tuning") == 0) {
 800acec:	4928      	ldr	r1, [pc, #160]	; (800ad90 <inih_handler_sail_error+0x6e4>)
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7f5 fbf6 	bl	80004e0 <strcmp>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d11a      	bne.n	800ad30 <inih_handler_sail_error+0x684>
            SAIL_TRY_OR_CLEANUP(sail_split_into_string_node_chain(value, &codec_info->save_features->tuning),
 800acfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	331c      	adds	r3, #28
 800ad00:	4619      	mov	r1, r3
 800ad02:	6838      	ldr	r0, [r7, #0]
 800ad04:	f005 f962 	bl	800ffcc <sail_split_into_string_node_chain>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	867b      	strh	r3, [r7, #50]	; 0x32
 800ad0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	bf14      	ite	ne
 800ad12:	2301      	movne	r3, #1
 800ad14:	2300      	moveq	r3, #0
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d02f      	beq.n	800ad7c <inih_handler_sail_error+0x6d0>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <inih_handler_sail_error+0x6e8>)
 800ad22:	22e8      	movs	r2, #232	; 0xe8
 800ad24:	491c      	ldr	r1, [pc, #112]	; (800ad98 <inih_handler_sail_error+0x6ec>)
 800ad26:	2001      	movs	r0, #1
 800ad28:	f003 ff70 	bl	800ec0c <sail_log>
 800ad2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ad2e:	e026      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
                                    /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec tuning: '%s'", value));
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	4b18      	ldr	r3, [pc, #96]	; (800ad9c <inih_handler_sail_error+0x6f0>)
 800ad3a:	22ea      	movs	r2, #234	; 0xea
 800ad3c:	4916      	ldr	r1, [pc, #88]	; (800ad98 <inih_handler_sail_error+0x6ec>)
 800ad3e:	2001      	movs	r0, #1
 800ad40:	f003 ff64 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800ad44:	4b16      	ldr	r3, [pc, #88]	; (800ada0 <inih_handler_sail_error+0x6f4>)
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	4b16      	ldr	r3, [pc, #88]	; (800ada4 <inih_handler_sail_error+0x6f8>)
 800ad4a:	22eb      	movs	r2, #235	; 0xeb
 800ad4c:	4912      	ldr	r1, [pc, #72]	; (800ad98 <inih_handler_sail_error+0x6ec>)
 800ad4e:	2001      	movs	r0, #1
 800ad50:	f003 ff5c 	bl	800ec0c <sail_log>
 800ad54:	2308      	movs	r3, #8
 800ad56:	e012      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
        }
    } else {
        SAIL_LOG_ERROR("Unsupported codec info section '%s'", section);
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	4b12      	ldr	r3, [pc, #72]	; (800ada8 <inih_handler_sail_error+0x6fc>)
 800ad5e:	22ee      	movs	r2, #238	; 0xee
 800ad60:	490d      	ldr	r1, [pc, #52]	; (800ad98 <inih_handler_sail_error+0x6ec>)
 800ad62:	2001      	movs	r0, #1
 800ad64:	f003 ff52 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800ad68:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <inih_handler_sail_error+0x6f4>)
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <inih_handler_sail_error+0x6f8>)
 800ad6e:	22ef      	movs	r2, #239	; 0xef
 800ad70:	4909      	ldr	r1, [pc, #36]	; (800ad98 <inih_handler_sail_error+0x6ec>)
 800ad72:	2001      	movs	r0, #1
 800ad74:	f003 ff4a 	bl	800ec0c <sail_log>
 800ad78:	2308      	movs	r3, #8
 800ad7a:	e000      	b.n	800ad7e <inih_handler_sail_error+0x6d2>
    }

    return SAIL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	374c      	adds	r7, #76	; 0x4c
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd90      	pop	{r4, r7, pc}
 800ad86:	bf00      	nop
 800ad88:	08017c1c 	.word	0x08017c1c
 800ad8c:	08017c38 	.word	0x08017c38
 800ad90:	08017b2c 	.word	0x08017b2c
 800ad94:	08017b34 	.word	0x08017b34
 800ad98:	08017948 	.word	0x08017948
 800ad9c:	08017ab4 	.word	0x08017ab4
 800ada0:	08017adc 	.word	0x08017adc
 800ada4:	080179a8 	.word	0x080179a8
 800ada8:	08017c50 	.word	0x08017c50

0800adac <inih_handler>:

/* Returns 1 on success. */
static int inih_handler(void *data, const char *section, const char *name, const char *value) {
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]

    SAIL_TRY_OR_EXECUTE(inih_handler_sail_error(data, section, name, value),
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff fc73 	bl	800a6ac <inih_handler_sail_error>
 800adc6:	4603      	mov	r3, r0
 800adc8:	82fb      	strh	r3, [r7, #22]
 800adca:	8afb      	ldrh	r3, [r7, #22]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	bf14      	ite	ne
 800add0:	2301      	movne	r3, #1
 800add2:	2300      	moveq	r3, #0
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <inih_handler+0x32>
 800adda:	2300      	movs	r3, #0
 800addc:	e000      	b.n	800ade0 <inih_handler+0x34>
                        /* on error */ return 0);

    return 1;
 800adde:	2301      	movs	r3, #1
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3718      	adds	r7, #24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <check_codec_info>:

static sail_status_t check_codec_info(const struct sail_codec_info *codec_info) {
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b08d      	sub	sp, #52	; 0x34
 800adec:	af06      	add	r7, sp, #24
 800adee:	6078      	str	r0, [r7, #4]

    if (codec_info->name == NULL || strlen(codec_info->name) == 0) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d004      	beq.n	800ae02 <check_codec_info+0x1a>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d112      	bne.n	800ae28 <check_codec_info+0x40>
        SAIL_LOG_ERROR("Codec validation error: the codec currently being parsed has empty name");
 800ae02:	4b9b      	ldr	r3, [pc, #620]	; (800b070 <check_codec_info+0x288>)
 800ae04:	f240 1201 	movw	r2, #257	; 0x101
 800ae08:	499a      	ldr	r1, [pc, #616]	; (800b074 <check_codec_info+0x28c>)
 800ae0a:	2001      	movs	r0, #1
 800ae0c:	f003 fefe 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800ae10:	4b99      	ldr	r3, [pc, #612]	; (800b078 <check_codec_info+0x290>)
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	4b99      	ldr	r3, [pc, #612]	; (800b07c <check_codec_info+0x294>)
 800ae16:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ae1a:	4996      	ldr	r1, [pc, #600]	; (800b074 <check_codec_info+0x28c>)
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f003 fef5 	bl	800ec0c <sail_log>
 800ae22:	f44f 7398 	mov.w	r3, #304	; 0x130
 800ae26:	e1b5      	b.n	800b194 <check_codec_info+0x3ac>
    }

    for (size_t i = 0; i < strlen(codec_info->name); i++) {
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	e026      	b.n	800ae7c <check_codec_info+0x94>
        if (codec_info->name[i] >= 'a' && codec_info->name[i] <= 'z') {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691a      	ldr	r2, [r3, #16]
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b60      	cmp	r3, #96	; 0x60
 800ae3a:	d91c      	bls.n	800ae76 <check_codec_info+0x8e>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	691a      	ldr	r2, [r3, #16]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	4413      	add	r3, r2
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b7a      	cmp	r3, #122	; 0x7a
 800ae48:	d815      	bhi.n	800ae76 <check_codec_info+0x8e>
            SAIL_LOG_ERROR("Codec validation error: %s codec has lowercase letters in its name", codec_info->name);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	4b8b      	ldr	r3, [pc, #556]	; (800b080 <check_codec_info+0x298>)
 800ae52:	f240 1207 	movw	r2, #263	; 0x107
 800ae56:	4987      	ldr	r1, [pc, #540]	; (800b074 <check_codec_info+0x28c>)
 800ae58:	2001      	movs	r0, #1
 800ae5a:	f003 fed7 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800ae5e:	4b86      	ldr	r3, [pc, #536]	; (800b078 <check_codec_info+0x290>)
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	4b86      	ldr	r3, [pc, #536]	; (800b07c <check_codec_info+0x294>)
 800ae64:	f44f 7284 	mov.w	r2, #264	; 0x108
 800ae68:	4982      	ldr	r1, [pc, #520]	; (800b074 <check_codec_info+0x28c>)
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	f003 fece 	bl	800ec0c <sail_log>
 800ae70:	f44f 7398 	mov.w	r3, #304	; 0x130
 800ae74:	e18e      	b.n	800b194 <check_codec_info+0x3ac>
    for (size_t i = 0; i < strlen(codec_info->name); i++) {
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7f5 fb37 	bl	80004f4 <strlen>
 800ae86:	4602      	mov	r2, r0
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d3cf      	bcc.n	800ae2e <check_codec_info+0x46>
        }
    }

    if (codec_info->version == NULL || strlen(codec_info->version) == 0) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d004      	beq.n	800aea0 <check_codec_info+0xb8>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d115      	bne.n	800aecc <check_codec_info+0xe4>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty version", codec_info->name);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	4b77      	ldr	r3, [pc, #476]	; (800b084 <check_codec_info+0x29c>)
 800aea8:	f240 120d 	movw	r2, #269	; 0x10d
 800aeac:	4971      	ldr	r1, [pc, #452]	; (800b074 <check_codec_info+0x28c>)
 800aeae:	2001      	movs	r0, #1
 800aeb0:	f003 feac 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800aeb4:	4b70      	ldr	r3, [pc, #448]	; (800b078 <check_codec_info+0x290>)
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	4b70      	ldr	r3, [pc, #448]	; (800b07c <check_codec_info+0x294>)
 800aeba:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800aebe:	496d      	ldr	r1, [pc, #436]	; (800b074 <check_codec_info+0x28c>)
 800aec0:	2001      	movs	r0, #1
 800aec2:	f003 fea3 	bl	800ec0c <sail_log>
 800aec6:	f44f 7398 	mov.w	r3, #304	; 0x130
 800aeca:	e163      	b.n	800b194 <check_codec_info+0x3ac>
    }

    if (codec_info->description == NULL || strlen(codec_info->description) == 0) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d004      	beq.n	800aede <check_codec_info+0xf6>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d115      	bne.n	800af0a <check_codec_info+0x122>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty description", codec_info->name);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	4b68      	ldr	r3, [pc, #416]	; (800b088 <check_codec_info+0x2a0>)
 800aee6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aeea:	4962      	ldr	r1, [pc, #392]	; (800b074 <check_codec_info+0x28c>)
 800aeec:	2001      	movs	r0, #1
 800aeee:	f003 fe8d 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800aef2:	4b61      	ldr	r3, [pc, #388]	; (800b078 <check_codec_info+0x290>)
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	4b61      	ldr	r3, [pc, #388]	; (800b07c <check_codec_info+0x294>)
 800aef8:	f240 1213 	movw	r2, #275	; 0x113
 800aefc:	495d      	ldr	r1, [pc, #372]	; (800b074 <check_codec_info+0x28c>)
 800aefe:	2001      	movs	r0, #1
 800af00:	f003 fe84 	bl	800ec0c <sail_log>
 800af04:	f44f 7398 	mov.w	r3, #304	; 0x130
 800af08:	e144      	b.n	800b194 <check_codec_info+0x3ac>
    }

    if (codec_info->magic_number_node == NULL && codec_info->extension_node == NULL && codec_info->mime_type_node == NULL) {
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d11d      	bne.n	800af4e <check_codec_info+0x166>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d119      	bne.n	800af4e <check_codec_info+0x166>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d115      	bne.n	800af4e <check_codec_info+0x166>
        SAIL_LOG_ERROR("Codec validation error: %s codec has no identification method (magic number or extension or mime type)", codec_info->name);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4b58      	ldr	r3, [pc, #352]	; (800b08c <check_codec_info+0x2a4>)
 800af2a:	f240 1217 	movw	r2, #279	; 0x117
 800af2e:	4951      	ldr	r1, [pc, #324]	; (800b074 <check_codec_info+0x28c>)
 800af30:	2001      	movs	r0, #1
 800af32:	f003 fe6b 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800af36:	4b50      	ldr	r3, [pc, #320]	; (800b078 <check_codec_info+0x290>)
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	4b50      	ldr	r3, [pc, #320]	; (800b07c <check_codec_info+0x294>)
 800af3c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800af40:	494c      	ldr	r1, [pc, #304]	; (800b074 <check_codec_info+0x28c>)
 800af42:	2001      	movs	r0, #1
 800af44:	f003 fe62 	bl	800ec0c <sail_log>
 800af48:	f44f 7398 	mov.w	r3, #304	; 0x130
 800af4c:	e122      	b.n	800b194 <check_codec_info+0x3ac>
    }

    const struct sail_save_features *save_features = codec_info->save_features;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af52:	60fb      	str	r3, [r7, #12]

    /* Check save features. */
    if ((save_features->features & SAIL_CODEC_FEATURE_STATIC ||
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 0302 	and.w	r3, r3, #2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10b      	bne.n	800af78 <check_codec_info+0x190>
            save_features->features & SAIL_CODEC_FEATURE_ANIMATED ||
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f003 0304 	and.w	r3, r3, #4
    if ((save_features->features & SAIL_CODEC_FEATURE_STATIC ||
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d105      	bne.n	800af78 <check_codec_info+0x190>
            save_features->features & SAIL_CODEC_FEATURE_MULTI_PAGED) &&
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f003 0308 	and.w	r3, r3, #8
            save_features->features & SAIL_CODEC_FEATURE_ANIMATED ||
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01d      	beq.n	800afb4 <check_codec_info+0x1cc>
            (save_features->pixel_formats == NULL || save_features->pixel_formats_length == 0)) {
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
            save_features->features & SAIL_CODEC_FEATURE_MULTI_PAGED) &&
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <check_codec_info+0x1a0>
            (save_features->pixel_formats == NULL || save_features->pixel_formats_length == 0)) {
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d115      	bne.n	800afb4 <check_codec_info+0x1cc>
        SAIL_LOG_ERROR("Codec validation error: %s codec is able to save images, but output pixel formats are not specified", codec_info->name);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4b40      	ldr	r3, [pc, #256]	; (800b090 <check_codec_info+0x2a8>)
 800af90:	f44f 7291 	mov.w	r2, #290	; 0x122
 800af94:	4937      	ldr	r1, [pc, #220]	; (800b074 <check_codec_info+0x28c>)
 800af96:	2001      	movs	r0, #1
 800af98:	f003 fe38 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800af9c:	4b36      	ldr	r3, [pc, #216]	; (800b078 <check_codec_info+0x290>)
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	4b36      	ldr	r3, [pc, #216]	; (800b07c <check_codec_info+0x294>)
 800afa2:	f240 1223 	movw	r2, #291	; 0x123
 800afa6:	4933      	ldr	r1, [pc, #204]	; (800b074 <check_codec_info+0x28c>)
 800afa8:	2001      	movs	r0, #1
 800afaa:	f003 fe2f 	bl	800ec0c <sail_log>
 800afae:	f44f 7398 	mov.w	r3, #304	; 0x130
 800afb2:	e0ef      	b.n	800b194 <check_codec_info+0x3ac>
    }

    /* Compressions must exist if we're able to save this image format.*/
    if (save_features->features != 0 && (save_features->compressions == NULL || save_features->compressions_length == 0)) {
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01d      	beq.n	800aff8 <check_codec_info+0x210>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d003      	beq.n	800afcc <check_codec_info+0x1e4>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d115      	bne.n	800aff8 <check_codec_info+0x210>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty compressions list", codec_info->name);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	4b30      	ldr	r3, [pc, #192]	; (800b094 <check_codec_info+0x2ac>)
 800afd4:	f44f 7294 	mov.w	r2, #296	; 0x128
 800afd8:	4926      	ldr	r1, [pc, #152]	; (800b074 <check_codec_info+0x28c>)
 800afda:	2001      	movs	r0, #1
 800afdc:	f003 fe16 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800afe0:	4b25      	ldr	r3, [pc, #148]	; (800b078 <check_codec_info+0x290>)
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	4b25      	ldr	r3, [pc, #148]	; (800b07c <check_codec_info+0x294>)
 800afe6:	f240 1229 	movw	r2, #297	; 0x129
 800afea:	4922      	ldr	r1, [pc, #136]	; (800b074 <check_codec_info+0x28c>)
 800afec:	2001      	movs	r0, #1
 800afee:	f003 fe0d 	bl	800ec0c <sail_log>
 800aff2:	f44f 7398 	mov.w	r3, #304	; 0x130
 800aff6:	e0cd      	b.n	800b194 <check_codec_info+0x3ac>
    }

    /* Compression levels and types are mutually exclusive.*/
    if (save_features->compressions_length > 1 && save_features->compression_level != NULL &&
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d933      	bls.n	800b068 <check_codec_info+0x280>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d02f      	beq.n	800b068 <check_codec_info+0x280>
            (save_features->compression_level->min_level != 0 || save_features->compression_level->max_level != 0)) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	e9d3 0100 	ldrd	r0, r1, [r3]
    if (save_features->compressions_length > 1 && save_features->compression_level != NULL &&
 800b010:	f04f 0200 	mov.w	r2, #0
 800b014:	f04f 0300 	mov.w	r3, #0
 800b018:	f7f5 fe98 	bl	8000d4c <__aeabi_dcmpeq>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00c      	beq.n	800b03c <check_codec_info+0x254>
            (save_features->compression_level->min_level != 0 || save_features->compression_level->max_level != 0)) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b02a:	f04f 0200 	mov.w	r2, #0
 800b02e:	f04f 0300 	mov.w	r3, #0
 800b032:	f7f5 fe8b 	bl	8000d4c <__aeabi_dcmpeq>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d115      	bne.n	800b068 <check_codec_info+0x280>
        SAIL_LOG_ERROR("Codec validation error: %s codec has more than two compression types and non-zero compression levels which is unsupported", codec_info->name);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	4b15      	ldr	r3, [pc, #84]	; (800b098 <check_codec_info+0x2b0>)
 800b044:	f240 122f 	movw	r2, #303	; 0x12f
 800b048:	490a      	ldr	r1, [pc, #40]	; (800b074 <check_codec_info+0x28c>)
 800b04a:	2001      	movs	r0, #1
 800b04c:	f003 fdde 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b050:	4b09      	ldr	r3, [pc, #36]	; (800b078 <check_codec_info+0x290>)
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	4b09      	ldr	r3, [pc, #36]	; (800b07c <check_codec_info+0x294>)
 800b056:	f44f 7298 	mov.w	r2, #304	; 0x130
 800b05a:	4906      	ldr	r1, [pc, #24]	; (800b074 <check_codec_info+0x28c>)
 800b05c:	2001      	movs	r0, #1
 800b05e:	f003 fdd5 	bl	800ec0c <sail_log>
 800b062:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b066:	e095      	b.n	800b194 <check_codec_info+0x3ac>
    }

    for (unsigned i = 0; i < save_features->compressions_length; i++) {
 800b068:	2300      	movs	r3, #0
 800b06a:	613b      	str	r3, [r7, #16]
 800b06c:	e036      	b.n	800b0dc <check_codec_info+0x2f4>
 800b06e:	bf00      	nop
 800b070:	08017c74 	.word	0x08017c74
 800b074:	08017948 	.word	0x08017948
 800b078:	08017cbc 	.word	0x08017cbc
 800b07c:	080179a8 	.word	0x080179a8
 800b080:	08017ce0 	.word	0x08017ce0
 800b084:	08017d24 	.word	0x08017d24
 800b088:	08017d58 	.word	0x08017d58
 800b08c:	08017d90 	.word	0x08017d90
 800b090:	08017df8 	.word	0x08017df8
 800b094:	08017e5c 	.word	0x08017e5c
 800b098:	08017e9c 	.word	0x08017e9c
        if (save_features->compressions[i] == SAIL_COMPRESSION_UNKNOWN) {
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	68da      	ldr	r2, [r3, #12]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d115      	bne.n	800b0d6 <check_codec_info+0x2ee>
            SAIL_LOG_ERROR("Codec validation error: %s codec has UNKNOWN compression", codec_info->name);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	4b3a      	ldr	r3, [pc, #232]	; (800b19c <check_codec_info+0x3b4>)
 800b0b2:	f240 1235 	movw	r2, #309	; 0x135
 800b0b6:	493a      	ldr	r1, [pc, #232]	; (800b1a0 <check_codec_info+0x3b8>)
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	f003 fda7 	bl	800ec0c <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b0be:	4b39      	ldr	r3, [pc, #228]	; (800b1a4 <check_codec_info+0x3bc>)
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	4b39      	ldr	r3, [pc, #228]	; (800b1a8 <check_codec_info+0x3c0>)
 800b0c4:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b0c8:	4935      	ldr	r1, [pc, #212]	; (800b1a0 <check_codec_info+0x3b8>)
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	f003 fd9e 	bl	800ec0c <sail_log>
 800b0d0:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b0d4:	e05e      	b.n	800b194 <check_codec_info+0x3ac>
    for (unsigned i = 0; i < save_features->compressions_length; i++) {
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	613b      	str	r3, [r7, #16]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d3da      	bcc.n	800b09c <check_codec_info+0x2b4>
        }
    }

    if (save_features->compressions_length > 0 && save_features->default_compression == SAIL_COMPRESSION_UNKNOWN) {
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d019      	beq.n	800b122 <check_codec_info+0x33a>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	7d1b      	ldrb	r3, [r3, #20]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d115      	bne.n	800b122 <check_codec_info+0x33a>
        SAIL_LOG_ERROR("Codec validation error: %s codec has UNKNOWN default compression", codec_info->name);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <check_codec_info+0x3c4>)
 800b0fe:	f240 123b 	movw	r2, #315	; 0x13b
 800b102:	4927      	ldr	r1, [pc, #156]	; (800b1a0 <check_codec_info+0x3b8>)
 800b104:	2001      	movs	r0, #1
 800b106:	f003 fd81 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b10a:	4b26      	ldr	r3, [pc, #152]	; (800b1a4 <check_codec_info+0x3bc>)
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	4b26      	ldr	r3, [pc, #152]	; (800b1a8 <check_codec_info+0x3c0>)
 800b110:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b114:	4922      	ldr	r1, [pc, #136]	; (800b1a0 <check_codec_info+0x3b8>)
 800b116:	2001      	movs	r0, #1
 800b118:	f003 fd78 	bl	800ec0c <sail_log>
 800b11c:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b120:	e038      	b.n	800b194 <check_codec_info+0x3ac>
    }

    if (codec_info->save_features->compression_level != NULL) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d032      	beq.n	800b192 <check_codec_info+0x3aa>
        if (codec_info->save_features->compression_level->min_level > codec_info->save_features->compression_level->max_level) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b140:	f7f5 fe2c 	bl	8000d9c <__aeabi_dcmpgt>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d023      	beq.n	800b192 <check_codec_info+0x3aa>
            SAIL_LOG_ERROR("Codec validation error: %s codec has incorrect compression levels of min(%.1f), max(%.1f)",
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	691c      	ldr	r4, [r3, #16]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800b15c:	6989      	ldr	r1, [r1, #24]
 800b15e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800b162:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b16a:	9400      	str	r4, [sp, #0]
 800b16c:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <check_codec_info+0x3c8>)
 800b16e:	f240 1241 	movw	r2, #321	; 0x141
 800b172:	490b      	ldr	r1, [pc, #44]	; (800b1a0 <check_codec_info+0x3b8>)
 800b174:	2001      	movs	r0, #1
 800b176:	f003 fd49 	bl	800ec0c <sail_log>
                            codec_info->name, codec_info->save_features->compression_level->min_level,
                            codec_info->save_features->compression_level->max_level);
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <check_codec_info+0x3bc>)
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4b0a      	ldr	r3, [pc, #40]	; (800b1a8 <check_codec_info+0x3c0>)
 800b180:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800b184:	4906      	ldr	r1, [pc, #24]	; (800b1a0 <check_codec_info+0x3b8>)
 800b186:	2001      	movs	r0, #1
 800b188:	f003 fd40 	bl	800ec0c <sail_log>
 800b18c:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b190:	e000      	b.n	800b194 <check_codec_info+0x3ac>
        }
    }

    return SAIL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	08017f18 	.word	0x08017f18
 800b1a0:	08017948 	.word	0x08017948
 800b1a4:	08017cbc 	.word	0x08017cbc
 800b1a8:	080179a8 	.word	0x080179a8
 800b1ac:	08017f54 	.word	0x08017f54
 800b1b0:	08017f98 	.word	0x08017f98

0800b1b4 <alloc_codec_info>:

static sail_status_t alloc_codec_info(struct sail_codec_info **codec_info) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec_info);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2301      	moveq	r3, #1
 800b1c4:	2300      	movne	r3, #0
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d013      	beq.n	800b1f4 <alloc_codec_info+0x40>
 800b1cc:	4b2a      	ldr	r3, [pc, #168]	; (800b278 <alloc_codec_info+0xc4>)
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <alloc_codec_info+0xc8>)
 800b1d2:	f240 124d 	movw	r2, #333	; 0x14d
 800b1d6:	492a      	ldr	r1, [pc, #168]	; (800b280 <alloc_codec_info+0xcc>)
 800b1d8:	2001      	movs	r0, #1
 800b1da:	f003 fd17 	bl	800ec0c <sail_log>
 800b1de:	4b29      	ldr	r3, [pc, #164]	; (800b284 <alloc_codec_info+0xd0>)
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	4b29      	ldr	r3, [pc, #164]	; (800b288 <alloc_codec_info+0xd4>)
 800b1e4:	f240 124d 	movw	r2, #333	; 0x14d
 800b1e8:	4925      	ldr	r1, [pc, #148]	; (800b280 <alloc_codec_info+0xcc>)
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	f003 fd0e 	bl	800ec0c <sail_log>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e03d      	b.n	800b270 <alloc_codec_info+0xbc>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_info), &ptr));
 800b1f4:	f107 0308 	add.w	r3, r7, #8
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	202c      	movs	r0, #44	; 0x2c
 800b1fc:	f003 fdfe 	bl	800edfc <sail_malloc>
 800b200:	4603      	mov	r3, r0
 800b202:	81fb      	strh	r3, [r7, #14]
 800b204:	89fb      	ldrh	r3, [r7, #14]
 800b206:	2b00      	cmp	r3, #0
 800b208:	bf14      	ite	ne
 800b20a:	2301      	movne	r3, #1
 800b20c:	2300      	moveq	r3, #0
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <alloc_codec_info+0x64>
 800b214:	89fb      	ldrh	r3, [r7, #14]
 800b216:	e02b      	b.n	800b270 <alloc_codec_info+0xbc>
    *codec_info = ptr;
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	601a      	str	r2, [r3, #0]

    (*codec_info)->path              = NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
    (*codec_info)->layout            = 0;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	605a      	str	r2, [r3, #4]
    (*codec_info)->version           = NULL;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2200      	movs	r2, #0
 800b234:	60da      	str	r2, [r3, #12]
    (*codec_info)->name              = NULL;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2200      	movs	r2, #0
 800b23c:	611a      	str	r2, [r3, #16]
    (*codec_info)->description       = NULL;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	615a      	str	r2, [r3, #20]
    (*codec_info)->magic_number_node = NULL;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2200      	movs	r2, #0
 800b24c:	619a      	str	r2, [r3, #24]
    (*codec_info)->extension_node    = NULL;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2200      	movs	r2, #0
 800b254:	61da      	str	r2, [r3, #28]
    (*codec_info)->mime_type_node    = NULL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2200      	movs	r2, #0
 800b25c:	621a      	str	r2, [r3, #32]
    (*codec_info)->load_features     = NULL;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2200      	movs	r2, #0
 800b264:	625a      	str	r2, [r3, #36]	; 0x24
    (*codec_info)->save_features    = NULL;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2200      	movs	r2, #0
 800b26c:	629a      	str	r2, [r3, #40]	; 0x28

    return SAIL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	08017ff4 	.word	0x08017ff4
 800b27c:	08017930 	.word	0x08017930
 800b280:	08017948 	.word	0x08017948
 800b284:	080179ac 	.word	0x080179ac
 800b288:	080179a8 	.word	0x080179a8

0800b28c <codec_read_info_from_input>:

static sail_status_t codec_read_info_from_input(const char *input, int (*ini_parser)(const char*, ini_handler, void*), struct sail_codec_info **codec_info) {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08c      	sub	sp, #48	; 0x30
 800b290:	af02      	add	r7, sp, #8
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]

    struct sail_codec_info *codec_info_local;
    SAIL_TRY(alloc_codec_info(&codec_info_local));
 800b298:	f107 0314 	add.w	r3, r7, #20
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff ff89 	bl	800b1b4 <alloc_codec_info>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b2a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bf14      	ite	ne
 800b2ac:	2301      	movne	r3, #1
 800b2ae:	2300      	moveq	r3, #0
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <codec_read_info_from_input+0x2e>
 800b2b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2b8:	e098      	b.n	800b3ec <codec_read_info_from_input+0x160>
    SAIL_TRY_OR_CLEANUP(sail_alloc_load_features(&codec_info_local->load_features),
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	3324      	adds	r3, #36	; 0x24
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f003 faec 	bl	800e89c <sail_alloc_load_features>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	bf14      	ite	ne
 800b2ce:	2301      	movne	r3, #1
 800b2d0:	2300      	moveq	r3, #0
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d005      	beq.n	800b2e4 <codec_read_info_from_input+0x58>
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 f89a 	bl	800b414 <destroy_codec_info>
 800b2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2e2:	e083      	b.n	800b3ec <codec_read_info_from_input+0x160>
                        destroy_codec_info(codec_info_local));
    SAIL_TRY_OR_CLEANUP(sail_alloc_save_features(&codec_info_local->save_features),
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	3328      	adds	r3, #40	; 0x28
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f004 fd3d 	bl	800fd68 <sail_alloc_save_features>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	847b      	strh	r3, [r7, #34]	; 0x22
 800b2f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	bf14      	ite	ne
 800b2f8:	2301      	movne	r3, #1
 800b2fa:	2300      	moveq	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d005      	beq.n	800b30e <codec_read_info_from_input+0x82>
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f885 	bl	800b414 <destroy_codec_info>
 800b30a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b30c:	e06e      	b.n	800b3ec <codec_read_info_from_input+0x160>
                        destroy_codec_info(codec_info_local));

    struct init_data init_data;
    init_data.codec_info = codec_info_local;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	613b      	str	r3, [r7, #16]
     *  - 0 on success
     *  - line number of first error on parse error
     *  - -1 on file open error
     *  - -2 on memory allocation error (only when INI_USE_STACK is zero).
     */
    const int code = ini_parser(input, inih_handler, &init_data);
 800b312:	f107 0210 	add.w	r2, r7, #16
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	4936      	ldr	r1, [pc, #216]	; (800b3f4 <codec_read_info_from_input+0x168>)
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	4798      	blx	r3
 800b31e:	61f8      	str	r0, [r7, #28]

    /* Success. */
    if (code == 0) {
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d136      	bne.n	800b394 <codec_read_info_from_input+0x108>
        if (codec_info_local->layout != SAIL_CODEC_LAYOUT_V7) {
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2b07      	cmp	r3, #7
 800b32c:	d019      	beq.n	800b362 <codec_read_info_from_input+0xd6>
            SAIL_LOG_ERROR("Unsupported codec layout version %d. Please check your codec info files", codec_info_local->layout);
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	4b30      	ldr	r3, [pc, #192]	; (800b3f8 <codec_read_info_from_input+0x16c>)
 800b336:	f240 1279 	movw	r2, #377	; 0x179
 800b33a:	4930      	ldr	r1, [pc, #192]	; (800b3fc <codec_read_info_from_input+0x170>)
 800b33c:	2001      	movs	r0, #1
 800b33e:	f003 fc65 	bl	800ec0c <sail_log>
            destroy_codec_info(codec_info_local);
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	4618      	mov	r0, r3
 800b346:	f000 f865 	bl	800b414 <destroy_codec_info>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_CODEC_LAYOUT);
 800b34a:	4b2d      	ldr	r3, [pc, #180]	; (800b400 <codec_read_info_from_input+0x174>)
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	4b2d      	ldr	r3, [pc, #180]	; (800b404 <codec_read_info_from_input+0x178>)
 800b350:	f240 127b 	movw	r2, #379	; 0x17b
 800b354:	4929      	ldr	r1, [pc, #164]	; (800b3fc <codec_read_info_from_input+0x170>)
 800b356:	2001      	movs	r0, #1
 800b358:	f003 fc58 	bl	800ec0c <sail_log>
 800b35c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800b360:	e044      	b.n	800b3ec <codec_read_info_from_input+0x160>
        }

        /* Paranoid error checks. */
        SAIL_TRY_OR_CLEANUP(check_codec_info(codec_info_local),
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	4618      	mov	r0, r3
 800b366:	f7ff fd3f 	bl	800ade8 <check_codec_info>
 800b36a:	4603      	mov	r3, r0
 800b36c:	837b      	strh	r3, [r7, #26]
 800b36e:	8b7b      	ldrh	r3, [r7, #26]
 800b370:	2b00      	cmp	r3, #0
 800b372:	bf14      	ite	ne
 800b374:	2301      	movne	r3, #1
 800b376:	2300      	moveq	r3, #0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <codec_read_info_from_input+0xfe>
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f847 	bl	800b414 <destroy_codec_info>
 800b386:	8b7b      	ldrh	r3, [r7, #26]
 800b388:	e030      	b.n	800b3ec <codec_read_info_from_input+0x160>
                            /* cleanup */ destroy_codec_info(codec_info_local));

        *codec_info = codec_info_local;
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	601a      	str	r2, [r3, #0]

        return SAIL_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	e02b      	b.n	800b3ec <codec_read_info_from_input+0x160>
    } else {
        destroy_codec_info(codec_info_local);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f83c 	bl	800b414 <destroy_codec_info>

        switch (code) {
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	f113 0f02 	cmn.w	r3, #2
 800b3a2:	d00e      	beq.n	800b3c2 <codec_read_info_from_input+0x136>
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3aa:	d115      	bne.n	800b3d8 <codec_read_info_from_input+0x14c>
            case -1: SAIL_LOG_AND_RETURN(SAIL_ERROR_OPEN_FILE);
 800b3ac:	4b16      	ldr	r3, [pc, #88]	; (800b408 <codec_read_info_from_input+0x17c>)
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	4b14      	ldr	r3, [pc, #80]	; (800b404 <codec_read_info_from_input+0x178>)
 800b3b2:	f240 1289 	movw	r2, #393	; 0x189
 800b3b6:	4911      	ldr	r1, [pc, #68]	; (800b3fc <codec_read_info_from_input+0x170>)
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	f003 fc27 	bl	800ec0c <sail_log>
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e014      	b.n	800b3ec <codec_read_info_from_input+0x160>
            case -2: SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <codec_read_info_from_input+0x180>)
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <codec_read_info_from_input+0x178>)
 800b3c8:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800b3cc:	490b      	ldr	r1, [pc, #44]	; (800b3fc <codec_read_info_from_input+0x170>)
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	f003 fc1c 	bl	800ec0c <sail_log>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e009      	b.n	800b3ec <codec_read_info_from_input+0x160>

            default: SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800b3d8:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <codec_read_info_from_input+0x184>)
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	4b09      	ldr	r3, [pc, #36]	; (800b404 <codec_read_info_from_input+0x178>)
 800b3de:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800b3e2:	4906      	ldr	r1, [pc, #24]	; (800b3fc <codec_read_info_from_input+0x170>)
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	f003 fc11 	bl	800ec0c <sail_log>
 800b3ea:	2308      	movs	r3, #8
        }
    }
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3728      	adds	r7, #40	; 0x28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	0800adad 	.word	0x0800adad
 800b3f8:	08018000 	.word	0x08018000
 800b3fc:	08017948 	.word	0x08017948
 800b400:	08018048 	.word	0x08018048
 800b404:	080179a8 	.word	0x080179a8
 800b408:	0801806c 	.word	0x0801806c
 800b40c:	08018084 	.word	0x08018084
 800b410:	08017adc 	.word	0x08017adc

0800b414 <destroy_codec_info>:

/*
 * Public functions.
 */

void destroy_codec_info(struct sail_codec_info *codec_info) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]

    if (codec_info == NULL) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d030      	beq.n	800b484 <destroy_codec_info+0x70>
        return;
    }

    sail_free(codec_info->path);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4618      	mov	r0, r3
 800b428:	f003 fd70 	bl	800ef0c <sail_free>
    sail_free(codec_info->version);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	4618      	mov	r0, r3
 800b432:	f003 fd6b 	bl	800ef0c <sail_free>
    sail_free(codec_info->name);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f003 fd66 	bl	800ef0c <sail_free>
    sail_free(codec_info->description);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	4618      	mov	r0, r3
 800b446:	f003 fd61 	bl	800ef0c <sail_free>

    sail_destroy_string_node_chain(codec_info->magic_number_node);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	4618      	mov	r0, r3
 800b450:	f004 fdae 	bl	800ffb0 <sail_destroy_string_node_chain>
    sail_destroy_string_node_chain(codec_info->extension_node);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	4618      	mov	r0, r3
 800b45a:	f004 fda9 	bl	800ffb0 <sail_destroy_string_node_chain>
    sail_destroy_string_node_chain(codec_info->mime_type_node);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	4618      	mov	r0, r3
 800b464:	f004 fda4 	bl	800ffb0 <sail_destroy_string_node_chain>

    sail_destroy_load_features(codec_info->load_features);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	4618      	mov	r0, r3
 800b46e:	f003 fa5f 	bl	800e930 <sail_destroy_load_features>
    sail_destroy_save_features(codec_info->save_features);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b476:	4618      	mov	r0, r3
 800b478:	f004 fcd8 	bl	800fe2c <sail_destroy_save_features>

    sail_free(codec_info);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f003 fd45 	bl	800ef0c <sail_free>
 800b482:	e000      	b.n	800b486 <destroy_codec_info+0x72>
        return;
 800b484:	bf00      	nop
}
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <codec_read_info_from_string>:
    SAIL_TRY(codec_read_info_from_input(path, ini_parse, codec_info));

    return SAIL_OK;
}

sail_status_t codec_read_info_from_string(const char *str, struct sail_codec_info **codec_info) {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af02      	add	r7, sp, #8
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(str);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bf0c      	ite	eq
 800b49c:	2301      	moveq	r3, #1
 800b49e:	2300      	movne	r3, #0
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d013      	beq.n	800b4ce <codec_read_info_from_string+0x42>
 800b4a6:	4b23      	ldr	r3, [pc, #140]	; (800b534 <codec_read_info_from_string+0xa8>)
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	4b23      	ldr	r3, [pc, #140]	; (800b538 <codec_read_info_from_string+0xac>)
 800b4ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b4b0:	4922      	ldr	r1, [pc, #136]	; (800b53c <codec_read_info_from_string+0xb0>)
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	f003 fbaa 	bl	800ec0c <sail_log>
 800b4b8:	4b21      	ldr	r3, [pc, #132]	; (800b540 <codec_read_info_from_string+0xb4>)
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	4b21      	ldr	r3, [pc, #132]	; (800b544 <codec_read_info_from_string+0xb8>)
 800b4be:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b4c2:	491e      	ldr	r1, [pc, #120]	; (800b53c <codec_read_info_from_string+0xb0>)
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	f003 fba1 	bl	800ec0c <sail_log>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e02d      	b.n	800b52a <codec_read_info_from_string+0x9e>
    SAIL_CHECK_PTR(codec_info);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	bf0c      	ite	eq
 800b4d4:	2301      	moveq	r3, #1
 800b4d6:	2300      	movne	r3, #0
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d013      	beq.n	800b506 <codec_read_info_from_string+0x7a>
 800b4de:	4b1a      	ldr	r3, [pc, #104]	; (800b548 <codec_read_info_from_string+0xbc>)
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	4b15      	ldr	r3, [pc, #84]	; (800b538 <codec_read_info_from_string+0xac>)
 800b4e4:	f240 12b9 	movw	r2, #441	; 0x1b9
 800b4e8:	4914      	ldr	r1, [pc, #80]	; (800b53c <codec_read_info_from_string+0xb0>)
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f003 fb8e 	bl	800ec0c <sail_log>
 800b4f0:	4b13      	ldr	r3, [pc, #76]	; (800b540 <codec_read_info_from_string+0xb4>)
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <codec_read_info_from_string+0xb8>)
 800b4f6:	f240 12b9 	movw	r2, #441	; 0x1b9
 800b4fa:	4910      	ldr	r1, [pc, #64]	; (800b53c <codec_read_info_from_string+0xb0>)
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	f003 fb85 	bl	800ec0c <sail_log>
 800b502:	2301      	movs	r3, #1
 800b504:	e011      	b.n	800b52a <codec_read_info_from_string+0x9e>

    SAIL_TRY(codec_read_info_from_input(str, ini_parse_string, codec_info));
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	4910      	ldr	r1, [pc, #64]	; (800b54c <codec_read_info_from_string+0xc0>)
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff febe 	bl	800b28c <codec_read_info_from_input>
 800b510:	4603      	mov	r3, r0
 800b512:	81fb      	strh	r3, [r7, #14]
 800b514:	89fb      	ldrh	r3, [r7, #14]
 800b516:	2b00      	cmp	r3, #0
 800b518:	bf14      	ite	ne
 800b51a:	2301      	movne	r3, #1
 800b51c:	2300      	moveq	r3, #0
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <codec_read_info_from_string+0x9c>
 800b524:	89fb      	ldrh	r3, [r7, #14]
 800b526:	e000      	b.n	800b52a <codec_read_info_from_string+0x9e>

    return SAIL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	080180c4 	.word	0x080180c4
 800b538:	08017930 	.word	0x08017930
 800b53c:	08017948 	.word	0x08017948
 800b540:	080179ac 	.word	0x080179ac
 800b544:	080179a8 	.word	0x080179a8
 800b548:	08017ff4 	.word	0x08017ff4
 800b54c:	0800dd2d 	.word	0x0800dd2d

0800b550 <sail_pixel_format_from_string>:
    }

    return NULL;
}

enum SailPixelFormat sail_pixel_format_from_string(const char *str) {
 800b550:	b5b0      	push	{r4, r5, r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f004 feca 	bl	80102f8 <sail_string_hash>
 800b564:	4603      	mov	r3, r0
 800b566:	82fb      	strh	r3, [r7, #22]
 800b568:	8afb      	ldrh	r3, [r7, #22]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	bf14      	ite	ne
 800b56e:	2301      	movne	r3, #1
 800b570:	2300      	moveq	r3, #0
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <sail_pixel_format_from_string+0x2e>
 800b578:	2300      	movs	r3, #0
 800b57a:	f000 bde4 	b.w	800c146 <sail_pixel_format_from_string+0xbf6>
     * extra data structures and initializations. It's not C++11, so we choose between two evils:
     *
     *     1. Introduce extra data structures and their initializations to work with hashes.
     *     2. Use a single ugly looking switch/case.
     */
    switch (hash) {
 800b57e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b582:	48b2      	ldr	r0, [pc, #712]	; (800b84c <sail_pixel_format_from_string+0x2fc>)
 800b584:	49b2      	ldr	r1, [pc, #712]	; (800b850 <sail_pixel_format_from_string+0x300>)
 800b586:	428b      	cmp	r3, r1
 800b588:	bf08      	it	eq
 800b58a:	4282      	cmpeq	r2, r0
 800b58c:	f000 85be 	beq.w	800c10c <sail_pixel_format_from_string+0xbbc>
 800b590:	49b0      	ldr	r1, [pc, #704]	; (800b854 <sail_pixel_format_from_string+0x304>)
 800b592:	428a      	cmp	r2, r1
 800b594:	49ae      	ldr	r1, [pc, #696]	; (800b850 <sail_pixel_format_from_string+0x300>)
 800b596:	eb73 0101 	sbcs.w	r1, r3, r1
 800b59a:	f080 85d3 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b59e:	48ae      	ldr	r0, [pc, #696]	; (800b858 <sail_pixel_format_from_string+0x308>)
 800b5a0:	49ae      	ldr	r1, [pc, #696]	; (800b85c <sail_pixel_format_from_string+0x30c>)
 800b5a2:	428b      	cmp	r3, r1
 800b5a4:	bf08      	it	eq
 800b5a6:	4282      	cmpeq	r2, r0
 800b5a8:	f000 84fa 	beq.w	800bfa0 <sail_pixel_format_from_string+0xa50>
 800b5ac:	49ac      	ldr	r1, [pc, #688]	; (800b860 <sail_pixel_format_from_string+0x310>)
 800b5ae:	428a      	cmp	r2, r1
 800b5b0:	49aa      	ldr	r1, [pc, #680]	; (800b85c <sail_pixel_format_from_string+0x30c>)
 800b5b2:	eb73 0101 	sbcs.w	r1, r3, r1
 800b5b6:	f080 85c5 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b5ba:	48aa      	ldr	r0, [pc, #680]	; (800b864 <sail_pixel_format_from_string+0x314>)
 800b5bc:	49aa      	ldr	r1, [pc, #680]	; (800b868 <sail_pixel_format_from_string+0x318>)
 800b5be:	428b      	cmp	r3, r1
 800b5c0:	bf08      	it	eq
 800b5c2:	4282      	cmpeq	r2, r0
 800b5c4:	f000 84ea 	beq.w	800bf9c <sail_pixel_format_from_string+0xa4c>
 800b5c8:	49a8      	ldr	r1, [pc, #672]	; (800b86c <sail_pixel_format_from_string+0x31c>)
 800b5ca:	428a      	cmp	r2, r1
 800b5cc:	49a6      	ldr	r1, [pc, #664]	; (800b868 <sail_pixel_format_from_string+0x318>)
 800b5ce:	eb73 0101 	sbcs.w	r1, r3, r1
 800b5d2:	f080 85b7 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b5d6:	48a6      	ldr	r0, [pc, #664]	; (800b870 <sail_pixel_format_from_string+0x320>)
 800b5d8:	49a6      	ldr	r1, [pc, #664]	; (800b874 <sail_pixel_format_from_string+0x324>)
 800b5da:	428b      	cmp	r3, r1
 800b5dc:	bf08      	it	eq
 800b5de:	4282      	cmpeq	r2, r0
 800b5e0:	f000 84da 	beq.w	800bf98 <sail_pixel_format_from_string+0xa48>
 800b5e4:	49a4      	ldr	r1, [pc, #656]	; (800b878 <sail_pixel_format_from_string+0x328>)
 800b5e6:	428a      	cmp	r2, r1
 800b5e8:	49a2      	ldr	r1, [pc, #648]	; (800b874 <sail_pixel_format_from_string+0x324>)
 800b5ea:	eb73 0101 	sbcs.w	r1, r3, r1
 800b5ee:	f080 85a9 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b5f2:	48a2      	ldr	r0, [pc, #648]	; (800b87c <sail_pixel_format_from_string+0x32c>)
 800b5f4:	49a2      	ldr	r1, [pc, #648]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b5f6:	428b      	cmp	r3, r1
 800b5f8:	bf08      	it	eq
 800b5fa:	4282      	cmpeq	r2, r0
 800b5fc:	f000 84ea 	beq.w	800bfd4 <sail_pixel_format_from_string+0xa84>
 800b600:	49a0      	ldr	r1, [pc, #640]	; (800b884 <sail_pixel_format_from_string+0x334>)
 800b602:	428a      	cmp	r2, r1
 800b604:	499e      	ldr	r1, [pc, #632]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b606:	eb73 0101 	sbcs.w	r1, r3, r1
 800b60a:	f080 859b 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b60e:	489e      	ldr	r0, [pc, #632]	; (800b888 <sail_pixel_format_from_string+0x338>)
 800b610:	499b      	ldr	r1, [pc, #620]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b612:	428b      	cmp	r3, r1
 800b614:	bf08      	it	eq
 800b616:	4282      	cmpeq	r2, r0
 800b618:	f000 84d8 	beq.w	800bfcc <sail_pixel_format_from_string+0xa7c>
 800b61c:	499b      	ldr	r1, [pc, #620]	; (800b88c <sail_pixel_format_from_string+0x33c>)
 800b61e:	428a      	cmp	r2, r1
 800b620:	4997      	ldr	r1, [pc, #604]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b622:	eb73 0101 	sbcs.w	r1, r3, r1
 800b626:	f080 858d 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b62a:	4899      	ldr	r0, [pc, #612]	; (800b890 <sail_pixel_format_from_string+0x340>)
 800b62c:	4994      	ldr	r1, [pc, #592]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b62e:	428b      	cmp	r3, r1
 800b630:	bf08      	it	eq
 800b632:	4282      	cmpeq	r2, r0
 800b634:	f000 852c 	beq.w	800c090 <sail_pixel_format_from_string+0xb40>
 800b638:	4996      	ldr	r1, [pc, #600]	; (800b894 <sail_pixel_format_from_string+0x344>)
 800b63a:	428a      	cmp	r2, r1
 800b63c:	4990      	ldr	r1, [pc, #576]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b63e:	eb73 0101 	sbcs.w	r1, r3, r1
 800b642:	f080 857f 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b646:	4894      	ldr	r0, [pc, #592]	; (800b898 <sail_pixel_format_from_string+0x348>)
 800b648:	498d      	ldr	r1, [pc, #564]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b64a:	428b      	cmp	r3, r1
 800b64c:	bf08      	it	eq
 800b64e:	4282      	cmpeq	r2, r0
 800b650:	f000 84be 	beq.w	800bfd0 <sail_pixel_format_from_string+0xa80>
 800b654:	4991      	ldr	r1, [pc, #580]	; (800b89c <sail_pixel_format_from_string+0x34c>)
 800b656:	428a      	cmp	r2, r1
 800b658:	4989      	ldr	r1, [pc, #548]	; (800b880 <sail_pixel_format_from_string+0x330>)
 800b65a:	eb73 0101 	sbcs.w	r1, r3, r1
 800b65e:	f080 8571 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b662:	488f      	ldr	r0, [pc, #572]	; (800b8a0 <sail_pixel_format_from_string+0x350>)
 800b664:	498f      	ldr	r1, [pc, #572]	; (800b8a4 <sail_pixel_format_from_string+0x354>)
 800b666:	428b      	cmp	r3, r1
 800b668:	bf08      	it	eq
 800b66a:	4282      	cmpeq	r2, r0
 800b66c:	f000 8492 	beq.w	800bf94 <sail_pixel_format_from_string+0xa44>
 800b670:	498d      	ldr	r1, [pc, #564]	; (800b8a8 <sail_pixel_format_from_string+0x358>)
 800b672:	428a      	cmp	r2, r1
 800b674:	498b      	ldr	r1, [pc, #556]	; (800b8a4 <sail_pixel_format_from_string+0x354>)
 800b676:	eb73 0101 	sbcs.w	r1, r3, r1
 800b67a:	f080 8563 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b67e:	488b      	ldr	r0, [pc, #556]	; (800b8ac <sail_pixel_format_from_string+0x35c>)
 800b680:	498b      	ldr	r1, [pc, #556]	; (800b8b0 <sail_pixel_format_from_string+0x360>)
 800b682:	428b      	cmp	r3, r1
 800b684:	bf08      	it	eq
 800b686:	4282      	cmpeq	r2, r0
 800b688:	f000 854a 	beq.w	800c120 <sail_pixel_format_from_string+0xbd0>
 800b68c:	4989      	ldr	r1, [pc, #548]	; (800b8b4 <sail_pixel_format_from_string+0x364>)
 800b68e:	428a      	cmp	r2, r1
 800b690:	4987      	ldr	r1, [pc, #540]	; (800b8b0 <sail_pixel_format_from_string+0x360>)
 800b692:	eb73 0101 	sbcs.w	r1, r3, r1
 800b696:	f080 8555 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b69a:	4887      	ldr	r0, [pc, #540]	; (800b8b8 <sail_pixel_format_from_string+0x368>)
 800b69c:	4984      	ldr	r1, [pc, #528]	; (800b8b0 <sail_pixel_format_from_string+0x360>)
 800b69e:	428b      	cmp	r3, r1
 800b6a0:	bf08      	it	eq
 800b6a2:	4282      	cmpeq	r2, r0
 800b6a4:	f000 8538 	beq.w	800c118 <sail_pixel_format_from_string+0xbc8>
 800b6a8:	4984      	ldr	r1, [pc, #528]	; (800b8bc <sail_pixel_format_from_string+0x36c>)
 800b6aa:	428a      	cmp	r2, r1
 800b6ac:	4980      	ldr	r1, [pc, #512]	; (800b8b0 <sail_pixel_format_from_string+0x360>)
 800b6ae:	eb73 0101 	sbcs.w	r1, r3, r1
 800b6b2:	f080 8547 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b6b6:	4882      	ldr	r0, [pc, #520]	; (800b8c0 <sail_pixel_format_from_string+0x370>)
 800b6b8:	4982      	ldr	r1, [pc, #520]	; (800b8c4 <sail_pixel_format_from_string+0x374>)
 800b6ba:	428b      	cmp	r3, r1
 800b6bc:	bf08      	it	eq
 800b6be:	4282      	cmpeq	r2, r0
 800b6c0:	f000 852c 	beq.w	800c11c <sail_pixel_format_from_string+0xbcc>
 800b6c4:	4980      	ldr	r1, [pc, #512]	; (800b8c8 <sail_pixel_format_from_string+0x378>)
 800b6c6:	428a      	cmp	r2, r1
 800b6c8:	497e      	ldr	r1, [pc, #504]	; (800b8c4 <sail_pixel_format_from_string+0x374>)
 800b6ca:	eb73 0101 	sbcs.w	r1, r3, r1
 800b6ce:	f080 8539 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b6d2:	487e      	ldr	r0, [pc, #504]	; (800b8cc <sail_pixel_format_from_string+0x37c>)
 800b6d4:	497b      	ldr	r1, [pc, #492]	; (800b8c4 <sail_pixel_format_from_string+0x374>)
 800b6d6:	428b      	cmp	r3, r1
 800b6d8:	bf08      	it	eq
 800b6da:	4282      	cmpeq	r2, r0
 800b6dc:	f000 851a 	beq.w	800c114 <sail_pixel_format_from_string+0xbc4>
 800b6e0:	497b      	ldr	r1, [pc, #492]	; (800b8d0 <sail_pixel_format_from_string+0x380>)
 800b6e2:	428a      	cmp	r2, r1
 800b6e4:	4977      	ldr	r1, [pc, #476]	; (800b8c4 <sail_pixel_format_from_string+0x374>)
 800b6e6:	eb73 0101 	sbcs.w	r1, r3, r1
 800b6ea:	f080 852b 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b6ee:	4879      	ldr	r0, [pc, #484]	; (800b8d4 <sail_pixel_format_from_string+0x384>)
 800b6f0:	4979      	ldr	r1, [pc, #484]	; (800b8d8 <sail_pixel_format_from_string+0x388>)
 800b6f2:	428b      	cmp	r3, r1
 800b6f4:	bf08      	it	eq
 800b6f6:	4282      	cmpeq	r2, r0
 800b6f8:	f000 8454 	beq.w	800bfa4 <sail_pixel_format_from_string+0xa54>
 800b6fc:	4977      	ldr	r1, [pc, #476]	; (800b8dc <sail_pixel_format_from_string+0x38c>)
 800b6fe:	428a      	cmp	r2, r1
 800b700:	4975      	ldr	r1, [pc, #468]	; (800b8d8 <sail_pixel_format_from_string+0x388>)
 800b702:	eb73 0101 	sbcs.w	r1, r3, r1
 800b706:	f080 851d 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b70a:	4875      	ldr	r0, [pc, #468]	; (800b8e0 <sail_pixel_format_from_string+0x390>)
 800b70c:	4975      	ldr	r1, [pc, #468]	; (800b8e4 <sail_pixel_format_from_string+0x394>)
 800b70e:	428b      	cmp	r3, r1
 800b710:	bf08      	it	eq
 800b712:	4282      	cmpeq	r2, r0
 800b714:	f000 844e 	beq.w	800bfb4 <sail_pixel_format_from_string+0xa64>
 800b718:	4973      	ldr	r1, [pc, #460]	; (800b8e8 <sail_pixel_format_from_string+0x398>)
 800b71a:	428a      	cmp	r2, r1
 800b71c:	4971      	ldr	r1, [pc, #452]	; (800b8e4 <sail_pixel_format_from_string+0x394>)
 800b71e:	eb73 0101 	sbcs.w	r1, r3, r1
 800b722:	f080 850f 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b726:	4871      	ldr	r0, [pc, #452]	; (800b8ec <sail_pixel_format_from_string+0x39c>)
 800b728:	4971      	ldr	r1, [pc, #452]	; (800b8f0 <sail_pixel_format_from_string+0x3a0>)
 800b72a:	428b      	cmp	r3, r1
 800b72c:	bf08      	it	eq
 800b72e:	4282      	cmpeq	r2, r0
 800b730:	f000 843e 	beq.w	800bfb0 <sail_pixel_format_from_string+0xa60>
 800b734:	496f      	ldr	r1, [pc, #444]	; (800b8f4 <sail_pixel_format_from_string+0x3a4>)
 800b736:	428a      	cmp	r2, r1
 800b738:	496d      	ldr	r1, [pc, #436]	; (800b8f0 <sail_pixel_format_from_string+0x3a0>)
 800b73a:	eb73 0101 	sbcs.w	r1, r3, r1
 800b73e:	f080 8501 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b742:	486d      	ldr	r0, [pc, #436]	; (800b8f8 <sail_pixel_format_from_string+0x3a8>)
 800b744:	496d      	ldr	r1, [pc, #436]	; (800b8fc <sail_pixel_format_from_string+0x3ac>)
 800b746:	428b      	cmp	r3, r1
 800b748:	bf08      	it	eq
 800b74a:	4282      	cmpeq	r2, r0
 800b74c:	f000 842e 	beq.w	800bfac <sail_pixel_format_from_string+0xa5c>
 800b750:	496b      	ldr	r1, [pc, #428]	; (800b900 <sail_pixel_format_from_string+0x3b0>)
 800b752:	428a      	cmp	r2, r1
 800b754:	4969      	ldr	r1, [pc, #420]	; (800b8fc <sail_pixel_format_from_string+0x3ac>)
 800b756:	eb73 0101 	sbcs.w	r1, r3, r1
 800b75a:	f080 84f3 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b75e:	4869      	ldr	r0, [pc, #420]	; (800b904 <sail_pixel_format_from_string+0x3b4>)
 800b760:	4969      	ldr	r1, [pc, #420]	; (800b908 <sail_pixel_format_from_string+0x3b8>)
 800b762:	428b      	cmp	r3, r1
 800b764:	bf08      	it	eq
 800b766:	4282      	cmpeq	r2, r0
 800b768:	f000 841e 	beq.w	800bfa8 <sail_pixel_format_from_string+0xa58>
 800b76c:	4967      	ldr	r1, [pc, #412]	; (800b90c <sail_pixel_format_from_string+0x3bc>)
 800b76e:	428a      	cmp	r2, r1
 800b770:	4965      	ldr	r1, [pc, #404]	; (800b908 <sail_pixel_format_from_string+0x3b8>)
 800b772:	eb73 0101 	sbcs.w	r1, r3, r1
 800b776:	f080 84e5 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b77a:	4865      	ldr	r0, [pc, #404]	; (800b910 <sail_pixel_format_from_string+0x3c0>)
 800b77c:	4965      	ldr	r1, [pc, #404]	; (800b914 <sail_pixel_format_from_string+0x3c4>)
 800b77e:	428b      	cmp	r3, r1
 800b780:	bf08      	it	eq
 800b782:	4282      	cmpeq	r2, r0
 800b784:	f000 841c 	beq.w	800bfc0 <sail_pixel_format_from_string+0xa70>
 800b788:	4963      	ldr	r1, [pc, #396]	; (800b918 <sail_pixel_format_from_string+0x3c8>)
 800b78a:	428a      	cmp	r2, r1
 800b78c:	4961      	ldr	r1, [pc, #388]	; (800b914 <sail_pixel_format_from_string+0x3c4>)
 800b78e:	eb73 0101 	sbcs.w	r1, r3, r1
 800b792:	f080 84d7 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b796:	4861      	ldr	r0, [pc, #388]	; (800b91c <sail_pixel_format_from_string+0x3cc>)
 800b798:	4961      	ldr	r1, [pc, #388]	; (800b920 <sail_pixel_format_from_string+0x3d0>)
 800b79a:	428b      	cmp	r3, r1
 800b79c:	bf08      	it	eq
 800b79e:	4282      	cmpeq	r2, r0
 800b7a0:	f000 840c 	beq.w	800bfbc <sail_pixel_format_from_string+0xa6c>
 800b7a4:	495f      	ldr	r1, [pc, #380]	; (800b924 <sail_pixel_format_from_string+0x3d4>)
 800b7a6:	428a      	cmp	r2, r1
 800b7a8:	495d      	ldr	r1, [pc, #372]	; (800b920 <sail_pixel_format_from_string+0x3d0>)
 800b7aa:	eb73 0101 	sbcs.w	r1, r3, r1
 800b7ae:	f080 84c9 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b7b2:	485d      	ldr	r0, [pc, #372]	; (800b928 <sail_pixel_format_from_string+0x3d8>)
 800b7b4:	495d      	ldr	r1, [pc, #372]	; (800b92c <sail_pixel_format_from_string+0x3dc>)
 800b7b6:	428b      	cmp	r3, r1
 800b7b8:	bf08      	it	eq
 800b7ba:	4282      	cmpeq	r2, r0
 800b7bc:	f000 83fc 	beq.w	800bfb8 <sail_pixel_format_from_string+0xa68>
 800b7c0:	495b      	ldr	r1, [pc, #364]	; (800b930 <sail_pixel_format_from_string+0x3e0>)
 800b7c2:	428a      	cmp	r2, r1
 800b7c4:	4959      	ldr	r1, [pc, #356]	; (800b92c <sail_pixel_format_from_string+0x3dc>)
 800b7c6:	eb73 0101 	sbcs.w	r1, r3, r1
 800b7ca:	f080 84bb 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b7ce:	4859      	ldr	r0, [pc, #356]	; (800b934 <sail_pixel_format_from_string+0x3e4>)
 800b7d0:	4959      	ldr	r1, [pc, #356]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b7d2:	428b      	cmp	r3, r1
 800b7d4:	bf08      	it	eq
 800b7d6:	4282      	cmpeq	r2, r0
 800b7d8:	f000 84b2 	beq.w	800c140 <sail_pixel_format_from_string+0xbf0>
 800b7dc:	4957      	ldr	r1, [pc, #348]	; (800b93c <sail_pixel_format_from_string+0x3ec>)
 800b7de:	428a      	cmp	r2, r1
 800b7e0:	4955      	ldr	r1, [pc, #340]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b7e2:	eb73 0101 	sbcs.w	r1, r3, r1
 800b7e6:	f080 84ad 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b7ea:	4855      	ldr	r0, [pc, #340]	; (800b940 <sail_pixel_format_from_string+0x3f0>)
 800b7ec:	4952      	ldr	r1, [pc, #328]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b7ee:	428b      	cmp	r3, r1
 800b7f0:	bf08      	it	eq
 800b7f2:	4282      	cmpeq	r2, r0
 800b7f4:	f000 847a 	beq.w	800c0ec <sail_pixel_format_from_string+0xb9c>
 800b7f8:	4952      	ldr	r1, [pc, #328]	; (800b944 <sail_pixel_format_from_string+0x3f4>)
 800b7fa:	428a      	cmp	r2, r1
 800b7fc:	494e      	ldr	r1, [pc, #312]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b7fe:	eb73 0101 	sbcs.w	r1, r3, r1
 800b802:	f080 849f 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b806:	4850      	ldr	r0, [pc, #320]	; (800b948 <sail_pixel_format_from_string+0x3f8>)
 800b808:	494b      	ldr	r1, [pc, #300]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b80a:	428b      	cmp	r3, r1
 800b80c:	bf08      	it	eq
 800b80e:	4282      	cmpeq	r2, r0
 800b810:	f000 846e 	beq.w	800c0f0 <sail_pixel_format_from_string+0xba0>
 800b814:	494d      	ldr	r1, [pc, #308]	; (800b94c <sail_pixel_format_from_string+0x3fc>)
 800b816:	428a      	cmp	r2, r1
 800b818:	4947      	ldr	r1, [pc, #284]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b81a:	eb73 0101 	sbcs.w	r1, r3, r1
 800b81e:	f080 8491 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b822:	484b      	ldr	r0, [pc, #300]	; (800b950 <sail_pixel_format_from_string+0x400>)
 800b824:	4944      	ldr	r1, [pc, #272]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b826:	428b      	cmp	r3, r1
 800b828:	bf08      	it	eq
 800b82a:	4282      	cmpeq	r2, r0
 800b82c:	f000 845a 	beq.w	800c0e4 <sail_pixel_format_from_string+0xb94>
 800b830:	4948      	ldr	r1, [pc, #288]	; (800b954 <sail_pixel_format_from_string+0x404>)
 800b832:	428a      	cmp	r2, r1
 800b834:	4940      	ldr	r1, [pc, #256]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b836:	eb73 0101 	sbcs.w	r1, r3, r1
 800b83a:	f080 8483 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b83e:	4846      	ldr	r0, [pc, #280]	; (800b958 <sail_pixel_format_from_string+0x408>)
 800b840:	493d      	ldr	r1, [pc, #244]	; (800b938 <sail_pixel_format_from_string+0x3e8>)
 800b842:	428b      	cmp	r3, r1
 800b844:	bf08      	it	eq
 800b846:	4282      	cmpeq	r2, r0
 800b848:	e088      	b.n	800b95c <sail_pixel_format_from_string+0x40c>
 800b84a:	bf00      	nop
 800b84c:	2e99a0ad 	.word	0x2e99a0ad
 800b850:	bfc1deac 	.word	0xbfc1deac
 800b854:	2e99a0ae 	.word	0x2e99a0ae
 800b858:	98b585ed 	.word	0x98b585ed
 800b85c:	b7fdbba1 	.word	0xb7fdbba1
 800b860:	98b585ee 	.word	0x98b585ee
 800b864:	c6c3c1e9 	.word	0xc6c3c1e9
 800b868:	b7fdb683 	.word	0xb7fdb683
 800b86c:	c6c3c1ea 	.word	0xc6c3c1ea
 800b870:	ddcadfe7 	.word	0xddcadfe7
 800b874:	b7fdb3f4 	.word	0xb7fdb3f4
 800b878:	ddcadfe8 	.word	0xddcadfe8
 800b87c:	55c8f5b6 	.word	0x55c8f5b6
 800b880:	b7fdb2fe 	.word	0xb7fdb2fe
 800b884:	55c8f5b7 	.word	0x55c8f5b7
 800b888:	55c8f595 	.word	0x55c8f595
 800b88c:	55c8f596 	.word	0x55c8f596
 800b890:	307f31b6 	.word	0x307f31b6
 800b894:	307f31b7 	.word	0x307f31b7
 800b898:	307f3195 	.word	0x307f3195
 800b89c:	307f3196 	.word	0x307f3196
 800b8a0:	694e6ee6 	.word	0x694e6ee6
 800b8a4:	b7fdb2ad 	.word	0xb7fdb2ad
 800b8a8:	694e6ee7 	.word	0x694e6ee7
 800b8ac:	e24fc44d 	.word	0xe24fc44d
 800b8b0:	b7b489b9 	.word	0xb7b489b9
 800b8b4:	e24fc44e 	.word	0xe24fc44e
 800b8b8:	e24fc1a5 	.word	0xe24fc1a5
 800b8bc:	e24fc1a6 	.word	0xe24fc1a6
 800b8c0:	ac2c660f 	.word	0xac2c660f
 800b8c4:	b7b43a6b 	.word	0xb7b43a6b
 800b8c8:	ac2c6610 	.word	0xac2c6610
 800b8cc:	ac2c6367 	.word	0xac2c6367
 800b8d0:	ac2c6368 	.word	0xac2c6368
 800b8d4:	6a9d301c 	.word	0x6a9d301c
 800b8d8:	b7b412c6 	.word	0xb7b412c6
 800b8dc:	6a9d301d 	.word	0x6a9d301d
 800b8e0:	ab9a0707 	.word	0xab9a0707
 800b8e4:	ae5b2802 	.word	0xae5b2802
 800b8e8:	ab9a0708 	.word	0xab9a0708
 800b8ec:	96273203 	.word	0x96273203
 800b8f0:	ae456428 	.word	0xae456428
 800b8f4:	96273204 	.word	0x96273204
 800b8f8:	8b6dc781 	.word	0x8b6dc781
 800b8fc:	ae3a823b 	.word	0xae3a823b
 800b900:	8b6dc782 	.word	0x8b6dc782
 800b904:	06111240 	.word	0x06111240
 800b908:	ae351145 	.word	0xae351145
 800b90c:	06111241 	.word	0x06111241
 800b910:	d75657fa 	.word	0xd75657fa
 800b914:	ada718bc 	.word	0xada718bc
 800b918:	d75657fb 	.word	0xd75657fb
 800b91c:	8beecff6 	.word	0x8beecff6
 800b920:	82004aea 	.word	0x82004aea
 800b924:	8beecff7 	.word	0x8beecff7
 800b928:	9614f8f6 	.word	0x9614f8f6
 800b92c:	7503dba3 	.word	0x7503dba3
 800b930:	9614f8f7 	.word	0x9614f8f7
 800b934:	3552c323 	.word	0x3552c323
 800b938:	726ab92d 	.word	0x726ab92d
 800b93c:	3552c324 	.word	0x3552c324
 800b940:	35522811 	.word	0x35522811
 800b944:	35522812 	.word	0x35522812
 800b948:	3551e411 	.word	0x3551e411
 800b94c:	3551e412 	.word	0x3551e412
 800b950:	354eae71 	.word	0x354eae71
 800b954:	354eae72 	.word	0x354eae72
 800b958:	354eae5a 	.word	0x354eae5a
 800b95c:	f000 83ca 	beq.w	800c0f4 <sail_pixel_format_from_string+0xba4>
 800b960:	49b1      	ldr	r1, [pc, #708]	; (800bc28 <sail_pixel_format_from_string+0x6d8>)
 800b962:	428a      	cmp	r2, r1
 800b964:	49b1      	ldr	r1, [pc, #708]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b966:	eb73 0101 	sbcs.w	r1, r3, r1
 800b96a:	f080 83eb 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b96e:	48b0      	ldr	r0, [pc, #704]	; (800bc30 <sail_pixel_format_from_string+0x6e0>)
 800b970:	49ae      	ldr	r1, [pc, #696]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b972:	428b      	cmp	r3, r1
 800b974:	bf08      	it	eq
 800b976:	4282      	cmpeq	r2, r0
 800b978:	f000 83c6 	beq.w	800c108 <sail_pixel_format_from_string+0xbb8>
 800b97c:	49ad      	ldr	r1, [pc, #692]	; (800bc34 <sail_pixel_format_from_string+0x6e4>)
 800b97e:	428a      	cmp	r2, r1
 800b980:	49aa      	ldr	r1, [pc, #680]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b982:	eb73 0101 	sbcs.w	r1, r3, r1
 800b986:	f080 83dd 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b98a:	48ab      	ldr	r0, [pc, #684]	; (800bc38 <sail_pixel_format_from_string+0x6e8>)
 800b98c:	49a7      	ldr	r1, [pc, #668]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b98e:	428b      	cmp	r3, r1
 800b990:	bf08      	it	eq
 800b992:	4282      	cmpeq	r2, r0
 800b994:	f000 83a8 	beq.w	800c0e8 <sail_pixel_format_from_string+0xb98>
 800b998:	49a8      	ldr	r1, [pc, #672]	; (800bc3c <sail_pixel_format_from_string+0x6ec>)
 800b99a:	428a      	cmp	r2, r1
 800b99c:	49a3      	ldr	r1, [pc, #652]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b99e:	eb73 0101 	sbcs.w	r1, r3, r1
 800b9a2:	f080 83cf 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b9a6:	48a6      	ldr	r0, [pc, #664]	; (800bc40 <sail_pixel_format_from_string+0x6f0>)
 800b9a8:	49a0      	ldr	r1, [pc, #640]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b9aa:	428b      	cmp	r3, r1
 800b9ac:	bf08      	it	eq
 800b9ae:	4282      	cmpeq	r2, r0
 800b9b0:	f000 83a2 	beq.w	800c0f8 <sail_pixel_format_from_string+0xba8>
 800b9b4:	49a3      	ldr	r1, [pc, #652]	; (800bc44 <sail_pixel_format_from_string+0x6f4>)
 800b9b6:	428a      	cmp	r2, r1
 800b9b8:	499c      	ldr	r1, [pc, #624]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b9ba:	eb73 0101 	sbcs.w	r1, r3, r1
 800b9be:	f080 83c1 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b9c2:	48a1      	ldr	r0, [pc, #644]	; (800bc48 <sail_pixel_format_from_string+0x6f8>)
 800b9c4:	4999      	ldr	r1, [pc, #612]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b9c6:	428b      	cmp	r3, r1
 800b9c8:	bf08      	it	eq
 800b9ca:	4282      	cmpeq	r2, r0
 800b9cc:	f000 8396 	beq.w	800c0fc <sail_pixel_format_from_string+0xbac>
 800b9d0:	499e      	ldr	r1, [pc, #632]	; (800bc4c <sail_pixel_format_from_string+0x6fc>)
 800b9d2:	428a      	cmp	r2, r1
 800b9d4:	4995      	ldr	r1, [pc, #596]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b9d6:	eb73 0101 	sbcs.w	r1, r3, r1
 800b9da:	f080 83b3 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b9de:	489c      	ldr	r0, [pc, #624]	; (800bc50 <sail_pixel_format_from_string+0x700>)
 800b9e0:	4992      	ldr	r1, [pc, #584]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b9e2:	428b      	cmp	r3, r1
 800b9e4:	bf08      	it	eq
 800b9e6:	4282      	cmpeq	r2, r0
 800b9e8:	f000 838a 	beq.w	800c100 <sail_pixel_format_from_string+0xbb0>
 800b9ec:	4999      	ldr	r1, [pc, #612]	; (800bc54 <sail_pixel_format_from_string+0x704>)
 800b9ee:	428a      	cmp	r2, r1
 800b9f0:	498e      	ldr	r1, [pc, #568]	; (800bc2c <sail_pixel_format_from_string+0x6dc>)
 800b9f2:	eb73 0101 	sbcs.w	r1, r3, r1
 800b9f6:	f080 83a5 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800b9fa:	4897      	ldr	r0, [pc, #604]	; (800bc58 <sail_pixel_format_from_string+0x708>)
 800b9fc:	4997      	ldr	r1, [pc, #604]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800b9fe:	428b      	cmp	r3, r1
 800ba00:	bf08      	it	eq
 800ba02:	4282      	cmpeq	r2, r0
 800ba04:	f000 839a 	beq.w	800c13c <sail_pixel_format_from_string+0xbec>
 800ba08:	4995      	ldr	r1, [pc, #596]	; (800bc60 <sail_pixel_format_from_string+0x710>)
 800ba0a:	428a      	cmp	r2, r1
 800ba0c:	4993      	ldr	r1, [pc, #588]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba0e:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba12:	f080 8397 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800ba16:	4893      	ldr	r0, [pc, #588]	; (800bc64 <sail_pixel_format_from_string+0x714>)
 800ba18:	4990      	ldr	r1, [pc, #576]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba1a:	428b      	cmp	r3, r1
 800ba1c:	bf08      	it	eq
 800ba1e:	4282      	cmpeq	r2, r0
 800ba20:	f000 838a 	beq.w	800c138 <sail_pixel_format_from_string+0xbe8>
 800ba24:	4990      	ldr	r1, [pc, #576]	; (800bc68 <sail_pixel_format_from_string+0x718>)
 800ba26:	428a      	cmp	r2, r1
 800ba28:	498c      	ldr	r1, [pc, #560]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba2a:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba2e:	f080 8389 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800ba32:	488e      	ldr	r0, [pc, #568]	; (800bc6c <sail_pixel_format_from_string+0x71c>)
 800ba34:	4989      	ldr	r1, [pc, #548]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba36:	428b      	cmp	r3, r1
 800ba38:	bf08      	it	eq
 800ba3a:	4282      	cmpeq	r2, r0
 800ba3c:	f000 837a 	beq.w	800c134 <sail_pixel_format_from_string+0xbe4>
 800ba40:	498b      	ldr	r1, [pc, #556]	; (800bc70 <sail_pixel_format_from_string+0x720>)
 800ba42:	428a      	cmp	r2, r1
 800ba44:	4985      	ldr	r1, [pc, #532]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba46:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba4a:	f080 837b 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800ba4e:	4889      	ldr	r0, [pc, #548]	; (800bc74 <sail_pixel_format_from_string+0x724>)
 800ba50:	4982      	ldr	r1, [pc, #520]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba52:	428b      	cmp	r3, r1
 800ba54:	bf08      	it	eq
 800ba56:	4282      	cmpeq	r2, r0
 800ba58:	f000 835a 	beq.w	800c110 <sail_pixel_format_from_string+0xbc0>
 800ba5c:	4986      	ldr	r1, [pc, #536]	; (800bc78 <sail_pixel_format_from_string+0x728>)
 800ba5e:	428a      	cmp	r2, r1
 800ba60:	497e      	ldr	r1, [pc, #504]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba62:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba66:	f080 836d 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800ba6a:	4884      	ldr	r0, [pc, #528]	; (800bc7c <sail_pixel_format_from_string+0x72c>)
 800ba6c:	497b      	ldr	r1, [pc, #492]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba6e:	428b      	cmp	r3, r1
 800ba70:	bf08      	it	eq
 800ba72:	4282      	cmpeq	r2, r0
 800ba74:	f000 832a 	beq.w	800c0cc <sail_pixel_format_from_string+0xb7c>
 800ba78:	4981      	ldr	r1, [pc, #516]	; (800bc80 <sail_pixel_format_from_string+0x730>)
 800ba7a:	428a      	cmp	r2, r1
 800ba7c:	4977      	ldr	r1, [pc, #476]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba7e:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba82:	f080 835f 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800ba86:	487f      	ldr	r0, [pc, #508]	; (800bc84 <sail_pixel_format_from_string+0x734>)
 800ba88:	4974      	ldr	r1, [pc, #464]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba8a:	428b      	cmp	r3, r1
 800ba8c:	bf08      	it	eq
 800ba8e:	4282      	cmpeq	r2, r0
 800ba90:	f000 831e 	beq.w	800c0d0 <sail_pixel_format_from_string+0xb80>
 800ba94:	497c      	ldr	r1, [pc, #496]	; (800bc88 <sail_pixel_format_from_string+0x738>)
 800ba96:	428a      	cmp	r2, r1
 800ba98:	4970      	ldr	r1, [pc, #448]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800ba9a:	eb73 0101 	sbcs.w	r1, r3, r1
 800ba9e:	f080 8351 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800baa2:	487a      	ldr	r0, [pc, #488]	; (800bc8c <sail_pixel_format_from_string+0x73c>)
 800baa4:	496d      	ldr	r1, [pc, #436]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800baa6:	428b      	cmp	r3, r1
 800baa8:	bf08      	it	eq
 800baaa:	4282      	cmpeq	r2, r0
 800baac:	f000 830a 	beq.w	800c0c4 <sail_pixel_format_from_string+0xb74>
 800bab0:	4977      	ldr	r1, [pc, #476]	; (800bc90 <sail_pixel_format_from_string+0x740>)
 800bab2:	428a      	cmp	r2, r1
 800bab4:	4969      	ldr	r1, [pc, #420]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bab6:	eb73 0101 	sbcs.w	r1, r3, r1
 800baba:	f080 8343 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800babe:	4875      	ldr	r0, [pc, #468]	; (800bc94 <sail_pixel_format_from_string+0x744>)
 800bac0:	4966      	ldr	r1, [pc, #408]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bac2:	428b      	cmp	r3, r1
 800bac4:	bf08      	it	eq
 800bac6:	4282      	cmpeq	r2, r0
 800bac8:	f000 8304 	beq.w	800c0d4 <sail_pixel_format_from_string+0xb84>
 800bacc:	4972      	ldr	r1, [pc, #456]	; (800bc98 <sail_pixel_format_from_string+0x748>)
 800bace:	428a      	cmp	r2, r1
 800bad0:	4962      	ldr	r1, [pc, #392]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bad2:	eb73 0101 	sbcs.w	r1, r3, r1
 800bad6:	f080 8335 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bada:	4870      	ldr	r0, [pc, #448]	; (800bc9c <sail_pixel_format_from_string+0x74c>)
 800badc:	495f      	ldr	r1, [pc, #380]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bade:	428b      	cmp	r3, r1
 800bae0:	bf08      	it	eq
 800bae2:	4282      	cmpeq	r2, r0
 800bae4:	f000 830e 	beq.w	800c104 <sail_pixel_format_from_string+0xbb4>
 800bae8:	496d      	ldr	r1, [pc, #436]	; (800bca0 <sail_pixel_format_from_string+0x750>)
 800baea:	428a      	cmp	r2, r1
 800baec:	495b      	ldr	r1, [pc, #364]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800baee:	eb73 0101 	sbcs.w	r1, r3, r1
 800baf2:	f080 8327 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800baf6:	486b      	ldr	r0, [pc, #428]	; (800bca4 <sail_pixel_format_from_string+0x754>)
 800baf8:	4958      	ldr	r1, [pc, #352]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bafa:	428b      	cmp	r3, r1
 800bafc:	bf08      	it	eq
 800bafe:	4282      	cmpeq	r2, r0
 800bb00:	f000 82e2 	beq.w	800c0c8 <sail_pixel_format_from_string+0xb78>
 800bb04:	4968      	ldr	r1, [pc, #416]	; (800bca8 <sail_pixel_format_from_string+0x758>)
 800bb06:	428a      	cmp	r2, r1
 800bb08:	4954      	ldr	r1, [pc, #336]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb0a:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb0e:	f080 8319 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bb12:	4866      	ldr	r0, [pc, #408]	; (800bcac <sail_pixel_format_from_string+0x75c>)
 800bb14:	4951      	ldr	r1, [pc, #324]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb16:	428b      	cmp	r3, r1
 800bb18:	bf08      	it	eq
 800bb1a:	4282      	cmpeq	r2, r0
 800bb1c:	f000 82dc 	beq.w	800c0d8 <sail_pixel_format_from_string+0xb88>
 800bb20:	4963      	ldr	r1, [pc, #396]	; (800bcb0 <sail_pixel_format_from_string+0x760>)
 800bb22:	428a      	cmp	r2, r1
 800bb24:	494d      	ldr	r1, [pc, #308]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb26:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb2a:	f080 830b 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bb2e:	4861      	ldr	r0, [pc, #388]	; (800bcb4 <sail_pixel_format_from_string+0x764>)
 800bb30:	494a      	ldr	r1, [pc, #296]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb32:	428b      	cmp	r3, r1
 800bb34:	bf08      	it	eq
 800bb36:	4282      	cmpeq	r2, r0
 800bb38:	f000 82d0 	beq.w	800c0dc <sail_pixel_format_from_string+0xb8c>
 800bb3c:	495e      	ldr	r1, [pc, #376]	; (800bcb8 <sail_pixel_format_from_string+0x768>)
 800bb3e:	428a      	cmp	r2, r1
 800bb40:	4946      	ldr	r1, [pc, #280]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb42:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb46:	f080 82fd 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bb4a:	485c      	ldr	r0, [pc, #368]	; (800bcbc <sail_pixel_format_from_string+0x76c>)
 800bb4c:	4943      	ldr	r1, [pc, #268]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb4e:	428b      	cmp	r3, r1
 800bb50:	bf08      	it	eq
 800bb52:	4282      	cmpeq	r2, r0
 800bb54:	f000 82c4 	beq.w	800c0e0 <sail_pixel_format_from_string+0xb90>
 800bb58:	4959      	ldr	r1, [pc, #356]	; (800bcc0 <sail_pixel_format_from_string+0x770>)
 800bb5a:	428a      	cmp	r2, r1
 800bb5c:	493f      	ldr	r1, [pc, #252]	; (800bc5c <sail_pixel_format_from_string+0x70c>)
 800bb5e:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb62:	f080 82ef 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bb66:	4857      	ldr	r0, [pc, #348]	; (800bcc4 <sail_pixel_format_from_string+0x774>)
 800bb68:	4957      	ldr	r1, [pc, #348]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bb6a:	428b      	cmp	r3, r1
 800bb6c:	bf08      	it	eq
 800bb6e:	4282      	cmpeq	r2, r0
 800bb70:	f000 829c 	beq.w	800c0ac <sail_pixel_format_from_string+0xb5c>
 800bb74:	4955      	ldr	r1, [pc, #340]	; (800bccc <sail_pixel_format_from_string+0x77c>)
 800bb76:	428a      	cmp	r2, r1
 800bb78:	4953      	ldr	r1, [pc, #332]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bb7a:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb7e:	f080 82e1 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bb82:	4853      	ldr	r0, [pc, #332]	; (800bcd0 <sail_pixel_format_from_string+0x780>)
 800bb84:	4950      	ldr	r1, [pc, #320]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bb86:	428b      	cmp	r3, r1
 800bb88:	bf08      	it	eq
 800bb8a:	4282      	cmpeq	r2, r0
 800bb8c:	f000 8290 	beq.w	800c0b0 <sail_pixel_format_from_string+0xb60>
 800bb90:	4950      	ldr	r1, [pc, #320]	; (800bcd4 <sail_pixel_format_from_string+0x784>)
 800bb92:	428a      	cmp	r2, r1
 800bb94:	494c      	ldr	r1, [pc, #304]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bb96:	eb73 0101 	sbcs.w	r1, r3, r1
 800bb9a:	f080 82d3 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bb9e:	484e      	ldr	r0, [pc, #312]	; (800bcd8 <sail_pixel_format_from_string+0x788>)
 800bba0:	4949      	ldr	r1, [pc, #292]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bba2:	428b      	cmp	r3, r1
 800bba4:	bf08      	it	eq
 800bba6:	4282      	cmpeq	r2, r0
 800bba8:	f000 827c 	beq.w	800c0a4 <sail_pixel_format_from_string+0xb54>
 800bbac:	494b      	ldr	r1, [pc, #300]	; (800bcdc <sail_pixel_format_from_string+0x78c>)
 800bbae:	428a      	cmp	r2, r1
 800bbb0:	4945      	ldr	r1, [pc, #276]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bbb2:	eb73 0101 	sbcs.w	r1, r3, r1
 800bbb6:	f080 82c5 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bbba:	4849      	ldr	r0, [pc, #292]	; (800bce0 <sail_pixel_format_from_string+0x790>)
 800bbbc:	4942      	ldr	r1, [pc, #264]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bbbe:	428b      	cmp	r3, r1
 800bbc0:	bf08      	it	eq
 800bbc2:	4282      	cmpeq	r2, r0
 800bbc4:	f000 8276 	beq.w	800c0b4 <sail_pixel_format_from_string+0xb64>
 800bbc8:	4946      	ldr	r1, [pc, #280]	; (800bce4 <sail_pixel_format_from_string+0x794>)
 800bbca:	428a      	cmp	r2, r1
 800bbcc:	493e      	ldr	r1, [pc, #248]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bbce:	eb73 0101 	sbcs.w	r1, r3, r1
 800bbd2:	f080 82b7 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bbd6:	4844      	ldr	r0, [pc, #272]	; (800bce8 <sail_pixel_format_from_string+0x798>)
 800bbd8:	493b      	ldr	r1, [pc, #236]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bbda:	428b      	cmp	r3, r1
 800bbdc:	bf08      	it	eq
 800bbde:	4282      	cmpeq	r2, r0
 800bbe0:	f000 8262 	beq.w	800c0a8 <sail_pixel_format_from_string+0xb58>
 800bbe4:	4941      	ldr	r1, [pc, #260]	; (800bcec <sail_pixel_format_from_string+0x79c>)
 800bbe6:	428a      	cmp	r2, r1
 800bbe8:	4937      	ldr	r1, [pc, #220]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bbea:	eb73 0101 	sbcs.w	r1, r3, r1
 800bbee:	f080 82a9 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bbf2:	483f      	ldr	r0, [pc, #252]	; (800bcf0 <sail_pixel_format_from_string+0x7a0>)
 800bbf4:	4934      	ldr	r1, [pc, #208]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bbf6:	428b      	cmp	r3, r1
 800bbf8:	bf08      	it	eq
 800bbfa:	4282      	cmpeq	r2, r0
 800bbfc:	f000 825c 	beq.w	800c0b8 <sail_pixel_format_from_string+0xb68>
 800bc00:	493c      	ldr	r1, [pc, #240]	; (800bcf4 <sail_pixel_format_from_string+0x7a4>)
 800bc02:	428a      	cmp	r2, r1
 800bc04:	4930      	ldr	r1, [pc, #192]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bc06:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc0a:	f080 829b 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bc0e:	483a      	ldr	r0, [pc, #232]	; (800bcf8 <sail_pixel_format_from_string+0x7a8>)
 800bc10:	492d      	ldr	r1, [pc, #180]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bc12:	428b      	cmp	r3, r1
 800bc14:	bf08      	it	eq
 800bc16:	4282      	cmpeq	r2, r0
 800bc18:	f000 8250 	beq.w	800c0bc <sail_pixel_format_from_string+0xb6c>
 800bc1c:	4937      	ldr	r1, [pc, #220]	; (800bcfc <sail_pixel_format_from_string+0x7ac>)
 800bc1e:	428a      	cmp	r2, r1
 800bc20:	4929      	ldr	r1, [pc, #164]	; (800bcc8 <sail_pixel_format_from_string+0x778>)
 800bc22:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc26:	e06b      	b.n	800bd00 <sail_pixel_format_from_string+0x7b0>
 800bc28:	354eae5b 	.word	0x354eae5b
 800bc2c:	726ab92d 	.word	0x726ab92d
 800bc30:	35469132 	.word	0x35469132
 800bc34:	35469133 	.word	0x35469133
 800bc38:	3545ea71 	.word	0x3545ea71
 800bc3c:	3545ea72 	.word	0x3545ea72
 800bc40:	3545ea5a 	.word	0x3545ea5a
 800bc44:	3545ea5b 	.word	0x3545ea5b
 800bc48:	35458b5a 	.word	0x35458b5a
 800bc4c:	35458b5b 	.word	0x35458b5b
 800bc50:	3545475a 	.word	0x3545475a
 800bc54:	3545475b 	.word	0x3545475b
 800bc58:	a4b2ec25 	.word	0xa4b2ec25
 800bc5c:	726ab92c 	.word	0x726ab92c
 800bc60:	a4b2ec26 	.word	0xa4b2ec26
 800bc64:	9209a71d 	.word	0x9209a71d
 800bc68:	9209a71e 	.word	0x9209a71e
 800bc6c:	49b9bb9e 	.word	0x49b9bb9e
 800bc70:	49b9bb9f 	.word	0x49b9bb9f
 800bc74:	49b96ca3 	.word	0x49b96ca3
 800bc78:	49b96ca4 	.word	0x49b96ca4
 800bc7c:	49b9208c 	.word	0x49b9208c
 800bc80:	49b9208d 	.word	0x49b9208d
 800bc84:	49b8dc8c 	.word	0x49b8dc8c
 800bc88:	49b8dc8d 	.word	0x49b8dc8d
 800bc8c:	49b5a6ec 	.word	0x49b5a6ec
 800bc90:	49b5a6ed 	.word	0x49b5a6ed
 800bc94:	49b5a6d5 	.word	0x49b5a6d5
 800bc98:	49b5a6d6 	.word	0x49b5a6d6
 800bc9c:	49ad89ad 	.word	0x49ad89ad
 800bca0:	49ad89ae 	.word	0x49ad89ae
 800bca4:	49ace2ec 	.word	0x49ace2ec
 800bca8:	49ace2ed 	.word	0x49ace2ed
 800bcac:	49ace2d5 	.word	0x49ace2d5
 800bcb0:	49ace2d6 	.word	0x49ace2d6
 800bcb4:	49ac83d5 	.word	0x49ac83d5
 800bcb8:	49ac83d6 	.word	0x49ac83d6
 800bcbc:	49ac3fd5 	.word	0x49ac3fd5
 800bcc0:	49ac3fd6 	.word	0x49ac3fd6
 800bcc4:	b919498e 	.word	0xb919498e
 800bcc8:	726ab92b 	.word	0x726ab92b
 800bccc:	b919498f 	.word	0xb919498f
 800bcd0:	b919058e 	.word	0xb919058e
 800bcd4:	b919058f 	.word	0xb919058f
 800bcd8:	b915cfee 	.word	0xb915cfee
 800bcdc:	b915cfef 	.word	0xb915cfef
 800bce0:	b915cfd7 	.word	0xb915cfd7
 800bce4:	b915cfd8 	.word	0xb915cfd8
 800bce8:	b90d0bee 	.word	0xb90d0bee
 800bcec:	b90d0bef 	.word	0xb90d0bef
 800bcf0:	b90d0bd7 	.word	0xb90d0bd7
 800bcf4:	b90d0bd8 	.word	0xb90d0bd8
 800bcf8:	b90cacd7 	.word	0xb90cacd7
 800bcfc:	b90cacd8 	.word	0xb90cacd8
 800bd00:	f080 8220 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bd04:	48b4      	ldr	r0, [pc, #720]	; (800bfd8 <sail_pixel_format_from_string+0xa88>)
 800bd06:	49b5      	ldr	r1, [pc, #724]	; (800bfdc <sail_pixel_format_from_string+0xa8c>)
 800bd08:	428b      	cmp	r3, r1
 800bd0a:	bf08      	it	eq
 800bd0c:	4282      	cmpeq	r2, r0
 800bd0e:	f000 81d7 	beq.w	800c0c0 <sail_pixel_format_from_string+0xb70>
 800bd12:	49b3      	ldr	r1, [pc, #716]	; (800bfe0 <sail_pixel_format_from_string+0xa90>)
 800bd14:	428a      	cmp	r2, r1
 800bd16:	49b1      	ldr	r1, [pc, #708]	; (800bfdc <sail_pixel_format_from_string+0xa8c>)
 800bd18:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd1c:	f080 8212 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bd20:	48b0      	ldr	r0, [pc, #704]	; (800bfe4 <sail_pixel_format_from_string+0xa94>)
 800bd22:	49b1      	ldr	r1, [pc, #708]	; (800bfe8 <sail_pixel_format_from_string+0xa98>)
 800bd24:	428b      	cmp	r3, r1
 800bd26:	bf08      	it	eq
 800bd28:	4282      	cmpeq	r2, r0
 800bd2a:	f000 814d 	beq.w	800bfc8 <sail_pixel_format_from_string+0xa78>
 800bd2e:	49af      	ldr	r1, [pc, #700]	; (800bfec <sail_pixel_format_from_string+0xa9c>)
 800bd30:	428a      	cmp	r2, r1
 800bd32:	49ad      	ldr	r1, [pc, #692]	; (800bfe8 <sail_pixel_format_from_string+0xa98>)
 800bd34:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd38:	f080 8204 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bd3c:	48ac      	ldr	r0, [pc, #688]	; (800bff0 <sail_pixel_format_from_string+0xaa0>)
 800bd3e:	49ad      	ldr	r1, [pc, #692]	; (800bff4 <sail_pixel_format_from_string+0xaa4>)
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf08      	it	eq
 800bd44:	4282      	cmpeq	r2, r0
 800bd46:	f000 813d 	beq.w	800bfc4 <sail_pixel_format_from_string+0xa74>
 800bd4a:	49ab      	ldr	r1, [pc, #684]	; (800bff8 <sail_pixel_format_from_string+0xaa8>)
 800bd4c:	428a      	cmp	r2, r1
 800bd4e:	49a9      	ldr	r1, [pc, #676]	; (800bff4 <sail_pixel_format_from_string+0xaa4>)
 800bd50:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd54:	f080 81f6 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bd58:	48a8      	ldr	r0, [pc, #672]	; (800bffc <sail_pixel_format_from_string+0xaac>)
 800bd5a:	49a9      	ldr	r1, [pc, #676]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bd5c:	428b      	cmp	r3, r1
 800bd5e:	bf08      	it	eq
 800bd60:	4282      	cmpeq	r2, r0
 800bd62:	f000 81e5 	beq.w	800c130 <sail_pixel_format_from_string+0xbe0>
 800bd66:	49a7      	ldr	r1, [pc, #668]	; (800c004 <sail_pixel_format_from_string+0xab4>)
 800bd68:	428a      	cmp	r2, r1
 800bd6a:	49a5      	ldr	r1, [pc, #660]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bd6c:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd70:	f080 81e8 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bd74:	48a4      	ldr	r0, [pc, #656]	; (800c008 <sail_pixel_format_from_string+0xab8>)
 800bd76:	49a2      	ldr	r1, [pc, #648]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bd78:	428b      	cmp	r3, r1
 800bd7a:	bf08      	it	eq
 800bd7c:	4282      	cmpeq	r2, r0
 800bd7e:	f000 818d 	beq.w	800c09c <sail_pixel_format_from_string+0xb4c>
 800bd82:	49a2      	ldr	r1, [pc, #648]	; (800c00c <sail_pixel_format_from_string+0xabc>)
 800bd84:	428a      	cmp	r2, r1
 800bd86:	499e      	ldr	r1, [pc, #632]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bd88:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd8c:	f080 81da 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bd90:	489f      	ldr	r0, [pc, #636]	; (800c010 <sail_pixel_format_from_string+0xac0>)
 800bd92:	499b      	ldr	r1, [pc, #620]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bd94:	428b      	cmp	r3, r1
 800bd96:	bf08      	it	eq
 800bd98:	4282      	cmpeq	r2, r0
 800bd9a:	f000 8181 	beq.w	800c0a0 <sail_pixel_format_from_string+0xb50>
 800bd9e:	499d      	ldr	r1, [pc, #628]	; (800c014 <sail_pixel_format_from_string+0xac4>)
 800bda0:	428a      	cmp	r2, r1
 800bda2:	4997      	ldr	r1, [pc, #604]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bda4:	eb73 0101 	sbcs.w	r1, r3, r1
 800bda8:	f080 81cc 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bdac:	489a      	ldr	r0, [pc, #616]	; (800c018 <sail_pixel_format_from_string+0xac8>)
 800bdae:	4994      	ldr	r1, [pc, #592]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bdb0:	428b      	cmp	r3, r1
 800bdb2:	bf08      	it	eq
 800bdb4:	4282      	cmpeq	r2, r0
 800bdb6:	f000 81b9 	beq.w	800c12c <sail_pixel_format_from_string+0xbdc>
 800bdba:	4998      	ldr	r1, [pc, #608]	; (800c01c <sail_pixel_format_from_string+0xacc>)
 800bdbc:	428a      	cmp	r2, r1
 800bdbe:	4990      	ldr	r1, [pc, #576]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bdc0:	eb73 0101 	sbcs.w	r1, r3, r1
 800bdc4:	f080 81be 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bdc8:	4895      	ldr	r0, [pc, #596]	; (800c020 <sail_pixel_format_from_string+0xad0>)
 800bdca:	498d      	ldr	r1, [pc, #564]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bdcc:	428b      	cmp	r3, r1
 800bdce:	bf08      	it	eq
 800bdd0:	4282      	cmpeq	r2, r0
 800bdd2:	f000 81a9 	beq.w	800c128 <sail_pixel_format_from_string+0xbd8>
 800bdd6:	4993      	ldr	r1, [pc, #588]	; (800c024 <sail_pixel_format_from_string+0xad4>)
 800bdd8:	428a      	cmp	r2, r1
 800bdda:	4989      	ldr	r1, [pc, #548]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bddc:	eb73 0101 	sbcs.w	r1, r3, r1
 800bde0:	f080 81b0 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bde4:	4890      	ldr	r0, [pc, #576]	; (800c028 <sail_pixel_format_from_string+0xad8>)
 800bde6:	4986      	ldr	r1, [pc, #536]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bde8:	428b      	cmp	r3, r1
 800bdea:	bf08      	it	eq
 800bdec:	4282      	cmpeq	r2, r0
 800bdee:	f000 8199 	beq.w	800c124 <sail_pixel_format_from_string+0xbd4>
 800bdf2:	498e      	ldr	r1, [pc, #568]	; (800c02c <sail_pixel_format_from_string+0xadc>)
 800bdf4:	428a      	cmp	r2, r1
 800bdf6:	4982      	ldr	r1, [pc, #520]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800bdf8:	eb73 0101 	sbcs.w	r1, r3, r1
 800bdfc:	f080 81a2 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800be00:	488b      	ldr	r0, [pc, #556]	; (800c030 <sail_pixel_format_from_string+0xae0>)
 800be02:	497f      	ldr	r1, [pc, #508]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800be04:	428b      	cmp	r3, r1
 800be06:	bf08      	it	eq
 800be08:	4282      	cmpeq	r2, r0
 800be0a:	f000 8143 	beq.w	800c094 <sail_pixel_format_from_string+0xb44>
 800be0e:	4989      	ldr	r1, [pc, #548]	; (800c034 <sail_pixel_format_from_string+0xae4>)
 800be10:	428a      	cmp	r2, r1
 800be12:	497b      	ldr	r1, [pc, #492]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800be14:	eb73 0101 	sbcs.w	r1, r3, r1
 800be18:	f080 8194 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800be1c:	4886      	ldr	r0, [pc, #536]	; (800c038 <sail_pixel_format_from_string+0xae8>)
 800be1e:	4978      	ldr	r1, [pc, #480]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800be20:	428b      	cmp	r3, r1
 800be22:	bf08      	it	eq
 800be24:	4282      	cmpeq	r2, r0
 800be26:	f000 8137 	beq.w	800c098 <sail_pixel_format_from_string+0xb48>
 800be2a:	4984      	ldr	r1, [pc, #528]	; (800c03c <sail_pixel_format_from_string+0xaec>)
 800be2c:	428a      	cmp	r2, r1
 800be2e:	4974      	ldr	r1, [pc, #464]	; (800c000 <sail_pixel_format_from_string+0xab0>)
 800be30:	eb73 0101 	sbcs.w	r1, r3, r1
 800be34:	f080 8186 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800be38:	4881      	ldr	r0, [pc, #516]	; (800c040 <sail_pixel_format_from_string+0xaf0>)
 800be3a:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800be3e:	428b      	cmp	r3, r1
 800be40:	bf08      	it	eq
 800be42:	4282      	cmpeq	r2, r0
 800be44:	f000 808c 	beq.w	800bf60 <sail_pixel_format_from_string+0xa10>
 800be48:	497e      	ldr	r1, [pc, #504]	; (800c044 <sail_pixel_format_from_string+0xaf4>)
 800be4a:	428a      	cmp	r2, r1
 800be4c:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800be50:	eb73 0101 	sbcs.w	r1, r3, r1
 800be54:	f080 8176 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800be58:	487b      	ldr	r0, [pc, #492]	; (800c048 <sail_pixel_format_from_string+0xaf8>)
 800be5a:	f240 6152 	movw	r1, #1618	; 0x652
 800be5e:	428b      	cmp	r3, r1
 800be60:	bf08      	it	eq
 800be62:	4282      	cmpeq	r2, r0
 800be64:	f000 8094 	beq.w	800bf90 <sail_pixel_format_from_string+0xa40>
 800be68:	4978      	ldr	r1, [pc, #480]	; (800c04c <sail_pixel_format_from_string+0xafc>)
 800be6a:	428a      	cmp	r2, r1
 800be6c:	f240 6152 	movw	r1, #1618	; 0x652
 800be70:	eb73 0101 	sbcs.w	r1, r3, r1
 800be74:	f080 8166 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800be78:	4975      	ldr	r1, [pc, #468]	; (800c050 <sail_pixel_format_from_string+0xb00>)
 800be7a:	2b31      	cmp	r3, #49	; 0x31
 800be7c:	bf08      	it	eq
 800be7e:	428a      	cmpeq	r2, r1
 800be80:	f000 8084 	beq.w	800bf8c <sail_pixel_format_from_string+0xa3c>
 800be84:	4973      	ldr	r1, [pc, #460]	; (800c054 <sail_pixel_format_from_string+0xb04>)
 800be86:	428a      	cmp	r2, r1
 800be88:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800be8c:	f080 815a 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800be90:	4971      	ldr	r1, [pc, #452]	; (800c058 <sail_pixel_format_from_string+0xb08>)
 800be92:	2b31      	cmp	r3, #49	; 0x31
 800be94:	bf08      	it	eq
 800be96:	428a      	cmpeq	r2, r1
 800be98:	d076      	beq.n	800bf88 <sail_pixel_format_from_string+0xa38>
 800be9a:	4970      	ldr	r1, [pc, #448]	; (800c05c <sail_pixel_format_from_string+0xb0c>)
 800be9c:	428a      	cmp	r2, r1
 800be9e:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800bea2:	f080 814f 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bea6:	496e      	ldr	r1, [pc, #440]	; (800c060 <sail_pixel_format_from_string+0xb10>)
 800bea8:	2b31      	cmp	r3, #49	; 0x31
 800beaa:	bf08      	it	eq
 800beac:	428a      	cmpeq	r2, r1
 800beae:	d069      	beq.n	800bf84 <sail_pixel_format_from_string+0xa34>
 800beb0:	496c      	ldr	r1, [pc, #432]	; (800c064 <sail_pixel_format_from_string+0xb14>)
 800beb2:	428a      	cmp	r2, r1
 800beb4:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800beb8:	f080 8144 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bebc:	496a      	ldr	r1, [pc, #424]	; (800c068 <sail_pixel_format_from_string+0xb18>)
 800bebe:	2b31      	cmp	r3, #49	; 0x31
 800bec0:	bf08      	it	eq
 800bec2:	428a      	cmpeq	r2, r1
 800bec4:	d05c      	beq.n	800bf80 <sail_pixel_format_from_string+0xa30>
 800bec6:	4969      	ldr	r1, [pc, #420]	; (800c06c <sail_pixel_format_from_string+0xb1c>)
 800bec8:	428a      	cmp	r2, r1
 800beca:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800bece:	f080 8139 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bed2:	4967      	ldr	r1, [pc, #412]	; (800c070 <sail_pixel_format_from_string+0xb20>)
 800bed4:	2b31      	cmp	r3, #49	; 0x31
 800bed6:	bf08      	it	eq
 800bed8:	428a      	cmpeq	r2, r1
 800beda:	d04f      	beq.n	800bf7c <sail_pixel_format_from_string+0xa2c>
 800bedc:	4965      	ldr	r1, [pc, #404]	; (800c074 <sail_pixel_format_from_string+0xb24>)
 800bede:	428a      	cmp	r2, r1
 800bee0:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800bee4:	f080 812e 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bee8:	4963      	ldr	r1, [pc, #396]	; (800c078 <sail_pixel_format_from_string+0xb28>)
 800beea:	2b31      	cmp	r3, #49	; 0x31
 800beec:	bf08      	it	eq
 800beee:	428a      	cmpeq	r2, r1
 800bef0:	d042      	beq.n	800bf78 <sail_pixel_format_from_string+0xa28>
 800bef2:	4962      	ldr	r1, [pc, #392]	; (800c07c <sail_pixel_format_from_string+0xb2c>)
 800bef4:	428a      	cmp	r2, r1
 800bef6:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800befa:	f080 8123 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800befe:	4960      	ldr	r1, [pc, #384]	; (800c080 <sail_pixel_format_from_string+0xb30>)
 800bf00:	428a      	cmp	r2, r1
 800bf02:	f173 0101 	sbcs.w	r1, r3, #1
 800bf06:	d225      	bcs.n	800bf54 <sail_pixel_format_from_string+0xa04>
 800bf08:	495e      	ldr	r1, [pc, #376]	; (800c084 <sail_pixel_format_from_string+0xb34>)
 800bf0a:	428a      	cmp	r2, r1
 800bf0c:	f173 0101 	sbcs.w	r1, r3, #1
 800bf10:	f0c0 8118 	bcc.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bf14:	495c      	ldr	r1, [pc, #368]	; (800c088 <sail_pixel_format_from_string+0xb38>)
 800bf16:	1854      	adds	r4, r2, r1
 800bf18:	f163 0501 	sbc.w	r5, r3, #1
 800bf1c:	2c08      	cmp	r4, #8
 800bf1e:	f175 0300 	sbcs.w	r3, r5, #0
 800bf22:	f080 810f 	bcs.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bf26:	2c07      	cmp	r4, #7
 800bf28:	f200 810c 	bhi.w	800c144 <sail_pixel_format_from_string+0xbf4>
 800bf2c:	a301      	add	r3, pc, #4	; (adr r3, 800bf34 <sail_pixel_format_from_string+0x9e4>)
 800bf2e:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800bf32:	bf00      	nop
 800bf34:	0800bf65 	.word	0x0800bf65
 800bf38:	0800bf69 	.word	0x0800bf69
 800bf3c:	0800c145 	.word	0x0800c145
 800bf40:	0800bf6d 	.word	0x0800bf6d
 800bf44:	0800c145 	.word	0x0800c145
 800bf48:	0800c145 	.word	0x0800c145
 800bf4c:	0800c145 	.word	0x0800c145
 800bf50:	0800bf71 	.word	0x0800bf71
 800bf54:	494d      	ldr	r1, [pc, #308]	; (800c08c <sail_pixel_format_from_string+0xb3c>)
 800bf56:	2b31      	cmp	r3, #49	; 0x31
 800bf58:	bf08      	it	eq
 800bf5a:	428a      	cmpeq	r2, r1
 800bf5c:	d00a      	beq.n	800bf74 <sail_pixel_format_from_string+0xa24>
 800bf5e:	e0f1      	b.n	800c144 <sail_pixel_format_from_string+0xbf4>
        case UINT64_C(229442760833397):      return SAIL_PIXEL_FORMAT_UNKNOWN;
 800bf60:	2300      	movs	r3, #0
 800bf62:	e0f0      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(6383902552):           return SAIL_PIXEL_FORMAT_BPP1;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e0ee      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902553):           return SAIL_PIXEL_FORMAT_BPP2;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	e0ec      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902555):           return SAIL_PIXEL_FORMAT_BPP4;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	e0ea      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902559):           return SAIL_PIXEL_FORMAT_BPP8;
 800bf70:	2304      	movs	r3, #4
 800bf72:	e0e8      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784270):         return SAIL_PIXEL_FORMAT_BPP16;
 800bf74:	2305      	movs	r3, #5
 800bf76:	e0e6      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784301):         return SAIL_PIXEL_FORMAT_BPP24;
 800bf78:	2306      	movs	r3, #6
 800bf7a:	e0e4      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784332):         return SAIL_PIXEL_FORMAT_BPP32;
 800bf7c:	2307      	movs	r3, #7
 800bf7e:	e0e2      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784371):         return SAIL_PIXEL_FORMAT_BPP48;
 800bf80:	2308      	movs	r3, #8
 800bf82:	e0e0      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784433):         return SAIL_PIXEL_FORMAT_BPP64;
 800bf84:	2309      	movs	r3, #9
 800bf86:	e0de      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784464):         return SAIL_PIXEL_FORMAT_BPP72;
 800bf88:	230a      	movs	r3, #10
 800bf8a:	e0dc      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784534):         return SAIL_PIXEL_FORMAT_BPP96;
 800bf8c:	230b      	movs	r3, #11
 800bf8e:	e0da      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6952069880834):        return SAIL_PIXEL_FORMAT_BPP128;
 800bf90:	230c      	movs	r3, #12
 800bf92:	e0d8      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13257949335914442470): return SAIL_PIXEL_FORMAT_BPP1_INDEXED;
 800bf94:	230d      	movs	r3, #13
 800bf96:	e0d6      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257950742323060711): return SAIL_PIXEL_FORMAT_BPP2_INDEXED;
 800bf98:	230e      	movs	r3, #14
 800bf9a:	e0d4      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257953555140297193): return SAIL_PIXEL_FORMAT_BPP4_INDEXED;
 800bf9c:	230f      	movs	r3, #15
 800bf9e:	e0d2      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257959180774770157): return SAIL_PIXEL_FORMAT_BPP8_INDEXED;
 800bfa0:	2310      	movs	r3, #16
 800bfa2:	e0d0      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237225848150241308): return SAIL_PIXEL_FORMAT_BPP16_INDEXED;
 800bfa4:	2311      	movs	r3, #17
 800bfa6:	e0ce      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(12552958524517323328): return SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE;
 800bfa8:	2312      	movs	r3, #18
 800bfaa:	e0cc      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12554490103502587777): return SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE;
 800bfac:	2313      	movs	r3, #19
 800bfae:	e0ca      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12557553261473116675): return SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE;
 800bfb0:	2314      	movs	r3, #20
 800bfb2:	e0c8      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12563679577414174471): return SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE;
 800bfb4:	2315      	movs	r3, #21
 800bfb6:	e0c6      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8431824423011809526):  return SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE;
 800bfb8:	2316      	movs	r3, #22
 800bfba:	e0c4      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(9367569596161118198):  return SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA;
 800bfbc:	2317      	movs	r3, #23
 800bfbe:	e0c2      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12512997289017890810): return SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA;
 800bfc0:	2318      	movs	r3, #24
 800bfc2:	e0c0      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(3292614999547101481):  return SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA;
 800bfc4:	2319      	movs	r3, #25
 800bfc6:	e0be      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(5929884054553197927):  return SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA;
 800bfc8:	231a      	movs	r3, #26
 800bfca:	e0bc      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13257949683479278997): return SAIL_PIXEL_FORMAT_BPP16_RGB555;
 800bfcc:	231b      	movs	r3, #27
 800bfce:	e0ba      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257949682853687701): return SAIL_PIXEL_FORMAT_BPP16_BGR555;
 800bfd0:	231c      	movs	r3, #28
 800bfd2:	e0b8      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257949683479279030): return SAIL_PIXEL_FORMAT_BPP16_RGB565;
 800bfd4:	231d      	movs	r3, #29
 800bfd6:	e0b6      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
 800bfd8:	b90c68d7 	.word	0xb90c68d7
 800bfdc:	726ab92b 	.word	0x726ab92b
 800bfe0:	b90c68d8 	.word	0xb90c68d8
 800bfe4:	36e57d67 	.word	0x36e57d67
 800bfe8:	524b2e21 	.word	0x524b2e21
 800bfec:	36e57d68 	.word	0x36e57d68
 800bff0:	a620c129 	.word	0xa620c129
 800bff4:	2db1b7e5 	.word	0x2db1b7e5
 800bff8:	a620c12a 	.word	0xa620c12a
 800bffc:	5a52ff64 	.word	0x5a52ff64
 800c000:	03779901 	.word	0x03779901
 800c004:	5a52ff65 	.word	0x5a52ff65
 800c008:	5a52dfbb 	.word	0x5a52dfbb
 800c00c:	5a52dfbc 	.word	0x5a52dfbc
 800c010:	5a529bbb 	.word	0x5a529bbb
 800c014:	5a529bbc 	.word	0x5a529bbc
 800c018:	57d9a5c1 	.word	0x57d9a5c1
 800c01c:	57d9a5c2 	.word	0x57d9a5c2
 800c020:	576d12bb 	.word	0x576d12bb
 800c024:	576d12bc 	.word	0x576d12bc
 800c028:	55604c1e 	.word	0x55604c1e
 800c02c:	55604c1f 	.word	0x55604c1f
 800c030:	55602c75 	.word	0x55602c75
 800c034:	55602c76 	.word	0x55602c76
 800c038:	555fe875 	.word	0x555fe875
 800c03c:	555fe876 	.word	0x555fe876
 800c040:	4e417975 	.word	0x4e417975
 800c044:	4e417976 	.word	0x4e417976
 800c048:	a7a7dc02 	.word	0xa7a7dc02
 800c04c:	a7a7dc03 	.word	0xa7a7dc03
 800c050:	0cd68b96 	.word	0x0cd68b96
 800c054:	0cd68b97 	.word	0x0cd68b97
 800c058:	0cd68b50 	.word	0x0cd68b50
 800c05c:	0cd68b51 	.word	0x0cd68b51
 800c060:	0cd68b31 	.word	0x0cd68b31
 800c064:	0cd68b32 	.word	0x0cd68b32
 800c068:	0cd68af3 	.word	0x0cd68af3
 800c06c:	0cd68af4 	.word	0x0cd68af4
 800c070:	0cd68acc 	.word	0x0cd68acc
 800c074:	0cd68acd 	.word	0x0cd68acd
 800c078:	0cd68aad 	.word	0x0cd68aad
 800c07c:	0cd68aae 	.word	0x0cd68aae
 800c080:	7c829f60 	.word	0x7c829f60
 800c084:	7c829f58 	.word	0x7c829f58
 800c088:	837d60a8 	.word	0x837d60a8
 800c08c:	0cd68a8e 	.word	0x0cd68a8e
        case UINT64_C(13257949682853687734): return SAIL_PIXEL_FORMAT_BPP16_BGR565;
 800c090:	231e      	movs	r3, #30
 800c092:	e058      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535348735093):   return SAIL_PIXEL_FORMAT_BPP24_RGB;
 800c094:	231f      	movs	r3, #31
 800c096:	e056      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535348717685):   return SAIL_PIXEL_FORMAT_BPP24_BGR;
 800c098:	2320      	movs	r3, #32
 800c09a:	e054      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535431749563):   return SAIL_PIXEL_FORMAT_BPP48_RGB;
 800c09c:	2321      	movs	r3, #33	; 0x21
 800c09e:	e052      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535431732155):   return SAIL_PIXEL_FORMAT_BPP48_BGR;
 800c0a0:	2322      	movs	r3, #34	; 0x22
 800c0a2:	e050      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605665295060974):  return SAIL_PIXEL_FORMAT_BPP16_RGBX;
 800c0a4:	2323      	movs	r3, #35	; 0x23
 800c0a6:	e04e      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294486510):  return SAIL_PIXEL_FORMAT_BPP16_BGRX;
 800c0a8:	2324      	movs	r3, #36	; 0x24
 800c0aa:	e04c      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295288718):  return SAIL_PIXEL_FORMAT_BPP16_XRGB;
 800c0ac:	2325      	movs	r3, #37	; 0x25
 800c0ae:	e04a      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295271310):  return SAIL_PIXEL_FORMAT_BPP16_XBGR;
 800c0b0:	2326      	movs	r3, #38	; 0x26
 800c0b2:	e048      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295060951):  return SAIL_PIXEL_FORMAT_BPP16_RGBA;
 800c0b4:	2327      	movs	r3, #39	; 0x27
 800c0b6:	e046      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294486487):  return SAIL_PIXEL_FORMAT_BPP16_BGRA;
 800c0b8:	2328      	movs	r3, #40	; 0x28
 800c0ba:	e044      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294462167):  return SAIL_PIXEL_FORMAT_BPP16_ARGB;
 800c0bc:	2329      	movs	r3, #41	; 0x29
 800c0be:	e042      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294444759):  return SAIL_PIXEL_FORMAT_BPP16_ABGR;
 800c0c0:	232a      	movs	r3, #42	; 0x2a
 800c0c2:	e040      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721455340):  return SAIL_PIXEL_FORMAT_BPP32_RGBX;
 800c0c4:	232b      	movs	r3, #43	; 0x2b
 800c0c6:	e03e      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720880876):  return SAIL_PIXEL_FORMAT_BPP32_BGRX;
 800c0c8:	232c      	movs	r3, #44	; 0x2c
 800c0ca:	e03c      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721683084):  return SAIL_PIXEL_FORMAT_BPP32_XRGB;
 800c0cc:	232d      	movs	r3, #45	; 0x2d
 800c0ce:	e03a      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721665676):  return SAIL_PIXEL_FORMAT_BPP32_XBGR;
 800c0d0:	232e      	movs	r3, #46	; 0x2e
 800c0d2:	e038      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721455317):  return SAIL_PIXEL_FORMAT_BPP32_RGBA;
 800c0d4:	232f      	movs	r3, #47	; 0x2f
 800c0d6:	e036      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720880853):  return SAIL_PIXEL_FORMAT_BPP32_BGRA;
 800c0d8:	2330      	movs	r3, #48	; 0x30
 800c0da:	e034      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720856533):  return SAIL_PIXEL_FORMAT_BPP32_ARGB;
 800c0dc:	2331      	movs	r3, #49	; 0x31
 800c0de:	e032      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720839125):  return SAIL_PIXEL_FORMAT_BPP32_ABGR;
 800c0e0:	2332      	movs	r3, #50	; 0x32
 800c0e2:	e030      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605671674130033):  return SAIL_PIXEL_FORMAT_BPP64_RGBX;
 800c0e4:	2333      	movs	r3, #51	; 0x33
 800c0e6:	e02e      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673555569):  return SAIL_PIXEL_FORMAT_BPP64_BGRX;
 800c0e8:	2334      	movs	r3, #52	; 0x34
 800c0ea:	e02c      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674357777):  return SAIL_PIXEL_FORMAT_BPP64_XRGB;
 800c0ec:	2335      	movs	r3, #53	; 0x35
 800c0ee:	e02a      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674340369):  return SAIL_PIXEL_FORMAT_BPP64_XBGR;
 800c0f0:	2336      	movs	r3, #54	; 0x36
 800c0f2:	e028      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674130010):  return SAIL_PIXEL_FORMAT_BPP64_RGBA;
 800c0f4:	2337      	movs	r3, #55	; 0x37
 800c0f6:	e026      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673555546):  return SAIL_PIXEL_FORMAT_BPP64_BGRA;
 800c0f8:	2338      	movs	r3, #56	; 0x38
 800c0fa:	e024      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673531226):  return SAIL_PIXEL_FORMAT_BPP64_ARGB;
 800c0fc:	2339      	movs	r3, #57	; 0x39
 800c0fe:	e022      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673513818):  return SAIL_PIXEL_FORMAT_BPP64_ABGR;
 800c100:	233a      	movs	r3, #58	; 0x3a
 800c102:	e020      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667720923565):  return SAIL_PIXEL_FORMAT_BPP32_CMYK;
 800c104:	233b      	movs	r3, #59	; 0x3b
 800c106:	e01e      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673598258):  return SAIL_PIXEL_FORMAT_BPP64_CMYK;
 800c108:	233c      	movs	r3, #60	; 0x3c
 800c10a:	e01c      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13817569962846953645): return SAIL_PIXEL_FORMAT_BPP24_YCBCR;
 800c10c:	233d      	movs	r3, #61	; 0x3d
 800c10e:	e01a      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721702563):  return SAIL_PIXEL_FORMAT_BPP32_YCCK;
 800c110:	233e      	movs	r3, #62	; 0x3e
 800c112:	e018      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13237269438873232231): return SAIL_PIXEL_FORMAT_BPP24_CIE_LAB;
 800c114:	233f      	movs	r3, #63	; 0x3f
 800c116:	e016      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237356636207563173): return SAIL_PIXEL_FORMAT_BPP40_CIE_LAB;
 800c118:	2340      	movs	r3, #64	; 0x40
 800c11a:	e014      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13237269438873232911): return SAIL_PIXEL_FORMAT_BPP24_CIE_LUV;
 800c11c:	2341      	movs	r3, #65	; 0x41
 800c11e:	e012      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237356636207563853): return SAIL_PIXEL_FORMAT_BPP40_CIE_LUV;
 800c120:	2342      	movs	r3, #66	; 0x42
 800c122:	e010      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535348743198):   return SAIL_PIXEL_FORMAT_BPP24_YUV;
 800c124:	2343      	movs	r3, #67	; 0x43
 800c126:	e00e      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535383134907):   return SAIL_PIXEL_FORMAT_BPP30_YUV;
 800c128:	2344      	movs	r3, #68	; 0x44
 800c12a:	e00c      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535390250433):   return SAIL_PIXEL_FORMAT_BPP36_YUV;
 800c12c:	2345      	movs	r3, #69	; 0x45
 800c12e:	e00a      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535431757668):   return SAIL_PIXEL_FORMAT_BPP48_YUV;
 800c130:	2346      	movs	r3, #70	; 0x46
 800c132:	e008      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721722782):  return SAIL_PIXEL_FORMAT_BPP32_YUVA;
 800c134:	2347      	movs	r3, #71	; 0x47
 800c136:	e006      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605668934919965):  return SAIL_PIXEL_FORMAT_BPP40_YUVA;
 800c138:	2348      	movs	r3, #72	; 0x48
 800c13a:	e004      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605669248003109):  return SAIL_PIXEL_FORMAT_BPP48_YUVA;
 800c13c:	2349      	movs	r3, #73	; 0x49
 800c13e:	e002      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674397475):  return SAIL_PIXEL_FORMAT_BPP64_YUVA;
 800c140:	234a      	movs	r3, #74	; 0x4a
 800c142:	e000      	b.n	800c146 <sail_pixel_format_from_string+0xbf6>
    }

    return SAIL_PIXEL_FORMAT_UNKNOWN;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bdb0      	pop	{r4, r5, r7, pc}
 800c14e:	bf00      	nop

0800c150 <sail_compression_from_string>:
    }

    return NULL;
}

enum SailCompression sail_compression_from_string(const char *str) {
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f004 f8ca 	bl	80102f8 <sail_string_hash>
 800c164:	4603      	mov	r3, r0
 800c166:	82fb      	strh	r3, [r7, #22]
 800c168:	8afb      	ldrh	r3, [r7, #22]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	bf14      	ite	ne
 800c16e:	2301      	movne	r3, #1
 800c170:	2300      	moveq	r3, #0
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <sail_compression_from_string+0x2c>
 800c178:	2300      	movs	r3, #0
 800c17a:	e2b0      	b.n	800c6de <sail_compression_from_string+0x58e>
                        /* cleanup */ return SAIL_COMPRESSION_UNKNOWN);

    switch (hash) {
 800c17c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c180:	48ba      	ldr	r0, [pc, #744]	; (800c46c <sail_compression_from_string+0x31c>)
 800c182:	49bb      	ldr	r1, [pc, #748]	; (800c470 <sail_compression_from_string+0x320>)
 800c184:	428b      	cmp	r3, r1
 800c186:	bf08      	it	eq
 800c188:	4282      	cmpeq	r2, r0
 800c18a:	f000 82a1 	beq.w	800c6d0 <sail_compression_from_string+0x580>
 800c18e:	49b9      	ldr	r1, [pc, #740]	; (800c474 <sail_compression_from_string+0x324>)
 800c190:	428a      	cmp	r2, r1
 800c192:	49b7      	ldr	r1, [pc, #732]	; (800c470 <sail_compression_from_string+0x320>)
 800c194:	eb73 0101 	sbcs.w	r1, r3, r1
 800c198:	f080 82a0 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c19c:	48b6      	ldr	r0, [pc, #728]	; (800c478 <sail_compression_from_string+0x328>)
 800c19e:	49b7      	ldr	r1, [pc, #732]	; (800c47c <sail_compression_from_string+0x32c>)
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	bf08      	it	eq
 800c1a4:	4282      	cmpeq	r2, r0
 800c1a6:	f000 8251 	beq.w	800c64c <sail_compression_from_string+0x4fc>
 800c1aa:	49b5      	ldr	r1, [pc, #724]	; (800c480 <sail_compression_from_string+0x330>)
 800c1ac:	428a      	cmp	r2, r1
 800c1ae:	49b3      	ldr	r1, [pc, #716]	; (800c47c <sail_compression_from_string+0x32c>)
 800c1b0:	eb73 0101 	sbcs.w	r1, r3, r1
 800c1b4:	f080 8292 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c1b8:	48b2      	ldr	r0, [pc, #712]	; (800c484 <sail_compression_from_string+0x334>)
 800c1ba:	49b3      	ldr	r1, [pc, #716]	; (800c488 <sail_compression_from_string+0x338>)
 800c1bc:	428b      	cmp	r3, r1
 800c1be:	bf08      	it	eq
 800c1c0:	4282      	cmpeq	r2, r0
 800c1c2:	f000 8275 	beq.w	800c6b0 <sail_compression_from_string+0x560>
 800c1c6:	49b1      	ldr	r1, [pc, #708]	; (800c48c <sail_compression_from_string+0x33c>)
 800c1c8:	428a      	cmp	r2, r1
 800c1ca:	49af      	ldr	r1, [pc, #700]	; (800c488 <sail_compression_from_string+0x338>)
 800c1cc:	eb73 0101 	sbcs.w	r1, r3, r1
 800c1d0:	f080 8284 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c1d4:	48ae      	ldr	r0, [pc, #696]	; (800c490 <sail_compression_from_string+0x340>)
 800c1d6:	49af      	ldr	r1, [pc, #700]	; (800c494 <sail_compression_from_string+0x344>)
 800c1d8:	428b      	cmp	r3, r1
 800c1da:	bf08      	it	eq
 800c1dc:	4282      	cmpeq	r2, r0
 800c1de:	f000 823f 	beq.w	800c660 <sail_compression_from_string+0x510>
 800c1e2:	49ad      	ldr	r1, [pc, #692]	; (800c498 <sail_compression_from_string+0x348>)
 800c1e4:	428a      	cmp	r2, r1
 800c1e6:	49ab      	ldr	r1, [pc, #684]	; (800c494 <sail_compression_from_string+0x344>)
 800c1e8:	eb73 0101 	sbcs.w	r1, r3, r1
 800c1ec:	f080 8276 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c1f0:	48aa      	ldr	r0, [pc, #680]	; (800c49c <sail_compression_from_string+0x34c>)
 800c1f2:	49a8      	ldr	r1, [pc, #672]	; (800c494 <sail_compression_from_string+0x344>)
 800c1f4:	428b      	cmp	r3, r1
 800c1f6:	bf08      	it	eq
 800c1f8:	4282      	cmpeq	r2, r0
 800c1fa:	f000 822d 	beq.w	800c658 <sail_compression_from_string+0x508>
 800c1fe:	49a8      	ldr	r1, [pc, #672]	; (800c4a0 <sail_compression_from_string+0x350>)
 800c200:	428a      	cmp	r2, r1
 800c202:	49a4      	ldr	r1, [pc, #656]	; (800c494 <sail_compression_from_string+0x344>)
 800c204:	eb73 0101 	sbcs.w	r1, r3, r1
 800c208:	f080 8268 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c20c:	48a5      	ldr	r0, [pc, #660]	; (800c4a4 <sail_compression_from_string+0x354>)
 800c20e:	49a1      	ldr	r1, [pc, #644]	; (800c494 <sail_compression_from_string+0x344>)
 800c210:	428b      	cmp	r3, r1
 800c212:	bf08      	it	eq
 800c214:	4282      	cmpeq	r2, r0
 800c216:	f000 821d 	beq.w	800c654 <sail_compression_from_string+0x504>
 800c21a:	49a0      	ldr	r1, [pc, #640]	; (800c49c <sail_compression_from_string+0x34c>)
 800c21c:	428a      	cmp	r2, r1
 800c21e:	499d      	ldr	r1, [pc, #628]	; (800c494 <sail_compression_from_string+0x344>)
 800c220:	eb73 0101 	sbcs.w	r1, r3, r1
 800c224:	f080 825a 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c228:	489f      	ldr	r0, [pc, #636]	; (800c4a8 <sail_compression_from_string+0x358>)
 800c22a:	49a0      	ldr	r1, [pc, #640]	; (800c4ac <sail_compression_from_string+0x35c>)
 800c22c:	428b      	cmp	r3, r1
 800c22e:	bf08      	it	eq
 800c230:	4282      	cmpeq	r2, r0
 800c232:	f000 8247 	beq.w	800c6c4 <sail_compression_from_string+0x574>
 800c236:	499e      	ldr	r1, [pc, #632]	; (800c4b0 <sail_compression_from_string+0x360>)
 800c238:	428a      	cmp	r2, r1
 800c23a:	499c      	ldr	r1, [pc, #624]	; (800c4ac <sail_compression_from_string+0x35c>)
 800c23c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c240:	f080 824c 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c244:	489b      	ldr	r0, [pc, #620]	; (800c4b4 <sail_compression_from_string+0x364>)
 800c246:	499c      	ldr	r1, [pc, #624]	; (800c4b8 <sail_compression_from_string+0x368>)
 800c248:	428b      	cmp	r3, r1
 800c24a:	bf08      	it	eq
 800c24c:	4282      	cmpeq	r2, r0
 800c24e:	f000 8231 	beq.w	800c6b4 <sail_compression_from_string+0x564>
 800c252:	499a      	ldr	r1, [pc, #616]	; (800c4bc <sail_compression_from_string+0x36c>)
 800c254:	428a      	cmp	r2, r1
 800c256:	4998      	ldr	r1, [pc, #608]	; (800c4b8 <sail_compression_from_string+0x368>)
 800c258:	eb73 0101 	sbcs.w	r1, r3, r1
 800c25c:	f080 823e 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c260:	4897      	ldr	r0, [pc, #604]	; (800c4c0 <sail_compression_from_string+0x370>)
 800c262:	4998      	ldr	r1, [pc, #608]	; (800c4c4 <sail_compression_from_string+0x374>)
 800c264:	428b      	cmp	r3, r1
 800c266:	bf08      	it	eq
 800c268:	4282      	cmpeq	r2, r0
 800c26a:	f000 820f 	beq.w	800c68c <sail_compression_from_string+0x53c>
 800c26e:	4996      	ldr	r1, [pc, #600]	; (800c4c8 <sail_compression_from_string+0x378>)
 800c270:	428a      	cmp	r2, r1
 800c272:	4994      	ldr	r1, [pc, #592]	; (800c4c4 <sail_compression_from_string+0x374>)
 800c274:	eb73 0101 	sbcs.w	r1, r3, r1
 800c278:	f080 8230 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c27c:	4893      	ldr	r0, [pc, #588]	; (800c4cc <sail_compression_from_string+0x37c>)
 800c27e:	4994      	ldr	r1, [pc, #592]	; (800c4d0 <sail_compression_from_string+0x380>)
 800c280:	428b      	cmp	r3, r1
 800c282:	bf08      	it	eq
 800c284:	4282      	cmpeq	r2, r0
 800c286:	f000 81f7 	beq.w	800c678 <sail_compression_from_string+0x528>
 800c28a:	4992      	ldr	r1, [pc, #584]	; (800c4d4 <sail_compression_from_string+0x384>)
 800c28c:	428a      	cmp	r2, r1
 800c28e:	4990      	ldr	r1, [pc, #576]	; (800c4d0 <sail_compression_from_string+0x380>)
 800c290:	eb73 0101 	sbcs.w	r1, r3, r1
 800c294:	f080 8222 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c298:	488f      	ldr	r0, [pc, #572]	; (800c4d8 <sail_compression_from_string+0x388>)
 800c29a:	4990      	ldr	r1, [pc, #576]	; (800c4dc <sail_compression_from_string+0x38c>)
 800c29c:	428b      	cmp	r3, r1
 800c29e:	bf08      	it	eq
 800c2a0:	4282      	cmpeq	r2, r0
 800c2a2:	f000 81db 	beq.w	800c65c <sail_compression_from_string+0x50c>
 800c2a6:	498e      	ldr	r1, [pc, #568]	; (800c4e0 <sail_compression_from_string+0x390>)
 800c2a8:	428a      	cmp	r2, r1
 800c2aa:	498c      	ldr	r1, [pc, #560]	; (800c4dc <sail_compression_from_string+0x38c>)
 800c2ac:	eb73 0101 	sbcs.w	r1, r3, r1
 800c2b0:	f080 8214 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c2b4:	488b      	ldr	r0, [pc, #556]	; (800c4e4 <sail_compression_from_string+0x394>)
 800c2b6:	498c      	ldr	r1, [pc, #560]	; (800c4e8 <sail_compression_from_string+0x398>)
 800c2b8:	428b      	cmp	r3, r1
 800c2ba:	bf08      	it	eq
 800c2bc:	4282      	cmpeq	r2, r0
 800c2be:	f000 81f5 	beq.w	800c6ac <sail_compression_from_string+0x55c>
 800c2c2:	498a      	ldr	r1, [pc, #552]	; (800c4ec <sail_compression_from_string+0x39c>)
 800c2c4:	428a      	cmp	r2, r1
 800c2c6:	4988      	ldr	r1, [pc, #544]	; (800c4e8 <sail_compression_from_string+0x398>)
 800c2c8:	eb73 0101 	sbcs.w	r1, r3, r1
 800c2cc:	f080 8206 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c2d0:	4887      	ldr	r0, [pc, #540]	; (800c4f0 <sail_compression_from_string+0x3a0>)
 800c2d2:	4988      	ldr	r1, [pc, #544]	; (800c4f4 <sail_compression_from_string+0x3a4>)
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf08      	it	eq
 800c2d8:	4282      	cmpeq	r2, r0
 800c2da:	f000 81c5 	beq.w	800c668 <sail_compression_from_string+0x518>
 800c2de:	4986      	ldr	r1, [pc, #536]	; (800c4f8 <sail_compression_from_string+0x3a8>)
 800c2e0:	428a      	cmp	r2, r1
 800c2e2:	4984      	ldr	r1, [pc, #528]	; (800c4f4 <sail_compression_from_string+0x3a4>)
 800c2e4:	eb73 0101 	sbcs.w	r1, r3, r1
 800c2e8:	f080 81f8 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c2ec:	4883      	ldr	r0, [pc, #524]	; (800c4fc <sail_compression_from_string+0x3ac>)
 800c2ee:	4981      	ldr	r1, [pc, #516]	; (800c4f4 <sail_compression_from_string+0x3a4>)
 800c2f0:	428b      	cmp	r3, r1
 800c2f2:	bf08      	it	eq
 800c2f4:	4282      	cmpeq	r2, r0
 800c2f6:	f000 81b5 	beq.w	800c664 <sail_compression_from_string+0x514>
 800c2fa:	4981      	ldr	r1, [pc, #516]	; (800c500 <sail_compression_from_string+0x3b0>)
 800c2fc:	428a      	cmp	r2, r1
 800c2fe:	497d      	ldr	r1, [pc, #500]	; (800c4f4 <sail_compression_from_string+0x3a4>)
 800c300:	eb73 0101 	sbcs.w	r1, r3, r1
 800c304:	f080 81ea 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c308:	487e      	ldr	r0, [pc, #504]	; (800c504 <sail_compression_from_string+0x3b4>)
 800c30a:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c30e:	428b      	cmp	r3, r1
 800c310:	bf08      	it	eq
 800c312:	4282      	cmpeq	r2, r0
 800c314:	f000 8196 	beq.w	800c644 <sail_compression_from_string+0x4f4>
 800c318:	497b      	ldr	r1, [pc, #492]	; (800c508 <sail_compression_from_string+0x3b8>)
 800c31a:	428a      	cmp	r2, r1
 800c31c:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c320:	eb73 0101 	sbcs.w	r1, r3, r1
 800c324:	f080 81da 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c328:	4878      	ldr	r0, [pc, #480]	; (800c50c <sail_compression_from_string+0x3bc>)
 800c32a:	f24d 01ac 	movw	r1, #53420	; 0xd0ac
 800c32e:	428b      	cmp	r3, r1
 800c330:	bf08      	it	eq
 800c332:	4282      	cmpeq	r2, r0
 800c334:	f000 81c4 	beq.w	800c6c0 <sail_compression_from_string+0x570>
 800c338:	4975      	ldr	r1, [pc, #468]	; (800c510 <sail_compression_from_string+0x3c0>)
 800c33a:	428a      	cmp	r2, r1
 800c33c:	f24d 01ac 	movw	r1, #53420	; 0xd0ac
 800c340:	eb73 0101 	sbcs.w	r1, r3, r1
 800c344:	f080 81ca 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c348:	4872      	ldr	r0, [pc, #456]	; (800c514 <sail_compression_from_string+0x3c4>)
 800c34a:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c34e:	428b      	cmp	r3, r1
 800c350:	bf08      	it	eq
 800c352:	4282      	cmpeq	r2, r0
 800c354:	f000 819e 	beq.w	800c694 <sail_compression_from_string+0x544>
 800c358:	496f      	ldr	r1, [pc, #444]	; (800c518 <sail_compression_from_string+0x3c8>)
 800c35a:	428a      	cmp	r2, r1
 800c35c:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c360:	eb73 0101 	sbcs.w	r1, r3, r1
 800c364:	f080 81ba 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c368:	486c      	ldr	r0, [pc, #432]	; (800c51c <sail_compression_from_string+0x3cc>)
 800c36a:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c36e:	428b      	cmp	r3, r1
 800c370:	bf08      	it	eq
 800c372:	4282      	cmpeq	r2, r0
 800c374:	f000 818c 	beq.w	800c690 <sail_compression_from_string+0x540>
 800c378:	4969      	ldr	r1, [pc, #420]	; (800c520 <sail_compression_from_string+0x3d0>)
 800c37a:	428a      	cmp	r2, r1
 800c37c:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c380:	eb73 0101 	sbcs.w	r1, r3, r1
 800c384:	f080 81aa 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c388:	4866      	ldr	r0, [pc, #408]	; (800c524 <sail_compression_from_string+0x3d4>)
 800c38a:	f24d 01a8 	movw	r1, #53416	; 0xd0a8
 800c38e:	428b      	cmp	r3, r1
 800c390:	bf08      	it	eq
 800c392:	4282      	cmpeq	r2, r0
 800c394:	f000 816c 	beq.w	800c670 <sail_compression_from_string+0x520>
 800c398:	4963      	ldr	r1, [pc, #396]	; (800c528 <sail_compression_from_string+0x3d8>)
 800c39a:	428a      	cmp	r2, r1
 800c39c:	f24d 01a8 	movw	r1, #53416	; 0xd0a8
 800c3a0:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3a4:	f080 819a 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c3a8:	4860      	ldr	r0, [pc, #384]	; (800c52c <sail_compression_from_string+0x3dc>)
 800c3aa:	f240 6152 	movw	r1, #1618	; 0x652
 800c3ae:	428b      	cmp	r3, r1
 800c3b0:	bf08      	it	eq
 800c3b2:	4282      	cmpeq	r2, r0
 800c3b4:	f000 8164 	beq.w	800c680 <sail_compression_from_string+0x530>
 800c3b8:	495d      	ldr	r1, [pc, #372]	; (800c530 <sail_compression_from_string+0x3e0>)
 800c3ba:	428a      	cmp	r2, r1
 800c3bc:	f240 6152 	movw	r1, #1618	; 0x652
 800c3c0:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3c4:	f080 818a 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c3c8:	485a      	ldr	r0, [pc, #360]	; (800c534 <sail_compression_from_string+0x3e4>)
 800c3ca:	f240 6152 	movw	r1, #1618	; 0x652
 800c3ce:	428b      	cmp	r3, r1
 800c3d0:	bf08      	it	eq
 800c3d2:	4282      	cmpeq	r2, r0
 800c3d4:	f000 8152 	beq.w	800c67c <sail_compression_from_string+0x52c>
 800c3d8:	4957      	ldr	r1, [pc, #348]	; (800c538 <sail_compression_from_string+0x3e8>)
 800c3da:	428a      	cmp	r2, r1
 800c3dc:	f240 6152 	movw	r1, #1618	; 0x652
 800c3e0:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3e4:	f080 817a 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c3e8:	4854      	ldr	r0, [pc, #336]	; (800c53c <sail_compression_from_string+0x3ec>)
 800c3ea:	f240 6152 	movw	r1, #1618	; 0x652
 800c3ee:	428b      	cmp	r3, r1
 800c3f0:	bf08      	it	eq
 800c3f2:	4282      	cmpeq	r2, r0
 800c3f4:	f000 813e 	beq.w	800c674 <sail_compression_from_string+0x524>
 800c3f8:	4951      	ldr	r1, [pc, #324]	; (800c540 <sail_compression_from_string+0x3f0>)
 800c3fa:	428a      	cmp	r2, r1
 800c3fc:	f240 6152 	movw	r1, #1618	; 0x652
 800c400:	eb73 0101 	sbcs.w	r1, r3, r1
 800c404:	f080 816a 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c408:	494e      	ldr	r1, [pc, #312]	; (800c544 <sail_compression_from_string+0x3f4>)
 800c40a:	2b31      	cmp	r3, #49	; 0x31
 800c40c:	bf08      	it	eq
 800c40e:	428a      	cmpeq	r2, r1
 800c410:	f000 814a 	beq.w	800c6a8 <sail_compression_from_string+0x558>
 800c414:	494c      	ldr	r1, [pc, #304]	; (800c548 <sail_compression_from_string+0x3f8>)
 800c416:	428a      	cmp	r2, r1
 800c418:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c41c:	f080 815e 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c420:	494a      	ldr	r1, [pc, #296]	; (800c54c <sail_compression_from_string+0x3fc>)
 800c422:	2b01      	cmp	r3, #1
 800c424:	bf08      	it	eq
 800c426:	428a      	cmpeq	r2, r1
 800c428:	f000 8156 	beq.w	800c6d8 <sail_compression_from_string+0x588>
 800c42c:	4948      	ldr	r1, [pc, #288]	; (800c550 <sail_compression_from_string+0x400>)
 800c42e:	428a      	cmp	r2, r1
 800c430:	f173 0101 	sbcs.w	r1, r3, #1
 800c434:	f080 8152 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c438:	4946      	ldr	r1, [pc, #280]	; (800c554 <sail_compression_from_string+0x404>)
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	bf08      	it	eq
 800c43e:	428a      	cmpeq	r2, r1
 800c440:	f000 8148 	beq.w	800c6d4 <sail_compression_from_string+0x584>
 800c444:	4944      	ldr	r1, [pc, #272]	; (800c558 <sail_compression_from_string+0x408>)
 800c446:	428a      	cmp	r2, r1
 800c448:	f173 0101 	sbcs.w	r1, r3, #1
 800c44c:	f080 8146 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c450:	4942      	ldr	r1, [pc, #264]	; (800c55c <sail_compression_from_string+0x40c>)
 800c452:	2b01      	cmp	r3, #1
 800c454:	bf08      	it	eq
 800c456:	428a      	cmpeq	r2, r1
 800c458:	f000 80f6 	beq.w	800c648 <sail_compression_from_string+0x4f8>
 800c45c:	4940      	ldr	r1, [pc, #256]	; (800c560 <sail_compression_from_string+0x410>)
 800c45e:	428a      	cmp	r2, r1
 800c460:	f173 0101 	sbcs.w	r1, r3, #1
 800c464:	f080 813a 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c468:	493e      	ldr	r1, [pc, #248]	; (800c564 <sail_compression_from_string+0x414>)
 800c46a:	e07d      	b.n	800c568 <sail_compression_from_string+0x418>
 800c46c:	93950d84 	.word	0x93950d84
 800c470:	c02285d1 	.word	0xc02285d1
 800c474:	93950d85 	.word	0x93950d85
 800c478:	ccbd5d62 	.word	0xccbd5d62
 800c47c:	98213c90 	.word	0x98213c90
 800c480:	ccbd5d63 	.word	0xccbd5d63
 800c484:	353f029e 	.word	0x353f029e
 800c488:	726cff80 	.word	0x726cff80
 800c48c:	353f029f 	.word	0x353f029f
 800c490:	2932f8c3 	.word	0x2932f8c3
 800c494:	726ad286 	.word	0x726ad286
 800c498:	2932f8c4 	.word	0x2932f8c4
 800c49c:	292c37bc 	.word	0x292c37bc
 800c4a0:	292c37bd 	.word	0x292c37bd
 800c4a4:	292c37bb 	.word	0x292c37bb
 800c4a8:	9e967c9d 	.word	0x9e967c9d
 800c4ac:	0377ae64 	.word	0x0377ae64
 800c4b0:	9e967c9e 	.word	0x9e967c9e
 800c4b4:	cb4f9678 	.word	0xcb4f9678
 800c4b8:	0377aaa6 	.word	0x0377aaa6
 800c4bc:	cb4f9679 	.word	0xcb4f9679
 800c4c0:	db02ec1a 	.word	0xdb02ec1a
 800c4c4:	0377a339 	.word	0x0377a339
 800c4c8:	db02ec1b 	.word	0xdb02ec1b
 800c4cc:	f3d3e2d3 	.word	0xf3d3e2d3
 800c4d0:	0377a215 	.word	0x0377a215
 800c4d4:	f3d3e2d4 	.word	0xf3d3e2d4
 800c4d8:	013f9aec 	.word	0x013f9aec
 800c4dc:	037799c6 	.word	0x037799c6
 800c4e0:	013f9aed 	.word	0x013f9aed
 800c4e4:	7d8b7ff6 	.word	0x7d8b7ff6
 800c4e8:	001ae621 	.word	0x001ae621
 800c4ec:	7d8b7ff7 	.word	0x7d8b7ff7
 800c4f0:	26d361f3 	.word	0x26d361f3
 800c4f4:	001ae5a1 	.word	0x001ae5a1
 800c4f8:	26d361f4 	.word	0x26d361f4
 800c4fc:	26d361f1 	.word	0x26d361f1
 800c500:	26d361f2 	.word	0x26d361f2
 800c504:	4e417975 	.word	0x4e417975
 800c508:	4e417976 	.word	0x4e417976
 800c50c:	a3c28c37 	.word	0xa3c28c37
 800c510:	a3c28c38 	.word	0xa3c28c38
 800c514:	03ba3442 	.word	0x03ba3442
 800c518:	03ba3443 	.word	0x03ba3443
 800c51c:	03ba343c 	.word	0x03ba343c
 800c520:	03ba343d 	.word	0x03ba343d
 800c524:	1c4933ba 	.word	0x1c4933ba
 800c528:	1c4933bb 	.word	0x1c4933bb
 800c52c:	b83723e4 	.word	0xb83723e4
 800c530:	b83723e5 	.word	0xb83723e5
 800c534:	b83723ca 	.word	0xb83723ca
 800c538:	b83723cb 	.word	0xb83723cb
 800c53c:	b8372275 	.word	0xb8372275
 800c540:	b8372276 	.word	0xb8372276
 800c544:	0dbe817a 	.word	0x0dbe817a
 800c548:	0dbe817b 	.word	0x0dbe817b
 800c54c:	7c8fd5ca 	.word	0x7c8fd5ca
 800c550:	7c8fd5cb 	.word	0x7c8fd5cb
 800c554:	7c8df2d3 	.word	0x7c8df2d3
 800c558:	7c8df2d4 	.word	0x7c8df2d4
 800c55c:	7c892f75 	.word	0x7c892f75
 800c560:	7c892f76 	.word	0x7c892f76
 800c564:	7c890644 	.word	0x7c890644
 800c568:	2b01      	cmp	r3, #1
 800c56a:	bf08      	it	eq
 800c56c:	428a      	cmpeq	r2, r1
 800c56e:	f000 8099 	beq.w	800c6a4 <sail_compression_from_string+0x554>
 800c572:	495d      	ldr	r1, [pc, #372]	; (800c6e8 <sail_compression_from_string+0x598>)
 800c574:	428a      	cmp	r2, r1
 800c576:	f173 0101 	sbcs.w	r1, r3, #1
 800c57a:	f080 80af 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c57e:	495b      	ldr	r1, [pc, #364]	; (800c6ec <sail_compression_from_string+0x59c>)
 800c580:	2b01      	cmp	r3, #1
 800c582:	bf08      	it	eq
 800c584:	428a      	cmpeq	r2, r1
 800c586:	f000 8089 	beq.w	800c69c <sail_compression_from_string+0x54c>
 800c58a:	4959      	ldr	r1, [pc, #356]	; (800c6f0 <sail_compression_from_string+0x5a0>)
 800c58c:	428a      	cmp	r2, r1
 800c58e:	f173 0101 	sbcs.w	r1, r3, #1
 800c592:	f080 80a3 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c596:	4957      	ldr	r1, [pc, #348]	; (800c6f4 <sail_compression_from_string+0x5a4>)
 800c598:	2b01      	cmp	r3, #1
 800c59a:	bf08      	it	eq
 800c59c:	428a      	cmpeq	r2, r1
 800c59e:	d07b      	beq.n	800c698 <sail_compression_from_string+0x548>
 800c5a0:	4955      	ldr	r1, [pc, #340]	; (800c6f8 <sail_compression_from_string+0x5a8>)
 800c5a2:	428a      	cmp	r2, r1
 800c5a4:	f173 0101 	sbcs.w	r1, r3, #1
 800c5a8:	f080 8098 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c5ac:	4953      	ldr	r1, [pc, #332]	; (800c6fc <sail_compression_from_string+0x5ac>)
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	bf08      	it	eq
 800c5b2:	428a      	cmpeq	r2, r1
 800c5b4:	d068      	beq.n	800c688 <sail_compression_from_string+0x538>
 800c5b6:	4952      	ldr	r1, [pc, #328]	; (800c700 <sail_compression_from_string+0x5b0>)
 800c5b8:	428a      	cmp	r2, r1
 800c5ba:	f173 0101 	sbcs.w	r1, r3, #1
 800c5be:	f080 808d 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c5c2:	4950      	ldr	r1, [pc, #320]	; (800c704 <sail_compression_from_string+0x5b4>)
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	bf08      	it	eq
 800c5c8:	428a      	cmpeq	r2, r1
 800c5ca:	d05b      	beq.n	800c684 <sail_compression_from_string+0x534>
 800c5cc:	494e      	ldr	r1, [pc, #312]	; (800c708 <sail_compression_from_string+0x5b8>)
 800c5ce:	428a      	cmp	r2, r1
 800c5d0:	f173 0101 	sbcs.w	r1, r3, #1
 800c5d4:	f080 8082 	bcs.w	800c6dc <sail_compression_from_string+0x58c>
 800c5d8:	494c      	ldr	r1, [pc, #304]	; (800c70c <sail_compression_from_string+0x5bc>)
 800c5da:	4411      	add	r1, r2
 800c5dc:	4319      	orrs	r1, r3
 800c5de:	d075      	beq.n	800c6cc <sail_compression_from_string+0x57c>
 800c5e0:	494b      	ldr	r1, [pc, #300]	; (800c710 <sail_compression_from_string+0x5c0>)
 800c5e2:	428a      	cmp	r2, r1
 800c5e4:	f173 0100 	sbcs.w	r1, r3, #0
 800c5e8:	d278      	bcs.n	800c6dc <sail_compression_from_string+0x58c>
 800c5ea:	494a      	ldr	r1, [pc, #296]	; (800c714 <sail_compression_from_string+0x5c4>)
 800c5ec:	4411      	add	r1, r2
 800c5ee:	4319      	orrs	r1, r3
 800c5f0:	d06a      	beq.n	800c6c8 <sail_compression_from_string+0x578>
 800c5f2:	4949      	ldr	r1, [pc, #292]	; (800c718 <sail_compression_from_string+0x5c8>)
 800c5f4:	428a      	cmp	r2, r1
 800c5f6:	f173 0100 	sbcs.w	r1, r3, #0
 800c5fa:	d26f      	bcs.n	800c6dc <sail_compression_from_string+0x58c>
 800c5fc:	4947      	ldr	r1, [pc, #284]	; (800c71c <sail_compression_from_string+0x5cc>)
 800c5fe:	4411      	add	r1, r2
 800c600:	4319      	orrs	r1, r3
 800c602:	d05b      	beq.n	800c6bc <sail_compression_from_string+0x56c>
 800c604:	4946      	ldr	r1, [pc, #280]	; (800c720 <sail_compression_from_string+0x5d0>)
 800c606:	428a      	cmp	r2, r1
 800c608:	f173 0100 	sbcs.w	r1, r3, #0
 800c60c:	d266      	bcs.n	800c6dc <sail_compression_from_string+0x58c>
 800c60e:	4945      	ldr	r1, [pc, #276]	; (800c724 <sail_compression_from_string+0x5d4>)
 800c610:	4411      	add	r1, r2
 800c612:	4319      	orrs	r1, r3
 800c614:	d050      	beq.n	800c6b8 <sail_compression_from_string+0x568>
 800c616:	4944      	ldr	r1, [pc, #272]	; (800c728 <sail_compression_from_string+0x5d8>)
 800c618:	428a      	cmp	r2, r1
 800c61a:	f173 0100 	sbcs.w	r1, r3, #0
 800c61e:	d25d      	bcs.n	800c6dc <sail_compression_from_string+0x58c>
 800c620:	4942      	ldr	r1, [pc, #264]	; (800c72c <sail_compression_from_string+0x5dc>)
 800c622:	4411      	add	r1, r2
 800c624:	4319      	orrs	r1, r3
 800c626:	d03b      	beq.n	800c6a0 <sail_compression_from_string+0x550>
 800c628:	4941      	ldr	r1, [pc, #260]	; (800c730 <sail_compression_from_string+0x5e0>)
 800c62a:	428a      	cmp	r2, r1
 800c62c:	f173 0100 	sbcs.w	r1, r3, #0
 800c630:	d254      	bcs.n	800c6dc <sail_compression_from_string+0x58c>
 800c632:	4940      	ldr	r1, [pc, #256]	; (800c734 <sail_compression_from_string+0x5e4>)
 800c634:	4411      	add	r1, r2
 800c636:	4319      	orrs	r1, r3
 800c638:	d00a      	beq.n	800c650 <sail_compression_from_string+0x500>
 800c63a:	493f      	ldr	r1, [pc, #252]	; (800c738 <sail_compression_from_string+0x5e8>)
 800c63c:	4411      	add	r1, r2
 800c63e:	430b      	orrs	r3, r1
 800c640:	d014      	beq.n	800c66c <sail_compression_from_string+0x51c>
 800c642:	e04b      	b.n	800c6dc <sail_compression_from_string+0x58c>
        case UINT64_C(229442760833397):      return SAIL_COMPRESSION_UNKNOWN;
 800c644:	2300      	movs	r3, #0
 800c646:	e04a      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384332661):           return SAIL_COMPRESSION_NONE;
 800c648:	2301      	movs	r3, #1
 800c64a:	e048      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(10962109560604417378): return SAIL_COMPRESSION_ADOBE_DEFLATE;
 800c64c:	2302      	movs	r3, #2
 800c64e:	e046      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193450669):            return SAIL_COMPRESSION_AV1;
 800c650:	2303      	movs	r3, #3
 800c652:	e044      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513328571):  return SAIL_COMPRESSION_CCITT_FAX3;
 800c654:	2304      	movs	r3, #4
 800c656:	e042      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513328572):  return SAIL_COMPRESSION_CCITT_FAX4;
 800c658:	2305      	movs	r3, #5
 800c65a:	e040      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(249837380045871852):   return SAIL_COMPRESSION_CCITT_RLE;
 800c65c:	2306      	movs	r3, #6
 800c65e:	e03e      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513771203):  return SAIL_COMPRESSION_CCITT_RLEW;
 800c660:	2307      	movs	r3, #7
 800c662:	e03c      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(7570829698359793):     return SAIL_COMPRESSION_CCITT_T4;
 800c664:	2308      	movs	r3, #8
 800c666:	e03a      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(7570829698359795):     return SAIL_COMPRESSION_CCITT_T6;
 800c668:	2309      	movs	r3, #9
 800c66a:	e038      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193453343):            return SAIL_COMPRESSION_DCS;
 800c66c:	230a      	movs	r3, #10
 800c66e:	e036      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(229420447642554):      return SAIL_COMPRESSION_DEFLATE;
 800c670:	230b      	movs	r3, #11
 800c672:	e034      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6952347705973):        return SAIL_COMPRESSION_IT8_BL;
 800c674:	230c      	movs	r3, #12
 800c676:	e032      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(249846519511114451):   return SAIL_COMPRESSION_IT8_CTPAD;
 800c678:	230d      	movs	r3, #13
 800c67a:	e030      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6952347706314):        return SAIL_COMPRESSION_IT8_LW;
 800c67c:	230e      	movs	r3, #14
 800c67e:	e02e      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6952347706340):        return SAIL_COMPRESSION_IT8_MP;
 800c680:	230f      	movs	r3, #15
 800c682:	e02c      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384174593):           return SAIL_COMPRESSION_JBIG;
 800c684:	2310      	movs	r3, #16
 800c686:	e02a      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384189707):           return SAIL_COMPRESSION_JPEG;
 800c688:	2311      	movs	r3, #17
 800c68a:	e028      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(249847773225217050):   return SAIL_COMPRESSION_JPEG_2000;
 800c68c:	2312      	movs	r3, #18
 800c68e:	e026      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(229428625552444):      return SAIL_COMPRESSION_JPEG_XL;
 800c690:	2313      	movs	r3, #19
 800c692:	e024      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(229428625552450):      return SAIL_COMPRESSION_JPEG_XR;
 800c694:	2314      	movs	r3, #20
 800c696:	e022      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384250027):           return SAIL_COMPRESSION_LERC;
 800c698:	2315      	movs	r3, #21
 800c69a:	e020      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384272729):           return SAIL_COMPRESSION_LZMA;
 800c69c:	2316      	movs	r3, #22
 800c69e:	e01e      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193462818):            return SAIL_COMPRESSION_LZW;
 800c6a0:	2317      	movs	r3, #23
 800c6a2:	e01c      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384322116):           return SAIL_COMPRESSION_NEXT;
 800c6a4:	2318      	movs	r3, #24
 800c6a6:	e01a      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(210683986298):         return SAIL_COMPRESSION_OJPEG;
 800c6a8:	2319      	movs	r3, #25
 800c6aa:	e018      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(7571380909080566):     return SAIL_COMPRESSION_PACKBITS;
 800c6ac:	231a      	movs	r3, #26
 800c6ae:	e016      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(8245245943922754206):  return SAIL_COMPRESSION_PIXAR_FILM;
 800c6b0:	231b      	movs	r3, #27
 800c6b2:	e014      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(249855937694635640):   return SAIL_COMPRESSION_PIXAR_LOG;
 800c6b4:	231c      	movs	r3, #28
 800c6b6:	e012      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193467886):            return SAIL_COMPRESSION_QOI;
 800c6b8:	231d      	movs	r3, #29
 800c6ba:	e010      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193468872):            return SAIL_COMPRESSION_RLE;
 800c6bc:	231e      	movs	r3, #30
 800c6be:	e00e      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(229439900388407):      return SAIL_COMPRESSION_SGI_LOG;
 800c6c0:	231f      	movs	r3, #31
 800c6c2:	e00c      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(249860051522976925):   return SAIL_COMPRESSION_SGI_LOG24;
 800c6c4:	2320      	movs	r3, #32
 800c6c6:	e00a      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193470240):            return SAIL_COMPRESSION_T43;
 800c6c8:	2321      	movs	r3, #33	; 0x21
 800c6ca:	e008      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(193470374):            return SAIL_COMPRESSION_T85;
 800c6cc:	2322      	movs	r3, #34	; 0x22
 800c6ce:	e006      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(13844775339661004164): return SAIL_COMPRESSION_THUNDERSCAN;
 800c6d0:	2323      	movs	r3, #35	; 0x23
 800c6d2:	e004      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384644819):           return SAIL_COMPRESSION_WEBP;
 800c6d4:	2324      	movs	r3, #36	; 0x24
 800c6d6:	e002      	b.n	800c6de <sail_compression_from_string+0x58e>
        case UINT64_C(6384768458):           return SAIL_COMPRESSION_ZSTD;
 800c6d8:	2325      	movs	r3, #37	; 0x25
 800c6da:	e000      	b.n	800c6de <sail_compression_from_string+0x58e>
    }

    return SAIL_COMPRESSION_UNKNOWN;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	7c890645 	.word	0x7c890645
 800c6ec:	7c884559 	.word	0x7c884559
 800c6f0:	7c88455a 	.word	0x7c88455a
 800c6f4:	7c87ecab 	.word	0x7c87ecab
 800c6f8:	7c87ecac 	.word	0x7c87ecac
 800c6fc:	7c87010b 	.word	0x7c87010b
 800c700:	7c87010c 	.word	0x7c87010c
 800c704:	7c86c601 	.word	0x7c86c601
 800c708:	7c86c602 	.word	0x7c86c602
 800c70c:	f477e05a 	.word	0xf477e05a
 800c710:	0b881fa7 	.word	0x0b881fa7
 800c714:	f477e0e0 	.word	0xf477e0e0
 800c718:	0b881f21 	.word	0x0b881f21
 800c71c:	f477e638 	.word	0xf477e638
 800c720:	0b8819c9 	.word	0x0b8819c9
 800c724:	f477ea12 	.word	0xf477ea12
 800c728:	0b8815ef 	.word	0x0b8815ef
 800c72c:	f477fdde 	.word	0xf477fdde
 800c730:	0b880223 	.word	0x0b880223
 800c734:	f4782d53 	.word	0xf4782d53
 800c738:	f47822e1 	.word	0xf47822e1

0800c73c <sail_codec_feature_from_string>:
    }

    return NULL;
}

enum SailCodecFeature sail_codec_feature_from_string(const char *str) {
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800c744:	f107 0308 	add.w	r3, r7, #8
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f003 fdd4 	bl	80102f8 <sail_string_hash>
 800c750:	4603      	mov	r3, r0
 800c752:	82fb      	strh	r3, [r7, #22]
 800c754:	8afb      	ldrh	r3, [r7, #22]
 800c756:	2b00      	cmp	r3, #0
 800c758:	bf14      	ite	ne
 800c75a:	2301      	movne	r3, #1
 800c75c:	2300      	moveq	r3, #0
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <sail_codec_feature_from_string+0x2c>
 800c764:	2301      	movs	r3, #1
 800c766:	e05b      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
                        /* cleanup */ return SAIL_CODEC_FEATURE_UNKNOWN);

    switch (hash) {
 800c768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c76c:	482e      	ldr	r0, [pc, #184]	; (800c828 <sail_codec_feature_from_string+0xec>)
 800c76e:	492f      	ldr	r1, [pc, #188]	; (800c82c <sail_codec_feature_from_string+0xf0>)
 800c770:	428b      	cmp	r3, r1
 800c772:	bf08      	it	eq
 800c774:	4282      	cmpeq	r2, r0
 800c776:	d04a      	beq.n	800c80e <sail_codec_feature_from_string+0xd2>
 800c778:	492d      	ldr	r1, [pc, #180]	; (800c830 <sail_codec_feature_from_string+0xf4>)
 800c77a:	428a      	cmp	r2, r1
 800c77c:	492b      	ldr	r1, [pc, #172]	; (800c82c <sail_codec_feature_from_string+0xf0>)
 800c77e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c782:	d24c      	bcs.n	800c81e <sail_codec_feature_from_string+0xe2>
 800c784:	482b      	ldr	r0, [pc, #172]	; (800c834 <sail_codec_feature_from_string+0xf8>)
 800c786:	492c      	ldr	r1, [pc, #176]	; (800c838 <sail_codec_feature_from_string+0xfc>)
 800c788:	428b      	cmp	r3, r1
 800c78a:	bf08      	it	eq
 800c78c:	4282      	cmpeq	r2, r0
 800c78e:	d042      	beq.n	800c816 <sail_codec_feature_from_string+0xda>
 800c790:	492a      	ldr	r1, [pc, #168]	; (800c83c <sail_codec_feature_from_string+0x100>)
 800c792:	428a      	cmp	r2, r1
 800c794:	4928      	ldr	r1, [pc, #160]	; (800c838 <sail_codec_feature_from_string+0xfc>)
 800c796:	eb73 0101 	sbcs.w	r1, r3, r1
 800c79a:	d240      	bcs.n	800c81e <sail_codec_feature_from_string+0xe2>
 800c79c:	4828      	ldr	r0, [pc, #160]	; (800c840 <sail_codec_feature_from_string+0x104>)
 800c79e:	4929      	ldr	r1, [pc, #164]	; (800c844 <sail_codec_feature_from_string+0x108>)
 800c7a0:	428b      	cmp	r3, r1
 800c7a2:	bf08      	it	eq
 800c7a4:	4282      	cmpeq	r2, r0
 800c7a6:	d034      	beq.n	800c812 <sail_codec_feature_from_string+0xd6>
 800c7a8:	4927      	ldr	r1, [pc, #156]	; (800c848 <sail_codec_feature_from_string+0x10c>)
 800c7aa:	428a      	cmp	r2, r1
 800c7ac:	4925      	ldr	r1, [pc, #148]	; (800c844 <sail_codec_feature_from_string+0x108>)
 800c7ae:	eb73 0101 	sbcs.w	r1, r3, r1
 800c7b2:	d234      	bcs.n	800c81e <sail_codec_feature_from_string+0xe2>
 800c7b4:	4825      	ldr	r0, [pc, #148]	; (800c84c <sail_codec_feature_from_string+0x110>)
 800c7b6:	4926      	ldr	r1, [pc, #152]	; (800c850 <sail_codec_feature_from_string+0x114>)
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	bf08      	it	eq
 800c7bc:	4282      	cmpeq	r2, r0
 800c7be:	d024      	beq.n	800c80a <sail_codec_feature_from_string+0xce>
 800c7c0:	4924      	ldr	r1, [pc, #144]	; (800c854 <sail_codec_feature_from_string+0x118>)
 800c7c2:	428a      	cmp	r2, r1
 800c7c4:	4922      	ldr	r1, [pc, #136]	; (800c850 <sail_codec_feature_from_string+0x114>)
 800c7c6:	eb73 0101 	sbcs.w	r1, r3, r1
 800c7ca:	d228      	bcs.n	800c81e <sail_codec_feature_from_string+0xe2>
 800c7cc:	4822      	ldr	r0, [pc, #136]	; (800c858 <sail_codec_feature_from_string+0x11c>)
 800c7ce:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c7d2:	428b      	cmp	r3, r1
 800c7d4:	bf08      	it	eq
 800c7d6:	4282      	cmpeq	r2, r0
 800c7d8:	d013      	beq.n	800c802 <sail_codec_feature_from_string+0xc6>
 800c7da:	4920      	ldr	r1, [pc, #128]	; (800c85c <sail_codec_feature_from_string+0x120>)
 800c7dc:	428a      	cmp	r2, r1
 800c7de:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c7e2:	eb73 0101 	sbcs.w	r1, r3, r1
 800c7e6:	d21a      	bcs.n	800c81e <sail_codec_feature_from_string+0xe2>
 800c7e8:	491d      	ldr	r1, [pc, #116]	; (800c860 <sail_codec_feature_from_string+0x124>)
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	bf08      	it	eq
 800c7ee:	428a      	cmpeq	r2, r1
 800c7f0:	d013      	beq.n	800c81a <sail_codec_feature_from_string+0xde>
 800c7f2:	481c      	ldr	r0, [pc, #112]	; (800c864 <sail_codec_feature_from_string+0x128>)
 800c7f4:	f240 6152 	movw	r1, #1618	; 0x652
 800c7f8:	428b      	cmp	r3, r1
 800c7fa:	bf08      	it	eq
 800c7fc:	4282      	cmpeq	r2, r0
 800c7fe:	d002      	beq.n	800c806 <sail_codec_feature_from_string+0xca>
 800c800:	e00d      	b.n	800c81e <sail_codec_feature_from_string+0xe2>
        case UINT64_C(229442760833397):      return SAIL_CODEC_FEATURE_UNKNOWN;
 800c802:	2301      	movs	r3, #1
 800c804:	e00c      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
        case UINT64_C(6952739426029):        return SAIL_CODEC_FEATURE_STATIC;
 800c806:	2302      	movs	r3, #2
 800c808:	e00a      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
        case UINT64_C(7570758658679240):     return SAIL_CODEC_FEATURE_ANIMATED;
 800c80a:	2304      	movs	r3, #4
 800c80c:	e008      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
        case UINT64_C(13834645239609548286): return SAIL_CODEC_FEATURE_MULTI_PAGED;
 800c80e:	2308      	movs	r3, #8
 800c810:	e006      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
        case UINT64_C(249851542786072787):   return SAIL_CODEC_FEATURE_META_DATA;
 800c812:	2310      	movs	r3, #16
 800c814:	e004      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
        case UINT64_C(8244927930303708800):  return SAIL_CODEC_FEATURE_INTERLACED;
 800c816:	2320      	movs	r3, #32
 800c818:	e002      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
        case UINT64_C(6384139556):           return SAIL_CODEC_FEATURE_ICCP;
 800c81a:	2340      	movs	r3, #64	; 0x40
 800c81c:	e000      	b.n	800c820 <sail_codec_feature_from_string+0xe4>
    }

    return SAIL_CODEC_FEATURE_UNKNOWN;
 800c81e:	2301      	movs	r3, #1
}
 800c820:	4618      	mov	r0, r3
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	dc79ddfe 	.word	0xdc79ddfe
 800c82c:	bffe888b 	.word	0xbffe888b
 800c830:	dc79ddff 	.word	0xdc79ddff
 800c834:	e472fe80 	.word	0xe472fe80
 800c838:	726bde44 	.word	0x726bde44
 800c83c:	e472fe81 	.word	0xe472fe81
 800c840:	8658e0d3 	.word	0x8658e0d3
 800c844:	0377a6a7 	.word	0x0377a6a7
 800c848:	8658e0d4 	.word	0x8658e0d4
 800c84c:	9c87e1c8 	.word	0x9c87e1c8
 800c850:	001ae590 	.word	0x001ae590
 800c854:	9c87e1c9 	.word	0x9c87e1c9
 800c858:	4e417975 	.word	0x4e417975
 800c85c:	4e417976 	.word	0x4e417976
 800c860:	7c863d24 	.word	0x7c863d24
 800c864:	cf904eed 	.word	0xcf904eed

0800c868 <sail_alloc_compression_level>:
    SOFTWARE.
*/

#include "sail-common.h"

sail_status_t sail_alloc_compression_level(struct sail_compression_level **compression_level) {
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(compression_level);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	bf0c      	ite	eq
 800c876:	2301      	moveq	r3, #1
 800c878:	2300      	movne	r3, #0
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d011      	beq.n	800c8a4 <sail_alloc_compression_level+0x3c>
 800c880:	4b25      	ldr	r3, [pc, #148]	; (800c918 <sail_alloc_compression_level+0xb0>)
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	4b25      	ldr	r3, [pc, #148]	; (800c91c <sail_alloc_compression_level+0xb4>)
 800c886:	221e      	movs	r2, #30
 800c888:	4925      	ldr	r1, [pc, #148]	; (800c920 <sail_alloc_compression_level+0xb8>)
 800c88a:	2001      	movs	r0, #1
 800c88c:	f002 f9be 	bl	800ec0c <sail_log>
 800c890:	4b24      	ldr	r3, [pc, #144]	; (800c924 <sail_alloc_compression_level+0xbc>)
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	4b24      	ldr	r3, [pc, #144]	; (800c928 <sail_alloc_compression_level+0xc0>)
 800c896:	221e      	movs	r2, #30
 800c898:	4921      	ldr	r1, [pc, #132]	; (800c920 <sail_alloc_compression_level+0xb8>)
 800c89a:	2001      	movs	r0, #1
 800c89c:	f002 f9b6 	bl	800ec0c <sail_log>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e035      	b.n	800c910 <sail_alloc_compression_level+0xa8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_compression_level), &ptr));
 800c8a4:	f107 0308 	add.w	r3, r7, #8
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	2020      	movs	r0, #32
 800c8ac:	f002 faa6 	bl	800edfc <sail_malloc>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	81fb      	strh	r3, [r7, #14]
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	bf14      	ite	ne
 800c8ba:	2301      	movne	r3, #1
 800c8bc:	2300      	moveq	r3, #0
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <sail_alloc_compression_level+0x60>
 800c8c4:	89fb      	ldrh	r3, [r7, #14]
 800c8c6:	e023      	b.n	800c910 <sail_alloc_compression_level+0xa8>
    *compression_level = ptr;
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	601a      	str	r2, [r3, #0]

    (*compression_level)->min_level     = 0;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6819      	ldr	r1, [r3, #0]
 800c8d2:	f04f 0200 	mov.w	r2, #0
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	e9c1 2300 	strd	r2, r3, [r1]
    (*compression_level)->max_level     = 0;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	f04f 0300 	mov.w	r3, #0
 800c8ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*compression_level)->default_level = 0;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6819      	ldr	r1, [r3, #0]
 800c8f2:	f04f 0200 	mov.w	r2, #0
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    (*compression_level)->step          = 0;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6819      	ldr	r1, [r3, #0]
 800c902:	f04f 0200 	mov.w	r2, #0
 800c906:	f04f 0300 	mov.w	r3, #0
 800c90a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return SAIL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	0801813c 	.word	0x0801813c
 800c91c:	080180c8 	.word	0x080180c8
 800c920:	080180e0 	.word	0x080180e0
 800c924:	08018154 	.word	0x08018154
 800c928:	08018150 	.word	0x08018150

0800c92c <sail_destroy_compression_level>:

void sail_destroy_compression_level(struct sail_compression_level *compression_level) {
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]

    if (compression_level == NULL) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d003      	beq.n	800c942 <sail_destroy_compression_level+0x16>
        return;
    }

    sail_free(compression_level);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f002 fae6 	bl	800ef0c <sail_free>
 800c940:	e000      	b.n	800c944 <sail_destroy_compression_level+0x18>
        return;
 800c942:	bf00      	nop
}
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
	...

0800c94c <alloc_context>:

    return SAIL_OK;
}
#endif

static sail_status_t alloc_context(struct sail_context **context) {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af02      	add	r7, sp, #8
 800c952:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	bf0c      	ite	eq
 800c95a:	2301      	moveq	r3, #1
 800c95c:	2300      	movne	r3, #0
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b00      	cmp	r3, #0
 800c962:	d011      	beq.n	800c988 <alloc_context+0x3c>
 800c964:	4b19      	ldr	r3, [pc, #100]	; (800c9cc <alloc_context+0x80>)
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	4b19      	ldr	r3, [pc, #100]	; (800c9d0 <alloc_context+0x84>)
 800c96a:	22be      	movs	r2, #190	; 0xbe
 800c96c:	4919      	ldr	r1, [pc, #100]	; (800c9d4 <alloc_context+0x88>)
 800c96e:	2001      	movs	r0, #1
 800c970:	f002 f94c 	bl	800ec0c <sail_log>
 800c974:	4b18      	ldr	r3, [pc, #96]	; (800c9d8 <alloc_context+0x8c>)
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4b18      	ldr	r3, [pc, #96]	; (800c9dc <alloc_context+0x90>)
 800c97a:	22be      	movs	r2, #190	; 0xbe
 800c97c:	4915      	ldr	r1, [pc, #84]	; (800c9d4 <alloc_context+0x88>)
 800c97e:	2001      	movs	r0, #1
 800c980:	f002 f944 	bl	800ec0c <sail_log>
 800c984:	2301      	movs	r3, #1
 800c986:	e01d      	b.n	800c9c4 <alloc_context+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_context), &ptr));
 800c988:	f107 0308 	add.w	r3, r7, #8
 800c98c:	4619      	mov	r1, r3
 800c98e:	2008      	movs	r0, #8
 800c990:	f002 fa34 	bl	800edfc <sail_malloc>
 800c994:	4603      	mov	r3, r0
 800c996:	81fb      	strh	r3, [r7, #14]
 800c998:	89fb      	ldrh	r3, [r7, #14]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bf14      	ite	ne
 800c99e:	2301      	movne	r3, #1
 800c9a0:	2300      	moveq	r3, #0
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <alloc_context+0x60>
 800c9a8:	89fb      	ldrh	r3, [r7, #14]
 800c9aa:	e00b      	b.n	800c9c4 <alloc_context+0x78>
    *context = ptr;
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	601a      	str	r2, [r3, #0]

    (*context)->initialized     = false;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
    (*context)->codec_bundle_node = NULL;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	080181d4 	.word	0x080181d4
 800c9d0:	08018168 	.word	0x08018168
 800c9d4:	08018180 	.word	0x08018180
 800c9d8:	080181e0 	.word	0x080181e0
 800c9dc:	080181dc 	.word	0x080181dc

0800c9e0 <allocate_global_context>:

static sail_status_t allocate_global_context(struct sail_context **context) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af02      	add	r7, sp, #8
 800c9e6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bf0c      	ite	eq
 800c9ee:	2301      	moveq	r3, #1
 800c9f0:	2300      	movne	r3, #0
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d011      	beq.n	800ca1c <allocate_global_context+0x3c>
 800c9f8:	4b1b      	ldr	r3, [pc, #108]	; (800ca68 <allocate_global_context+0x88>)
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4b1b      	ldr	r3, [pc, #108]	; (800ca6c <allocate_global_context+0x8c>)
 800c9fe:	22cc      	movs	r2, #204	; 0xcc
 800ca00:	491b      	ldr	r1, [pc, #108]	; (800ca70 <allocate_global_context+0x90>)
 800ca02:	2001      	movs	r0, #1
 800ca04:	f002 f902 	bl	800ec0c <sail_log>
 800ca08:	4b1a      	ldr	r3, [pc, #104]	; (800ca74 <allocate_global_context+0x94>)
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <allocate_global_context+0x98>)
 800ca0e:	22cc      	movs	r2, #204	; 0xcc
 800ca10:	4917      	ldr	r1, [pc, #92]	; (800ca70 <allocate_global_context+0x90>)
 800ca12:	2001      	movs	r0, #1
 800ca14:	f002 f8fa 	bl	800ec0c <sail_log>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e020      	b.n	800ca5e <allocate_global_context+0x7e>

    if (global_context == NULL) {
 800ca1c:	4b17      	ldr	r3, [pc, #92]	; (800ca7c <allocate_global_context+0x9c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d117      	bne.n	800ca54 <allocate_global_context+0x74>
        SAIL_TRY(alloc_context(&global_context));
 800ca24:	4815      	ldr	r0, [pc, #84]	; (800ca7c <allocate_global_context+0x9c>)
 800ca26:	f7ff ff91 	bl	800c94c <alloc_context>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	81fb      	strh	r3, [r7, #14]
 800ca2e:	89fb      	ldrh	r3, [r7, #14]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	bf14      	ite	ne
 800ca34:	2301      	movne	r3, #1
 800ca36:	2300      	moveq	r3, #0
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <allocate_global_context+0x62>
 800ca3e:	89fb      	ldrh	r3, [r7, #14]
 800ca40:	e00d      	b.n	800ca5e <allocate_global_context+0x7e>
        SAIL_LOG_DEBUG("Allocated new context %p", global_context);
 800ca42:	4b0e      	ldr	r3, [pc, #56]	; (800ca7c <allocate_global_context+0x9c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <allocate_global_context+0xa0>)
 800ca4a:	22d0      	movs	r2, #208	; 0xd0
 800ca4c:	4908      	ldr	r1, [pc, #32]	; (800ca70 <allocate_global_context+0x90>)
 800ca4e:	2005      	movs	r0, #5
 800ca50:	f002 f8dc 	bl	800ec0c <sail_log>
    }

    *context = global_context;
 800ca54:	4b09      	ldr	r3, [pc, #36]	; (800ca7c <allocate_global_context+0x9c>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	080181d4 	.word	0x080181d4
 800ca6c:	08018168 	.word	0x08018168
 800ca70:	08018180 	.word	0x08018180
 800ca74:	080181e0 	.word	0x080181e0
 800ca78:	080181dc 	.word	0x080181dc
 800ca7c:	20003824 	.word	0x20003824
 800ca80:	080181f4 	.word	0x080181f4

0800ca84 <preload_codecs>:
    sail_free(context);

    return SAIL_OK;
}

static sail_status_t preload_codecs(struct sail_context *context) {
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af02      	add	r7, sp, #8
 800ca8a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	bf0c      	ite	eq
 800ca92:	2301      	moveq	r3, #1
 800ca94:	2300      	movne	r3, #0
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d011      	beq.n	800cac0 <preload_codecs+0x3c>
 800ca9c:	4b25      	ldr	r3, [pc, #148]	; (800cb34 <preload_codecs+0xb0>)
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	4b25      	ldr	r3, [pc, #148]	; (800cb38 <preload_codecs+0xb4>)
 800caa2:	22e6      	movs	r2, #230	; 0xe6
 800caa4:	4925      	ldr	r1, [pc, #148]	; (800cb3c <preload_codecs+0xb8>)
 800caa6:	2001      	movs	r0, #1
 800caa8:	f002 f8b0 	bl	800ec0c <sail_log>
 800caac:	4b24      	ldr	r3, [pc, #144]	; (800cb40 <preload_codecs+0xbc>)
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	4b24      	ldr	r3, [pc, #144]	; (800cb44 <preload_codecs+0xc0>)
 800cab2:	22e6      	movs	r2, #230	; 0xe6
 800cab4:	4921      	ldr	r1, [pc, #132]	; (800cb3c <preload_codecs+0xb8>)
 800cab6:	2001      	movs	r0, #1
 800cab8:	f002 f8a8 	bl	800ec0c <sail_log>
 800cabc:	2301      	movs	r3, #1
 800cabe:	e035      	b.n	800cb2c <preload_codecs+0xa8>

    SAIL_TRY(lock_context());
 800cac0:	f000 fb9a 	bl	800d1f8 <lock_context>
 800cac4:	4603      	mov	r3, r0
 800cac6:	827b      	strh	r3, [r7, #18]
 800cac8:	8a7b      	ldrh	r3, [r7, #18]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bf14      	ite	ne
 800cace:	2301      	movne	r3, #1
 800cad0:	2300      	moveq	r3, #0
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <preload_codecs+0x58>
 800cad8:	8a7b      	ldrh	r3, [r7, #18]
 800cada:	e027      	b.n	800cb2c <preload_codecs+0xa8>

    SAIL_LOG_DEBUG("Preloading codecs");
 800cadc:	4b1a      	ldr	r3, [pc, #104]	; (800cb48 <preload_codecs+0xc4>)
 800cade:	22ea      	movs	r2, #234	; 0xea
 800cae0:	4916      	ldr	r1, [pc, #88]	; (800cb3c <preload_codecs+0xb8>)
 800cae2:	2005      	movs	r0, #5
 800cae4:	f002 f892 	bl	800ec0c <sail_log>

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	617b      	str	r3, [r7, #20]
 800caee:	e00b      	b.n	800cb08 <preload_codecs+0x84>
        const struct sail_codec *codec;

        /* Ignore loading errors on purpose. */
        (void)load_codec_by_codec_info(codec_bundle_node->codec_bundle->codec_info, &codec);
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f107 020c 	add.w	r2, r7, #12
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f002 ff55 	bl	800f9ac <load_codec_by_codec_info>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	617b      	str	r3, [r7, #20]
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1f0      	bne.n	800caf0 <preload_codecs+0x6c>
    }

    SAIL_TRY(unlock_context());
 800cb0e:	f000 fb7b 	bl	800d208 <unlock_context>
 800cb12:	4603      	mov	r3, r0
 800cb14:	823b      	strh	r3, [r7, #16]
 800cb16:	8a3b      	ldrh	r3, [r7, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	bf14      	ite	ne
 800cb1c:	2301      	movne	r3, #1
 800cb1e:	2300      	moveq	r3, #0
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <preload_codecs+0xa6>
 800cb26:	8a3b      	ldrh	r3, [r7, #16]
 800cb28:	e000      	b.n	800cb2c <preload_codecs+0xa8>

    return SAIL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3718      	adds	r7, #24
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	080181d4 	.word	0x080181d4
 800cb38:	08018168 	.word	0x08018168
 800cb3c:	08018180 	.word	0x08018180
 800cb40:	080181e0 	.word	0x080181e0
 800cb44:	080181dc 	.word	0x080181dc
 800cb48:	08018210 	.word	0x08018210

0800cb4c <codec_bundle_priority_comparator>:

static int codec_bundle_priority_comparator(const void *elem1, const void *elem2) {
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]

    const int priority1 = (*(struct sail_codec_bundle_node **)elem1)->codec_bundle->codec_info->priority;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	7a1b      	ldrb	r3, [r3, #8]
 800cb60:	60fb      	str	r3, [r7, #12]
    const int priority2 = (*(struct sail_codec_bundle_node **)elem2)->codec_bundle->codec_info->priority;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	7a1b      	ldrb	r3, [r3, #8]
 800cb6c:	60bb      	str	r3, [r7, #8]

    return priority1 - priority2;
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	1ad3      	subs	r3, r2, r3
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <sort_enumerated_codecs>:

/*
 * Space complexity: O(n)
 * Time complexity: O(n * log(n))
 */
static sail_status_t sort_enumerated_codecs(struct sail_context *context) {
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08c      	sub	sp, #48	; 0x30
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]

    /* 0 or 1 elements - nothing to sort. */
    if (context->codec_bundle_node == NULL || context->codec_bundle_node->next == NULL) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d004      	beq.n	800cb9a <sort_enumerated_codecs+0x1a>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <sort_enumerated_codecs+0x1e>
        return SAIL_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e061      	b.n	800cc62 <sort_enumerated_codecs+0xe2>
    }

    /* Count the number of codecs. */
    unsigned codecs_num = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cba8:	e005      	b.n	800cbb6 <sort_enumerated_codecs+0x36>
        codecs_num++;
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	3301      	adds	r3, #1
 800cbae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800cbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1f6      	bne.n	800cbaa <sort_enumerated_codecs+0x2a>
    }

    /* Copy codecs to an array. */
    struct sail_codec_bundle_node **codec_bundle_array;
    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_bundle_node *) * codecs_num, &ptr));
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	f107 0208 	add.w	r2, r7, #8
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f002 f918 	bl	800edfc <sail_malloc>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	82fb      	strh	r3, [r7, #22]
 800cbd0:	8afb      	ldrh	r3, [r7, #22]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bf14      	ite	ne
 800cbd6:	2301      	movne	r3, #1
 800cbd8:	2300      	moveq	r3, #0
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <sort_enumerated_codecs+0x64>
 800cbe0:	8afb      	ldrh	r3, [r7, #22]
 800cbe2:	e03e      	b.n	800cc62 <sort_enumerated_codecs+0xe2>
    codec_bundle_array = ptr;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	613b      	str	r3, [r7, #16]

    {
        unsigned i = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	627b      	str	r3, [r7, #36]	; 0x24
        for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	623b      	str	r3, [r7, #32]
 800cbf2:	e00a      	b.n	800cc0a <sort_enumerated_codecs+0x8a>
            codec_bundle_array[i++] = codec_bundle_node;
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	627a      	str	r2, [r7, #36]	; 0x24
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	4413      	add	r3, r2
 800cc00:	6a3a      	ldr	r2, [r7, #32]
 800cc02:	601a      	str	r2, [r3, #0]
        for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	623b      	str	r3, [r7, #32]
 800cc0a:	6a3b      	ldr	r3, [r7, #32]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f1      	bne.n	800cbf4 <sort_enumerated_codecs+0x74>
        }
    }

    /* Sort the array. */
    qsort(codec_bundle_array, codecs_num, sizeof(struct sail_codec_bundle_node *), codec_bundle_priority_comparator);
 800cc10:	4b16      	ldr	r3, [pc, #88]	; (800cc6c <sort_enumerated_codecs+0xec>)
 800cc12:	2204      	movs	r2, #4
 800cc14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc16:	6938      	ldr	r0, [r7, #16]
 800cc18:	f006 fe0c 	bl	8013834 <qsort>

    /* Reconstruct the linked list. */
    struct sail_codec_bundle_node *codec_bundle_node_sorted_it = codec_bundle_array[0];
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	61fb      	str	r3, [r7, #28]
    struct sail_codec_bundle_node *codec_bundle_node_sorted = codec_bundle_node_sorted_it;
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	60fb      	str	r3, [r7, #12]

    for (unsigned i = 1; i < codecs_num; i++) {
 800cc26:	2301      	movs	r3, #1
 800cc28:	61bb      	str	r3, [r7, #24]
 800cc2a:	e00c      	b.n	800cc46 <sort_enumerated_codecs+0xc6>
        codec_bundle_node_sorted_it->next = codec_bundle_array[i];
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	693a      	ldr	r2, [r7, #16]
 800cc32:	4413      	add	r3, r2
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	605a      	str	r2, [r3, #4]
        codec_bundle_node_sorted_it = codec_bundle_node_sorted_it->next;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 1; i < codecs_num; i++) {
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	3301      	adds	r3, #1
 800cc44:	61bb      	str	r3, [r7, #24]
 800cc46:	69ba      	ldr	r2, [r7, #24]
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d3ee      	bcc.n	800cc2c <sort_enumerated_codecs+0xac>
    }

    codec_bundle_node_sorted_it->next = NULL;
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	2200      	movs	r2, #0
 800cc52:	605a      	str	r2, [r3, #4]

    context->codec_bundle_node = codec_bundle_node_sorted;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	605a      	str	r2, [r3, #4]

    /* Cleanup */
    sail_free(codec_bundle_array);
 800cc5a:	6938      	ldr	r0, [r7, #16]
 800cc5c:	f002 f956 	bl	800ef0c <sail_free>

    return SAIL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3730      	adds	r7, #48	; 0x30
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0800cb4d 	.word	0x0800cb4d

0800cc70 <print_enumerated_codecs>:

static sail_status_t print_enumerated_codecs(struct sail_context *context) {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	; 0x30
 800cc74:	af06      	add	r7, sp, #24
 800cc76:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	bf0c      	ite	eq
 800cc7e:	2301      	moveq	r3, #1
 800cc80:	2300      	movne	r3, #0
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d013      	beq.n	800ccb0 <print_enumerated_codecs+0x40>
 800cc88:	4b26      	ldr	r3, [pc, #152]	; (800cd24 <print_enumerated_codecs+0xb4>)
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	4b26      	ldr	r3, [pc, #152]	; (800cd28 <print_enumerated_codecs+0xb8>)
 800cc8e:	f240 1237 	movw	r2, #311	; 0x137
 800cc92:	4926      	ldr	r1, [pc, #152]	; (800cd2c <print_enumerated_codecs+0xbc>)
 800cc94:	2001      	movs	r0, #1
 800cc96:	f001 ffb9 	bl	800ec0c <sail_log>
 800cc9a:	4b25      	ldr	r3, [pc, #148]	; (800cd30 <print_enumerated_codecs+0xc0>)
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	4b25      	ldr	r3, [pc, #148]	; (800cd34 <print_enumerated_codecs+0xc4>)
 800cca0:	f240 1237 	movw	r2, #311	; 0x137
 800cca4:	4921      	ldr	r1, [pc, #132]	; (800cd2c <print_enumerated_codecs+0xbc>)
 800cca6:	2001      	movs	r0, #1
 800cca8:	f001 ffb0 	bl	800ec0c <sail_log>
 800ccac:	2301      	movs	r3, #1
 800ccae:	e035      	b.n	800cd1c <print_enumerated_codecs+0xac>

    const struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	617b      	str	r3, [r7, #20]

    if (codec_bundle_node == NULL) {
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <print_enumerated_codecs+0x50>
        return SAIL_OK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e02d      	b.n	800cd1c <print_enumerated_codecs+0xac>
    }

    /* Print the found codec infos. */
    SAIL_LOG_DEBUG("Enumerated codecs:");
 800ccc0:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <print_enumerated_codecs+0xc8>)
 800ccc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ccc6:	4919      	ldr	r1, [pc, #100]	; (800cd2c <print_enumerated_codecs+0xbc>)
 800ccc8:	2005      	movs	r0, #5
 800ccca:	f001 ff9f 	bl	800ec0c <sail_log>

    for (int counter = 1; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next, counter++) {
 800ccce:	2301      	movs	r3, #1
 800ccd0:	613b      	str	r3, [r7, #16]
 800ccd2:	e01f      	b.n	800cd14 <print_enumerated_codecs+0xa4>
        const struct sail_codec_info *codec_info = codec_bundle_node->codec_bundle->codec_info;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]

        SAIL_LOG_DEBUG("%d. [p%d] %s [%s] %s", counter, codec_info->priority, codec_info->name, codec_info->description, codec_info->version);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	7a1b      	ldrb	r3, [r3, #8]
 800cce0:	4618      	mov	r0, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	6952      	ldr	r2, [r2, #20]
 800ccea:	68f9      	ldr	r1, [r7, #12]
 800ccec:	68c9      	ldr	r1, [r1, #12]
 800ccee:	9104      	str	r1, [sp, #16]
 800ccf0:	9203      	str	r2, [sp, #12]
 800ccf2:	9302      	str	r3, [sp, #8]
 800ccf4:	9001      	str	r0, [sp, #4]
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <print_enumerated_codecs+0xcc>)
 800ccfc:	f240 1245 	movw	r2, #325	; 0x145
 800cd00:	490a      	ldr	r1, [pc, #40]	; (800cd2c <print_enumerated_codecs+0xbc>)
 800cd02:	2005      	movs	r0, #5
 800cd04:	f001 ff82 	bl	800ec0c <sail_log>
    for (int counter = 1; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next, counter++) {
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	617b      	str	r3, [r7, #20]
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	3301      	adds	r3, #1
 800cd12:	613b      	str	r3, [r7, #16]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1dc      	bne.n	800ccd4 <print_enumerated_codecs+0x64>
    }

    return SAIL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	080181d4 	.word	0x080181d4
 800cd28:	08018168 	.word	0x08018168
 800cd2c:	08018180 	.word	0x08018180
 800cd30:	080181e0 	.word	0x080181e0
 800cd34:	080181dc 	.word	0x080181dc
 800cd38:	08018224 	.word	0x08018224
 800cd3c:	08018238 	.word	0x08018238

0800cd40 <init_context_impl>:
}
#endif

/* Initializes the context and loads all the codec info files. */
#ifdef SAIL_COMBINE_CODECS
static sail_status_t init_context_impl(struct sail_context *context) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08a      	sub	sp, #40	; 0x28
 800cd44:	af02      	add	r7, sp, #8
 800cd46:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	bf0c      	ite	eq
 800cd4e:	2301      	moveq	r3, #1
 800cd50:	2300      	movne	r3, #0
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d013      	beq.n	800cd80 <init_context_impl+0x40>
 800cd58:	4b35      	ldr	r3, [pc, #212]	; (800ce30 <init_context_impl+0xf0>)
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	4b35      	ldr	r3, [pc, #212]	; (800ce34 <init_context_impl+0xf4>)
 800cd5e:	f240 2233 	movw	r2, #563	; 0x233
 800cd62:	4935      	ldr	r1, [pc, #212]	; (800ce38 <init_context_impl+0xf8>)
 800cd64:	2001      	movs	r0, #1
 800cd66:	f001 ff51 	bl	800ec0c <sail_log>
 800cd6a:	4b34      	ldr	r3, [pc, #208]	; (800ce3c <init_context_impl+0xfc>)
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	4b34      	ldr	r3, [pc, #208]	; (800ce40 <init_context_impl+0x100>)
 800cd70:	f240 2233 	movw	r2, #563	; 0x233
 800cd74:	4930      	ldr	r1, [pc, #192]	; (800ce38 <init_context_impl+0xf8>)
 800cd76:	2001      	movs	r0, #1
 800cd78:	f001 ff48 	bl	800ec0c <sail_log>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e053      	b.n	800ce28 <init_context_impl+0xe8>
    SAIL_IMPORT extern const char * const sail_enabled_codecs[];
    SAIL_IMPORT extern const char * const sail_enabled_codecs_info[];
#endif

    /* Load codec info objects. */
    struct sail_codec_bundle_node **last_codec_bundle_node = &context->codec_bundle_node;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3304      	adds	r3, #4
 800cd84:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 800cd86:	2300      	movs	r3, #0
 800cd88:	61bb      	str	r3, [r7, #24]
 800cd8a:	e046      	b.n	800ce1a <init_context_impl+0xda>
        const char *sail_codec_info = sail_enabled_codecs_info[i];
 800cd8c:	4a2d      	ldr	r2, [pc, #180]	; (800ce44 <init_context_impl+0x104>)
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd94:	617b      	str	r3, [r7, #20]

        /* Parse codec info. */
        struct sail_codec_bundle_node *codec_bundle_node;
        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle_node(&codec_bundle_node),
 800cd96:	f107 0308 	add.w	r3, r7, #8
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fd f816 	bl	8009dcc <alloc_codec_bundle_node>
 800cda0:	4603      	mov	r3, r0
 800cda2:	827b      	strh	r3, [r7, #18]
 800cda4:	8a7b      	ldrh	r3, [r7, #18]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bf14      	ite	ne
 800cdaa:	2301      	movne	r3, #1
 800cdac:	2300      	moveq	r3, #0
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d12e      	bne.n	800ce12 <init_context_impl+0xd2>
                            /* on error */ continue);

        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle(&codec_bundle_node->codec_bundle),
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fd f82e 	bl	8009e18 <alloc_codec_bundle>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	823b      	strh	r3, [r7, #16]
 800cdc0:	8a3b      	ldrh	r3, [r7, #16]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	bf14      	ite	ne
 800cdc6:	2301      	movne	r3, #1
 800cdc8:	2300      	moveq	r3, #0
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d004      	beq.n	800cdda <init_context_impl+0x9a>
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fd f812 	bl	8009dfc <destroy_codec_bundle_node>
 800cdd8:	e01c      	b.n	800ce14 <init_context_impl+0xd4>
                            /* on error */ destroy_codec_bundle_node(codec_bundle_node);
                                           continue);

        SAIL_TRY_OR_EXECUTE(codec_read_info_from_string(sail_codec_info, &codec_bundle_node->codec_bundle->codec_info),
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6978      	ldr	r0, [r7, #20]
 800cde2:	f7fe fb53 	bl	800b48c <codec_read_info_from_string>
 800cde6:	4603      	mov	r3, r0
 800cde8:	81fb      	strh	r3, [r7, #14]
 800cdea:	89fb      	ldrh	r3, [r7, #14]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bf14      	ite	ne
 800cdf0:	2301      	movne	r3, #1
 800cdf2:	2300      	moveq	r3, #0
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <init_context_impl+0xc4>
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fc fffd 	bl	8009dfc <destroy_codec_bundle_node>
 800ce02:	e007      	b.n	800ce14 <init_context_impl+0xd4>
                            /* on error */ destroy_codec_bundle_node(codec_bundle_node);
                                           continue);

        *last_codec_bundle_node = codec_bundle_node;
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	601a      	str	r2, [r3, #0]
        last_codec_bundle_node = &codec_bundle_node->next;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	61fb      	str	r3, [r7, #28]
 800ce10:	e000      	b.n	800ce14 <init_context_impl+0xd4>
        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle_node(&codec_bundle_node),
 800ce12:	bf00      	nop
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	3301      	adds	r3, #1
 800ce18:	61bb      	str	r3, [r7, #24]
 800ce1a:	4a0b      	ldr	r2, [pc, #44]	; (800ce48 <init_context_impl+0x108>)
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1b2      	bne.n	800cd8c <init_context_impl+0x4c>
                        /* cleanup */ sail_destroy_string_node_chain(client_codecs_paths));

    sail_destroy_string_node_chain(client_codecs_paths);
#endif

    return SAIL_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3720      	adds	r7, #32
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	080181d4 	.word	0x080181d4
 800ce34:	08018168 	.word	0x08018168
 800ce38:	08018180 	.word	0x08018180
 800ce3c:	080181e0 	.word	0x080181e0
 800ce40:	080181dc 	.word	0x080181dc
 800ce44:	08019908 	.word	0x08019908
 800ce48:	08019904 	.word	0x08019904

0800ce4c <print_no_codecs_found>:

    return SAIL_OK;
}
#endif

static void print_no_codecs_found(void) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af02      	add	r7, sp, #8

    const char *message = "\n"
 800ce52:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <print_no_codecs_found+0x24>)
 800ce54:	607b      	str	r3, [r7, #4]
#else
        "\n*** - Check the installation directory.                                      ***"
#endif
        "\n";

    SAIL_LOG_ERROR("%s", message);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <print_no_codecs_found+0x28>)
 800ce5c:	f240 22c2 	movw	r2, #706	; 0x2c2
 800ce60:	4905      	ldr	r1, [pc, #20]	; (800ce78 <print_no_codecs_found+0x2c>)
 800ce62:	2001      	movs	r0, #1
 800ce64:	f001 fed2 	bl	800ec0c <sail_log>
}
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	08018250 	.word	0x08018250
 800ce74:	080181dc 	.word	0x080181dc
 800ce78:	08018180 	.word	0x08018180

0800ce7c <print_build_statistics>:

static void print_build_statistics(void) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af02      	add	r7, sp, #8

    SAIL_LOG_INFO("Version: %s", SAIL_VERSION_STRING);
 800ce82:	4b17      	ldr	r3, [pc, #92]	; (800cee0 <print_build_statistics+0x64>)
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	4b17      	ldr	r3, [pc, #92]	; (800cee4 <print_build_statistics+0x68>)
 800ce88:	f240 22c7 	movw	r2, #711	; 0x2c7
 800ce8c:	4916      	ldr	r1, [pc, #88]	; (800cee8 <print_build_statistics+0x6c>)
 800ce8e:	2003      	movs	r0, #3
 800ce90:	f001 febc 	bl	800ec0c <sail_log>

#ifdef SAIL_VCPKG
    SAIL_LOG_INFO("Build type: VCPKG");
#else
    SAIL_LOG_INFO("Build type: Standalone");
 800ce94:	4b15      	ldr	r3, [pc, #84]	; (800ceec <print_build_statistics+0x70>)
 800ce96:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 800ce9a:	4913      	ldr	r1, [pc, #76]	; (800cee8 <print_build_statistics+0x6c>)
 800ce9c:	2003      	movs	r0, #3
 800ce9e:	f001 feb5 	bl	800ec0c <sail_log>
#endif

#ifdef SAIL_STATIC
    SAIL_LOG_INFO("Static build: yes");
 800cea2:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <print_build_statistics+0x74>)
 800cea4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800cea8:	490f      	ldr	r1, [pc, #60]	; (800cee8 <print_build_statistics+0x6c>)
 800ceaa:	2003      	movs	r0, #3
 800ceac:	f001 feae 	bl	800ec0c <sail_log>
#else
    SAIL_LOG_INFO("Static build: no");
#endif

#ifdef SAIL_COMBINE_CODECS
    SAIL_LOG_INFO("Combine codecs: yes");
 800ceb0:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <print_build_statistics+0x78>)
 800ceb2:	f240 22d6 	movw	r2, #726	; 0x2d6
 800ceb6:	490c      	ldr	r1, [pc, #48]	; (800cee8 <print_build_statistics+0x6c>)
 800ceb8:	2003      	movs	r0, #3
 800ceba:	f001 fea7 	bl	800ec0c <sail_log>
#endif

#ifdef SAIL_THREAD_SAFE
    SAIL_LOG_INFO("Thread-safe: yes");
#else
    SAIL_LOG_INFO("Thread-safe: no");
 800cebe:	4b0e      	ldr	r3, [pc, #56]	; (800cef8 <print_build_statistics+0x7c>)
 800cec0:	f240 22de 	movw	r2, #734	; 0x2de
 800cec4:	4908      	ldr	r1, [pc, #32]	; (800cee8 <print_build_statistics+0x6c>)
 800cec6:	2003      	movs	r0, #3
 800cec8:	f001 fea0 	bl	800ec0c <sail_log>
#endif

#ifdef SAIL_THIRD_PARTY_CODECS_PATH
    SAIL_LOG_INFO("SAIL_THIRD_PARTY_CODECS_PATH: enabled");
#else
    SAIL_LOG_INFO("SAIL_THIRD_PARTY_CODECS_PATH: disabled");
 800cecc:	4b0b      	ldr	r3, [pc, #44]	; (800cefc <print_build_statistics+0x80>)
 800cece:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ced2:	4905      	ldr	r1, [pc, #20]	; (800cee8 <print_build_statistics+0x6c>)
 800ced4:	2003      	movs	r0, #3
 800ced6:	f001 fe99 	bl	800ec0c <sail_log>
#endif
}
 800ceda:	bf00      	nop
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	080183a4 	.word	0x080183a4
 800cee4:	08018398 	.word	0x08018398
 800cee8:	08018180 	.word	0x08018180
 800ceec:	080183ac 	.word	0x080183ac
 800cef0:	080183c4 	.word	0x080183c4
 800cef4:	080183d8 	.word	0x080183d8
 800cef8:	080183ec 	.word	0x080183ec
 800cefc:	080183fc 	.word	0x080183fc

0800cf00 <init_context>:

/* Initializes the context and loads all the codec info files if the context is not initialized. */
static sail_status_t init_context(struct sail_context *context, int flags) {
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af02      	add	r7, sp, #8
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bf0c      	ite	eq
 800cf10:	2301      	moveq	r3, #1
 800cf12:	2300      	movne	r3, #0
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d013      	beq.n	800cf42 <init_context+0x42>
 800cf1a:	4b3e      	ldr	r3, [pc, #248]	; (800d014 <init_context+0x114>)
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	4b3e      	ldr	r3, [pc, #248]	; (800d018 <init_context+0x118>)
 800cf20:	f240 22eb 	movw	r2, #747	; 0x2eb
 800cf24:	493d      	ldr	r1, [pc, #244]	; (800d01c <init_context+0x11c>)
 800cf26:	2001      	movs	r0, #1
 800cf28:	f001 fe70 	bl	800ec0c <sail_log>
 800cf2c:	4b3c      	ldr	r3, [pc, #240]	; (800d020 <init_context+0x120>)
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	4b3c      	ldr	r3, [pc, #240]	; (800d024 <init_context+0x124>)
 800cf32:	f240 22eb 	movw	r2, #747	; 0x2eb
 800cf36:	4939      	ldr	r1, [pc, #228]	; (800d01c <init_context+0x11c>)
 800cf38:	2001      	movs	r0, #1
 800cf3a:	f001 fe67 	bl	800ec0c <sail_log>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e064      	b.n	800d00c <init_context+0x10c>

    if (context->initialized) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <init_context+0x4e>
        return SAIL_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e05e      	b.n	800d00c <init_context+0x10c>
    }

    context->initialized = true;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	701a      	strb	r2, [r3, #0]

    /* Time counter. */
    uint64_t start_time = sail_now();
 800cf54:	f003 fd2c 	bl	80109b0 <sail_now>
 800cf58:	e9c7 0104 	strd	r0, r1, [r7, #16]

    print_build_statistics();
 800cf5c:	f7ff ff8e 	bl	800ce7c <print_build_statistics>
    if (get_sail_dll_path(dll_path, sizeof(dll_path)) == SAIL_OK) {
        SAIL_TRY_OR_SUPPRESS(add_dll_directory(dll_path));
    }
#endif

    SAIL_TRY(init_context_impl(context));
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff feed 	bl	800cd40 <init_context_impl>
 800cf66:	4603      	mov	r3, r0
 800cf68:	81fb      	strh	r3, [r7, #14]
 800cf6a:	89fb      	ldrh	r3, [r7, #14]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	bf14      	ite	ne
 800cf70:	2301      	movne	r3, #1
 800cf72:	2300      	moveq	r3, #0
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d001      	beq.n	800cf7e <init_context+0x7e>
 800cf7a:	89fb      	ldrh	r3, [r7, #14]
 800cf7c:	e046      	b.n	800d00c <init_context+0x10c>

    if (context->codec_bundle_node == NULL) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <init_context+0x8a>
        print_no_codecs_found();
 800cf86:	f7ff ff61 	bl	800ce4c <print_no_codecs_found>
    }

    SAIL_TRY(sort_enumerated_codecs(context));
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff fdf8 	bl	800cb80 <sort_enumerated_codecs>
 800cf90:	4603      	mov	r3, r0
 800cf92:	81bb      	strh	r3, [r7, #12]
 800cf94:	89bb      	ldrh	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	bf14      	ite	ne
 800cf9a:	2301      	movne	r3, #1
 800cf9c:	2300      	moveq	r3, #0
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <init_context+0xa8>
 800cfa4:	89bb      	ldrh	r3, [r7, #12]
 800cfa6:	e031      	b.n	800d00c <init_context+0x10c>

    SAIL_TRY(print_enumerated_codecs(context));
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff fe61 	bl	800cc70 <print_enumerated_codecs>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	817b      	strh	r3, [r7, #10]
 800cfb2:	897b      	ldrh	r3, [r7, #10]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	bf14      	ite	ne
 800cfb8:	2301      	movne	r3, #1
 800cfba:	2300      	moveq	r3, #0
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <init_context+0xc6>
 800cfc2:	897b      	ldrh	r3, [r7, #10]
 800cfc4:	e022      	b.n	800d00c <init_context+0x10c>

    if (flags & SAIL_FLAG_PRELOAD_CODECS) {
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00e      	beq.n	800cfee <init_context+0xee>
        SAIL_TRY(preload_codecs(context));
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7ff fd57 	bl	800ca84 <preload_codecs>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	813b      	strh	r3, [r7, #8]
 800cfda:	893b      	ldrh	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	bf14      	ite	ne
 800cfe0:	2301      	movne	r3, #1
 800cfe2:	2300      	moveq	r3, #0
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <init_context+0xee>
 800cfea:	893b      	ldrh	r3, [r7, #8]
 800cfec:	e00e      	b.n	800d00c <init_context+0x10c>
    }

    SAIL_LOG_DEBUG("Initialized in %lu ms.", (unsigned long)(sail_now() - start_time));
 800cfee:	f003 fcdf 	bl	80109b0 <sail_now>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <init_context+0x128>)
 800cffe:	f240 320e 	movw	r2, #782	; 0x30e
 800d002:	4906      	ldr	r1, [pc, #24]	; (800d01c <init_context+0x11c>)
 800d004:	2005      	movs	r0, #5
 800d006:	f001 fe01 	bl	800ec0c <sail_log>

    return SAIL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	080181d4 	.word	0x080181d4
 800d018:	08018168 	.word	0x08018168
 800d01c:	08018180 	.word	0x08018180
 800d020:	080181e0 	.word	0x080181e0
 800d024:	080181dc 	.word	0x080181dc
 800d028:	08018424 	.word	0x08018424

0800d02c <fetch_global_context_guarded>:
    SAIL_TRY(unlock_context());

    return SAIL_OK;
}

sail_status_t fetch_global_context_guarded(struct sail_context **context) {
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]

    SAIL_TRY(fetch_global_context_guarded_with_flags(context, /* flags */ 0));
 800d034:	2100      	movs	r1, #0
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f82a 	bl	800d090 <fetch_global_context_guarded_with_flags>
 800d03c:	4603      	mov	r3, r0
 800d03e:	81fb      	strh	r3, [r7, #14]
 800d040:	89fb      	ldrh	r3, [r7, #14]
 800d042:	2b00      	cmp	r3, #0
 800d044:	bf14      	ite	ne
 800d046:	2301      	movne	r3, #1
 800d048:	2300      	moveq	r3, #0
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <fetch_global_context_guarded+0x28>
 800d050:	89fb      	ldrh	r3, [r7, #14]
 800d052:	e000      	b.n	800d056 <fetch_global_context_guarded+0x2a>

    return SAIL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <fetch_global_context_unsafe>:

sail_status_t fetch_global_context_unsafe(struct sail_context **context) {
 800d05e:	b580      	push	{r7, lr}
 800d060:	b084      	sub	sp, #16
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]

    SAIL_TRY(fetch_global_context_unsafe_with_flags(context, /* flags */ 0));
 800d066:	2100      	movs	r1, #0
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f86f 	bl	800d14c <fetch_global_context_unsafe_with_flags>
 800d06e:	4603      	mov	r3, r0
 800d070:	81fb      	strh	r3, [r7, #14]
 800d072:	89fb      	ldrh	r3, [r7, #14]
 800d074:	2b00      	cmp	r3, #0
 800d076:	bf14      	ite	ne
 800d078:	2301      	movne	r3, #1
 800d07a:	2300      	moveq	r3, #0
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <fetch_global_context_unsafe+0x28>
 800d082:	89fb      	ldrh	r3, [r7, #14]
 800d084:	e000      	b.n	800d088 <fetch_global_context_unsafe+0x2a>

    return SAIL_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <fetch_global_context_guarded_with_flags>:

sail_status_t fetch_global_context_guarded_with_flags(struct sail_context **context, int flags) {
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af02      	add	r7, sp, #8
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bf0c      	ite	eq
 800d0a0:	2301      	moveq	r3, #1
 800d0a2:	2300      	movne	r3, #0
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d013      	beq.n	800d0d2 <fetch_global_context_guarded_with_flags+0x42>
 800d0aa:	4b23      	ldr	r3, [pc, #140]	; (800d138 <fetch_global_context_guarded_with_flags+0xa8>)
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	4b23      	ldr	r3, [pc, #140]	; (800d13c <fetch_global_context_guarded_with_flags+0xac>)
 800d0b0:	f44f 724d 	mov.w	r2, #820	; 0x334
 800d0b4:	4922      	ldr	r1, [pc, #136]	; (800d140 <fetch_global_context_guarded_with_flags+0xb0>)
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f001 fda8 	bl	800ec0c <sail_log>
 800d0bc:	4b21      	ldr	r3, [pc, #132]	; (800d144 <fetch_global_context_guarded_with_flags+0xb4>)
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	4b21      	ldr	r3, [pc, #132]	; (800d148 <fetch_global_context_guarded_with_flags+0xb8>)
 800d0c2:	f44f 724d 	mov.w	r2, #820	; 0x334
 800d0c6:	491e      	ldr	r1, [pc, #120]	; (800d140 <fetch_global_context_guarded_with_flags+0xb0>)
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	f001 fd9f 	bl	800ec0c <sail_log>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e02e      	b.n	800d130 <fetch_global_context_guarded_with_flags+0xa0>

    SAIL_TRY(lock_context());
 800d0d2:	f000 f891 	bl	800d1f8 <lock_context>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	81fb      	strh	r3, [r7, #14]
 800d0da:	89fb      	ldrh	r3, [r7, #14]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	bf14      	ite	ne
 800d0e0:	2301      	movne	r3, #1
 800d0e2:	2300      	moveq	r3, #0
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <fetch_global_context_guarded_with_flags+0x5e>
 800d0ea:	89fb      	ldrh	r3, [r7, #14]
 800d0ec:	e020      	b.n	800d130 <fetch_global_context_guarded_with_flags+0xa0>

    SAIL_TRY_OR_CLEANUP(fetch_global_context_unsafe_with_flags(context, flags),
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f82b 	bl	800d14c <fetch_global_context_unsafe_with_flags>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	81bb      	strh	r3, [r7, #12]
 800d0fa:	89bb      	ldrh	r3, [r7, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bf14      	ite	ne
 800d100:	2301      	movne	r3, #1
 800d102:	2300      	moveq	r3, #0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d003      	beq.n	800d112 <fetch_global_context_guarded_with_flags+0x82>
 800d10a:	f000 f87d 	bl	800d208 <unlock_context>
 800d10e:	89bb      	ldrh	r3, [r7, #12]
 800d110:	e00e      	b.n	800d130 <fetch_global_context_guarded_with_flags+0xa0>
                        /* cleanup */ unlock_context());

    SAIL_TRY(unlock_context());
 800d112:	f000 f879 	bl	800d208 <unlock_context>
 800d116:	4603      	mov	r3, r0
 800d118:	817b      	strh	r3, [r7, #10]
 800d11a:	897b      	ldrh	r3, [r7, #10]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bf14      	ite	ne
 800d120:	2301      	movne	r3, #1
 800d122:	2300      	moveq	r3, #0
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <fetch_global_context_guarded_with_flags+0x9e>
 800d12a:	897b      	ldrh	r3, [r7, #10]
 800d12c:	e000      	b.n	800d130 <fetch_global_context_guarded_with_flags+0xa0>

    return SAIL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	080181d4 	.word	0x080181d4
 800d13c:	08018168 	.word	0x08018168
 800d140:	08018180 	.word	0x08018180
 800d144:	080181e0 	.word	0x080181e0
 800d148:	080181dc 	.word	0x080181dc

0800d14c <fetch_global_context_unsafe_with_flags>:

sail_status_t fetch_global_context_unsafe_with_flags(struct sail_context **context, int flags) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af02      	add	r7, sp, #8
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bf0c      	ite	eq
 800d15c:	2301      	moveq	r3, #1
 800d15e:	2300      	movne	r3, #0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d013      	beq.n	800d18e <fetch_global_context_unsafe_with_flags+0x42>
 800d166:	4b1f      	ldr	r3, [pc, #124]	; (800d1e4 <fetch_global_context_unsafe_with_flags+0x98>)
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	4b1f      	ldr	r3, [pc, #124]	; (800d1e8 <fetch_global_context_unsafe_with_flags+0x9c>)
 800d16c:	f240 3242 	movw	r2, #834	; 0x342
 800d170:	491e      	ldr	r1, [pc, #120]	; (800d1ec <fetch_global_context_unsafe_with_flags+0xa0>)
 800d172:	2001      	movs	r0, #1
 800d174:	f001 fd4a 	bl	800ec0c <sail_log>
 800d178:	4b1d      	ldr	r3, [pc, #116]	; (800d1f0 <fetch_global_context_unsafe_with_flags+0xa4>)
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	4b1d      	ldr	r3, [pc, #116]	; (800d1f4 <fetch_global_context_unsafe_with_flags+0xa8>)
 800d17e:	f240 3242 	movw	r2, #834	; 0x342
 800d182:	491a      	ldr	r1, [pc, #104]	; (800d1ec <fetch_global_context_unsafe_with_flags+0xa0>)
 800d184:	2001      	movs	r0, #1
 800d186:	f001 fd41 	bl	800ec0c <sail_log>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e025      	b.n	800d1da <fetch_global_context_unsafe_with_flags+0x8e>

    struct sail_context *local_context;

    SAIL_TRY(allocate_global_context(&local_context));
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff fc24 	bl	800c9e0 <allocate_global_context>
 800d198:	4603      	mov	r3, r0
 800d19a:	81fb      	strh	r3, [r7, #14]
 800d19c:	89fb      	ldrh	r3, [r7, #14]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bf14      	ite	ne
 800d1a2:	2301      	movne	r3, #1
 800d1a4:	2300      	moveq	r3, #0
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <fetch_global_context_unsafe_with_flags+0x64>
 800d1ac:	89fb      	ldrh	r3, [r7, #14]
 800d1ae:	e014      	b.n	800d1da <fetch_global_context_unsafe_with_flags+0x8e>
    SAIL_TRY(init_context(local_context, flags));
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7ff fea3 	bl	800cf00 <init_context>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	81bb      	strh	r3, [r7, #12]
 800d1be:	89bb      	ldrh	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	bf14      	ite	ne
 800d1c4:	2301      	movne	r3, #1
 800d1c6:	2300      	moveq	r3, #0
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d001      	beq.n	800d1d2 <fetch_global_context_unsafe_with_flags+0x86>
 800d1ce:	89bb      	ldrh	r3, [r7, #12]
 800d1d0:	e003      	b.n	800d1da <fetch_global_context_unsafe_with_flags+0x8e>

    *context = local_context;
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	080181d4 	.word	0x080181d4
 800d1e8:	08018168 	.word	0x08018168
 800d1ec:	08018180 	.word	0x08018180
 800d1f0:	080181e0 	.word	0x080181e0
 800d1f4:	080181dc 	.word	0x080181dc

0800d1f8 <lock_context>:
    SAIL_LOG_DEBUG("Unloaded codecs number: %d", counter);

    return SAIL_OK;
}

sail_status_t lock_context(void) {
 800d1f8:	b480      	push	{r7}
 800d1fa:	af00      	add	r7, sp, #0
    SAIL_TRY(initialize_global_context_guard_mutex());

    SAIL_TRY(threading_lock_mutex(&global_context_guard_mutex));
#endif

    return SAIL_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <unlock_context>:

sail_status_t unlock_context(void) {
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0

#ifdef SAIL_THREAD_SAFE
    SAIL_TRY(threading_unlock_mutex(&global_context_guard_mutex));
#endif

    return SAIL_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <sail_alloc_hash_map>:
}

/*
 * Public functions.
 */
sail_status_t sail_alloc_hash_map(struct sail_hash_map **hash_map) {
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af02      	add	r7, sp, #8
 800d21e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(hash_map);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	bf0c      	ite	eq
 800d226:	2301      	moveq	r3, #1
 800d228:	2300      	movne	r3, #0
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d011      	beq.n	800d254 <sail_alloc_hash_map+0x3c>
 800d230:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <sail_alloc_hash_map+0x90>)
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	4b1d      	ldr	r3, [pc, #116]	; (800d2ac <sail_alloc_hash_map+0x94>)
 800d236:	2232      	movs	r2, #50	; 0x32
 800d238:	491d      	ldr	r1, [pc, #116]	; (800d2b0 <sail_alloc_hash_map+0x98>)
 800d23a:	2001      	movs	r0, #1
 800d23c:	f001 fce6 	bl	800ec0c <sail_log>
 800d240:	4b1c      	ldr	r3, [pc, #112]	; (800d2b4 <sail_alloc_hash_map+0x9c>)
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	4b1c      	ldr	r3, [pc, #112]	; (800d2b8 <sail_alloc_hash_map+0xa0>)
 800d246:	2232      	movs	r2, #50	; 0x32
 800d248:	4919      	ldr	r1, [pc, #100]	; (800d2b0 <sail_alloc_hash_map+0x98>)
 800d24a:	2001      	movs	r0, #1
 800d24c:	f001 fcde 	bl	800ec0c <sail_log>
 800d250:	2301      	movs	r3, #1
 800d252:	e024      	b.n	800d29e <sail_alloc_hash_map+0x86>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_hash_map), &ptr));
 800d254:	f107 030c 	add.w	r3, r7, #12
 800d258:	4619      	mov	r1, r3
 800d25a:	2080      	movs	r0, #128	; 0x80
 800d25c:	f001 fdce 	bl	800edfc <sail_malloc>
 800d260:	4603      	mov	r3, r0
 800d262:	827b      	strh	r3, [r7, #18]
 800d264:	8a7b      	ldrh	r3, [r7, #18]
 800d266:	2b00      	cmp	r3, #0
 800d268:	bf14      	ite	ne
 800d26a:	2301      	movne	r3, #1
 800d26c:	2300      	moveq	r3, #0
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <sail_alloc_hash_map+0x60>
 800d274:	8a7b      	ldrh	r3, [r7, #18]
 800d276:	e012      	b.n	800d29e <sail_alloc_hash_map+0x86>
    *hash_map = ptr;
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	601a      	str	r2, [r3, #0]

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d27e:	2300      	movs	r3, #0
 800d280:	617b      	str	r3, [r7, #20]
 800d282:	e008      	b.n	800d296 <sail_alloc_hash_map+0x7e>
        (*hash_map)->buckets[i] = NULL;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	2100      	movs	r1, #0
 800d28c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	3301      	adds	r3, #1
 800d294:	617b      	str	r3, [r7, #20]
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b1f      	cmp	r3, #31
 800d29a:	d9f3      	bls.n	800d284 <sail_alloc_hash_map+0x6c>
    }

    return SAIL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	08018514 	.word	0x08018514
 800d2ac:	080184a8 	.word	0x080184a8
 800d2b0:	080184c0 	.word	0x080184c0
 800d2b4:	08018524 	.word	0x08018524
 800d2b8:	08018520 	.word	0x08018520

0800d2bc <sail_destroy_hash_map>:

void sail_destroy_hash_map(struct sail_hash_map *hash_map) {
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]

    if (hash_map == NULL) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d006      	beq.n	800d2d8 <sail_destroy_hash_map+0x1c>
        return;
    }

    sail_clear_hash_map(hash_map);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f808 	bl	800d2e0 <sail_clear_hash_map>

    sail_free(hash_map);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 fe1b 	bl	800ef0c <sail_free>
 800d2d6:	e000      	b.n	800d2da <sail_destroy_hash_map+0x1e>
        return;
 800d2d8:	bf00      	nop
}
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <sail_clear_hash_map>:
            return;
        }
    }
}

void sail_clear_hash_map(struct sail_hash_map *hash_map) {
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	e00e      	b.n	800d30c <sail_clear_hash_map+0x2c>
        sail_destroy_variant_node_chain(hash_map->buckets[i]);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f003 fd34 	bl	8010d64 <sail_destroy_variant_node_chain>
        hash_map->buckets[i] = NULL;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	2100      	movs	r1, #0
 800d302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3301      	adds	r3, #1
 800d30a:	60fb      	str	r3, [r7, #12]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b1f      	cmp	r3, #31
 800d310:	d9ed      	bls.n	800d2ee <sail_clear_hash_map+0xe>
    }
}
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <sail_copy_hash_map>:

sail_status_t sail_copy_hash_map(const struct sail_hash_map *source_hash_map, struct sail_hash_map **target_hash_map) {
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af02      	add	r7, sp, #8
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source_hash_map);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	bf0c      	ite	eq
 800d32c:	2301      	moveq	r3, #1
 800d32e:	2300      	movne	r3, #0
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d011      	beq.n	800d35a <sail_copy_hash_map+0x3e>
 800d336:	4b34      	ldr	r3, [pc, #208]	; (800d408 <sail_copy_hash_map+0xec>)
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	4b34      	ldr	r3, [pc, #208]	; (800d40c <sail_copy_hash_map+0xf0>)
 800d33c:	22e3      	movs	r2, #227	; 0xe3
 800d33e:	4934      	ldr	r1, [pc, #208]	; (800d410 <sail_copy_hash_map+0xf4>)
 800d340:	2001      	movs	r0, #1
 800d342:	f001 fc63 	bl	800ec0c <sail_log>
 800d346:	4b33      	ldr	r3, [pc, #204]	; (800d414 <sail_copy_hash_map+0xf8>)
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	4b33      	ldr	r3, [pc, #204]	; (800d418 <sail_copy_hash_map+0xfc>)
 800d34c:	22e3      	movs	r2, #227	; 0xe3
 800d34e:	4930      	ldr	r1, [pc, #192]	; (800d410 <sail_copy_hash_map+0xf4>)
 800d350:	2001      	movs	r0, #1
 800d352:	f001 fc5b 	bl	800ec0c <sail_log>
 800d356:	2301      	movs	r3, #1
 800d358:	e052      	b.n	800d400 <sail_copy_hash_map+0xe4>
    SAIL_CHECK_PTR(target_hash_map);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bf0c      	ite	eq
 800d360:	2301      	moveq	r3, #1
 800d362:	2300      	movne	r3, #0
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d011      	beq.n	800d38e <sail_copy_hash_map+0x72>
 800d36a:	4b2c      	ldr	r3, [pc, #176]	; (800d41c <sail_copy_hash_map+0x100>)
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	4b27      	ldr	r3, [pc, #156]	; (800d40c <sail_copy_hash_map+0xf0>)
 800d370:	22e4      	movs	r2, #228	; 0xe4
 800d372:	4927      	ldr	r1, [pc, #156]	; (800d410 <sail_copy_hash_map+0xf4>)
 800d374:	2001      	movs	r0, #1
 800d376:	f001 fc49 	bl	800ec0c <sail_log>
 800d37a:	4b26      	ldr	r3, [pc, #152]	; (800d414 <sail_copy_hash_map+0xf8>)
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	4b26      	ldr	r3, [pc, #152]	; (800d418 <sail_copy_hash_map+0xfc>)
 800d380:	22e4      	movs	r2, #228	; 0xe4
 800d382:	4923      	ldr	r1, [pc, #140]	; (800d410 <sail_copy_hash_map+0xf4>)
 800d384:	2001      	movs	r0, #1
 800d386:	f001 fc41 	bl	800ec0c <sail_log>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e038      	b.n	800d400 <sail_copy_hash_map+0xe4>

    struct sail_hash_map *hash_map_local;
    SAIL_TRY(sail_alloc_hash_map(&hash_map_local));
 800d38e:	f107 030c 	add.w	r3, r7, #12
 800d392:	4618      	mov	r0, r3
 800d394:	f7ff ff40 	bl	800d218 <sail_alloc_hash_map>
 800d398:	4603      	mov	r3, r0
 800d39a:	827b      	strh	r3, [r7, #18]
 800d39c:	8a7b      	ldrh	r3, [r7, #18]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bf14      	ite	ne
 800d3a2:	2301      	movne	r3, #1
 800d3a4:	2300      	moveq	r3, #0
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <sail_copy_hash_map+0x94>
 800d3ac:	8a7b      	ldrh	r3, [r7, #18]
 800d3ae:	e027      	b.n	800d400 <sail_copy_hash_map+0xe4>

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	617b      	str	r3, [r7, #20]
 800d3b4:	e01d      	b.n	800d3f2 <sail_copy_hash_map+0xd6>
        SAIL_TRY_OR_CLEANUP(sail_copy_variant_node_chain(source_hash_map->buckets[i], &hash_map_local->buckets[i]),
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4413      	add	r3, r2
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	f003 fcda 	bl	8010d80 <sail_copy_variant_node_chain>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	823b      	strh	r3, [r7, #16]
 800d3d0:	8a3b      	ldrh	r3, [r7, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	bf14      	ite	ne
 800d3d6:	2301      	movne	r3, #1
 800d3d8:	2300      	moveq	r3, #0
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d005      	beq.n	800d3ec <sail_copy_hash_map+0xd0>
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff ff6a 	bl	800d2bc <sail_destroy_hash_map>
 800d3e8:	8a3b      	ldrh	r3, [r7, #16]
 800d3ea:	e009      	b.n	800d400 <sail_copy_hash_map+0xe4>
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	617b      	str	r3, [r7, #20]
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2b1f      	cmp	r3, #31
 800d3f6:	d9de      	bls.n	800d3b6 <sail_copy_hash_map+0x9a>
                            /* cleanup */ sail_destroy_hash_map(hash_map_local));
    }

    *target_hash_map = hash_map_local;
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	08018544 	.word	0x08018544
 800d40c:	080184a8 	.word	0x080184a8
 800d410:	080184c0 	.word	0x080184c0
 800d414:	08018524 	.word	0x08018524
 800d418:	08018520 	.word	0x08018520
 800d41c:	08018554 	.word	0x08018554

0800d420 <sail_alloc_iccp>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_iccp(struct sail_iccp **iccp) {
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af02      	add	r7, sp, #8
 800d426:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(iccp);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	bf0c      	ite	eq
 800d42e:	2301      	moveq	r3, #1
 800d430:	2300      	movne	r3, #0
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b00      	cmp	r3, #0
 800d436:	d011      	beq.n	800d45c <sail_alloc_iccp+0x3c>
 800d438:	4b19      	ldr	r3, [pc, #100]	; (800d4a0 <sail_alloc_iccp+0x80>)
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	4b19      	ldr	r3, [pc, #100]	; (800d4a4 <sail_alloc_iccp+0x84>)
 800d43e:	2222      	movs	r2, #34	; 0x22
 800d440:	4919      	ldr	r1, [pc, #100]	; (800d4a8 <sail_alloc_iccp+0x88>)
 800d442:	2001      	movs	r0, #1
 800d444:	f001 fbe2 	bl	800ec0c <sail_log>
 800d448:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <sail_alloc_iccp+0x8c>)
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <sail_alloc_iccp+0x90>)
 800d44e:	2222      	movs	r2, #34	; 0x22
 800d450:	4915      	ldr	r1, [pc, #84]	; (800d4a8 <sail_alloc_iccp+0x88>)
 800d452:	2001      	movs	r0, #1
 800d454:	f001 fbda 	bl	800ec0c <sail_log>
 800d458:	2301      	movs	r3, #1
 800d45a:	e01d      	b.n	800d498 <sail_alloc_iccp+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_iccp), &ptr));
 800d45c:	f107 0308 	add.w	r3, r7, #8
 800d460:	4619      	mov	r1, r3
 800d462:	2008      	movs	r0, #8
 800d464:	f001 fcca 	bl	800edfc <sail_malloc>
 800d468:	4603      	mov	r3, r0
 800d46a:	81fb      	strh	r3, [r7, #14]
 800d46c:	89fb      	ldrh	r3, [r7, #14]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bf14      	ite	ne
 800d472:	2301      	movne	r3, #1
 800d474:	2300      	moveq	r3, #0
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <sail_alloc_iccp+0x60>
 800d47c:	89fb      	ldrh	r3, [r7, #14]
 800d47e:	e00b      	b.n	800d498 <sail_alloc_iccp+0x78>
    *iccp = ptr;
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	601a      	str	r2, [r3, #0]

    (*iccp)->data        = NULL;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2200      	movs	r2, #0
 800d48c:	601a      	str	r2, [r3, #0]
    (*iccp)->data_length = 0;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2200      	movs	r2, #0
 800d494:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	080185cc 	.word	0x080185cc
 800d4a4:	08018564 	.word	0x08018564
 800d4a8:	0801857c 	.word	0x0801857c
 800d4ac:	080185d8 	.word	0x080185d8
 800d4b0:	080185d4 	.word	0x080185d4

0800d4b4 <sail_alloc_iccp_move_data>:
    *iccp = iccp_local;

    return SAIL_OK;
}

sail_status_t sail_alloc_iccp_move_data(void *data, unsigned data_length, struct sail_iccp **iccp) {
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(data);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	bf0c      	ite	eq
 800d4c6:	2301      	moveq	r3, #1
 800d4c8:	2300      	movne	r3, #0
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d011      	beq.n	800d4f4 <sail_alloc_iccp_move_data+0x40>
 800d4d0:	4b23      	ldr	r3, [pc, #140]	; (800d560 <sail_alloc_iccp_move_data+0xac>)
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	4b23      	ldr	r3, [pc, #140]	; (800d564 <sail_alloc_iccp_move_data+0xb0>)
 800d4d6:	2243      	movs	r2, #67	; 0x43
 800d4d8:	4923      	ldr	r1, [pc, #140]	; (800d568 <sail_alloc_iccp_move_data+0xb4>)
 800d4da:	2001      	movs	r0, #1
 800d4dc:	f001 fb96 	bl	800ec0c <sail_log>
 800d4e0:	4b22      	ldr	r3, [pc, #136]	; (800d56c <sail_alloc_iccp_move_data+0xb8>)
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	4b22      	ldr	r3, [pc, #136]	; (800d570 <sail_alloc_iccp_move_data+0xbc>)
 800d4e6:	2243      	movs	r2, #67	; 0x43
 800d4e8:	491f      	ldr	r1, [pc, #124]	; (800d568 <sail_alloc_iccp_move_data+0xb4>)
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	f001 fb8e 	bl	800ec0c <sail_log>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e031      	b.n	800d558 <sail_alloc_iccp_move_data+0xa4>
    SAIL_CHECK_PTR(iccp);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bf0c      	ite	eq
 800d4fa:	2301      	moveq	r3, #1
 800d4fc:	2300      	movne	r3, #0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d011      	beq.n	800d528 <sail_alloc_iccp_move_data+0x74>
 800d504:	4b1b      	ldr	r3, [pc, #108]	; (800d574 <sail_alloc_iccp_move_data+0xc0>)
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	4b16      	ldr	r3, [pc, #88]	; (800d564 <sail_alloc_iccp_move_data+0xb0>)
 800d50a:	2244      	movs	r2, #68	; 0x44
 800d50c:	4916      	ldr	r1, [pc, #88]	; (800d568 <sail_alloc_iccp_move_data+0xb4>)
 800d50e:	2001      	movs	r0, #1
 800d510:	f001 fb7c 	bl	800ec0c <sail_log>
 800d514:	4b15      	ldr	r3, [pc, #84]	; (800d56c <sail_alloc_iccp_move_data+0xb8>)
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	4b15      	ldr	r3, [pc, #84]	; (800d570 <sail_alloc_iccp_move_data+0xbc>)
 800d51a:	2244      	movs	r2, #68	; 0x44
 800d51c:	4912      	ldr	r1, [pc, #72]	; (800d568 <sail_alloc_iccp_move_data+0xb4>)
 800d51e:	2001      	movs	r0, #1
 800d520:	f001 fb74 	bl	800ec0c <sail_log>
 800d524:	2301      	movs	r3, #1
 800d526:	e017      	b.n	800d558 <sail_alloc_iccp_move_data+0xa4>

    SAIL_TRY(sail_alloc_iccp(iccp));
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7ff ff79 	bl	800d420 <sail_alloc_iccp>
 800d52e:	4603      	mov	r3, r0
 800d530:	82fb      	strh	r3, [r7, #22]
 800d532:	8afb      	ldrh	r3, [r7, #22]
 800d534:	2b00      	cmp	r3, #0
 800d536:	bf14      	ite	ne
 800d538:	2301      	movne	r3, #1
 800d53a:	2300      	moveq	r3, #0
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <sail_alloc_iccp_move_data+0x92>
 800d542:	8afb      	ldrh	r3, [r7, #22]
 800d544:	e008      	b.n	800d558 <sail_alloc_iccp_move_data+0xa4>

    (*iccp)->data        = data;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	601a      	str	r2, [r3, #0]
    (*iccp)->data_length = data_length;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	080185ec 	.word	0x080185ec
 800d564:	08018564 	.word	0x08018564
 800d568:	0801857c 	.word	0x0801857c
 800d56c:	080185d8 	.word	0x080185d8
 800d570:	080185d4 	.word	0x080185d4
 800d574:	080185cc 	.word	0x080185cc

0800d578 <sail_destroy_iccp>:

void sail_destroy_iccp(struct sail_iccp *iccp) {
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]

    if (iccp == NULL) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d008      	beq.n	800d598 <sail_destroy_iccp+0x20>
        return;
    }

    sail_free(iccp->data);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f001 fcbe 	bl	800ef0c <sail_free>
    sail_free(iccp);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f001 fcbb 	bl	800ef0c <sail_free>
 800d596:	e000      	b.n	800d59a <sail_destroy_iccp+0x22>
        return;
 800d598:	bf00      	nop
}
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <sail_alloc_image>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_image(struct sail_image **image) {
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af02      	add	r7, sp, #8
 800d5a6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(image);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf0c      	ite	eq
 800d5ae:	2301      	moveq	r3, #1
 800d5b0:	2300      	movne	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d011      	beq.n	800d5dc <sail_alloc_image+0x3c>
 800d5b8:	4b31      	ldr	r3, [pc, #196]	; (800d680 <sail_alloc_image+0xe0>)
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	4b31      	ldr	r3, [pc, #196]	; (800d684 <sail_alloc_image+0xe4>)
 800d5be:	2222      	movs	r2, #34	; 0x22
 800d5c0:	4931      	ldr	r1, [pc, #196]	; (800d688 <sail_alloc_image+0xe8>)
 800d5c2:	2001      	movs	r0, #1
 800d5c4:	f001 fb22 	bl	800ec0c <sail_log>
 800d5c8:	4b30      	ldr	r3, [pc, #192]	; (800d68c <sail_alloc_image+0xec>)
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	4b30      	ldr	r3, [pc, #192]	; (800d690 <sail_alloc_image+0xf0>)
 800d5ce:	2222      	movs	r2, #34	; 0x22
 800d5d0:	492d      	ldr	r1, [pc, #180]	; (800d688 <sail_alloc_image+0xe8>)
 800d5d2:	2001      	movs	r0, #1
 800d5d4:	f001 fb1a 	bl	800ec0c <sail_log>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e04d      	b.n	800d678 <sail_alloc_image+0xd8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_image), &ptr));
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	2038      	movs	r0, #56	; 0x38
 800d5e4:	f001 fc0a 	bl	800edfc <sail_malloc>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	81fb      	strh	r3, [r7, #14]
 800d5ec:	89fb      	ldrh	r3, [r7, #14]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	bf14      	ite	ne
 800d5f2:	2301      	movne	r3, #1
 800d5f4:	2300      	moveq	r3, #0
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <sail_alloc_image+0x60>
 800d5fc:	89fb      	ldrh	r3, [r7, #14]
 800d5fe:	e03b      	b.n	800d678 <sail_alloc_image+0xd8>
    *image = ptr;
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]

    (*image)->pixels                  = NULL;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]
    (*image)->width                   = 0;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2200      	movs	r2, #0
 800d614:	605a      	str	r2, [r3, #4]
    (*image)->height                  = 0;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	609a      	str	r2, [r3, #8]
    (*image)->bytes_per_line          = 0;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	60da      	str	r2, [r3, #12]
    (*image)->resolution              = NULL;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2200      	movs	r2, #0
 800d62c:	611a      	str	r2, [r3, #16]
    (*image)->pixel_format            = SAIL_PIXEL_FORMAT_UNKNOWN;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2200      	movs	r2, #0
 800d634:	751a      	strb	r2, [r3, #20]
    (*image)->gamma                   = 1;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6819      	ldr	r1, [r3, #0]
 800d63a:	f04f 0200 	mov.w	r2, #0
 800d63e:	4b15      	ldr	r3, [pc, #84]	; (800d694 <sail_alloc_image+0xf4>)
 800d640:	e9c1 2306 	strd	r2, r3, [r1, #24]
    (*image)->delay                   = -1;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d64c:	621a      	str	r2, [r3, #32]
    (*image)->palette                 = NULL;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2200      	movs	r2, #0
 800d654:	625a      	str	r2, [r3, #36]	; 0x24
    (*image)->meta_data_node          = NULL;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2200      	movs	r2, #0
 800d65c:	629a      	str	r2, [r3, #40]	; 0x28
    (*image)->iccp                    = NULL;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2200      	movs	r2, #0
 800d664:	62da      	str	r2, [r3, #44]	; 0x2c
    (*image)->properties              = 0;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2200      	movs	r2, #0
 800d66c:	631a      	str	r2, [r3, #48]	; 0x30
    (*image)->source_image            = NULL;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2200      	movs	r2, #0
 800d674:	635a      	str	r2, [r3, #52]	; 0x34

    return SAIL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	08018674 	.word	0x08018674
 800d684:	0801860c 	.word	0x0801860c
 800d688:	08018624 	.word	0x08018624
 800d68c:	08018680 	.word	0x08018680
 800d690:	0801867c 	.word	0x0801867c
 800d694:	3ff00000 	.word	0x3ff00000

0800d698 <sail_destroy_image>:

void sail_destroy_image(struct sail_image *image) {
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]

    if (image == NULL) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d021      	beq.n	800d6ea <sail_destroy_image+0x52>
        return;
    }

    sail_free(image->pixels);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f001 fc2e 	bl	800ef0c <sail_free>

    sail_destroy_resolution(image->resolution);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 fe63 	bl	800f380 <sail_destroy_resolution>
    sail_destroy_palette(image->palette);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f001 fca4 	bl	800f00c <sail_destroy_palette>
    sail_destroy_meta_data_node_chain(image->meta_data_node);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f001 fc43 	bl	800ef54 <sail_destroy_meta_data_node_chain>
    sail_destroy_iccp(image->iccp);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff ff50 	bl	800d578 <sail_destroy_iccp>
    sail_destroy_source_image(image->source_image);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f002 fc2d 	bl	800ff3c <sail_destroy_source_image>

    sail_free(image);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f001 fc12 	bl	800ef0c <sail_free>
 800d6e8:	e000      	b.n	800d6ec <sail_destroy_image+0x54>
        return;
 800d6ea:	bf00      	nop
}
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <sail_check_image_skeleton_valid>:

    return SAIL_OK;
}

sail_status_t sail_check_image_skeleton_valid(const struct sail_image *image)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(image);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bf0c      	ite	eq
 800d702:	2301      	moveq	r3, #1
 800d704:	2300      	movne	r3, #0
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d011      	beq.n	800d730 <sail_check_image_skeleton_valid+0x3c>
 800d70c:	4b22      	ldr	r3, [pc, #136]	; (800d798 <sail_check_image_skeleton_valid+0xa4>)
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	4b22      	ldr	r3, [pc, #136]	; (800d79c <sail_check_image_skeleton_valid+0xa8>)
 800d712:	2294      	movs	r2, #148	; 0x94
 800d714:	4922      	ldr	r1, [pc, #136]	; (800d7a0 <sail_check_image_skeleton_valid+0xac>)
 800d716:	2001      	movs	r0, #1
 800d718:	f001 fa78 	bl	800ec0c <sail_log>
 800d71c:	4b21      	ldr	r3, [pc, #132]	; (800d7a4 <sail_check_image_skeleton_valid+0xb0>)
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	4b21      	ldr	r3, [pc, #132]	; (800d7a8 <sail_check_image_skeleton_valid+0xb4>)
 800d722:	2294      	movs	r2, #148	; 0x94
 800d724:	491e      	ldr	r1, [pc, #120]	; (800d7a0 <sail_check_image_skeleton_valid+0xac>)
 800d726:	2001      	movs	r0, #1
 800d728:	f001 fa70 	bl	800ec0c <sail_log>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e02e      	b.n	800d78e <sail_check_image_skeleton_valid+0x9a>

    if (image->pixel_format == SAIL_PIXEL_FORMAT_UNKNOWN) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	7d1b      	ldrb	r3, [r3, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <sail_check_image_skeleton_valid+0x58>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_PIXEL_FORMAT);
 800d738:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <sail_check_image_skeleton_valid+0xb8>)
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	4b1a      	ldr	r3, [pc, #104]	; (800d7a8 <sail_check_image_skeleton_valid+0xb4>)
 800d73e:	2297      	movs	r2, #151	; 0x97
 800d740:	4917      	ldr	r1, [pc, #92]	; (800d7a0 <sail_check_image_skeleton_valid+0xac>)
 800d742:	2001      	movs	r0, #1
 800d744:	f001 fa62 	bl	800ec0c <sail_log>
 800d748:	23ca      	movs	r3, #202	; 0xca
 800d74a:	e020      	b.n	800d78e <sail_check_image_skeleton_valid+0x9a>
    }
    if (image->width == 0 || image->height == 0) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <sail_check_image_skeleton_valid+0x68>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d109      	bne.n	800d770 <sail_check_image_skeleton_valid+0x7c>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCORRECT_IMAGE_DIMENSIONS);
 800d75c:	4b14      	ldr	r3, [pc, #80]	; (800d7b0 <sail_check_image_skeleton_valid+0xbc>)
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <sail_check_image_skeleton_valid+0xb4>)
 800d762:	229a      	movs	r2, #154	; 0x9a
 800d764:	490e      	ldr	r1, [pc, #56]	; (800d7a0 <sail_check_image_skeleton_valid+0xac>)
 800d766:	2001      	movs	r0, #1
 800d768:	f001 fa50 	bl	800ec0c <sail_log>
 800d76c:	23c8      	movs	r3, #200	; 0xc8
 800d76e:	e00e      	b.n	800d78e <sail_check_image_skeleton_valid+0x9a>
    }
    if (image->bytes_per_line == 0) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d109      	bne.n	800d78c <sail_check_image_skeleton_valid+0x98>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCORRECT_BYTES_PER_LINE);
 800d778:	4b0e      	ldr	r3, [pc, #56]	; (800d7b4 <sail_check_image_skeleton_valid+0xc0>)
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <sail_check_image_skeleton_valid+0xb4>)
 800d77e:	229d      	movs	r2, #157	; 0x9d
 800d780:	4907      	ldr	r1, [pc, #28]	; (800d7a0 <sail_check_image_skeleton_valid+0xac>)
 800d782:	2001      	movs	r0, #1
 800d784:	f001 fa42 	bl	800ec0c <sail_log>
 800d788:	23d0      	movs	r3, #208	; 0xd0
 800d78a:	e000      	b.n	800d78e <sail_check_image_skeleton_valid+0x9a>
    }

    return SAIL_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	08018674 	.word	0x08018674
 800d79c:	0801860c 	.word	0x0801860c
 800d7a0:	08018624 	.word	0x08018624
 800d7a4:	08018680 	.word	0x08018680
 800d7a8:	0801867c 	.word	0x0801867c
 800d7ac:	080186a4 	.word	0x080186a4
 800d7b0:	080186c4 	.word	0x080186c4
 800d7b4:	080186ec 	.word	0x080186ec

0800d7b8 <sail_check_image_valid>:

sail_status_t sail_check_image_valid(const struct sail_image *image)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(image);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2301      	moveq	r3, #1
 800d7c8:	2300      	movne	r3, #0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d011      	beq.n	800d7f4 <sail_check_image_valid+0x3c>
 800d7d0:	4b31      	ldr	r3, [pc, #196]	; (800d898 <sail_check_image_valid+0xe0>)
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	4b31      	ldr	r3, [pc, #196]	; (800d89c <sail_check_image_valid+0xe4>)
 800d7d6:	22a5      	movs	r2, #165	; 0xa5
 800d7d8:	4931      	ldr	r1, [pc, #196]	; (800d8a0 <sail_check_image_valid+0xe8>)
 800d7da:	2001      	movs	r0, #1
 800d7dc:	f001 fa16 	bl	800ec0c <sail_log>
 800d7e0:	4b30      	ldr	r3, [pc, #192]	; (800d8a4 <sail_check_image_valid+0xec>)
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	4b30      	ldr	r3, [pc, #192]	; (800d8a8 <sail_check_image_valid+0xf0>)
 800d7e6:	22a5      	movs	r2, #165	; 0xa5
 800d7e8:	492d      	ldr	r1, [pc, #180]	; (800d8a0 <sail_check_image_valid+0xe8>)
 800d7ea:	2001      	movs	r0, #1
 800d7ec:	f001 fa0e 	bl	800ec0c <sail_log>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e04d      	b.n	800d890 <sail_check_image_valid+0xd8>

    SAIL_TRY(sail_check_image_skeleton_valid(image));
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff ff7d 	bl	800d6f4 <sail_check_image_skeleton_valid>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	81fb      	strh	r3, [r7, #14]
 800d7fe:	89fb      	ldrh	r3, [r7, #14]
 800d800:	2b00      	cmp	r3, #0
 800d802:	bf14      	ite	ne
 800d804:	2301      	movne	r3, #1
 800d806:	2300      	moveq	r3, #0
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <sail_check_image_valid+0x5a>
 800d80e:	89fb      	ldrh	r3, [r7, #14]
 800d810:	e03e      	b.n	800d890 <sail_check_image_valid+0xd8>

    if (sail_is_indexed(image->pixel_format)) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	7d1b      	ldrb	r3, [r3, #20]
 800d816:	4618      	mov	r0, r3
 800d818:	f003 f85c 	bl	80108d4 <sail_is_indexed>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d01a      	beq.n	800d858 <sail_check_image_valid+0xa0>
        SAIL_CHECK_PTR(image->palette);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d826:	2b00      	cmp	r3, #0
 800d828:	bf0c      	ite	eq
 800d82a:	2301      	moveq	r3, #1
 800d82c:	2300      	movne	r3, #0
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	d011      	beq.n	800d858 <sail_check_image_valid+0xa0>
 800d834:	4b1d      	ldr	r3, [pc, #116]	; (800d8ac <sail_check_image_valid+0xf4>)
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	4b18      	ldr	r3, [pc, #96]	; (800d89c <sail_check_image_valid+0xe4>)
 800d83a:	22aa      	movs	r2, #170	; 0xaa
 800d83c:	4918      	ldr	r1, [pc, #96]	; (800d8a0 <sail_check_image_valid+0xe8>)
 800d83e:	2001      	movs	r0, #1
 800d840:	f001 f9e4 	bl	800ec0c <sail_log>
 800d844:	4b17      	ldr	r3, [pc, #92]	; (800d8a4 <sail_check_image_valid+0xec>)
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	4b17      	ldr	r3, [pc, #92]	; (800d8a8 <sail_check_image_valid+0xf0>)
 800d84a:	22aa      	movs	r2, #170	; 0xaa
 800d84c:	4914      	ldr	r1, [pc, #80]	; (800d8a0 <sail_check_image_valid+0xe8>)
 800d84e:	2001      	movs	r0, #1
 800d850:	f001 f9dc 	bl	800ec0c <sail_log>
 800d854:	2301      	movs	r3, #1
 800d856:	e01b      	b.n	800d890 <sail_check_image_valid+0xd8>
    }

    SAIL_CHECK_PTR(image->pixels);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	bf0c      	ite	eq
 800d860:	2301      	moveq	r3, #1
 800d862:	2300      	movne	r3, #0
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d011      	beq.n	800d88e <sail_check_image_valid+0xd6>
 800d86a:	4b11      	ldr	r3, [pc, #68]	; (800d8b0 <sail_check_image_valid+0xf8>)
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	4b0b      	ldr	r3, [pc, #44]	; (800d89c <sail_check_image_valid+0xe4>)
 800d870:	22ad      	movs	r2, #173	; 0xad
 800d872:	490b      	ldr	r1, [pc, #44]	; (800d8a0 <sail_check_image_valid+0xe8>)
 800d874:	2001      	movs	r0, #1
 800d876:	f001 f9c9 	bl	800ec0c <sail_log>
 800d87a:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <sail_check_image_valid+0xec>)
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <sail_check_image_valid+0xf0>)
 800d880:	22ad      	movs	r2, #173	; 0xad
 800d882:	4907      	ldr	r1, [pc, #28]	; (800d8a0 <sail_check_image_valid+0xe8>)
 800d884:	2001      	movs	r0, #1
 800d886:	f001 f9c1 	bl	800ec0c <sail_log>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <sail_check_image_valid+0xd8>

    return SAIL_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	08018674 	.word	0x08018674
 800d89c:	0801860c 	.word	0x0801860c
 800d8a0:	08018624 	.word	0x08018624
 800d8a4:	08018680 	.word	0x08018680
 800d8a8:	0801867c 	.word	0x0801867c
 800d8ac:	08018710 	.word	0x08018710
 800d8b0:	08018720 	.word	0x08018720

0800d8b4 <rstrip>:
    size_t num_left;
} ini_parse_string_ctx;

/* Strip whitespace chars off end of given string, in place. Return s. */
static char* rstrip(char* s)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
    char* p = s + strlen(s);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7f2 fe19 	bl	80004f4 <strlen>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]
    while (p > s && isspace((unsigned char)(*--p)))
 800d8ca:	e002      	b.n	800d8d2 <rstrip+0x1e>
        *p = '\0';
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	701a      	strb	r2, [r3, #0]
    while (p > s && isspace((unsigned char)(*--p)))
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d90c      	bls.n	800d8f4 <rstrip+0x40>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a06      	ldr	r2, [pc, #24]	; (800d900 <rstrip+0x4c>)
 800d8e8:	4413      	add	r3, r2
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	f003 0308 	and.w	r3, r3, #8
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1eb      	bne.n	800d8cc <rstrip+0x18>
    return s;
 800d8f4:	687b      	ldr	r3, [r7, #4]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	0801c1f2 	.word	0x0801c1f2

0800d904 <lskip>:

/* Return pointer to first non-whitespace char in given string. */
static char* lskip(const char* s)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800d90c:	e002      	b.n	800d914 <lskip+0x10>
        s++;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3301      	adds	r3, #1
 800d912:	607b      	str	r3, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d009      	beq.n	800d930 <lskip+0x2c>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	3301      	adds	r3, #1
 800d922:	4a07      	ldr	r2, [pc, #28]	; (800d940 <lskip+0x3c>)
 800d924:	4413      	add	r3, r2
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f003 0308 	and.w	r3, r3, #8
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1ee      	bne.n	800d90e <lskip+0xa>
    return (char*)s;
 800d930:	687b      	ldr	r3, [r7, #4]
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	0801c1f2 	.word	0x0801c1f2

0800d944 <find_chars_or_comment>:

/* Return pointer to first char (of chars) or inline comment in given string,
   or pointer to NUL at end of string if neither found. Inline comment must
   be prefixed by a whitespace character to register as a comment. */
static char* find_chars_or_comment(const char* s, const char* chars)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
#if INI_ALLOW_INLINE_COMMENTS
    int was_space = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	60fb      	str	r3, [r7, #12]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800d952:	e00b      	b.n	800d96c <find_chars_or_comment+0x28>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
        was_space = isspace((unsigned char)(*s));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	4a15      	ldr	r2, [pc, #84]	; (800d9b0 <find_chars_or_comment+0x6c>)
 800d95c:	4413      	add	r3, r2
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	f003 0308 	and.w	r3, r3, #8
 800d964:	60fb      	str	r3, [r7, #12]
        s++;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	3301      	adds	r3, #1
 800d96a:	607b      	str	r3, [r7, #4]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d017      	beq.n	800d9a4 <find_chars_or_comment+0x60>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d008      	beq.n	800d98c <find_chars_or_comment+0x48>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	4619      	mov	r1, r3
 800d980:	6838      	ldr	r0, [r7, #0]
 800d982:	f006 f950 	bl	8013c26 <strchr>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10b      	bne.n	800d9a4 <find_chars_or_comment+0x60>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d0e0      	beq.n	800d954 <find_chars_or_comment+0x10>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	4619      	mov	r1, r3
 800d998:	4806      	ldr	r0, [pc, #24]	; (800d9b4 <find_chars_or_comment+0x70>)
 800d99a:	f006 f944 	bl	8013c26 <strchr>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d0d7      	beq.n	800d954 <find_chars_or_comment+0x10>
#else
    while (*s && (!chars || !strchr(chars, *s))) {
        s++;
    }
#endif
    return (char*)s;
 800d9a4:	687b      	ldr	r3, [r7, #4]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	0801c1f2 	.word	0x0801c1f2
 800d9b4:	08018730 	.word	0x08018730

0800d9b8 <strncpy0>:

/* Similar to strncpy, but ensures dest (size bytes) is
   NUL-terminated, and doesn't pad with NULs. */
static char* strncpy0(char* dest, const char* src, size_t size)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
    strncpy(dest, src, size - 1);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	68b9      	ldr	r1, [r7, #8]
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f006 fb39 	bl	8014044 <strncpy>
    dest[size - 1] = '\0';
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	4413      	add	r3, r2
 800d9da:	2200      	movs	r2, #0
 800d9dc:	701a      	strb	r2, [r3, #0]

    return dest;
 800d9de:	68fb      	ldr	r3, [r7, #12]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <ini_parse_stream>:

/* See documentation in header file. */
int ini_parse_stream(ini_reader reader, void* stream, ini_handler handler,
                     void* user)
{
 800d9e8:	b590      	push	{r4, r7, lr}
 800d9ea:	b0d9      	sub	sp, #356	; 0x164
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 800d9f2:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 800d9f6:	6020      	str	r0, [r4, #0]
 800d9f8:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800d9fc:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 800da00:	6001      	str	r1, [r0, #0]
 800da02:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800da06:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 800da0a:	600a      	str	r2, [r1, #0]
 800da0c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800da10:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800da14:	6013      	str	r3, [r2, #0]
    /* Uses a fair bit of stack (use heap instead if you need to) */
#if INI_USE_STACK
    char line[INI_MAX_LINE];
    int max_line = INI_MAX_LINE;
 800da16:	23c8      	movs	r3, #200	; 0xc8
 800da18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
#endif
#if INI_ALLOW_REALLOC && !INI_USE_STACK
    char* new_line;
    size_t offset;
#endif
    char section[MAX_SECTION] = "";
 800da1c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800da20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
 800da28:	3304      	adds	r3, #4
 800da2a:	222e      	movs	r2, #46	; 0x2e
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f005 fa8a 	bl	8012f48 <memset>
    char prev_name[MAX_NAME] = "";
 800da34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800da38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800da3c:	2200      	movs	r2, #0
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	3304      	adds	r3, #4
 800da42:	222e      	movs	r2, #46	; 0x2e
 800da44:	2100      	movs	r1, #0
 800da46:	4618      	mov	r0, r3
 800da48:	f005 fa7e 	bl	8012f48 <memset>

    char* start;
    char* end;
    char* name;
    char* value;
    int lineno = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    int error = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#else
#define HANDLER(u, s, n, v) handler(u, s, n, v)
#endif

    /* Scan through stream line by line */
    while (reader(line, (int)max_line, stream) != NULL) {
 800da58:	e104      	b.n	800dc64 <ini_parse_stream+0x27c>
                break;
            offset += strlen(line + offset);
        }
#endif

        lineno++;
 800da5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da5e:	3301      	adds	r3, #1
 800da60:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        start = line;
 800da64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800da68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#if INI_ALLOW_BOM
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800da6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da70:	2b01      	cmp	r3, #1
 800da72:	d115      	bne.n	800daa0 <ini_parse_stream+0xb8>
 800da74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2bef      	cmp	r3, #239	; 0xef
 800da7c:	d110      	bne.n	800daa0 <ini_parse_stream+0xb8>
                           (unsigned char)start[1] == 0xBB &&
 800da7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800da82:	3301      	adds	r3, #1
 800da84:	781b      	ldrb	r3, [r3, #0]
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800da86:	2bbb      	cmp	r3, #187	; 0xbb
 800da88:	d10a      	bne.n	800daa0 <ini_parse_stream+0xb8>
                           (unsigned char)start[2] == 0xBF) {
 800da8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800da8e:	3302      	adds	r3, #2
 800da90:	781b      	ldrb	r3, [r3, #0]
                           (unsigned char)start[1] == 0xBB &&
 800da92:	2bbf      	cmp	r3, #191	; 0xbf
 800da94:	d104      	bne.n	800daa0 <ini_parse_stream+0xb8>
            start += 3;
 800da96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800da9a:	3303      	adds	r3, #3
 800da9c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        }
#endif
        start = lskip(rstrip(start));
 800daa0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800daa4:	f7ff ff06 	bl	800d8b4 <rstrip>
 800daa8:	4603      	mov	r3, r0
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff ff2a 	bl	800d904 <lskip>
 800dab0:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

        if (strchr(INI_START_COMMENT_PREFIXES, *start)) {
 800dab4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	4619      	mov	r1, r3
 800dabc:	4876      	ldr	r0, [pc, #472]	; (800dc98 <ini_parse_stream+0x2b0>)
 800dabe:	f006 f8b2 	bl	8013c26 <strchr>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f040 80cd 	bne.w	800dc64 <ini_parse_stream+0x27c>
            /* Start-of-line comment */
        }
#if INI_ALLOW_MULTILINE
        else if (*prev_name && *start && start > line) {
 800daca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dace:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d029      	beq.n	800db2c <ini_parse_stream+0x144>
 800dad8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d024      	beq.n	800db2c <ini_parse_stream+0x144>
 800dae2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dae6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800daea:	429a      	cmp	r2, r3
 800daec:	d91e      	bls.n	800db2c <ini_parse_stream+0x144>
            /* Non-blank line with leading whitespace, treat as continuation
               of previous name's value (as per Python configparser). */
            if (!HANDLER(user, section, prev_name, start) && !error)
 800daee:	f107 0214 	add.w	r2, r7, #20
 800daf2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800daf6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dafa:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800dafe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800db02:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800db06:	681c      	ldr	r4, [r3, #0]
 800db08:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800db0c:	6800      	ldr	r0, [r0, #0]
 800db0e:	47a0      	blx	r4
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	f040 80a6 	bne.w	800dc64 <ini_parse_stream+0x27c>
 800db18:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 80a1 	bne.w	800dc64 <ini_parse_stream+0x27c>
                error = lineno;
 800db22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if (!HANDLER(user, section, prev_name, start) && !error)
 800db2a:	e09b      	b.n	800dc64 <ini_parse_stream+0x27c>
        }
#endif
        else if (*start == '[') {
 800db2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b5b      	cmp	r3, #91	; 0x5b
 800db34:	d12a      	bne.n	800db8c <ini_parse_stream+0x1a4>
            /* A "[section]" line */
            end = find_chars_or_comment(start + 1, "]");
 800db36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800db3a:	3301      	adds	r3, #1
 800db3c:	4957      	ldr	r1, [pc, #348]	; (800dc9c <ini_parse_stream+0x2b4>)
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff ff00 	bl	800d944 <find_chars_or_comment>
 800db44:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == ']') {
 800db48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b5d      	cmp	r3, #93	; 0x5d
 800db50:	d113      	bne.n	800db7a <ini_parse_stream+0x192>
                *end = '\0';
 800db52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800db56:	2200      	movs	r2, #0
 800db58:	701a      	strb	r2, [r3, #0]
                strncpy0(section, start + 1, sizeof(section));
 800db5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800db5e:	1c59      	adds	r1, r3, #1
 800db60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db64:	2232      	movs	r2, #50	; 0x32
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff ff26 	bl	800d9b8 <strncpy0>
                *prev_name = '\0';
 800db6c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800db70:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800db74:	2200      	movs	r2, #0
 800db76:	701a      	strb	r2, [r3, #0]
 800db78:	e074      	b.n	800dc64 <ini_parse_stream+0x27c>
#if INI_CALL_HANDLER_ON_NEW_SECTION
                if (!HANDLER(user, section, NULL, NULL) && !error)
                    error = lineno;
#endif
            }
            else if (!error) {
 800db7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d170      	bne.n	800dc64 <ini_parse_stream+0x27c>
                /* No ']' found on section line */
                error = lineno;
 800db82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800db8a:	e06b      	b.n	800dc64 <ini_parse_stream+0x27c>
            }
        }
        else if (*start) {
 800db8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d066      	beq.n	800dc64 <ini_parse_stream+0x27c>
            /* Not a comment, must be a name[=:]value pair */
            end = find_chars_or_comment(start, "=:");
 800db96:	4942      	ldr	r1, [pc, #264]	; (800dca0 <ini_parse_stream+0x2b8>)
 800db98:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800db9c:	f7ff fed2 	bl	800d944 <find_chars_or_comment>
 800dba0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == '=' || *end == ':') {
 800dba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2b3d      	cmp	r3, #61	; 0x3d
 800dbac:	d004      	beq.n	800dbb8 <ini_parse_stream+0x1d0>
 800dbae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b3a      	cmp	r3, #58	; 0x3a
 800dbb6:	d14d      	bne.n	800dc54 <ini_parse_stream+0x26c>
                *end = '\0';
 800dbb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
                name = rstrip(start);
 800dbc0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800dbc4:	f7ff fe76 	bl	800d8b4 <rstrip>
 800dbc8:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
                value = end + 1;
 800dbcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
#if INI_ALLOW_INLINE_COMMENTS
                end = find_chars_or_comment(value, NULL);
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800dbdc:	f7ff feb2 	bl	800d944 <find_chars_or_comment>
 800dbe0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                if (*end)
 800dbe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <ini_parse_stream+0x20e>
                    *end = '\0';
 800dbee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	701a      	strb	r2, [r3, #0]
#endif
                value = lskip(value);
 800dbf6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800dbfa:	f7ff fe83 	bl	800d904 <lskip>
 800dbfe:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
                rstrip(value);
 800dc02:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800dc06:	f7ff fe55 	bl	800d8b4 <rstrip>

                /* Valid name[=:]value pair found, call handler */
                strncpy0(prev_name, name, sizeof(prev_name));
 800dc0a:	f107 0314 	add.w	r3, r7, #20
 800dc0e:	2232      	movs	r2, #50	; 0x32
 800dc10:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7ff fecf 	bl	800d9b8 <strncpy0>
                if (!HANDLER(user, section, name, value) && !error)
 800dc1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dc1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dc22:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800dc26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dc2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800dc2e:	681c      	ldr	r4, [r3, #0]
 800dc30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dc34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800dc38:	6800      	ldr	r0, [r0, #0]
 800dc3a:	47a0      	blx	r4
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d110      	bne.n	800dc64 <ini_parse_stream+0x27c>
 800dc42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10c      	bne.n	800dc64 <ini_parse_stream+0x27c>
                    error = lineno;
 800dc4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                if (!HANDLER(user, section, name, value) && !error)
 800dc52:	e007      	b.n	800dc64 <ini_parse_stream+0x27c>
            }
            else if (!error) {
 800dc54:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d103      	bne.n	800dc64 <ini_parse_stream+0x27c>
                *end = '\0';
                name = rstrip(start);
                if (!HANDLER(user, section, name, NULL) && !error)
                    error = lineno;
#else
                error = lineno;
 800dc5c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc60:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    while (reader(line, (int)max_line, stream) != NULL) {
 800dc64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dc68:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800dc6c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800dc70:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800dc74:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6812      	ldr	r2, [r2, #0]
 800dc7c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800dc80:	4798      	blx	r3
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f47f aee8 	bne.w	800da5a <ini_parse_stream+0x72>

#if !INI_USE_STACK
    sail_free(line);
#endif

    return error;
 800dc8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd90      	pop	{r4, r7, pc}
 800dc98:	08018734 	.word	0x08018734
 800dc9c:	08018738 	.word	0x08018738
 800dca0:	0801873c 	.word	0x0801873c

0800dca4 <ini_reader_string>:
    return error;
}

/* An ini_reader function to read the next line from a string buffer. This
   is the fgets() equivalent used by ini_parse_string(). */
static char* ini_reader_string(char* str, int num, void* stream) {
 800dca4:	b480      	push	{r7}
 800dca6:	b08b      	sub	sp, #44	; 0x2c
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
    ini_parse_string_ctx* ctx = (ini_parse_string_ctx*)stream;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	61bb      	str	r3, [r7, #24]
    const char* ctx_ptr = ctx->ptr;
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ctx_num_left = ctx->num_left;
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	623b      	str	r3, [r7, #32]
    char* strp = str;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	61fb      	str	r3, [r7, #28]
    char c;

    if (ctx_num_left == 0 || num < 2)
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <ini_reader_string+0x2c>
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	dc14      	bgt.n	800dcfa <ini_reader_string+0x56>
        return NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e024      	b.n	800dd1e <ini_reader_string+0x7a>

    while (num > 1 && ctx_num_left != 0) {
        c = *ctx_ptr++;
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	1c5a      	adds	r2, r3, #1
 800dcd8:	627a      	str	r2, [r7, #36]	; 0x24
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	75fb      	strb	r3, [r7, #23]
        ctx_num_left--;
 800dcde:	6a3b      	ldr	r3, [r7, #32]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	623b      	str	r3, [r7, #32]
        *strp++ = c;
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	61fa      	str	r2, [r7, #28]
 800dcea:	7dfa      	ldrb	r2, [r7, #23]
 800dcec:	701a      	strb	r2, [r3, #0]
        if (c == '\n')
 800dcee:	7dfb      	ldrb	r3, [r7, #23]
 800dcf0:	2b0a      	cmp	r3, #10
 800dcf2:	d009      	beq.n	800dd08 <ini_reader_string+0x64>
            break;
        num--;
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	60bb      	str	r3, [r7, #8]
    while (num > 1 && ctx_num_left != 0) {
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	dd04      	ble.n	800dd0a <ini_reader_string+0x66>
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1e6      	bne.n	800dcd4 <ini_reader_string+0x30>
 800dd06:	e000      	b.n	800dd0a <ini_reader_string+0x66>
            break;
 800dd08:	bf00      	nop
    }

    *strp = '\0';
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	701a      	strb	r2, [r3, #0]
    ctx->ptr = ctx_ptr;
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd14:	601a      	str	r2, [r3, #0]
    ctx->num_left = ctx_num_left;
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	6a3a      	ldr	r2, [r7, #32]
 800dd1a:	605a      	str	r2, [r3, #4]
    return str;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	372c      	adds	r7, #44	; 0x2c
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
	...

0800dd2c <ini_parse_string>:

/* See documentation in header file. */
int ini_parse_string(const char* string, ini_handler handler, void* user) {
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
    ini_parse_string_ctx ctx;

    ctx.ptr = string;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	613b      	str	r3, [r7, #16]
    ctx.num_left = strlen(string);
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7f2 fbd9 	bl	80004f4 <strlen>
 800dd42:	4603      	mov	r3, r0
 800dd44:	617b      	str	r3, [r7, #20]
    return ini_parse_stream((ini_reader)ini_reader_string, &ctx, handler,
 800dd46:	f107 0110 	add.w	r1, r7, #16
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	4804      	ldr	r0, [pc, #16]	; (800dd60 <ini_parse_string+0x34>)
 800dd50:	f7ff fe4a 	bl	800d9e8 <ini_parse_stream>
 800dd54:	4603      	mov	r3, r0
                            user);
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	0800dca5 	.word	0x0800dca5

0800dd64 <sail_alloc_io>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_io(struct sail_io **io) {
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af02      	add	r7, sp, #8
 800dd6a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(io);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bf0c      	ite	eq
 800dd72:	2301      	moveq	r3, #1
 800dd74:	2300      	movne	r3, #0
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d011      	beq.n	800dda0 <sail_alloc_io+0x3c>
 800dd7c:	4b2f      	ldr	r3, [pc, #188]	; (800de3c <sail_alloc_io+0xd8>)
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	4b2f      	ldr	r3, [pc, #188]	; (800de40 <sail_alloc_io+0xdc>)
 800dd82:	2223      	movs	r2, #35	; 0x23
 800dd84:	492f      	ldr	r1, [pc, #188]	; (800de44 <sail_alloc_io+0xe0>)
 800dd86:	2001      	movs	r0, #1
 800dd88:	f000 ff40 	bl	800ec0c <sail_log>
 800dd8c:	4b2e      	ldr	r3, [pc, #184]	; (800de48 <sail_alloc_io+0xe4>)
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	4b2e      	ldr	r3, [pc, #184]	; (800de4c <sail_alloc_io+0xe8>)
 800dd92:	2223      	movs	r2, #35	; 0x23
 800dd94:	492b      	ldr	r1, [pc, #172]	; (800de44 <sail_alloc_io+0xe0>)
 800dd96:	2001      	movs	r0, #1
 800dd98:	f000 ff38 	bl	800ec0c <sail_log>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e049      	b.n	800de34 <sail_alloc_io+0xd0>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_io), &ptr));
 800dda0:	f107 0308 	add.w	r3, r7, #8
 800dda4:	4619      	mov	r1, r3
 800dda6:	2038      	movs	r0, #56	; 0x38
 800dda8:	f001 f828 	bl	800edfc <sail_malloc>
 800ddac:	4603      	mov	r3, r0
 800ddae:	81fb      	strh	r3, [r7, #14]
 800ddb0:	89fb      	ldrh	r3, [r7, #14]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	bf14      	ite	ne
 800ddb6:	2301      	movne	r3, #1
 800ddb8:	2300      	moveq	r3, #0
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <sail_alloc_io+0x60>
 800ddc0:	89fb      	ldrh	r3, [r7, #14]
 800ddc2:	e037      	b.n	800de34 <sail_alloc_io+0xd0>
    *io = ptr;
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	601a      	str	r2, [r3, #0]

    (*io)->id             = 0;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6819      	ldr	r1, [r3, #0]
 800ddce:	f04f 0200 	mov.w	r2, #0
 800ddd2:	f04f 0300 	mov.w	r3, #0
 800ddd6:	e9c1 2300 	strd	r2, r3, [r1]
    (*io)->features       = 0;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2200      	movs	r2, #0
 800dde0:	609a      	str	r2, [r3, #8]
    (*io)->stream         = NULL;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2200      	movs	r2, #0
 800dde8:	60da      	str	r2, [r3, #12]
    (*io)->tolerant_read  = NULL;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	611a      	str	r2, [r3, #16]
    (*io)->strict_read    = NULL;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	615a      	str	r2, [r3, #20]
    (*io)->tolerant_write = NULL;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2200      	movs	r2, #0
 800de00:	619a      	str	r2, [r3, #24]
    (*io)->strict_write   = NULL;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2200      	movs	r2, #0
 800de08:	61da      	str	r2, [r3, #28]
    (*io)->seek           = NULL;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2200      	movs	r2, #0
 800de10:	621a      	str	r2, [r3, #32]
    (*io)->tell           = NULL;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2200      	movs	r2, #0
 800de18:	625a      	str	r2, [r3, #36]	; 0x24
    (*io)->flush          = NULL;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2200      	movs	r2, #0
 800de20:	629a      	str	r2, [r3, #40]	; 0x28
    (*io)->close          = NULL;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2200      	movs	r2, #0
 800de28:	62da      	str	r2, [r3, #44]	; 0x2c
    (*io)->eof            = NULL;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2200      	movs	r2, #0
 800de30:	631a      	str	r2, [r3, #48]	; 0x30

    return SAIL_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	080187b0 	.word	0x080187b0
 800de40:	08018744 	.word	0x08018744
 800de44:	0801875c 	.word	0x0801875c
 800de48:	080187b8 	.word	0x080187b8
 800de4c:	080187b4 	.word	0x080187b4

0800de50 <sail_destroy_io>:

void sail_destroy_io(struct sail_io *io) {
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]

    if (io == NULL) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d01e      	beq.n	800de9c <sail_destroy_io+0x4c>
        return;
    }

    if (io->close != NULL && io->stream != NULL) {
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de62:	2b00      	cmp	r3, #0
 800de64:	d016      	beq.n	800de94 <sail_destroy_io+0x44>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d012      	beq.n	800de94 <sail_destroy_io+0x44>
        SAIL_TRY_OR_EXECUTE(io->close(io->stream),
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	68d2      	ldr	r2, [r2, #12]
 800de76:	4610      	mov	r0, r2
 800de78:	4798      	blx	r3
 800de7a:	4603      	mov	r3, r0
 800de7c:	81fb      	strh	r3, [r7, #14]
 800de7e:	89fb      	ldrh	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	bf14      	ite	ne
 800de84:	2301      	movne	r3, #1
 800de86:	2300      	moveq	r3, #0
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <sail_destroy_io+0x44>
 800de8e:	4805      	ldr	r0, [pc, #20]	; (800dea4 <sail_destroy_io+0x54>)
 800de90:	f002 fd32 	bl	80108f8 <sail_print_errno>
                            /* on error */ sail_print_errno("Failed to close the I/O stream: %s"));
    }

    sail_free(io);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f001 f839 	bl	800ef0c <sail_free>
 800de9a:	e000      	b.n	800de9e <sail_destroy_io+0x4e>
        return;
 800de9c:	bf00      	nop
}
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	080187cc 	.word	0x080187cc

0800dea8 <sail_check_io_valid>:

sail_status_t sail_check_io_valid(const struct sail_io *io)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af02      	add	r7, sp, #8
 800deae:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(io);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	bf0c      	ite	eq
 800deb6:	2301      	moveq	r3, #1
 800deb8:	2300      	movne	r3, #0
 800deba:	b2db      	uxtb	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	d011      	beq.n	800dee4 <sail_check_io_valid+0x3c>
 800dec0:	4b24      	ldr	r3, [pc, #144]	; (800df54 <sail_check_io_valid+0xac>)
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	4b24      	ldr	r3, [pc, #144]	; (800df58 <sail_check_io_valid+0xb0>)
 800dec6:	2249      	movs	r2, #73	; 0x49
 800dec8:	4924      	ldr	r1, [pc, #144]	; (800df5c <sail_check_io_valid+0xb4>)
 800deca:	2001      	movs	r0, #1
 800decc:	f000 fe9e 	bl	800ec0c <sail_log>
 800ded0:	4b23      	ldr	r3, [pc, #140]	; (800df60 <sail_check_io_valid+0xb8>)
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	4b23      	ldr	r3, [pc, #140]	; (800df64 <sail_check_io_valid+0xbc>)
 800ded6:	2249      	movs	r2, #73	; 0x49
 800ded8:	4920      	ldr	r1, [pc, #128]	; (800df5c <sail_check_io_valid+0xb4>)
 800deda:	2001      	movs	r0, #1
 800dedc:	f000 fe96 	bl	800ec0c <sail_log>
 800dee0:	2301      	movs	r3, #1
 800dee2:	e033      	b.n	800df4c <sail_check_io_valid+0xa4>

    if (io->id == 0U                   ||
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	4313      	orrs	r3, r2
 800deec:	d023      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->tolerant_read  == NULL ||
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	691b      	ldr	r3, [r3, #16]
    if (io->id == 0U                   ||
 800def2:	2b00      	cmp	r3, #0
 800def4:	d01f      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->strict_read    == NULL ||
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	695b      	ldr	r3, [r3, #20]
            io->tolerant_read  == NULL ||
 800defa:	2b00      	cmp	r3, #0
 800defc:	d01b      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->tolerant_write == NULL ||
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	699b      	ldr	r3, [r3, #24]
            io->strict_read    == NULL ||
 800df02:	2b00      	cmp	r3, #0
 800df04:	d017      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->strict_write   == NULL ||
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	69db      	ldr	r3, [r3, #28]
            io->tolerant_write == NULL ||
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d013      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->seek           == NULL ||
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a1b      	ldr	r3, [r3, #32]
            io->strict_write   == NULL ||
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00f      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->tell           == NULL ||
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            io->seek           == NULL ||
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00b      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->flush          == NULL ||
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            io->tell           == NULL ||
 800df22:	2b00      	cmp	r3, #0
 800df24:	d007      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->close          == NULL ||
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            io->flush          == NULL ||
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <sail_check_io_valid+0x8e>
            io->eof            == NULL) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            io->close          == NULL ||
 800df32:	2b00      	cmp	r3, #0
 800df34:	d109      	bne.n	800df4a <sail_check_io_valid+0xa2>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_IO);
 800df36:	4b0c      	ldr	r3, [pc, #48]	; (800df68 <sail_check_io_valid+0xc0>)
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	4b0a      	ldr	r3, [pc, #40]	; (800df64 <sail_check_io_valid+0xbc>)
 800df3c:	2255      	movs	r2, #85	; 0x55
 800df3e:	4907      	ldr	r1, [pc, #28]	; (800df5c <sail_check_io_valid+0xb4>)
 800df40:	2001      	movs	r0, #1
 800df42:	f000 fe63 	bl	800ec0c <sail_log>
 800df46:	2364      	movs	r3, #100	; 0x64
 800df48:	e000      	b.n	800df4c <sail_check_io_valid+0xa4>
    }

    return SAIL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	080187b0 	.word	0x080187b0
 800df58:	08018744 	.word	0x08018744
 800df5c:	0801875c 	.word	0x0801875c
 800df60:	080187b8 	.word	0x080187b8
 800df64:	080187b4 	.word	0x080187b4
 800df68:	080187f0 	.word	0x080187f0

0800df6c <io_memory_tolerant_read>:

/*
 * Private functions.
 */

static sail_status_t io_memory_tolerant_read(void *stream, void *buf, size_t size_to_read, size_t *read_size) {
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b08a      	sub	sp, #40	; 0x28
 800df70:	af02      	add	r7, sp, #8
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d011      	beq.n	800dfae <io_memory_tolerant_read+0x42>
 800df8a:	4b42      	ldr	r3, [pc, #264]	; (800e094 <io_memory_tolerant_read+0x128>)
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	4b42      	ldr	r3, [pc, #264]	; (800e098 <io_memory_tolerant_read+0x12c>)
 800df90:	224c      	movs	r2, #76	; 0x4c
 800df92:	4942      	ldr	r1, [pc, #264]	; (800e09c <io_memory_tolerant_read+0x130>)
 800df94:	2001      	movs	r0, #1
 800df96:	f000 fe39 	bl	800ec0c <sail_log>
 800df9a:	4b41      	ldr	r3, [pc, #260]	; (800e0a0 <io_memory_tolerant_read+0x134>)
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	4b41      	ldr	r3, [pc, #260]	; (800e0a4 <io_memory_tolerant_read+0x138>)
 800dfa0:	224c      	movs	r2, #76	; 0x4c
 800dfa2:	493e      	ldr	r1, [pc, #248]	; (800e09c <io_memory_tolerant_read+0x130>)
 800dfa4:	2001      	movs	r0, #1
 800dfa6:	f000 fe31 	bl	800ec0c <sail_log>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e06e      	b.n	800e08c <io_memory_tolerant_read+0x120>
    SAIL_CHECK_PTR(buf);
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	bf0c      	ite	eq
 800dfb4:	2301      	moveq	r3, #1
 800dfb6:	2300      	movne	r3, #0
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d011      	beq.n	800dfe2 <io_memory_tolerant_read+0x76>
 800dfbe:	4b3a      	ldr	r3, [pc, #232]	; (800e0a8 <io_memory_tolerant_read+0x13c>)
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	4b35      	ldr	r3, [pc, #212]	; (800e098 <io_memory_tolerant_read+0x12c>)
 800dfc4:	224d      	movs	r2, #77	; 0x4d
 800dfc6:	4935      	ldr	r1, [pc, #212]	; (800e09c <io_memory_tolerant_read+0x130>)
 800dfc8:	2001      	movs	r0, #1
 800dfca:	f000 fe1f 	bl	800ec0c <sail_log>
 800dfce:	4b34      	ldr	r3, [pc, #208]	; (800e0a0 <io_memory_tolerant_read+0x134>)
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	4b34      	ldr	r3, [pc, #208]	; (800e0a4 <io_memory_tolerant_read+0x138>)
 800dfd4:	224d      	movs	r2, #77	; 0x4d
 800dfd6:	4931      	ldr	r1, [pc, #196]	; (800e09c <io_memory_tolerant_read+0x130>)
 800dfd8:	2001      	movs	r0, #1
 800dfda:	f000 fe17 	bl	800ec0c <sail_log>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e054      	b.n	800e08c <io_memory_tolerant_read+0x120>
    SAIL_CHECK_PTR(read_size);
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	bf0c      	ite	eq
 800dfe8:	2301      	moveq	r3, #1
 800dfea:	2300      	movne	r3, #0
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d011      	beq.n	800e016 <io_memory_tolerant_read+0xaa>
 800dff2:	4b2e      	ldr	r3, [pc, #184]	; (800e0ac <io_memory_tolerant_read+0x140>)
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	4b28      	ldr	r3, [pc, #160]	; (800e098 <io_memory_tolerant_read+0x12c>)
 800dff8:	224e      	movs	r2, #78	; 0x4e
 800dffa:	4928      	ldr	r1, [pc, #160]	; (800e09c <io_memory_tolerant_read+0x130>)
 800dffc:	2001      	movs	r0, #1
 800dffe:	f000 fe05 	bl	800ec0c <sail_log>
 800e002:	4b27      	ldr	r3, [pc, #156]	; (800e0a0 <io_memory_tolerant_read+0x134>)
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4b27      	ldr	r3, [pc, #156]	; (800e0a4 <io_memory_tolerant_read+0x138>)
 800e008:	224e      	movs	r2, #78	; 0x4e
 800e00a:	4924      	ldr	r1, [pc, #144]	; (800e09c <io_memory_tolerant_read+0x130>)
 800e00c:	2001      	movs	r0, #1
 800e00e:	f000 fdfd 	bl	800ec0c <sail_log>
 800e012:	2301      	movs	r3, #1
 800e014:	e03a      	b.n	800e08c <io_memory_tolerant_read+0x120>

    struct mem_io_read_stream *mem_io_read_stream = (struct mem_io_read_stream *)stream;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	61fb      	str	r3, [r7, #28]
    struct mem_io_buffer_info *mem_io_buffer_info = &mem_io_read_stream->mem_io_buffer_info;
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	61bb      	str	r3, [r7, #24]

    *read_size = 0;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]

    if (mem_io_buffer_info->pos >= mem_io_buffer_info->accessible_length) {
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	689a      	ldr	r2, [r3, #8]
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d309      	bcc.n	800e044 <io_memory_tolerant_read+0xd8>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_EOF);
 800e030:	4b1f      	ldr	r3, [pc, #124]	; (800e0b0 <io_memory_tolerant_read+0x144>)
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	4b1b      	ldr	r3, [pc, #108]	; (800e0a4 <io_memory_tolerant_read+0x138>)
 800e036:	2256      	movs	r2, #86	; 0x56
 800e038:	4918      	ldr	r1, [pc, #96]	; (800e09c <io_memory_tolerant_read+0x130>)
 800e03a:	2001      	movs	r0, #1
 800e03c:	f000 fde6 	bl	800ec0c <sail_log>
 800e040:	2310      	movs	r3, #16
 800e042:	e023      	b.n	800e08c <io_memory_tolerant_read+0x120>
    }

    size_t actual_size_to_read = (mem_io_buffer_info->pos + size_to_read > mem_io_buffer_info->accessible_length)
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	689a      	ldr	r2, [r3, #8]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	441a      	add	r2, r3
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	685b      	ldr	r3, [r3, #4]
                                 ? mem_io_buffer_info->accessible_length - mem_io_buffer_info->pos
                                 : size_to_read;
 800e050:	429a      	cmp	r2, r3
 800e052:	d905      	bls.n	800e060 <io_memory_tolerant_read+0xf4>
                                 ? mem_io_buffer_info->accessible_length - mem_io_buffer_info->pos
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	685a      	ldr	r2, [r3, #4]
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	689b      	ldr	r3, [r3, #8]
                                 : size_to_read;
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	e000      	b.n	800e062 <io_memory_tolerant_read+0xf6>
 800e060:	687b      	ldr	r3, [r7, #4]
    size_t actual_size_to_read = (mem_io_buffer_info->pos + size_to_read > mem_io_buffer_info->accessible_length)
 800e062:	617b      	str	r3, [r7, #20]

    memcpy(buf, (const char *)mem_io_read_stream->buffer + mem_io_buffer_info->pos, actual_size_to_read);
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	68da      	ldr	r2, [r3, #12]
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	4413      	add	r3, r2
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	4619      	mov	r1, r3
 800e072:	68b8      	ldr	r0, [r7, #8]
 800e074:	f004 ff5a 	bl	8012f2c <memcpy>
    mem_io_buffer_info->pos += actual_size_to_read;
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	689a      	ldr	r2, [r3, #8]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	441a      	add	r2, r3
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	609a      	str	r2, [r3, #8]

    *read_size = actual_size_to_read;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3720      	adds	r7, #32
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	080188ec 	.word	0x080188ec
 800e098:	08018888 	.word	0x08018888
 800e09c:	080188a0 	.word	0x080188a0
 800e0a0:	080188f8 	.word	0x080188f8
 800e0a4:	080188f4 	.word	0x080188f4
 800e0a8:	0801890c 	.word	0x0801890c
 800e0ac:	08018910 	.word	0x08018910
 800e0b0:	0801891c 	.word	0x0801891c

0800e0b4 <io_memory_strict_read>:

static sail_status_t io_memory_strict_read(void *stream, void *buf, size_t size_to_read) {
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]

    size_t read_size;

    SAIL_TRY(io_memory_tolerant_read(stream, buf, size_to_read, &read_size));
 800e0c0:	f107 0310 	add.w	r3, r7, #16
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff ff4f 	bl	800df6c <io_memory_tolerant_read>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	82fb      	strh	r3, [r7, #22]
 800e0d2:	8afb      	ldrh	r3, [r7, #22]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bf14      	ite	ne
 800e0d8:	2301      	movne	r3, #1
 800e0da:	2300      	moveq	r3, #0
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <io_memory_strict_read+0x32>
 800e0e2:	8afb      	ldrh	r3, [r7, #22]
 800e0e4:	e00e      	b.n	800e104 <io_memory_strict_read+0x50>

    if (read_size != size_to_read) {
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d009      	beq.n	800e102 <io_memory_strict_read+0x4e>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_READ_IO);
 800e0ee:	4b07      	ldr	r3, [pc, #28]	; (800e10c <io_memory_strict_read+0x58>)
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	4b07      	ldr	r3, [pc, #28]	; (800e110 <io_memory_strict_read+0x5c>)
 800e0f4:	226c      	movs	r2, #108	; 0x6c
 800e0f6:	4907      	ldr	r1, [pc, #28]	; (800e114 <io_memory_strict_read+0x60>)
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	f000 fd87 	bl	800ec0c <sail_log>
 800e0fe:	230a      	movs	r3, #10
 800e100:	e000      	b.n	800e104 <io_memory_strict_read+0x50>
    }

    return SAIL_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	0801892c 	.word	0x0801892c
 800e110:	080188f4 	.word	0x080188f4
 800e114:	080188a0 	.word	0x080188a0

0800e118 <io_memory_seek>:
    }

    return SAIL_OK;
}

static sail_status_t io_memory_seek(void *stream, long offset, int whence) {
 800e118:	b580      	push	{r7, lr}
 800e11a:	b088      	sub	sp, #32
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(stream);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	bf0c      	ite	eq
 800e12a:	2301      	moveq	r3, #1
 800e12c:	2300      	movne	r3, #0
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b00      	cmp	r3, #0
 800e132:	d011      	beq.n	800e158 <io_memory_seek+0x40>
 800e134:	4b2b      	ldr	r3, [pc, #172]	; (800e1e4 <io_memory_seek+0xcc>)
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	4b2b      	ldr	r3, [pc, #172]	; (800e1e8 <io_memory_seek+0xd0>)
 800e13a:	22a1      	movs	r2, #161	; 0xa1
 800e13c:	492b      	ldr	r1, [pc, #172]	; (800e1ec <io_memory_seek+0xd4>)
 800e13e:	2001      	movs	r0, #1
 800e140:	f000 fd64 	bl	800ec0c <sail_log>
 800e144:	4b2a      	ldr	r3, [pc, #168]	; (800e1f0 <io_memory_seek+0xd8>)
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	4b2a      	ldr	r3, [pc, #168]	; (800e1f4 <io_memory_seek+0xdc>)
 800e14a:	22a1      	movs	r2, #161	; 0xa1
 800e14c:	4927      	ldr	r1, [pc, #156]	; (800e1ec <io_memory_seek+0xd4>)
 800e14e:	2001      	movs	r0, #1
 800e150:	f000 fd5c 	bl	800ec0c <sail_log>
 800e154:	2301      	movs	r3, #1
 800e156:	e041      	b.n	800e1dc <io_memory_seek+0xc4>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	613b      	str	r3, [r7, #16]

    size_t new_pos;

    switch (whence) {
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d012      	beq.n	800e188 <io_memory_seek+0x70>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b02      	cmp	r3, #2
 800e166:	dc15      	bgt.n	800e194 <io_memory_seek+0x7c>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d003      	beq.n	800e176 <io_memory_seek+0x5e>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b01      	cmp	r3, #1
 800e172:	d003      	beq.n	800e17c <io_memory_seek+0x64>
 800e174:	e00e      	b.n	800e194 <io_memory_seek+0x7c>
        case SEEK_SET: {
            new_pos = offset;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	617b      	str	r3, [r7, #20]
            break;
 800e17a:	e015      	b.n	800e1a8 <io_memory_seek+0x90>
        }

        case SEEK_CUR: {
            new_pos = mem_io_buffer_info->pos + offset;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	689a      	ldr	r2, [r3, #8]
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	4413      	add	r3, r2
 800e184:	617b      	str	r3, [r7, #20]
            break;
 800e186:	e00f      	b.n	800e1a8 <io_memory_seek+0x90>
        }

        case SEEK_END: {
            new_pos = mem_io_buffer_info->accessible_length + offset;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	4413      	add	r3, r2
 800e190:	617b      	str	r3, [r7, #20]
            break;
 800e192:	e009      	b.n	800e1a8 <io_memory_seek+0x90>
        }

        default: {
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_SEEK_WHENCE);
 800e194:	4b18      	ldr	r3, [pc, #96]	; (800e1f8 <io_memory_seek+0xe0>)
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	4b16      	ldr	r3, [pc, #88]	; (800e1f4 <io_memory_seek+0xdc>)
 800e19a:	22b8      	movs	r2, #184	; 0xb8
 800e19c:	4913      	ldr	r1, [pc, #76]	; (800e1ec <io_memory_seek+0xd4>)
 800e19e:	2001      	movs	r0, #1
 800e1a0:	f000 fd34 	bl	800ec0c <sail_log>
 800e1a4:	2312      	movs	r3, #18
 800e1a6:	e019      	b.n	800e1dc <io_memory_seek+0xc4>
        }
    }

    /* Correct the value. */
    if (new_pos >= mem_io_buffer_info->length) {
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d307      	bcc.n	800e1c2 <io_memory_seek+0xaa>
        new_pos = mem_io_buffer_info->length;
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	617b      	str	r3, [r7, #20]
        mem_io_buffer_info->accessible_length = mem_io_buffer_info->length;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	605a      	str	r2, [r3, #4]
 800e1c0:	e008      	b.n	800e1d4 <io_memory_seek+0xbc>
    } else if (new_pos >= mem_io_buffer_info->accessible_length) {
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d303      	bcc.n	800e1d4 <io_memory_seek+0xbc>
        mem_io_buffer_info->accessible_length = new_pos + 1;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	605a      	str	r2, [r3, #4]
    }

    mem_io_buffer_info->pos = new_pos;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	080188ec 	.word	0x080188ec
 800e1e8:	08018888 	.word	0x08018888
 800e1ec:	080188a0 	.word	0x080188a0
 800e1f0:	080188f8 	.word	0x080188f8
 800e1f4:	080188f4 	.word	0x080188f4
 800e1f8:	08018964 	.word	0x08018964

0800e1fc <io_memory_tell>:

static sail_status_t io_memory_tell(void *stream, size_t *offset) {
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af02      	add	r7, sp, #8
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	bf0c      	ite	eq
 800e20c:	2301      	moveq	r3, #1
 800e20e:	2300      	movne	r3, #0
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d011      	beq.n	800e23a <io_memory_tell+0x3e>
 800e216:	4b1b      	ldr	r3, [pc, #108]	; (800e284 <io_memory_tell+0x88>)
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	4b1b      	ldr	r3, [pc, #108]	; (800e288 <io_memory_tell+0x8c>)
 800e21c:	22cb      	movs	r2, #203	; 0xcb
 800e21e:	491b      	ldr	r1, [pc, #108]	; (800e28c <io_memory_tell+0x90>)
 800e220:	2001      	movs	r0, #1
 800e222:	f000 fcf3 	bl	800ec0c <sail_log>
 800e226:	4b1a      	ldr	r3, [pc, #104]	; (800e290 <io_memory_tell+0x94>)
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	4b1a      	ldr	r3, [pc, #104]	; (800e294 <io_memory_tell+0x98>)
 800e22c:	22cb      	movs	r2, #203	; 0xcb
 800e22e:	4917      	ldr	r1, [pc, #92]	; (800e28c <io_memory_tell+0x90>)
 800e230:	2001      	movs	r0, #1
 800e232:	f000 fceb 	bl	800ec0c <sail_log>
 800e236:	2301      	movs	r3, #1
 800e238:	e020      	b.n	800e27c <io_memory_tell+0x80>
    SAIL_CHECK_PTR(offset);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	bf0c      	ite	eq
 800e240:	2301      	moveq	r3, #1
 800e242:	2300      	movne	r3, #0
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d011      	beq.n	800e26e <io_memory_tell+0x72>
 800e24a:	4b13      	ldr	r3, [pc, #76]	; (800e298 <io_memory_tell+0x9c>)
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	4b0e      	ldr	r3, [pc, #56]	; (800e288 <io_memory_tell+0x8c>)
 800e250:	22cc      	movs	r2, #204	; 0xcc
 800e252:	490e      	ldr	r1, [pc, #56]	; (800e28c <io_memory_tell+0x90>)
 800e254:	2001      	movs	r0, #1
 800e256:	f000 fcd9 	bl	800ec0c <sail_log>
 800e25a:	4b0d      	ldr	r3, [pc, #52]	; (800e290 <io_memory_tell+0x94>)
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	4b0d      	ldr	r3, [pc, #52]	; (800e294 <io_memory_tell+0x98>)
 800e260:	22cc      	movs	r2, #204	; 0xcc
 800e262:	490a      	ldr	r1, [pc, #40]	; (800e28c <io_memory_tell+0x90>)
 800e264:	2001      	movs	r0, #1
 800e266:	f000 fcd1 	bl	800ec0c <sail_log>
 800e26a:	2301      	movs	r3, #1
 800e26c:	e006      	b.n	800e27c <io_memory_tell+0x80>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	60fb      	str	r3, [r7, #12]

    *offset = mem_io_buffer_info->pos;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	689a      	ldr	r2, [r3, #8]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	080188ec 	.word	0x080188ec
 800e288:	08018888 	.word	0x08018888
 800e28c:	080188a0 	.word	0x080188a0
 800e290:	080188f8 	.word	0x080188f8
 800e294:	080188f4 	.word	0x080188f4
 800e298:	08018988 	.word	0x08018988

0800e29c <io_memory_close>:
    SAIL_CHECK_PTR(stream);

    return SAIL_OK;
}

static sail_status_t io_memory_close(void *stream) {
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(stream);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bf0c      	ite	eq
 800e2aa:	2301      	moveq	r3, #1
 800e2ac:	2300      	movne	r3, #0
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d011      	beq.n	800e2d8 <io_memory_close+0x3c>
 800e2b4:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <io_memory_close+0x4c>)
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	; (800e2ec <io_memory_close+0x50>)
 800e2ba:	22de      	movs	r2, #222	; 0xde
 800e2bc:	490c      	ldr	r1, [pc, #48]	; (800e2f0 <io_memory_close+0x54>)
 800e2be:	2001      	movs	r0, #1
 800e2c0:	f000 fca4 	bl	800ec0c <sail_log>
 800e2c4:	4b0b      	ldr	r3, [pc, #44]	; (800e2f4 <io_memory_close+0x58>)
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	4b0b      	ldr	r3, [pc, #44]	; (800e2f8 <io_memory_close+0x5c>)
 800e2ca:	22de      	movs	r2, #222	; 0xde
 800e2cc:	4908      	ldr	r1, [pc, #32]	; (800e2f0 <io_memory_close+0x54>)
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	f000 fc9c 	bl	800ec0c <sail_log>
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e003      	b.n	800e2e0 <io_memory_close+0x44>

    sail_free(stream);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fe17 	bl	800ef0c <sail_free>

    return SAIL_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	080188ec 	.word	0x080188ec
 800e2ec:	08018888 	.word	0x08018888
 800e2f0:	080188a0 	.word	0x080188a0
 800e2f4:	080188f8 	.word	0x080188f8
 800e2f8:	080188f4 	.word	0x080188f4

0800e2fc <io_memory_eof>:

static sail_status_t io_memory_eof(void *stream, bool *result) {
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af02      	add	r7, sp, #8
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	bf0c      	ite	eq
 800e30c:	2301      	moveq	r3, #1
 800e30e:	2300      	movne	r3, #0
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d011      	beq.n	800e33a <io_memory_eof+0x3e>
 800e316:	4b1f      	ldr	r3, [pc, #124]	; (800e394 <io_memory_eof+0x98>)
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	4b1f      	ldr	r3, [pc, #124]	; (800e398 <io_memory_eof+0x9c>)
 800e31c:	22e7      	movs	r2, #231	; 0xe7
 800e31e:	491f      	ldr	r1, [pc, #124]	; (800e39c <io_memory_eof+0xa0>)
 800e320:	2001      	movs	r0, #1
 800e322:	f000 fc73 	bl	800ec0c <sail_log>
 800e326:	4b1e      	ldr	r3, [pc, #120]	; (800e3a0 <io_memory_eof+0xa4>)
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	4b1e      	ldr	r3, [pc, #120]	; (800e3a4 <io_memory_eof+0xa8>)
 800e32c:	22e7      	movs	r2, #231	; 0xe7
 800e32e:	491b      	ldr	r1, [pc, #108]	; (800e39c <io_memory_eof+0xa0>)
 800e330:	2001      	movs	r0, #1
 800e332:	f000 fc6b 	bl	800ec0c <sail_log>
 800e336:	2301      	movs	r3, #1
 800e338:	e027      	b.n	800e38a <io_memory_eof+0x8e>
    SAIL_CHECK_PTR(result);
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bf0c      	ite	eq
 800e340:	2301      	moveq	r3, #1
 800e342:	2300      	movne	r3, #0
 800e344:	b2db      	uxtb	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d011      	beq.n	800e36e <io_memory_eof+0x72>
 800e34a:	4b17      	ldr	r3, [pc, #92]	; (800e3a8 <io_memory_eof+0xac>)
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	4b12      	ldr	r3, [pc, #72]	; (800e398 <io_memory_eof+0x9c>)
 800e350:	22e8      	movs	r2, #232	; 0xe8
 800e352:	4912      	ldr	r1, [pc, #72]	; (800e39c <io_memory_eof+0xa0>)
 800e354:	2001      	movs	r0, #1
 800e356:	f000 fc59 	bl	800ec0c <sail_log>
 800e35a:	4b11      	ldr	r3, [pc, #68]	; (800e3a0 <io_memory_eof+0xa4>)
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	4b11      	ldr	r3, [pc, #68]	; (800e3a4 <io_memory_eof+0xa8>)
 800e360:	22e8      	movs	r2, #232	; 0xe8
 800e362:	490e      	ldr	r1, [pc, #56]	; (800e39c <io_memory_eof+0xa0>)
 800e364:	2001      	movs	r0, #1
 800e366:	f000 fc51 	bl	800ec0c <sail_log>
 800e36a:	2301      	movs	r3, #1
 800e36c:	e00d      	b.n	800e38a <io_memory_eof+0x8e>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	60fb      	str	r3, [r7, #12]

    *result = mem_io_buffer_info->pos >= mem_io_buffer_info->accessible_length;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	689a      	ldr	r2, [r3, #8]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	bf2c      	ite	cs
 800e37e:	2301      	movcs	r3, #1
 800e380:	2300      	movcc	r3, #0
 800e382:	b2da      	uxtb	r2, r3
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	701a      	strb	r2, [r3, #0]

    return SAIL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	080188ec 	.word	0x080188ec
 800e398:	08018888 	.word	0x08018888
 800e39c:	080188a0 	.word	0x080188a0
 800e3a0:	080188f8 	.word	0x080188f8
 800e3a4:	080188f4 	.word	0x080188f4
 800e3a8:	08018990 	.word	0x08018990
 800e3ac:	00000000 	.word	0x00000000

0800e3b0 <sail_alloc_io_read_memory>:

/*
 * Public functions.
 */

sail_status_t sail_alloc_io_read_memory(const void *buffer, size_t length, struct sail_io **io) {
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08a      	sub	sp, #40	; 0x28
 800e3b4:	af02      	add	r7, sp, #8
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(buffer);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	bf0c      	ite	eq
 800e3c2:	2301      	moveq	r3, #1
 800e3c4:	2300      	movne	r3, #0
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d011      	beq.n	800e3f0 <sail_alloc_io_read_memory+0x40>
 800e3cc:	4b4c      	ldr	r3, [pc, #304]	; (800e500 <sail_alloc_io_read_memory+0x150>)
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	4b4c      	ldr	r3, [pc, #304]	; (800e504 <sail_alloc_io_read_memory+0x154>)
 800e3d2:	22f7      	movs	r2, #247	; 0xf7
 800e3d4:	494c      	ldr	r1, [pc, #304]	; (800e508 <sail_alloc_io_read_memory+0x158>)
 800e3d6:	2001      	movs	r0, #1
 800e3d8:	f000 fc18 	bl	800ec0c <sail_log>
 800e3dc:	4b4b      	ldr	r3, [pc, #300]	; (800e50c <sail_alloc_io_read_memory+0x15c>)
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	4b4b      	ldr	r3, [pc, #300]	; (800e510 <sail_alloc_io_read_memory+0x160>)
 800e3e2:	22f7      	movs	r2, #247	; 0xf7
 800e3e4:	4948      	ldr	r1, [pc, #288]	; (800e508 <sail_alloc_io_read_memory+0x158>)
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	f000 fc10 	bl	800ec0c <sail_log>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e07e      	b.n	800e4ee <sail_alloc_io_read_memory+0x13e>
    SAIL_CHECK_PTR(io);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	bf0c      	ite	eq
 800e3f6:	2301      	moveq	r3, #1
 800e3f8:	2300      	movne	r3, #0
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d011      	beq.n	800e424 <sail_alloc_io_read_memory+0x74>
 800e400:	4b44      	ldr	r3, [pc, #272]	; (800e514 <sail_alloc_io_read_memory+0x164>)
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	4b3f      	ldr	r3, [pc, #252]	; (800e504 <sail_alloc_io_read_memory+0x154>)
 800e406:	22f8      	movs	r2, #248	; 0xf8
 800e408:	493f      	ldr	r1, [pc, #252]	; (800e508 <sail_alloc_io_read_memory+0x158>)
 800e40a:	2001      	movs	r0, #1
 800e40c:	f000 fbfe 	bl	800ec0c <sail_log>
 800e410:	4b3e      	ldr	r3, [pc, #248]	; (800e50c <sail_alloc_io_read_memory+0x15c>)
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	4b3e      	ldr	r3, [pc, #248]	; (800e510 <sail_alloc_io_read_memory+0x160>)
 800e416:	22f8      	movs	r2, #248	; 0xf8
 800e418:	493b      	ldr	r1, [pc, #236]	; (800e508 <sail_alloc_io_read_memory+0x158>)
 800e41a:	2001      	movs	r0, #1
 800e41c:	f000 fbf6 	bl	800ec0c <sail_log>
 800e420:	2301      	movs	r3, #1
 800e422:	e064      	b.n	800e4ee <sail_alloc_io_read_memory+0x13e>

    SAIL_LOG_DEBUG("Opening memory buffer of size %lu for reading", length);
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	4b3b      	ldr	r3, [pc, #236]	; (800e518 <sail_alloc_io_read_memory+0x168>)
 800e42a:	22fa      	movs	r2, #250	; 0xfa
 800e42c:	4936      	ldr	r1, [pc, #216]	; (800e508 <sail_alloc_io_read_memory+0x158>)
 800e42e:	2005      	movs	r0, #5
 800e430:	f000 fbec 	bl	800ec0c <sail_log>

    struct sail_io *io_local;
    SAIL_TRY(sail_alloc_io(&io_local));
 800e434:	f107 0314 	add.w	r3, r7, #20
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff fc93 	bl	800dd64 <sail_alloc_io>
 800e43e:	4603      	mov	r3, r0
 800e440:	83fb      	strh	r3, [r7, #30]
 800e442:	8bfb      	ldrh	r3, [r7, #30]
 800e444:	2b00      	cmp	r3, #0
 800e446:	bf14      	ite	ne
 800e448:	2301      	movne	r3, #1
 800e44a:	2300      	moveq	r3, #0
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <sail_alloc_io_read_memory+0xa6>
 800e452:	8bfb      	ldrh	r3, [r7, #30]
 800e454:	e04b      	b.n	800e4ee <sail_alloc_io_read_memory+0x13e>

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct mem_io_read_stream), &ptr),
 800e456:	f107 0310 	add.w	r3, r7, #16
 800e45a:	4619      	mov	r1, r3
 800e45c:	2010      	movs	r0, #16
 800e45e:	f000 fccd 	bl	800edfc <sail_malloc>
 800e462:	4603      	mov	r3, r0
 800e464:	83bb      	strh	r3, [r7, #28]
 800e466:	8bbb      	ldrh	r3, [r7, #28]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bf14      	ite	ne
 800e46c:	2301      	movne	r3, #1
 800e46e:	2300      	moveq	r3, #0
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d005      	beq.n	800e482 <sail_alloc_io_read_memory+0xd2>
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7ff fce9 	bl	800de50 <sail_destroy_io>
 800e47e:	8bbb      	ldrh	r3, [r7, #28]
 800e480:	e035      	b.n	800e4ee <sail_alloc_io_read_memory+0x13e>
                        /* cleanup */ sail_destroy_io(io_local));
    struct mem_io_read_stream *mem_io_read_stream = ptr;
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	61bb      	str	r3, [r7, #24]

    mem_io_read_stream->mem_io_buffer_info.length            = length;
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	68ba      	ldr	r2, [r7, #8]
 800e48a:	601a      	str	r2, [r3, #0]
    mem_io_read_stream->mem_io_buffer_info.accessible_length = length;
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	68ba      	ldr	r2, [r7, #8]
 800e490:	605a      	str	r2, [r3, #4]
    mem_io_read_stream->mem_io_buffer_info.pos               = 0;
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	2200      	movs	r2, #0
 800e496:	609a      	str	r2, [r3, #8]
    mem_io_read_stream->buffer                               = buffer;
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	60da      	str	r2, [r3, #12]

    io_local->id             = SAIL_MEMORY_IO_ID;
 800e49e:	6979      	ldr	r1, [r7, #20]
 800e4a0:	a315      	add	r3, pc, #84	; (adr r3, 800e4f8 <sail_alloc_io_read_memory+0x148>)
 800e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a6:	e9c1 2300 	strd	r2, r3, [r1]
    io_local->stream         = mem_io_read_stream;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	69ba      	ldr	r2, [r7, #24]
 800e4ae:	60da      	str	r2, [r3, #12]
    io_local->tolerant_read  = io_memory_tolerant_read;
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	4a1a      	ldr	r2, [pc, #104]	; (800e51c <sail_alloc_io_read_memory+0x16c>)
 800e4b4:	611a      	str	r2, [r3, #16]
    io_local->strict_read    = io_memory_strict_read;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	4a19      	ldr	r2, [pc, #100]	; (800e520 <sail_alloc_io_read_memory+0x170>)
 800e4ba:	615a      	str	r2, [r3, #20]
    io_local->tolerant_write = sail_io_noop_tolerant_write;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	4a19      	ldr	r2, [pc, #100]	; (800e524 <sail_alloc_io_read_memory+0x174>)
 800e4c0:	619a      	str	r2, [r3, #24]
    io_local->strict_write   = sail_io_noop_strict_write;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	4a18      	ldr	r2, [pc, #96]	; (800e528 <sail_alloc_io_read_memory+0x178>)
 800e4c6:	61da      	str	r2, [r3, #28]
    io_local->seek           = io_memory_seek;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	4a18      	ldr	r2, [pc, #96]	; (800e52c <sail_alloc_io_read_memory+0x17c>)
 800e4cc:	621a      	str	r2, [r3, #32]
    io_local->tell           = io_memory_tell;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	4a17      	ldr	r2, [pc, #92]	; (800e530 <sail_alloc_io_read_memory+0x180>)
 800e4d2:	625a      	str	r2, [r3, #36]	; 0x24
    io_local->flush          = sail_io_noop_flush;
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	4a17      	ldr	r2, [pc, #92]	; (800e534 <sail_alloc_io_read_memory+0x184>)
 800e4d8:	629a      	str	r2, [r3, #40]	; 0x28
    io_local->close          = io_memory_close;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	4a16      	ldr	r2, [pc, #88]	; (800e538 <sail_alloc_io_read_memory+0x188>)
 800e4de:	62da      	str	r2, [r3, #44]	; 0x2c
    io_local->eof            = io_memory_eof;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	4a16      	ldr	r2, [pc, #88]	; (800e53c <sail_alloc_io_read_memory+0x18c>)
 800e4e4:	631a      	str	r2, [r3, #48]	; 0x30

    *io = io_local;
 800e4e6:	697a      	ldr	r2, [r7, #20]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3720      	adds	r7, #32
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	b238af93 	.word	0xb238af93
 800e4fc:	a5ea23d2 	.word	0xa5ea23d2
 800e500:	08018998 	.word	0x08018998
 800e504:	08018888 	.word	0x08018888
 800e508:	080188a0 	.word	0x080188a0
 800e50c:	080188f8 	.word	0x080188f8
 800e510:	080188f4 	.word	0x080188f4
 800e514:	080189a0 	.word	0x080189a0
 800e518:	080189a4 	.word	0x080189a4
 800e51c:	0800df6d 	.word	0x0800df6d
 800e520:	0800e0b5 	.word	0x0800e0b5
 800e524:	0800e541 	.word	0x0800e541
 800e528:	0800e575 	.word	0x0800e575
 800e52c:	0800e119 	.word	0x0800e119
 800e530:	0800e1fd 	.word	0x0800e1fd
 800e534:	0800e5a9 	.word	0x0800e5a9
 800e538:	0800e29d 	.word	0x0800e29d
 800e53c:	0800e2fd 	.word	0x0800e2fd

0800e540 <sail_io_noop_tolerant_write>:
    (void)offset;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
}

sail_status_t sail_io_noop_tolerant_write(void *stream, const void *buf, size_t size_to_write, size_t *written_size) {
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af02      	add	r7, sp, #8
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
 800e54c:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)size_to_write;
    (void)written_size;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800e54e:	4b06      	ldr	r3, [pc, #24]	; (800e568 <sail_io_noop_tolerant_write+0x28>)
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	4b06      	ldr	r3, [pc, #24]	; (800e56c <sail_io_noop_tolerant_write+0x2c>)
 800e554:	2249      	movs	r2, #73	; 0x49
 800e556:	4906      	ldr	r1, [pc, #24]	; (800e570 <sail_io_noop_tolerant_write+0x30>)
 800e558:	2001      	movs	r0, #1
 800e55a:	f000 fb57 	bl	800ec0c <sail_log>
 800e55e:	2311      	movs	r3, #17
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	08018a54 	.word	0x08018a54
 800e56c:	08018a04 	.word	0x08018a04
 800e570:	08018a08 	.word	0x08018a08

0800e574 <sail_io_noop_strict_write>:

sail_status_t sail_io_noop_strict_write(void *stream, const void *buf, size_t size_to_write) {
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af02      	add	r7, sp, #8
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]

    (void)stream;
    (void)buf;
    (void)size_to_write;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800e580:	4b06      	ldr	r3, [pc, #24]	; (800e59c <sail_io_noop_strict_write+0x28>)
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4b06      	ldr	r3, [pc, #24]	; (800e5a0 <sail_io_noop_strict_write+0x2c>)
 800e586:	2252      	movs	r2, #82	; 0x52
 800e588:	4906      	ldr	r1, [pc, #24]	; (800e5a4 <sail_io_noop_strict_write+0x30>)
 800e58a:	2001      	movs	r0, #1
 800e58c:	f000 fb3e 	bl	800ec0c <sail_log>
 800e590:	2311      	movs	r3, #17
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08018a54 	.word	0x08018a54
 800e5a0:	08018a04 	.word	0x08018a04
 800e5a4:	08018a08 	.word	0x08018a08

0800e5a8 <sail_io_noop_flush>:

sail_status_t sail_io_noop_flush(void *stream) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af02      	add	r7, sp, #8
 800e5ae:	6078      	str	r0, [r7, #4]

    (void)stream;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800e5b0:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <sail_io_noop_flush+0x24>)
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	4b06      	ldr	r3, [pc, #24]	; (800e5d0 <sail_io_noop_flush+0x28>)
 800e5b6:	2259      	movs	r2, #89	; 0x59
 800e5b8:	4906      	ldr	r1, [pc, #24]	; (800e5d4 <sail_io_noop_flush+0x2c>)
 800e5ba:	2001      	movs	r0, #1
 800e5bc:	f000 fb26 	bl	800ec0c <sail_log>
 800e5c0:	2311      	movs	r3, #17
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08018a54 	.word	0x08018a54
 800e5d0:	08018a04 	.word	0x08018a04
 800e5d4:	08018a08 	.word	0x08018a08

0800e5d8 <sail_private_alloc_linked_list_node>:
    SOFTWARE.
*/

#include "sail-common.h"

sail_status_t sail_private_alloc_linked_list_node(struct linked_list_node **node) {
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af02      	add	r7, sp, #8
 800e5de:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(node);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	bf0c      	ite	eq
 800e5e6:	2301      	moveq	r3, #1
 800e5e8:	2300      	movne	r3, #0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d011      	beq.n	800e614 <sail_private_alloc_linked_list_node+0x3c>
 800e5f0:	4b19      	ldr	r3, [pc, #100]	; (800e658 <sail_private_alloc_linked_list_node+0x80>)
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	4b19      	ldr	r3, [pc, #100]	; (800e65c <sail_private_alloc_linked_list_node+0x84>)
 800e5f6:	221e      	movs	r2, #30
 800e5f8:	4919      	ldr	r1, [pc, #100]	; (800e660 <sail_private_alloc_linked_list_node+0x88>)
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	f000 fb06 	bl	800ec0c <sail_log>
 800e600:	4b18      	ldr	r3, [pc, #96]	; (800e664 <sail_private_alloc_linked_list_node+0x8c>)
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	4b18      	ldr	r3, [pc, #96]	; (800e668 <sail_private_alloc_linked_list_node+0x90>)
 800e606:	221e      	movs	r2, #30
 800e608:	4915      	ldr	r1, [pc, #84]	; (800e660 <sail_private_alloc_linked_list_node+0x88>)
 800e60a:	2001      	movs	r0, #1
 800e60c:	f000 fafe 	bl	800ec0c <sail_log>
 800e610:	2301      	movs	r3, #1
 800e612:	e01d      	b.n	800e650 <sail_private_alloc_linked_list_node+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct linked_list_node), &ptr));
 800e614:	f107 0308 	add.w	r3, r7, #8
 800e618:	4619      	mov	r1, r3
 800e61a:	2008      	movs	r0, #8
 800e61c:	f000 fbee 	bl	800edfc <sail_malloc>
 800e620:	4603      	mov	r3, r0
 800e622:	81fb      	strh	r3, [r7, #14]
 800e624:	89fb      	ldrh	r3, [r7, #14]
 800e626:	2b00      	cmp	r3, #0
 800e628:	bf14      	ite	ne
 800e62a:	2301      	movne	r3, #1
 800e62c:	2300      	moveq	r3, #0
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <sail_private_alloc_linked_list_node+0x60>
 800e634:	89fb      	ldrh	r3, [r7, #14]
 800e636:	e00b      	b.n	800e650 <sail_private_alloc_linked_list_node+0x78>
    *node = ptr;
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	601a      	str	r2, [r3, #0]

    (*node)->value = NULL;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]
    (*node)->next  = NULL;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2200      	movs	r2, #0
 800e64c:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	08018ae4 	.word	0x08018ae4
 800e65c:	08018a70 	.word	0x08018a70
 800e660:	08018a88 	.word	0x08018a88
 800e664:	08018af0 	.word	0x08018af0
 800e668:	08018aec 	.word	0x08018aec

0800e66c <sail_private_destroy_linked_list_node>:

    return SAIL_OK;
}

void sail_private_destroy_linked_list_node(struct linked_list_node *node,
                                           linked_list_value_deallocator_t value_deallocator) {
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]

    if (node == NULL) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d008      	beq.n	800e68e <sail_private_destroy_linked_list_node+0x22>
        return;
    }

    value_deallocator(node->value);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	4610      	mov	r0, r2
 800e684:	4798      	blx	r3
    sail_free(node);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fc40 	bl	800ef0c <sail_free>
 800e68c:	e000      	b.n	800e690 <sail_private_destroy_linked_list_node+0x24>
        return;
 800e68e:	bf00      	nop
}
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
	...

0800e698 <sail_private_copy_linked_list_node>:

sail_status_t sail_private_copy_linked_list_node(const struct linked_list_node *source,
                                                 struct linked_list_node **target,
                                                 linked_list_value_copier_t value_copier,
                                                 linked_list_value_deallocator_t value_deallocator) {
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08a      	sub	sp, #40	; 0x28
 800e69c:	af02      	add	r7, sp, #8
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(source);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	bf0c      	ite	eq
 800e6ac:	2301      	moveq	r3, #1
 800e6ae:	2300      	movne	r3, #0
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d011      	beq.n	800e6da <sail_private_copy_linked_list_node+0x42>
 800e6b6:	4b30      	ldr	r3, [pc, #192]	; (800e778 <sail_private_copy_linked_list_node+0xe0>)
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	4b30      	ldr	r3, [pc, #192]	; (800e77c <sail_private_copy_linked_list_node+0xe4>)
 800e6bc:	224b      	movs	r2, #75	; 0x4b
 800e6be:	4930      	ldr	r1, [pc, #192]	; (800e780 <sail_private_copy_linked_list_node+0xe8>)
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	f000 faa3 	bl	800ec0c <sail_log>
 800e6c6:	4b2f      	ldr	r3, [pc, #188]	; (800e784 <sail_private_copy_linked_list_node+0xec>)
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	4b2f      	ldr	r3, [pc, #188]	; (800e788 <sail_private_copy_linked_list_node+0xf0>)
 800e6cc:	224b      	movs	r2, #75	; 0x4b
 800e6ce:	492c      	ldr	r1, [pc, #176]	; (800e780 <sail_private_copy_linked_list_node+0xe8>)
 800e6d0:	2001      	movs	r0, #1
 800e6d2:	f000 fa9b 	bl	800ec0c <sail_log>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e049      	b.n	800e76e <sail_private_copy_linked_list_node+0xd6>
    SAIL_CHECK_PTR(target);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bf0c      	ite	eq
 800e6e0:	2301      	moveq	r3, #1
 800e6e2:	2300      	movne	r3, #0
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d011      	beq.n	800e70e <sail_private_copy_linked_list_node+0x76>
 800e6ea:	4b28      	ldr	r3, [pc, #160]	; (800e78c <sail_private_copy_linked_list_node+0xf4>)
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	4b23      	ldr	r3, [pc, #140]	; (800e77c <sail_private_copy_linked_list_node+0xe4>)
 800e6f0:	224c      	movs	r2, #76	; 0x4c
 800e6f2:	4923      	ldr	r1, [pc, #140]	; (800e780 <sail_private_copy_linked_list_node+0xe8>)
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	f000 fa89 	bl	800ec0c <sail_log>
 800e6fa:	4b22      	ldr	r3, [pc, #136]	; (800e784 <sail_private_copy_linked_list_node+0xec>)
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	4b22      	ldr	r3, [pc, #136]	; (800e788 <sail_private_copy_linked_list_node+0xf0>)
 800e700:	224c      	movs	r2, #76	; 0x4c
 800e702:	491f      	ldr	r1, [pc, #124]	; (800e780 <sail_private_copy_linked_list_node+0xe8>)
 800e704:	2001      	movs	r0, #1
 800e706:	f000 fa81 	bl	800ec0c <sail_log>
 800e70a:	2301      	movs	r3, #1
 800e70c:	e02f      	b.n	800e76e <sail_private_copy_linked_list_node+0xd6>

    struct linked_list_node *node_local;
    SAIL_TRY(sail_private_alloc_linked_list_node(&node_local));
 800e70e:	f107 0318 	add.w	r3, r7, #24
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff ff60 	bl	800e5d8 <sail_private_alloc_linked_list_node>
 800e718:	4603      	mov	r3, r0
 800e71a:	83fb      	strh	r3, [r7, #30]
 800e71c:	8bfb      	ldrh	r3, [r7, #30]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bf14      	ite	ne
 800e722:	2301      	movne	r3, #1
 800e724:	2300      	moveq	r3, #0
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <sail_private_copy_linked_list_node+0x98>
 800e72c:	8bfb      	ldrh	r3, [r7, #30]
 800e72e:	e01e      	b.n	800e76e <sail_private_copy_linked_list_node+0xd6>

    void *ptr;
    SAIL_TRY_OR_CLEANUP(value_copier(source->value, &ptr),
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	f107 0114 	add.w	r1, r7, #20
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4610      	mov	r0, r2
 800e73c:	4798      	blx	r3
 800e73e:	4603      	mov	r3, r0
 800e740:	83bb      	strh	r3, [r7, #28]
 800e742:	8bbb      	ldrh	r3, [r7, #28]
 800e744:	2b00      	cmp	r3, #0
 800e746:	bf14      	ite	ne
 800e748:	2301      	movne	r3, #1
 800e74a:	2300      	moveq	r3, #0
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d006      	beq.n	800e760 <sail_private_copy_linked_list_node+0xc8>
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff ff88 	bl	800e66c <sail_private_destroy_linked_list_node>
 800e75c:	8bbb      	ldrh	r3, [r7, #28]
 800e75e:	e006      	b.n	800e76e <sail_private_copy_linked_list_node+0xd6>
                        /* cleanup */ sail_private_destroy_linked_list_node(node_local, value_deallocator));
    node_local->value = ptr;
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	697a      	ldr	r2, [r7, #20]
 800e764:	601a      	str	r2, [r3, #0]

    *target = node_local;
 800e766:	69ba      	ldr	r2, [r7, #24]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3720      	adds	r7, #32
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	08018b04 	.word	0x08018b04
 800e77c:	08018a70 	.word	0x08018a70
 800e780:	08018a88 	.word	0x08018a88
 800e784:	08018af0 	.word	0x08018af0
 800e788:	08018aec 	.word	0x08018aec
 800e78c:	08018b0c 	.word	0x08018b0c

0800e790 <sail_private_destroy_linked_list_node_chain>:

void sail_private_destroy_linked_list_node_chain(struct linked_list_node *node,
                                                 linked_list_value_deallocator_t value_deallocator) {
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]

    while (node != NULL) {
 800e79a:	e008      	b.n	800e7ae <sail_private_destroy_linked_list_node_chain+0x1e>
        struct linked_list_node *node_next = node->next;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	60fb      	str	r3, [r7, #12]

        sail_private_destroy_linked_list_node(node, value_deallocator);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff ff61 	bl	800e66c <sail_private_destroy_linked_list_node>

        node = node_next;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	607b      	str	r3, [r7, #4]
    while (node != NULL) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1f3      	bne.n	800e79c <sail_private_destroy_linked_list_node_chain+0xc>
    }
}
 800e7b4:	bf00      	nop
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <sail_private_copy_linked_list_node_chain>:

sail_status_t sail_private_copy_linked_list_node_chain(const struct linked_list_node *source,
                                                       struct linked_list_node **target,
                                                       linked_list_value_copier_t value_copier,
                                                       linked_list_value_deallocator_t value_deallocator) {
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b08a      	sub	sp, #40	; 0x28
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
 800e7cc:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(target);
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	bf0c      	ite	eq
 800e7d4:	2301      	moveq	r3, #1
 800e7d6:	2300      	movne	r3, #0
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d011      	beq.n	800e802 <sail_private_copy_linked_list_node_chain+0x42>
 800e7de:	4b2a      	ldr	r3, [pc, #168]	; (800e888 <sail_private_copy_linked_list_node_chain+0xc8>)
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	4b2a      	ldr	r3, [pc, #168]	; (800e88c <sail_private_copy_linked_list_node_chain+0xcc>)
 800e7e4:	226c      	movs	r2, #108	; 0x6c
 800e7e6:	492a      	ldr	r1, [pc, #168]	; (800e890 <sail_private_copy_linked_list_node_chain+0xd0>)
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	f000 fa0f 	bl	800ec0c <sail_log>
 800e7ee:	4b29      	ldr	r3, [pc, #164]	; (800e894 <sail_private_copy_linked_list_node_chain+0xd4>)
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	4b29      	ldr	r3, [pc, #164]	; (800e898 <sail_private_copy_linked_list_node_chain+0xd8>)
 800e7f4:	226c      	movs	r2, #108	; 0x6c
 800e7f6:	4926      	ldr	r1, [pc, #152]	; (800e890 <sail_private_copy_linked_list_node_chain+0xd0>)
 800e7f8:	2001      	movs	r0, #1
 800e7fa:	f000 fa07 	bl	800ec0c <sail_log>
 800e7fe:	2301      	movs	r3, #1
 800e800:	e03d      	b.n	800e87e <sail_private_copy_linked_list_node_chain+0xbe>

    if (source == NULL) {
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d104      	bne.n	800e812 <sail_private_copy_linked_list_node_chain+0x52>
        *target = NULL;
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	2200      	movs	r2, #0
 800e80c:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	e035      	b.n	800e87e <sail_private_copy_linked_list_node_chain+0xbe>
    }

    struct linked_list_node *node_local = NULL;
 800e812:	2300      	movs	r3, #0
 800e814:	61fb      	str	r3, [r7, #28]
    struct linked_list_node *linked_list_node_current = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	61bb      	str	r3, [r7, #24]

    while (source != NULL) {
 800e81a:	e029      	b.n	800e870 <sail_private_copy_linked_list_node_chain+0xb0>
        struct linked_list_node *linked_list_node = NULL;
 800e81c:	2300      	movs	r3, #0
 800e81e:	613b      	str	r3, [r7, #16]

        SAIL_TRY_OR_CLEANUP(sail_private_copy_linked_list_node(source, &linked_list_node, value_copier, value_deallocator),
 800e820:	f107 0110 	add.w	r1, r7, #16
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7ff ff35 	bl	800e698 <sail_private_copy_linked_list_node>
 800e82e:	4603      	mov	r3, r0
 800e830:	82fb      	strh	r3, [r7, #22]
 800e832:	8afb      	ldrh	r3, [r7, #22]
 800e834:	2b00      	cmp	r3, #0
 800e836:	bf14      	ite	ne
 800e838:	2301      	movne	r3, #1
 800e83a:	2300      	moveq	r3, #0
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d005      	beq.n	800e84e <sail_private_copy_linked_list_node_chain+0x8e>
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	69f8      	ldr	r0, [r7, #28]
 800e846:	f7ff ffa3 	bl	800e790 <sail_private_destroy_linked_list_node_chain>
 800e84a:	8afb      	ldrh	r3, [r7, #22]
 800e84c:	e017      	b.n	800e87e <sail_private_copy_linked_list_node_chain+0xbe>
                            /* cleanup */ sail_private_destroy_linked_list_node_chain(node_local, value_deallocator));

        if (node_local == NULL) {
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d104      	bne.n	800e85e <sail_private_copy_linked_list_node_chain+0x9e>
            node_local = linked_list_node;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	61fb      	str	r3, [r7, #28]
            linked_list_node_current = node_local;
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	61bb      	str	r3, [r7, #24]
 800e85c:	e005      	b.n	800e86a <sail_private_copy_linked_list_node_chain+0xaa>
        } else {
            linked_list_node_current->next = linked_list_node;
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	605a      	str	r2, [r3, #4]
            linked_list_node_current = linked_list_node_current->next;
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	61bb      	str	r3, [r7, #24]
        }

        source = source->next;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	60fb      	str	r3, [r7, #12]
    while (source != NULL) {
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1d2      	bne.n	800e81c <sail_private_copy_linked_list_node_chain+0x5c>
    }

    *target = node_local;
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3720      	adds	r7, #32
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	08018b0c 	.word	0x08018b0c
 800e88c:	08018a70 	.word	0x08018a70
 800e890:	08018a88 	.word	0x08018a88
 800e894:	08018af0 	.word	0x08018af0
 800e898:	08018aec 	.word	0x08018aec

0800e89c <sail_alloc_load_features>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_load_features(struct sail_load_features **load_features) {
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af02      	add	r7, sp, #8
 800e8a2:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(load_features);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	bf0c      	ite	eq
 800e8aa:	2301      	moveq	r3, #1
 800e8ac:	2300      	movne	r3, #0
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d011      	beq.n	800e8d8 <sail_alloc_load_features+0x3c>
 800e8b4:	4b19      	ldr	r3, [pc, #100]	; (800e91c <sail_alloc_load_features+0x80>)
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	4b19      	ldr	r3, [pc, #100]	; (800e920 <sail_alloc_load_features+0x84>)
 800e8ba:	2221      	movs	r2, #33	; 0x21
 800e8bc:	4919      	ldr	r1, [pc, #100]	; (800e924 <sail_alloc_load_features+0x88>)
 800e8be:	2001      	movs	r0, #1
 800e8c0:	f000 f9a4 	bl	800ec0c <sail_log>
 800e8c4:	4b18      	ldr	r3, [pc, #96]	; (800e928 <sail_alloc_load_features+0x8c>)
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	4b18      	ldr	r3, [pc, #96]	; (800e92c <sail_alloc_load_features+0x90>)
 800e8ca:	2221      	movs	r2, #33	; 0x21
 800e8cc:	4915      	ldr	r1, [pc, #84]	; (800e924 <sail_alloc_load_features+0x88>)
 800e8ce:	2001      	movs	r0, #1
 800e8d0:	f000 f99c 	bl	800ec0c <sail_log>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e01d      	b.n	800e914 <sail_alloc_load_features+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_load_features), &ptr));
 800e8d8:	f107 0308 	add.w	r3, r7, #8
 800e8dc:	4619      	mov	r1, r3
 800e8de:	2008      	movs	r0, #8
 800e8e0:	f000 fa8c 	bl	800edfc <sail_malloc>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	81fb      	strh	r3, [r7, #14]
 800e8e8:	89fb      	ldrh	r3, [r7, #14]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	bf14      	ite	ne
 800e8ee:	2301      	movne	r3, #1
 800e8f0:	2300      	moveq	r3, #0
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <sail_alloc_load_features+0x60>
 800e8f8:	89fb      	ldrh	r3, [r7, #14]
 800e8fa:	e00b      	b.n	800e914 <sail_alloc_load_features+0x78>
    *load_features = ptr;
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	601a      	str	r2, [r3, #0]

    (*load_features)->features = 0;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2200      	movs	r2, #0
 800e908:	601a      	str	r2, [r3, #0]
    (*load_features)->tuning   = NULL;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2200      	movs	r2, #0
 800e910:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	08018b84 	.word	0x08018b84
 800e920:	08018b14 	.word	0x08018b14
 800e924:	08018b2c 	.word	0x08018b2c
 800e928:	08018b98 	.word	0x08018b98
 800e92c:	08018b94 	.word	0x08018b94

0800e930 <sail_destroy_load_features>:

void sail_destroy_load_features(struct sail_load_features *load_features) {
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]

    if (load_features == NULL) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d008      	beq.n	800e950 <sail_destroy_load_features+0x20>
        return;
    }

    sail_destroy_string_node_chain(load_features->tuning);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	f001 fb34 	bl	800ffb0 <sail_destroy_string_node_chain>
    sail_free(load_features);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fadf 	bl	800ef0c <sail_free>
 800e94e:	e000      	b.n	800e952 <sail_destroy_load_features+0x22>
        return;
 800e950:	bf00      	nop
}
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <sail_alloc_load_options>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_load_options(struct sail_load_options **load_options) {
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af02      	add	r7, sp, #8
 800e95e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(load_options);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	bf0c      	ite	eq
 800e966:	2301      	moveq	r3, #1
 800e968:	2300      	movne	r3, #0
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d011      	beq.n	800e994 <sail_alloc_load_options+0x3c>
 800e970:	4b19      	ldr	r3, [pc, #100]	; (800e9d8 <sail_alloc_load_options+0x80>)
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	4b19      	ldr	r3, [pc, #100]	; (800e9dc <sail_alloc_load_options+0x84>)
 800e976:	2221      	movs	r2, #33	; 0x21
 800e978:	4919      	ldr	r1, [pc, #100]	; (800e9e0 <sail_alloc_load_options+0x88>)
 800e97a:	2001      	movs	r0, #1
 800e97c:	f000 f946 	bl	800ec0c <sail_log>
 800e980:	4b18      	ldr	r3, [pc, #96]	; (800e9e4 <sail_alloc_load_options+0x8c>)
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	4b18      	ldr	r3, [pc, #96]	; (800e9e8 <sail_alloc_load_options+0x90>)
 800e986:	2221      	movs	r2, #33	; 0x21
 800e988:	4915      	ldr	r1, [pc, #84]	; (800e9e0 <sail_alloc_load_options+0x88>)
 800e98a:	2001      	movs	r0, #1
 800e98c:	f000 f93e 	bl	800ec0c <sail_log>
 800e990:	2301      	movs	r3, #1
 800e992:	e01d      	b.n	800e9d0 <sail_alloc_load_options+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_load_options), &ptr));
 800e994:	f107 0308 	add.w	r3, r7, #8
 800e998:	4619      	mov	r1, r3
 800e99a:	2008      	movs	r0, #8
 800e99c:	f000 fa2e 	bl	800edfc <sail_malloc>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	81fb      	strh	r3, [r7, #14]
 800e9a4:	89fb      	ldrh	r3, [r7, #14]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	bf14      	ite	ne
 800e9aa:	2301      	movne	r3, #1
 800e9ac:	2300      	moveq	r3, #0
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <sail_alloc_load_options+0x60>
 800e9b4:	89fb      	ldrh	r3, [r7, #14]
 800e9b6:	e00b      	b.n	800e9d0 <sail_alloc_load_options+0x78>
    *load_options = ptr;
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]

    (*load_options)->options = 0;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	601a      	str	r2, [r3, #0]
    (*load_options)->tuning  = NULL;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	08018c1c 	.word	0x08018c1c
 800e9dc:	08018bac 	.word	0x08018bac
 800e9e0:	08018bc4 	.word	0x08018bc4
 800e9e4:	08018c30 	.word	0x08018c30
 800e9e8:	08018c2c 	.word	0x08018c2c

0800e9ec <sail_destroy_load_options>:

void sail_destroy_load_options(struct sail_load_options *load_options) {
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]

    if (load_options == NULL) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d008      	beq.n	800ea0c <sail_destroy_load_options+0x20>
        return;
    }

    sail_destroy_hash_map(load_options->tuning);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe fc5c 	bl	800d2bc <sail_destroy_hash_map>
    sail_free(load_options);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 fa81 	bl	800ef0c <sail_free>
 800ea0a:	e000      	b.n	800ea0e <sail_destroy_load_options+0x22>
        return;
 800ea0c:	bf00      	nop
}
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <sail_alloc_load_options_from_features>:

sail_status_t sail_alloc_load_options_from_features(const struct sail_load_features *load_features, struct sail_load_options **load_options) {
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af02      	add	r7, sp, #8
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(load_options);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bf0c      	ite	eq
 800ea24:	2301      	moveq	r3, #1
 800ea26:	2300      	movne	r3, #0
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d011      	beq.n	800ea52 <sail_alloc_load_options_from_features+0x3e>
 800ea2e:	4b23      	ldr	r3, [pc, #140]	; (800eabc <sail_alloc_load_options_from_features+0xa8>)
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	4b23      	ldr	r3, [pc, #140]	; (800eac0 <sail_alloc_load_options_from_features+0xac>)
 800ea34:	2239      	movs	r2, #57	; 0x39
 800ea36:	4923      	ldr	r1, [pc, #140]	; (800eac4 <sail_alloc_load_options_from_features+0xb0>)
 800ea38:	2001      	movs	r0, #1
 800ea3a:	f000 f8e7 	bl	800ec0c <sail_log>
 800ea3e:	4b22      	ldr	r3, [pc, #136]	; (800eac8 <sail_alloc_load_options_from_features+0xb4>)
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	4b22      	ldr	r3, [pc, #136]	; (800eacc <sail_alloc_load_options_from_features+0xb8>)
 800ea44:	2239      	movs	r2, #57	; 0x39
 800ea46:	491f      	ldr	r1, [pc, #124]	; (800eac4 <sail_alloc_load_options_from_features+0xb0>)
 800ea48:	2001      	movs	r0, #1
 800ea4a:	f000 f8df 	bl	800ec0c <sail_log>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e02f      	b.n	800eab2 <sail_alloc_load_options_from_features+0x9e>

    struct sail_load_options *load_options_local;
    SAIL_TRY(sail_alloc_load_options(&load_options_local));
 800ea52:	f107 0308 	add.w	r3, r7, #8
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7ff ff7e 	bl	800e958 <sail_alloc_load_options>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	81fb      	strh	r3, [r7, #14]
 800ea60:	89fb      	ldrh	r3, [r7, #14]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	bf14      	ite	ne
 800ea66:	2301      	movne	r3, #1
 800ea68:	2300      	moveq	r3, #0
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d001      	beq.n	800ea74 <sail_alloc_load_options_from_features+0x60>
 800ea70:	89fb      	ldrh	r3, [r7, #14]
 800ea72:	e01e      	b.n	800eab2 <sail_alloc_load_options_from_features+0x9e>

    load_options_local->options = 0;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	2200      	movs	r2, #0
 800ea78:	601a      	str	r2, [r3, #0]

    if (load_features->features & SAIL_CODEC_FEATURE_META_DATA) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f003 0310 	and.w	r3, r3, #16
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d005      	beq.n	800ea92 <sail_alloc_load_options_from_features+0x7e>
        load_options_local->options |= SAIL_OPTION_META_DATA;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	f042 0201 	orr.w	r2, r2, #1
 800ea90:	601a      	str	r2, [r3, #0]
    }

    if (load_features->features & SAIL_CODEC_FEATURE_ICCP) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d005      	beq.n	800eaaa <sail_alloc_load_options_from_features+0x96>
        load_options_local->options |= SAIL_OPTION_ICCP;
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	f042 0204 	orr.w	r2, r2, #4
 800eaa8:	601a      	str	r2, [r3, #0]
    }

    *load_options = load_options_local;
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	08018c1c 	.word	0x08018c1c
 800eac0:	08018bac 	.word	0x08018bac
 800eac4:	08018bc4 	.word	0x08018bc4
 800eac8:	08018c30 	.word	0x08018c30
 800eacc:	08018c2c 	.word	0x08018c2c

0800ead0 <sail_copy_load_options>:

sail_status_t sail_copy_load_options(const struct sail_load_options *source, struct sail_load_options **target) {
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	bf0c      	ite	eq
 800eae0:	2301      	moveq	r3, #1
 800eae2:	2300      	movne	r3, #0
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d011      	beq.n	800eb0e <sail_copy_load_options+0x3e>
 800eaea:	4b32      	ldr	r3, [pc, #200]	; (800ebb4 <sail_copy_load_options+0xe4>)
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	4b32      	ldr	r3, [pc, #200]	; (800ebb8 <sail_copy_load_options+0xe8>)
 800eaf0:	224f      	movs	r2, #79	; 0x4f
 800eaf2:	4932      	ldr	r1, [pc, #200]	; (800ebbc <sail_copy_load_options+0xec>)
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	f000 f889 	bl	800ec0c <sail_log>
 800eafa:	4b31      	ldr	r3, [pc, #196]	; (800ebc0 <sail_copy_load_options+0xf0>)
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	4b31      	ldr	r3, [pc, #196]	; (800ebc4 <sail_copy_load_options+0xf4>)
 800eb00:	224f      	movs	r2, #79	; 0x4f
 800eb02:	492e      	ldr	r1, [pc, #184]	; (800ebbc <sail_copy_load_options+0xec>)
 800eb04:	2001      	movs	r0, #1
 800eb06:	f000 f881 	bl	800ec0c <sail_log>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e04e      	b.n	800ebac <sail_copy_load_options+0xdc>
    SAIL_CHECK_PTR(target);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	bf0c      	ite	eq
 800eb14:	2301      	moveq	r3, #1
 800eb16:	2300      	movne	r3, #0
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d011      	beq.n	800eb42 <sail_copy_load_options+0x72>
 800eb1e:	4b2a      	ldr	r3, [pc, #168]	; (800ebc8 <sail_copy_load_options+0xf8>)
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	4b25      	ldr	r3, [pc, #148]	; (800ebb8 <sail_copy_load_options+0xe8>)
 800eb24:	2250      	movs	r2, #80	; 0x50
 800eb26:	4925      	ldr	r1, [pc, #148]	; (800ebbc <sail_copy_load_options+0xec>)
 800eb28:	2001      	movs	r0, #1
 800eb2a:	f000 f86f 	bl	800ec0c <sail_log>
 800eb2e:	4b24      	ldr	r3, [pc, #144]	; (800ebc0 <sail_copy_load_options+0xf0>)
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	4b24      	ldr	r3, [pc, #144]	; (800ebc4 <sail_copy_load_options+0xf4>)
 800eb34:	2250      	movs	r2, #80	; 0x50
 800eb36:	4921      	ldr	r1, [pc, #132]	; (800ebbc <sail_copy_load_options+0xec>)
 800eb38:	2001      	movs	r0, #1
 800eb3a:	f000 f867 	bl	800ec0c <sail_log>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e034      	b.n	800ebac <sail_copy_load_options+0xdc>

    struct sail_load_options *target_local;
    SAIL_TRY(sail_alloc_load_options(&target_local));
 800eb42:	f107 0308 	add.w	r3, r7, #8
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7ff ff06 	bl	800e958 <sail_alloc_load_options>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	81fb      	strh	r3, [r7, #14]
 800eb50:	89fb      	ldrh	r3, [r7, #14]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	bf14      	ite	ne
 800eb56:	2301      	movne	r3, #1
 800eb58:	2300      	moveq	r3, #0
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d001      	beq.n	800eb64 <sail_copy_load_options+0x94>
 800eb60:	89fb      	ldrh	r3, [r7, #14]
 800eb62:	e023      	b.n	800ebac <sail_copy_load_options+0xdc>

    target_local->options = source->options;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	6812      	ldr	r2, [r2, #0]
 800eb6a:	601a      	str	r2, [r3, #0]

    if (source->tuning != NULL) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d017      	beq.n	800eba4 <sail_copy_load_options+0xd4>
        SAIL_TRY_OR_CLEANUP(sail_copy_hash_map(source->tuning, &target_local->tuning),
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	3304      	adds	r3, #4
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4610      	mov	r0, r2
 800eb80:	f7fe fbcc 	bl	800d31c <sail_copy_hash_map>
 800eb84:	4603      	mov	r3, r0
 800eb86:	81bb      	strh	r3, [r7, #12]
 800eb88:	89bb      	ldrh	r3, [r7, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	bf14      	ite	ne
 800eb8e:	2301      	movne	r3, #1
 800eb90:	2300      	moveq	r3, #0
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d005      	beq.n	800eba4 <sail_copy_load_options+0xd4>
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff ff26 	bl	800e9ec <sail_destroy_load_options>
 800eba0:	89bb      	ldrh	r3, [r7, #12]
 800eba2:	e003      	b.n	800ebac <sail_copy_load_options+0xdc>
                            /* cleanup */ sail_destroy_load_options(target_local));
    }

    *target = target_local;
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	08018c44 	.word	0x08018c44
 800ebb8:	08018bac 	.word	0x08018bac
 800ebbc:	08018bc4 	.word	0x08018bc4
 800ebc0:	08018c30 	.word	0x08018c30
 800ebc4:	08018c2c 	.word	0x08018c2c
 800ebc8:	08018c4c 	.word	0x08018c4c

0800ebcc <check_ansi_colors_supported>:

static enum SailLogLevel sail_max_log_level = SAIL_LOG_LEVEL_DEBUG;

static sail_logger sail_external_logger = NULL;

static bool check_ansi_colors_supported(void) {
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	af00      	add	r7, sp, #0

    static SAIL_THREAD_LOCAL bool ansi_colors_supported_called = false;
    static SAIL_THREAD_LOCAL bool ansi_colors_supported = false;

    if (ansi_colors_supported_called) {
 800ebd0:	480c      	ldr	r0, [pc, #48]	; (800ec04 <check_ansi_colors_supported+0x38>)
 800ebd2:	f7f2 faf3 	bl	80011bc <__emutls_get_address>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d005      	beq.n	800ebea <check_ansi_colors_supported+0x1e>
        return ansi_colors_supported;
 800ebde:	480a      	ldr	r0, [pc, #40]	; (800ec08 <check_ansi_colors_supported+0x3c>)
 800ebe0:	f7f2 faec 	bl	80011bc <__emutls_get_address>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	e00a      	b.n	800ec00 <check_ansi_colors_supported+0x34>
    }

    ansi_colors_supported_called = true;
 800ebea:	4806      	ldr	r0, [pc, #24]	; (800ec04 <check_ansi_colors_supported+0x38>)
 800ebec:	f7f2 fae6 	bl	80011bc <__emutls_get_address>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	701a      	strb	r2, [r3, #0]
            ansi_colors_supported = true;
        #endif
    }
#endif

    return ansi_colors_supported;
 800ebf6:	4804      	ldr	r0, [pc, #16]	; (800ec08 <check_ansi_colors_supported+0x3c>)
 800ebf8:	f7f2 fae0 	bl	80011bc <__emutls_get_address>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	781b      	ldrb	r3, [r3, #0]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20000074 	.word	0x20000074
 800ec08:	20000064 	.word	0x20000064

0800ec0c <sail_log>:

void sail_log(enum SailLogLevel level, const char *file, int line, const char *format, ...) {
 800ec0c:	b408      	push	{r3}
 800ec0e:	b590      	push	{r4, r7, lr}
 800ec10:	b08c      	sub	sp, #48	; 0x30
 800ec12:	af02      	add	r7, sp, #8
 800ec14:	4603      	mov	r3, r0
 800ec16:	60b9      	str	r1, [r7, #8]
 800ec18:	607a      	str	r2, [r7, #4]
 800ec1a:	73fb      	strb	r3, [r7, #15]

    /* Filter out. */
    if (level > sail_max_log_level) {
 800ec1c:	4b66      	ldr	r3, [pc, #408]	; (800edb8 <sail_log+0x1ac>)
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	7bfa      	ldrb	r2, [r7, #15]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	f200 80c0 	bhi.w	800eda8 <sail_log+0x19c>
        return;
    }

    if (sail_external_logger != NULL) {
 800ec28:	4b64      	ldr	r3, [pc, #400]	; (800edbc <sail_log+0x1b0>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00c      	beq.n	800ec4a <sail_log+0x3e>
        va_list args;
        va_start(args, format);
 800ec30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec34:	617b      	str	r3, [r7, #20]

        sail_external_logger(level, file, line, format, args);
 800ec36:	4b61      	ldr	r3, [pc, #388]	; (800edbc <sail_log+0x1b0>)
 800ec38:	681c      	ldr	r4, [r3, #0]
 800ec3a:	7bf8      	ldrb	r0, [r7, #15]
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	68b9      	ldr	r1, [r7, #8]
 800ec46:	47a0      	blx	r4
 800ec48:	e0af      	b.n	800edaa <sail_log+0x19e>

        va_end(args);
        return;
    }

    const char *level_string = NULL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	627b      	str	r3, [r7, #36]	; 0x24

    switch (level) {
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	2b06      	cmp	r3, #6
 800ec52:	d823      	bhi.n	800ec9c <sail_log+0x90>
 800ec54:	a201      	add	r2, pc, #4	; (adr r2, 800ec5c <sail_log+0x50>)
 800ec56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5a:	bf00      	nop
 800ec5c:	0800ec9d 	.word	0x0800ec9d
 800ec60:	0800ec79 	.word	0x0800ec79
 800ec64:	0800ec7f 	.word	0x0800ec7f
 800ec68:	0800ec85 	.word	0x0800ec85
 800ec6c:	0800ec8b 	.word	0x0800ec8b
 800ec70:	0800ec91 	.word	0x0800ec91
 800ec74:	0800ec97 	.word	0x0800ec97
        /* Something weird. */
        case SAIL_LOG_LEVEL_SILENCE: break;

        /* Normal log levels. */
        case SAIL_LOG_LEVEL_ERROR:   level_string = "E"; break;
 800ec78:	4b51      	ldr	r3, [pc, #324]	; (800edc0 <sail_log+0x1b4>)
 800ec7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec7c:	e00e      	b.n	800ec9c <sail_log+0x90>
        case SAIL_LOG_LEVEL_WARNING: level_string = "W"; break;
 800ec7e:	4b51      	ldr	r3, [pc, #324]	; (800edc4 <sail_log+0x1b8>)
 800ec80:	627b      	str	r3, [r7, #36]	; 0x24
 800ec82:	e00b      	b.n	800ec9c <sail_log+0x90>
        case SAIL_LOG_LEVEL_INFO:    level_string = "I"; break;
 800ec84:	4b50      	ldr	r3, [pc, #320]	; (800edc8 <sail_log+0x1bc>)
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
 800ec88:	e008      	b.n	800ec9c <sail_log+0x90>
        case SAIL_LOG_LEVEL_MESSAGE: level_string = "M"; break;
 800ec8a:	4b50      	ldr	r3, [pc, #320]	; (800edcc <sail_log+0x1c0>)
 800ec8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ec8e:	e005      	b.n	800ec9c <sail_log+0x90>
        case SAIL_LOG_LEVEL_DEBUG:   level_string = "D"; break;
 800ec90:	4b4f      	ldr	r3, [pc, #316]	; (800edd0 <sail_log+0x1c4>)
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
 800ec94:	e002      	b.n	800ec9c <sail_log+0x90>
        case SAIL_LOG_LEVEL_TRACE:   level_string = "T"; break;
 800ec96:	4b4f      	ldr	r3, [pc, #316]	; (800edd4 <sail_log+0x1c8>)
 800ec98:	627b      	str	r3, [r7, #36]	; 0x24
 800ec9a:	bf00      	nop
    }

    const bool ansi_colors_supported = check_ansi_colors_supported();
 800ec9c:	f7ff ff96 	bl	800ebcc <check_ansi_colors_supported>
 800eca0:	4603      	mov	r3, r0
 800eca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (ansi_colors_supported) {
 800eca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d041      	beq.n	800ed32 <sail_log+0x126>
        switch (level) {
 800ecae:	7bfb      	ldrb	r3, [r7, #15]
 800ecb0:	2b06      	cmp	r3, #6
 800ecb2:	d83f      	bhi.n	800ed34 <sail_log+0x128>
 800ecb4:	a201      	add	r2, pc, #4	; (adr r2, 800ecbc <sail_log+0xb0>)
 800ecb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecba:	bf00      	nop
 800ecbc:	0800ed35 	.word	0x0800ed35
 800ecc0:	0800ecd9 	.word	0x0800ecd9
 800ecc4:	0800eceb 	.word	0x0800eceb
 800ecc8:	0800ecfd 	.word	0x0800ecfd
 800eccc:	0800ed35 	.word	0x0800ed35
 800ecd0:	0800ed0f 	.word	0x0800ed0f
 800ecd4:	0800ed21 	.word	0x0800ed21
            case SAIL_LOG_LEVEL_SILENCE: break;

            case SAIL_LOG_LEVEL_ERROR:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_RED);    break;
 800ecd8:	4b3f      	ldr	r3, [pc, #252]	; (800edd8 <sail_log+0x1cc>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	2207      	movs	r2, #7
 800ece0:	2101      	movs	r1, #1
 800ece2:	483e      	ldr	r0, [pc, #248]	; (800eddc <sail_log+0x1d0>)
 800ece4:	f004 f868 	bl	8012db8 <fwrite>
 800ece8:	e024      	b.n	800ed34 <sail_log+0x128>
            case SAIL_LOG_LEVEL_WARNING: fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_YELLOW); break;
 800ecea:	4b3b      	ldr	r3, [pc, #236]	; (800edd8 <sail_log+0x1cc>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	2207      	movs	r2, #7
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	483a      	ldr	r0, [pc, #232]	; (800ede0 <sail_log+0x1d4>)
 800ecf6:	f004 f85f 	bl	8012db8 <fwrite>
 800ecfa:	e01b      	b.n	800ed34 <sail_log+0x128>
            case SAIL_LOG_LEVEL_INFO:    fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_CYAN);   break;
 800ecfc:	4b36      	ldr	r3, [pc, #216]	; (800edd8 <sail_log+0x1cc>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	2207      	movs	r2, #7
 800ed04:	2101      	movs	r1, #1
 800ed06:	4837      	ldr	r0, [pc, #220]	; (800ede4 <sail_log+0x1d8>)
 800ed08:	f004 f856 	bl	8012db8 <fwrite>
 800ed0c:	e012      	b.n	800ed34 <sail_log+0x128>
            case SAIL_LOG_LEVEL_MESSAGE:                                                       break;
            case SAIL_LOG_LEVEL_DEBUG:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_BLUE);   break;
 800ed0e:	4b32      	ldr	r3, [pc, #200]	; (800edd8 <sail_log+0x1cc>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	2207      	movs	r2, #7
 800ed16:	2101      	movs	r1, #1
 800ed18:	4833      	ldr	r0, [pc, #204]	; (800ede8 <sail_log+0x1dc>)
 800ed1a:	f004 f84d 	bl	8012db8 <fwrite>
 800ed1e:	e009      	b.n	800ed34 <sail_log+0x128>
            case SAIL_LOG_LEVEL_TRACE:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_WHITE);  break;
 800ed20:	4b2d      	ldr	r3, [pc, #180]	; (800edd8 <sail_log+0x1cc>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	2207      	movs	r2, #7
 800ed28:	2101      	movs	r1, #1
 800ed2a:	4830      	ldr	r0, [pc, #192]	; (800edec <sail_log+0x1e0>)
 800ed2c:	f004 f844 	bl	8012db8 <fwrite>
 800ed30:	e000      	b.n	800ed34 <sail_log+0x128>
        }
    }
 800ed32:	bf00      	nop

    /* Print log level. */
    va_list args;
    va_start(args, format);
 800ed34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ed38:	61bb      	str	r3, [r7, #24]

    fprintf(SAIL_LOG_FPTR, "SAIL: [%s] ", level_string);
 800ed3a:	4b27      	ldr	r3, [pc, #156]	; (800edd8 <sail_log+0x1cc>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed42:	492b      	ldr	r1, [pc, #172]	; (800edf0 <sail_log+0x1e4>)
 800ed44:	4618      	mov	r0, r3
 800ed46:	f003 ff65 	bl	8012c14 <fiprintf>

    /* Print file and line. */
#ifdef SAIL_WIN32
    const char *name = strrchr(file, '\\');
#else
    const char *name = strrchr(file, '/');
 800ed4a:	212f      	movs	r1, #47	; 0x2f
 800ed4c:	68b8      	ldr	r0, [r7, #8]
 800ed4e:	f005 f98c 	bl	801406a <strrchr>
 800ed52:	61f8      	str	r0, [r7, #28]
#endif

    fprintf(SAIL_LOG_FPTR, "[%s:%d] ", name == NULL ? file : name+1, line);
 800ed54:	4b20      	ldr	r3, [pc, #128]	; (800edd8 <sail_log+0x1cc>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	68d8      	ldr	r0, [r3, #12]
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <sail_log+0x15a>
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	e000      	b.n	800ed68 <sail_log+0x15c>
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4922      	ldr	r1, [pc, #136]	; (800edf4 <sail_log+0x1e8>)
 800ed6c:	f003 ff52 	bl	8012c14 <fiprintf>

    /* Print the rest of arguments. */
    vfprintf(SAIL_LOG_FPTR, format, args);
 800ed70:	4b19      	ldr	r3, [pc, #100]	; (800edd8 <sail_log+0x1cc>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f004 fb3c 	bl	80133f8 <vfiprintf>

    if (ansi_colors_supported) {
 800ed80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <sail_log+0x18c>
        fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_RESET);
 800ed88:	4b13      	ldr	r3, [pc, #76]	; (800edd8 <sail_log+0x1cc>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	2204      	movs	r2, #4
 800ed90:	2101      	movs	r1, #1
 800ed92:	4819      	ldr	r0, [pc, #100]	; (800edf8 <sail_log+0x1ec>)
 800ed94:	f004 f810 	bl	8012db8 <fwrite>
    }

    fprintf(SAIL_LOG_FPTR, "\n");
 800ed98:	4b0f      	ldr	r3, [pc, #60]	; (800edd8 <sail_log+0x1cc>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	4619      	mov	r1, r3
 800eda0:	200a      	movs	r0, #10
 800eda2:	f003 ff81 	bl	8012ca8 <fputc>
 800eda6:	e000      	b.n	800edaa <sail_log+0x19e>
        return;
 800eda8:	bf00      	nop

    va_end(args);
}
 800edaa:	3728      	adds	r7, #40	; 0x28
 800edac:	46bd      	mov	sp, r7
 800edae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800edb2:	b001      	add	sp, #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20000061 	.word	0x20000061
 800edbc:	20003828 	.word	0x20003828
 800edc0:	08018c54 	.word	0x08018c54
 800edc4:	08018c58 	.word	0x08018c58
 800edc8:	08018c5c 	.word	0x08018c5c
 800edcc:	08018c60 	.word	0x08018c60
 800edd0:	08018c64 	.word	0x08018c64
 800edd4:	08018c68 	.word	0x08018c68
 800edd8:	20000088 	.word	0x20000088
 800eddc:	08018c6c 	.word	0x08018c6c
 800ede0:	08018c74 	.word	0x08018c74
 800ede4:	08018c7c 	.word	0x08018c7c
 800ede8:	08018c84 	.word	0x08018c84
 800edec:	08018c8c 	.word	0x08018c8c
 800edf0:	08018c94 	.word	0x08018c94
 800edf4:	08018ca0 	.word	0x08018ca0
 800edf8:	08018cac 	.word	0x08018cac

0800edfc <sail_malloc>:
#include "tx_api.h"
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_malloc(size_t size, void **ptr) {
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af02      	add	r7, sp, #8
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]

	UINT ret = TX_SUCCESS;
 800ee06:	2300      	movs	r3, #0
 800ee08:	60fb      	str	r3, [r7, #12]
	TX_BYTE_POOL *sail_pool = (TX_BYTE_POOL*)ptr;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	60bb      	str	r3, [r7, #8]
    SAIL_CHECK_PTR(ptr);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	bf0c      	ite	eq
 800ee14:	2301      	moveq	r3, #1
 800ee16:	2300      	movne	r3, #0
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d011      	beq.n	800ee42 <sail_malloc+0x46>
 800ee1e:	4b12      	ldr	r3, [pc, #72]	; (800ee68 <sail_malloc+0x6c>)
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <sail_malloc+0x70>)
 800ee24:	2224      	movs	r2, #36	; 0x24
 800ee26:	4912      	ldr	r1, [pc, #72]	; (800ee70 <sail_malloc+0x74>)
 800ee28:	2001      	movs	r0, #1
 800ee2a:	f7ff feef 	bl	800ec0c <sail_log>
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <sail_malloc+0x78>)
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	4b11      	ldr	r3, [pc, #68]	; (800ee78 <sail_malloc+0x7c>)
 800ee34:	2224      	movs	r2, #36	; 0x24
 800ee36:	490e      	ldr	r1, [pc, #56]	; (800ee70 <sail_malloc+0x74>)
 800ee38:	2001      	movs	r0, #1
 800ee3a:	f7ff fee7 	bl	800ec0c <sail_log>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e00e      	b.n	800ee60 <sail_malloc+0x64>

    //tx_byte_allocate(byte_pool, (VOID **) &pointer, APP_STACK_SIZE, TX_NO_WAIT)
    //void *ptr_local = tx_byte_allocate(&sail_pool , ptr, size, TX_NO_WAIT);

    if (tx_byte_allocate(sail_pool, (VOID **) &ptr, size, TX_NO_WAIT) != TX_SUCCESS)
 800ee42:	4639      	mov	r1, r7
 800ee44:	2300      	movs	r3, #0
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	68b8      	ldr	r0, [r7, #8]
 800ee4a:	f003 fb19 	bl	8012480 <_txe_byte_allocate>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d001      	beq.n	800ee58 <sail_malloc+0x5c>
    {
      ret = TX_POOL_ERROR;
 800ee54:	2302      	movs	r3, #2
 800ee56:	60fb      	str	r3, [r7, #12]

   /* if (ptr_local == NULL) {
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
    }*/

    *ptr = (void *)ret;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	08018d1c 	.word	0x08018d1c
 800ee6c:	08018cb4 	.word	0x08018cb4
 800ee70:	08018ccc 	.word	0x08018ccc
 800ee74:	08018d24 	.word	0x08018d24
 800ee78:	08018d20 	.word	0x08018d20

0800ee7c <sail_realloc>:

sail_status_t sail_realloc(size_t size, void **ptr) {
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af02      	add	r7, sp, #8
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(ptr);
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	bf0c      	ite	eq
 800ee8c:	2301      	moveq	r3, #1
 800ee8e:	2300      	movne	r3, #0
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d011      	beq.n	800eeba <sail_realloc+0x3e>
 800ee96:	4b17      	ldr	r3, [pc, #92]	; (800eef4 <sail_realloc+0x78>)
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	4b17      	ldr	r3, [pc, #92]	; (800eef8 <sail_realloc+0x7c>)
 800ee9c:	2239      	movs	r2, #57	; 0x39
 800ee9e:	4917      	ldr	r1, [pc, #92]	; (800eefc <sail_realloc+0x80>)
 800eea0:	2001      	movs	r0, #1
 800eea2:	f7ff feb3 	bl	800ec0c <sail_log>
 800eea6:	4b16      	ldr	r3, [pc, #88]	; (800ef00 <sail_realloc+0x84>)
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	4b16      	ldr	r3, [pc, #88]	; (800ef04 <sail_realloc+0x88>)
 800eeac:	2239      	movs	r2, #57	; 0x39
 800eeae:	4913      	ldr	r1, [pc, #76]	; (800eefc <sail_realloc+0x80>)
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	f7ff feab 	bl	800ec0c <sail_log>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e017      	b.n	800eeea <sail_realloc+0x6e>

    void *ptr_local = realloc(*ptr, size);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	6879      	ldr	r1, [r7, #4]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f004 fe07 	bl	8013ad4 <realloc>
 800eec6:	60f8      	str	r0, [r7, #12]

    if (ptr_local == NULL) {
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d109      	bne.n	800eee2 <sail_realloc+0x66>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 800eece:	4b0e      	ldr	r3, [pc, #56]	; (800ef08 <sail_realloc+0x8c>)
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	4b0c      	ldr	r3, [pc, #48]	; (800ef04 <sail_realloc+0x88>)
 800eed4:	223e      	movs	r2, #62	; 0x3e
 800eed6:	4909      	ldr	r1, [pc, #36]	; (800eefc <sail_realloc+0x80>)
 800eed8:	2001      	movs	r0, #1
 800eeda:	f7ff fe97 	bl	800ec0c <sail_log>
 800eede:	2302      	movs	r3, #2
 800eee0:	e003      	b.n	800eeea <sail_realloc+0x6e>
    }

    *ptr = ptr_local;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	08018d1c 	.word	0x08018d1c
 800eef8:	08018cb4 	.word	0x08018cb4
 800eefc:	08018ccc 	.word	0x08018ccc
 800ef00:	08018d24 	.word	0x08018d24
 800ef04:	08018d20 	.word	0x08018d20
 800ef08:	08018d38 	.word	0x08018d38

0800ef0c <sail_free>:
    *ptr = ptr_local;

    return SAIL_OK;
}

void sail_free(void *ptr) {
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]

    free(ptr);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f003 fff1 	bl	8012efc <free>
}
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <sail_destroy_meta_data>:
    *meta_data = meta_data_local;

    return SAIL_OK;
}

void sail_destroy_meta_data(struct sail_meta_data *meta_data) {
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b082      	sub	sp, #8
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]

    if (meta_data == NULL) {
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00d      	beq.n	800ef4c <sail_destroy_meta_data+0x2a>
        return;
    }

    sail_free(meta_data->key_unknown);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff ffe9 	bl	800ef0c <sail_free>
    sail_destroy_variant(meta_data->value);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f001 fe98 	bl	8010c74 <sail_destroy_variant>
    sail_free(meta_data);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff ffe1 	bl	800ef0c <sail_free>
 800ef4a:	e000      	b.n	800ef4e <sail_destroy_meta_data+0x2c>
        return;
 800ef4c:	bf00      	nop
}
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <sail_destroy_meta_data_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_destroy_meta_data));

    return SAIL_OK;
}

void sail_destroy_meta_data_node_chain(struct sail_meta_data_node *node) {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 800ef5c:	4903      	ldr	r1, [pc, #12]	; (800ef6c <sail_destroy_meta_data_node_chain+0x18>)
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff fc16 	bl	800e790 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_destroy_meta_data);
}
 800ef64:	bf00      	nop
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	0800ef23 	.word	0x0800ef23

0800ef70 <sail_alloc_palette>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_palette(struct sail_palette **palette) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af02      	add	r7, sp, #8
 800ef76:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(palette);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	bf0c      	ite	eq
 800ef7e:	2301      	moveq	r3, #1
 800ef80:	2300      	movne	r3, #0
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d011      	beq.n	800efac <sail_alloc_palette+0x3c>
 800ef88:	4b1b      	ldr	r3, [pc, #108]	; (800eff8 <sail_alloc_palette+0x88>)
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	4b1b      	ldr	r3, [pc, #108]	; (800effc <sail_alloc_palette+0x8c>)
 800ef8e:	2222      	movs	r2, #34	; 0x22
 800ef90:	491b      	ldr	r1, [pc, #108]	; (800f000 <sail_alloc_palette+0x90>)
 800ef92:	2001      	movs	r0, #1
 800ef94:	f7ff fe3a 	bl	800ec0c <sail_log>
 800ef98:	4b1a      	ldr	r3, [pc, #104]	; (800f004 <sail_alloc_palette+0x94>)
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	4b1a      	ldr	r3, [pc, #104]	; (800f008 <sail_alloc_palette+0x98>)
 800ef9e:	2222      	movs	r2, #34	; 0x22
 800efa0:	4917      	ldr	r1, [pc, #92]	; (800f000 <sail_alloc_palette+0x90>)
 800efa2:	2001      	movs	r0, #1
 800efa4:	f7ff fe32 	bl	800ec0c <sail_log>
 800efa8:	2301      	movs	r3, #1
 800efaa:	e021      	b.n	800eff0 <sail_alloc_palette+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_palette), &ptr));
 800efac:	f107 0308 	add.w	r3, r7, #8
 800efb0:	4619      	mov	r1, r3
 800efb2:	200c      	movs	r0, #12
 800efb4:	f7ff ff22 	bl	800edfc <sail_malloc>
 800efb8:	4603      	mov	r3, r0
 800efba:	81fb      	strh	r3, [r7, #14]
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	bf14      	ite	ne
 800efc2:	2301      	movne	r3, #1
 800efc4:	2300      	moveq	r3, #0
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <sail_alloc_palette+0x60>
 800efcc:	89fb      	ldrh	r3, [r7, #14]
 800efce:	e00f      	b.n	800eff0 <sail_alloc_palette+0x80>
    *palette = ptr;
 800efd0:	68ba      	ldr	r2, [r7, #8]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	601a      	str	r2, [r3, #0]

    (*palette)->pixel_format = SAIL_PIXEL_FORMAT_UNKNOWN;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2200      	movs	r2, #0
 800efdc:	701a      	strb	r2, [r3, #0]
    (*palette)->data         = NULL;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2200      	movs	r2, #0
 800efe4:	605a      	str	r2, [r3, #4]
    (*palette)->color_count  = 0;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2200      	movs	r2, #0
 800efec:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	08018dc4 	.word	0x08018dc4
 800effc:	08018d58 	.word	0x08018d58
 800f000:	08018d70 	.word	0x08018d70
 800f004:	08018dd0 	.word	0x08018dd0
 800f008:	08018dcc 	.word	0x08018dcc

0800f00c <sail_destroy_palette>:

void sail_destroy_palette(struct sail_palette *palette) {
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]

    if (palette == NULL) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d008      	beq.n	800f02c <sail_destroy_palette+0x20>
        return;
    }

    sail_free(palette->data);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff ff74 	bl	800ef0c <sail_free>
    sail_free(palette);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff ff71 	bl	800ef0c <sail_free>
 800f02a:	e000      	b.n	800f02e <sail_destroy_palette+0x22>
        return;
 800f02c:	bf00      	nop
}
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <sail_alloc_palette_for_data>:
    *target_palette = palette_local;

    return SAIL_OK;
}

sail_status_t sail_alloc_palette_for_data(enum SailPixelFormat pixel_format, unsigned color_count, struct sail_palette **palette) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b08c      	sub	sp, #48	; 0x30
 800f038:	af02      	add	r7, sp, #8
 800f03a:	4603      	mov	r3, r0
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	73fb      	strb	r3, [r7, #15]

    SAIL_CHECK_PTR(palette);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	bf0c      	ite	eq
 800f048:	2301      	moveq	r3, #1
 800f04a:	2300      	movne	r3, #0
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d011      	beq.n	800f076 <sail_alloc_palette_for_data+0x42>
 800f052:	4b31      	ldr	r3, [pc, #196]	; (800f118 <sail_alloc_palette_for_data+0xe4>)
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	4b31      	ldr	r3, [pc, #196]	; (800f11c <sail_alloc_palette_for_data+0xe8>)
 800f058:	2256      	movs	r2, #86	; 0x56
 800f05a:	4931      	ldr	r1, [pc, #196]	; (800f120 <sail_alloc_palette_for_data+0xec>)
 800f05c:	2001      	movs	r0, #1
 800f05e:	f7ff fdd5 	bl	800ec0c <sail_log>
 800f062:	4b30      	ldr	r3, [pc, #192]	; (800f124 <sail_alloc_palette_for_data+0xf0>)
 800f064:	9300      	str	r3, [sp, #0]
 800f066:	4b30      	ldr	r3, [pc, #192]	; (800f128 <sail_alloc_palette_for_data+0xf4>)
 800f068:	2256      	movs	r2, #86	; 0x56
 800f06a:	492d      	ldr	r1, [pc, #180]	; (800f120 <sail_alloc_palette_for_data+0xec>)
 800f06c:	2001      	movs	r0, #1
 800f06e:	f7ff fdcd 	bl	800ec0c <sail_log>
 800f072:	2301      	movs	r3, #1
 800f074:	e04b      	b.n	800f10e <sail_alloc_palette_for_data+0xda>

    struct sail_palette *palette_local;
    SAIL_TRY(sail_alloc_palette(&palette_local));
 800f076:	f107 031c 	add.w	r3, r7, #28
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff ff78 	bl	800ef70 <sail_alloc_palette>
 800f080:	4603      	mov	r3, r0
 800f082:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f086:	2b00      	cmp	r3, #0
 800f088:	bf14      	ite	ne
 800f08a:	2301      	movne	r3, #1
 800f08c:	2300      	moveq	r3, #0
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <sail_alloc_palette_for_data+0x64>
 800f094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f096:	e03a      	b.n	800f10e <sail_alloc_palette_for_data+0xda>

    palette_local->pixel_format = pixel_format;
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	7bfa      	ldrb	r2, [r7, #15]
 800f09c:	701a      	strb	r2, [r3, #0]
    palette_local->color_count = color_count;
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	609a      	str	r2, [r3, #8]

    unsigned palette_size;
    SAIL_TRY_OR_CLEANUP(sail_bytes_per_line(color_count, pixel_format, &palette_size),
 800f0a4:	f107 0218 	add.w	r2, r7, #24
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	68b8      	ldr	r0, [r7, #8]
 800f0ae:	f001 fb85 	bl	80107bc <sail_bytes_per_line>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bf14      	ite	ne
 800f0bc:	2301      	movne	r3, #1
 800f0be:	2300      	moveq	r3, #0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d005      	beq.n	800f0d2 <sail_alloc_palette_for_data+0x9e>
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff ff9f 	bl	800f00c <sail_destroy_palette>
 800f0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d0:	e01d      	b.n	800f10e <sail_alloc_palette_for_data+0xda>
                        /* cleanup */ sail_destroy_palette(palette_local));

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(palette_size, &ptr),
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	f107 0214 	add.w	r2, r7, #20
 800f0d8:	4611      	mov	r1, r2
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fe8e 	bl	800edfc <sail_malloc>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f0e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	bf14      	ite	ne
 800f0ea:	2301      	movne	r3, #1
 800f0ec:	2300      	moveq	r3, #0
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d005      	beq.n	800f100 <sail_alloc_palette_for_data+0xcc>
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff ff88 	bl	800f00c <sail_destroy_palette>
 800f0fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0fe:	e006      	b.n	800f10e <sail_alloc_palette_for_data+0xda>
                        /* cleanup */ sail_destroy_palette(palette_local));
    palette_local->data = ptr;
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	697a      	ldr	r2, [r7, #20]
 800f104:	605a      	str	r2, [r3, #4]

    *palette = palette_local;
 800f106:	69fa      	ldr	r2, [r7, #28]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3728      	adds	r7, #40	; 0x28
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	08018dc4 	.word	0x08018dc4
 800f11c:	08018d58 	.word	0x08018d58
 800f120:	08018d70 	.word	0x08018d70
 800f124:	08018dd0 	.word	0x08018dd0
 800f128:	08018dcc 	.word	0x08018dcc

0800f12c <sail_read_pixel3_uint8>:

#include <string.h>

#include "sail-common.h"

sail_status_t sail_read_pixel3_uint8(struct sail_io *io, struct sail_pixel3_uint8 *pixel) {
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af02      	add	r7, sp, #8
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	bf0c      	ite	eq
 800f13c:	2301      	moveq	r3, #1
 800f13e:	2300      	movne	r3, #0
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d011      	beq.n	800f16a <sail_read_pixel3_uint8+0x3e>
 800f146:	4b27      	ldr	r3, [pc, #156]	; (800f1e4 <sail_read_pixel3_uint8+0xb8>)
 800f148:	9300      	str	r3, [sp, #0]
 800f14a:	4b27      	ldr	r3, [pc, #156]	; (800f1e8 <sail_read_pixel3_uint8+0xbc>)
 800f14c:	2220      	movs	r2, #32
 800f14e:	4927      	ldr	r1, [pc, #156]	; (800f1ec <sail_read_pixel3_uint8+0xc0>)
 800f150:	2001      	movs	r0, #1
 800f152:	f7ff fd5b 	bl	800ec0c <sail_log>
 800f156:	4b26      	ldr	r3, [pc, #152]	; (800f1f0 <sail_read_pixel3_uint8+0xc4>)
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	4b26      	ldr	r3, [pc, #152]	; (800f1f4 <sail_read_pixel3_uint8+0xc8>)
 800f15c:	2220      	movs	r2, #32
 800f15e:	4923      	ldr	r1, [pc, #140]	; (800f1ec <sail_read_pixel3_uint8+0xc0>)
 800f160:	2001      	movs	r0, #1
 800f162:	f7ff fd53 	bl	800ec0c <sail_log>
 800f166:	2301      	movs	r3, #1
 800f168:	e037      	b.n	800f1da <sail_read_pixel3_uint8+0xae>
    SAIL_CHECK_PTR(pixel);
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	bf0c      	ite	eq
 800f170:	2301      	moveq	r3, #1
 800f172:	2300      	movne	r3, #0
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d011      	beq.n	800f19e <sail_read_pixel3_uint8+0x72>
 800f17a:	4b1f      	ldr	r3, [pc, #124]	; (800f1f8 <sail_read_pixel3_uint8+0xcc>)
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	4b1a      	ldr	r3, [pc, #104]	; (800f1e8 <sail_read_pixel3_uint8+0xbc>)
 800f180:	2221      	movs	r2, #33	; 0x21
 800f182:	491a      	ldr	r1, [pc, #104]	; (800f1ec <sail_read_pixel3_uint8+0xc0>)
 800f184:	2001      	movs	r0, #1
 800f186:	f7ff fd41 	bl	800ec0c <sail_log>
 800f18a:	4b19      	ldr	r3, [pc, #100]	; (800f1f0 <sail_read_pixel3_uint8+0xc4>)
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	4b19      	ldr	r3, [pc, #100]	; (800f1f4 <sail_read_pixel3_uint8+0xc8>)
 800f190:	2221      	movs	r2, #33	; 0x21
 800f192:	4916      	ldr	r1, [pc, #88]	; (800f1ec <sail_read_pixel3_uint8+0xc0>)
 800f194:	2001      	movs	r0, #1
 800f196:	f7ff fd39 	bl	800ec0c <sail_log>
 800f19a:	2301      	movs	r3, #1
 800f19c:	e01d      	b.n	800f1da <sail_read_pixel3_uint8+0xae>

    uint8_t a[3];

    SAIL_TRY(io->strict_read(io->stream, a, sizeof(a)));
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	68d0      	ldr	r0, [r2, #12]
 800f1a6:	f107 0108 	add.w	r1, r7, #8
 800f1aa:	2203      	movs	r2, #3
 800f1ac:	4798      	blx	r3
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	81fb      	strh	r3, [r7, #14]
 800f1b2:	89fb      	ldrh	r3, [r7, #14]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	bf14      	ite	ne
 800f1b8:	2301      	movne	r3, #1
 800f1ba:	2300      	moveq	r3, #0
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <sail_read_pixel3_uint8+0x9a>
 800f1c2:	89fb      	ldrh	r3, [r7, #14]
 800f1c4:	e009      	b.n	800f1da <sail_read_pixel3_uint8+0xae>

    pixel->component1 = a[0];
 800f1c6:	7a3a      	ldrb	r2, [r7, #8]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	701a      	strb	r2, [r3, #0]
    pixel->component2 = a[1];
 800f1cc:	7a7a      	ldrb	r2, [r7, #9]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	705a      	strb	r2, [r3, #1]
    pixel->component3 = a[2];
 800f1d2:	7aba      	ldrb	r2, [r7, #10]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	709a      	strb	r2, [r3, #2]

    return SAIL_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	08018e6c 	.word	0x08018e6c
 800f1e8:	08018e04 	.word	0x08018e04
 800f1ec:	08018e1c 	.word	0x08018e1c
 800f1f0:	08018e74 	.word	0x08018e74
 800f1f4:	08018e70 	.word	0x08018e70
 800f1f8:	08018e88 	.word	0x08018e88

0800f1fc <sail_read_pixel4_uint8>:

sail_status_t sail_read_pixel4_uint8(struct sail_io *io, struct sail_pixel4_uint8 *pixel) {
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af02      	add	r7, sp, #8
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	bf0c      	ite	eq
 800f20c:	2301      	moveq	r3, #1
 800f20e:	2300      	movne	r3, #0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d011      	beq.n	800f23a <sail_read_pixel4_uint8+0x3e>
 800f216:	4b28      	ldr	r3, [pc, #160]	; (800f2b8 <sail_read_pixel4_uint8+0xbc>)
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	4b28      	ldr	r3, [pc, #160]	; (800f2bc <sail_read_pixel4_uint8+0xc0>)
 800f21c:	2230      	movs	r2, #48	; 0x30
 800f21e:	4928      	ldr	r1, [pc, #160]	; (800f2c0 <sail_read_pixel4_uint8+0xc4>)
 800f220:	2001      	movs	r0, #1
 800f222:	f7ff fcf3 	bl	800ec0c <sail_log>
 800f226:	4b27      	ldr	r3, [pc, #156]	; (800f2c4 <sail_read_pixel4_uint8+0xc8>)
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	4b27      	ldr	r3, [pc, #156]	; (800f2c8 <sail_read_pixel4_uint8+0xcc>)
 800f22c:	2230      	movs	r2, #48	; 0x30
 800f22e:	4924      	ldr	r1, [pc, #144]	; (800f2c0 <sail_read_pixel4_uint8+0xc4>)
 800f230:	2001      	movs	r0, #1
 800f232:	f7ff fceb 	bl	800ec0c <sail_log>
 800f236:	2301      	movs	r3, #1
 800f238:	e03a      	b.n	800f2b0 <sail_read_pixel4_uint8+0xb4>
    SAIL_CHECK_PTR(pixel);
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	bf0c      	ite	eq
 800f240:	2301      	moveq	r3, #1
 800f242:	2300      	movne	r3, #0
 800f244:	b2db      	uxtb	r3, r3
 800f246:	2b00      	cmp	r3, #0
 800f248:	d011      	beq.n	800f26e <sail_read_pixel4_uint8+0x72>
 800f24a:	4b20      	ldr	r3, [pc, #128]	; (800f2cc <sail_read_pixel4_uint8+0xd0>)
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	4b1b      	ldr	r3, [pc, #108]	; (800f2bc <sail_read_pixel4_uint8+0xc0>)
 800f250:	2231      	movs	r2, #49	; 0x31
 800f252:	491b      	ldr	r1, [pc, #108]	; (800f2c0 <sail_read_pixel4_uint8+0xc4>)
 800f254:	2001      	movs	r0, #1
 800f256:	f7ff fcd9 	bl	800ec0c <sail_log>
 800f25a:	4b1a      	ldr	r3, [pc, #104]	; (800f2c4 <sail_read_pixel4_uint8+0xc8>)
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	4b1a      	ldr	r3, [pc, #104]	; (800f2c8 <sail_read_pixel4_uint8+0xcc>)
 800f260:	2231      	movs	r2, #49	; 0x31
 800f262:	4917      	ldr	r1, [pc, #92]	; (800f2c0 <sail_read_pixel4_uint8+0xc4>)
 800f264:	2001      	movs	r0, #1
 800f266:	f7ff fcd1 	bl	800ec0c <sail_log>
 800f26a:	2301      	movs	r3, #1
 800f26c:	e020      	b.n	800f2b0 <sail_read_pixel4_uint8+0xb4>

    uint8_t a[4];

    SAIL_TRY(io->strict_read(io->stream, a, sizeof(a)));
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	68d0      	ldr	r0, [r2, #12]
 800f276:	f107 0108 	add.w	r1, r7, #8
 800f27a:	2204      	movs	r2, #4
 800f27c:	4798      	blx	r3
 800f27e:	4603      	mov	r3, r0
 800f280:	81fb      	strh	r3, [r7, #14]
 800f282:	89fb      	ldrh	r3, [r7, #14]
 800f284:	2b00      	cmp	r3, #0
 800f286:	bf14      	ite	ne
 800f288:	2301      	movne	r3, #1
 800f28a:	2300      	moveq	r3, #0
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d001      	beq.n	800f296 <sail_read_pixel4_uint8+0x9a>
 800f292:	89fb      	ldrh	r3, [r7, #14]
 800f294:	e00c      	b.n	800f2b0 <sail_read_pixel4_uint8+0xb4>

    pixel->component1 = a[0];
 800f296:	7a3a      	ldrb	r2, [r7, #8]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	701a      	strb	r2, [r3, #0]
    pixel->component2 = a[1];
 800f29c:	7a7a      	ldrb	r2, [r7, #9]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	705a      	strb	r2, [r3, #1]
    pixel->component3 = a[2];
 800f2a2:	7aba      	ldrb	r2, [r7, #10]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	709a      	strb	r2, [r3, #2]
    pixel->component4 = a[3];
 800f2a8:	7afa      	ldrb	r2, [r7, #11]
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	70da      	strb	r2, [r3, #3]

    return SAIL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	08018e6c 	.word	0x08018e6c
 800f2bc:	08018e04 	.word	0x08018e04
 800f2c0:	08018e1c 	.word	0x08018e1c
 800f2c4:	08018e74 	.word	0x08018e74
 800f2c8:	08018e70 	.word	0x08018e70
 800f2cc:	08018e88 	.word	0x08018e88

0800f2d0 <sail_alloc_resolution_from_data>:
    SAIL_TRY(sail_alloc_resolution_from_data(SAIL_RESOLUTION_UNIT_UNKNOWN, 0, 0, resolution));

    return SAIL_OK;
}

sail_status_t sail_alloc_resolution_from_data(enum SailResolutionUnit unit, double x, double y, struct sail_resolution **resolution) {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	; 0x28
 800f2d4:	af02      	add	r7, sp, #8
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	ed87 0b02 	vstr	d0, [r7, #8]
 800f2dc:	ed87 1b00 	vstr	d1, [r7]
 800f2e0:	6139      	str	r1, [r7, #16]
 800f2e2:	75fb      	strb	r3, [r7, #23]

    SAIL_CHECK_PTR(resolution);
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	bf0c      	ite	eq
 800f2ea:	2301      	moveq	r3, #1
 800f2ec:	2300      	movne	r3, #0
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d011      	beq.n	800f318 <sail_alloc_resolution_from_data+0x48>
 800f2f4:	4b1d      	ldr	r3, [pc, #116]	; (800f36c <sail_alloc_resolution_from_data+0x9c>)
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	4b1d      	ldr	r3, [pc, #116]	; (800f370 <sail_alloc_resolution_from_data+0xa0>)
 800f2fa:	2228      	movs	r2, #40	; 0x28
 800f2fc:	491d      	ldr	r1, [pc, #116]	; (800f374 <sail_alloc_resolution_from_data+0xa4>)
 800f2fe:	2001      	movs	r0, #1
 800f300:	f7ff fc84 	bl	800ec0c <sail_log>
 800f304:	4b1c      	ldr	r3, [pc, #112]	; (800f378 <sail_alloc_resolution_from_data+0xa8>)
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	4b1c      	ldr	r3, [pc, #112]	; (800f37c <sail_alloc_resolution_from_data+0xac>)
 800f30a:	2228      	movs	r2, #40	; 0x28
 800f30c:	4919      	ldr	r1, [pc, #100]	; (800f374 <sail_alloc_resolution_from_data+0xa4>)
 800f30e:	2001      	movs	r0, #1
 800f310:	f7ff fc7c 	bl	800ec0c <sail_log>
 800f314:	2301      	movs	r3, #1
 800f316:	e025      	b.n	800f364 <sail_alloc_resolution_from_data+0x94>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_resolution), &ptr));
 800f318:	f107 0318 	add.w	r3, r7, #24
 800f31c:	4619      	mov	r1, r3
 800f31e:	2018      	movs	r0, #24
 800f320:	f7ff fd6c 	bl	800edfc <sail_malloc>
 800f324:	4603      	mov	r3, r0
 800f326:	83fb      	strh	r3, [r7, #30]
 800f328:	8bfb      	ldrh	r3, [r7, #30]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	bf14      	ite	ne
 800f32e:	2301      	movne	r3, #1
 800f330:	2300      	moveq	r3, #0
 800f332:	b2db      	uxtb	r3, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <sail_alloc_resolution_from_data+0x6c>
 800f338:	8bfb      	ldrh	r3, [r7, #30]
 800f33a:	e013      	b.n	800f364 <sail_alloc_resolution_from_data+0x94>
    *resolution = ptr;
 800f33c:	69ba      	ldr	r2, [r7, #24]
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	601a      	str	r2, [r3, #0]

    (*resolution)->unit = unit;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	7dfa      	ldrb	r2, [r7, #23]
 800f348:	701a      	strb	r2, [r3, #0]
    (*resolution)->x    = x;
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	6819      	ldr	r1, [r3, #0]
 800f34e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f352:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*resolution)->y    = y;
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	6819      	ldr	r1, [r3, #0]
 800f35a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f35e:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return SAIL_OK;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3720      	adds	r7, #32
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	08018efc 	.word	0x08018efc
 800f370:	08018e90 	.word	0x08018e90
 800f374:	08018ea8 	.word	0x08018ea8
 800f378:	08018f0c 	.word	0x08018f0c
 800f37c:	08018f08 	.word	0x08018f08

0800f380 <sail_destroy_resolution>:

void sail_destroy_resolution(struct sail_resolution *resolution) {
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]

    if (resolution == NULL) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d003      	beq.n	800f396 <sail_destroy_resolution+0x16>
        return;
    }

    sail_free(resolution);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff fdbc 	bl	800ef0c <sail_free>
 800f394:	e000      	b.n	800f398 <sail_destroy_resolution+0x18>
        return;
 800f396:	bf00      	nop
}
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <sail_start_loading_memory>:
    SAIL_TRY(sail_start_loading_file_with_options(path, codec_info, NULL, state));

    return SAIL_OK;
}

sail_status_t sail_start_loading_memory(const void *buffer, size_t buffer_length, const struct sail_codec_info *codec_info, void **state) {
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b088      	sub	sp, #32
 800f3a2:	af02      	add	r7, sp, #8
 800f3a4:	60f8      	str	r0, [r7, #12]
 800f3a6:	60b9      	str	r1, [r7, #8]
 800f3a8:	607a      	str	r2, [r7, #4]
 800f3aa:	603b      	str	r3, [r7, #0]

    SAIL_TRY(sail_start_loading_memory_with_options(buffer, buffer_length, codec_info, NULL, state));
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	68b9      	ldr	r1, [r7, #8]
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f000 f950 	bl	800f65c <sail_start_loading_memory_with_options>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	82fb      	strh	r3, [r7, #22]
 800f3c0:	8afb      	ldrh	r3, [r7, #22]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	bf14      	ite	ne
 800f3c6:	2301      	movne	r3, #1
 800f3c8:	2300      	moveq	r3, #0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d001      	beq.n	800f3d4 <sail_start_loading_memory+0x36>
 800f3d0:	8afb      	ldrh	r3, [r7, #22]
 800f3d2:	e000      	b.n	800f3d6 <sail_start_loading_memory+0x38>

    return SAIL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
	...

0800f3e0 <sail_load_next_frame>:

sail_status_t sail_load_next_frame(void *state, struct sail_image **image) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b08a      	sub	sp, #40	; 0x28
 800f3e4:	af02      	add	r7, sp, #8
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	bf0c      	ite	eq
 800f3f0:	2301      	moveq	r3, #1
 800f3f2:	2300      	movne	r3, #0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d011      	beq.n	800f41e <sail_load_next_frame+0x3e>
 800f3fa:	4b73      	ldr	r3, [pc, #460]	; (800f5c8 <sail_load_next_frame+0x1e8>)
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	4b73      	ldr	r3, [pc, #460]	; (800f5cc <sail_load_next_frame+0x1ec>)
 800f400:	2263      	movs	r2, #99	; 0x63
 800f402:	4973      	ldr	r1, [pc, #460]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f404:	2001      	movs	r0, #1
 800f406:	f7ff fc01 	bl	800ec0c <sail_log>
 800f40a:	4b72      	ldr	r3, [pc, #456]	; (800f5d4 <sail_load_next_frame+0x1f4>)
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	4b72      	ldr	r3, [pc, #456]	; (800f5d8 <sail_load_next_frame+0x1f8>)
 800f410:	2263      	movs	r2, #99	; 0x63
 800f412:	496f      	ldr	r1, [pc, #444]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f414:	2001      	movs	r0, #1
 800f416:	f7ff fbf9 	bl	800ec0c <sail_log>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e0d0      	b.n	800f5c0 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(image);
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	bf0c      	ite	eq
 800f424:	2301      	moveq	r3, #1
 800f426:	2300      	movne	r3, #0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d011      	beq.n	800f452 <sail_load_next_frame+0x72>
 800f42e:	4b6b      	ldr	r3, [pc, #428]	; (800f5dc <sail_load_next_frame+0x1fc>)
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	4b66      	ldr	r3, [pc, #408]	; (800f5cc <sail_load_next_frame+0x1ec>)
 800f434:	2264      	movs	r2, #100	; 0x64
 800f436:	4966      	ldr	r1, [pc, #408]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f438:	2001      	movs	r0, #1
 800f43a:	f7ff fbe7 	bl	800ec0c <sail_log>
 800f43e:	4b65      	ldr	r3, [pc, #404]	; (800f5d4 <sail_load_next_frame+0x1f4>)
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	4b65      	ldr	r3, [pc, #404]	; (800f5d8 <sail_load_next_frame+0x1f8>)
 800f444:	2264      	movs	r2, #100	; 0x64
 800f446:	4962      	ldr	r1, [pc, #392]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f448:	2001      	movs	r0, #1
 800f44a:	f7ff fbdf 	bl	800ec0c <sail_log>
 800f44e:	2301      	movs	r3, #1
 800f450:	e0b6      	b.n	800f5c0 <sail_load_next_frame+0x1e0>

    struct hidden_state *state_of_mind = (struct hidden_state *)state;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	61fb      	str	r3, [r7, #28]

    SAIL_TRY(sail_check_io_valid(state_of_mind->io));
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fe fd24 	bl	800dea8 <sail_check_io_valid>
 800f460:	4603      	mov	r3, r0
 800f462:	837b      	strh	r3, [r7, #26]
 800f464:	8b7b      	ldrh	r3, [r7, #26]
 800f466:	2b00      	cmp	r3, #0
 800f468:	bf14      	ite	ne
 800f46a:	2301      	movne	r3, #1
 800f46c:	2300      	moveq	r3, #0
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <sail_load_next_frame+0x98>
 800f474:	8b7b      	ldrh	r3, [r7, #26]
 800f476:	e0a3      	b.n	800f5c0 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(state_of_mind->state);
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	bf0c      	ite	eq
 800f480:	2301      	moveq	r3, #1
 800f482:	2300      	movne	r3, #0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d011      	beq.n	800f4ae <sail_load_next_frame+0xce>
 800f48a:	4b55      	ldr	r3, [pc, #340]	; (800f5e0 <sail_load_next_frame+0x200>)
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	4b4f      	ldr	r3, [pc, #316]	; (800f5cc <sail_load_next_frame+0x1ec>)
 800f490:	2269      	movs	r2, #105	; 0x69
 800f492:	494f      	ldr	r1, [pc, #316]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f494:	2001      	movs	r0, #1
 800f496:	f7ff fbb9 	bl	800ec0c <sail_log>
 800f49a:	4b4e      	ldr	r3, [pc, #312]	; (800f5d4 <sail_load_next_frame+0x1f4>)
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	4b4e      	ldr	r3, [pc, #312]	; (800f5d8 <sail_load_next_frame+0x1f8>)
 800f4a0:	2269      	movs	r2, #105	; 0x69
 800f4a2:	494b      	ldr	r1, [pc, #300]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f4a4:	2001      	movs	r0, #1
 800f4a6:	f7ff fbb1 	bl	800ec0c <sail_log>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e088      	b.n	800f5c0 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(state_of_mind->codec);
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	695b      	ldr	r3, [r3, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	bf0c      	ite	eq
 800f4b6:	2301      	moveq	r3, #1
 800f4b8:	2300      	movne	r3, #0
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d011      	beq.n	800f4e4 <sail_load_next_frame+0x104>
 800f4c0:	4b48      	ldr	r3, [pc, #288]	; (800f5e4 <sail_load_next_frame+0x204>)
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	4b41      	ldr	r3, [pc, #260]	; (800f5cc <sail_load_next_frame+0x1ec>)
 800f4c6:	226a      	movs	r2, #106	; 0x6a
 800f4c8:	4941      	ldr	r1, [pc, #260]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f4ca:	2001      	movs	r0, #1
 800f4cc:	f7ff fb9e 	bl	800ec0c <sail_log>
 800f4d0:	4b40      	ldr	r3, [pc, #256]	; (800f5d4 <sail_load_next_frame+0x1f4>)
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	4b40      	ldr	r3, [pc, #256]	; (800f5d8 <sail_load_next_frame+0x1f8>)
 800f4d6:	226a      	movs	r2, #106	; 0x6a
 800f4d8:	493d      	ldr	r1, [pc, #244]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f4da:	2001      	movs	r0, #1
 800f4dc:	f7ff fb96 	bl	800ec0c <sail_log>
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e06d      	b.n	800f5c0 <sail_load_next_frame+0x1e0>

    struct sail_image *image_local;
    SAIL_TRY(state_of_mind->codec->v7->load_seek_next_frame(state_of_mind->state, state_of_mind->io, &image_local));
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	695b      	ldr	r3, [r3, #20]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	69fa      	ldr	r2, [r7, #28]
 800f4ee:	68d0      	ldr	r0, [r2, #12]
 800f4f0:	69fa      	ldr	r2, [r7, #28]
 800f4f2:	6811      	ldr	r1, [r2, #0]
 800f4f4:	f107 020c 	add.w	r2, r7, #12
 800f4f8:	4798      	blx	r3
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	833b      	strh	r3, [r7, #24]
 800f4fe:	8b3b      	ldrh	r3, [r7, #24]
 800f500:	2b00      	cmp	r3, #0
 800f502:	bf14      	ite	ne
 800f504:	2301      	movne	r3, #1
 800f506:	2300      	moveq	r3, #0
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <sail_load_next_frame+0x132>
 800f50e:	8b3b      	ldrh	r3, [r7, #24]
 800f510:	e056      	b.n	800f5c0 <sail_load_next_frame+0x1e0>

    if (image_local->pixels != NULL) {
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d018      	beq.n	800f54c <sail_load_next_frame+0x16c>
        SAIL_LOG_ERROR("Internal error in %s codec: codecs must not allocate pixels", state_of_mind->codec_info->name);
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	4b31      	ldr	r3, [pc, #196]	; (800f5e8 <sail_load_next_frame+0x208>)
 800f524:	2270      	movs	r2, #112	; 0x70
 800f526:	492a      	ldr	r1, [pc, #168]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f528:	2001      	movs	r0, #1
 800f52a:	f7ff fb6f 	bl	800ec0c <sail_log>
        sail_destroy_image(image_local);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	4618      	mov	r0, r3
 800f532:	f7fe f8b1 	bl	800d698 <sail_destroy_image>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CONFLICTING_OPERATION);
 800f536:	4b2d      	ldr	r3, [pc, #180]	; (800f5ec <sail_load_next_frame+0x20c>)
 800f538:	9300      	str	r3, [sp, #0]
 800f53a:	4b27      	ldr	r3, [pc, #156]	; (800f5d8 <sail_load_next_frame+0x1f8>)
 800f53c:	2272      	movs	r2, #114	; 0x72
 800f53e:	4924      	ldr	r1, [pc, #144]	; (800f5d0 <sail_load_next_frame+0x1f0>)
 800f540:	2001      	movs	r0, #1
 800f542:	f7ff fb63 	bl	800ec0c <sail_log>
 800f546:	f240 1393 	movw	r3, #403	; 0x193
 800f54a:	e039      	b.n	800f5c0 <sail_load_next_frame+0x1e0>
    }

    /* Allocate pixels. */
    const size_t pixels_size = (size_t)image_local->height * image_local->bytes_per_line;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	68d2      	ldr	r2, [r2, #12]
 800f554:	fb02 f303 	mul.w	r3, r2, r3
 800f558:	617b      	str	r3, [r7, #20]
    SAIL_TRY_OR_CLEANUP(sail_malloc(pixels_size, &image_local->pixels),
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	4619      	mov	r1, r3
 800f55e:	6978      	ldr	r0, [r7, #20]
 800f560:	f7ff fc4c 	bl	800edfc <sail_malloc>
 800f564:	4603      	mov	r3, r0
 800f566:	827b      	strh	r3, [r7, #18]
 800f568:	8a7b      	ldrh	r3, [r7, #18]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	bf14      	ite	ne
 800f56e:	2301      	movne	r3, #1
 800f570:	2300      	moveq	r3, #0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d005      	beq.n	800f584 <sail_load_next_frame+0x1a4>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fe f88c 	bl	800d698 <sail_destroy_image>
 800f580:	8a7b      	ldrh	r3, [r7, #18]
 800f582:	e01d      	b.n	800f5c0 <sail_load_next_frame+0x1e0>
                        /* cleanup */ sail_destroy_image(image_local));

    SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_frame(state_of_mind->state, state_of_mind->io, image_local),
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	695b      	ldr	r3, [r3, #20]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	68d0      	ldr	r0, [r2, #12]
 800f590:	69fa      	ldr	r2, [r7, #28]
 800f592:	6811      	ldr	r1, [r2, #0]
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	4798      	blx	r3
 800f598:	4603      	mov	r3, r0
 800f59a:	823b      	strh	r3, [r7, #16]
 800f59c:	8a3b      	ldrh	r3, [r7, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	bf14      	ite	ne
 800f5a2:	2301      	movne	r3, #1
 800f5a4:	2300      	moveq	r3, #0
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d005      	beq.n	800f5b8 <sail_load_next_frame+0x1d8>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fe f872 	bl	800d698 <sail_destroy_image>
 800f5b4:	8a3b      	ldrh	r3, [r7, #16]
 800f5b6:	e003      	b.n	800f5c0 <sail_load_next_frame+0x1e0>
                        /* cleanup */ sail_destroy_image(image_local));

    *image = image_local;
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3720      	adds	r7, #32
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	08018fbc 	.word	0x08018fbc
 800f5cc:	08018f30 	.word	0x08018f30
 800f5d0:	08018f48 	.word	0x08018f48
 800f5d4:	08018fa0 	.word	0x08018fa0
 800f5d8:	08018f9c 	.word	0x08018f9c
 800f5dc:	08018fc4 	.word	0x08018fc4
 800f5e0:	08018fcc 	.word	0x08018fcc
 800f5e4:	08018fe4 	.word	0x08018fe4
 800f5e8:	08018ffc 	.word	0x08018ffc
 800f5ec:	08019038 	.word	0x08019038

0800f5f0 <sail_stop_loading>:

sail_status_t sail_stop_loading(void *state) {
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]

    /* Not an error. */
    if (state == NULL) {
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <sail_stop_loading+0x12>
        return SAIL_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	e028      	b.n	800f654 <sail_stop_loading+0x64>
    }

    struct hidden_state *state_of_mind = (struct hidden_state *)state;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	60fb      	str	r3, [r7, #12]

    /* Not an error. */
    if (state_of_mind->codec == NULL) {
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	695b      	ldr	r3, [r3, #20]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d104      	bne.n	800f618 <sail_stop_loading+0x28>
        destroy_hidden_state(state_of_mind);
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	f000 fa44 	bl	800fa9c <destroy_hidden_state>
        return SAIL_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	e01d      	b.n	800f654 <sail_stop_loading+0x64>
    }

    SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	695b      	ldr	r3, [r3, #20]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	f102 000c 	add.w	r0, r2, #12
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	6812      	ldr	r2, [r2, #0]
 800f62a:	4611      	mov	r1, r2
 800f62c:	4798      	blx	r3
 800f62e:	4603      	mov	r3, r0
 800f630:	817b      	strh	r3, [r7, #10]
 800f632:	897b      	ldrh	r3, [r7, #10]
 800f634:	2b00      	cmp	r3, #0
 800f636:	bf14      	ite	ne
 800f638:	2301      	movne	r3, #1
 800f63a:	2300      	moveq	r3, #0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d004      	beq.n	800f64c <sail_stop_loading+0x5c>
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f000 fa2a 	bl	800fa9c <destroy_hidden_state>
 800f648:	897b      	ldrh	r3, [r7, #10]
 800f64a:	e003      	b.n	800f654 <sail_stop_loading+0x64>
                        /* cleanup */ destroy_hidden_state(state_of_mind));

    destroy_hidden_state(state_of_mind);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 fa25 	bl	800fa9c <destroy_hidden_state>

    return SAIL_OK;
 800f652:	2300      	movs	r3, #0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <sail_start_loading_memory_with_options>:
    return SAIL_OK;
}

sail_status_t sail_start_loading_memory_with_options(const void *buffer, size_t buffer_length,
                                                     const struct sail_codec_info *codec_info,
                                                     const struct sail_load_options *load_options, void **state) {
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b08a      	sub	sp, #40	; 0x28
 800f660:	af02      	add	r7, sp, #8
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(buffer);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	bf0c      	ite	eq
 800f670:	2301      	moveq	r3, #1
 800f672:	2300      	movne	r3, #0
 800f674:	b2db      	uxtb	r3, r3
 800f676:	2b00      	cmp	r3, #0
 800f678:	d011      	beq.n	800f69e <sail_start_loading_memory_with_options+0x42>
 800f67a:	4b2b      	ldr	r3, [pc, #172]	; (800f728 <sail_start_loading_memory_with_options+0xcc>)
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4b2b      	ldr	r3, [pc, #172]	; (800f72c <sail_start_loading_memory_with_options+0xd0>)
 800f680:	223a      	movs	r2, #58	; 0x3a
 800f682:	492b      	ldr	r1, [pc, #172]	; (800f730 <sail_start_loading_memory_with_options+0xd4>)
 800f684:	2001      	movs	r0, #1
 800f686:	f7ff fac1 	bl	800ec0c <sail_log>
 800f68a:	4b2a      	ldr	r3, [pc, #168]	; (800f734 <sail_start_loading_memory_with_options+0xd8>)
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	4b2a      	ldr	r3, [pc, #168]	; (800f738 <sail_start_loading_memory_with_options+0xdc>)
 800f690:	223a      	movs	r2, #58	; 0x3a
 800f692:	4927      	ldr	r1, [pc, #156]	; (800f730 <sail_start_loading_memory_with_options+0xd4>)
 800f694:	2001      	movs	r0, #1
 800f696:	f7ff fab9 	bl	800ec0c <sail_log>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e03f      	b.n	800f71e <sail_start_loading_memory_with_options+0xc2>

    const struct sail_codec_info *codec_info_local;

    if (codec_info == NULL) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d112      	bne.n	800f6ca <sail_start_loading_memory_with_options+0x6e>
        SAIL_TRY(sail_codec_info_by_magic_number_from_memory(buffer, buffer_length, &codec_info_local));
 800f6a4:	f107 0314 	add.w	r3, r7, #20
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	68b9      	ldr	r1, [r7, #8]
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f7fa fc17 	bl	8009ee0 <sail_codec_info_by_magic_number_from_memory>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	83fb      	strh	r3, [r7, #30]
 800f6b6:	8bfb      	ldrh	r3, [r7, #30]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bf14      	ite	ne
 800f6bc:	2301      	movne	r3, #1
 800f6be:	2300      	moveq	r3, #0
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <sail_start_loading_memory_with_options+0x72>
 800f6c6:	8bfb      	ldrh	r3, [r7, #30]
 800f6c8:	e029      	b.n	800f71e <sail_start_loading_memory_with_options+0xc2>
    } else {
        codec_info_local = codec_info;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	617b      	str	r3, [r7, #20]
    }

    struct sail_io *io;
    SAIL_TRY(sail_alloc_io_read_memory(buffer, buffer_length, &io));
 800f6ce:	f107 0310 	add.w	r3, r7, #16
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	68b9      	ldr	r1, [r7, #8]
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f7fe fe6a 	bl	800e3b0 <sail_alloc_io_read_memory>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	83bb      	strh	r3, [r7, #28]
 800f6e0:	8bbb      	ldrh	r3, [r7, #28]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	bf14      	ite	ne
 800f6e6:	2301      	movne	r3, #1
 800f6e8:	2300      	moveq	r3, #0
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <sail_start_loading_memory_with_options+0x98>
 800f6f0:	8bbb      	ldrh	r3, [r7, #28]
 800f6f2:	e014      	b.n	800f71e <sail_start_loading_memory_with_options+0xc2>

    SAIL_TRY(start_loading_io_with_options(io, true, codec_info_local, load_options, state));
 800f6f4:	6938      	ldr	r0, [r7, #16]
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	2101      	movs	r1, #1
 800f700:	f000 fa56 	bl	800fbb0 <start_loading_io_with_options>
 800f704:	4603      	mov	r3, r0
 800f706:	837b      	strh	r3, [r7, #26]
 800f708:	8b7b      	ldrh	r3, [r7, #26]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	bf14      	ite	ne
 800f70e:	2301      	movne	r3, #1
 800f710:	2300      	moveq	r3, #0
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d001      	beq.n	800f71c <sail_start_loading_memory_with_options+0xc0>
 800f718:	8b7b      	ldrh	r3, [r7, #26]
 800f71a:	e000      	b.n	800f71e <sail_start_loading_memory_with_options+0xc2>

    return SAIL_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3720      	adds	r7, #32
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	08019104 	.word	0x08019104
 800f72c:	08019078 	.word	0x08019078
 800f730:	08019090 	.word	0x08019090
 800f734:	080190f0 	.word	0x080190f0
 800f738:	080190ec 	.word	0x080190ec

0800f73c <sail_load_image_from_memory>:
    *image = image_local;

    return SAIL_OK;
}

sail_status_t sail_load_image_from_memory(const void *buffer, size_t buffer_length, struct sail_image **image) {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08a      	sub	sp, #40	; 0x28
 800f740:	af02      	add	r7, sp, #8
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(buffer);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	bf0c      	ite	eq
 800f74e:	2301      	moveq	r3, #1
 800f750:	2300      	movne	r3, #0
 800f752:	b2db      	uxtb	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d011      	beq.n	800f77c <sail_load_image_from_memory+0x40>
 800f758:	4b39      	ldr	r3, [pc, #228]	; (800f840 <sail_load_image_from_memory+0x104>)
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	4b39      	ldr	r3, [pc, #228]	; (800f844 <sail_load_image_from_memory+0x108>)
 800f75e:	227c      	movs	r2, #124	; 0x7c
 800f760:	4939      	ldr	r1, [pc, #228]	; (800f848 <sail_load_image_from_memory+0x10c>)
 800f762:	2001      	movs	r0, #1
 800f764:	f7ff fa52 	bl	800ec0c <sail_log>
 800f768:	4b38      	ldr	r3, [pc, #224]	; (800f84c <sail_load_image_from_memory+0x110>)
 800f76a:	9300      	str	r3, [sp, #0]
 800f76c:	4b38      	ldr	r3, [pc, #224]	; (800f850 <sail_load_image_from_memory+0x114>)
 800f76e:	227c      	movs	r2, #124	; 0x7c
 800f770:	4935      	ldr	r1, [pc, #212]	; (800f848 <sail_load_image_from_memory+0x10c>)
 800f772:	2001      	movs	r0, #1
 800f774:	f7ff fa4a 	bl	800ec0c <sail_log>
 800f778:	2301      	movs	r3, #1
 800f77a:	e05d      	b.n	800f838 <sail_load_image_from_memory+0xfc>
    SAIL_CHECK_PTR(image);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	bf0c      	ite	eq
 800f782:	2301      	moveq	r3, #1
 800f784:	2300      	movne	r3, #0
 800f786:	b2db      	uxtb	r3, r3
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d011      	beq.n	800f7b0 <sail_load_image_from_memory+0x74>
 800f78c:	4b31      	ldr	r3, [pc, #196]	; (800f854 <sail_load_image_from_memory+0x118>)
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	4b2c      	ldr	r3, [pc, #176]	; (800f844 <sail_load_image_from_memory+0x108>)
 800f792:	227d      	movs	r2, #125	; 0x7d
 800f794:	492c      	ldr	r1, [pc, #176]	; (800f848 <sail_load_image_from_memory+0x10c>)
 800f796:	2001      	movs	r0, #1
 800f798:	f7ff fa38 	bl	800ec0c <sail_log>
 800f79c:	4b2b      	ldr	r3, [pc, #172]	; (800f84c <sail_load_image_from_memory+0x110>)
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	4b2b      	ldr	r3, [pc, #172]	; (800f850 <sail_load_image_from_memory+0x114>)
 800f7a2:	227d      	movs	r2, #125	; 0x7d
 800f7a4:	4928      	ldr	r1, [pc, #160]	; (800f848 <sail_load_image_from_memory+0x10c>)
 800f7a6:	2001      	movs	r0, #1
 800f7a8:	f7ff fa30 	bl	800ec0c <sail_log>
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	e043      	b.n	800f838 <sail_load_image_from_memory+0xfc>

    void *state = NULL;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	617b      	str	r3, [r7, #20]

    SAIL_TRY_OR_CLEANUP(sail_start_loading_memory(buffer, buffer_length, NULL /* codec info */, &state),
 800f7b4:	f107 0314 	add.w	r3, r7, #20
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	68b9      	ldr	r1, [r7, #8]
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7ff fdee 	bl	800f39e <sail_start_loading_memory>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	83fb      	strh	r3, [r7, #30]
 800f7c6:	8bfb      	ldrh	r3, [r7, #30]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	bf14      	ite	ne
 800f7cc:	2301      	movne	r3, #1
 800f7ce:	2300      	moveq	r3, #0
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d005      	beq.n	800f7e2 <sail_load_image_from_memory+0xa6>
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff ff09 	bl	800f5f0 <sail_stop_loading>
 800f7de:	8bfb      	ldrh	r3, [r7, #30]
 800f7e0:	e02a      	b.n	800f838 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_stop_loading(state));

    SAIL_TRY_OR_CLEANUP(sail_load_next_frame(state, image),
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	6879      	ldr	r1, [r7, #4]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fdfa 	bl	800f3e0 <sail_load_next_frame>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	83bb      	strh	r3, [r7, #28]
 800f7f0:	8bbb      	ldrh	r3, [r7, #28]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	bf14      	ite	ne
 800f7f6:	2301      	movne	r3, #1
 800f7f8:	2300      	moveq	r3, #0
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d005      	beq.n	800f80c <sail_load_image_from_memory+0xd0>
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	4618      	mov	r0, r3
 800f804:	f7ff fef4 	bl	800f5f0 <sail_stop_loading>
 800f808:	8bbb      	ldrh	r3, [r7, #28]
 800f80a:	e015      	b.n	800f838 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_stop_loading(state));

    SAIL_TRY_OR_CLEANUP(sail_stop_loading(state),
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	4618      	mov	r0, r3
 800f810:	f7ff feee 	bl	800f5f0 <sail_stop_loading>
 800f814:	4603      	mov	r3, r0
 800f816:	837b      	strh	r3, [r7, #26]
 800f818:	8b7b      	ldrh	r3, [r7, #26]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	bf14      	ite	ne
 800f81e:	2301      	movne	r3, #1
 800f820:	2300      	moveq	r3, #0
 800f822:	b2db      	uxtb	r3, r3
 800f824:	2b00      	cmp	r3, #0
 800f826:	d006      	beq.n	800f836 <sail_load_image_from_memory+0xfa>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fd ff33 	bl	800d698 <sail_destroy_image>
 800f832:	8b7b      	ldrh	r3, [r7, #26]
 800f834:	e000      	b.n	800f838 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_destroy_image(*image));

    return SAIL_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3720      	adds	r7, #32
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	080191a8 	.word	0x080191a8
 800f844:	08019118 	.word	0x08019118
 800f848:	08019130 	.word	0x08019130
 800f84c:	0801918c 	.word	0x0801918c
 800f850:	08019188 	.word	0x08019188
 800f854:	080191a0 	.word	0x080191a0

0800f858 <load_codec_by_codec_info_unsafe>:

    SAIL_LOG_ERROR("This codec cannot save %s pixels. Use its save features to get the list of supported pixel formats for saving",
                    sail_pixel_format_to_string(pixel_format));
}

static sail_status_t load_codec_by_codec_info_unsafe(const struct sail_codec_info *codec_info, const struct sail_codec **codec) {
 800f858:	b580      	push	{r7, lr}
 800f85a:	b08a      	sub	sp, #40	; 0x28
 800f85c:	af02      	add	r7, sp, #8
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	bf0c      	ite	eq
 800f868:	2301      	moveq	r3, #1
 800f86a:	2300      	movne	r3, #0
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d011      	beq.n	800f896 <load_codec_by_codec_info_unsafe+0x3e>
 800f872:	4b47      	ldr	r3, [pc, #284]	; (800f990 <load_codec_by_codec_info_unsafe+0x138>)
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	4b47      	ldr	r3, [pc, #284]	; (800f994 <load_codec_by_codec_info_unsafe+0x13c>)
 800f878:	2228      	movs	r2, #40	; 0x28
 800f87a:	4947      	ldr	r1, [pc, #284]	; (800f998 <load_codec_by_codec_info_unsafe+0x140>)
 800f87c:	2001      	movs	r0, #1
 800f87e:	f7ff f9c5 	bl	800ec0c <sail_log>
 800f882:	4b46      	ldr	r3, [pc, #280]	; (800f99c <load_codec_by_codec_info_unsafe+0x144>)
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	4b46      	ldr	r3, [pc, #280]	; (800f9a0 <load_codec_by_codec_info_unsafe+0x148>)
 800f888:	2228      	movs	r2, #40	; 0x28
 800f88a:	4943      	ldr	r1, [pc, #268]	; (800f998 <load_codec_by_codec_info_unsafe+0x140>)
 800f88c:	2001      	movs	r0, #1
 800f88e:	f7ff f9bd 	bl	800ec0c <sail_log>
 800f892:	2301      	movs	r3, #1
 800f894:	e077      	b.n	800f986 <load_codec_by_codec_info_unsafe+0x12e>
    SAIL_CHECK_PTR(codec);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bf0c      	ite	eq
 800f89c:	2301      	moveq	r3, #1
 800f89e:	2300      	movne	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d011      	beq.n	800f8ca <load_codec_by_codec_info_unsafe+0x72>
 800f8a6:	4b3f      	ldr	r3, [pc, #252]	; (800f9a4 <load_codec_by_codec_info_unsafe+0x14c>)
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	4b3a      	ldr	r3, [pc, #232]	; (800f994 <load_codec_by_codec_info_unsafe+0x13c>)
 800f8ac:	2229      	movs	r2, #41	; 0x29
 800f8ae:	493a      	ldr	r1, [pc, #232]	; (800f998 <load_codec_by_codec_info_unsafe+0x140>)
 800f8b0:	2001      	movs	r0, #1
 800f8b2:	f7ff f9ab 	bl	800ec0c <sail_log>
 800f8b6:	4b39      	ldr	r3, [pc, #228]	; (800f99c <load_codec_by_codec_info_unsafe+0x144>)
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	4b39      	ldr	r3, [pc, #228]	; (800f9a0 <load_codec_by_codec_info_unsafe+0x148>)
 800f8bc:	2229      	movs	r2, #41	; 0x29
 800f8be:	4936      	ldr	r1, [pc, #216]	; (800f998 <load_codec_by_codec_info_unsafe+0x140>)
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	f7ff f9a3 	bl	800ec0c <sail_log>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e05d      	b.n	800f986 <load_codec_by_codec_info_unsafe+0x12e>

    struct sail_context *context;
    SAIL_TRY(fetch_global_context_unsafe(&context));
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fd fbc5 	bl	800d05e <fetch_global_context_unsafe>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	82fb      	strh	r3, [r7, #22]
 800f8d8:	8afb      	ldrh	r3, [r7, #22]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	bf14      	ite	ne
 800f8de:	2301      	movne	r3, #1
 800f8e0:	2300      	moveq	r3, #0
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <load_codec_by_codec_info_unsafe+0x94>
 800f8e8:	8afb      	ldrh	r3, [r7, #22]
 800f8ea:	e04c      	b.n	800f986 <load_codec_by_codec_info_unsafe+0x12e>

    /* Find the codec in the cache. */
    struct sail_codec_bundle *found_codec_bundle = NULL;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	61fb      	str	r3, [r7, #28]

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	61bb      	str	r3, [r7, #24]
 800f8f6:	e018      	b.n	800f92a <load_codec_by_codec_info_unsafe+0xd2>
        struct sail_codec_bundle *codec_bundle = codec_bundle_node->codec_bundle;
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	613b      	str	r3, [r7, #16]

        if (codec_bundle->codec_info == codec_info) {
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	429a      	cmp	r2, r3
 800f906:	d10d      	bne.n	800f924 <load_codec_by_codec_info_unsafe+0xcc>
            if (codec_bundle->codec != NULL) {
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d005      	beq.n	800f91c <load_codec_by_codec_info_unsafe+0xc4>
                *codec = codec_bundle->codec;
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	601a      	str	r2, [r3, #0]
                return SAIL_OK;
 800f918:	2300      	movs	r3, #0
 800f91a:	e034      	b.n	800f986 <load_codec_by_codec_info_unsafe+0x12e>
            }

            found_codec_bundle = codec_bundle_node->codec_bundle;
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	61fb      	str	r3, [r7, #28]
            break;
 800f922:	e005      	b.n	800f930 <load_codec_by_codec_info_unsafe+0xd8>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	61bb      	str	r3, [r7, #24]
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e3      	bne.n	800f8f8 <load_codec_by_codec_info_unsafe+0xa0>
        }
    }

    /* Something weird. The pointer to the codec info is not found in the cache. */
    if (found_codec_bundle == NULL) {
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10a      	bne.n	800f94c <load_codec_by_codec_info_unsafe+0xf4>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 800f936:	4b1c      	ldr	r3, [pc, #112]	; (800f9a8 <load_codec_by_codec_info_unsafe+0x150>)
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	4b19      	ldr	r3, [pc, #100]	; (800f9a0 <load_codec_by_codec_info_unsafe+0x148>)
 800f93c:	2241      	movs	r2, #65	; 0x41
 800f93e:	4916      	ldr	r1, [pc, #88]	; (800f998 <load_codec_by_codec_info_unsafe+0x140>)
 800f940:	2001      	movs	r0, #1
 800f942:	f7ff f963 	bl	800ec0c <sail_log>
 800f946:	f240 132d 	movw	r3, #301	; 0x12d
 800f94a:	e01c      	b.n	800f986 <load_codec_by_codec_info_unsafe+0x12e>
    }

    if (found_codec_bundle->codec == NULL) {
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d113      	bne.n	800f97c <load_codec_by_codec_info_unsafe+0x124>
        SAIL_TRY(alloc_and_load_codec(found_codec_bundle->codec_info, &found_codec_bundle->codec));
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	3304      	adds	r3, #4
 800f95c:	4619      	mov	r1, r3
 800f95e:	4610      	mov	r0, r2
 800f960:	f7fa f93a 	bl	8009bd8 <alloc_and_load_codec>
 800f964:	4603      	mov	r3, r0
 800f966:	81fb      	strh	r3, [r7, #14]
 800f968:	89fb      	ldrh	r3, [r7, #14]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	bf14      	ite	ne
 800f96e:	2301      	movne	r3, #1
 800f970:	2300      	moveq	r3, #0
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	d001      	beq.n	800f97c <load_codec_by_codec_info_unsafe+0x124>
 800f978:	89fb      	ldrh	r3, [r7, #14]
 800f97a:	e004      	b.n	800f986 <load_codec_by_codec_info_unsafe+0x12e>
    }

    *codec = found_codec_bundle->codec;
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	685a      	ldr	r2, [r3, #4]
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3720      	adds	r7, #32
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	08019288 	.word	0x08019288
 800f994:	08019270 	.word	0x08019270
 800f998:	08019220 	.word	0x08019220
 800f99c:	08019298 	.word	0x08019298
 800f9a0:	08019294 	.word	0x08019294
 800f9a4:	080192ac 	.word	0x080192ac
 800f9a8:	080192b4 	.word	0x080192b4

0800f9ac <load_codec_by_codec_info>:

/*
 * Public functions.
 */

sail_status_t load_codec_by_codec_info(const struct sail_codec_info *codec_info, const struct sail_codec **codec) {
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b086      	sub	sp, #24
 800f9b0:	af02      	add	r7, sp, #8
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	bf0c      	ite	eq
 800f9bc:	2301      	moveq	r3, #1
 800f9be:	2300      	movne	r3, #0
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d011      	beq.n	800f9ea <load_codec_by_codec_info+0x3e>
 800f9c6:	4b2f      	ldr	r3, [pc, #188]	; (800fa84 <load_codec_by_codec_info+0xd8>)
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	4b2f      	ldr	r3, [pc, #188]	; (800fa88 <load_codec_by_codec_info+0xdc>)
 800f9cc:	2253      	movs	r2, #83	; 0x53
 800f9ce:	492f      	ldr	r1, [pc, #188]	; (800fa8c <load_codec_by_codec_info+0xe0>)
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	f7ff f91b 	bl	800ec0c <sail_log>
 800f9d6:	4b2e      	ldr	r3, [pc, #184]	; (800fa90 <load_codec_by_codec_info+0xe4>)
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	4b2e      	ldr	r3, [pc, #184]	; (800fa94 <load_codec_by_codec_info+0xe8>)
 800f9dc:	2253      	movs	r2, #83	; 0x53
 800f9de:	492b      	ldr	r1, [pc, #172]	; (800fa8c <load_codec_by_codec_info+0xe0>)
 800f9e0:	2001      	movs	r0, #1
 800f9e2:	f7ff f913 	bl	800ec0c <sail_log>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e048      	b.n	800fa7c <load_codec_by_codec_info+0xd0>
    SAIL_CHECK_PTR(codec);
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	bf0c      	ite	eq
 800f9f0:	2301      	moveq	r3, #1
 800f9f2:	2300      	movne	r3, #0
 800f9f4:	b2db      	uxtb	r3, r3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d011      	beq.n	800fa1e <load_codec_by_codec_info+0x72>
 800f9fa:	4b27      	ldr	r3, [pc, #156]	; (800fa98 <load_codec_by_codec_info+0xec>)
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	4b22      	ldr	r3, [pc, #136]	; (800fa88 <load_codec_by_codec_info+0xdc>)
 800fa00:	2254      	movs	r2, #84	; 0x54
 800fa02:	4922      	ldr	r1, [pc, #136]	; (800fa8c <load_codec_by_codec_info+0xe0>)
 800fa04:	2001      	movs	r0, #1
 800fa06:	f7ff f901 	bl	800ec0c <sail_log>
 800fa0a:	4b21      	ldr	r3, [pc, #132]	; (800fa90 <load_codec_by_codec_info+0xe4>)
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	4b21      	ldr	r3, [pc, #132]	; (800fa94 <load_codec_by_codec_info+0xe8>)
 800fa10:	2254      	movs	r2, #84	; 0x54
 800fa12:	491e      	ldr	r1, [pc, #120]	; (800fa8c <load_codec_by_codec_info+0xe0>)
 800fa14:	2001      	movs	r0, #1
 800fa16:	f7ff f8f9 	bl	800ec0c <sail_log>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e02e      	b.n	800fa7c <load_codec_by_codec_info+0xd0>

    SAIL_TRY(lock_context());
 800fa1e:	f7fd fbeb 	bl	800d1f8 <lock_context>
 800fa22:	4603      	mov	r3, r0
 800fa24:	81fb      	strh	r3, [r7, #14]
 800fa26:	89fb      	ldrh	r3, [r7, #14]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	bf14      	ite	ne
 800fa2c:	2301      	movne	r3, #1
 800fa2e:	2300      	moveq	r3, #0
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <load_codec_by_codec_info+0x8e>
 800fa36:	89fb      	ldrh	r3, [r7, #14]
 800fa38:	e020      	b.n	800fa7c <load_codec_by_codec_info+0xd0>

    SAIL_TRY_OR_CLEANUP(load_codec_by_codec_info_unsafe(codec_info, codec),
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f7ff ff0b 	bl	800f858 <load_codec_by_codec_info_unsafe>
 800fa42:	4603      	mov	r3, r0
 800fa44:	81bb      	strh	r3, [r7, #12]
 800fa46:	89bb      	ldrh	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	bf14      	ite	ne
 800fa4c:	2301      	movne	r3, #1
 800fa4e:	2300      	moveq	r3, #0
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d003      	beq.n	800fa5e <load_codec_by_codec_info+0xb2>
 800fa56:	f7fd fbd7 	bl	800d208 <unlock_context>
 800fa5a:	89bb      	ldrh	r3, [r7, #12]
 800fa5c:	e00e      	b.n	800fa7c <load_codec_by_codec_info+0xd0>
                        /* cleanup */ unlock_context());

    SAIL_TRY(unlock_context());
 800fa5e:	f7fd fbd3 	bl	800d208 <unlock_context>
 800fa62:	4603      	mov	r3, r0
 800fa64:	817b      	strh	r3, [r7, #10]
 800fa66:	897b      	ldrh	r3, [r7, #10]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bf14      	ite	ne
 800fa6c:	2301      	movne	r3, #1
 800fa6e:	2300      	moveq	r3, #0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d001      	beq.n	800fa7a <load_codec_by_codec_info+0xce>
 800fa76:	897b      	ldrh	r3, [r7, #10]
 800fa78:	e000      	b.n	800fa7c <load_codec_by_codec_info+0xd0>

    return SAIL_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3710      	adds	r7, #16
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	08019288 	.word	0x08019288
 800fa88:	08019270 	.word	0x08019270
 800fa8c:	08019220 	.word	0x08019220
 800fa90:	08019298 	.word	0x08019298
 800fa94:	08019294 	.word	0x08019294
 800fa98:	080192ac 	.word	0x080192ac

0800fa9c <destroy_hidden_state>:

void destroy_hidden_state(struct hidden_state *state) {
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]

    if (state == NULL) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d016      	beq.n	800fad8 <destroy_hidden_state+0x3c>
        return;
    }

    if (state->own_io) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	791b      	ldrb	r3, [r3, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d004      	beq.n	800fabc <destroy_hidden_state+0x20>
        sail_destroy_io(state->io);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fe f9ca 	bl	800de50 <sail_destroy_io>
    }

    sail_destroy_save_options(state->save_options);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f9d6 	bl	800fe72 <sail_destroy_save_options>

    /* This state must be freed and zeroed by codecs. We free it just in case to avoid memory leaks. */
    sail_free(state->state);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	4618      	mov	r0, r3
 800facc:	f7ff fa1e 	bl	800ef0c <sail_free>

    sail_free(state);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7ff fa1b 	bl	800ef0c <sail_free>
 800fad6:	e000      	b.n	800fada <destroy_hidden_state+0x3e>
        return;
 800fad8:	bf00      	nop
}
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <check_io_arguments>:
 * Private functions.
 */

static sail_status_t check_io_arguments(struct sail_io *io,
                                        const struct sail_codec_info *codec_info,
                                        void **state) {
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(io);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	bf0c      	ite	eq
 800faf2:	2301      	moveq	r3, #1
 800faf4:	2300      	movne	r3, #0
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d011      	beq.n	800fb20 <check_io_arguments+0x40>
 800fafc:	4b25      	ldr	r3, [pc, #148]	; (800fb94 <check_io_arguments+0xb4>)
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	4b25      	ldr	r3, [pc, #148]	; (800fb98 <check_io_arguments+0xb8>)
 800fb02:	2229      	movs	r2, #41	; 0x29
 800fb04:	4925      	ldr	r1, [pc, #148]	; (800fb9c <check_io_arguments+0xbc>)
 800fb06:	2001      	movs	r0, #1
 800fb08:	f7ff f880 	bl	800ec0c <sail_log>
 800fb0c:	4b24      	ldr	r3, [pc, #144]	; (800fba0 <check_io_arguments+0xc0>)
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	4b24      	ldr	r3, [pc, #144]	; (800fba4 <check_io_arguments+0xc4>)
 800fb12:	2229      	movs	r2, #41	; 0x29
 800fb14:	4921      	ldr	r1, [pc, #132]	; (800fb9c <check_io_arguments+0xbc>)
 800fb16:	2001      	movs	r0, #1
 800fb18:	f7ff f878 	bl	800ec0c <sail_log>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e034      	b.n	800fb8a <check_io_arguments+0xaa>
    SAIL_CHECK_PTR(codec_info);
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	bf0c      	ite	eq
 800fb26:	2301      	moveq	r3, #1
 800fb28:	2300      	movne	r3, #0
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d011      	beq.n	800fb54 <check_io_arguments+0x74>
 800fb30:	4b1d      	ldr	r3, [pc, #116]	; (800fba8 <check_io_arguments+0xc8>)
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	4b18      	ldr	r3, [pc, #96]	; (800fb98 <check_io_arguments+0xb8>)
 800fb36:	222a      	movs	r2, #42	; 0x2a
 800fb38:	4918      	ldr	r1, [pc, #96]	; (800fb9c <check_io_arguments+0xbc>)
 800fb3a:	2001      	movs	r0, #1
 800fb3c:	f7ff f866 	bl	800ec0c <sail_log>
 800fb40:	4b17      	ldr	r3, [pc, #92]	; (800fba0 <check_io_arguments+0xc0>)
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	4b17      	ldr	r3, [pc, #92]	; (800fba4 <check_io_arguments+0xc4>)
 800fb46:	222a      	movs	r2, #42	; 0x2a
 800fb48:	4914      	ldr	r1, [pc, #80]	; (800fb9c <check_io_arguments+0xbc>)
 800fb4a:	2001      	movs	r0, #1
 800fb4c:	f7ff f85e 	bl	800ec0c <sail_log>
 800fb50:	2301      	movs	r3, #1
 800fb52:	e01a      	b.n	800fb8a <check_io_arguments+0xaa>
    SAIL_CHECK_PTR(state);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	bf0c      	ite	eq
 800fb5a:	2301      	moveq	r3, #1
 800fb5c:	2300      	movne	r3, #0
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d011      	beq.n	800fb88 <check_io_arguments+0xa8>
 800fb64:	4b11      	ldr	r3, [pc, #68]	; (800fbac <check_io_arguments+0xcc>)
 800fb66:	9300      	str	r3, [sp, #0]
 800fb68:	4b0b      	ldr	r3, [pc, #44]	; (800fb98 <check_io_arguments+0xb8>)
 800fb6a:	222b      	movs	r2, #43	; 0x2b
 800fb6c:	490b      	ldr	r1, [pc, #44]	; (800fb9c <check_io_arguments+0xbc>)
 800fb6e:	2001      	movs	r0, #1
 800fb70:	f7ff f84c 	bl	800ec0c <sail_log>
 800fb74:	4b0a      	ldr	r3, [pc, #40]	; (800fba0 <check_io_arguments+0xc0>)
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	4b0a      	ldr	r3, [pc, #40]	; (800fba4 <check_io_arguments+0xc4>)
 800fb7a:	222b      	movs	r2, #43	; 0x2b
 800fb7c:	4907      	ldr	r1, [pc, #28]	; (800fb9c <check_io_arguments+0xbc>)
 800fb7e:	2001      	movs	r0, #1
 800fb80:	f7ff f844 	bl	800ec0c <sail_log>
 800fb84:	2301      	movs	r3, #1
 800fb86:	e000      	b.n	800fb8a <check_io_arguments+0xaa>

    return SAIL_OK;
 800fb88:	2300      	movs	r3, #0
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	0801937c 	.word	0x0801937c
 800fb98:	08019304 	.word	0x08019304
 800fb9c:	0801931c 	.word	0x0801931c
 800fba0:	08019384 	.word	0x08019384
 800fba4:	08019380 	.word	0x08019380
 800fba8:	08019398 	.word	0x08019398
 800fbac:	080193a4 	.word	0x080193a4

0800fbb0 <start_loading_io_with_options>:
 * Public functions.
 */

sail_status_t start_loading_io_with_options(struct sail_io *io, bool own_io,
                                            const struct sail_codec_info *codec_info,
                                            const struct sail_load_options *load_options, void **state) {
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b08a      	sub	sp, #40	; 0x28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	607a      	str	r2, [r7, #4]
 800fbba:	603b      	str	r3, [r7, #0]
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	72fb      	strb	r3, [r7, #11]

    SAIL_TRY_OR_CLEANUP(check_io_arguments(io, codec_info, state),
 800fbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f7ff ff8b 	bl	800fae0 <check_io_arguments>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	bf14      	ite	ne
 800fbd4:	2301      	movne	r3, #1
 800fbd6:	2300      	moveq	r3, #0
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d007      	beq.n	800fbee <start_loading_io_with_options+0x3e>
 800fbde:	7afb      	ldrb	r3, [r7, #11]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d002      	beq.n	800fbea <start_loading_io_with_options+0x3a>
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f7fe f933 	bl	800de50 <sail_destroy_io>
 800fbea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbec:	e0b7      	b.n	800fd5e <start_loading_io_with_options+0x1ae>
                        /* cleanup */ if (own_io) sail_destroy_io(io));

    *state = NULL;
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	601a      	str	r2, [r3, #0]

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct hidden_state), &ptr),
 800fbf4:	f107 0314 	add.w	r3, r7, #20
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	2018      	movs	r0, #24
 800fbfc:	f7ff f8fe 	bl	800edfc <sail_malloc>
 800fc00:	4603      	mov	r3, r0
 800fc02:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fc04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	bf14      	ite	ne
 800fc0a:	2301      	movne	r3, #1
 800fc0c:	2300      	moveq	r3, #0
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d007      	beq.n	800fc24 <start_loading_io_with_options+0x74>
 800fc14:	7afb      	ldrb	r3, [r7, #11]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d002      	beq.n	800fc20 <start_loading_io_with_options+0x70>
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f7fe f918 	bl	800de50 <sail_destroy_io>
 800fc20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc22:	e09c      	b.n	800fd5e <start_loading_io_with_options+0x1ae>
                        /* cleanup */ if (own_io) sail_destroy_io(io));
    struct hidden_state *state_of_mind = ptr;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	623b      	str	r3, [r7, #32]

    state_of_mind->io           = io;
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	601a      	str	r2, [r3, #0]
    state_of_mind->own_io       = own_io;
 800fc2e:	6a3b      	ldr	r3, [r7, #32]
 800fc30:	7afa      	ldrb	r2, [r7, #11]
 800fc32:	711a      	strb	r2, [r3, #4]
    state_of_mind->save_options = NULL;
 800fc34:	6a3b      	ldr	r3, [r7, #32]
 800fc36:	2200      	movs	r2, #0
 800fc38:	609a      	str	r2, [r3, #8]
    state_of_mind->state        = NULL;
 800fc3a:	6a3b      	ldr	r3, [r7, #32]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	60da      	str	r2, [r3, #12]
    state_of_mind->codec_info   = codec_info;
 800fc40:	6a3b      	ldr	r3, [r7, #32]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	611a      	str	r2, [r3, #16]
    state_of_mind->codec        = NULL;
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	615a      	str	r2, [r3, #20]

    SAIL_TRY_OR_CLEANUP(load_codec_by_codec_info(state_of_mind->codec_info, &state_of_mind->codec),
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	691a      	ldr	r2, [r3, #16]
 800fc50:	6a3b      	ldr	r3, [r7, #32]
 800fc52:	3314      	adds	r3, #20
 800fc54:	4619      	mov	r1, r3
 800fc56:	4610      	mov	r0, r2
 800fc58:	f7ff fea8 	bl	800f9ac <load_codec_by_codec_info>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	83fb      	strh	r3, [r7, #30]
 800fc60:	8bfb      	ldrh	r3, [r7, #30]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	bf14      	ite	ne
 800fc66:	2301      	movne	r3, #1
 800fc68:	2300      	moveq	r3, #0
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d004      	beq.n	800fc7a <start_loading_io_with_options+0xca>
 800fc70:	6a38      	ldr	r0, [r7, #32]
 800fc72:	f7ff ff13 	bl	800fa9c <destroy_hidden_state>
 800fc76:	8bfb      	ldrh	r3, [r7, #30]
 800fc78:	e071      	b.n	800fd5e <start_loading_io_with_options+0x1ae>
                        /* cleanup */ destroy_hidden_state(state_of_mind));

    if (load_options == NULL) {
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d146      	bne.n	800fd0e <start_loading_io_with_options+0x15e>
        struct sail_load_options *load_options_local = NULL;
 800fc80:	2300      	movs	r3, #0
 800fc82:	613b      	str	r3, [r7, #16]

        SAIL_TRY_OR_CLEANUP(sail_alloc_load_options_from_features(state_of_mind->codec_info->load_features, &load_options_local),
 800fc84:	6a3b      	ldr	r3, [r7, #32]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8a:	f107 0210 	add.w	r2, r7, #16
 800fc8e:	4611      	mov	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fe febf 	bl	800ea14 <sail_alloc_load_options_from_features>
 800fc96:	4603      	mov	r3, r0
 800fc98:	837b      	strh	r3, [r7, #26]
 800fc9a:	8b7b      	ldrh	r3, [r7, #26]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	bf14      	ite	ne
 800fca0:	2301      	movne	r3, #1
 800fca2:	2300      	moveq	r3, #0
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d004      	beq.n	800fcb4 <start_loading_io_with_options+0x104>
 800fcaa:	6a38      	ldr	r0, [r7, #32]
 800fcac:	f7ff fef6 	bl	800fa9c <destroy_hidden_state>
 800fcb0:	8b7b      	ldrh	r3, [r7, #26]
 800fcb2:	e054      	b.n	800fd5e <start_loading_io_with_options+0x1ae>
                            /* cleanup */ destroy_hidden_state(state_of_mind));
        SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_init(state_of_mind->io, load_options_local, &state_of_mind->state),
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	695b      	ldr	r3, [r3, #20]
 800fcb8:	689b      	ldr	r3, [r3, #8]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	6a3a      	ldr	r2, [r7, #32]
 800fcbe:	6810      	ldr	r0, [r2, #0]
 800fcc0:	6939      	ldr	r1, [r7, #16]
 800fcc2:	6a3a      	ldr	r2, [r7, #32]
 800fcc4:	320c      	adds	r2, #12
 800fcc6:	4798      	blx	r3
 800fcc8:	4603      	mov	r3, r0
 800fcca:	833b      	strh	r3, [r7, #24]
 800fccc:	8b3b      	ldrh	r3, [r7, #24]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	bf14      	ite	ne
 800fcd2:	2301      	movne	r3, #1
 800fcd4:	2300      	moveq	r3, #0
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d013      	beq.n	800fd04 <start_loading_io_with_options+0x154>
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fe84 	bl	800e9ec <sail_destroy_load_options>
 800fce4:	6a3b      	ldr	r3, [r7, #32]
 800fce6:	695b      	ldr	r3, [r3, #20]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	6a3a      	ldr	r2, [r7, #32]
 800fcee:	f102 000c 	add.w	r0, r2, #12
 800fcf2:	6a3a      	ldr	r2, [r7, #32]
 800fcf4:	6812      	ldr	r2, [r2, #0]
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	4798      	blx	r3
 800fcfa:	6a38      	ldr	r0, [r7, #32]
 800fcfc:	f7ff fece 	bl	800fa9c <destroy_hidden_state>
 800fd00:	8b3b      	ldrh	r3, [r7, #24]
 800fd02:	e02c      	b.n	800fd5e <start_loading_io_with_options+0x1ae>
                            /* cleanup */ sail_destroy_load_options(load_options_local),
                                          state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
                                          destroy_hidden_state(state_of_mind));
        sail_destroy_load_options(load_options_local);
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe fe70 	bl	800e9ec <sail_destroy_load_options>
 800fd0c:	e023      	b.n	800fd56 <start_loading_io_with_options+0x1a6>
    } else {
        SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_init(state_of_mind->io, load_options, &state_of_mind->state),
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6a3a      	ldr	r2, [r7, #32]
 800fd18:	6810      	ldr	r0, [r2, #0]
 800fd1a:	6a3a      	ldr	r2, [r7, #32]
 800fd1c:	320c      	adds	r2, #12
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	4798      	blx	r3
 800fd22:	4603      	mov	r3, r0
 800fd24:	83bb      	strh	r3, [r7, #28]
 800fd26:	8bbb      	ldrh	r3, [r7, #28]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	bf14      	ite	ne
 800fd2c:	2301      	movne	r3, #1
 800fd2e:	2300      	moveq	r3, #0
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00f      	beq.n	800fd56 <start_loading_io_with_options+0x1a6>
 800fd36:	6a3b      	ldr	r3, [r7, #32]
 800fd38:	695b      	ldr	r3, [r3, #20]
 800fd3a:	689b      	ldr	r3, [r3, #8]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	6a3a      	ldr	r2, [r7, #32]
 800fd40:	f102 000c 	add.w	r0, r2, #12
 800fd44:	6a3a      	ldr	r2, [r7, #32]
 800fd46:	6812      	ldr	r2, [r2, #0]
 800fd48:	4611      	mov	r1, r2
 800fd4a:	4798      	blx	r3
 800fd4c:	6a38      	ldr	r0, [r7, #32]
 800fd4e:	f7ff fea5 	bl	800fa9c <destroy_hidden_state>
 800fd52:	8bbb      	ldrh	r3, [r7, #28]
 800fd54:	e003      	b.n	800fd5e <start_loading_io_with_options+0x1ae>
                            /* cleanup */ state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
                                          destroy_hidden_state(state_of_mind));
    }

    *state = state_of_mind;
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	6a3a      	ldr	r2, [r7, #32]
 800fd5a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800fd5c:	2300      	movs	r3, #0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3728      	adds	r7, #40	; 0x28
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
	...

0800fd68 <sail_alloc_save_features>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_save_features(struct sail_save_features **save_features) {
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b086      	sub	sp, #24
 800fd6c:	af02      	add	r7, sp, #8
 800fd6e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(save_features);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	bf0c      	ite	eq
 800fd76:	2301      	moveq	r3, #1
 800fd78:	2300      	movne	r3, #0
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d011      	beq.n	800fda4 <sail_alloc_save_features+0x3c>
 800fd80:	4b25      	ldr	r3, [pc, #148]	; (800fe18 <sail_alloc_save_features+0xb0>)
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	4b25      	ldr	r3, [pc, #148]	; (800fe1c <sail_alloc_save_features+0xb4>)
 800fd86:	2221      	movs	r2, #33	; 0x21
 800fd88:	4925      	ldr	r1, [pc, #148]	; (800fe20 <sail_alloc_save_features+0xb8>)
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	f7fe ff3e 	bl	800ec0c <sail_log>
 800fd90:	4b24      	ldr	r3, [pc, #144]	; (800fe24 <sail_alloc_save_features+0xbc>)
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	4b24      	ldr	r3, [pc, #144]	; (800fe28 <sail_alloc_save_features+0xc0>)
 800fd96:	2221      	movs	r2, #33	; 0x21
 800fd98:	4921      	ldr	r1, [pc, #132]	; (800fe20 <sail_alloc_save_features+0xb8>)
 800fd9a:	2001      	movs	r0, #1
 800fd9c:	f7fe ff36 	bl	800ec0c <sail_log>
 800fda0:	2301      	movs	r3, #1
 800fda2:	e035      	b.n	800fe10 <sail_alloc_save_features+0xa8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_save_features), &ptr));
 800fda4:	f107 0308 	add.w	r3, r7, #8
 800fda8:	4619      	mov	r1, r3
 800fdaa:	2020      	movs	r0, #32
 800fdac:	f7ff f826 	bl	800edfc <sail_malloc>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	81fb      	strh	r3, [r7, #14]
 800fdb4:	89fb      	ldrh	r3, [r7, #14]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	bf14      	ite	ne
 800fdba:	2301      	movne	r3, #1
 800fdbc:	2300      	moveq	r3, #0
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <sail_alloc_save_features+0x60>
 800fdc4:	89fb      	ldrh	r3, [r7, #14]
 800fdc6:	e023      	b.n	800fe10 <sail_alloc_save_features+0xa8>
    *save_features = ptr;
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]

    (*save_features)->pixel_formats        = NULL;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	601a      	str	r2, [r3, #0]
    (*save_features)->pixel_formats_length = 0;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2200      	movs	r2, #0
 800fddc:	605a      	str	r2, [r3, #4]
    (*save_features)->features             = 0;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2200      	movs	r2, #0
 800fde4:	609a      	str	r2, [r3, #8]
    (*save_features)->compressions         = NULL;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2200      	movs	r2, #0
 800fdec:	60da      	str	r2, [r3, #12]
    (*save_features)->compressions_length  = 0;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	611a      	str	r2, [r3, #16]
    (*save_features)->default_compression  = SAIL_COMPRESSION_UNKNOWN;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	751a      	strb	r2, [r3, #20]
    (*save_features)->compression_level    = NULL;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2200      	movs	r2, #0
 800fe04:	619a      	str	r2, [r3, #24]
    (*save_features)->tuning               = NULL;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	61da      	str	r2, [r3, #28]

    return SAIL_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	08019450 	.word	0x08019450
 800fe1c:	080193e0 	.word	0x080193e0
 800fe20:	080193f8 	.word	0x080193f8
 800fe24:	08019464 	.word	0x08019464
 800fe28:	08019460 	.word	0x08019460

0800fe2c <sail_destroy_save_features>:

void sail_destroy_save_features(struct sail_save_features *save_features) {
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]

    if (save_features == NULL) {
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d017      	beq.n	800fe6a <sail_destroy_save_features+0x3e>
        return;
    }

    sail_free(save_features->pixel_formats);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff f864 	bl	800ef0c <sail_free>
    sail_free(save_features->compressions);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7ff f85f 	bl	800ef0c <sail_free>
    sail_destroy_compression_level(save_features->compression_level);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fc fd6a 	bl	800c92c <sail_destroy_compression_level>
    sail_destroy_string_node_chain(save_features->tuning);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	69db      	ldr	r3, [r3, #28]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 f8a7 	bl	800ffb0 <sail_destroy_string_node_chain>
    sail_free(save_features);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7ff f852 	bl	800ef0c <sail_free>
 800fe68:	e000      	b.n	800fe6c <sail_destroy_save_features+0x40>
        return;
 800fe6a:	bf00      	nop
}
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <sail_destroy_save_options>:
    (*save_options)->tuning            = NULL;

    return SAIL_OK;
}

void sail_destroy_save_options(struct sail_save_options *save_options) {
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b082      	sub	sp, #8
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]

    if (save_options == NULL) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d003      	beq.n	800fe88 <sail_destroy_save_options+0x16>
        return;
    }

    sail_free(save_options);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7ff f843 	bl	800ef0c <sail_free>
 800fe86:	e000      	b.n	800fe8a <sail_destroy_save_options+0x18>
        return;
 800fe88:	bf00      	nop
}
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <sail_alloc_source_image>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_source_image(struct sail_source_image **source_image) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af02      	add	r7, sp, #8
 800fe96:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(source_image);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	bf0c      	ite	eq
 800fe9e:	2301      	moveq	r3, #1
 800fea0:	2300      	movne	r3, #0
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d011      	beq.n	800fecc <sail_alloc_source_image+0x3c>
 800fea8:	4b1f      	ldr	r3, [pc, #124]	; (800ff28 <sail_alloc_source_image+0x98>)
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	4b1f      	ldr	r3, [pc, #124]	; (800ff2c <sail_alloc_source_image+0x9c>)
 800feae:	2222      	movs	r2, #34	; 0x22
 800feb0:	491f      	ldr	r1, [pc, #124]	; (800ff30 <sail_alloc_source_image+0xa0>)
 800feb2:	2001      	movs	r0, #1
 800feb4:	f7fe feaa 	bl	800ec0c <sail_log>
 800feb8:	4b1e      	ldr	r3, [pc, #120]	; (800ff34 <sail_alloc_source_image+0xa4>)
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	4b1e      	ldr	r3, [pc, #120]	; (800ff38 <sail_alloc_source_image+0xa8>)
 800febe:	2222      	movs	r2, #34	; 0x22
 800fec0:	491b      	ldr	r1, [pc, #108]	; (800ff30 <sail_alloc_source_image+0xa0>)
 800fec2:	2001      	movs	r0, #1
 800fec4:	f7fe fea2 	bl	800ec0c <sail_log>
 800fec8:	2301      	movs	r3, #1
 800feca:	e029      	b.n	800ff20 <sail_alloc_source_image+0x90>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_source_image), &ptr));
 800fecc:	f107 0308 	add.w	r3, r7, #8
 800fed0:	4619      	mov	r1, r3
 800fed2:	2010      	movs	r0, #16
 800fed4:	f7fe ff92 	bl	800edfc <sail_malloc>
 800fed8:	4603      	mov	r3, r0
 800feda:	81fb      	strh	r3, [r7, #14]
 800fedc:	89fb      	ldrh	r3, [r7, #14]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	bf14      	ite	ne
 800fee2:	2301      	movne	r3, #1
 800fee4:	2300      	moveq	r3, #0
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <sail_alloc_source_image+0x60>
 800feec:	89fb      	ldrh	r3, [r7, #14]
 800feee:	e017      	b.n	800ff20 <sail_alloc_source_image+0x90>
    *source_image = ptr;
 800fef0:	68ba      	ldr	r2, [r7, #8]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	601a      	str	r2, [r3, #0]

    (*source_image)->pixel_format       = SAIL_PIXEL_FORMAT_UNKNOWN;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2200      	movs	r2, #0
 800fefc:	701a      	strb	r2, [r3, #0]
    (*source_image)->chroma_subsampling = SAIL_CHROMA_SUBSAMPLING_UNKNOWN;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2200      	movs	r2, #0
 800ff04:	705a      	strb	r2, [r3, #1]
    (*source_image)->properties         = 0;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	605a      	str	r2, [r3, #4]
    (*source_image)->compression        = SAIL_COMPRESSION_UNKNOWN;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2200      	movs	r2, #0
 800ff14:	721a      	strb	r2, [r3, #8]
    (*source_image)->special_properties = NULL;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	60da      	str	r2, [r3, #12]

    return SAIL_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	080194e8 	.word	0x080194e8
 800ff2c:	08019478 	.word	0x08019478
 800ff30:	08019490 	.word	0x08019490
 800ff34:	080194fc 	.word	0x080194fc
 800ff38:	080194f8 	.word	0x080194f8

0800ff3c <sail_destroy_source_image>:

void sail_destroy_source_image(struct sail_source_image *source_image) {
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]

    if (source_image == NULL) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d008      	beq.n	800ff5c <sail_destroy_source_image+0x20>
        return;
    }

    sail_destroy_hash_map(source_image->special_properties);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fd f9b4 	bl	800d2bc <sail_destroy_hash_map>
    sail_free(source_image);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7fe ffd9 	bl	800ef0c <sail_free>
 800ff5a:	e000      	b.n	800ff5e <sail_destroy_source_image+0x22>
        return;
 800ff5c:	bf00      	nop
}
 800ff5e:	3708      	adds	r7, #8
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <sail_alloc_string_node>:

#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_string_node(struct sail_string_node **node) {
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]

    SAIL_TRY(sail_private_alloc_linked_list_node((struct linked_list_node **)node));
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7fe fb33 	bl	800e5d8 <sail_private_alloc_linked_list_node>
 800ff72:	4603      	mov	r3, r0
 800ff74:	81fb      	strh	r3, [r7, #14]
 800ff76:	89fb      	ldrh	r3, [r7, #14]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	bf14      	ite	ne
 800ff7c:	2301      	movne	r3, #1
 800ff7e:	2300      	moveq	r3, #0
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <sail_alloc_string_node+0x26>
 800ff86:	89fb      	ldrh	r3, [r7, #14]
 800ff88:	e000      	b.n	800ff8c <sail_alloc_string_node+0x28>

    return SAIL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <sail_destroy_string_node>:

void sail_destroy_string_node(struct sail_string_node *node) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node((struct linked_list_node *)node,
 800ff9c:	4903      	ldr	r1, [pc, #12]	; (800ffac <sail_destroy_string_node+0x18>)
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7fe fb64 	bl	800e66c <sail_private_destroy_linked_list_node>
                                          (linked_list_value_deallocator_t)&sail_free);
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	0800ef0d 	.word	0x0800ef0d

0800ffb0 <sail_destroy_string_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_free));

    return SAIL_OK;
}

void sail_destroy_string_node_chain(struct sail_string_node *node) {
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 800ffb8:	4903      	ldr	r1, [pc, #12]	; (800ffc8 <sail_destroy_string_node_chain+0x18>)
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7fe fbe8 	bl	800e790 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_free);
}
 800ffc0:	bf00      	nop
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	0800ef0d 	.word	0x0800ef0d

0800ffcc <sail_split_into_string_node_chain>:
                                                      (linked_list_value_deallocator_t)&sail_free));

    return SAIL_OK;
}

sail_status_t sail_split_into_string_node_chain(const char *value, struct sail_string_node **target_string_node) {
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08a      	sub	sp, #40	; 0x28
 800ffd0:	af02      	add	r7, sp, #8
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(value);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	bf0c      	ite	eq
 800ffdc:	2301      	moveq	r3, #1
 800ffde:	2300      	movne	r3, #0
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d011      	beq.n	801000a <sail_split_into_string_node_chain+0x3e>
 800ffe6:	4b41      	ldr	r3, [pc, #260]	; (80100ec <sail_split_into_string_node_chain+0x120>)
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	4b41      	ldr	r3, [pc, #260]	; (80100f0 <sail_split_into_string_node_chain+0x124>)
 800ffec:	2247      	movs	r2, #71	; 0x47
 800ffee:	4941      	ldr	r1, [pc, #260]	; (80100f4 <sail_split_into_string_node_chain+0x128>)
 800fff0:	2001      	movs	r0, #1
 800fff2:	f7fe fe0b 	bl	800ec0c <sail_log>
 800fff6:	4b40      	ldr	r3, [pc, #256]	; (80100f8 <sail_split_into_string_node_chain+0x12c>)
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	4b40      	ldr	r3, [pc, #256]	; (80100fc <sail_split_into_string_node_chain+0x130>)
 800fffc:	2247      	movs	r2, #71	; 0x47
 800fffe:	493d      	ldr	r1, [pc, #244]	; (80100f4 <sail_split_into_string_node_chain+0x128>)
 8010000:	2001      	movs	r0, #1
 8010002:	f7fe fe03 	bl	800ec0c <sail_log>
 8010006:	2301      	movs	r3, #1
 8010008:	e06b      	b.n	80100e2 <sail_split_into_string_node_chain+0x116>
    SAIL_CHECK_PTR(target_string_node);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	bf0c      	ite	eq
 8010010:	2301      	moveq	r3, #1
 8010012:	2300      	movne	r3, #0
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	d011      	beq.n	801003e <sail_split_into_string_node_chain+0x72>
 801001a:	4b39      	ldr	r3, [pc, #228]	; (8010100 <sail_split_into_string_node_chain+0x134>)
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	4b34      	ldr	r3, [pc, #208]	; (80100f0 <sail_split_into_string_node_chain+0x124>)
 8010020:	2248      	movs	r2, #72	; 0x48
 8010022:	4934      	ldr	r1, [pc, #208]	; (80100f4 <sail_split_into_string_node_chain+0x128>)
 8010024:	2001      	movs	r0, #1
 8010026:	f7fe fdf1 	bl	800ec0c <sail_log>
 801002a:	4b33      	ldr	r3, [pc, #204]	; (80100f8 <sail_split_into_string_node_chain+0x12c>)
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	4b33      	ldr	r3, [pc, #204]	; (80100fc <sail_split_into_string_node_chain+0x130>)
 8010030:	2248      	movs	r2, #72	; 0x48
 8010032:	4930      	ldr	r1, [pc, #192]	; (80100f4 <sail_split_into_string_node_chain+0x128>)
 8010034:	2001      	movs	r0, #1
 8010036:	f7fe fde9 	bl	800ec0c <sail_log>
 801003a:	2301      	movs	r3, #1
 801003c:	e051      	b.n	80100e2 <sail_split_into_string_node_chain+0x116>

    struct sail_string_node *result_string_node = NULL;
 801003e:	2300      	movs	r3, #0
 8010040:	60fb      	str	r3, [r7, #12]
    struct sail_string_node **last_string_node = &result_string_node;
 8010042:	f107 030c 	add.w	r3, r7, #12
 8010046:	61fb      	str	r3, [r7, #28]

    const char *separator = ";";
 8010048:	4b2e      	ldr	r3, [pc, #184]	; (8010104 <sail_split_into_string_node_chain+0x138>)
 801004a:	61bb      	str	r3, [r7, #24]

    while (*(value += strspn(value, separator)) != '\0') {
 801004c:	e039      	b.n	80100c2 <sail_split_into_string_node_chain+0xf6>
        size_t length = strcspn(value, separator);
 801004e:	69b9      	ldr	r1, [r7, #24]
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f003 fdf5 	bl	8013c40 <strcspn>
 8010056:	6178      	str	r0, [r7, #20]

        struct sail_string_node *string_node;
        SAIL_TRY(sail_alloc_string_node(&string_node));
 8010058:	f107 0308 	add.w	r3, r7, #8
 801005c:	4618      	mov	r0, r3
 801005e:	f7ff ff81 	bl	800ff64 <sail_alloc_string_node>
 8010062:	4603      	mov	r3, r0
 8010064:	827b      	strh	r3, [r7, #18]
 8010066:	8a7b      	ldrh	r3, [r7, #18]
 8010068:	2b00      	cmp	r3, #0
 801006a:	bf14      	ite	ne
 801006c:	2301      	movne	r3, #1
 801006e:	2300      	moveq	r3, #0
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <sail_split_into_string_node_chain+0xae>
 8010076:	8a7b      	ldrh	r3, [r7, #18]
 8010078:	e033      	b.n	80100e2 <sail_split_into_string_node_chain+0x116>

        SAIL_TRY_OR_CLEANUP(sail_strdup_length(value, length, &string_node->string),
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	461a      	mov	r2, r3
 801007e:	6979      	ldr	r1, [r7, #20]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f8b3 	bl	80101ec <sail_strdup_length>
 8010086:	4603      	mov	r3, r0
 8010088:	823b      	strh	r3, [r7, #16]
 801008a:	8a3b      	ldrh	r3, [r7, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	bf14      	ite	ne
 8010090:	2301      	movne	r3, #1
 8010092:	2300      	moveq	r3, #0
 8010094:	b2db      	uxtb	r3, r3
 8010096:	2b00      	cmp	r3, #0
 8010098:	d009      	beq.n	80100ae <sail_split_into_string_node_chain+0xe2>
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	4618      	mov	r0, r3
 801009e:	f7ff ff87 	bl	800ffb0 <sail_destroy_string_node_chain>
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff ff75 	bl	800ff94 <sail_destroy_string_node>
 80100aa:	8a3b      	ldrh	r3, [r7, #16]
 80100ac:	e019      	b.n	80100e2 <sail_split_into_string_node_chain+0x116>
                            /* cleanup */ sail_destroy_string_node_chain(result_string_node),
                                          sail_destroy_string_node(string_node));

        *last_string_node = string_node;
 80100ae:	68ba      	ldr	r2, [r7, #8]
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	601a      	str	r2, [r3, #0]
        last_string_node = &string_node->next;
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	3304      	adds	r3, #4
 80100b8:	61fb      	str	r3, [r7, #28]

        value += length;
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	4413      	add	r3, r2
 80100c0:	607b      	str	r3, [r7, #4]
    while (*(value += strspn(value, separator)) != '\0') {
 80100c2:	69b9      	ldr	r1, [r7, #24]
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f003 ffe4 	bl	8014092 <strspn>
 80100ca:	4602      	mov	r2, r0
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4413      	add	r3, r2
 80100d0:	607b      	str	r3, [r7, #4]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1b9      	bne.n	801004e <sail_split_into_string_node_chain+0x82>
    }

    *target_string_node = result_string_node;
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80100e0:	2300      	movs	r3, #0
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3720      	adds	r7, #32
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	08019590 	.word	0x08019590
 80100f0:	08019520 	.word	0x08019520
 80100f4:	08019538 	.word	0x08019538
 80100f8:	0801959c 	.word	0x0801959c
 80100fc:	08019598 	.word	0x08019598
 8010100:	080195b0 	.word	0x080195b0
 8010104:	080195c4 	.word	0x080195c4

08010108 <sail_memdup>:

/*
 * Public functions.
 */

sail_status_t sail_memdup(const void *input, size_t input_size, void **output) {
 8010108:	b580      	push	{r7, lr}
 801010a:	b088      	sub	sp, #32
 801010c:	af02      	add	r7, sp, #8
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]

    if (input == NULL) {
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d104      	bne.n	8010124 <sail_memdup+0x1c>
        *output = NULL;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 8010120:	2300      	movs	r3, #0
 8010122:	e02a      	b.n	801017a <sail_memdup+0x72>
    }

    if (input_size == 0) {
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d10f      	bne.n	801014a <sail_memdup+0x42>
        SAIL_LOG_ERROR("Cannot duplicate 0 bytes");
 801012a:	4b16      	ldr	r3, [pc, #88]	; (8010184 <sail_memdup+0x7c>)
 801012c:	2254      	movs	r2, #84	; 0x54
 801012e:	4916      	ldr	r1, [pc, #88]	; (8010188 <sail_memdup+0x80>)
 8010130:	2001      	movs	r0, #1
 8010132:	f7fe fd6b 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 8010136:	4b15      	ldr	r3, [pc, #84]	; (801018c <sail_memdup+0x84>)
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	4b15      	ldr	r3, [pc, #84]	; (8010190 <sail_memdup+0x88>)
 801013c:	2255      	movs	r2, #85	; 0x55
 801013e:	4912      	ldr	r1, [pc, #72]	; (8010188 <sail_memdup+0x80>)
 8010140:	2001      	movs	r0, #1
 8010142:	f7fe fd63 	bl	800ec0c <sail_log>
 8010146:	2309      	movs	r3, #9
 8010148:	e017      	b.n	801017a <sail_memdup+0x72>
    }

    SAIL_TRY(sail_malloc(input_size, output));
 801014a:	6879      	ldr	r1, [r7, #4]
 801014c:	68b8      	ldr	r0, [r7, #8]
 801014e:	f7fe fe55 	bl	800edfc <sail_malloc>
 8010152:	4603      	mov	r3, r0
 8010154:	82fb      	strh	r3, [r7, #22]
 8010156:	8afb      	ldrh	r3, [r7, #22]
 8010158:	2b00      	cmp	r3, #0
 801015a:	bf14      	ite	ne
 801015c:	2301      	movne	r3, #1
 801015e:	2300      	moveq	r3, #0
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b00      	cmp	r3, #0
 8010164:	d001      	beq.n	801016a <sail_memdup+0x62>
 8010166:	8afb      	ldrh	r3, [r7, #22]
 8010168:	e007      	b.n	801017a <sail_memdup+0x72>

    memcpy(*output, input, input_size);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	68f9      	ldr	r1, [r7, #12]
 8010172:	4618      	mov	r0, r3
 8010174:	f002 feda 	bl	8012f2c <memcpy>

    return SAIL_OK;
 8010178:	2300      	movs	r3, #0
}
 801017a:	4618      	mov	r0, r3
 801017c:	3718      	adds	r7, #24
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	080195d0 	.word	0x080195d0
 8010188:	080195ec 	.word	0x080195ec
 801018c:	08019640 	.word	0x08019640
 8010190:	0801963c 	.word	0x0801963c

08010194 <sail_strdup>:

sail_status_t sail_strdup(const char *input, char **output) {
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]

    if (input == NULL) {
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d104      	bne.n	80101ae <sail_strdup+0x1a>
        *output = NULL;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	2200      	movs	r2, #0
 80101a8:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	e01a      	b.n	80101e4 <sail_strdup+0x50>
    }

    void *ptr;
    SAIL_TRY(sail_memdup(input, strlen(input) + 1, &ptr));
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7f0 f9a0 	bl	80004f4 <strlen>
 80101b4:	4603      	mov	r3, r0
 80101b6:	3301      	adds	r3, #1
 80101b8:	f107 0208 	add.w	r2, r7, #8
 80101bc:	4619      	mov	r1, r3
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff ffa2 	bl	8010108 <sail_memdup>
 80101c4:	4603      	mov	r3, r0
 80101c6:	81fb      	strh	r3, [r7, #14]
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	bf14      	ite	ne
 80101ce:	2301      	movne	r3, #1
 80101d0:	2300      	moveq	r3, #0
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <sail_strdup+0x48>
 80101d8:	89fb      	ldrh	r3, [r7, #14]
 80101da:	e003      	b.n	80101e4 <sail_strdup+0x50>
    *output = ptr;
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <sail_strdup_length>:

sail_status_t sail_strdup_length(const char *input, size_t length, char **output) {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]

    if (input == NULL) {
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d104      	bne.n	8010208 <sail_strdup_length+0x1c>
        *output = NULL;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 8010204:	2300      	movs	r3, #0
 8010206:	e037      	b.n	8010278 <sail_strdup_length+0x8c>
    }

    if (length == 0) {
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10f      	bne.n	801022e <sail_strdup_length+0x42>
        SAIL_LOG_ERROR("Cannot duplicate 0 characters");
 801020e:	4b1c      	ldr	r3, [pc, #112]	; (8010280 <sail_strdup_length+0x94>)
 8010210:	2275      	movs	r2, #117	; 0x75
 8010212:	491c      	ldr	r1, [pc, #112]	; (8010284 <sail_strdup_length+0x98>)
 8010214:	2001      	movs	r0, #1
 8010216:	f7fe fcf9 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 801021a:	4b1b      	ldr	r3, [pc, #108]	; (8010288 <sail_strdup_length+0x9c>)
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	4b1b      	ldr	r3, [pc, #108]	; (801028c <sail_strdup_length+0xa0>)
 8010220:	2276      	movs	r2, #118	; 0x76
 8010222:	4918      	ldr	r1, [pc, #96]	; (8010284 <sail_strdup_length+0x98>)
 8010224:	2001      	movs	r0, #1
 8010226:	f7fe fcf1 	bl	800ec0c <sail_log>
 801022a:	2309      	movs	r3, #9
 801022c:	e024      	b.n	8010278 <sail_strdup_length+0x8c>
    }

    void *ptr;
    SAIL_TRY(sail_malloc(length+1, &ptr));
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	3301      	adds	r3, #1
 8010232:	f107 0210 	add.w	r2, r7, #16
 8010236:	4611      	mov	r1, r2
 8010238:	4618      	mov	r0, r3
 801023a:	f7fe fddf 	bl	800edfc <sail_malloc>
 801023e:	4603      	mov	r3, r0
 8010240:	82fb      	strh	r3, [r7, #22]
 8010242:	8afb      	ldrh	r3, [r7, #22]
 8010244:	2b00      	cmp	r3, #0
 8010246:	bf14      	ite	ne
 8010248:	2301      	movne	r3, #1
 801024a:	2300      	moveq	r3, #0
 801024c:	b2db      	uxtb	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d001      	beq.n	8010256 <sail_strdup_length+0x6a>
 8010252:	8afb      	ldrh	r3, [r7, #22]
 8010254:	e010      	b.n	8010278 <sail_strdup_length+0x8c>
    *output = ptr;
 8010256:	693a      	ldr	r2, [r7, #16]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	601a      	str	r2, [r3, #0]

    memcpy(*output, input, length);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	68f9      	ldr	r1, [r7, #12]
 8010264:	4618      	mov	r0, r3
 8010266:	f002 fe61 	bl	8012f2c <memcpy>
    (*output)[length] = '\0';
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	4413      	add	r3, r2
 8010272:	2200      	movs	r2, #0
 8010274:	701a      	strb	r2, [r3, #0]

    return SAIL_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3718      	adds	r7, #24
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	0801965c 	.word	0x0801965c
 8010284:	080195ec 	.word	0x080195ec
 8010288:	08019640 	.word	0x08019640
 801028c:	0801963c 	.word	0x0801963c

08010290 <sail_to_lower>:
    va_end(args);

    return SAIL_OK;
}

void sail_to_lower(char *str) {
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]

    if (str == NULL) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d025      	beq.n	80102ea <sail_to_lower+0x5a>
        return;
    }

    size_t length = strlen(str);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7f0 f928 	bl	80004f4 <strlen>
 80102a4:	6138      	str	r0, [r7, #16]

    for (size_t i = 0; i < length; i++) {
 80102a6:	2300      	movs	r3, #0
 80102a8:	617b      	str	r3, [r7, #20]
 80102aa:	e019      	b.n	80102e0 <sail_to_lower+0x50>
        str[i] = (char)tolower(str[i]);
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	4413      	add	r3, r2
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	73fb      	strb	r3, [r7, #15]
 80102b6:	7bfb      	ldrb	r3, [r7, #15]
 80102b8:	3301      	adds	r3, #1
 80102ba:	4a0e      	ldr	r2, [pc, #56]	; (80102f4 <sail_to_lower+0x64>)
 80102bc:	4413      	add	r3, r2
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	f003 0303 	and.w	r3, r3, #3
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d102      	bne.n	80102ce <sail_to_lower+0x3e>
 80102c8:	7bfb      	ldrb	r3, [r7, #15]
 80102ca:	3320      	adds	r3, #32
 80102cc:	e000      	b.n	80102d0 <sail_to_lower+0x40>
 80102ce:	7bfb      	ldrb	r3, [r7, #15]
 80102d0:	6879      	ldr	r1, [r7, #4]
 80102d2:	697a      	ldr	r2, [r7, #20]
 80102d4:	440a      	add	r2, r1
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	7013      	strb	r3, [r2, #0]
    for (size_t i = 0; i < length; i++) {
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	3301      	adds	r3, #1
 80102de:	617b      	str	r3, [r7, #20]
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d3e1      	bcc.n	80102ac <sail_to_lower+0x1c>
 80102e8:	e000      	b.n	80102ec <sail_to_lower+0x5c>
        return;
 80102ea:	bf00      	nop
    }
}
 80102ec:	3718      	adds	r7, #24
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	0801c1f2 	.word	0x0801c1f2

080102f8 <sail_string_hash>:
    *output = output_local;

    return SAIL_OK;
}

sail_status_t sail_string_hash(const char *str, uint64_t *hash) {
 80102f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102fc:	b086      	sub	sp, #24
 80102fe:	af02      	add	r7, sp, #8
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(str);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	bf0c      	ite	eq
 801030a:	2301      	moveq	r3, #1
 801030c:	2300      	movne	r3, #0
 801030e:	b2db      	uxtb	r3, r3
 8010310:	2b00      	cmp	r3, #0
 8010312:	d011      	beq.n	8010338 <sail_string_hash+0x40>
 8010314:	4b36      	ldr	r3, [pc, #216]	; (80103f0 <sail_string_hash+0xf8>)
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	4b36      	ldr	r3, [pc, #216]	; (80103f4 <sail_string_hash+0xfc>)
 801031a:	22e2      	movs	r2, #226	; 0xe2
 801031c:	4936      	ldr	r1, [pc, #216]	; (80103f8 <sail_string_hash+0x100>)
 801031e:	2001      	movs	r0, #1
 8010320:	f7fe fc74 	bl	800ec0c <sail_log>
 8010324:	4b35      	ldr	r3, [pc, #212]	; (80103fc <sail_string_hash+0x104>)
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	4b35      	ldr	r3, [pc, #212]	; (8010400 <sail_string_hash+0x108>)
 801032a:	22e2      	movs	r2, #226	; 0xe2
 801032c:	4932      	ldr	r1, [pc, #200]	; (80103f8 <sail_string_hash+0x100>)
 801032e:	2001      	movs	r0, #1
 8010330:	f7fe fc6c 	bl	800ec0c <sail_log>
 8010334:	2301      	movs	r3, #1
 8010336:	e056      	b.n	80103e6 <sail_string_hash+0xee>
    SAIL_CHECK_PTR(hash);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	bf0c      	ite	eq
 801033e:	2301      	moveq	r3, #1
 8010340:	2300      	movne	r3, #0
 8010342:	b2db      	uxtb	r3, r3
 8010344:	2b00      	cmp	r3, #0
 8010346:	d011      	beq.n	801036c <sail_string_hash+0x74>
 8010348:	4b2e      	ldr	r3, [pc, #184]	; (8010404 <sail_string_hash+0x10c>)
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	4b29      	ldr	r3, [pc, #164]	; (80103f4 <sail_string_hash+0xfc>)
 801034e:	22e3      	movs	r2, #227	; 0xe3
 8010350:	4929      	ldr	r1, [pc, #164]	; (80103f8 <sail_string_hash+0x100>)
 8010352:	2001      	movs	r0, #1
 8010354:	f7fe fc5a 	bl	800ec0c <sail_log>
 8010358:	4b28      	ldr	r3, [pc, #160]	; (80103fc <sail_string_hash+0x104>)
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4b28      	ldr	r3, [pc, #160]	; (8010400 <sail_string_hash+0x108>)
 801035e:	22e3      	movs	r2, #227	; 0xe3
 8010360:	4925      	ldr	r1, [pc, #148]	; (80103f8 <sail_string_hash+0x100>)
 8010362:	2001      	movs	r0, #1
 8010364:	f7fe fc52 	bl	800ec0c <sail_log>
 8010368:	2301      	movs	r3, #1
 801036a:	e03c      	b.n	80103e6 <sail_string_hash+0xee>

    const unsigned char *ustr = (const unsigned char *)str;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	60fb      	str	r3, [r7, #12]

    if (*ustr == '\0') {
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d109      	bne.n	801038c <sail_string_hash+0x94>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_EMPTY_STRING);
 8010378:	4b23      	ldr	r3, [pc, #140]	; (8010408 <sail_string_hash+0x110>)
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	4b20      	ldr	r3, [pc, #128]	; (8010400 <sail_string_hash+0x108>)
 801037e:	22e8      	movs	r2, #232	; 0xe8
 8010380:	491d      	ldr	r1, [pc, #116]	; (80103f8 <sail_string_hash+0x100>)
 8010382:	2001      	movs	r0, #1
 8010384:	f7fe fc42 	bl	800ec0c <sail_log>
 8010388:	2313      	movs	r3, #19
 801038a:	e02c      	b.n	80103e6 <sail_string_hash+0xee>
    }

    *hash = 5381; /* Magic number, never explained. */
 801038c:	6839      	ldr	r1, [r7, #0]
 801038e:	f241 5205 	movw	r2, #5381	; 0x1505
 8010392:	f04f 0300 	mov.w	r3, #0
 8010396:	e9c1 2300 	strd	r2, r3, [r1]
    unsigned c;

    while ((c = *ustr++) != 0) {
 801039a:	e01b      	b.n	80103d4 <sail_string_hash+0xdc>
        *hash = ((*hash << 5) + *hash) + c; /* hash * 33 + c */
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103a2:	f04f 0200 	mov.w	r2, #0
 80103a6:	f04f 0300 	mov.w	r3, #0
 80103aa:	014b      	lsls	r3, r1, #5
 80103ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80103b0:	0142      	lsls	r2, r0, #5
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103b8:	1814      	adds	r4, r2, r0
 80103ba:	eb43 0501 	adc.w	r5, r3, r1
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	2200      	movs	r2, #0
 80103c2:	4698      	mov	r8, r3
 80103c4:	4691      	mov	r9, r2
 80103c6:	eb14 0a08 	adds.w	sl, r4, r8
 80103ca:	eb45 0b09 	adc.w	fp, r5, r9
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	e9c3 ab00 	strd	sl, fp, [r3]
    while ((c = *ustr++) != 0) {
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	60fa      	str	r2, [r7, #12]
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	60bb      	str	r3, [r7, #8]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1db      	bne.n	801039c <sail_string_hash+0xa4>
    }

    return SAIL_OK;
 80103e4:	2300      	movs	r3, #0
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103f0:	08019700 	.word	0x08019700
 80103f4:	080196a8 	.word	0x080196a8
 80103f8:	080195ec 	.word	0x080195ec
 80103fc:	080196c8 	.word	0x080196c8
 8010400:	0801963c 	.word	0x0801963c
 8010404:	08019704 	.word	0x08019704
 8010408:	0801970c 	.word	0x0801970c

0801040c <sail_bits_per_pixel>:

sail_status_t sail_bits_per_pixel(enum SailPixelFormat pixel_format, unsigned *result) {
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af02      	add	r7, sp, #8
 8010412:	4603      	mov	r3, r0
 8010414:	6039      	str	r1, [r7, #0]
 8010416:	71fb      	strb	r3, [r7, #7]

    SAIL_CHECK_PTR(result);
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	bf0c      	ite	eq
 801041e:	2301      	moveq	r3, #1
 8010420:	2300      	movne	r3, #0
 8010422:	b2db      	uxtb	r3, r3
 8010424:	2b00      	cmp	r3, #0
 8010426:	d011      	beq.n	801044c <sail_bits_per_pixel+0x40>
 8010428:	4bbb      	ldr	r3, [pc, #748]	; (8010718 <sail_bits_per_pixel+0x30c>)
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	4bbb      	ldr	r3, [pc, #748]	; (801071c <sail_bits_per_pixel+0x310>)
 801042e:	22f7      	movs	r2, #247	; 0xf7
 8010430:	49bb      	ldr	r1, [pc, #748]	; (8010720 <sail_bits_per_pixel+0x314>)
 8010432:	2001      	movs	r0, #1
 8010434:	f7fe fbea 	bl	800ec0c <sail_log>
 8010438:	4bba      	ldr	r3, [pc, #744]	; (8010724 <sail_bits_per_pixel+0x318>)
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	4bba      	ldr	r3, [pc, #744]	; (8010728 <sail_bits_per_pixel+0x31c>)
 801043e:	22f7      	movs	r2, #247	; 0xf7
 8010440:	49b7      	ldr	r1, [pc, #732]	; (8010720 <sail_bits_per_pixel+0x314>)
 8010442:	2001      	movs	r0, #1
 8010444:	f7fe fbe2 	bl	800ec0c <sail_log>
 8010448:	2301      	movs	r3, #1
 801044a:	e1ad      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

    switch (pixel_format) {
 801044c:	79fb      	ldrb	r3, [r7, #7]
 801044e:	2b4a      	cmp	r3, #74	; 0x4a
 8010450:	f200 81a0 	bhi.w	8010794 <sail_bits_per_pixel+0x388>
 8010454:	a201      	add	r2, pc, #4	; (adr r2, 801045c <sail_bits_per_pixel+0x50>)
 8010456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045a:	bf00      	nop
 801045c:	08010589 	.word	0x08010589
 8010460:	0801059d 	.word	0x0801059d
 8010464:	080105a7 	.word	0x080105a7
 8010468:	080105b1 	.word	0x080105b1
 801046c:	080105bb 	.word	0x080105bb
 8010470:	080105c5 	.word	0x080105c5
 8010474:	080105cf 	.word	0x080105cf
 8010478:	080105d9 	.word	0x080105d9
 801047c:	080105e3 	.word	0x080105e3
 8010480:	080105ed 	.word	0x080105ed
 8010484:	080105f7 	.word	0x080105f7
 8010488:	08010601 	.word	0x08010601
 801048c:	0801060b 	.word	0x0801060b
 8010490:	08010615 	.word	0x08010615
 8010494:	0801061f 	.word	0x0801061f
 8010498:	08010629 	.word	0x08010629
 801049c:	08010633 	.word	0x08010633
 80104a0:	0801063d 	.word	0x0801063d
 80104a4:	08010647 	.word	0x08010647
 80104a8:	08010651 	.word	0x08010651
 80104ac:	0801065b 	.word	0x0801065b
 80104b0:	08010665 	.word	0x08010665
 80104b4:	0801066f 	.word	0x0801066f
 80104b8:	08010679 	.word	0x08010679
 80104bc:	08010683 	.word	0x08010683
 80104c0:	0801068d 	.word	0x0801068d
 80104c4:	08010697 	.word	0x08010697
 80104c8:	080106a1 	.word	0x080106a1
 80104cc:	080106a1 	.word	0x080106a1
 80104d0:	080106a1 	.word	0x080106a1
 80104d4:	080106a1 	.word	0x080106a1
 80104d8:	080106ab 	.word	0x080106ab
 80104dc:	080106ab 	.word	0x080106ab
 80104e0:	080106b5 	.word	0x080106b5
 80104e4:	080106b5 	.word	0x080106b5
 80104e8:	080106bf 	.word	0x080106bf
 80104ec:	080106bf 	.word	0x080106bf
 80104f0:	080106bf 	.word	0x080106bf
 80104f4:	080106bf 	.word	0x080106bf
 80104f8:	080106bf 	.word	0x080106bf
 80104fc:	080106bf 	.word	0x080106bf
 8010500:	080106bf 	.word	0x080106bf
 8010504:	080106bf 	.word	0x080106bf
 8010508:	080106c9 	.word	0x080106c9
 801050c:	080106c9 	.word	0x080106c9
 8010510:	080106c9 	.word	0x080106c9
 8010514:	080106c9 	.word	0x080106c9
 8010518:	080106c9 	.word	0x080106c9
 801051c:	080106c9 	.word	0x080106c9
 8010520:	080106c9 	.word	0x080106c9
 8010524:	080106c9 	.word	0x080106c9
 8010528:	080106d3 	.word	0x080106d3
 801052c:	080106d3 	.word	0x080106d3
 8010530:	080106d3 	.word	0x080106d3
 8010534:	080106d3 	.word	0x080106d3
 8010538:	080106d3 	.word	0x080106d3
 801053c:	080106d3 	.word	0x080106d3
 8010540:	080106d3 	.word	0x080106d3
 8010544:	080106d3 	.word	0x080106d3
 8010548:	080106dd 	.word	0x080106dd
 801054c:	080106e7 	.word	0x080106e7
 8010550:	080106f1 	.word	0x080106f1
 8010554:	080106fb 	.word	0x080106fb
 8010558:	08010705 	.word	0x08010705
 801055c:	0801070f 	.word	0x0801070f
 8010560:	08010731 	.word	0x08010731
 8010564:	0801073b 	.word	0x0801073b
 8010568:	08010745 	.word	0x08010745
 801056c:	0801074f 	.word	0x0801074f
 8010570:	08010759 	.word	0x08010759
 8010574:	08010763 	.word	0x08010763
 8010578:	0801076d 	.word	0x0801076d
 801057c:	08010777 	.word	0x08010777
 8010580:	08010781 	.word	0x08010781
 8010584:	0801078b 	.word	0x0801078b
        case SAIL_PIXEL_FORMAT_UNKNOWN: SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_PIXEL_FORMAT);
 8010588:	4b68      	ldr	r3, [pc, #416]	; (801072c <sail_bits_per_pixel+0x320>)
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	4b66      	ldr	r3, [pc, #408]	; (8010728 <sail_bits_per_pixel+0x31c>)
 801058e:	22fa      	movs	r2, #250	; 0xfa
 8010590:	4963      	ldr	r1, [pc, #396]	; (8010720 <sail_bits_per_pixel+0x314>)
 8010592:	2001      	movs	r0, #1
 8010594:	f7fe fb3a 	bl	800ec0c <sail_log>
 8010598:	23c9      	movs	r3, #201	; 0xc9
 801059a:	e105      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1:   *result = 1;   return SAIL_OK;
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	2201      	movs	r2, #1
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	2300      	movs	r3, #0
 80105a4:	e100      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2:   *result = 2;   return SAIL_OK;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	2202      	movs	r2, #2
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	2300      	movs	r3, #0
 80105ae:	e0fb      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4:   *result = 4;   return SAIL_OK;
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	2204      	movs	r2, #4
 80105b4:	601a      	str	r2, [r3, #0]
 80105b6:	2300      	movs	r3, #0
 80105b8:	e0f6      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8:   *result = 8;   return SAIL_OK;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	2208      	movs	r2, #8
 80105be:	601a      	str	r2, [r3, #0]
 80105c0:	2300      	movs	r3, #0
 80105c2:	e0f1      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16:  *result = 16;  return SAIL_OK;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	2210      	movs	r2, #16
 80105c8:	601a      	str	r2, [r3, #0]
 80105ca:	2300      	movs	r3, #0
 80105cc:	e0ec      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP24:  *result = 24;  return SAIL_OK;
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	2218      	movs	r2, #24
 80105d2:	601a      	str	r2, [r3, #0]
 80105d4:	2300      	movs	r3, #0
 80105d6:	e0e7      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32:  *result = 32;  return SAIL_OK;
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2220      	movs	r2, #32
 80105dc:	601a      	str	r2, [r3, #0]
 80105de:	2300      	movs	r3, #0
 80105e0:	e0e2      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48:  *result = 48;  return SAIL_OK;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2230      	movs	r2, #48	; 0x30
 80105e6:	601a      	str	r2, [r3, #0]
 80105e8:	2300      	movs	r3, #0
 80105ea:	e0dd      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64:  *result = 64;  return SAIL_OK;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2240      	movs	r2, #64	; 0x40
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	2300      	movs	r3, #0
 80105f4:	e0d8      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP72:  *result = 72;  return SAIL_OK;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	2248      	movs	r2, #72	; 0x48
 80105fa:	601a      	str	r2, [r3, #0]
 80105fc:	2300      	movs	r3, #0
 80105fe:	e0d3      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP96:  *result = 96;  return SAIL_OK;
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	2260      	movs	r2, #96	; 0x60
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	2300      	movs	r3, #0
 8010608:	e0ce      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP128: *result = 128; return SAIL_OK;
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2280      	movs	r2, #128	; 0x80
 801060e:	601a      	str	r2, [r3, #0]
 8010610:	2300      	movs	r3, #0
 8010612:	e0c9      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:  *result = 1; return SAIL_OK;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	2201      	movs	r2, #1
 8010618:	601a      	str	r2, [r3, #0]
 801061a:	2300      	movs	r3, #0
 801061c:	e0c4      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:  *result = 2; return SAIL_OK;
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	2202      	movs	r2, #2
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	2300      	movs	r3, #0
 8010626:	e0bf      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:  *result = 4; return SAIL_OK;
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	2204      	movs	r2, #4
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	2300      	movs	r3, #0
 8010630:	e0ba      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:  *result = 8; return SAIL_OK;
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	2208      	movs	r2, #8
 8010636:	601a      	str	r2, [r3, #0]
 8010638:	2300      	movs	r3, #0
 801063a:	e0b5      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED: *result = 16; return SAIL_OK;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	2210      	movs	r2, #16
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	2300      	movs	r3, #0
 8010644:	e0b0      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE:  *result = 1; return SAIL_OK;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2201      	movs	r2, #1
 801064a:	601a      	str	r2, [r3, #0]
 801064c:	2300      	movs	r3, #0
 801064e:	e0ab      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE:  *result = 2; return SAIL_OK;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	2202      	movs	r2, #2
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	2300      	movs	r3, #0
 8010658:	e0a6      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE:  *result = 4; return SAIL_OK;
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	2204      	movs	r2, #4
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	2300      	movs	r3, #0
 8010662:	e0a1      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE:  *result = 8; return SAIL_OK;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	2208      	movs	r2, #8
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	2300      	movs	r3, #0
 801066c:	e09c      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE: *result = 16; return SAIL_OK;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2210      	movs	r2, #16
 8010672:	601a      	str	r2, [r3, #0]
 8010674:	2300      	movs	r3, #0
 8010676:	e097      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA:  *result = 4; return SAIL_OK;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	2204      	movs	r2, #4
 801067c:	601a      	str	r2, [r3, #0]
 801067e:	2300      	movs	r3, #0
 8010680:	e092      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA:  *result = 8; return SAIL_OK;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	2208      	movs	r2, #8
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	2300      	movs	r3, #0
 801068a:	e08d      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA: *result = 16; return SAIL_OK;
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	2210      	movs	r2, #16
 8010690:	601a      	str	r2, [r3, #0]
 8010692:	2300      	movs	r3, #0
 8010694:	e088      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA: *result = 32; return SAIL_OK;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	2220      	movs	r2, #32
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	2300      	movs	r3, #0
 801069e:	e083      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP16_RGB555:
        case SAIL_PIXEL_FORMAT_BPP16_BGR555:
        case SAIL_PIXEL_FORMAT_BPP16_RGB565:
        case SAIL_PIXEL_FORMAT_BPP16_BGR565: *result = 16; return SAIL_OK;
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2210      	movs	r2, #16
 80106a4:	601a      	str	r2, [r3, #0]
 80106a6:	2300      	movs	r3, #0
 80106a8:	e07e      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_RGB:
        case SAIL_PIXEL_FORMAT_BPP24_BGR: *result = 24; return SAIL_OK;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	2218      	movs	r2, #24
 80106ae:	601a      	str	r2, [r3, #0]
 80106b0:	2300      	movs	r3, #0
 80106b2:	e079      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP48_RGB:
        case SAIL_PIXEL_FORMAT_BPP48_BGR: *result = 48; return SAIL_OK;
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2230      	movs	r2, #48	; 0x30
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	2300      	movs	r3, #0
 80106bc:	e074      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_XRGB:
        case SAIL_PIXEL_FORMAT_BPP16_XBGR:
        case SAIL_PIXEL_FORMAT_BPP16_RGBA:
        case SAIL_PIXEL_FORMAT_BPP16_BGRA:
        case SAIL_PIXEL_FORMAT_BPP16_ARGB:
        case SAIL_PIXEL_FORMAT_BPP16_ABGR: *result = 16; return SAIL_OK;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	2210      	movs	r2, #16
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	2300      	movs	r3, #0
 80106c6:	e06f      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32_XRGB:
        case SAIL_PIXEL_FORMAT_BPP32_XBGR:
        case SAIL_PIXEL_FORMAT_BPP32_RGBA:
        case SAIL_PIXEL_FORMAT_BPP32_BGRA:
        case SAIL_PIXEL_FORMAT_BPP32_ARGB:
        case SAIL_PIXEL_FORMAT_BPP32_ABGR: *result = 32; return SAIL_OK;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2220      	movs	r2, #32
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	2300      	movs	r3, #0
 80106d0:	e06a      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_XRGB:
        case SAIL_PIXEL_FORMAT_BPP64_XBGR:
        case SAIL_PIXEL_FORMAT_BPP64_RGBA:
        case SAIL_PIXEL_FORMAT_BPP64_BGRA:
        case SAIL_PIXEL_FORMAT_BPP64_ARGB:
        case SAIL_PIXEL_FORMAT_BPP64_ABGR: *result = 64; return SAIL_OK;
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2240      	movs	r2, #64	; 0x40
 80106d6:	601a      	str	r2, [r3, #0]
 80106d8:	2300      	movs	r3, #0
 80106da:	e065      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_CMYK: *result = 32; return SAIL_OK;
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2220      	movs	r2, #32
 80106e0:	601a      	str	r2, [r3, #0]
 80106e2:	2300      	movs	r3, #0
 80106e4:	e060      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_CMYK: *result = 64; return SAIL_OK;
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	2240      	movs	r2, #64	; 0x40
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	2300      	movs	r3, #0
 80106ee:	e05b      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_YCBCR: *result = 24; return SAIL_OK;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	2218      	movs	r2, #24
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	2300      	movs	r3, #0
 80106f8:	e056      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_YCCK: *result = 32; return SAIL_OK;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2220      	movs	r2, #32
 80106fe:	601a      	str	r2, [r3, #0]
 8010700:	2300      	movs	r3, #0
 8010702:	e051      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LAB: *result = 24; return SAIL_OK;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	2218      	movs	r2, #24
 8010708:	601a      	str	r2, [r3, #0]
 801070a:	2300      	movs	r3, #0
 801070c:	e04c      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LAB: *result = 40; return SAIL_OK;
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2228      	movs	r2, #40	; 0x28
 8010712:	601a      	str	r2, [r3, #0]
 8010714:	2300      	movs	r3, #0
 8010716:	e047      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
 8010718:	08019724 	.word	0x08019724
 801071c:	080196a8 	.word	0x080196a8
 8010720:	080195ec 	.word	0x080195ec
 8010724:	080196c8 	.word	0x080196c8
 8010728:	0801963c 	.word	0x0801963c
 801072c:	0801972c 	.word	0x0801972c

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LUV: *result = 24; return SAIL_OK;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	2218      	movs	r2, #24
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	2300      	movs	r3, #0
 8010738:	e036      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LUV: *result = 40; return SAIL_OK;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	2228      	movs	r2, #40	; 0x28
 801073e:	601a      	str	r2, [r3, #0]
 8010740:	2300      	movs	r3, #0
 8010742:	e031      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_YUV: *result = 24; return SAIL_OK;
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	2218      	movs	r2, #24
 8010748:	601a      	str	r2, [r3, #0]
 801074a:	2300      	movs	r3, #0
 801074c:	e02c      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP30_YUV: *result = 30; return SAIL_OK;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	221e      	movs	r2, #30
 8010752:	601a      	str	r2, [r3, #0]
 8010754:	2300      	movs	r3, #0
 8010756:	e027      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP36_YUV: *result = 36; return SAIL_OK;
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	2224      	movs	r2, #36	; 0x24
 801075c:	601a      	str	r2, [r3, #0]
 801075e:	2300      	movs	r3, #0
 8010760:	e022      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48_YUV: *result = 48; return SAIL_OK;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2230      	movs	r2, #48	; 0x30
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	2300      	movs	r3, #0
 801076a:	e01d      	b.n	80107a8 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_YUVA: *result = 32; return SAIL_OK;
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	2220      	movs	r2, #32
 8010770:	601a      	str	r2, [r3, #0]
 8010772:	2300      	movs	r3, #0
 8010774:	e018      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_YUVA: *result = 40; return SAIL_OK;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	2228      	movs	r2, #40	; 0x28
 801077a:	601a      	str	r2, [r3, #0]
 801077c:	2300      	movs	r3, #0
 801077e:	e013      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48_YUVA: *result = 48; return SAIL_OK;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	2230      	movs	r2, #48	; 0x30
 8010784:	601a      	str	r2, [r3, #0]
 8010786:	2300      	movs	r3, #0
 8010788:	e00e      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_YUVA: *result = 64; return SAIL_OK;
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	2240      	movs	r2, #64	; 0x40
 801078e:	601a      	str	r2, [r3, #0]
 8010790:	2300      	movs	r3, #0
 8010792:	e009      	b.n	80107a8 <sail_bits_per_pixel+0x39c>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_PIXEL_FORMAT);
 8010794:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <sail_bits_per_pixel+0x3a4>)
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <sail_bits_per_pixel+0x3a8>)
 801079a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801079e:	4906      	ldr	r1, [pc, #24]	; (80107b8 <sail_bits_per_pixel+0x3ac>)
 80107a0:	2001      	movs	r0, #1
 80107a2:	f7fe fa33 	bl	800ec0c <sail_log>
 80107a6:	23c9      	movs	r3, #201	; 0xc9
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	0801972c 	.word	0x0801972c
 80107b4:	0801963c 	.word	0x0801963c
 80107b8:	080195ec 	.word	0x080195ec

080107bc <sail_bytes_per_line>:
    SAIL_TRY(sail_compare_bits_per_pixel(pixel_format1, pixel_format2, SAIL_PIXEL_FORMAT_COMPARISON_PRIVATE_GREATER, result));

    return SAIL_OK;
}

sail_status_t sail_bytes_per_line(unsigned width, enum SailPixelFormat pixel_format, unsigned *result) {
 80107bc:	b5b0      	push	{r4, r5, r7, lr}
 80107be:	b088      	sub	sp, #32
 80107c0:	af02      	add	r7, sp, #8
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	460b      	mov	r3, r1
 80107c6:	607a      	str	r2, [r7, #4]
 80107c8:	72fb      	strb	r3, [r7, #11]

    if (width == 0) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d111      	bne.n	80107f4 <sail_bytes_per_line+0x38>
        SAIL_LOG_ERROR("Line width is 0");
 80107d0:	4b37      	ldr	r3, [pc, #220]	; (80108b0 <sail_bytes_per_line+0xf4>)
 80107d2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80107d6:	4937      	ldr	r1, [pc, #220]	; (80108b4 <sail_bytes_per_line+0xf8>)
 80107d8:	2001      	movs	r0, #1
 80107da:	f7fe fa17 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 80107de:	4b36      	ldr	r3, [pc, #216]	; (80108b8 <sail_bytes_per_line+0xfc>)
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	4b36      	ldr	r3, [pc, #216]	; (80108bc <sail_bytes_per_line+0x100>)
 80107e4:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80107e8:	4932      	ldr	r1, [pc, #200]	; (80108b4 <sail_bytes_per_line+0xf8>)
 80107ea:	2001      	movs	r0, #1
 80107ec:	f7fe fa0e 	bl	800ec0c <sail_log>
 80107f0:	2309      	movs	r3, #9
 80107f2:	e059      	b.n	80108a8 <sail_bytes_per_line+0xec>
    }

    SAIL_CHECK_PTR(result);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	bf0c      	ite	eq
 80107fa:	2301      	moveq	r3, #1
 80107fc:	2300      	movne	r3, #0
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	2b00      	cmp	r3, #0
 8010802:	d013      	beq.n	801082c <sail_bytes_per_line+0x70>
 8010804:	4b2e      	ldr	r3, [pc, #184]	; (80108c0 <sail_bytes_per_line+0x104>)
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	4b2e      	ldr	r3, [pc, #184]	; (80108c4 <sail_bytes_per_line+0x108>)
 801080a:	f240 12b1 	movw	r2, #433	; 0x1b1
 801080e:	4929      	ldr	r1, [pc, #164]	; (80108b4 <sail_bytes_per_line+0xf8>)
 8010810:	2001      	movs	r0, #1
 8010812:	f7fe f9fb 	bl	800ec0c <sail_log>
 8010816:	4b2c      	ldr	r3, [pc, #176]	; (80108c8 <sail_bytes_per_line+0x10c>)
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	4b28      	ldr	r3, [pc, #160]	; (80108bc <sail_bytes_per_line+0x100>)
 801081c:	f240 12b1 	movw	r2, #433	; 0x1b1
 8010820:	4924      	ldr	r1, [pc, #144]	; (80108b4 <sail_bytes_per_line+0xf8>)
 8010822:	2001      	movs	r0, #1
 8010824:	f7fe f9f2 	bl	800ec0c <sail_log>
 8010828:	2301      	movs	r3, #1
 801082a:	e03d      	b.n	80108a8 <sail_bytes_per_line+0xec>

    unsigned bits_per_pixel;
    SAIL_TRY(sail_bits_per_pixel(pixel_format, &bits_per_pixel));
 801082c:	f107 0210 	add.w	r2, r7, #16
 8010830:	7afb      	ldrb	r3, [r7, #11]
 8010832:	4611      	mov	r1, r2
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fde9 	bl	801040c <sail_bits_per_pixel>
 801083a:	4603      	mov	r3, r0
 801083c:	82fb      	strh	r3, [r7, #22]
 801083e:	8afb      	ldrh	r3, [r7, #22]
 8010840:	2b00      	cmp	r3, #0
 8010842:	bf14      	ite	ne
 8010844:	2301      	movne	r3, #1
 8010846:	2300      	moveq	r3, #0
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <sail_bytes_per_line+0x96>
 801084e:	8afb      	ldrh	r3, [r7, #22]
 8010850:	e02a      	b.n	80108a8 <sail_bytes_per_line+0xec>

    *result = (unsigned)(((double)width * bits_per_pixel + 7) / 8);
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f7ef ff98 	bl	8000788 <__aeabi_ui2d>
 8010858:	4604      	mov	r4, r0
 801085a:	460d      	mov	r5, r1
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	4618      	mov	r0, r3
 8010860:	f7ef ff92 	bl	8000788 <__aeabi_ui2d>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	4620      	mov	r0, r4
 801086a:	4629      	mov	r1, r5
 801086c:	f7f0 f806 	bl	800087c <__aeabi_dmul>
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	4610      	mov	r0, r2
 8010876:	4619      	mov	r1, r3
 8010878:	f04f 0200 	mov.w	r2, #0
 801087c:	4b13      	ldr	r3, [pc, #76]	; (80108cc <sail_bytes_per_line+0x110>)
 801087e:	f7ef fe47 	bl	8000510 <__adddf3>
 8010882:	4602      	mov	r2, r0
 8010884:	460b      	mov	r3, r1
 8010886:	4610      	mov	r0, r2
 8010888:	4619      	mov	r1, r3
 801088a:	f04f 0200 	mov.w	r2, #0
 801088e:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <sail_bytes_per_line+0x114>)
 8010890:	f7f0 f91e 	bl	8000ad0 <__aeabi_ddiv>
 8010894:	4602      	mov	r2, r0
 8010896:	460b      	mov	r3, r1
 8010898:	4610      	mov	r0, r2
 801089a:	4619      	mov	r1, r3
 801089c:	f7f0 fa88 	bl	8000db0 <__aeabi_d2uiz>
 80108a0:	4602      	mov	r2, r0
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3718      	adds	r7, #24
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bdb0      	pop	{r4, r5, r7, pc}
 80108b0:	08019750 	.word	0x08019750
 80108b4:	080195ec 	.word	0x080195ec
 80108b8:	08019640 	.word	0x08019640
 80108bc:	0801963c 	.word	0x0801963c
 80108c0:	08019724 	.word	0x08019724
 80108c4:	080196a8 	.word	0x080196a8
 80108c8:	080196c8 	.word	0x080196c8
 80108cc:	401c0000 	.word	0x401c0000
 80108d0:	40200000 	.word	0x40200000

080108d4 <sail_is_indexed>:

bool sail_is_indexed(enum SailPixelFormat pixel_format) {
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	71fb      	strb	r3, [r7, #7]

    switch (pixel_format) {
 80108de:	79fb      	ldrb	r3, [r7, #7]
 80108e0:	3b0d      	subs	r3, #13
 80108e2:	2b04      	cmp	r3, #4
 80108e4:	d801      	bhi.n	80108ea <sail_is_indexed+0x16>
        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED: {
            return true;
 80108e6:	2301      	movs	r3, #1
 80108e8:	e000      	b.n	80108ec <sail_is_indexed+0x18>
        }
        default: {
            return false;
 80108ea:	2300      	movs	r3, #0
        }
    }
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <sail_print_errno>:
            return false;
        }
    }
}

sail_status_t sail_print_errno(const char *format) {
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af02      	add	r7, sp, #8
 80108fe:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(format);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	bf0c      	ite	eq
 8010906:	2301      	moveq	r3, #1
 8010908:	2300      	movne	r3, #0
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	d013      	beq.n	8010938 <sail_print_errno+0x40>
 8010910:	4b20      	ldr	r3, [pc, #128]	; (8010994 <sail_print_errno+0x9c>)
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	4b20      	ldr	r3, [pc, #128]	; (8010998 <sail_print_errno+0xa0>)
 8010916:	f44f 7202 	mov.w	r2, #520	; 0x208
 801091a:	4920      	ldr	r1, [pc, #128]	; (801099c <sail_print_errno+0xa4>)
 801091c:	2001      	movs	r0, #1
 801091e:	f7fe f975 	bl	800ec0c <sail_log>
 8010922:	4b1f      	ldr	r3, [pc, #124]	; (80109a0 <sail_print_errno+0xa8>)
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	4b1f      	ldr	r3, [pc, #124]	; (80109a4 <sail_print_errno+0xac>)
 8010928:	f44f 7202 	mov.w	r2, #520	; 0x208
 801092c:	491b      	ldr	r1, [pc, #108]	; (801099c <sail_print_errno+0xa4>)
 801092e:	2001      	movs	r0, #1
 8010930:	f7fe f96c 	bl	800ec0c <sail_log>
 8010934:	2301      	movs	r3, #1
 8010936:	e029      	b.n	801098c <sail_print_errno+0x94>

    if (strstr(format, "%s") == NULL) {
 8010938:	491a      	ldr	r1, [pc, #104]	; (80109a4 <sail_print_errno+0xac>)
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f003 fbb9 	bl	80140b2 <strstr>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d111      	bne.n	801096a <sail_print_errno+0x72>
        SAIL_LOG_ERROR("Format argument must contain %%s");
 8010946:	4b18      	ldr	r3, [pc, #96]	; (80109a8 <sail_print_errno+0xb0>)
 8010948:	f240 220b 	movw	r2, #523	; 0x20b
 801094c:	4913      	ldr	r1, [pc, #76]	; (801099c <sail_print_errno+0xa4>)
 801094e:	2001      	movs	r0, #1
 8010950:	f7fe f95c 	bl	800ec0c <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 8010954:	4b15      	ldr	r3, [pc, #84]	; (80109ac <sail_print_errno+0xb4>)
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	4b12      	ldr	r3, [pc, #72]	; (80109a4 <sail_print_errno+0xac>)
 801095a:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801095e:	490f      	ldr	r1, [pc, #60]	; (801099c <sail_print_errno+0xa4>)
 8010960:	2001      	movs	r0, #1
 8010962:	f7fe f953 	bl	800ec0c <sail_log>
 8010966:	2309      	movs	r3, #9
 8010968:	e010      	b.n	801098c <sail_print_errno+0x94>
#ifdef _MSC_VER
    char buffer[80];
    strerror_s(buffer, sizeof(buffer), errno);
    SAIL_LOG_ERROR(format, buffer);
#else
    SAIL_LOG_ERROR(format, strerror(errno));
 801096a:	f001 ffb5 	bl	80128d8 <__errno>
 801096e:	4603      	mov	r3, r0
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4618      	mov	r0, r3
 8010974:	f003 fb5c 	bl	8014030 <strerror>
 8010978:	4603      	mov	r3, r0
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f44f 7205 	mov.w	r2, #532	; 0x214
 8010982:	4906      	ldr	r1, [pc, #24]	; (801099c <sail_print_errno+0xa4>)
 8010984:	2001      	movs	r0, #1
 8010986:	f7fe f941 	bl	800ec0c <sail_log>
#endif

    return SAIL_OK;
 801098a:	2300      	movs	r3, #0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	08019760 	.word	0x08019760
 8010998:	080196a8 	.word	0x080196a8
 801099c:	080195ec 	.word	0x080195ec
 80109a0:	080196c8 	.word	0x080196c8
 80109a4:	0801963c 	.word	0x0801963c
 80109a8:	08019768 	.word	0x08019768
 80109ac:	08019640 	.word	0x08019640

080109b0 <sail_now>:

uint64_t sail_now(void) {
 80109b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109b4:	b088      	sub	sp, #32
 80109b6:	af00      	add	r7, sp, #0

    return (uint64_t)((double)li.QuadPart / frequency);
#else
    struct timeval tv;

    if (gettimeofday(&tv, NULL) != 0) {
 80109b8:	f107 0310 	add.w	r3, r7, #16
 80109bc:	2100      	movs	r1, #0
 80109be:	4618      	mov	r0, r3
 80109c0:	f004 fa4a 	bl	8014e58 <gettimeofday>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d009      	beq.n	80109de <sail_now+0x2e>
        sail_print_errno("Failed to get the current time: %s");
 80109ca:	482b      	ldr	r0, [pc, #172]	; (8010a78 <sail_now+0xc8>)
 80109cc:	f7ff ff94 	bl	80108f8 <sail_print_errno>
        return 0;
 80109d0:	f04f 0300 	mov.w	r3, #0
 80109d4:	f04f 0400 	mov.w	r4, #0
 80109d8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80109dc:	e043      	b.n	8010a66 <sail_now+0xb6>
    }

    return (uint64_t)tv.tv_sec * 1000 + (uint64_t)tv.tv_usec / 1000;
 80109de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80109e2:	4610      	mov	r0, r2
 80109e4:	4619      	mov	r1, r3
 80109e6:	4602      	mov	r2, r0
 80109e8:	460b      	mov	r3, r1
 80109ea:	f04f 0a00 	mov.w	sl, #0
 80109ee:	f04f 0b00 	mov.w	fp, #0
 80109f2:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80109f6:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80109fa:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80109fe:	4652      	mov	r2, sl
 8010a00:	465b      	mov	r3, fp
 8010a02:	1a14      	subs	r4, r2, r0
 8010a04:	eb63 0501 	sbc.w	r5, r3, r1
 8010a08:	f04f 0200 	mov.w	r2, #0
 8010a0c:	f04f 0300 	mov.w	r3, #0
 8010a10:	00ab      	lsls	r3, r5, #2
 8010a12:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010a16:	00a2      	lsls	r2, r4, #2
 8010a18:	4614      	mov	r4, r2
 8010a1a:	461d      	mov	r5, r3
 8010a1c:	eb14 0800 	adds.w	r8, r4, r0
 8010a20:	eb45 0901 	adc.w	r9, r5, r1
 8010a24:	f04f 0200 	mov.w	r2, #0
 8010a28:	f04f 0300 	mov.w	r3, #0
 8010a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010a38:	4690      	mov	r8, r2
 8010a3a:	4699      	mov	r9, r3
 8010a3c:	4644      	mov	r4, r8
 8010a3e:	464d      	mov	r5, r9
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	17da      	asrs	r2, r3, #31
 8010a44:	603b      	str	r3, [r7, #0]
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010a4c:	f04f 0300 	mov.w	r3, #0
 8010a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010a54:	f7f0 f9cc 	bl	8000df0 <__aeabi_uldivmod>
 8010a58:	4602      	mov	r2, r0
 8010a5a:	460b      	mov	r3, r1
 8010a5c:	18a1      	adds	r1, r4, r2
 8010a5e:	60b9      	str	r1, [r7, #8]
 8010a60:	eb45 0303 	adc.w	r3, r5, r3
 8010a64:	60fb      	str	r3, [r7, #12]
#endif
}
 8010a66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a6a:	4610      	mov	r0, r2
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	3720      	adds	r7, #32
 8010a70:	46bd      	mov	sp, r7
 8010a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a76:	bf00      	nop
 8010a78:	0801978c 	.word	0x0801978c

08010a7c <set_variant_value>:
#include "sail-common.h"

/*
 * Private functions.
 */
static sail_status_t set_variant_value(struct sail_variant *variant, enum SailVariantType type, const void *value, const size_t size) {
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af02      	add	r7, sp, #8
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	607a      	str	r2, [r7, #4]
 8010a86:	603b      	str	r3, [r7, #0]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	72fb      	strb	r3, [r7, #11]

    SAIL_CHECK_PTR(variant);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	bf0c      	ite	eq
 8010a92:	2301      	moveq	r3, #1
 8010a94:	2300      	movne	r3, #0
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d011      	beq.n	8010ac0 <set_variant_value+0x44>
 8010a9c:	4b1b      	ldr	r3, [pc, #108]	; (8010b0c <set_variant_value+0x90>)
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	4b1b      	ldr	r3, [pc, #108]	; (8010b10 <set_variant_value+0x94>)
 8010aa2:	2223      	movs	r2, #35	; 0x23
 8010aa4:	491b      	ldr	r1, [pc, #108]	; (8010b14 <set_variant_value+0x98>)
 8010aa6:	2001      	movs	r0, #1
 8010aa8:	f7fe f8b0 	bl	800ec0c <sail_log>
 8010aac:	4b1a      	ldr	r3, [pc, #104]	; (8010b18 <set_variant_value+0x9c>)
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	4b1a      	ldr	r3, [pc, #104]	; (8010b1c <set_variant_value+0xa0>)
 8010ab2:	2223      	movs	r2, #35	; 0x23
 8010ab4:	4917      	ldr	r1, [pc, #92]	; (8010b14 <set_variant_value+0x98>)
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	f7fe f8a8 	bl	800ec0c <sail_log>
 8010abc:	2301      	movs	r3, #1
 8010abe:	e020      	b.n	8010b02 <set_variant_value+0x86>

    void **ptr = &variant->value;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	617b      	str	r3, [r7, #20]
    SAIL_TRY(sail_realloc(size, ptr));
 8010ac6:	6979      	ldr	r1, [r7, #20]
 8010ac8:	6838      	ldr	r0, [r7, #0]
 8010aca:	f7fe f9d7 	bl	800ee7c <sail_realloc>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	827b      	strh	r3, [r7, #18]
 8010ad2:	8a7b      	ldrh	r3, [r7, #18]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	bf14      	ite	ne
 8010ad8:	2301      	movne	r3, #1
 8010ada:	2300      	moveq	r3, #0
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d001      	beq.n	8010ae6 <set_variant_value+0x6a>
 8010ae2:	8a7b      	ldrh	r3, [r7, #18]
 8010ae4:	e00d      	b.n	8010b02 <set_variant_value+0x86>
    memcpy(variant->value, value, size);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	6879      	ldr	r1, [r7, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f002 fa1c 	bl	8012f2c <memcpy>

    variant->type = type;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	7afa      	ldrb	r2, [r7, #11]
 8010af8:	701a      	strb	r2, [r3, #0]
    variant->size = size;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3718      	adds	r7, #24
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	08019898 	.word	0x08019898
 8010b10:	0801982c 	.word	0x0801982c
 8010b14:	08019844 	.word	0x08019844
 8010b18:	080198a4 	.word	0x080198a4
 8010b1c:	080198a0 	.word	0x080198a0

08010b20 <alloc_variant>:

static sail_status_t alloc_variant(enum SailVariantType type, const void *value, const size_t size, struct sail_variant **variant) {
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af02      	add	r7, sp, #8
 8010b26:	60b9      	str	r1, [r7, #8]
 8010b28:	607a      	str	r2, [r7, #4]
 8010b2a:	603b      	str	r3, [r7, #0]
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73fb      	strb	r3, [r7, #15]

    SAIL_CHECK_PTR(variant);
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	bf0c      	ite	eq
 8010b36:	2301      	moveq	r3, #1
 8010b38:	2300      	movne	r3, #0
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d011      	beq.n	8010b64 <alloc_variant+0x44>
 8010b40:	4b20      	ldr	r3, [pc, #128]	; (8010bc4 <alloc_variant+0xa4>)
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	4b20      	ldr	r3, [pc, #128]	; (8010bc8 <alloc_variant+0xa8>)
 8010b46:	2231      	movs	r2, #49	; 0x31
 8010b48:	4920      	ldr	r1, [pc, #128]	; (8010bcc <alloc_variant+0xac>)
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	f7fe f85e 	bl	800ec0c <sail_log>
 8010b50:	4b1f      	ldr	r3, [pc, #124]	; (8010bd0 <alloc_variant+0xb0>)
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	4b1f      	ldr	r3, [pc, #124]	; (8010bd4 <alloc_variant+0xb4>)
 8010b56:	2231      	movs	r2, #49	; 0x31
 8010b58:	491c      	ldr	r1, [pc, #112]	; (8010bcc <alloc_variant+0xac>)
 8010b5a:	2001      	movs	r0, #1
 8010b5c:	f7fe f856 	bl	800ec0c <sail_log>
 8010b60:	2301      	movs	r3, #1
 8010b62:	e02a      	b.n	8010bba <alloc_variant+0x9a>

    struct sail_variant *variant_local;
    SAIL_TRY(sail_alloc_variant(&variant_local));
 8010b64:	f107 0310 	add.w	r3, r7, #16
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 f835 	bl	8010bd8 <sail_alloc_variant>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	82fb      	strh	r3, [r7, #22]
 8010b72:	8afb      	ldrh	r3, [r7, #22]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	bf14      	ite	ne
 8010b78:	2301      	movne	r3, #1
 8010b7a:	2300      	moveq	r3, #0
 8010b7c:	b2db      	uxtb	r3, r3
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <alloc_variant+0x66>
 8010b82:	8afb      	ldrh	r3, [r7, #22]
 8010b84:	e019      	b.n	8010bba <alloc_variant+0x9a>

    SAIL_TRY_OR_CLEANUP(set_variant_value(variant_local, type, value, size),
 8010b86:	6938      	ldr	r0, [r7, #16]
 8010b88:	7bf9      	ldrb	r1, [r7, #15]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	f7ff ff75 	bl	8010a7c <set_variant_value>
 8010b92:	4603      	mov	r3, r0
 8010b94:	82bb      	strh	r3, [r7, #20]
 8010b96:	8abb      	ldrh	r3, [r7, #20]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	bf14      	ite	ne
 8010b9c:	2301      	movne	r3, #1
 8010b9e:	2300      	moveq	r3, #0
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d005      	beq.n	8010bb2 <alloc_variant+0x92>
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f000 f863 	bl	8010c74 <sail_destroy_variant>
 8010bae:	8abb      	ldrh	r3, [r7, #20]
 8010bb0:	e003      	b.n	8010bba <alloc_variant+0x9a>
                        /* on error */ sail_destroy_variant(variant_local));

    *variant = variant_local;
 8010bb2:	693a      	ldr	r2, [r7, #16]
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3718      	adds	r7, #24
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	08019898 	.word	0x08019898
 8010bc8:	0801982c 	.word	0x0801982c
 8010bcc:	08019844 	.word	0x08019844
 8010bd0:	080198a4 	.word	0x080198a4
 8010bd4:	080198a0 	.word	0x080198a0

08010bd8 <sail_alloc_variant>:

/*
 * Public functions.
 */
sail_status_t sail_alloc_variant(struct sail_variant **variant) {
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af02      	add	r7, sp, #8
 8010bde:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(variant);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	bf0c      	ite	eq
 8010be6:	2301      	moveq	r3, #1
 8010be8:	2300      	movne	r3, #0
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d011      	beq.n	8010c14 <sail_alloc_variant+0x3c>
 8010bf0:	4b1b      	ldr	r3, [pc, #108]	; (8010c60 <sail_alloc_variant+0x88>)
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	4b1b      	ldr	r3, [pc, #108]	; (8010c64 <sail_alloc_variant+0x8c>)
 8010bf6:	2243      	movs	r2, #67	; 0x43
 8010bf8:	491b      	ldr	r1, [pc, #108]	; (8010c68 <sail_alloc_variant+0x90>)
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	f7fe f806 	bl	800ec0c <sail_log>
 8010c00:	4b1a      	ldr	r3, [pc, #104]	; (8010c6c <sail_alloc_variant+0x94>)
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	4b1a      	ldr	r3, [pc, #104]	; (8010c70 <sail_alloc_variant+0x98>)
 8010c06:	2243      	movs	r2, #67	; 0x43
 8010c08:	4917      	ldr	r1, [pc, #92]	; (8010c68 <sail_alloc_variant+0x90>)
 8010c0a:	2001      	movs	r0, #1
 8010c0c:	f7fd fffe 	bl	800ec0c <sail_log>
 8010c10:	2301      	movs	r3, #1
 8010c12:	e021      	b.n	8010c58 <sail_alloc_variant+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_variant), &ptr));
 8010c14:	f107 0308 	add.w	r3, r7, #8
 8010c18:	4619      	mov	r1, r3
 8010c1a:	200c      	movs	r0, #12
 8010c1c:	f7fe f8ee 	bl	800edfc <sail_malloc>
 8010c20:	4603      	mov	r3, r0
 8010c22:	81fb      	strh	r3, [r7, #14]
 8010c24:	89fb      	ldrh	r3, [r7, #14]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	bf14      	ite	ne
 8010c2a:	2301      	movne	r3, #1
 8010c2c:	2300      	moveq	r3, #0
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d001      	beq.n	8010c38 <sail_alloc_variant+0x60>
 8010c34:	89fb      	ldrh	r3, [r7, #14]
 8010c36:	e00f      	b.n	8010c58 <sail_alloc_variant+0x80>
    *variant = ptr;
 8010c38:	68ba      	ldr	r2, [r7, #8]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]

    (*variant)->type  = SAIL_VARIANT_TYPE_INVALID;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	220d      	movs	r2, #13
 8010c44:	701a      	strb	r2, [r3, #0]
    (*variant)->value = NULL;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	605a      	str	r2, [r3, #4]
    (*variant)->size  = 0;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2200      	movs	r2, #0
 8010c54:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 8010c56:	2300      	movs	r3, #0
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3710      	adds	r7, #16
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	08019898 	.word	0x08019898
 8010c64:	0801982c 	.word	0x0801982c
 8010c68:	08019844 	.word	0x08019844
 8010c6c:	080198a4 	.word	0x080198a4
 8010c70:	080198a0 	.word	0x080198a0

08010c74 <sail_destroy_variant>:

void sail_destroy_variant(struct sail_variant *variant) {
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]

    if (variant == NULL) {
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d008      	beq.n	8010c94 <sail_destroy_variant+0x20>
        return;
    }

    sail_free(variant->value);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fe f940 	bl	800ef0c <sail_free>
    sail_free(variant);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7fe f93d 	bl	800ef0c <sail_free>
 8010c92:	e000      	b.n	8010c96 <sail_destroy_variant+0x22>
        return;
 8010c94:	bf00      	nop
}
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <sail_copy_variant>:
    }

    return SAIL_OK;
}

sail_status_t sail_copy_variant(const struct sail_variant *source, struct sail_variant **target) {
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af02      	add	r7, sp, #8
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	bf0c      	ite	eq
 8010cac:	2301      	moveq	r3, #1
 8010cae:	2300      	movne	r3, #0
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d013      	beq.n	8010cde <sail_copy_variant+0x42>
 8010cb6:	4b25      	ldr	r3, [pc, #148]	; (8010d4c <sail_copy_variant+0xb0>)
 8010cb8:	9300      	str	r3, [sp, #0]
 8010cba:	4b25      	ldr	r3, [pc, #148]	; (8010d50 <sail_copy_variant+0xb4>)
 8010cbc:	f240 1227 	movw	r2, #295	; 0x127
 8010cc0:	4924      	ldr	r1, [pc, #144]	; (8010d54 <sail_copy_variant+0xb8>)
 8010cc2:	2001      	movs	r0, #1
 8010cc4:	f7fd ffa2 	bl	800ec0c <sail_log>
 8010cc8:	4b23      	ldr	r3, [pc, #140]	; (8010d58 <sail_copy_variant+0xbc>)
 8010cca:	9300      	str	r3, [sp, #0]
 8010ccc:	4b23      	ldr	r3, [pc, #140]	; (8010d5c <sail_copy_variant+0xc0>)
 8010cce:	f240 1227 	movw	r2, #295	; 0x127
 8010cd2:	4920      	ldr	r1, [pc, #128]	; (8010d54 <sail_copy_variant+0xb8>)
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	f7fd ff99 	bl	800ec0c <sail_log>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e031      	b.n	8010d42 <sail_copy_variant+0xa6>
    SAIL_CHECK_PTR(target);
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bf0c      	ite	eq
 8010ce4:	2301      	moveq	r3, #1
 8010ce6:	2300      	movne	r3, #0
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d013      	beq.n	8010d16 <sail_copy_variant+0x7a>
 8010cee:	4b1c      	ldr	r3, [pc, #112]	; (8010d60 <sail_copy_variant+0xc4>)
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	4b17      	ldr	r3, [pc, #92]	; (8010d50 <sail_copy_variant+0xb4>)
 8010cf4:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010cf8:	4916      	ldr	r1, [pc, #88]	; (8010d54 <sail_copy_variant+0xb8>)
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	f7fd ff86 	bl	800ec0c <sail_log>
 8010d00:	4b15      	ldr	r3, [pc, #84]	; (8010d58 <sail_copy_variant+0xbc>)
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <sail_copy_variant+0xc0>)
 8010d06:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010d0a:	4912      	ldr	r1, [pc, #72]	; (8010d54 <sail_copy_variant+0xb8>)
 8010d0c:	2001      	movs	r0, #1
 8010d0e:	f7fd ff7d 	bl	800ec0c <sail_log>
 8010d12:	2301      	movs	r3, #1
 8010d14:	e015      	b.n	8010d42 <sail_copy_variant+0xa6>

    SAIL_TRY(alloc_variant(source->type, source->value, source->size, target));
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	7818      	ldrb	r0, [r3, #0]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6859      	ldr	r1, [r3, #4]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	689a      	ldr	r2, [r3, #8]
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	f7ff fefc 	bl	8010b20 <alloc_variant>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	81fb      	strh	r3, [r7, #14]
 8010d2c:	89fb      	ldrh	r3, [r7, #14]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	bf14      	ite	ne
 8010d32:	2301      	movne	r3, #1
 8010d34:	2300      	moveq	r3, #0
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d001      	beq.n	8010d40 <sail_copy_variant+0xa4>
 8010d3c:	89fb      	ldrh	r3, [r7, #14]
 8010d3e:	e000      	b.n	8010d42 <sail_copy_variant+0xa6>

    return SAIL_OK;
 8010d40:	2300      	movs	r3, #0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	080198d4 	.word	0x080198d4
 8010d50:	0801982c 	.word	0x0801982c
 8010d54:	08019844 	.word	0x08019844
 8010d58:	080198a4 	.word	0x080198a4
 8010d5c:	080198a0 	.word	0x080198a0
 8010d60:	080198dc 	.word	0x080198dc

08010d64 <sail_destroy_variant_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_destroy_variant));

    return SAIL_OK;
}

void sail_destroy_variant_node_chain(struct sail_variant_node *node) {
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 8010d6c:	4903      	ldr	r1, [pc, #12]	; (8010d7c <sail_destroy_variant_node_chain+0x18>)
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7fd fd0e 	bl	800e790 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_destroy_variant);
}
 8010d74:	bf00      	nop
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	08010c75 	.word	0x08010c75

08010d80 <sail_copy_variant_node_chain>:

sail_status_t sail_copy_variant_node_chain(const struct sail_variant_node *source, struct sail_variant_node **target) {
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]

    SAIL_TRY(sail_private_copy_linked_list_node_chain((const struct linked_list_node *)source,
 8010d8a:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <sail_copy_variant_node_chain+0x38>)
 8010d8c:	4a0b      	ldr	r2, [pc, #44]	; (8010dbc <sail_copy_variant_node_chain+0x3c>)
 8010d8e:	6839      	ldr	r1, [r7, #0]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7fd fd15 	bl	800e7c0 <sail_private_copy_linked_list_node_chain>
 8010d96:	4603      	mov	r3, r0
 8010d98:	81fb      	strh	r3, [r7, #14]
 8010d9a:	89fb      	ldrh	r3, [r7, #14]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	bf14      	ite	ne
 8010da0:	2301      	movne	r3, #1
 8010da2:	2300      	moveq	r3, #0
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d001      	beq.n	8010dae <sail_copy_variant_node_chain+0x2e>
 8010daa:	89fb      	ldrh	r3, [r7, #14]
 8010dac:	e000      	b.n	8010db0 <sail_copy_variant_node_chain+0x30>
                                                      (struct linked_list_node **)target,
                                                      (linked_list_value_copier_t)sail_copy_variant,
                                                      (linked_list_value_deallocator_t)&sail_destroy_variant));

    return SAIL_OK;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3710      	adds	r7, #16
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	08010c75 	.word	0x08010c75
 8010dbc:	08010c9d 	.word	0x08010c9d

08010dc0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b096      	sub	sp, #88	; 0x58
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
 8010dcc:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3303      	adds	r3, #3
 8010dd2:	f023 0303 	bic.w	r3, r3, #3
 8010dd6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8010ddc:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8010dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8010de0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8010de2:	b672      	cpsid	i
#endif
    return(int_posture);
 8010de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8010de6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010de8:	4b55      	ldr	r3, [pc, #340]	; (8010f40 <_tx_byte_allocate+0x180>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8010dee:	2300      	movs	r3, #0
 8010df0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010df6:	621a      	str	r2, [r3, #32]
 8010df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	f383 8810 	msr	PRIMASK, r3
}
 8010e02:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8010e04:	6879      	ldr	r1, [r7, #4]
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f000 f9b2 	bl	8011170 <_tx_byte_pool_search>
 8010e0c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8010e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8010e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8010e16:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e18:	b672      	cpsid	i
    return(int_posture);
 8010e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8010e1c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8010e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8010e24:	2301      	movs	r3, #1
 8010e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e28:	e006      	b.n	8010e38 <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6a1b      	ldr	r3, [r3, #32]
 8010e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d101      	bne.n	8010e38 <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8010e34:	2301      	movs	r3, #1
 8010e36:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8010e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0d9      	beq.n	8010df2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e42:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8010e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d008      	beq.n	8010e5c <_tx_byte_allocate+0x9c>
 8010e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e4c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e4e:	6a3b      	ldr	r3, [r7, #32]
 8010e50:	f383 8810 	msr	PRIMASK, r3
}
 8010e54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8010e56:	2300      	movs	r3, #0
 8010e58:	653b      	str	r3, [r7, #80]	; 0x50
 8010e5a:	e06c      	b.n	8010f36 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d061      	beq.n	8010f26 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010e62:	4b38      	ldr	r3, [pc, #224]	; (8010f44 <_tx_byte_allocate+0x184>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d007      	beq.n	8010e7a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8010e6a:	2310      	movs	r3, #16
 8010e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8010e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e70:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	f383 8810 	msr	PRIMASK, r3
}
 8010e78:	e05d      	b.n	8010f36 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8010e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e7c:	4a32      	ldr	r2, [pc, #200]	; (8010f48 <_tx_byte_allocate+0x188>)
 8010e7e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8010e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8010e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8010e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ea4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8010eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d109      	bne.n	8010eca <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eba:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ec0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ec6:	675a      	str	r2, [r3, #116]	; 0x74
 8010ec8:	e011      	b.n	8010eee <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ece:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ed4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eda:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ee0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ee6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eec:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8010eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ef0:	2209      	movs	r2, #9
 8010ef2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010f00:	4b10      	ldr	r3, [pc, #64]	; (8010f44 <_tx_byte_allocate+0x184>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	3301      	adds	r3, #1
 8010f06:	4a0f      	ldr	r2, [pc, #60]	; (8010f44 <_tx_byte_allocate+0x184>)
 8010f08:	6013      	str	r3, [r2, #0]
 8010f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f0c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	f383 8810 	msr	PRIMASK, r3
}
 8010f14:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010f16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010f18:	f000 fdfa 	bl	8011b10 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f22:	653b      	str	r3, [r7, #80]	; 0x50
 8010f24:	e007      	b.n	8010f36 <_tx_byte_allocate+0x176>
 8010f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f28:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f383 8810 	msr	PRIMASK, r3
}
 8010f30:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8010f32:	2310      	movs	r3, #16
 8010f34:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8010f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3758      	adds	r7, #88	; 0x58
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20003864 	.word	0x20003864
 8010f44:	20003900 	.word	0x20003900
 8010f48:	08010f4d 	.word	0x08010f4d

08010f4c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b08e      	sub	sp, #56	; 0x38
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f56:	f3ef 8310 	mrs	r3, PRIMASK
 8010f5a:	623b      	str	r3, [r7, #32]
    return(posture);
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010f5e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f60:	b672      	cpsid	i
    return(int_posture);
 8010f62:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8010f64:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f6a:	4a33      	ldr	r2, [pc, #204]	; (8011038 <_tx_byte_pool_cleanup+0xec>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d158      	bne.n	8011022 <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d152      	bne.n	8011022 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f80:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8010f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d04c      	beq.n	8011022 <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8010f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	4a2b      	ldr	r2, [pc, #172]	; (801103c <_tx_byte_pool_cleanup+0xf0>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d147      	bne.n	8011022 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8010f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d043      	beq.n	8011022 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8010fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fa4:	1e5a      	subs	r2, r3, #1
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fae:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d103      	bne.n	8010fbe <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8010fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb8:	2200      	movs	r2, #0
 8010fba:	625a      	str	r2, [r3, #36]	; 0x24
 8010fbc:	e013      	b.n	8010fe6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fc2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fc8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fce:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fd4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d102      	bne.n	8010fe6 <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fe4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fea:	2b09      	cmp	r3, #9
 8010fec:	d119      	bne.n	8011022 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2210      	movs	r2, #16
 8010ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010ff6:	4b12      	ldr	r3, [pc, #72]	; (8011040 <_tx_byte_pool_cleanup+0xf4>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	4a10      	ldr	r2, [pc, #64]	; (8011040 <_tx_byte_pool_cleanup+0xf4>)
 8010ffe:	6013      	str	r3, [r2, #0]
 8011000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011002:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	f383 8810 	msr	PRIMASK, r3
}
 801100a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 fc6b 	bl	80118e8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011012:	f3ef 8310 	mrs	r3, PRIMASK
 8011016:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011018:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801101a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801101c:	b672      	cpsid	i
    return(int_posture);
 801101e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011020:	637b      	str	r3, [r7, #52]	; 0x34
 8011022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011024:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f383 8810 	msr	PRIMASK, r3
}
 801102c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801102e:	bf00      	nop
 8011030:	3738      	adds	r7, #56	; 0x38
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	08010f4d 	.word	0x08010f4d
 801103c:	42595445 	.word	0x42595445
 8011040:	20003900 	.word	0x20003900

08011044 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b08e      	sub	sp, #56	; 0x38
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8011052:	2234      	movs	r2, #52	; 0x34
 8011054:	2100      	movs	r1, #0
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f001 ff76 	bl	8012f48 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	f023 0303 	bic.w	r3, r3, #3
 8011062:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	68ba      	ldr	r2, [r7, #8]
 8011068:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	683a      	ldr	r2, [r7, #0]
 8011074:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	f1a3 0208 	sub.w	r2, r3, #8
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2202      	movs	r2, #2
 8011090:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8011096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	4413      	add	r3, r2
 801109c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a0:	3b04      	subs	r3, #4
 80110a2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80110a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80110ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80110b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b4:	3b04      	subs	r3, #4
 80110b6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80110b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80110bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110ce:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80110d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d6:	3304      	adds	r3, #4
 80110d8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80110da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110dc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	4a1f      	ldr	r2, [pc, #124]	; (8011160 <_tx_byte_pool_create+0x11c>)
 80110e2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2200      	movs	r2, #0
 80110e8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110ea:	f3ef 8310 	mrs	r3, PRIMASK
 80110ee:	61bb      	str	r3, [r7, #24]
    return(posture);
 80110f0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80110f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80110f4:	b672      	cpsid	i
    return(int_posture);
 80110f6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80110f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	4a19      	ldr	r2, [pc, #100]	; (8011164 <_tx_byte_pool_create+0x120>)
 80110fe:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8011100:	4b19      	ldr	r3, [pc, #100]	; (8011168 <_tx_byte_pool_create+0x124>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8011108:	4a18      	ldr	r2, [pc, #96]	; (801116c <_tx_byte_pool_create+0x128>)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	631a      	str	r2, [r3, #48]	; 0x30
 801111a:	e011      	b.n	8011140 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801111c:	4b13      	ldr	r3, [pc, #76]	; (801116c <_tx_byte_pool_create+0x128>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8011122:	6a3b      	ldr	r3, [r7, #32]
 8011124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011126:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	68fa      	ldr	r2, [r7, #12]
 801112c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	69fa      	ldr	r2, [r7, #28]
 8011138:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	6a3a      	ldr	r2, [r7, #32]
 801113e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8011140:	4b09      	ldr	r3, [pc, #36]	; (8011168 <_tx_byte_pool_create+0x124>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	3301      	adds	r3, #1
 8011146:	4a08      	ldr	r2, [pc, #32]	; (8011168 <_tx_byte_pool_create+0x124>)
 8011148:	6013      	str	r3, [r2, #0]
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	f383 8810 	msr	PRIMASK, r3
}
 8011154:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011156:	2300      	movs	r3, #0
}
 8011158:	4618      	mov	r0, r3
 801115a:	3738      	adds	r7, #56	; 0x38
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	ffffeeee 	.word	0xffffeeee
 8011164:	42595445 	.word	0x42595445
 8011168:	20003858 	.word	0x20003858
 801116c:	20003854 	.word	0x20003854

08011170 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8011170:	b480      	push	{r7}
 8011172:	b097      	sub	sp, #92	; 0x5c
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801117a:	2300      	movs	r3, #0
 801117c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801117e:	f3ef 8310 	mrs	r3, PRIMASK
 8011182:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011186:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011188:	b672      	cpsid	i
    return(int_posture);
 801118a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 801118c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	3b02      	subs	r3, #2
 8011198:	00db      	lsls	r3, r3, #3
 801119a:	4413      	add	r3, r2
 801119c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801119e:	683a      	ldr	r2, [r7, #0]
 80111a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d308      	bcc.n	80111b8 <_tx_byte_pool_search+0x48>
 80111a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	f383 8810 	msr	PRIMASK, r3
}
 80111b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80111b2:	2300      	movs	r3, #0
 80111b4:	653b      	str	r3, [r7, #80]	; 0x50
 80111b6:	e0dd      	b.n	8011374 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80111b8:	4b72      	ldr	r3, [pc, #456]	; (8011384 <_tx_byte_pool_search+0x214>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111c2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	695b      	ldr	r3, [r3, #20]
 80111c8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	3301      	adds	r3, #1
 80111d0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80111d2:	2300      	movs	r3, #0
 80111d4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80111d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111d8:	3304      	adds	r3, #4
 80111da:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80111e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4a68      	ldr	r2, [pc, #416]	; (8011388 <_tx_byte_pool_search+0x218>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d143      	bne.n	8011272 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80111ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d104      	bne.n	80111fa <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111f4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80111f6:	2301      	movs	r3, #1
 80111f8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80111fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111fc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8011204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801120c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120e:	3b08      	subs	r3, #8
 8011210:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8011212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	429a      	cmp	r2, r3
 8011218:	d257      	bcs.n	80112ca <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801121a:	2300      	movs	r3, #0
 801121c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	3304      	adds	r3, #4
 8011222:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a56      	ldr	r2, [pc, #344]	; (8011388 <_tx_byte_pool_search+0x218>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d113      	bne.n	801125a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011234:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	681a      	ldr	r2, [r3, #0]
 801123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	1e5a      	subs	r2, r3, #1
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	695b      	ldr	r3, [r3, #20]
 801124c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801124e:	429a      	cmp	r2, r3
 8011250:	d114      	bne.n	801127c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011256:	615a      	str	r2, [r3, #20]
 8011258:	e010      	b.n	801127c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8011264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011266:	2b00      	cmp	r3, #0
 8011268:	d008      	beq.n	801127c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801126a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801126c:	3b01      	subs	r3, #1
 801126e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011270:	e004      	b.n	801127c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011274:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8011276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 801127c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801127e:	2b00      	cmp	r3, #0
 8011280:	d002      	beq.n	8011288 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8011282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011284:	3b01      	subs	r3, #1
 8011286:	64bb      	str	r3, [r7, #72]	; 0x48
 8011288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801128a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	f383 8810 	msr	PRIMASK, r3
}
 8011292:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011294:	f3ef 8310 	mrs	r3, PRIMASK
 8011298:	61bb      	str	r3, [r7, #24]
    return(posture);
 801129a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801129c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801129e:	b672      	cpsid	i
    return(int_posture);
 80112a0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80112a2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6a1b      	ldr	r3, [r3, #32]
 80112a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d009      	beq.n	80112c2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	3301      	adds	r3, #1
 80112ba:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112c0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80112c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d186      	bne.n	80111d6 <_tx_byte_pool_search+0x66>
 80112c8:	e000      	b.n	80112cc <_tx_byte_pool_search+0x15c>
                    break;
 80112ca:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80112cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d048      	beq.n	8011364 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80112d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	2b13      	cmp	r3, #19
 80112da:	d91e      	bls.n	801131a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	3308      	adds	r3, #8
 80112e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112e2:	4413      	add	r3, r2
 80112e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80112e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80112ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ec:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80112ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	3304      	adds	r3, #4
 80112fa:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8011300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011302:	4a21      	ldr	r2, [pc, #132]	; (8011388 <_tx_byte_pool_search+0x218>)
 8011304:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	1c5a      	adds	r2, r3, #1
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8011310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011314:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801131a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801131c:	3304      	adds	r3, #4
 801131e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8011320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011322:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	689a      	ldr	r2, [r3, #8]
 801132e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	f1a3 0208 	sub.w	r2, r3, #8
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011340:	429a      	cmp	r2, r3
 8011342:	d105      	bne.n	8011350 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011346:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8011348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	615a      	str	r2, [r3, #20]
 8011350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011352:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f383 8810 	msr	PRIMASK, r3
}
 801135a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801135c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801135e:	3308      	adds	r3, #8
 8011360:	653b      	str	r3, [r7, #80]	; 0x50
 8011362:	e007      	b.n	8011374 <_tx_byte_pool_search+0x204>
 8011364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011366:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	f383 8810 	msr	PRIMASK, r3
}
 801136e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8011370:	2300      	movs	r3, #0
 8011372:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8011374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011376:	4618      	mov	r0, r3
 8011378:	375c      	adds	r7, #92	; 0x5c
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr
 8011382:	bf00      	nop
 8011384:	20003864 	.word	0x20003864
 8011388:	ffffeeee 	.word	0xffffeeee

0801138c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8011390:	f000 f9c0 	bl	8011714 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8011394:	f000 fe60 	bl	8012058 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8011398:	4b12      	ldr	r3, [pc, #72]	; (80113e4 <_tx_initialize_high_level+0x58>)
 801139a:	2200      	movs	r2, #0
 801139c:	601a      	str	r2, [r3, #0]
 801139e:	4b12      	ldr	r3, [pc, #72]	; (80113e8 <_tx_initialize_high_level+0x5c>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80113a4:	4b11      	ldr	r3, [pc, #68]	; (80113ec <_tx_initialize_high_level+0x60>)
 80113a6:	2200      	movs	r2, #0
 80113a8:	601a      	str	r2, [r3, #0]
 80113aa:	4b11      	ldr	r3, [pc, #68]	; (80113f0 <_tx_initialize_high_level+0x64>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80113b0:	4b10      	ldr	r3, [pc, #64]	; (80113f4 <_tx_initialize_high_level+0x68>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	601a      	str	r2, [r3, #0]
 80113b6:	4b10      	ldr	r3, [pc, #64]	; (80113f8 <_tx_initialize_high_level+0x6c>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80113bc:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <_tx_initialize_high_level+0x70>)
 80113be:	2200      	movs	r2, #0
 80113c0:	601a      	str	r2, [r3, #0]
 80113c2:	4b0f      	ldr	r3, [pc, #60]	; (8011400 <_tx_initialize_high_level+0x74>)
 80113c4:	2200      	movs	r2, #0
 80113c6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80113c8:	4b0e      	ldr	r3, [pc, #56]	; (8011404 <_tx_initialize_high_level+0x78>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	4b0e      	ldr	r3, [pc, #56]	; (8011408 <_tx_initialize_high_level+0x7c>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80113d4:	4b0d      	ldr	r3, [pc, #52]	; (801140c <_tx_initialize_high_level+0x80>)
 80113d6:	2200      	movs	r2, #0
 80113d8:	601a      	str	r2, [r3, #0]
 80113da:	4b0d      	ldr	r3, [pc, #52]	; (8011410 <_tx_initialize_high_level+0x84>)
 80113dc:	2200      	movs	r2, #0
 80113de:	601a      	str	r2, [r3, #0]
#endif
}
 80113e0:	bf00      	nop
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	2000382c 	.word	0x2000382c
 80113e8:	20003830 	.word	0x20003830
 80113ec:	20003834 	.word	0x20003834
 80113f0:	20003838 	.word	0x20003838
 80113f4:	2000383c 	.word	0x2000383c
 80113f8:	20003840 	.word	0x20003840
 80113fc:	2000384c 	.word	0x2000384c
 8011400:	20003850 	.word	0x20003850
 8011404:	20003854 	.word	0x20003854
 8011408:	20003858 	.word	0x20003858
 801140c:	20003844 	.word	0x20003844
 8011410:	20003848 	.word	0x20003848

08011414 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8011418:	4b10      	ldr	r3, [pc, #64]	; (801145c <_tx_initialize_kernel_enter+0x48>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8011420:	d00c      	beq.n	801143c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011422:	4b0e      	ldr	r3, [pc, #56]	; (801145c <_tx_initialize_kernel_enter+0x48>)
 8011424:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011428:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801142a:	f7ee fee9 	bl	8000200 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 801142e:	f7ff ffad 	bl	801138c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8011432:	4b0b      	ldr	r3, [pc, #44]	; (8011460 <_tx_initialize_kernel_enter+0x4c>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	3301      	adds	r3, #1
 8011438:	4a09      	ldr	r2, [pc, #36]	; (8011460 <_tx_initialize_kernel_enter+0x4c>)
 801143a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801143c:	4b07      	ldr	r3, [pc, #28]	; (801145c <_tx_initialize_kernel_enter+0x48>)
 801143e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011442:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8011444:	4b07      	ldr	r3, [pc, #28]	; (8011464 <_tx_initialize_kernel_enter+0x50>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4618      	mov	r0, r3
 801144a:	f7ef fedd 	bl	8001208 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801144e:	4b03      	ldr	r3, [pc, #12]	; (801145c <_tx_initialize_kernel_enter+0x48>)
 8011450:	2200      	movs	r2, #0
 8011452:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8011454:	f7ee ff14 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011458:	bf00      	nop
 801145a:	bd80      	pop	{r7, pc}
 801145c:	20000084 	.word	0x20000084
 8011460:	20003900 	.word	0x20003900
 8011464:	2000385c 	.word	0x2000385c

08011468 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08c      	sub	sp, #48	; 0x30
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011470:	f3ef 8310 	mrs	r3, PRIMASK
 8011474:	617b      	str	r3, [r7, #20]
    return(posture);
 8011476:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011478:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801147a:	b672      	cpsid	i
    return(int_posture);
 801147c:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801147e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8011486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011488:	2b00      	cmp	r3, #0
 801148a:	d114      	bne.n	80114b6 <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	689b      	ldr	r3, [r3, #8]
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	69db      	ldr	r3, [r3, #28]
 801149a:	61bb      	str	r3, [r7, #24]
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f383 8810 	msr	PRIMASK, r3
}
 80114a6:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d040      	beq.n	8011530 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	4798      	blx	r3
 80114b4:	e03c      	b.n	8011530 <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	3b01      	subs	r3, #1
 80114c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80114c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d103      	bne.n	80114d0 <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	60da      	str	r2, [r3, #12]
 80114ce:	e00e      	b.n	80114ee <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80114d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114d4:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6a3a      	ldr	r2, [r7, #32]
 80114da:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e0:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80114e2:	6a3b      	ldr	r3, [r7, #32]
 80114e4:	69fa      	ldr	r2, [r7, #28]
 80114e6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	6a3a      	ldr	r2, [r7, #32]
 80114ec:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114f2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	2200      	movs	r2, #0
 80114f8:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	69db      	ldr	r3, [r3, #28]
 80114fe:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011502:	2200      	movs	r2, #0
 8011504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011508:	4b0c      	ldr	r3, [pc, #48]	; (801153c <_tx_semaphore_put+0xd4>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	3301      	adds	r3, #1
 801150e:	4a0b      	ldr	r2, [pc, #44]	; (801153c <_tx_semaphore_put+0xd4>)
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011514:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	f383 8810 	msr	PRIMASK, r3
}
 801151c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 801151e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011520:	f000 f9e2 	bl	80118e8 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d002      	beq.n	8011530 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3730      	adds	r7, #48	; 0x30
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
 801153a:	bf00      	nop
 801153c:	20003900 	.word	0x20003900

08011540 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b092      	sub	sp, #72	; 0x48
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801154e:	2300      	movs	r3, #0
 8011550:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011554:	21ef      	movs	r1, #239	; 0xef
 8011556:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011558:	f001 fcf6 	bl	8012f48 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 801155c:	22b4      	movs	r2, #180	; 0xb4
 801155e:	2100      	movs	r1, #0
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f001 fcf1 	bl	8012f48 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	683a      	ldr	r2, [r7, #0]
 8011576:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801157c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011582:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011588:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801158e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011596:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801159c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2220      	movs	r2, #32
 80115a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80115a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80115aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115ac:	3b01      	subs	r3, #1
 80115ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115b0:	4413      	add	r3, r2
 80115b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115b8:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80115be:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80115c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2203      	movs	r2, #3
 80115cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	4a48      	ldr	r2, [pc, #288]	; (80116f4 <_tx_thread_create+0x1b4>)
 80115d2:	655a      	str	r2, [r3, #84]	; 0x54
 80115d4:	68fa      	ldr	r2, [r7, #12]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80115da:	4947      	ldr	r1, [pc, #284]	; (80116f8 <_tx_thread_create+0x1b8>)
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	f7ee feaf 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115e2:	f3ef 8310 	mrs	r3, PRIMASK
 80115e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80115e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80115ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80115ec:	b672      	cpsid	i
    return(int_posture);
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80115f0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	4a41      	ldr	r2, [pc, #260]	; (80116fc <_tx_thread_create+0x1bc>)
 80115f6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80115f8:	4b41      	ldr	r3, [pc, #260]	; (8011700 <_tx_thread_create+0x1c0>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d10b      	bne.n	8011618 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011600:	4a40      	ldr	r2, [pc, #256]	; (8011704 <_tx_thread_create+0x1c4>)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8011616:	e016      	b.n	8011646 <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011618:	4b3a      	ldr	r3, [pc, #232]	; (8011704 <_tx_thread_create+0x1c4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011624:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011628:	68fa      	ldr	r2, [r7, #12]
 801162a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801163a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011646:	4b2e      	ldr	r3, [pc, #184]	; (8011700 <_tx_thread_create+0x1c0>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	3301      	adds	r3, #1
 801164c:	4a2c      	ldr	r2, [pc, #176]	; (8011700 <_tx_thread_create+0x1c0>)
 801164e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011650:	4b2d      	ldr	r3, [pc, #180]	; (8011708 <_tx_thread_create+0x1c8>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	3301      	adds	r3, #1
 8011656:	4a2c      	ldr	r2, [pc, #176]	; (8011708 <_tx_thread_create+0x1c8>)
 8011658:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801165a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801165c:	2b01      	cmp	r3, #1
 801165e:	d129      	bne.n	80116b4 <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011660:	f3ef 8305 	mrs	r3, IPSR
 8011664:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8011666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011668:	4b28      	ldr	r3, [pc, #160]	; (801170c <_tx_thread_create+0x1cc>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4313      	orrs	r3, r2
 801166e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011672:	d30d      	bcc.n	8011690 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011674:	4b26      	ldr	r3, [pc, #152]	; (8011710 <_tx_thread_create+0x1d0>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801167a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801167c:	2b00      	cmp	r3, #0
 801167e:	d009      	beq.n	8011694 <_tx_thread_create+0x154>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011684:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801168a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801168c:	63da      	str	r2, [r3, #60]	; 0x3c
 801168e:	e001      	b.n	8011694 <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011690:	2300      	movs	r3, #0
 8011692:	647b      	str	r3, [r7, #68]	; 0x44
 8011694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011696:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011698:	6a3b      	ldr	r3, [r7, #32]
 801169a:	f383 8810 	msr	PRIMASK, r3
}
 801169e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80116a0:	68f8      	ldr	r0, [r7, #12]
 80116a2:	f000 f921 	bl	80118e8 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80116a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d01e      	beq.n	80116ea <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80116ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80116b2:	e01a      	b.n	80116ea <_tx_thread_create+0x1aa>
 80116b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	f383 8810 	msr	PRIMASK, r3
}
 80116be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116c0:	f3ef 8310 	mrs	r3, PRIMASK
 80116c4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80116c6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80116c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80116ca:	b672      	cpsid	i
    return(int_posture);
 80116cc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80116ce:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80116d0:	4b0d      	ldr	r3, [pc, #52]	; (8011708 <_tx_thread_create+0x1c8>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3b01      	subs	r3, #1
 80116d6:	4a0c      	ldr	r2, [pc, #48]	; (8011708 <_tx_thread_create+0x1c8>)
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	f383 8810 	msr	PRIMASK, r3
}
 80116e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80116e6:	f000 f8c5 	bl	8011874 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3748      	adds	r7, #72	; 0x48
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	08011ed5 	.word	0x08011ed5
 80116f8:	08011795 	.word	0x08011795
 80116fc:	54485244 	.word	0x54485244
 8011700:	20003870 	.word	0x20003870
 8011704:	2000386c 	.word	0x2000386c
 8011708:	20003900 	.word	0x20003900
 801170c:	20000084 	.word	0x20000084
 8011710:	20003868 	.word	0x20003868

08011714 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8011718:	4b13      	ldr	r3, [pc, #76]	; (8011768 <_tx_thread_initialize+0x54>)
 801171a:	2200      	movs	r2, #0
 801171c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801171e:	4b13      	ldr	r3, [pc, #76]	; (801176c <_tx_thread_initialize+0x58>)
 8011720:	2200      	movs	r2, #0
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	4b12      	ldr	r3, [pc, #72]	; (8011770 <_tx_thread_initialize+0x5c>)
 8011726:	2200      	movs	r2, #0
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	4b12      	ldr	r3, [pc, #72]	; (8011774 <_tx_thread_initialize+0x60>)
 801172c:	2200      	movs	r2, #0
 801172e:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011730:	4b11      	ldr	r3, [pc, #68]	; (8011778 <_tx_thread_initialize+0x64>)
 8011732:	2220      	movs	r2, #32
 8011734:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8011736:	2280      	movs	r2, #128	; 0x80
 8011738:	2100      	movs	r1, #0
 801173a:	4810      	ldr	r0, [pc, #64]	; (801177c <_tx_thread_initialize+0x68>)
 801173c:	f001 fc04 	bl	8012f48 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8011740:	4b0f      	ldr	r3, [pc, #60]	; (8011780 <_tx_thread_initialize+0x6c>)
 8011742:	2200      	movs	r2, #0
 8011744:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011746:	4b0f      	ldr	r3, [pc, #60]	; (8011784 <_tx_thread_initialize+0x70>)
 8011748:	2200      	movs	r2, #0
 801174a:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801174c:	4b0e      	ldr	r3, [pc, #56]	; (8011788 <_tx_thread_initialize+0x74>)
 801174e:	2200      	movs	r2, #0
 8011750:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8011752:	4b0e      	ldr	r3, [pc, #56]	; (801178c <_tx_thread_initialize+0x78>)
 8011754:	2200      	movs	r2, #0
 8011756:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 8011758:	4b0d      	ldr	r3, [pc, #52]	; (8011790 <_tx_thread_initialize+0x7c>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 8011760:	4a0b      	ldr	r2, [pc, #44]	; (8011790 <_tx_thread_initialize+0x7c>)
 8011762:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011764:	bf00      	nop
 8011766:	bd80      	pop	{r7, pc}
 8011768:	20003864 	.word	0x20003864
 801176c:	20003868 	.word	0x20003868
 8011770:	20003874 	.word	0x20003874
 8011774:	20003878 	.word	0x20003878
 8011778:	2000387c 	.word	0x2000387c
 801177c:	20003880 	.word	0x20003880
 8011780:	2000386c 	.word	0x2000386c
 8011784:	20003870 	.word	0x20003870
 8011788:	20003900 	.word	0x20003900
 801178c:	20003904 	.word	0x20003904
 8011790:	20003908 	.word	0x20003908

08011794 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b08c      	sub	sp, #48	; 0x30
 8011798:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801179a:	4b33      	ldr	r3, [pc, #204]	; (8011868 <_tx_thread_shell_entry+0xd4>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117a0:	f3ef 8310 	mrs	r3, PRIMASK
 80117a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80117a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80117a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117aa:	b672      	cpsid	i
    return(int_posture);
 80117ac:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 80117ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80117b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80117b6:	627b      	str	r3, [r7, #36]	; 0x24
 80117b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	f383 8810 	msr	PRIMASK, r3
}
 80117c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d003      	beq.n	80117d2 <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80117ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117cc:	2100      	movs	r1, #0
 80117ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117d0:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80117d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80117da:	4610      	mov	r0, r2
 80117dc:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80117de:	4b23      	ldr	r3, [pc, #140]	; (801186c <_tx_thread_shell_entry+0xd8>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d003      	beq.n	80117ee <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80117e6:	4b21      	ldr	r3, [pc, #132]	; (801186c <_tx_thread_shell_entry+0xd8>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117ec:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117ee:	f3ef 8310 	mrs	r3, PRIMASK
 80117f2:	607b      	str	r3, [r7, #4]
    return(posture);
 80117f4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80117f6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117f8:	b672      	cpsid	i
    return(int_posture);
 80117fa:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80117fc:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80117fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011800:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011804:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011808:	2201      	movs	r2, #1
 801180a:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180e:	2201      	movs	r2, #1
 8011810:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	2200      	movs	r2, #0
 8011816:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011818:	4b15      	ldr	r3, [pc, #84]	; (8011870 <_tx_thread_shell_entry+0xdc>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	3301      	adds	r3, #1
 801181e:	4a14      	ldr	r2, [pc, #80]	; (8011870 <_tx_thread_shell_entry+0xdc>)
 8011820:	6013      	str	r3, [r2, #0]
 8011822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011824:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	f383 8810 	msr	PRIMASK, r3
}
 801182c:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801182e:	f3ef 8314 	mrs	r3, CONTROL
 8011832:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8011834:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8011836:	623b      	str	r3, [r7, #32]
 8011838:	6a3b      	ldr	r3, [r7, #32]
 801183a:	f023 0304 	bic.w	r3, r3, #4
 801183e:	623b      	str	r3, [r7, #32]
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	f383 8814 	msr	CONTROL, r3
}
 801184a:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	2b00      	cmp	r3, #0
 8011850:	d003      	beq.n	801185a <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8011852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011854:	2101      	movs	r1, #1
 8011856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011858:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801185a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801185c:	f000 f958 	bl	8011b10 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011860:	bf00      	nop
 8011862:	3730      	adds	r7, #48	; 0x30
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	20003864 	.word	0x20003864
 801186c:	20003904 	.word	0x20003904
 8011870:	20003900 	.word	0x20003900

08011874 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011874:	b480      	push	{r7}
 8011876:	b089      	sub	sp, #36	; 0x24
 8011878:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801187a:	4b17      	ldr	r3, [pc, #92]	; (80118d8 <_tx_thread_system_preempt_check+0x64>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d121      	bne.n	80118ca <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011886:	4b15      	ldr	r3, [pc, #84]	; (80118dc <_tx_thread_system_preempt_check+0x68>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801188c:	4b14      	ldr	r3, [pc, #80]	; (80118e0 <_tx_thread_system_preempt_check+0x6c>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011892:	69ba      	ldr	r2, [r7, #24]
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	429a      	cmp	r2, r3
 8011898:	d017      	beq.n	80118ca <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801189a:	4b12      	ldr	r3, [pc, #72]	; (80118e4 <_tx_thread_system_preempt_check+0x70>)
 801189c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118a2:	f3ef 8305 	mrs	r3, IPSR
 80118a6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80118a8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d10c      	bne.n	80118c8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118ae:	f3ef 8310 	mrs	r3, PRIMASK
 80118b2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80118b4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80118b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80118b8:	b662      	cpsie	i
}
 80118ba:	bf00      	nop
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f383 8810 	msr	PRIMASK, r3
}
 80118c6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80118c8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80118ca:	bf00      	nop
 80118cc:	3724      	adds	r7, #36	; 0x24
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop
 80118d8:	20003900 	.word	0x20003900
 80118dc:	20003864 	.word	0x20003864
 80118e0:	20003868 	.word	0x20003868
 80118e4:	e000ed04 	.word	0xe000ed04

080118e8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b096      	sub	sp, #88	; 0x58
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118f0:	f3ef 8310 	mrs	r3, PRIMASK
 80118f4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80118f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80118f8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80118fa:	b672      	cpsid	i
    return(int_posture);
 80118fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80118fe:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011904:	2b00      	cmp	r3, #0
 8011906:	d005      	beq.n	8011914 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	334c      	adds	r3, #76	; 0x4c
 801190c:	4618      	mov	r0, r3
 801190e:	f000 fc81 	bl	8012214 <_tx_timer_system_deactivate>
 8011912:	e002      	b.n	801191a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2200      	movs	r2, #0
 8011918:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801191a:	4b75      	ldr	r3, [pc, #468]	; (8011af0 <_tx_thread_system_resume+0x208>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	3b01      	subs	r3, #1
 8011920:	4a73      	ldr	r2, [pc, #460]	; (8011af0 <_tx_thread_system_resume+0x208>)
 8011922:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011928:	2b00      	cmp	r3, #0
 801192a:	f040 8096 	bne.w	8011a5a <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011932:	2b00      	cmp	r3, #0
 8011934:	f000 80aa 	beq.w	8011a8c <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801193c:	2b00      	cmp	r3, #0
 801193e:	f040 8085 	bne.w	8011a4c <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2200      	movs	r2, #0
 8011946:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801194c:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801194e:	4a69      	ldr	r2, [pc, #420]	; (8011af4 <_tx_thread_system_resume+0x20c>)
 8011950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011956:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8011958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801195a:	2b00      	cmp	r3, #0
 801195c:	d166      	bne.n	8011a2c <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801195e:	4965      	ldr	r1, [pc, #404]	; (8011af4 <_tx_thread_system_resume+0x20c>)
 8011960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011974:	2201      	movs	r2, #1
 8011976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011978:	fa02 f303 	lsl.w	r3, r2, r3
 801197c:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801197e:	4b5e      	ldr	r3, [pc, #376]	; (8011af8 <_tx_thread_system_resume+0x210>)
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011984:	4313      	orrs	r3, r2
 8011986:	4a5c      	ldr	r2, [pc, #368]	; (8011af8 <_tx_thread_system_resume+0x210>)
 8011988:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801198a:	4b5c      	ldr	r3, [pc, #368]	; (8011afc <_tx_thread_system_resume+0x214>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011990:	429a      	cmp	r2, r3
 8011992:	d27b      	bcs.n	8011a8c <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011994:	4a59      	ldr	r2, [pc, #356]	; (8011afc <_tx_thread_system_resume+0x214>)
 8011996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011998:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 801199a:	4b59      	ldr	r3, [pc, #356]	; (8011b00 <_tx_thread_system_resume+0x218>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80119a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d103      	bne.n	80119ae <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80119a6:	4a56      	ldr	r2, [pc, #344]	; (8011b00 <_tx_thread_system_resume+0x218>)
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6013      	str	r3, [r2, #0]
 80119ac:	e06e      	b.n	8011a8c <_tx_thread_system_resume+0x1a4>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80119ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d269      	bcs.n	8011a8c <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 80119b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d00b      	beq.n	80119dc <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 80119c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c8:	2201      	movs	r2, #1
 80119ca:	fa02 f303 	lsl.w	r3, r2, r3
 80119ce:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80119d0:	4b4c      	ldr	r3, [pc, #304]	; (8011b04 <_tx_thread_system_resume+0x21c>)
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119d6:	4313      	orrs	r3, r2
 80119d8:	4a4a      	ldr	r2, [pc, #296]	; (8011b04 <_tx_thread_system_resume+0x21c>)
 80119da:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80119dc:	4a48      	ldr	r2, [pc, #288]	; (8011b00 <_tx_thread_system_resume+0x218>)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6013      	str	r3, [r2, #0]
 80119e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e8:	f383 8810 	msr	PRIMASK, r3
}
 80119ec:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80119ee:	4b40      	ldr	r3, [pc, #256]	; (8011af0 <_tx_thread_system_resume+0x208>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80119f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d174      	bne.n	8011ae4 <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80119fa:	4b43      	ldr	r3, [pc, #268]	; (8011b08 <_tx_thread_system_resume+0x220>)
 80119fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a00:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a02:	f3ef 8305 	mrs	r3, IPSR
 8011a06:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8011a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d10c      	bne.n	8011a28 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a12:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8011a16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011a18:	b662      	cpsie	i
}
 8011a1a:	bf00      	nop
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	f383 8810 	msr	PRIMASK, r3
}
 8011a26:	bf00      	nop
}
 8011a28:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8011a2a:	e05b      	b.n	8011ae4 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8011a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a30:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8011a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8011a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a3a:	687a      	ldr	r2, [r7, #4]
 8011a3c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a42:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a48:	621a      	str	r2, [r3, #32]
 8011a4a:	e01f      	b.n	8011a8c <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2203      	movs	r2, #3
 8011a56:	631a      	str	r2, [r3, #48]	; 0x30
 8011a58:	e018      	b.n	8011a8c <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a5e:	2b01      	cmp	r3, #1
 8011a60:	d014      	beq.n	8011a8c <_tx_thread_system_resume+0x1a4>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d010      	beq.n	8011a8c <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d106      	bne.n	8011a80 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8011a7e:	e005      	b.n	8011a8c <_tx_thread_system_resume+0x1a4>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2203      	movs	r2, #3
 8011a8a:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011a8c:	4b1f      	ldr	r3, [pc, #124]	; (8011b0c <_tx_thread_system_resume+0x224>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a94:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	f383 8810 	msr	PRIMASK, r3
}
 8011a9c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011a9e:	4b18      	ldr	r3, [pc, #96]	; (8011b00 <_tx_thread_system_resume+0x218>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d020      	beq.n	8011aea <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011aa8:	4b11      	ldr	r3, [pc, #68]	; (8011af0 <_tx_thread_system_resume+0x208>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8011aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d11a      	bne.n	8011aea <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011ab4:	4b14      	ldr	r3, [pc, #80]	; (8011b08 <_tx_thread_system_resume+0x220>)
 8011ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aba:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011abc:	f3ef 8305 	mrs	r3, IPSR
 8011ac0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011ac2:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10f      	bne.n	8011ae8 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8011acc:	613b      	str	r3, [r7, #16]
    return(posture);
 8011ace:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8011ad0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011ad2:	b662      	cpsie	i
}
 8011ad4:	bf00      	nop
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	f383 8810 	msr	PRIMASK, r3
}
 8011ae0:	bf00      	nop
}
 8011ae2:	e001      	b.n	8011ae8 <_tx_thread_system_resume+0x200>
                                return;
 8011ae4:	bf00      	nop
 8011ae6:	e000      	b.n	8011aea <_tx_thread_system_resume+0x202>
 8011ae8:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8011aea:	3758      	adds	r7, #88	; 0x58
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	20003900 	.word	0x20003900
 8011af4:	20003880 	.word	0x20003880
 8011af8:	20003874 	.word	0x20003874
 8011afc:	2000387c 	.word	0x2000387c
 8011b00:	20003868 	.word	0x20003868
 8011b04:	20003878 	.word	0x20003878
 8011b08:	e000ed04 	.word	0xe000ed04
 8011b0c:	20003864 	.word	0x20003864

08011b10 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b0a0      	sub	sp, #128	; 0x80
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011b18:	4b5a      	ldr	r3, [pc, #360]	; (8011c84 <_tx_thread_system_suspend+0x174>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8011b22:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8011b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8011b26:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b28:	b672      	cpsid	i
    return(int_posture);
 8011b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011b2c:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d112      	bne.n	8011b5c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b3a:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8011b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d008      	beq.n	8011b54 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8011b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b48:	d004      	beq.n	8011b54 <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	334c      	adds	r3, #76	; 0x4c
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f000 fafe 	bl	8012150 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	69db      	ldr	r3, [r3, #28]
 8011b58:	4a4b      	ldr	r2, [pc, #300]	; (8011c88 <_tx_thread_system_suspend+0x178>)
 8011b5a:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011b5c:	4b4b      	ldr	r3, [pc, #300]	; (8011c8c <_tx_thread_system_suspend+0x17c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	3b01      	subs	r3, #1
 8011b62:	4a4a      	ldr	r2, [pc, #296]	; (8011c8c <_tx_thread_system_suspend+0x17c>)
 8011b64:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	f040 8122 	bne.w	8011db4 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7a:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6a1b      	ldr	r3, [r3, #32]
 8011b80:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8011b82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d027      	beq.n	8011bda <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8e:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b94:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8011b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b9a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8011b9c:	4a3c      	ldr	r2, [pc, #240]	; (8011c90 <_tx_thread_system_suspend+0x180>)
 8011b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	f040 808b 	bne.w	8011cc2 <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8011bac:	4938      	ldr	r1, [pc, #224]	; (8011c90 <_tx_thread_system_suspend+0x180>)
 8011bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8011bb6:	4b37      	ldr	r3, [pc, #220]	; (8011c94 <_tx_thread_system_suspend+0x184>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f000 8081 	beq.w	8011cc2 <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8011bc8:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8011bca:	4b32      	ldr	r3, [pc, #200]	; (8011c94 <_tx_thread_system_suspend+0x184>)
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bd0:	43db      	mvns	r3, r3
 8011bd2:	4013      	ands	r3, r2
 8011bd4:	4a2f      	ldr	r2, [pc, #188]	; (8011c94 <_tx_thread_system_suspend+0x184>)
 8011bd6:	6013      	str	r3, [r2, #0]
 8011bd8:	e073      	b.n	8011cc2 <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8011bda:	4a2d      	ldr	r2, [pc, #180]	; (8011c90 <_tx_thread_system_suspend+0x180>)
 8011bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bde:	2100      	movs	r1, #0
 8011be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011be4:	2201      	movs	r2, #1
 8011be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011be8:	fa02 f303 	lsl.w	r3, r2, r3
 8011bec:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8011bee:	4b2a      	ldr	r3, [pc, #168]	; (8011c98 <_tx_thread_system_suspend+0x188>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bf4:	43db      	mvns	r3, r3
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	4a27      	ldr	r2, [pc, #156]	; (8011c98 <_tx_thread_system_suspend+0x188>)
 8011bfa:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8011bfc:	4b25      	ldr	r3, [pc, #148]	; (8011c94 <_tx_thread_system_suspend+0x184>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d00b      	beq.n	8011c1c <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8011c04:	2201      	movs	r2, #1
 8011c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c08:	fa02 f303 	lsl.w	r3, r2, r3
 8011c0c:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8011c0e:	4b21      	ldr	r3, [pc, #132]	; (8011c94 <_tx_thread_system_suspend+0x184>)
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c14:	43db      	mvns	r3, r3
 8011c16:	4013      	ands	r3, r2
 8011c18:	4a1e      	ldr	r2, [pc, #120]	; (8011c94 <_tx_thread_system_suspend+0x184>)
 8011c1a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8011c20:	4b1d      	ldr	r3, [pc, #116]	; (8011c98 <_tx_thread_system_suspend+0x188>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8011c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d13d      	bne.n	8011ca8 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011c2c:	4b1b      	ldr	r3, [pc, #108]	; (8011c9c <_tx_thread_system_suspend+0x18c>)
 8011c2e:	2220      	movs	r2, #32
 8011c30:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8011c32:	4b1b      	ldr	r3, [pc, #108]	; (8011ca0 <_tx_thread_system_suspend+0x190>)
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]
 8011c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c3e:	f383 8810 	msr	PRIMASK, r3
}
 8011c42:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011c44:	4b11      	ldr	r3, [pc, #68]	; (8011c8c <_tx_thread_system_suspend+0x17c>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8011c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f040 80db 	bne.w	8011e08 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011c52:	4b14      	ldr	r3, [pc, #80]	; (8011ca4 <_tx_thread_system_suspend+0x194>)
 8011c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c58:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c5a:	f3ef 8305 	mrs	r3, IPSR
 8011c5e:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8011c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10c      	bne.n	8011c80 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c66:	f3ef 8310 	mrs	r3, PRIMASK
 8011c6a:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8011c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 8011c6e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011c70:	b662      	cpsie	i
}
 8011c72:	bf00      	nop
 8011c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7a:	f383 8810 	msr	PRIMASK, r3
}
 8011c7e:	bf00      	nop
}
 8011c80:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8011c82:	e0c1      	b.n	8011e08 <_tx_thread_system_suspend+0x2f8>
 8011c84:	20003864 	.word	0x20003864
 8011c88:	20003e70 	.word	0x20003e70
 8011c8c:	20003900 	.word	0x20003900
 8011c90:	20003880 	.word	0x20003880
 8011c94:	20003878 	.word	0x20003878
 8011c98:	20003874 	.word	0x20003874
 8011c9c:	2000387c 	.word	0x2000387c
 8011ca0:	20003868 	.word	0x20003868
 8011ca4:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8011ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011caa:	fa93 f3a3 	rbit	r3, r3
 8011cae:	663b      	str	r3, [r7, #96]	; 0x60
 8011cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cb2:	fab3 f383 	clz	r3, r3
 8011cb6:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8011cb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cbc:	4413      	add	r3, r2
 8011cbe:	4a56      	ldr	r2, [pc, #344]	; (8011e18 <_tx_thread_system_suspend+0x308>)
 8011cc0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8011cc2:	4b56      	ldr	r3, [pc, #344]	; (8011e1c <_tx_thread_system_suspend+0x30c>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d173      	bne.n	8011db4 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011ccc:	4b52      	ldr	r3, [pc, #328]	; (8011e18 <_tx_thread_system_suspend+0x308>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4a53      	ldr	r2, [pc, #332]	; (8011e20 <_tx_thread_system_suspend+0x310>)
 8011cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cd6:	4a51      	ldr	r2, [pc, #324]	; (8011e1c <_tx_thread_system_suspend+0x30c>)
 8011cd8:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8011cda:	4b52      	ldr	r3, [pc, #328]	; (8011e24 <_tx_thread_system_suspend+0x314>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d043      	beq.n	8011d6a <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8011ce2:	4b51      	ldr	r3, [pc, #324]	; (8011e28 <_tx_thread_system_suspend+0x318>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	4a4f      	ldr	r2, [pc, #316]	; (8011e28 <_tx_thread_system_suspend+0x318>)
 8011cea:	6013      	str	r3, [r2, #0]
 8011cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011cee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf2:	f383 8810 	msr	PRIMASK, r3
}
 8011cf6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8011cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8011d00:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d02:	b672      	cpsid	i
    return(int_posture);
 8011d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8011d06:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8011d08:	4b47      	ldr	r3, [pc, #284]	; (8011e28 <_tx_thread_system_suspend+0x318>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	4a46      	ldr	r2, [pc, #280]	; (8011e28 <_tx_thread_system_suspend+0x318>)
 8011d10:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 8011d12:	2300      	movs	r3, #0
 8011d14:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8011d16:	4b43      	ldr	r3, [pc, #268]	; (8011e24 <_tx_thread_system_suspend+0x314>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8011d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d1e:	fa93 f3a3 	rbit	r3, r3
 8011d22:	663b      	str	r3, [r7, #96]	; 0x60
 8011d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d26:	fab3 f383 	clz	r3, r3
 8011d2a:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8011d2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d30:	4413      	add	r3, r2
 8011d32:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8011d34:	4a3a      	ldr	r2, [pc, #232]	; (8011e20 <_tx_thread_system_suspend+0x310>)
 8011d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d3e:	4b36      	ldr	r3, [pc, #216]	; (8011e18 <_tx_thread_system_suspend+0x308>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d811      	bhi.n	8011d6a <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its 
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8011d46:	4a36      	ldr	r2, [pc, #216]	; (8011e20 <_tx_thread_system_suspend+0x310>)
 8011d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d4e:	4a33      	ldr	r2, [pc, #204]	; (8011e1c <_tx_thread_system_suspend+0x30c>)
 8011d50:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011d52:	2201      	movs	r2, #1
 8011d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d56:	fa02 f303 	lsl.w	r3, r2, r3
 8011d5a:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8011d5c:	4b31      	ldr	r3, [pc, #196]	; (8011e24 <_tx_thread_system_suspend+0x314>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d62:	43db      	mvns	r3, r3
 8011d64:	4013      	ands	r3, r2
 8011d66:	4a2f      	ldr	r2, [pc, #188]	; (8011e24 <_tx_thread_system_suspend+0x314>)
 8011d68:	6013      	str	r3, [r2, #0]
 8011d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d70:	f383 8810 	msr	PRIMASK, r3
}
 8011d74:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011d76:	4b2c      	ldr	r3, [pc, #176]	; (8011e28 <_tx_thread_system_suspend+0x318>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 8011d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d144      	bne.n	8011e0c <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011d82:	4b2a      	ldr	r3, [pc, #168]	; (8011e2c <_tx_thread_system_suspend+0x31c>)
 8011d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d88:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d8a:	f3ef 8305 	mrs	r3, IPSR
 8011d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8011d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10c      	bne.n	8011db0 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d96:	f3ef 8310 	mrs	r3, PRIMASK
 8011d9a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8011d9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011da0:	b662      	cpsie	i
}
 8011da2:	bf00      	nop
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	f383 8810 	msr	PRIMASK, r3
}
 8011dae:	bf00      	nop
}
 8011db0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8011db2:	e02b      	b.n	8011e0c <_tx_thread_system_suspend+0x2fc>
 8011db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011db6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	f383 8810 	msr	PRIMASK, r3
}
 8011dbe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011dc0:	4b16      	ldr	r3, [pc, #88]	; (8011e1c <_tx_thread_system_suspend+0x30c>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d022      	beq.n	8011e10 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011dca:	4b17      	ldr	r3, [pc, #92]	; (8011e28 <_tx_thread_system_suspend+0x318>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 8011dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d11c      	bne.n	8011e10 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011dd6:	4b15      	ldr	r3, [pc, #84]	; (8011e2c <_tx_thread_system_suspend+0x31c>)
 8011dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ddc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011dde:	f3ef 8305 	mrs	r3, IPSR
 8011de2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011de4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10c      	bne.n	8011e04 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011dea:	f3ef 8310 	mrs	r3, PRIMASK
 8011dee:	613b      	str	r3, [r7, #16]
    return(posture);
 8011df0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8011df2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011df4:	b662      	cpsie	i
}
 8011df6:	bf00      	nop
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	f383 8810 	msr	PRIMASK, r3
}
 8011e02:	bf00      	nop
}
 8011e04:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8011e06:	e003      	b.n	8011e10 <_tx_thread_system_suspend+0x300>
                return;
 8011e08:	bf00      	nop
 8011e0a:	e002      	b.n	8011e12 <_tx_thread_system_suspend+0x302>
            return;
 8011e0c:	bf00      	nop
 8011e0e:	e000      	b.n	8011e12 <_tx_thread_system_suspend+0x302>
    return;
 8011e10:	bf00      	nop
}
 8011e12:	3780      	adds	r7, #128	; 0x80
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	2000387c 	.word	0x2000387c
 8011e1c:	20003868 	.word	0x20003868
 8011e20:	20003880 	.word	0x20003880
 8011e24:	20003878 	.word	0x20003878
 8011e28:	20003900 	.word	0x20003900
 8011e2c:	e000ed04 	.word	0xe000ed04

08011e30 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b087      	sub	sp, #28
 8011e34:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011e36:	4b21      	ldr	r3, [pc, #132]	; (8011ebc <_tx_thread_time_slice+0x8c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8011e40:	60fb      	str	r3, [r7, #12]
    return(posture);
 8011e42:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8011e44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e46:	b672      	cpsid	i
    return(int_posture);
 8011e48:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8011e4a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011e4c:	4b1c      	ldr	r3, [pc, #112]	; (8011ec0 <_tx_thread_time_slice+0x90>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d024      	beq.n	8011ea2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d120      	bne.n	8011ea2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	69da      	ldr	r2, [r3, #28]
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	699b      	ldr	r3, [r3, #24]
 8011e6c:	4a15      	ldr	r2, [pc, #84]	; (8011ec4 <_tx_thread_time_slice+0x94>)
 8011e6e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	6a1b      	ldr	r3, [r3, #32]
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d013      	beq.n	8011ea2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d10d      	bne.n	8011ea2 <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e8a:	697a      	ldr	r2, [r7, #20]
 8011e8c:	6a12      	ldr	r2, [r2, #32]
 8011e8e:	490e      	ldr	r1, [pc, #56]	; (8011ec8 <_tx_thread_time_slice+0x98>)
 8011e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011e94:	4b0d      	ldr	r3, [pc, #52]	; (8011ecc <_tx_thread_time_slice+0x9c>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4a0b      	ldr	r2, [pc, #44]	; (8011ec8 <_tx_thread_time_slice+0x98>)
 8011e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e9e:	4a0c      	ldr	r2, [pc, #48]	; (8011ed0 <_tx_thread_time_slice+0xa0>)
 8011ea0:	6013      	str	r3, [r2, #0]
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f383 8810 	msr	PRIMASK, r3
}
 8011eac:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8011eae:	bf00      	nop
 8011eb0:	371c      	adds	r7, #28
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	20003864 	.word	0x20003864
 8011ec0:	20003910 	.word	0x20003910
 8011ec4:	20003e70 	.word	0x20003e70
 8011ec8:	20003880 	.word	0x20003880
 8011ecc:	2000387c 	.word	0x2000387c
 8011ed0:	20003868 	.word	0x20003868

08011ed4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b08a      	sub	sp, #40	; 0x28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ee4:	617b      	str	r3, [r7, #20]
    return(posture);
 8011ee6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011ee8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011eea:	b672      	cpsid	i
    return(int_posture);
 8011eec:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8011eee:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ef4:	2b04      	cmp	r3, #4
 8011ef6:	d10e      	bne.n	8011f16 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8011ef8:	4b13      	ldr	r3, [pc, #76]	; (8011f48 <_tx_thread_timeout+0x74>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	3301      	adds	r3, #1
 8011efe:	4a12      	ldr	r2, [pc, #72]	; (8011f48 <_tx_thread_timeout+0x74>)
 8011f00:	6013      	str	r3, [r2, #0]
 8011f02:	6a3b      	ldr	r3, [r7, #32]
 8011f04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f383 8810 	msr	PRIMASK, r3
}
 8011f0c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f10:	f7ff fcea 	bl	80118e8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8011f14:	e013      	b.n	8011f3e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f1a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011f22:	61bb      	str	r3, [r7, #24]
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	f383 8810 	msr	PRIMASK, r3
}
 8011f2e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d003      	beq.n	8011f3e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	69b9      	ldr	r1, [r7, #24]
 8011f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f3c:	4798      	blx	r3
}
 8011f3e:	bf00      	nop
 8011f40:	3728      	adds	r7, #40	; 0x28
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20003900 	.word	0x20003900

08011f4c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b08a      	sub	sp, #40	; 0x28
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
 8011f58:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8011f5a:	222c      	movs	r2, #44	; 0x2c
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f000 fff2 	bl	8012f48 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f6e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f74:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	683a      	ldr	r2, [r7, #0]
 8011f80:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f82:	f3ef 8310 	mrs	r3, PRIMASK
 8011f86:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011f88:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011f8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f8c:	b672      	cpsid	i
    return(int_posture);
 8011f8e:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8011f90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	4a1c      	ldr	r2, [pc, #112]	; (8012008 <_tx_timer_create+0xbc>)
 8011f96:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8011f98:	4b1c      	ldr	r3, [pc, #112]	; (801200c <_tx_timer_create+0xc0>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d109      	bne.n	8011fb4 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8011fa0:	4a1b      	ldr	r2, [pc, #108]	; (8012010 <_tx_timer_create+0xc4>)
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	68fa      	ldr	r2, [r7, #12]
 8011faa:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	629a      	str	r2, [r3, #40]	; 0x28
 8011fb2:	e011      	b.n	8011fd8 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8011fb4:	4b16      	ldr	r3, [pc, #88]	; (8012010 <_tx_timer_create+0xc4>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8011fba:	6a3b      	ldr	r3, [r7, #32]
 8011fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fbe:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8011fc0:	6a3b      	ldr	r3, [r7, #32]
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	68fa      	ldr	r2, [r7, #12]
 8011fca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	69fa      	ldr	r2, [r7, #28]
 8011fd0:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6a3a      	ldr	r2, [r7, #32]
 8011fd6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8011fd8:	4b0c      	ldr	r3, [pc, #48]	; (801200c <_tx_timer_create+0xc0>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	4a0b      	ldr	r2, [pc, #44]	; (801200c <_tx_timer_create+0xc0>)
 8011fe0:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8011fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d104      	bne.n	8011ff2 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	3308      	adds	r3, #8
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 f8af 	bl	8012150 <_tx_timer_system_activate>
 8011ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	f383 8810 	msr	PRIMASK, r3
}
 8011ffc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3728      	adds	r7, #40	; 0x28
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	4154494d 	.word	0x4154494d
 801200c:	200039a8 	.word	0x200039a8
 8012010:	200039a4 	.word	0x200039a4

08012014 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801201a:	f3ef 8310 	mrs	r3, PRIMASK
 801201e:	607b      	str	r3, [r7, #4]
    return(posture);
 8012020:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8012022:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012024:	b672      	cpsid	i
    return(int_posture);
 8012026:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012028:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801202a:	4b09      	ldr	r3, [pc, #36]	; (8012050 <_tx_timer_expiration_process+0x3c>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	3301      	adds	r3, #1
 8012030:	4a07      	ldr	r2, [pc, #28]	; (8012050 <_tx_timer_expiration_process+0x3c>)
 8012032:	6013      	str	r3, [r2, #0]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	f383 8810 	msr	PRIMASK, r3
}
 801203e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012040:	4804      	ldr	r0, [pc, #16]	; (8012054 <_tx_timer_expiration_process+0x40>)
 8012042:	f7ff fc51 	bl	80118e8 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012046:	bf00      	nop
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	20003900 	.word	0x20003900
 8012054:	200039b0 	.word	0x200039b0

08012058 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012058:	b590      	push	{r4, r7, lr}
 801205a:	b089      	sub	sp, #36	; 0x24
 801205c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801205e:	4b28      	ldr	r3, [pc, #160]	; (8012100 <_tx_timer_initialize+0xa8>)
 8012060:	2200      	movs	r2, #0
 8012062:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012064:	4b27      	ldr	r3, [pc, #156]	; (8012104 <_tx_timer_initialize+0xac>)
 8012066:	2200      	movs	r2, #0
 8012068:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801206a:	4b27      	ldr	r3, [pc, #156]	; (8012108 <_tx_timer_initialize+0xb0>)
 801206c:	2200      	movs	r2, #0
 801206e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012070:	4b26      	ldr	r3, [pc, #152]	; (801210c <_tx_timer_initialize+0xb4>)
 8012072:	2200      	movs	r2, #0
 8012074:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8012076:	4b26      	ldr	r3, [pc, #152]	; (8012110 <_tx_timer_initialize+0xb8>)
 8012078:	2200      	movs	r2, #0
 801207a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801207c:	2280      	movs	r2, #128	; 0x80
 801207e:	2100      	movs	r1, #0
 8012080:	4824      	ldr	r0, [pc, #144]	; (8012114 <_tx_timer_initialize+0xbc>)
 8012082:	f000 ff61 	bl	8012f48 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8012086:	4b24      	ldr	r3, [pc, #144]	; (8012118 <_tx_timer_initialize+0xc0>)
 8012088:	4a22      	ldr	r2, [pc, #136]	; (8012114 <_tx_timer_initialize+0xbc>)
 801208a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801208c:	4b23      	ldr	r3, [pc, #140]	; (801211c <_tx_timer_initialize+0xc4>)
 801208e:	4a21      	ldr	r2, [pc, #132]	; (8012114 <_tx_timer_initialize+0xbc>)
 8012090:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8012092:	4b23      	ldr	r3, [pc, #140]	; (8012120 <_tx_timer_initialize+0xc8>)
 8012094:	4a23      	ldr	r2, [pc, #140]	; (8012124 <_tx_timer_initialize+0xcc>)
 8012096:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8012098:	4b21      	ldr	r3, [pc, #132]	; (8012120 <_tx_timer_initialize+0xc8>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3304      	adds	r3, #4
 801209e:	4a20      	ldr	r2, [pc, #128]	; (8012120 <_tx_timer_initialize+0xc8>)
 80120a0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80120a2:	4b21      	ldr	r3, [pc, #132]	; (8012128 <_tx_timer_initialize+0xd0>)
 80120a4:	4a21      	ldr	r2, [pc, #132]	; (801212c <_tx_timer_initialize+0xd4>)
 80120a6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80120a8:	4b21      	ldr	r3, [pc, #132]	; (8012130 <_tx_timer_initialize+0xd8>)
 80120aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80120ae:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80120b0:	4b20      	ldr	r3, [pc, #128]	; (8012134 <_tx_timer_initialize+0xdc>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 80120b6:	4b1c      	ldr	r3, [pc, #112]	; (8012128 <_tx_timer_initialize+0xd0>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a1d      	ldr	r2, [pc, #116]	; (8012130 <_tx_timer_initialize+0xd8>)
 80120bc:	6812      	ldr	r2, [r2, #0]
 80120be:	491d      	ldr	r1, [pc, #116]	; (8012134 <_tx_timer_initialize+0xdc>)
 80120c0:	6809      	ldr	r1, [r1, #0]
 80120c2:	481c      	ldr	r0, [pc, #112]	; (8012134 <_tx_timer_initialize+0xdc>)
 80120c4:	6800      	ldr	r0, [r0, #0]
 80120c6:	2400      	movs	r4, #0
 80120c8:	9405      	str	r4, [sp, #20]
 80120ca:	2400      	movs	r4, #0
 80120cc:	9404      	str	r4, [sp, #16]
 80120ce:	9003      	str	r0, [sp, #12]
 80120d0:	9102      	str	r1, [sp, #8]
 80120d2:	9201      	str	r2, [sp, #4]
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	4b18      	ldr	r3, [pc, #96]	; (8012138 <_tx_timer_initialize+0xe0>)
 80120d8:	4a18      	ldr	r2, [pc, #96]	; (801213c <_tx_timer_initialize+0xe4>)
 80120da:	4919      	ldr	r1, [pc, #100]	; (8012140 <_tx_timer_initialize+0xe8>)
 80120dc:	4819      	ldr	r0, [pc, #100]	; (8012144 <_tx_timer_initialize+0xec>)
 80120de:	f7ff fa2f 	bl	8011540 <_tx_thread_create>
 80120e2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1e5      	bne.n	80120b6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80120ea:	4b17      	ldr	r3, [pc, #92]	; (8012148 <_tx_timer_initialize+0xf0>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80120f0:	4b16      	ldr	r3, [pc, #88]	; (801214c <_tx_timer_initialize+0xf4>)
 80120f2:	2200      	movs	r2, #0
 80120f4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80120f6:	bf00      	nop
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd90      	pop	{r4, r7, pc}
 80120fe:	bf00      	nop
 8012100:	2000390c 	.word	0x2000390c
 8012104:	20003e70 	.word	0x20003e70
 8012108:	20003910 	.word	0x20003910
 801210c:	200039a0 	.word	0x200039a0
 8012110:	200039ac 	.word	0x200039ac
 8012114:	20003914 	.word	0x20003914
 8012118:	20003994 	.word	0x20003994
 801211c:	2000399c 	.word	0x2000399c
 8012120:	20003998 	.word	0x20003998
 8012124:	20003990 	.word	0x20003990
 8012128:	20003a64 	.word	0x20003a64
 801212c:	20003a70 	.word	0x20003a70
 8012130:	20003a68 	.word	0x20003a68
 8012134:	20003a6c 	.word	0x20003a6c
 8012138:	4154494d 	.word	0x4154494d
 801213c:	08012285 	.word	0x08012285
 8012140:	080198e4 	.word	0x080198e4
 8012144:	200039b0 	.word	0x200039b0
 8012148:	200039a4 	.word	0x200039a4
 801214c:	200039a8 	.word	0x200039a8

08012150 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012150:	b480      	push	{r7}
 8012152:	b089      	sub	sp, #36	; 0x24
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d04a      	beq.n	80121fa <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801216a:	d046      	beq.n	80121fa <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	699b      	ldr	r3, [r3, #24]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d142      	bne.n	80121fa <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	2b20      	cmp	r3, #32
 8012178:	d902      	bls.n	8012180 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801217a:	231f      	movs	r3, #31
 801217c:	61bb      	str	r3, [r7, #24]
 801217e:	e002      	b.n	8012186 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	3b01      	subs	r3, #1
 8012184:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8012186:	4b20      	ldr	r3, [pc, #128]	; (8012208 <_tx_timer_system_activate+0xb8>)
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	4413      	add	r3, r2
 8012190:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012192:	4b1e      	ldr	r3, [pc, #120]	; (801220c <_tx_timer_system_activate+0xbc>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	69fa      	ldr	r2, [r7, #28]
 8012198:	429a      	cmp	r2, r3
 801219a:	d30b      	bcc.n	80121b4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801219c:	4b1b      	ldr	r3, [pc, #108]	; (801220c <_tx_timer_system_activate+0xbc>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	69fa      	ldr	r2, [r7, #28]
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	109b      	asrs	r3, r3, #2
 80121a6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80121a8:	4b19      	ldr	r3, [pc, #100]	; (8012210 <_tx_timer_system_activate+0xc0>)
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	4413      	add	r3, r2
 80121b2:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d109      	bne.n	80121d0 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80121c8:	69fb      	ldr	r3, [r7, #28]
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	e011      	b.n	80121f4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	695b      	ldr	r3, [r3, #20]
 80121da:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	68fa      	ldr	r2, [r7, #12]
 80121ec:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	68ba      	ldr	r2, [r7, #8]
 80121f2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	69fa      	ldr	r2, [r7, #28]
 80121f8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80121fa:	bf00      	nop
 80121fc:	3724      	adds	r7, #36	; 0x24
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr
 8012206:	bf00      	nop
 8012208:	2000399c 	.word	0x2000399c
 801220c:	20003998 	.word	0x20003998
 8012210:	20003994 	.word	0x20003994

08012214 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012214:	b480      	push	{r7}
 8012216:	b087      	sub	sp, #28
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d026      	beq.n	8012276 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	691b      	ldr	r3, [r3, #16]
 801222c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	429a      	cmp	r2, r3
 8012234:	d108      	bne.n	8012248 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	687a      	ldr	r2, [r7, #4]
 801223c:	429a      	cmp	r2, r3
 801223e:	d117      	bne.n	8012270 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	2200      	movs	r2, #0
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	e013      	b.n	8012270 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	695b      	ldr	r3, [r3, #20]
 801224c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	693a      	ldr	r2, [r7, #16]
 8012258:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	429a      	cmp	r2, r3
 8012262:	d105      	bne.n	8012270 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	697a      	ldr	r2, [r7, #20]
 8012268:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	693a      	ldr	r2, [r7, #16]
 801226e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2200      	movs	r2, #0
 8012274:	619a      	str	r2, [r3, #24]
    }
}
 8012276:	bf00      	nop
 8012278:	371c      	adds	r7, #28
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr
	...

08012284 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b098      	sub	sp, #96	; 0x60
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801228c:	2300      	movs	r3, #0
 801228e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	4a73      	ldr	r2, [pc, #460]	; (8012460 <_tx_timer_thread_entry+0x1dc>)
 8012294:	4293      	cmp	r3, r2
 8012296:	f040 80de 	bne.w	8012456 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801229a:	f3ef 8310 	mrs	r3, PRIMASK
 801229e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80122a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80122a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80122a4:	b672      	cpsid	i
    return(int_posture);
 80122a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80122a8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80122aa:	4b6e      	ldr	r3, [pc, #440]	; (8012464 <_tx_timer_thread_entry+0x1e0>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d003      	beq.n	80122c0 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f107 020c 	add.w	r2, r7, #12
 80122be:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80122c0:	4b68      	ldr	r3, [pc, #416]	; (8012464 <_tx_timer_thread_entry+0x1e0>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2200      	movs	r2, #0
 80122c6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80122c8:	4b66      	ldr	r3, [pc, #408]	; (8012464 <_tx_timer_thread_entry+0x1e0>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	3304      	adds	r3, #4
 80122ce:	4a65      	ldr	r2, [pc, #404]	; (8012464 <_tx_timer_thread_entry+0x1e0>)
 80122d0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80122d2:	4b64      	ldr	r3, [pc, #400]	; (8012464 <_tx_timer_thread_entry+0x1e0>)
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	4b64      	ldr	r3, [pc, #400]	; (8012468 <_tx_timer_thread_entry+0x1e4>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d103      	bne.n	80122e6 <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80122de:	4b63      	ldr	r3, [pc, #396]	; (801246c <_tx_timer_thread_entry+0x1e8>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	4a60      	ldr	r2, [pc, #384]	; (8012464 <_tx_timer_thread_entry+0x1e0>)
 80122e4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80122e6:	4b62      	ldr	r3, [pc, #392]	; (8012470 <_tx_timer_thread_entry+0x1ec>)
 80122e8:	2200      	movs	r2, #0
 80122ea:	601a      	str	r2, [r3, #0]
 80122ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122ee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f2:	f383 8810 	msr	PRIMASK, r3
}
 80122f6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122f8:	f3ef 8310 	mrs	r3, PRIMASK
 80122fc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80122fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012300:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012302:	b672      	cpsid	i
    return(int_posture);
 8012304:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012306:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8012308:	e07f      	b.n	801240a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	691b      	ldr	r3, [r3, #16]
 8012312:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012314:	2300      	movs	r3, #0
 8012316:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8012318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801231a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801231c:	429a      	cmp	r2, r3
 801231e:	d102      	bne.n	8012326 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012320:	2300      	movs	r3, #0
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	e00e      	b.n	8012344 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8012326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012328:	695b      	ldr	r3, [r3, #20]
 801232a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801232c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801232e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012330:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012336:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801233a:	f107 020c 	add.w	r2, r7, #12
 801233e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012342:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b20      	cmp	r3, #32
 801234a:	d911      	bls.n	8012370 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 8012354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012356:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012358:	2300      	movs	r3, #0
 801235a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801235e:	f107 0208 	add.w	r2, r7, #8
 8012362:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012368:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801236c:	60bb      	str	r3, [r7, #8]
 801236e:	e01a      	b.n	80123a6 <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012372:	689b      	ldr	r3, [r3, #8]
 8012374:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8012376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801237c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801237e:	685a      	ldr	r2, [r3, #4]
 8012380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012382:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8012384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d009      	beq.n	80123a0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801238e:	f107 0208 	add.w	r2, r7, #8
 8012392:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8012394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012396:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012398:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239c:	60bb      	str	r3, [r7, #8]
 801239e:	e002      	b.n	80123a6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80123a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a2:	2200      	movs	r2, #0
 80123a4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80123a6:	4a33      	ldr	r2, [pc, #204]	; (8012474 <_tx_timer_thread_entry+0x1f0>)
 80123a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123aa:	6013      	str	r3, [r2, #0]
 80123ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b2:	f383 8810 	msr	PRIMASK, r3
}
 80123b6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80123b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d002      	beq.n	80123c4 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 80123be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80123c2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123c4:	f3ef 8310 	mrs	r3, PRIMASK
 80123c8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80123ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80123cc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80123ce:	b672      	cpsid	i
    return(int_posture);
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80123d2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80123d4:	4b27      	ldr	r3, [pc, #156]	; (8012474 <_tx_timer_thread_entry+0x1f0>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123de:	429a      	cmp	r2, r3
 80123e0:	d105      	bne.n	80123ee <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80123e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123e4:	2200      	movs	r2, #0
 80123e6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80123e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80123ea:	f7ff feb1 	bl	8012150 <_tx_timer_system_activate>
 80123ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	f383 8810 	msr	PRIMASK, r3
}
 80123f8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123fa:	f3ef 8310 	mrs	r3, PRIMASK
 80123fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8012400:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012402:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012404:	b672      	cpsid	i
    return(int_posture);
 8012406:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012408:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2b00      	cmp	r3, #0
 801240e:	f47f af7c 	bne.w	801230a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012412:	4b17      	ldr	r3, [pc, #92]	; (8012470 <_tx_timer_thread_entry+0x1ec>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d116      	bne.n	8012448 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801241a:	4b17      	ldr	r3, [pc, #92]	; (8012478 <_tx_timer_thread_entry+0x1f4>)
 801241c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801241e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012420:	2203      	movs	r2, #3
 8012422:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012426:	2201      	movs	r2, #1
 8012428:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801242a:	4b14      	ldr	r3, [pc, #80]	; (801247c <_tx_timer_thread_entry+0x1f8>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	3301      	adds	r3, #1
 8012430:	4a12      	ldr	r2, [pc, #72]	; (801247c <_tx_timer_thread_entry+0x1f8>)
 8012432:	6013      	str	r3, [r2, #0]
 8012434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012436:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f383 8810 	msr	PRIMASK, r3
}
 801243e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012440:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012442:	f7ff fb65 	bl	8011b10 <_tx_thread_system_suspend>
 8012446:	e728      	b.n	801229a <_tx_timer_thread_entry+0x16>
 8012448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801244a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	f383 8810 	msr	PRIMASK, r3
}
 8012452:	bf00      	nop
            TX_DISABLE
 8012454:	e721      	b.n	801229a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012456:	bf00      	nop
 8012458:	3760      	adds	r7, #96	; 0x60
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	4154494d 	.word	0x4154494d
 8012464:	2000399c 	.word	0x2000399c
 8012468:	20003998 	.word	0x20003998
 801246c:	20003994 	.word	0x20003994
 8012470:	200039a0 	.word	0x200039a0
 8012474:	200039ac 	.word	0x200039ac
 8012478:	200039b0 	.word	0x200039b0
 801247c:	20003900 	.word	0x20003900

08012480 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b08a      	sub	sp, #40	; 0x28
 8012484:	af00      	add	r7, sp, #0
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	607a      	str	r2, [r7, #4]
 801248c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801248e:	2300      	movs	r3, #0
 8012490:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d102      	bne.n	801249e <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012498:	2302      	movs	r3, #2
 801249a:	627b      	str	r3, [r7, #36]	; 0x24
 801249c:	e029      	b.n	80124f2 <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4a2d      	ldr	r2, [pc, #180]	; (8012558 <_txe_byte_allocate+0xd8>)
 80124a4:	4293      	cmp	r3, r2
 80124a6:	d002      	beq.n	80124ae <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80124a8:	2302      	movs	r3, #2
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24
 80124ac:	e021      	b.n	80124f2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d102      	bne.n	80124ba <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80124b4:	2303      	movs	r3, #3
 80124b6:	627b      	str	r3, [r7, #36]	; 0x24
 80124b8:	e01b      	b.n	80124f2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d102      	bne.n	80124c6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80124c0:	2305      	movs	r3, #5
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24
 80124c4:	e015      	b.n	80124f2 <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	69db      	ldr	r3, [r3, #28]
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d902      	bls.n	80124d6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80124d0:	2305      	movs	r3, #5
 80124d2:	627b      	str	r3, [r7, #36]	; 0x24
 80124d4:	e00d      	b.n	80124f2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d00a      	beq.n	80124f2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124dc:	f3ef 8305 	mrs	r3, IPSR
 80124e0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80124e2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80124e4:	4b1d      	ldr	r3, [pc, #116]	; (801255c <_txe_byte_allocate+0xdc>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4313      	orrs	r3, r2
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80124ee:	2304      	movs	r3, #4
 80124f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80124f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d108      	bne.n	801250a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80124f8:	4b19      	ldr	r3, [pc, #100]	; (8012560 <_txe_byte_allocate+0xe0>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80124fe:	6a3b      	ldr	r3, [r7, #32]
 8012500:	4a18      	ldr	r2, [pc, #96]	; (8012564 <_txe_byte_allocate+0xe4>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d101      	bne.n	801250a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8012506:	2313      	movs	r3, #19
 8012508:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250c:	2b00      	cmp	r3, #0
 801250e:	d114      	bne.n	801253a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012510:	f3ef 8305 	mrs	r3, IPSR
 8012514:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012516:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012518:	4b10      	ldr	r3, [pc, #64]	; (801255c <_txe_byte_allocate+0xdc>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	4313      	orrs	r3, r2
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012522:	f3ef 8305 	mrs	r3, IPSR
 8012526:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012528:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801252a:	4b0c      	ldr	r3, [pc, #48]	; (801255c <_txe_byte_allocate+0xdc>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4313      	orrs	r3, r2
 8012530:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012534:	d201      	bcs.n	801253a <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012536:	2313      	movs	r3, #19
 8012538:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253c:	2b00      	cmp	r3, #0
 801253e:	d106      	bne.n	801254e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7fe fc3a 	bl	8010dc0 <_tx_byte_allocate>
 801254c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012550:	4618      	mov	r0, r3
 8012552:	3728      	adds	r7, #40	; 0x28
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	42595445 	.word	0x42595445
 801255c:	20000084 	.word	0x20000084
 8012560:	20003864 	.word	0x20003864
 8012564:	200039b0 	.word	0x200039b0

08012568 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b092      	sub	sp, #72	; 0x48
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012576:	2300      	movs	r3, #0
 8012578:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d102      	bne.n	8012586 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012580:	2302      	movs	r3, #2
 8012582:	647b      	str	r3, [r7, #68]	; 0x44
 8012584:	e075      	b.n	8012672 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012588:	2b34      	cmp	r3, #52	; 0x34
 801258a:	d002      	beq.n	8012592 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801258c:	2302      	movs	r3, #2
 801258e:	647b      	str	r3, [r7, #68]	; 0x44
 8012590:	e06f      	b.n	8012672 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012592:	f3ef 8310 	mrs	r3, PRIMASK
 8012596:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801259a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801259c:	b672      	cpsid	i
    return(int_posture);
 801259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 80125a0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80125a2:	4b3b      	ldr	r3, [pc, #236]	; (8012690 <_txe_byte_pool_create+0x128>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	3301      	adds	r3, #1
 80125a8:	4a39      	ldr	r2, [pc, #228]	; (8012690 <_txe_byte_pool_create+0x128>)
 80125aa:	6013      	str	r3, [r2, #0]
 80125ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ae:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b2:	f383 8810 	msr	PRIMASK, r3
}
 80125b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80125b8:	4b36      	ldr	r3, [pc, #216]	; (8012694 <_txe_byte_pool_create+0x12c>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80125be:	2300      	movs	r3, #0
 80125c0:	643b      	str	r3, [r7, #64]	; 0x40
 80125c2:	e009      	b.n	80125d8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d00b      	beq.n	80125e4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80125cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80125d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d4:	3301      	adds	r3, #1
 80125d6:	643b      	str	r3, [r7, #64]	; 0x40
 80125d8:	4b2f      	ldr	r3, [pc, #188]	; (8012698 <_txe_byte_pool_create+0x130>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125de:	429a      	cmp	r2, r3
 80125e0:	d3f0      	bcc.n	80125c4 <_txe_byte_pool_create+0x5c>
 80125e2:	e000      	b.n	80125e6 <_txe_byte_pool_create+0x7e>
                break;
 80125e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125e6:	f3ef 8310 	mrs	r3, PRIMASK
 80125ea:	623b      	str	r3, [r7, #32]
    return(posture);
 80125ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80125ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125f0:	b672      	cpsid	i
    return(int_posture);
 80125f2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80125f4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80125f6:	4b26      	ldr	r3, [pc, #152]	; (8012690 <_txe_byte_pool_create+0x128>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	3b01      	subs	r3, #1
 80125fc:	4a24      	ldr	r2, [pc, #144]	; (8012690 <_txe_byte_pool_create+0x128>)
 80125fe:	6013      	str	r3, [r2, #0]
 8012600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012602:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012606:	f383 8810 	msr	PRIMASK, r3
}
 801260a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801260c:	f7ff f932 	bl	8011874 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8012610:	68fa      	ldr	r2, [r7, #12]
 8012612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012614:	429a      	cmp	r2, r3
 8012616:	d102      	bne.n	801261e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012618:	2302      	movs	r3, #2
 801261a:	647b      	str	r3, [r7, #68]	; 0x44
 801261c:	e029      	b.n	8012672 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d102      	bne.n	801262a <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012624:	2303      	movs	r3, #3
 8012626:	647b      	str	r3, [r7, #68]	; 0x44
 8012628:	e023      	b.n	8012672 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	2b63      	cmp	r3, #99	; 0x63
 801262e:	d802      	bhi.n	8012636 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8012630:	2305      	movs	r3, #5
 8012632:	647b      	str	r3, [r7, #68]	; 0x44
 8012634:	e01d      	b.n	8012672 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012636:	4b19      	ldr	r3, [pc, #100]	; (801269c <_txe_byte_pool_create+0x134>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801263e:	4a18      	ldr	r2, [pc, #96]	; (80126a0 <_txe_byte_pool_create+0x138>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d101      	bne.n	8012648 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012644:	2313      	movs	r3, #19
 8012646:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012648:	f3ef 8305 	mrs	r3, IPSR
 801264c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801264e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012650:	4b14      	ldr	r3, [pc, #80]	; (80126a4 <_txe_byte_pool_create+0x13c>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4313      	orrs	r3, r2
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00b      	beq.n	8012672 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801265a:	f3ef 8305 	mrs	r3, IPSR
 801265e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012660:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012662:	4b10      	ldr	r3, [pc, #64]	; (80126a4 <_txe_byte_pool_create+0x13c>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4313      	orrs	r3, r2
 8012668:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801266c:	d201      	bcs.n	8012672 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801266e:	2313      	movs	r3, #19
 8012670:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012674:	2b00      	cmp	r3, #0
 8012676:	d106      	bne.n	8012686 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	68b9      	ldr	r1, [r7, #8]
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f7fe fce0 	bl	8011044 <_tx_byte_pool_create>
 8012684:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8012686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012688:	4618      	mov	r0, r3
 801268a:	3748      	adds	r7, #72	; 0x48
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	20003900 	.word	0x20003900
 8012694:	20003854 	.word	0x20003854
 8012698:	20003858 	.word	0x20003858
 801269c:	20003864 	.word	0x20003864
 80126a0:	200039b0 	.word	0x200039b0
 80126a4:	20000084 	.word	0x20000084

080126a8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d102      	bne.n	80126bc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80126b6:	230c      	movs	r3, #12
 80126b8:	60fb      	str	r3, [r7, #12]
 80126ba:	e00b      	b.n	80126d4 <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4a07      	ldr	r2, [pc, #28]	; (80126e0 <_txe_semaphore_put+0x38>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d002      	beq.n	80126cc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80126c6:	230c      	movs	r3, #12
 80126c8:	60fb      	str	r3, [r7, #12]
 80126ca:	e003      	b.n	80126d4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f7fe fecb 	bl	8011468 <_tx_semaphore_put>
 80126d2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80126d4:	68fb      	ldr	r3, [r7, #12]
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3710      	adds	r7, #16
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	53454d41 	.word	0x53454d41

080126e4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b09a      	sub	sp, #104	; 0x68
 80126e8:	af06      	add	r7, sp, #24
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
 80126f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80126f2:	2300      	movs	r3, #0
 80126f4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d102      	bne.n	8012702 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80126fc:	230e      	movs	r3, #14
 80126fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012700:	e0bb      	b.n	801287a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8012702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012704:	2bb4      	cmp	r3, #180	; 0xb4
 8012706:	d002      	beq.n	801270e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012708:	230e      	movs	r3, #14
 801270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801270c:	e0b5      	b.n	801287a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801270e:	f3ef 8310 	mrs	r3, PRIMASK
 8012712:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8012714:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8012716:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012718:	b672      	cpsid	i
    return(int_posture);
 801271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801271c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801271e:	4b64      	ldr	r3, [pc, #400]	; (80128b0 <_txe_thread_create+0x1cc>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	3301      	adds	r3, #1
 8012724:	4a62      	ldr	r2, [pc, #392]	; (80128b0 <_txe_thread_create+0x1cc>)
 8012726:	6013      	str	r3, [r2, #0]
 8012728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272e:	f383 8810 	msr	PRIMASK, r3
}
 8012732:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8012734:	2300      	movs	r3, #0
 8012736:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8012738:	4b5e      	ldr	r3, [pc, #376]	; (80128b4 <_txe_thread_create+0x1d0>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801273e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012740:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8012742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012744:	3b01      	subs	r3, #1
 8012746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012748:	4413      	add	r3, r2
 801274a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012750:	2300      	movs	r3, #0
 8012752:	647b      	str	r3, [r7, #68]	; 0x44
 8012754:	e02b      	b.n	80127ae <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801275a:	429a      	cmp	r2, r3
 801275c:	d101      	bne.n	8012762 <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801275e:	2301      	movs	r3, #1
 8012760:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8012762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012764:	2b01      	cmp	r3, #1
 8012766:	d028      	beq.n	80127ba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8012768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801276e:	429a      	cmp	r2, r3
 8012770:	d308      	bcc.n	8012784 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8012772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012778:	429a      	cmp	r2, r3
 801277a:	d203      	bcs.n	8012784 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801277c:	2300      	movs	r3, #0
 801277e:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012780:	2301      	movs	r3, #1
 8012782:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8012784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801278a:	429a      	cmp	r2, r3
 801278c:	d308      	bcc.n	80127a0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801278e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012790:	691b      	ldr	r3, [r3, #16]
 8012792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012794:	429a      	cmp	r2, r3
 8012796:	d203      	bcs.n	80127a0 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012798:	2300      	movs	r3, #0
 801279a:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801279c:	2301      	movs	r3, #1
 801279e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80127a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127a6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80127a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127aa:	3301      	adds	r3, #1
 80127ac:	647b      	str	r3, [r7, #68]	; 0x44
 80127ae:	4b42      	ldr	r3, [pc, #264]	; (80128b8 <_txe_thread_create+0x1d4>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d3ce      	bcc.n	8012756 <_txe_thread_create+0x72>
 80127b8:	e000      	b.n	80127bc <_txe_thread_create+0xd8>
                break;
 80127ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127bc:	f3ef 8310 	mrs	r3, PRIMASK
 80127c0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80127c2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80127c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127c6:	b672      	cpsid	i
    return(int_posture);
 80127c8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80127ca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80127cc:	4b38      	ldr	r3, [pc, #224]	; (80128b0 <_txe_thread_create+0x1cc>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	3b01      	subs	r3, #1
 80127d2:	4a37      	ldr	r2, [pc, #220]	; (80128b0 <_txe_thread_create+0x1cc>)
 80127d4:	6013      	str	r3, [r2, #0]
 80127d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127da:	6a3b      	ldr	r3, [r7, #32]
 80127dc:	f383 8810 	msr	PRIMASK, r3
}
 80127e0:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80127e2:	f7ff f847 	bl	8011874 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80127e6:	68fa      	ldr	r2, [r7, #12]
 80127e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d102      	bne.n	80127f4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80127ee:	230e      	movs	r3, #14
 80127f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127f2:	e042      	b.n	801287a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80127f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d102      	bne.n	8012800 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80127fa:	2303      	movs	r3, #3
 80127fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127fe:	e03c      	b.n	801287a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d102      	bne.n	801280c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8012806:	2303      	movs	r3, #3
 8012808:	64fb      	str	r3, [r7, #76]	; 0x4c
 801280a:	e036      	b.n	801287a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801280e:	2bc7      	cmp	r3, #199	; 0xc7
 8012810:	d802      	bhi.n	8012818 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8012812:	2305      	movs	r3, #5
 8012814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012816:	e030      	b.n	801287a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8012818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801281a:	2b1f      	cmp	r3, #31
 801281c:	d902      	bls.n	8012824 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801281e:	230f      	movs	r3, #15
 8012820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012822:	e02a      	b.n	801287a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8012824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012828:	429a      	cmp	r2, r3
 801282a:	d902      	bls.n	8012832 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801282c:	2318      	movs	r3, #24
 801282e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012830:	e023      	b.n	801287a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8012832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012834:	2b01      	cmp	r3, #1
 8012836:	d902      	bls.n	801283e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8012838:	2310      	movs	r3, #16
 801283a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801283c:	e01d      	b.n	801287a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801283e:	4b1f      	ldr	r3, [pc, #124]	; (80128bc <_txe_thread_create+0x1d8>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	4a1e      	ldr	r2, [pc, #120]	; (80128c0 <_txe_thread_create+0x1dc>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d101      	bne.n	8012850 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801284c:	2313      	movs	r3, #19
 801284e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012850:	f3ef 8305 	mrs	r3, IPSR
 8012854:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012856:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012858:	4b1a      	ldr	r3, [pc, #104]	; (80128c4 <_txe_thread_create+0x1e0>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4313      	orrs	r3, r2
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00b      	beq.n	801287a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012862:	f3ef 8305 	mrs	r3, IPSR
 8012866:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012868:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801286a:	4b16      	ldr	r3, [pc, #88]	; (80128c4 <_txe_thread_create+0x1e0>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	4313      	orrs	r3, r2
 8012870:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012874:	d201      	bcs.n	801287a <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012876:	2313      	movs	r3, #19
 8012878:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801287c:	2b00      	cmp	r3, #0
 801287e:	d112      	bne.n	80128a6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8012880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012882:	9305      	str	r3, [sp, #20]
 8012884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012886:	9304      	str	r3, [sp, #16]
 8012888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801288a:	9303      	str	r3, [sp, #12]
 801288c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801288e:	9302      	str	r3, [sp, #8]
 8012890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012892:	9301      	str	r3, [sp, #4]
 8012894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	68b9      	ldr	r1, [r7, #8]
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f7fe fe4e 	bl	8011540 <_tx_thread_create>
 80128a4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80128a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3750      	adds	r7, #80	; 0x50
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	20003900 	.word	0x20003900
 80128b4:	2000386c 	.word	0x2000386c
 80128b8:	20003870 	.word	0x20003870
 80128bc:	20003864 	.word	0x20003864
 80128c0:	200039b0 	.word	0x200039b0
 80128c4:	20000084 	.word	0x20000084

080128c8 <atof>:
 80128c8:	2100      	movs	r1, #0
 80128ca:	f002 ba2b 	b.w	8014d24 <strtod>

080128ce <atoi>:
 80128ce:	220a      	movs	r2, #10
 80128d0:	2100      	movs	r1, #0
 80128d2:	f002 bab7 	b.w	8014e44 <strtol>
	...

080128d8 <__errno>:
 80128d8:	4b01      	ldr	r3, [pc, #4]	; (80128e0 <__errno+0x8>)
 80128da:	6818      	ldr	r0, [r3, #0]
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	20000088 	.word	0x20000088

080128e4 <__sflush_r>:
 80128e4:	898a      	ldrh	r2, [r1, #12]
 80128e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ea:	4605      	mov	r5, r0
 80128ec:	0710      	lsls	r0, r2, #28
 80128ee:	460c      	mov	r4, r1
 80128f0:	d458      	bmi.n	80129a4 <__sflush_r+0xc0>
 80128f2:	684b      	ldr	r3, [r1, #4]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	dc05      	bgt.n	8012904 <__sflush_r+0x20>
 80128f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	dc02      	bgt.n	8012904 <__sflush_r+0x20>
 80128fe:	2000      	movs	r0, #0
 8012900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012906:	2e00      	cmp	r6, #0
 8012908:	d0f9      	beq.n	80128fe <__sflush_r+0x1a>
 801290a:	2300      	movs	r3, #0
 801290c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012910:	682f      	ldr	r7, [r5, #0]
 8012912:	602b      	str	r3, [r5, #0]
 8012914:	d032      	beq.n	801297c <__sflush_r+0x98>
 8012916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012918:	89a3      	ldrh	r3, [r4, #12]
 801291a:	075a      	lsls	r2, r3, #29
 801291c:	d505      	bpl.n	801292a <__sflush_r+0x46>
 801291e:	6863      	ldr	r3, [r4, #4]
 8012920:	1ac0      	subs	r0, r0, r3
 8012922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012924:	b10b      	cbz	r3, 801292a <__sflush_r+0x46>
 8012926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012928:	1ac0      	subs	r0, r0, r3
 801292a:	2300      	movs	r3, #0
 801292c:	4602      	mov	r2, r0
 801292e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012930:	6a21      	ldr	r1, [r4, #32]
 8012932:	4628      	mov	r0, r5
 8012934:	47b0      	blx	r6
 8012936:	1c43      	adds	r3, r0, #1
 8012938:	89a3      	ldrh	r3, [r4, #12]
 801293a:	d106      	bne.n	801294a <__sflush_r+0x66>
 801293c:	6829      	ldr	r1, [r5, #0]
 801293e:	291d      	cmp	r1, #29
 8012940:	d82c      	bhi.n	801299c <__sflush_r+0xb8>
 8012942:	4a2a      	ldr	r2, [pc, #168]	; (80129ec <__sflush_r+0x108>)
 8012944:	40ca      	lsrs	r2, r1
 8012946:	07d6      	lsls	r6, r2, #31
 8012948:	d528      	bpl.n	801299c <__sflush_r+0xb8>
 801294a:	2200      	movs	r2, #0
 801294c:	6062      	str	r2, [r4, #4]
 801294e:	04d9      	lsls	r1, r3, #19
 8012950:	6922      	ldr	r2, [r4, #16]
 8012952:	6022      	str	r2, [r4, #0]
 8012954:	d504      	bpl.n	8012960 <__sflush_r+0x7c>
 8012956:	1c42      	adds	r2, r0, #1
 8012958:	d101      	bne.n	801295e <__sflush_r+0x7a>
 801295a:	682b      	ldr	r3, [r5, #0]
 801295c:	b903      	cbnz	r3, 8012960 <__sflush_r+0x7c>
 801295e:	6560      	str	r0, [r4, #84]	; 0x54
 8012960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012962:	602f      	str	r7, [r5, #0]
 8012964:	2900      	cmp	r1, #0
 8012966:	d0ca      	beq.n	80128fe <__sflush_r+0x1a>
 8012968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801296c:	4299      	cmp	r1, r3
 801296e:	d002      	beq.n	8012976 <__sflush_r+0x92>
 8012970:	4628      	mov	r0, r5
 8012972:	f000 fb07 	bl	8012f84 <_free_r>
 8012976:	2000      	movs	r0, #0
 8012978:	6360      	str	r0, [r4, #52]	; 0x34
 801297a:	e7c1      	b.n	8012900 <__sflush_r+0x1c>
 801297c:	6a21      	ldr	r1, [r4, #32]
 801297e:	2301      	movs	r3, #1
 8012980:	4628      	mov	r0, r5
 8012982:	47b0      	blx	r6
 8012984:	1c41      	adds	r1, r0, #1
 8012986:	d1c7      	bne.n	8012918 <__sflush_r+0x34>
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d0c4      	beq.n	8012918 <__sflush_r+0x34>
 801298e:	2b1d      	cmp	r3, #29
 8012990:	d001      	beq.n	8012996 <__sflush_r+0xb2>
 8012992:	2b16      	cmp	r3, #22
 8012994:	d101      	bne.n	801299a <__sflush_r+0xb6>
 8012996:	602f      	str	r7, [r5, #0]
 8012998:	e7b1      	b.n	80128fe <__sflush_r+0x1a>
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129a0:	81a3      	strh	r3, [r4, #12]
 80129a2:	e7ad      	b.n	8012900 <__sflush_r+0x1c>
 80129a4:	690f      	ldr	r7, [r1, #16]
 80129a6:	2f00      	cmp	r7, #0
 80129a8:	d0a9      	beq.n	80128fe <__sflush_r+0x1a>
 80129aa:	0793      	lsls	r3, r2, #30
 80129ac:	680e      	ldr	r6, [r1, #0]
 80129ae:	bf08      	it	eq
 80129b0:	694b      	ldreq	r3, [r1, #20]
 80129b2:	600f      	str	r7, [r1, #0]
 80129b4:	bf18      	it	ne
 80129b6:	2300      	movne	r3, #0
 80129b8:	eba6 0807 	sub.w	r8, r6, r7
 80129bc:	608b      	str	r3, [r1, #8]
 80129be:	f1b8 0f00 	cmp.w	r8, #0
 80129c2:	dd9c      	ble.n	80128fe <__sflush_r+0x1a>
 80129c4:	6a21      	ldr	r1, [r4, #32]
 80129c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129c8:	4643      	mov	r3, r8
 80129ca:	463a      	mov	r2, r7
 80129cc:	4628      	mov	r0, r5
 80129ce:	47b0      	blx	r6
 80129d0:	2800      	cmp	r0, #0
 80129d2:	dc06      	bgt.n	80129e2 <__sflush_r+0xfe>
 80129d4:	89a3      	ldrh	r3, [r4, #12]
 80129d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129da:	81a3      	strh	r3, [r4, #12]
 80129dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129e0:	e78e      	b.n	8012900 <__sflush_r+0x1c>
 80129e2:	4407      	add	r7, r0
 80129e4:	eba8 0800 	sub.w	r8, r8, r0
 80129e8:	e7e9      	b.n	80129be <__sflush_r+0xda>
 80129ea:	bf00      	nop
 80129ec:	20400001 	.word	0x20400001

080129f0 <_fflush_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	690b      	ldr	r3, [r1, #16]
 80129f4:	4605      	mov	r5, r0
 80129f6:	460c      	mov	r4, r1
 80129f8:	b913      	cbnz	r3, 8012a00 <_fflush_r+0x10>
 80129fa:	2500      	movs	r5, #0
 80129fc:	4628      	mov	r0, r5
 80129fe:	bd38      	pop	{r3, r4, r5, pc}
 8012a00:	b118      	cbz	r0, 8012a0a <_fflush_r+0x1a>
 8012a02:	6983      	ldr	r3, [r0, #24]
 8012a04:	b90b      	cbnz	r3, 8012a0a <_fflush_r+0x1a>
 8012a06:	f000 f887 	bl	8012b18 <__sinit>
 8012a0a:	4b14      	ldr	r3, [pc, #80]	; (8012a5c <_fflush_r+0x6c>)
 8012a0c:	429c      	cmp	r4, r3
 8012a0e:	d11b      	bne.n	8012a48 <_fflush_r+0x58>
 8012a10:	686c      	ldr	r4, [r5, #4]
 8012a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d0ef      	beq.n	80129fa <_fflush_r+0xa>
 8012a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a1c:	07d0      	lsls	r0, r2, #31
 8012a1e:	d404      	bmi.n	8012a2a <_fflush_r+0x3a>
 8012a20:	0599      	lsls	r1, r3, #22
 8012a22:	d402      	bmi.n	8012a2a <_fflush_r+0x3a>
 8012a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a26:	f000 f9fa 	bl	8012e1e <__retarget_lock_acquire_recursive>
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	f7ff ff59 	bl	80128e4 <__sflush_r>
 8012a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a34:	07da      	lsls	r2, r3, #31
 8012a36:	4605      	mov	r5, r0
 8012a38:	d4e0      	bmi.n	80129fc <_fflush_r+0xc>
 8012a3a:	89a3      	ldrh	r3, [r4, #12]
 8012a3c:	059b      	lsls	r3, r3, #22
 8012a3e:	d4dd      	bmi.n	80129fc <_fflush_r+0xc>
 8012a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a42:	f000 f9ed 	bl	8012e20 <__retarget_lock_release_recursive>
 8012a46:	e7d9      	b.n	80129fc <_fflush_r+0xc>
 8012a48:	4b05      	ldr	r3, [pc, #20]	; (8012a60 <_fflush_r+0x70>)
 8012a4a:	429c      	cmp	r4, r3
 8012a4c:	d101      	bne.n	8012a52 <_fflush_r+0x62>
 8012a4e:	68ac      	ldr	r4, [r5, #8]
 8012a50:	e7df      	b.n	8012a12 <_fflush_r+0x22>
 8012a52:	4b04      	ldr	r3, [pc, #16]	; (8012a64 <_fflush_r+0x74>)
 8012a54:	429c      	cmp	r4, r3
 8012a56:	bf08      	it	eq
 8012a58:	68ec      	ldreq	r4, [r5, #12]
 8012a5a:	e7da      	b.n	8012a12 <_fflush_r+0x22>
 8012a5c:	0801c314 	.word	0x0801c314
 8012a60:	0801c334 	.word	0x0801c334
 8012a64:	0801c2f4 	.word	0x0801c2f4

08012a68 <std>:
 8012a68:	2300      	movs	r3, #0
 8012a6a:	b510      	push	{r4, lr}
 8012a6c:	4604      	mov	r4, r0
 8012a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8012a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a76:	6083      	str	r3, [r0, #8]
 8012a78:	8181      	strh	r1, [r0, #12]
 8012a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8012a7c:	81c2      	strh	r2, [r0, #14]
 8012a7e:	6183      	str	r3, [r0, #24]
 8012a80:	4619      	mov	r1, r3
 8012a82:	2208      	movs	r2, #8
 8012a84:	305c      	adds	r0, #92	; 0x5c
 8012a86:	f000 fa5f 	bl	8012f48 <memset>
 8012a8a:	4b05      	ldr	r3, [pc, #20]	; (8012aa0 <std+0x38>)
 8012a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8012a8e:	4b05      	ldr	r3, [pc, #20]	; (8012aa4 <std+0x3c>)
 8012a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a92:	4b05      	ldr	r3, [pc, #20]	; (8012aa8 <std+0x40>)
 8012a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a96:	4b05      	ldr	r3, [pc, #20]	; (8012aac <std+0x44>)
 8012a98:	6224      	str	r4, [r4, #32]
 8012a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a9c:	bd10      	pop	{r4, pc}
 8012a9e:	bf00      	nop
 8012aa0:	08013b9d 	.word	0x08013b9d
 8012aa4:	08013bc3 	.word	0x08013bc3
 8012aa8:	08013bfb 	.word	0x08013bfb
 8012aac:	08013c1f 	.word	0x08013c1f

08012ab0 <_cleanup_r>:
 8012ab0:	4901      	ldr	r1, [pc, #4]	; (8012ab8 <_cleanup_r+0x8>)
 8012ab2:	f000 b901 	b.w	8012cb8 <_fwalk_reent>
 8012ab6:	bf00      	nop
 8012ab8:	080129f1 	.word	0x080129f1

08012abc <__sfmoreglue>:
 8012abc:	b570      	push	{r4, r5, r6, lr}
 8012abe:	2268      	movs	r2, #104	; 0x68
 8012ac0:	1e4d      	subs	r5, r1, #1
 8012ac2:	4355      	muls	r5, r2
 8012ac4:	460e      	mov	r6, r1
 8012ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012aca:	f000 fac7 	bl	801305c <_malloc_r>
 8012ace:	4604      	mov	r4, r0
 8012ad0:	b140      	cbz	r0, 8012ae4 <__sfmoreglue+0x28>
 8012ad2:	2100      	movs	r1, #0
 8012ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8012ad8:	300c      	adds	r0, #12
 8012ada:	60a0      	str	r0, [r4, #8]
 8012adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ae0:	f000 fa32 	bl	8012f48 <memset>
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	bd70      	pop	{r4, r5, r6, pc}

08012ae8 <__sfp_lock_acquire>:
 8012ae8:	4801      	ldr	r0, [pc, #4]	; (8012af0 <__sfp_lock_acquire+0x8>)
 8012aea:	f000 b998 	b.w	8012e1e <__retarget_lock_acquire_recursive>
 8012aee:	bf00      	nop
 8012af0:	20003e75 	.word	0x20003e75

08012af4 <__sfp_lock_release>:
 8012af4:	4801      	ldr	r0, [pc, #4]	; (8012afc <__sfp_lock_release+0x8>)
 8012af6:	f000 b993 	b.w	8012e20 <__retarget_lock_release_recursive>
 8012afa:	bf00      	nop
 8012afc:	20003e75 	.word	0x20003e75

08012b00 <__sinit_lock_acquire>:
 8012b00:	4801      	ldr	r0, [pc, #4]	; (8012b08 <__sinit_lock_acquire+0x8>)
 8012b02:	f000 b98c 	b.w	8012e1e <__retarget_lock_acquire_recursive>
 8012b06:	bf00      	nop
 8012b08:	20003e76 	.word	0x20003e76

08012b0c <__sinit_lock_release>:
 8012b0c:	4801      	ldr	r0, [pc, #4]	; (8012b14 <__sinit_lock_release+0x8>)
 8012b0e:	f000 b987 	b.w	8012e20 <__retarget_lock_release_recursive>
 8012b12:	bf00      	nop
 8012b14:	20003e76 	.word	0x20003e76

08012b18 <__sinit>:
 8012b18:	b510      	push	{r4, lr}
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	f7ff fff0 	bl	8012b00 <__sinit_lock_acquire>
 8012b20:	69a3      	ldr	r3, [r4, #24]
 8012b22:	b11b      	cbz	r3, 8012b2c <__sinit+0x14>
 8012b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b28:	f7ff bff0 	b.w	8012b0c <__sinit_lock_release>
 8012b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012b30:	6523      	str	r3, [r4, #80]	; 0x50
 8012b32:	4b13      	ldr	r3, [pc, #76]	; (8012b80 <__sinit+0x68>)
 8012b34:	4a13      	ldr	r2, [pc, #76]	; (8012b84 <__sinit+0x6c>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8012b3a:	42a3      	cmp	r3, r4
 8012b3c:	bf04      	itt	eq
 8012b3e:	2301      	moveq	r3, #1
 8012b40:	61a3      	streq	r3, [r4, #24]
 8012b42:	4620      	mov	r0, r4
 8012b44:	f000 f820 	bl	8012b88 <__sfp>
 8012b48:	6060      	str	r0, [r4, #4]
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f000 f81c 	bl	8012b88 <__sfp>
 8012b50:	60a0      	str	r0, [r4, #8]
 8012b52:	4620      	mov	r0, r4
 8012b54:	f000 f818 	bl	8012b88 <__sfp>
 8012b58:	2200      	movs	r2, #0
 8012b5a:	60e0      	str	r0, [r4, #12]
 8012b5c:	2104      	movs	r1, #4
 8012b5e:	6860      	ldr	r0, [r4, #4]
 8012b60:	f7ff ff82 	bl	8012a68 <std>
 8012b64:	68a0      	ldr	r0, [r4, #8]
 8012b66:	2201      	movs	r2, #1
 8012b68:	2109      	movs	r1, #9
 8012b6a:	f7ff ff7d 	bl	8012a68 <std>
 8012b6e:	68e0      	ldr	r0, [r4, #12]
 8012b70:	2202      	movs	r2, #2
 8012b72:	2112      	movs	r1, #18
 8012b74:	f7ff ff78 	bl	8012a68 <std>
 8012b78:	2301      	movs	r3, #1
 8012b7a:	61a3      	str	r3, [r4, #24]
 8012b7c:	e7d2      	b.n	8012b24 <__sinit+0xc>
 8012b7e:	bf00      	nop
 8012b80:	0801c354 	.word	0x0801c354
 8012b84:	08012ab1 	.word	0x08012ab1

08012b88 <__sfp>:
 8012b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8a:	4607      	mov	r7, r0
 8012b8c:	f7ff ffac 	bl	8012ae8 <__sfp_lock_acquire>
 8012b90:	4b1e      	ldr	r3, [pc, #120]	; (8012c0c <__sfp+0x84>)
 8012b92:	681e      	ldr	r6, [r3, #0]
 8012b94:	69b3      	ldr	r3, [r6, #24]
 8012b96:	b913      	cbnz	r3, 8012b9e <__sfp+0x16>
 8012b98:	4630      	mov	r0, r6
 8012b9a:	f7ff ffbd 	bl	8012b18 <__sinit>
 8012b9e:	3648      	adds	r6, #72	; 0x48
 8012ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ba4:	3b01      	subs	r3, #1
 8012ba6:	d503      	bpl.n	8012bb0 <__sfp+0x28>
 8012ba8:	6833      	ldr	r3, [r6, #0]
 8012baa:	b30b      	cbz	r3, 8012bf0 <__sfp+0x68>
 8012bac:	6836      	ldr	r6, [r6, #0]
 8012bae:	e7f7      	b.n	8012ba0 <__sfp+0x18>
 8012bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012bb4:	b9d5      	cbnz	r5, 8012bec <__sfp+0x64>
 8012bb6:	4b16      	ldr	r3, [pc, #88]	; (8012c10 <__sfp+0x88>)
 8012bb8:	60e3      	str	r3, [r4, #12]
 8012bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8012bc0:	f000 f92c 	bl	8012e1c <__retarget_lock_init_recursive>
 8012bc4:	f7ff ff96 	bl	8012af4 <__sfp_lock_release>
 8012bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012bd0:	6025      	str	r5, [r4, #0]
 8012bd2:	61a5      	str	r5, [r4, #24]
 8012bd4:	2208      	movs	r2, #8
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012bdc:	f000 f9b4 	bl	8012f48 <memset>
 8012be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012be8:	4620      	mov	r0, r4
 8012bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bec:	3468      	adds	r4, #104	; 0x68
 8012bee:	e7d9      	b.n	8012ba4 <__sfp+0x1c>
 8012bf0:	2104      	movs	r1, #4
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	f7ff ff62 	bl	8012abc <__sfmoreglue>
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	6030      	str	r0, [r6, #0]
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d1d5      	bne.n	8012bac <__sfp+0x24>
 8012c00:	f7ff ff78 	bl	8012af4 <__sfp_lock_release>
 8012c04:	230c      	movs	r3, #12
 8012c06:	603b      	str	r3, [r7, #0]
 8012c08:	e7ee      	b.n	8012be8 <__sfp+0x60>
 8012c0a:	bf00      	nop
 8012c0c:	0801c354 	.word	0x0801c354
 8012c10:	ffff0001 	.word	0xffff0001

08012c14 <fiprintf>:
 8012c14:	b40e      	push	{r1, r2, r3}
 8012c16:	b503      	push	{r0, r1, lr}
 8012c18:	4601      	mov	r1, r0
 8012c1a:	ab03      	add	r3, sp, #12
 8012c1c:	4805      	ldr	r0, [pc, #20]	; (8012c34 <fiprintf+0x20>)
 8012c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c22:	6800      	ldr	r0, [r0, #0]
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	f000 fab7 	bl	8013198 <_vfiprintf_r>
 8012c2a:	b002      	add	sp, #8
 8012c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c30:	b003      	add	sp, #12
 8012c32:	4770      	bx	lr
 8012c34:	20000088 	.word	0x20000088

08012c38 <_fputc_r>:
 8012c38:	b570      	push	{r4, r5, r6, lr}
 8012c3a:	460e      	mov	r6, r1
 8012c3c:	4614      	mov	r4, r2
 8012c3e:	4605      	mov	r5, r0
 8012c40:	b118      	cbz	r0, 8012c4a <_fputc_r+0x12>
 8012c42:	6983      	ldr	r3, [r0, #24]
 8012c44:	b90b      	cbnz	r3, 8012c4a <_fputc_r+0x12>
 8012c46:	f7ff ff67 	bl	8012b18 <__sinit>
 8012c4a:	4b14      	ldr	r3, [pc, #80]	; (8012c9c <_fputc_r+0x64>)
 8012c4c:	429c      	cmp	r4, r3
 8012c4e:	d11a      	bne.n	8012c86 <_fputc_r+0x4e>
 8012c50:	686c      	ldr	r4, [r5, #4]
 8012c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c54:	07d8      	lsls	r0, r3, #31
 8012c56:	d405      	bmi.n	8012c64 <_fputc_r+0x2c>
 8012c58:	89a3      	ldrh	r3, [r4, #12]
 8012c5a:	0599      	lsls	r1, r3, #22
 8012c5c:	d402      	bmi.n	8012c64 <_fputc_r+0x2c>
 8012c5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c60:	f000 f8dd 	bl	8012e1e <__retarget_lock_acquire_recursive>
 8012c64:	4622      	mov	r2, r4
 8012c66:	4628      	mov	r0, r5
 8012c68:	4631      	mov	r1, r6
 8012c6a:	f000 fd63 	bl	8013734 <_putc_r>
 8012c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c70:	07da      	lsls	r2, r3, #31
 8012c72:	4605      	mov	r5, r0
 8012c74:	d405      	bmi.n	8012c82 <_fputc_r+0x4a>
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	059b      	lsls	r3, r3, #22
 8012c7a:	d402      	bmi.n	8012c82 <_fputc_r+0x4a>
 8012c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c7e:	f000 f8cf 	bl	8012e20 <__retarget_lock_release_recursive>
 8012c82:	4628      	mov	r0, r5
 8012c84:	bd70      	pop	{r4, r5, r6, pc}
 8012c86:	4b06      	ldr	r3, [pc, #24]	; (8012ca0 <_fputc_r+0x68>)
 8012c88:	429c      	cmp	r4, r3
 8012c8a:	d101      	bne.n	8012c90 <_fputc_r+0x58>
 8012c8c:	68ac      	ldr	r4, [r5, #8]
 8012c8e:	e7e0      	b.n	8012c52 <_fputc_r+0x1a>
 8012c90:	4b04      	ldr	r3, [pc, #16]	; (8012ca4 <_fputc_r+0x6c>)
 8012c92:	429c      	cmp	r4, r3
 8012c94:	bf08      	it	eq
 8012c96:	68ec      	ldreq	r4, [r5, #12]
 8012c98:	e7db      	b.n	8012c52 <_fputc_r+0x1a>
 8012c9a:	bf00      	nop
 8012c9c:	0801c314 	.word	0x0801c314
 8012ca0:	0801c334 	.word	0x0801c334
 8012ca4:	0801c2f4 	.word	0x0801c2f4

08012ca8 <fputc>:
 8012ca8:	4b02      	ldr	r3, [pc, #8]	; (8012cb4 <fputc+0xc>)
 8012caa:	460a      	mov	r2, r1
 8012cac:	4601      	mov	r1, r0
 8012cae:	6818      	ldr	r0, [r3, #0]
 8012cb0:	f7ff bfc2 	b.w	8012c38 <_fputc_r>
 8012cb4:	20000088 	.word	0x20000088

08012cb8 <_fwalk_reent>:
 8012cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cbc:	4606      	mov	r6, r0
 8012cbe:	4688      	mov	r8, r1
 8012cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012cc4:	2700      	movs	r7, #0
 8012cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012cca:	f1b9 0901 	subs.w	r9, r9, #1
 8012cce:	d505      	bpl.n	8012cdc <_fwalk_reent+0x24>
 8012cd0:	6824      	ldr	r4, [r4, #0]
 8012cd2:	2c00      	cmp	r4, #0
 8012cd4:	d1f7      	bne.n	8012cc6 <_fwalk_reent+0xe>
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cdc:	89ab      	ldrh	r3, [r5, #12]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d907      	bls.n	8012cf2 <_fwalk_reent+0x3a>
 8012ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	d003      	beq.n	8012cf2 <_fwalk_reent+0x3a>
 8012cea:	4629      	mov	r1, r5
 8012cec:	4630      	mov	r0, r6
 8012cee:	47c0      	blx	r8
 8012cf0:	4307      	orrs	r7, r0
 8012cf2:	3568      	adds	r5, #104	; 0x68
 8012cf4:	e7e9      	b.n	8012cca <_fwalk_reent+0x12>
	...

08012cf8 <_fwrite_r>:
 8012cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cfc:	9c08      	ldr	r4, [sp, #32]
 8012cfe:	468a      	mov	sl, r1
 8012d00:	4690      	mov	r8, r2
 8012d02:	fb02 f903 	mul.w	r9, r2, r3
 8012d06:	4605      	mov	r5, r0
 8012d08:	b118      	cbz	r0, 8012d12 <_fwrite_r+0x1a>
 8012d0a:	6983      	ldr	r3, [r0, #24]
 8012d0c:	b90b      	cbnz	r3, 8012d12 <_fwrite_r+0x1a>
 8012d0e:	f7ff ff03 	bl	8012b18 <__sinit>
 8012d12:	4b26      	ldr	r3, [pc, #152]	; (8012dac <_fwrite_r+0xb4>)
 8012d14:	429c      	cmp	r4, r3
 8012d16:	d123      	bne.n	8012d60 <_fwrite_r+0x68>
 8012d18:	686c      	ldr	r4, [r5, #4]
 8012d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d1c:	07de      	lsls	r6, r3, #31
 8012d1e:	d405      	bmi.n	8012d2c <_fwrite_r+0x34>
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	0598      	lsls	r0, r3, #22
 8012d24:	d402      	bmi.n	8012d2c <_fwrite_r+0x34>
 8012d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d28:	f000 f879 	bl	8012e1e <__retarget_lock_acquire_recursive>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	0719      	lsls	r1, r3, #28
 8012d30:	d520      	bpl.n	8012d74 <_fwrite_r+0x7c>
 8012d32:	6923      	ldr	r3, [r4, #16]
 8012d34:	b1f3      	cbz	r3, 8012d74 <_fwrite_r+0x7c>
 8012d36:	2600      	movs	r6, #0
 8012d38:	454e      	cmp	r6, r9
 8012d3a:	d029      	beq.n	8012d90 <_fwrite_r+0x98>
 8012d3c:	68a7      	ldr	r7, [r4, #8]
 8012d3e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8012d42:	3f01      	subs	r7, #1
 8012d44:	2f00      	cmp	r7, #0
 8012d46:	60a7      	str	r7, [r4, #8]
 8012d48:	da04      	bge.n	8012d54 <_fwrite_r+0x5c>
 8012d4a:	69a3      	ldr	r3, [r4, #24]
 8012d4c:	429f      	cmp	r7, r3
 8012d4e:	db19      	blt.n	8012d84 <_fwrite_r+0x8c>
 8012d50:	290a      	cmp	r1, #10
 8012d52:	d017      	beq.n	8012d84 <_fwrite_r+0x8c>
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	1c5a      	adds	r2, r3, #1
 8012d58:	6022      	str	r2, [r4, #0]
 8012d5a:	7019      	strb	r1, [r3, #0]
 8012d5c:	3601      	adds	r6, #1
 8012d5e:	e7eb      	b.n	8012d38 <_fwrite_r+0x40>
 8012d60:	4b13      	ldr	r3, [pc, #76]	; (8012db0 <_fwrite_r+0xb8>)
 8012d62:	429c      	cmp	r4, r3
 8012d64:	d101      	bne.n	8012d6a <_fwrite_r+0x72>
 8012d66:	68ac      	ldr	r4, [r5, #8]
 8012d68:	e7d7      	b.n	8012d1a <_fwrite_r+0x22>
 8012d6a:	4b12      	ldr	r3, [pc, #72]	; (8012db4 <_fwrite_r+0xbc>)
 8012d6c:	429c      	cmp	r4, r3
 8012d6e:	bf08      	it	eq
 8012d70:	68ec      	ldreq	r4, [r5, #12]
 8012d72:	e7d2      	b.n	8012d1a <_fwrite_r+0x22>
 8012d74:	4621      	mov	r1, r4
 8012d76:	4628      	mov	r0, r5
 8012d78:	f002 f8dc 	bl	8014f34 <__swsetup_r>
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	d0da      	beq.n	8012d36 <_fwrite_r+0x3e>
 8012d80:	2600      	movs	r6, #0
 8012d82:	e005      	b.n	8012d90 <_fwrite_r+0x98>
 8012d84:	4622      	mov	r2, r4
 8012d86:	4628      	mov	r0, r5
 8012d88:	f002 f870 	bl	8014e6c <__swbuf_r>
 8012d8c:	3001      	adds	r0, #1
 8012d8e:	d1e5      	bne.n	8012d5c <_fwrite_r+0x64>
 8012d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d92:	07da      	lsls	r2, r3, #31
 8012d94:	d405      	bmi.n	8012da2 <_fwrite_r+0xaa>
 8012d96:	89a3      	ldrh	r3, [r4, #12]
 8012d98:	059b      	lsls	r3, r3, #22
 8012d9a:	d402      	bmi.n	8012da2 <_fwrite_r+0xaa>
 8012d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d9e:	f000 f83f 	bl	8012e20 <__retarget_lock_release_recursive>
 8012da2:	fbb6 f0f8 	udiv	r0, r6, r8
 8012da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012daa:	bf00      	nop
 8012dac:	0801c314 	.word	0x0801c314
 8012db0:	0801c334 	.word	0x0801c334
 8012db4:	0801c2f4 	.word	0x0801c2f4

08012db8 <fwrite>:
 8012db8:	b507      	push	{r0, r1, r2, lr}
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	460a      	mov	r2, r1
 8012dc0:	4601      	mov	r1, r0
 8012dc2:	4803      	ldr	r0, [pc, #12]	; (8012dd0 <fwrite+0x18>)
 8012dc4:	6800      	ldr	r0, [r0, #0]
 8012dc6:	f7ff ff97 	bl	8012cf8 <_fwrite_r>
 8012dca:	b003      	add	sp, #12
 8012dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8012dd0:	20000088 	.word	0x20000088

08012dd4 <__libc_init_array>:
 8012dd4:	b570      	push	{r4, r5, r6, lr}
 8012dd6:	4d0d      	ldr	r5, [pc, #52]	; (8012e0c <__libc_init_array+0x38>)
 8012dd8:	4c0d      	ldr	r4, [pc, #52]	; (8012e10 <__libc_init_array+0x3c>)
 8012dda:	1b64      	subs	r4, r4, r5
 8012ddc:	10a4      	asrs	r4, r4, #2
 8012dde:	2600      	movs	r6, #0
 8012de0:	42a6      	cmp	r6, r4
 8012de2:	d109      	bne.n	8012df8 <__libc_init_array+0x24>
 8012de4:	4d0b      	ldr	r5, [pc, #44]	; (8012e14 <__libc_init_array+0x40>)
 8012de6:	4c0c      	ldr	r4, [pc, #48]	; (8012e18 <__libc_init_array+0x44>)
 8012de8:	f004 f81c 	bl	8016e24 <_init>
 8012dec:	1b64      	subs	r4, r4, r5
 8012dee:	10a4      	asrs	r4, r4, #2
 8012df0:	2600      	movs	r6, #0
 8012df2:	42a6      	cmp	r6, r4
 8012df4:	d105      	bne.n	8012e02 <__libc_init_array+0x2e>
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dfc:	4798      	blx	r3
 8012dfe:	3601      	adds	r6, #1
 8012e00:	e7ee      	b.n	8012de0 <__libc_init_array+0xc>
 8012e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e06:	4798      	blx	r3
 8012e08:	3601      	adds	r6, #1
 8012e0a:	e7f2      	b.n	8012df2 <__libc_init_array+0x1e>
 8012e0c:	0801ccdc 	.word	0x0801ccdc
 8012e10:	0801ccdc 	.word	0x0801ccdc
 8012e14:	0801ccdc 	.word	0x0801ccdc
 8012e18:	0801cce0 	.word	0x0801cce0

08012e1c <__retarget_lock_init_recursive>:
 8012e1c:	4770      	bx	lr

08012e1e <__retarget_lock_acquire_recursive>:
 8012e1e:	4770      	bx	lr

08012e20 <__retarget_lock_release_recursive>:
 8012e20:	4770      	bx	lr

08012e22 <__swhatbuf_r>:
 8012e22:	b570      	push	{r4, r5, r6, lr}
 8012e24:	460e      	mov	r6, r1
 8012e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e2a:	2900      	cmp	r1, #0
 8012e2c:	b096      	sub	sp, #88	; 0x58
 8012e2e:	4614      	mov	r4, r2
 8012e30:	461d      	mov	r5, r3
 8012e32:	da08      	bge.n	8012e46 <__swhatbuf_r+0x24>
 8012e34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	602a      	str	r2, [r5, #0]
 8012e3c:	061a      	lsls	r2, r3, #24
 8012e3e:	d410      	bmi.n	8012e62 <__swhatbuf_r+0x40>
 8012e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e44:	e00e      	b.n	8012e64 <__swhatbuf_r+0x42>
 8012e46:	466a      	mov	r2, sp
 8012e48:	f002 f8f2 	bl	8015030 <_fstat_r>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	dbf1      	blt.n	8012e34 <__swhatbuf_r+0x12>
 8012e50:	9a01      	ldr	r2, [sp, #4]
 8012e52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012e56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012e5a:	425a      	negs	r2, r3
 8012e5c:	415a      	adcs	r2, r3
 8012e5e:	602a      	str	r2, [r5, #0]
 8012e60:	e7ee      	b.n	8012e40 <__swhatbuf_r+0x1e>
 8012e62:	2340      	movs	r3, #64	; 0x40
 8012e64:	2000      	movs	r0, #0
 8012e66:	6023      	str	r3, [r4, #0]
 8012e68:	b016      	add	sp, #88	; 0x58
 8012e6a:	bd70      	pop	{r4, r5, r6, pc}

08012e6c <__smakebuf_r>:
 8012e6c:	898b      	ldrh	r3, [r1, #12]
 8012e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e70:	079d      	lsls	r5, r3, #30
 8012e72:	4606      	mov	r6, r0
 8012e74:	460c      	mov	r4, r1
 8012e76:	d507      	bpl.n	8012e88 <__smakebuf_r+0x1c>
 8012e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e7c:	6023      	str	r3, [r4, #0]
 8012e7e:	6123      	str	r3, [r4, #16]
 8012e80:	2301      	movs	r3, #1
 8012e82:	6163      	str	r3, [r4, #20]
 8012e84:	b002      	add	sp, #8
 8012e86:	bd70      	pop	{r4, r5, r6, pc}
 8012e88:	ab01      	add	r3, sp, #4
 8012e8a:	466a      	mov	r2, sp
 8012e8c:	f7ff ffc9 	bl	8012e22 <__swhatbuf_r>
 8012e90:	9900      	ldr	r1, [sp, #0]
 8012e92:	4605      	mov	r5, r0
 8012e94:	4630      	mov	r0, r6
 8012e96:	f000 f8e1 	bl	801305c <_malloc_r>
 8012e9a:	b948      	cbnz	r0, 8012eb0 <__smakebuf_r+0x44>
 8012e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ea0:	059a      	lsls	r2, r3, #22
 8012ea2:	d4ef      	bmi.n	8012e84 <__smakebuf_r+0x18>
 8012ea4:	f023 0303 	bic.w	r3, r3, #3
 8012ea8:	f043 0302 	orr.w	r3, r3, #2
 8012eac:	81a3      	strh	r3, [r4, #12]
 8012eae:	e7e3      	b.n	8012e78 <__smakebuf_r+0xc>
 8012eb0:	4b0d      	ldr	r3, [pc, #52]	; (8012ee8 <__smakebuf_r+0x7c>)
 8012eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012eb4:	89a3      	ldrh	r3, [r4, #12]
 8012eb6:	6020      	str	r0, [r4, #0]
 8012eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ebc:	81a3      	strh	r3, [r4, #12]
 8012ebe:	9b00      	ldr	r3, [sp, #0]
 8012ec0:	6163      	str	r3, [r4, #20]
 8012ec2:	9b01      	ldr	r3, [sp, #4]
 8012ec4:	6120      	str	r0, [r4, #16]
 8012ec6:	b15b      	cbz	r3, 8012ee0 <__smakebuf_r+0x74>
 8012ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f002 fc43 	bl	8015758 <_isatty_r>
 8012ed2:	b128      	cbz	r0, 8012ee0 <__smakebuf_r+0x74>
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	f023 0303 	bic.w	r3, r3, #3
 8012eda:	f043 0301 	orr.w	r3, r3, #1
 8012ede:	81a3      	strh	r3, [r4, #12]
 8012ee0:	89a0      	ldrh	r0, [r4, #12]
 8012ee2:	4305      	orrs	r5, r0
 8012ee4:	81a5      	strh	r5, [r4, #12]
 8012ee6:	e7cd      	b.n	8012e84 <__smakebuf_r+0x18>
 8012ee8:	08012ab1 	.word	0x08012ab1

08012eec <malloc>:
 8012eec:	4b02      	ldr	r3, [pc, #8]	; (8012ef8 <malloc+0xc>)
 8012eee:	4601      	mov	r1, r0
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	f000 b8b3 	b.w	801305c <_malloc_r>
 8012ef6:	bf00      	nop
 8012ef8:	20000088 	.word	0x20000088

08012efc <free>:
 8012efc:	4b02      	ldr	r3, [pc, #8]	; (8012f08 <free+0xc>)
 8012efe:	4601      	mov	r1, r0
 8012f00:	6818      	ldr	r0, [r3, #0]
 8012f02:	f000 b83f 	b.w	8012f84 <_free_r>
 8012f06:	bf00      	nop
 8012f08:	20000088 	.word	0x20000088

08012f0c <memcmp>:
 8012f0c:	b510      	push	{r4, lr}
 8012f0e:	3901      	subs	r1, #1
 8012f10:	4402      	add	r2, r0
 8012f12:	4290      	cmp	r0, r2
 8012f14:	d101      	bne.n	8012f1a <memcmp+0xe>
 8012f16:	2000      	movs	r0, #0
 8012f18:	e005      	b.n	8012f26 <memcmp+0x1a>
 8012f1a:	7803      	ldrb	r3, [r0, #0]
 8012f1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f20:	42a3      	cmp	r3, r4
 8012f22:	d001      	beq.n	8012f28 <memcmp+0x1c>
 8012f24:	1b18      	subs	r0, r3, r4
 8012f26:	bd10      	pop	{r4, pc}
 8012f28:	3001      	adds	r0, #1
 8012f2a:	e7f2      	b.n	8012f12 <memcmp+0x6>

08012f2c <memcpy>:
 8012f2c:	440a      	add	r2, r1
 8012f2e:	4291      	cmp	r1, r2
 8012f30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012f34:	d100      	bne.n	8012f38 <memcpy+0xc>
 8012f36:	4770      	bx	lr
 8012f38:	b510      	push	{r4, lr}
 8012f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f42:	4291      	cmp	r1, r2
 8012f44:	d1f9      	bne.n	8012f3a <memcpy+0xe>
 8012f46:	bd10      	pop	{r4, pc}

08012f48 <memset>:
 8012f48:	4402      	add	r2, r0
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d100      	bne.n	8012f52 <memset+0xa>
 8012f50:	4770      	bx	lr
 8012f52:	f803 1b01 	strb.w	r1, [r3], #1
 8012f56:	e7f9      	b.n	8012f4c <memset+0x4>

08012f58 <_calloc_r>:
 8012f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f5a:	fba1 2402 	umull	r2, r4, r1, r2
 8012f5e:	b94c      	cbnz	r4, 8012f74 <_calloc_r+0x1c>
 8012f60:	4611      	mov	r1, r2
 8012f62:	9201      	str	r2, [sp, #4]
 8012f64:	f000 f87a 	bl	801305c <_malloc_r>
 8012f68:	9a01      	ldr	r2, [sp, #4]
 8012f6a:	4605      	mov	r5, r0
 8012f6c:	b930      	cbnz	r0, 8012f7c <_calloc_r+0x24>
 8012f6e:	4628      	mov	r0, r5
 8012f70:	b003      	add	sp, #12
 8012f72:	bd30      	pop	{r4, r5, pc}
 8012f74:	220c      	movs	r2, #12
 8012f76:	6002      	str	r2, [r0, #0]
 8012f78:	2500      	movs	r5, #0
 8012f7a:	e7f8      	b.n	8012f6e <_calloc_r+0x16>
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	f7ff ffe3 	bl	8012f48 <memset>
 8012f82:	e7f4      	b.n	8012f6e <_calloc_r+0x16>

08012f84 <_free_r>:
 8012f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f86:	2900      	cmp	r1, #0
 8012f88:	d044      	beq.n	8013014 <_free_r+0x90>
 8012f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f8e:	9001      	str	r0, [sp, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f1a1 0404 	sub.w	r4, r1, #4
 8012f96:	bfb8      	it	lt
 8012f98:	18e4      	addlt	r4, r4, r3
 8012f9a:	f002 fc2b 	bl	80157f4 <__malloc_lock>
 8012f9e:	4a1e      	ldr	r2, [pc, #120]	; (8013018 <_free_r+0x94>)
 8012fa0:	9801      	ldr	r0, [sp, #4]
 8012fa2:	6813      	ldr	r3, [r2, #0]
 8012fa4:	b933      	cbnz	r3, 8012fb4 <_free_r+0x30>
 8012fa6:	6063      	str	r3, [r4, #4]
 8012fa8:	6014      	str	r4, [r2, #0]
 8012faa:	b003      	add	sp, #12
 8012fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012fb0:	f002 bc26 	b.w	8015800 <__malloc_unlock>
 8012fb4:	42a3      	cmp	r3, r4
 8012fb6:	d908      	bls.n	8012fca <_free_r+0x46>
 8012fb8:	6825      	ldr	r5, [r4, #0]
 8012fba:	1961      	adds	r1, r4, r5
 8012fbc:	428b      	cmp	r3, r1
 8012fbe:	bf01      	itttt	eq
 8012fc0:	6819      	ldreq	r1, [r3, #0]
 8012fc2:	685b      	ldreq	r3, [r3, #4]
 8012fc4:	1949      	addeq	r1, r1, r5
 8012fc6:	6021      	streq	r1, [r4, #0]
 8012fc8:	e7ed      	b.n	8012fa6 <_free_r+0x22>
 8012fca:	461a      	mov	r2, r3
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	b10b      	cbz	r3, 8012fd4 <_free_r+0x50>
 8012fd0:	42a3      	cmp	r3, r4
 8012fd2:	d9fa      	bls.n	8012fca <_free_r+0x46>
 8012fd4:	6811      	ldr	r1, [r2, #0]
 8012fd6:	1855      	adds	r5, r2, r1
 8012fd8:	42a5      	cmp	r5, r4
 8012fda:	d10b      	bne.n	8012ff4 <_free_r+0x70>
 8012fdc:	6824      	ldr	r4, [r4, #0]
 8012fde:	4421      	add	r1, r4
 8012fe0:	1854      	adds	r4, r2, r1
 8012fe2:	42a3      	cmp	r3, r4
 8012fe4:	6011      	str	r1, [r2, #0]
 8012fe6:	d1e0      	bne.n	8012faa <_free_r+0x26>
 8012fe8:	681c      	ldr	r4, [r3, #0]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	6053      	str	r3, [r2, #4]
 8012fee:	4421      	add	r1, r4
 8012ff0:	6011      	str	r1, [r2, #0]
 8012ff2:	e7da      	b.n	8012faa <_free_r+0x26>
 8012ff4:	d902      	bls.n	8012ffc <_free_r+0x78>
 8012ff6:	230c      	movs	r3, #12
 8012ff8:	6003      	str	r3, [r0, #0]
 8012ffa:	e7d6      	b.n	8012faa <_free_r+0x26>
 8012ffc:	6825      	ldr	r5, [r4, #0]
 8012ffe:	1961      	adds	r1, r4, r5
 8013000:	428b      	cmp	r3, r1
 8013002:	bf04      	itt	eq
 8013004:	6819      	ldreq	r1, [r3, #0]
 8013006:	685b      	ldreq	r3, [r3, #4]
 8013008:	6063      	str	r3, [r4, #4]
 801300a:	bf04      	itt	eq
 801300c:	1949      	addeq	r1, r1, r5
 801300e:	6021      	streq	r1, [r4, #0]
 8013010:	6054      	str	r4, [r2, #4]
 8013012:	e7ca      	b.n	8012faa <_free_r+0x26>
 8013014:	b003      	add	sp, #12
 8013016:	bd30      	pop	{r4, r5, pc}
 8013018:	20003e78 	.word	0x20003e78

0801301c <sbrk_aligned>:
 801301c:	b570      	push	{r4, r5, r6, lr}
 801301e:	4e0e      	ldr	r6, [pc, #56]	; (8013058 <sbrk_aligned+0x3c>)
 8013020:	460c      	mov	r4, r1
 8013022:	6831      	ldr	r1, [r6, #0]
 8013024:	4605      	mov	r5, r0
 8013026:	b911      	cbnz	r1, 801302e <sbrk_aligned+0x12>
 8013028:	f000 fd5c 	bl	8013ae4 <_sbrk_r>
 801302c:	6030      	str	r0, [r6, #0]
 801302e:	4621      	mov	r1, r4
 8013030:	4628      	mov	r0, r5
 8013032:	f000 fd57 	bl	8013ae4 <_sbrk_r>
 8013036:	1c43      	adds	r3, r0, #1
 8013038:	d00a      	beq.n	8013050 <sbrk_aligned+0x34>
 801303a:	1cc4      	adds	r4, r0, #3
 801303c:	f024 0403 	bic.w	r4, r4, #3
 8013040:	42a0      	cmp	r0, r4
 8013042:	d007      	beq.n	8013054 <sbrk_aligned+0x38>
 8013044:	1a21      	subs	r1, r4, r0
 8013046:	4628      	mov	r0, r5
 8013048:	f000 fd4c 	bl	8013ae4 <_sbrk_r>
 801304c:	3001      	adds	r0, #1
 801304e:	d101      	bne.n	8013054 <sbrk_aligned+0x38>
 8013050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013054:	4620      	mov	r0, r4
 8013056:	bd70      	pop	{r4, r5, r6, pc}
 8013058:	20003e7c 	.word	0x20003e7c

0801305c <_malloc_r>:
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	1ccd      	adds	r5, r1, #3
 8013062:	f025 0503 	bic.w	r5, r5, #3
 8013066:	3508      	adds	r5, #8
 8013068:	2d0c      	cmp	r5, #12
 801306a:	bf38      	it	cc
 801306c:	250c      	movcc	r5, #12
 801306e:	2d00      	cmp	r5, #0
 8013070:	4607      	mov	r7, r0
 8013072:	db01      	blt.n	8013078 <_malloc_r+0x1c>
 8013074:	42a9      	cmp	r1, r5
 8013076:	d905      	bls.n	8013084 <_malloc_r+0x28>
 8013078:	230c      	movs	r3, #12
 801307a:	603b      	str	r3, [r7, #0]
 801307c:	2600      	movs	r6, #0
 801307e:	4630      	mov	r0, r6
 8013080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013084:	4e2e      	ldr	r6, [pc, #184]	; (8013140 <_malloc_r+0xe4>)
 8013086:	f002 fbb5 	bl	80157f4 <__malloc_lock>
 801308a:	6833      	ldr	r3, [r6, #0]
 801308c:	461c      	mov	r4, r3
 801308e:	bb34      	cbnz	r4, 80130de <_malloc_r+0x82>
 8013090:	4629      	mov	r1, r5
 8013092:	4638      	mov	r0, r7
 8013094:	f7ff ffc2 	bl	801301c <sbrk_aligned>
 8013098:	1c43      	adds	r3, r0, #1
 801309a:	4604      	mov	r4, r0
 801309c:	d14d      	bne.n	801313a <_malloc_r+0xde>
 801309e:	6834      	ldr	r4, [r6, #0]
 80130a0:	4626      	mov	r6, r4
 80130a2:	2e00      	cmp	r6, #0
 80130a4:	d140      	bne.n	8013128 <_malloc_r+0xcc>
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	4631      	mov	r1, r6
 80130aa:	4638      	mov	r0, r7
 80130ac:	eb04 0803 	add.w	r8, r4, r3
 80130b0:	f000 fd18 	bl	8013ae4 <_sbrk_r>
 80130b4:	4580      	cmp	r8, r0
 80130b6:	d13a      	bne.n	801312e <_malloc_r+0xd2>
 80130b8:	6821      	ldr	r1, [r4, #0]
 80130ba:	3503      	adds	r5, #3
 80130bc:	1a6d      	subs	r5, r5, r1
 80130be:	f025 0503 	bic.w	r5, r5, #3
 80130c2:	3508      	adds	r5, #8
 80130c4:	2d0c      	cmp	r5, #12
 80130c6:	bf38      	it	cc
 80130c8:	250c      	movcc	r5, #12
 80130ca:	4629      	mov	r1, r5
 80130cc:	4638      	mov	r0, r7
 80130ce:	f7ff ffa5 	bl	801301c <sbrk_aligned>
 80130d2:	3001      	adds	r0, #1
 80130d4:	d02b      	beq.n	801312e <_malloc_r+0xd2>
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	442b      	add	r3, r5
 80130da:	6023      	str	r3, [r4, #0]
 80130dc:	e00e      	b.n	80130fc <_malloc_r+0xa0>
 80130de:	6822      	ldr	r2, [r4, #0]
 80130e0:	1b52      	subs	r2, r2, r5
 80130e2:	d41e      	bmi.n	8013122 <_malloc_r+0xc6>
 80130e4:	2a0b      	cmp	r2, #11
 80130e6:	d916      	bls.n	8013116 <_malloc_r+0xba>
 80130e8:	1961      	adds	r1, r4, r5
 80130ea:	42a3      	cmp	r3, r4
 80130ec:	6025      	str	r5, [r4, #0]
 80130ee:	bf18      	it	ne
 80130f0:	6059      	strne	r1, [r3, #4]
 80130f2:	6863      	ldr	r3, [r4, #4]
 80130f4:	bf08      	it	eq
 80130f6:	6031      	streq	r1, [r6, #0]
 80130f8:	5162      	str	r2, [r4, r5]
 80130fa:	604b      	str	r3, [r1, #4]
 80130fc:	4638      	mov	r0, r7
 80130fe:	f104 060b 	add.w	r6, r4, #11
 8013102:	f002 fb7d 	bl	8015800 <__malloc_unlock>
 8013106:	f026 0607 	bic.w	r6, r6, #7
 801310a:	1d23      	adds	r3, r4, #4
 801310c:	1af2      	subs	r2, r6, r3
 801310e:	d0b6      	beq.n	801307e <_malloc_r+0x22>
 8013110:	1b9b      	subs	r3, r3, r6
 8013112:	50a3      	str	r3, [r4, r2]
 8013114:	e7b3      	b.n	801307e <_malloc_r+0x22>
 8013116:	6862      	ldr	r2, [r4, #4]
 8013118:	42a3      	cmp	r3, r4
 801311a:	bf0c      	ite	eq
 801311c:	6032      	streq	r2, [r6, #0]
 801311e:	605a      	strne	r2, [r3, #4]
 8013120:	e7ec      	b.n	80130fc <_malloc_r+0xa0>
 8013122:	4623      	mov	r3, r4
 8013124:	6864      	ldr	r4, [r4, #4]
 8013126:	e7b2      	b.n	801308e <_malloc_r+0x32>
 8013128:	4634      	mov	r4, r6
 801312a:	6876      	ldr	r6, [r6, #4]
 801312c:	e7b9      	b.n	80130a2 <_malloc_r+0x46>
 801312e:	230c      	movs	r3, #12
 8013130:	603b      	str	r3, [r7, #0]
 8013132:	4638      	mov	r0, r7
 8013134:	f002 fb64 	bl	8015800 <__malloc_unlock>
 8013138:	e7a1      	b.n	801307e <_malloc_r+0x22>
 801313a:	6025      	str	r5, [r4, #0]
 801313c:	e7de      	b.n	80130fc <_malloc_r+0xa0>
 801313e:	bf00      	nop
 8013140:	20003e78 	.word	0x20003e78

08013144 <__sfputc_r>:
 8013144:	6893      	ldr	r3, [r2, #8]
 8013146:	3b01      	subs	r3, #1
 8013148:	2b00      	cmp	r3, #0
 801314a:	b410      	push	{r4}
 801314c:	6093      	str	r3, [r2, #8]
 801314e:	da08      	bge.n	8013162 <__sfputc_r+0x1e>
 8013150:	6994      	ldr	r4, [r2, #24]
 8013152:	42a3      	cmp	r3, r4
 8013154:	db01      	blt.n	801315a <__sfputc_r+0x16>
 8013156:	290a      	cmp	r1, #10
 8013158:	d103      	bne.n	8013162 <__sfputc_r+0x1e>
 801315a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801315e:	f001 be85 	b.w	8014e6c <__swbuf_r>
 8013162:	6813      	ldr	r3, [r2, #0]
 8013164:	1c58      	adds	r0, r3, #1
 8013166:	6010      	str	r0, [r2, #0]
 8013168:	7019      	strb	r1, [r3, #0]
 801316a:	4608      	mov	r0, r1
 801316c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013170:	4770      	bx	lr

08013172 <__sfputs_r>:
 8013172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013174:	4606      	mov	r6, r0
 8013176:	460f      	mov	r7, r1
 8013178:	4614      	mov	r4, r2
 801317a:	18d5      	adds	r5, r2, r3
 801317c:	42ac      	cmp	r4, r5
 801317e:	d101      	bne.n	8013184 <__sfputs_r+0x12>
 8013180:	2000      	movs	r0, #0
 8013182:	e007      	b.n	8013194 <__sfputs_r+0x22>
 8013184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013188:	463a      	mov	r2, r7
 801318a:	4630      	mov	r0, r6
 801318c:	f7ff ffda 	bl	8013144 <__sfputc_r>
 8013190:	1c43      	adds	r3, r0, #1
 8013192:	d1f3      	bne.n	801317c <__sfputs_r+0xa>
 8013194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013198 <_vfiprintf_r>:
 8013198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	460d      	mov	r5, r1
 801319e:	b09d      	sub	sp, #116	; 0x74
 80131a0:	4614      	mov	r4, r2
 80131a2:	4698      	mov	r8, r3
 80131a4:	4606      	mov	r6, r0
 80131a6:	b118      	cbz	r0, 80131b0 <_vfiprintf_r+0x18>
 80131a8:	6983      	ldr	r3, [r0, #24]
 80131aa:	b90b      	cbnz	r3, 80131b0 <_vfiprintf_r+0x18>
 80131ac:	f7ff fcb4 	bl	8012b18 <__sinit>
 80131b0:	4b89      	ldr	r3, [pc, #548]	; (80133d8 <_vfiprintf_r+0x240>)
 80131b2:	429d      	cmp	r5, r3
 80131b4:	d11b      	bne.n	80131ee <_vfiprintf_r+0x56>
 80131b6:	6875      	ldr	r5, [r6, #4]
 80131b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131ba:	07d9      	lsls	r1, r3, #31
 80131bc:	d405      	bmi.n	80131ca <_vfiprintf_r+0x32>
 80131be:	89ab      	ldrh	r3, [r5, #12]
 80131c0:	059a      	lsls	r2, r3, #22
 80131c2:	d402      	bmi.n	80131ca <_vfiprintf_r+0x32>
 80131c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131c6:	f7ff fe2a 	bl	8012e1e <__retarget_lock_acquire_recursive>
 80131ca:	89ab      	ldrh	r3, [r5, #12]
 80131cc:	071b      	lsls	r3, r3, #28
 80131ce:	d501      	bpl.n	80131d4 <_vfiprintf_r+0x3c>
 80131d0:	692b      	ldr	r3, [r5, #16]
 80131d2:	b9eb      	cbnz	r3, 8013210 <_vfiprintf_r+0x78>
 80131d4:	4629      	mov	r1, r5
 80131d6:	4630      	mov	r0, r6
 80131d8:	f001 feac 	bl	8014f34 <__swsetup_r>
 80131dc:	b1c0      	cbz	r0, 8013210 <_vfiprintf_r+0x78>
 80131de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131e0:	07dc      	lsls	r4, r3, #31
 80131e2:	d50e      	bpl.n	8013202 <_vfiprintf_r+0x6a>
 80131e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131e8:	b01d      	add	sp, #116	; 0x74
 80131ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ee:	4b7b      	ldr	r3, [pc, #492]	; (80133dc <_vfiprintf_r+0x244>)
 80131f0:	429d      	cmp	r5, r3
 80131f2:	d101      	bne.n	80131f8 <_vfiprintf_r+0x60>
 80131f4:	68b5      	ldr	r5, [r6, #8]
 80131f6:	e7df      	b.n	80131b8 <_vfiprintf_r+0x20>
 80131f8:	4b79      	ldr	r3, [pc, #484]	; (80133e0 <_vfiprintf_r+0x248>)
 80131fa:	429d      	cmp	r5, r3
 80131fc:	bf08      	it	eq
 80131fe:	68f5      	ldreq	r5, [r6, #12]
 8013200:	e7da      	b.n	80131b8 <_vfiprintf_r+0x20>
 8013202:	89ab      	ldrh	r3, [r5, #12]
 8013204:	0598      	lsls	r0, r3, #22
 8013206:	d4ed      	bmi.n	80131e4 <_vfiprintf_r+0x4c>
 8013208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801320a:	f7ff fe09 	bl	8012e20 <__retarget_lock_release_recursive>
 801320e:	e7e9      	b.n	80131e4 <_vfiprintf_r+0x4c>
 8013210:	2300      	movs	r3, #0
 8013212:	9309      	str	r3, [sp, #36]	; 0x24
 8013214:	2320      	movs	r3, #32
 8013216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801321a:	f8cd 800c 	str.w	r8, [sp, #12]
 801321e:	2330      	movs	r3, #48	; 0x30
 8013220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80133e4 <_vfiprintf_r+0x24c>
 8013224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013228:	f04f 0901 	mov.w	r9, #1
 801322c:	4623      	mov	r3, r4
 801322e:	469a      	mov	sl, r3
 8013230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013234:	b10a      	cbz	r2, 801323a <_vfiprintf_r+0xa2>
 8013236:	2a25      	cmp	r2, #37	; 0x25
 8013238:	d1f9      	bne.n	801322e <_vfiprintf_r+0x96>
 801323a:	ebba 0b04 	subs.w	fp, sl, r4
 801323e:	d00b      	beq.n	8013258 <_vfiprintf_r+0xc0>
 8013240:	465b      	mov	r3, fp
 8013242:	4622      	mov	r2, r4
 8013244:	4629      	mov	r1, r5
 8013246:	4630      	mov	r0, r6
 8013248:	f7ff ff93 	bl	8013172 <__sfputs_r>
 801324c:	3001      	adds	r0, #1
 801324e:	f000 80aa 	beq.w	80133a6 <_vfiprintf_r+0x20e>
 8013252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013254:	445a      	add	r2, fp
 8013256:	9209      	str	r2, [sp, #36]	; 0x24
 8013258:	f89a 3000 	ldrb.w	r3, [sl]
 801325c:	2b00      	cmp	r3, #0
 801325e:	f000 80a2 	beq.w	80133a6 <_vfiprintf_r+0x20e>
 8013262:	2300      	movs	r3, #0
 8013264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801326c:	f10a 0a01 	add.w	sl, sl, #1
 8013270:	9304      	str	r3, [sp, #16]
 8013272:	9307      	str	r3, [sp, #28]
 8013274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013278:	931a      	str	r3, [sp, #104]	; 0x68
 801327a:	4654      	mov	r4, sl
 801327c:	2205      	movs	r2, #5
 801327e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013282:	4858      	ldr	r0, [pc, #352]	; (80133e4 <_vfiprintf_r+0x24c>)
 8013284:	f7ed f8dc 	bl	8000440 <memchr>
 8013288:	9a04      	ldr	r2, [sp, #16]
 801328a:	b9d8      	cbnz	r0, 80132c4 <_vfiprintf_r+0x12c>
 801328c:	06d1      	lsls	r1, r2, #27
 801328e:	bf44      	itt	mi
 8013290:	2320      	movmi	r3, #32
 8013292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013296:	0713      	lsls	r3, r2, #28
 8013298:	bf44      	itt	mi
 801329a:	232b      	movmi	r3, #43	; 0x2b
 801329c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132a0:	f89a 3000 	ldrb.w	r3, [sl]
 80132a4:	2b2a      	cmp	r3, #42	; 0x2a
 80132a6:	d015      	beq.n	80132d4 <_vfiprintf_r+0x13c>
 80132a8:	9a07      	ldr	r2, [sp, #28]
 80132aa:	4654      	mov	r4, sl
 80132ac:	2000      	movs	r0, #0
 80132ae:	f04f 0c0a 	mov.w	ip, #10
 80132b2:	4621      	mov	r1, r4
 80132b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132b8:	3b30      	subs	r3, #48	; 0x30
 80132ba:	2b09      	cmp	r3, #9
 80132bc:	d94e      	bls.n	801335c <_vfiprintf_r+0x1c4>
 80132be:	b1b0      	cbz	r0, 80132ee <_vfiprintf_r+0x156>
 80132c0:	9207      	str	r2, [sp, #28]
 80132c2:	e014      	b.n	80132ee <_vfiprintf_r+0x156>
 80132c4:	eba0 0308 	sub.w	r3, r0, r8
 80132c8:	fa09 f303 	lsl.w	r3, r9, r3
 80132cc:	4313      	orrs	r3, r2
 80132ce:	9304      	str	r3, [sp, #16]
 80132d0:	46a2      	mov	sl, r4
 80132d2:	e7d2      	b.n	801327a <_vfiprintf_r+0xe2>
 80132d4:	9b03      	ldr	r3, [sp, #12]
 80132d6:	1d19      	adds	r1, r3, #4
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	9103      	str	r1, [sp, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	bfbb      	ittet	lt
 80132e0:	425b      	neglt	r3, r3
 80132e2:	f042 0202 	orrlt.w	r2, r2, #2
 80132e6:	9307      	strge	r3, [sp, #28]
 80132e8:	9307      	strlt	r3, [sp, #28]
 80132ea:	bfb8      	it	lt
 80132ec:	9204      	strlt	r2, [sp, #16]
 80132ee:	7823      	ldrb	r3, [r4, #0]
 80132f0:	2b2e      	cmp	r3, #46	; 0x2e
 80132f2:	d10c      	bne.n	801330e <_vfiprintf_r+0x176>
 80132f4:	7863      	ldrb	r3, [r4, #1]
 80132f6:	2b2a      	cmp	r3, #42	; 0x2a
 80132f8:	d135      	bne.n	8013366 <_vfiprintf_r+0x1ce>
 80132fa:	9b03      	ldr	r3, [sp, #12]
 80132fc:	1d1a      	adds	r2, r3, #4
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	9203      	str	r2, [sp, #12]
 8013302:	2b00      	cmp	r3, #0
 8013304:	bfb8      	it	lt
 8013306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801330a:	3402      	adds	r4, #2
 801330c:	9305      	str	r3, [sp, #20]
 801330e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80133f4 <_vfiprintf_r+0x25c>
 8013312:	7821      	ldrb	r1, [r4, #0]
 8013314:	2203      	movs	r2, #3
 8013316:	4650      	mov	r0, sl
 8013318:	f7ed f892 	bl	8000440 <memchr>
 801331c:	b140      	cbz	r0, 8013330 <_vfiprintf_r+0x198>
 801331e:	2340      	movs	r3, #64	; 0x40
 8013320:	eba0 000a 	sub.w	r0, r0, sl
 8013324:	fa03 f000 	lsl.w	r0, r3, r0
 8013328:	9b04      	ldr	r3, [sp, #16]
 801332a:	4303      	orrs	r3, r0
 801332c:	3401      	adds	r4, #1
 801332e:	9304      	str	r3, [sp, #16]
 8013330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013334:	482c      	ldr	r0, [pc, #176]	; (80133e8 <_vfiprintf_r+0x250>)
 8013336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801333a:	2206      	movs	r2, #6
 801333c:	f7ed f880 	bl	8000440 <memchr>
 8013340:	2800      	cmp	r0, #0
 8013342:	d03f      	beq.n	80133c4 <_vfiprintf_r+0x22c>
 8013344:	4b29      	ldr	r3, [pc, #164]	; (80133ec <_vfiprintf_r+0x254>)
 8013346:	bb1b      	cbnz	r3, 8013390 <_vfiprintf_r+0x1f8>
 8013348:	9b03      	ldr	r3, [sp, #12]
 801334a:	3307      	adds	r3, #7
 801334c:	f023 0307 	bic.w	r3, r3, #7
 8013350:	3308      	adds	r3, #8
 8013352:	9303      	str	r3, [sp, #12]
 8013354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013356:	443b      	add	r3, r7
 8013358:	9309      	str	r3, [sp, #36]	; 0x24
 801335a:	e767      	b.n	801322c <_vfiprintf_r+0x94>
 801335c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013360:	460c      	mov	r4, r1
 8013362:	2001      	movs	r0, #1
 8013364:	e7a5      	b.n	80132b2 <_vfiprintf_r+0x11a>
 8013366:	2300      	movs	r3, #0
 8013368:	3401      	adds	r4, #1
 801336a:	9305      	str	r3, [sp, #20]
 801336c:	4619      	mov	r1, r3
 801336e:	f04f 0c0a 	mov.w	ip, #10
 8013372:	4620      	mov	r0, r4
 8013374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013378:	3a30      	subs	r2, #48	; 0x30
 801337a:	2a09      	cmp	r2, #9
 801337c:	d903      	bls.n	8013386 <_vfiprintf_r+0x1ee>
 801337e:	2b00      	cmp	r3, #0
 8013380:	d0c5      	beq.n	801330e <_vfiprintf_r+0x176>
 8013382:	9105      	str	r1, [sp, #20]
 8013384:	e7c3      	b.n	801330e <_vfiprintf_r+0x176>
 8013386:	fb0c 2101 	mla	r1, ip, r1, r2
 801338a:	4604      	mov	r4, r0
 801338c:	2301      	movs	r3, #1
 801338e:	e7f0      	b.n	8013372 <_vfiprintf_r+0x1da>
 8013390:	ab03      	add	r3, sp, #12
 8013392:	9300      	str	r3, [sp, #0]
 8013394:	462a      	mov	r2, r5
 8013396:	4b16      	ldr	r3, [pc, #88]	; (80133f0 <_vfiprintf_r+0x258>)
 8013398:	a904      	add	r1, sp, #16
 801339a:	4630      	mov	r0, r6
 801339c:	f3af 8000 	nop.w
 80133a0:	4607      	mov	r7, r0
 80133a2:	1c78      	adds	r0, r7, #1
 80133a4:	d1d6      	bne.n	8013354 <_vfiprintf_r+0x1bc>
 80133a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133a8:	07d9      	lsls	r1, r3, #31
 80133aa:	d405      	bmi.n	80133b8 <_vfiprintf_r+0x220>
 80133ac:	89ab      	ldrh	r3, [r5, #12]
 80133ae:	059a      	lsls	r2, r3, #22
 80133b0:	d402      	bmi.n	80133b8 <_vfiprintf_r+0x220>
 80133b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133b4:	f7ff fd34 	bl	8012e20 <__retarget_lock_release_recursive>
 80133b8:	89ab      	ldrh	r3, [r5, #12]
 80133ba:	065b      	lsls	r3, r3, #25
 80133bc:	f53f af12 	bmi.w	80131e4 <_vfiprintf_r+0x4c>
 80133c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133c2:	e711      	b.n	80131e8 <_vfiprintf_r+0x50>
 80133c4:	ab03      	add	r3, sp, #12
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	462a      	mov	r2, r5
 80133ca:	4b09      	ldr	r3, [pc, #36]	; (80133f0 <_vfiprintf_r+0x258>)
 80133cc:	a904      	add	r1, sp, #16
 80133ce:	4630      	mov	r0, r6
 80133d0:	f000 f88a 	bl	80134e8 <_printf_i>
 80133d4:	e7e4      	b.n	80133a0 <_vfiprintf_r+0x208>
 80133d6:	bf00      	nop
 80133d8:	0801c314 	.word	0x0801c314
 80133dc:	0801c334 	.word	0x0801c334
 80133e0:	0801c2f4 	.word	0x0801c2f4
 80133e4:	0801c358 	.word	0x0801c358
 80133e8:	0801c362 	.word	0x0801c362
 80133ec:	00000000 	.word	0x00000000
 80133f0:	08013173 	.word	0x08013173
 80133f4:	0801c35e 	.word	0x0801c35e

080133f8 <vfiprintf>:
 80133f8:	4613      	mov	r3, r2
 80133fa:	460a      	mov	r2, r1
 80133fc:	4601      	mov	r1, r0
 80133fe:	4802      	ldr	r0, [pc, #8]	; (8013408 <vfiprintf+0x10>)
 8013400:	6800      	ldr	r0, [r0, #0]
 8013402:	f7ff bec9 	b.w	8013198 <_vfiprintf_r>
 8013406:	bf00      	nop
 8013408:	20000088 	.word	0x20000088

0801340c <_printf_common>:
 801340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013410:	4616      	mov	r6, r2
 8013412:	4699      	mov	r9, r3
 8013414:	688a      	ldr	r2, [r1, #8]
 8013416:	690b      	ldr	r3, [r1, #16]
 8013418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801341c:	4293      	cmp	r3, r2
 801341e:	bfb8      	it	lt
 8013420:	4613      	movlt	r3, r2
 8013422:	6033      	str	r3, [r6, #0]
 8013424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013428:	4607      	mov	r7, r0
 801342a:	460c      	mov	r4, r1
 801342c:	b10a      	cbz	r2, 8013432 <_printf_common+0x26>
 801342e:	3301      	adds	r3, #1
 8013430:	6033      	str	r3, [r6, #0]
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	0699      	lsls	r1, r3, #26
 8013436:	bf42      	ittt	mi
 8013438:	6833      	ldrmi	r3, [r6, #0]
 801343a:	3302      	addmi	r3, #2
 801343c:	6033      	strmi	r3, [r6, #0]
 801343e:	6825      	ldr	r5, [r4, #0]
 8013440:	f015 0506 	ands.w	r5, r5, #6
 8013444:	d106      	bne.n	8013454 <_printf_common+0x48>
 8013446:	f104 0a19 	add.w	sl, r4, #25
 801344a:	68e3      	ldr	r3, [r4, #12]
 801344c:	6832      	ldr	r2, [r6, #0]
 801344e:	1a9b      	subs	r3, r3, r2
 8013450:	42ab      	cmp	r3, r5
 8013452:	dc26      	bgt.n	80134a2 <_printf_common+0x96>
 8013454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013458:	1e13      	subs	r3, r2, #0
 801345a:	6822      	ldr	r2, [r4, #0]
 801345c:	bf18      	it	ne
 801345e:	2301      	movne	r3, #1
 8013460:	0692      	lsls	r2, r2, #26
 8013462:	d42b      	bmi.n	80134bc <_printf_common+0xb0>
 8013464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013468:	4649      	mov	r1, r9
 801346a:	4638      	mov	r0, r7
 801346c:	47c0      	blx	r8
 801346e:	3001      	adds	r0, #1
 8013470:	d01e      	beq.n	80134b0 <_printf_common+0xa4>
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	68e5      	ldr	r5, [r4, #12]
 8013476:	6832      	ldr	r2, [r6, #0]
 8013478:	f003 0306 	and.w	r3, r3, #6
 801347c:	2b04      	cmp	r3, #4
 801347e:	bf08      	it	eq
 8013480:	1aad      	subeq	r5, r5, r2
 8013482:	68a3      	ldr	r3, [r4, #8]
 8013484:	6922      	ldr	r2, [r4, #16]
 8013486:	bf0c      	ite	eq
 8013488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801348c:	2500      	movne	r5, #0
 801348e:	4293      	cmp	r3, r2
 8013490:	bfc4      	itt	gt
 8013492:	1a9b      	subgt	r3, r3, r2
 8013494:	18ed      	addgt	r5, r5, r3
 8013496:	2600      	movs	r6, #0
 8013498:	341a      	adds	r4, #26
 801349a:	42b5      	cmp	r5, r6
 801349c:	d11a      	bne.n	80134d4 <_printf_common+0xc8>
 801349e:	2000      	movs	r0, #0
 80134a0:	e008      	b.n	80134b4 <_printf_common+0xa8>
 80134a2:	2301      	movs	r3, #1
 80134a4:	4652      	mov	r2, sl
 80134a6:	4649      	mov	r1, r9
 80134a8:	4638      	mov	r0, r7
 80134aa:	47c0      	blx	r8
 80134ac:	3001      	adds	r0, #1
 80134ae:	d103      	bne.n	80134b8 <_printf_common+0xac>
 80134b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b8:	3501      	adds	r5, #1
 80134ba:	e7c6      	b.n	801344a <_printf_common+0x3e>
 80134bc:	18e1      	adds	r1, r4, r3
 80134be:	1c5a      	adds	r2, r3, #1
 80134c0:	2030      	movs	r0, #48	; 0x30
 80134c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134c6:	4422      	add	r2, r4
 80134c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80134cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80134d0:	3302      	adds	r3, #2
 80134d2:	e7c7      	b.n	8013464 <_printf_common+0x58>
 80134d4:	2301      	movs	r3, #1
 80134d6:	4622      	mov	r2, r4
 80134d8:	4649      	mov	r1, r9
 80134da:	4638      	mov	r0, r7
 80134dc:	47c0      	blx	r8
 80134de:	3001      	adds	r0, #1
 80134e0:	d0e6      	beq.n	80134b0 <_printf_common+0xa4>
 80134e2:	3601      	adds	r6, #1
 80134e4:	e7d9      	b.n	801349a <_printf_common+0x8e>
	...

080134e8 <_printf_i>:
 80134e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134ec:	7e0f      	ldrb	r7, [r1, #24]
 80134ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134f0:	2f78      	cmp	r7, #120	; 0x78
 80134f2:	4691      	mov	r9, r2
 80134f4:	4680      	mov	r8, r0
 80134f6:	460c      	mov	r4, r1
 80134f8:	469a      	mov	sl, r3
 80134fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134fe:	d807      	bhi.n	8013510 <_printf_i+0x28>
 8013500:	2f62      	cmp	r7, #98	; 0x62
 8013502:	d80a      	bhi.n	801351a <_printf_i+0x32>
 8013504:	2f00      	cmp	r7, #0
 8013506:	f000 80d8 	beq.w	80136ba <_printf_i+0x1d2>
 801350a:	2f58      	cmp	r7, #88	; 0x58
 801350c:	f000 80a3 	beq.w	8013656 <_printf_i+0x16e>
 8013510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013518:	e03a      	b.n	8013590 <_printf_i+0xa8>
 801351a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801351e:	2b15      	cmp	r3, #21
 8013520:	d8f6      	bhi.n	8013510 <_printf_i+0x28>
 8013522:	a101      	add	r1, pc, #4	; (adr r1, 8013528 <_printf_i+0x40>)
 8013524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013528:	08013581 	.word	0x08013581
 801352c:	08013595 	.word	0x08013595
 8013530:	08013511 	.word	0x08013511
 8013534:	08013511 	.word	0x08013511
 8013538:	08013511 	.word	0x08013511
 801353c:	08013511 	.word	0x08013511
 8013540:	08013595 	.word	0x08013595
 8013544:	08013511 	.word	0x08013511
 8013548:	08013511 	.word	0x08013511
 801354c:	08013511 	.word	0x08013511
 8013550:	08013511 	.word	0x08013511
 8013554:	080136a1 	.word	0x080136a1
 8013558:	080135c5 	.word	0x080135c5
 801355c:	08013683 	.word	0x08013683
 8013560:	08013511 	.word	0x08013511
 8013564:	08013511 	.word	0x08013511
 8013568:	080136c3 	.word	0x080136c3
 801356c:	08013511 	.word	0x08013511
 8013570:	080135c5 	.word	0x080135c5
 8013574:	08013511 	.word	0x08013511
 8013578:	08013511 	.word	0x08013511
 801357c:	0801368b 	.word	0x0801368b
 8013580:	682b      	ldr	r3, [r5, #0]
 8013582:	1d1a      	adds	r2, r3, #4
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	602a      	str	r2, [r5, #0]
 8013588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801358c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013590:	2301      	movs	r3, #1
 8013592:	e0a3      	b.n	80136dc <_printf_i+0x1f4>
 8013594:	6820      	ldr	r0, [r4, #0]
 8013596:	6829      	ldr	r1, [r5, #0]
 8013598:	0606      	lsls	r6, r0, #24
 801359a:	f101 0304 	add.w	r3, r1, #4
 801359e:	d50a      	bpl.n	80135b6 <_printf_i+0xce>
 80135a0:	680e      	ldr	r6, [r1, #0]
 80135a2:	602b      	str	r3, [r5, #0]
 80135a4:	2e00      	cmp	r6, #0
 80135a6:	da03      	bge.n	80135b0 <_printf_i+0xc8>
 80135a8:	232d      	movs	r3, #45	; 0x2d
 80135aa:	4276      	negs	r6, r6
 80135ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135b0:	485e      	ldr	r0, [pc, #376]	; (801372c <_printf_i+0x244>)
 80135b2:	230a      	movs	r3, #10
 80135b4:	e019      	b.n	80135ea <_printf_i+0x102>
 80135b6:	680e      	ldr	r6, [r1, #0]
 80135b8:	602b      	str	r3, [r5, #0]
 80135ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80135be:	bf18      	it	ne
 80135c0:	b236      	sxthne	r6, r6
 80135c2:	e7ef      	b.n	80135a4 <_printf_i+0xbc>
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	6820      	ldr	r0, [r4, #0]
 80135c8:	1d19      	adds	r1, r3, #4
 80135ca:	6029      	str	r1, [r5, #0]
 80135cc:	0601      	lsls	r1, r0, #24
 80135ce:	d501      	bpl.n	80135d4 <_printf_i+0xec>
 80135d0:	681e      	ldr	r6, [r3, #0]
 80135d2:	e002      	b.n	80135da <_printf_i+0xf2>
 80135d4:	0646      	lsls	r6, r0, #25
 80135d6:	d5fb      	bpl.n	80135d0 <_printf_i+0xe8>
 80135d8:	881e      	ldrh	r6, [r3, #0]
 80135da:	4854      	ldr	r0, [pc, #336]	; (801372c <_printf_i+0x244>)
 80135dc:	2f6f      	cmp	r7, #111	; 0x6f
 80135de:	bf0c      	ite	eq
 80135e0:	2308      	moveq	r3, #8
 80135e2:	230a      	movne	r3, #10
 80135e4:	2100      	movs	r1, #0
 80135e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135ea:	6865      	ldr	r5, [r4, #4]
 80135ec:	60a5      	str	r5, [r4, #8]
 80135ee:	2d00      	cmp	r5, #0
 80135f0:	bfa2      	ittt	ge
 80135f2:	6821      	ldrge	r1, [r4, #0]
 80135f4:	f021 0104 	bicge.w	r1, r1, #4
 80135f8:	6021      	strge	r1, [r4, #0]
 80135fa:	b90e      	cbnz	r6, 8013600 <_printf_i+0x118>
 80135fc:	2d00      	cmp	r5, #0
 80135fe:	d04d      	beq.n	801369c <_printf_i+0x1b4>
 8013600:	4615      	mov	r5, r2
 8013602:	fbb6 f1f3 	udiv	r1, r6, r3
 8013606:	fb03 6711 	mls	r7, r3, r1, r6
 801360a:	5dc7      	ldrb	r7, [r0, r7]
 801360c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013610:	4637      	mov	r7, r6
 8013612:	42bb      	cmp	r3, r7
 8013614:	460e      	mov	r6, r1
 8013616:	d9f4      	bls.n	8013602 <_printf_i+0x11a>
 8013618:	2b08      	cmp	r3, #8
 801361a:	d10b      	bne.n	8013634 <_printf_i+0x14c>
 801361c:	6823      	ldr	r3, [r4, #0]
 801361e:	07de      	lsls	r6, r3, #31
 8013620:	d508      	bpl.n	8013634 <_printf_i+0x14c>
 8013622:	6923      	ldr	r3, [r4, #16]
 8013624:	6861      	ldr	r1, [r4, #4]
 8013626:	4299      	cmp	r1, r3
 8013628:	bfde      	ittt	le
 801362a:	2330      	movle	r3, #48	; 0x30
 801362c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013630:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013634:	1b52      	subs	r2, r2, r5
 8013636:	6122      	str	r2, [r4, #16]
 8013638:	f8cd a000 	str.w	sl, [sp]
 801363c:	464b      	mov	r3, r9
 801363e:	aa03      	add	r2, sp, #12
 8013640:	4621      	mov	r1, r4
 8013642:	4640      	mov	r0, r8
 8013644:	f7ff fee2 	bl	801340c <_printf_common>
 8013648:	3001      	adds	r0, #1
 801364a:	d14c      	bne.n	80136e6 <_printf_i+0x1fe>
 801364c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013650:	b004      	add	sp, #16
 8013652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013656:	4835      	ldr	r0, [pc, #212]	; (801372c <_printf_i+0x244>)
 8013658:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801365c:	6829      	ldr	r1, [r5, #0]
 801365e:	6823      	ldr	r3, [r4, #0]
 8013660:	f851 6b04 	ldr.w	r6, [r1], #4
 8013664:	6029      	str	r1, [r5, #0]
 8013666:	061d      	lsls	r5, r3, #24
 8013668:	d514      	bpl.n	8013694 <_printf_i+0x1ac>
 801366a:	07df      	lsls	r7, r3, #31
 801366c:	bf44      	itt	mi
 801366e:	f043 0320 	orrmi.w	r3, r3, #32
 8013672:	6023      	strmi	r3, [r4, #0]
 8013674:	b91e      	cbnz	r6, 801367e <_printf_i+0x196>
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	f023 0320 	bic.w	r3, r3, #32
 801367c:	6023      	str	r3, [r4, #0]
 801367e:	2310      	movs	r3, #16
 8013680:	e7b0      	b.n	80135e4 <_printf_i+0xfc>
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	f043 0320 	orr.w	r3, r3, #32
 8013688:	6023      	str	r3, [r4, #0]
 801368a:	2378      	movs	r3, #120	; 0x78
 801368c:	4828      	ldr	r0, [pc, #160]	; (8013730 <_printf_i+0x248>)
 801368e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013692:	e7e3      	b.n	801365c <_printf_i+0x174>
 8013694:	0659      	lsls	r1, r3, #25
 8013696:	bf48      	it	mi
 8013698:	b2b6      	uxthmi	r6, r6
 801369a:	e7e6      	b.n	801366a <_printf_i+0x182>
 801369c:	4615      	mov	r5, r2
 801369e:	e7bb      	b.n	8013618 <_printf_i+0x130>
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	6826      	ldr	r6, [r4, #0]
 80136a4:	6961      	ldr	r1, [r4, #20]
 80136a6:	1d18      	adds	r0, r3, #4
 80136a8:	6028      	str	r0, [r5, #0]
 80136aa:	0635      	lsls	r5, r6, #24
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	d501      	bpl.n	80136b4 <_printf_i+0x1cc>
 80136b0:	6019      	str	r1, [r3, #0]
 80136b2:	e002      	b.n	80136ba <_printf_i+0x1d2>
 80136b4:	0670      	lsls	r0, r6, #25
 80136b6:	d5fb      	bpl.n	80136b0 <_printf_i+0x1c8>
 80136b8:	8019      	strh	r1, [r3, #0]
 80136ba:	2300      	movs	r3, #0
 80136bc:	6123      	str	r3, [r4, #16]
 80136be:	4615      	mov	r5, r2
 80136c0:	e7ba      	b.n	8013638 <_printf_i+0x150>
 80136c2:	682b      	ldr	r3, [r5, #0]
 80136c4:	1d1a      	adds	r2, r3, #4
 80136c6:	602a      	str	r2, [r5, #0]
 80136c8:	681d      	ldr	r5, [r3, #0]
 80136ca:	6862      	ldr	r2, [r4, #4]
 80136cc:	2100      	movs	r1, #0
 80136ce:	4628      	mov	r0, r5
 80136d0:	f7ec feb6 	bl	8000440 <memchr>
 80136d4:	b108      	cbz	r0, 80136da <_printf_i+0x1f2>
 80136d6:	1b40      	subs	r0, r0, r5
 80136d8:	6060      	str	r0, [r4, #4]
 80136da:	6863      	ldr	r3, [r4, #4]
 80136dc:	6123      	str	r3, [r4, #16]
 80136de:	2300      	movs	r3, #0
 80136e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136e4:	e7a8      	b.n	8013638 <_printf_i+0x150>
 80136e6:	6923      	ldr	r3, [r4, #16]
 80136e8:	462a      	mov	r2, r5
 80136ea:	4649      	mov	r1, r9
 80136ec:	4640      	mov	r0, r8
 80136ee:	47d0      	blx	sl
 80136f0:	3001      	adds	r0, #1
 80136f2:	d0ab      	beq.n	801364c <_printf_i+0x164>
 80136f4:	6823      	ldr	r3, [r4, #0]
 80136f6:	079b      	lsls	r3, r3, #30
 80136f8:	d413      	bmi.n	8013722 <_printf_i+0x23a>
 80136fa:	68e0      	ldr	r0, [r4, #12]
 80136fc:	9b03      	ldr	r3, [sp, #12]
 80136fe:	4298      	cmp	r0, r3
 8013700:	bfb8      	it	lt
 8013702:	4618      	movlt	r0, r3
 8013704:	e7a4      	b.n	8013650 <_printf_i+0x168>
 8013706:	2301      	movs	r3, #1
 8013708:	4632      	mov	r2, r6
 801370a:	4649      	mov	r1, r9
 801370c:	4640      	mov	r0, r8
 801370e:	47d0      	blx	sl
 8013710:	3001      	adds	r0, #1
 8013712:	d09b      	beq.n	801364c <_printf_i+0x164>
 8013714:	3501      	adds	r5, #1
 8013716:	68e3      	ldr	r3, [r4, #12]
 8013718:	9903      	ldr	r1, [sp, #12]
 801371a:	1a5b      	subs	r3, r3, r1
 801371c:	42ab      	cmp	r3, r5
 801371e:	dcf2      	bgt.n	8013706 <_printf_i+0x21e>
 8013720:	e7eb      	b.n	80136fa <_printf_i+0x212>
 8013722:	2500      	movs	r5, #0
 8013724:	f104 0619 	add.w	r6, r4, #25
 8013728:	e7f5      	b.n	8013716 <_printf_i+0x22e>
 801372a:	bf00      	nop
 801372c:	0801c369 	.word	0x0801c369
 8013730:	0801c37a 	.word	0x0801c37a

08013734 <_putc_r>:
 8013734:	b570      	push	{r4, r5, r6, lr}
 8013736:	460d      	mov	r5, r1
 8013738:	4614      	mov	r4, r2
 801373a:	4606      	mov	r6, r0
 801373c:	b118      	cbz	r0, 8013746 <_putc_r+0x12>
 801373e:	6983      	ldr	r3, [r0, #24]
 8013740:	b90b      	cbnz	r3, 8013746 <_putc_r+0x12>
 8013742:	f7ff f9e9 	bl	8012b18 <__sinit>
 8013746:	4b1c      	ldr	r3, [pc, #112]	; (80137b8 <_putc_r+0x84>)
 8013748:	429c      	cmp	r4, r3
 801374a:	d124      	bne.n	8013796 <_putc_r+0x62>
 801374c:	6874      	ldr	r4, [r6, #4]
 801374e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013750:	07d8      	lsls	r0, r3, #31
 8013752:	d405      	bmi.n	8013760 <_putc_r+0x2c>
 8013754:	89a3      	ldrh	r3, [r4, #12]
 8013756:	0599      	lsls	r1, r3, #22
 8013758:	d402      	bmi.n	8013760 <_putc_r+0x2c>
 801375a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801375c:	f7ff fb5f 	bl	8012e1e <__retarget_lock_acquire_recursive>
 8013760:	68a3      	ldr	r3, [r4, #8]
 8013762:	3b01      	subs	r3, #1
 8013764:	2b00      	cmp	r3, #0
 8013766:	60a3      	str	r3, [r4, #8]
 8013768:	da05      	bge.n	8013776 <_putc_r+0x42>
 801376a:	69a2      	ldr	r2, [r4, #24]
 801376c:	4293      	cmp	r3, r2
 801376e:	db1c      	blt.n	80137aa <_putc_r+0x76>
 8013770:	b2eb      	uxtb	r3, r5
 8013772:	2b0a      	cmp	r3, #10
 8013774:	d019      	beq.n	80137aa <_putc_r+0x76>
 8013776:	6823      	ldr	r3, [r4, #0]
 8013778:	1c5a      	adds	r2, r3, #1
 801377a:	6022      	str	r2, [r4, #0]
 801377c:	701d      	strb	r5, [r3, #0]
 801377e:	b2ed      	uxtb	r5, r5
 8013780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013782:	07da      	lsls	r2, r3, #31
 8013784:	d405      	bmi.n	8013792 <_putc_r+0x5e>
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	059b      	lsls	r3, r3, #22
 801378a:	d402      	bmi.n	8013792 <_putc_r+0x5e>
 801378c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801378e:	f7ff fb47 	bl	8012e20 <__retarget_lock_release_recursive>
 8013792:	4628      	mov	r0, r5
 8013794:	bd70      	pop	{r4, r5, r6, pc}
 8013796:	4b09      	ldr	r3, [pc, #36]	; (80137bc <_putc_r+0x88>)
 8013798:	429c      	cmp	r4, r3
 801379a:	d101      	bne.n	80137a0 <_putc_r+0x6c>
 801379c:	68b4      	ldr	r4, [r6, #8]
 801379e:	e7d6      	b.n	801374e <_putc_r+0x1a>
 80137a0:	4b07      	ldr	r3, [pc, #28]	; (80137c0 <_putc_r+0x8c>)
 80137a2:	429c      	cmp	r4, r3
 80137a4:	bf08      	it	eq
 80137a6:	68f4      	ldreq	r4, [r6, #12]
 80137a8:	e7d1      	b.n	801374e <_putc_r+0x1a>
 80137aa:	4629      	mov	r1, r5
 80137ac:	4622      	mov	r2, r4
 80137ae:	4630      	mov	r0, r6
 80137b0:	f001 fb5c 	bl	8014e6c <__swbuf_r>
 80137b4:	4605      	mov	r5, r0
 80137b6:	e7e3      	b.n	8013780 <_putc_r+0x4c>
 80137b8:	0801c314 	.word	0x0801c314
 80137bc:	0801c334 	.word	0x0801c334
 80137c0:	0801c2f4 	.word	0x0801c2f4

080137c4 <swapfunc>:
 80137c4:	2b02      	cmp	r3, #2
 80137c6:	b510      	push	{r4, lr}
 80137c8:	d00a      	beq.n	80137e0 <swapfunc+0x1c>
 80137ca:	0892      	lsrs	r2, r2, #2
 80137cc:	3a01      	subs	r2, #1
 80137ce:	6803      	ldr	r3, [r0, #0]
 80137d0:	680c      	ldr	r4, [r1, #0]
 80137d2:	f840 4b04 	str.w	r4, [r0], #4
 80137d6:	2a00      	cmp	r2, #0
 80137d8:	f841 3b04 	str.w	r3, [r1], #4
 80137dc:	dcf6      	bgt.n	80137cc <swapfunc+0x8>
 80137de:	bd10      	pop	{r4, pc}
 80137e0:	4402      	add	r2, r0
 80137e2:	780c      	ldrb	r4, [r1, #0]
 80137e4:	7803      	ldrb	r3, [r0, #0]
 80137e6:	f800 4b01 	strb.w	r4, [r0], #1
 80137ea:	f801 3b01 	strb.w	r3, [r1], #1
 80137ee:	1a13      	subs	r3, r2, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	dcf6      	bgt.n	80137e2 <swapfunc+0x1e>
 80137f4:	e7f3      	b.n	80137de <swapfunc+0x1a>

080137f6 <med3.constprop.0>:
 80137f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f8:	460c      	mov	r4, r1
 80137fa:	4615      	mov	r5, r2
 80137fc:	4607      	mov	r7, r0
 80137fe:	461e      	mov	r6, r3
 8013800:	4798      	blx	r3
 8013802:	2800      	cmp	r0, #0
 8013804:	4629      	mov	r1, r5
 8013806:	4620      	mov	r0, r4
 8013808:	da0a      	bge.n	8013820 <med3.constprop.0+0x2a>
 801380a:	47b0      	blx	r6
 801380c:	2800      	cmp	r0, #0
 801380e:	db05      	blt.n	801381c <med3.constprop.0+0x26>
 8013810:	4629      	mov	r1, r5
 8013812:	4638      	mov	r0, r7
 8013814:	47b0      	blx	r6
 8013816:	2800      	cmp	r0, #0
 8013818:	db0a      	blt.n	8013830 <med3.constprop.0+0x3a>
 801381a:	463c      	mov	r4, r7
 801381c:	4620      	mov	r0, r4
 801381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013820:	47b0      	blx	r6
 8013822:	2800      	cmp	r0, #0
 8013824:	dcfa      	bgt.n	801381c <med3.constprop.0+0x26>
 8013826:	4629      	mov	r1, r5
 8013828:	4638      	mov	r0, r7
 801382a:	47b0      	blx	r6
 801382c:	2800      	cmp	r0, #0
 801382e:	dbf4      	blt.n	801381a <med3.constprop.0+0x24>
 8013830:	462c      	mov	r4, r5
 8013832:	e7f3      	b.n	801381c <med3.constprop.0+0x26>

08013834 <qsort>:
 8013834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013838:	469a      	mov	sl, r3
 801383a:	ea40 0302 	orr.w	r3, r0, r2
 801383e:	079b      	lsls	r3, r3, #30
 8013840:	b097      	sub	sp, #92	; 0x5c
 8013842:	4606      	mov	r6, r0
 8013844:	4614      	mov	r4, r2
 8013846:	d11a      	bne.n	801387e <qsort+0x4a>
 8013848:	f1b2 0804 	subs.w	r8, r2, #4
 801384c:	bf18      	it	ne
 801384e:	f04f 0801 	movne.w	r8, #1
 8013852:	2300      	movs	r3, #0
 8013854:	9302      	str	r3, [sp, #8]
 8013856:	1933      	adds	r3, r6, r4
 8013858:	fb04 f701 	mul.w	r7, r4, r1
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	2906      	cmp	r1, #6
 8013860:	eb06 0307 	add.w	r3, r6, r7
 8013864:	9303      	str	r3, [sp, #12]
 8013866:	d82a      	bhi.n	80138be <qsort+0x8a>
 8013868:	9b01      	ldr	r3, [sp, #4]
 801386a:	9a03      	ldr	r2, [sp, #12]
 801386c:	4293      	cmp	r3, r2
 801386e:	d310      	bcc.n	8013892 <qsort+0x5e>
 8013870:	9b02      	ldr	r3, [sp, #8]
 8013872:	2b00      	cmp	r3, #0
 8013874:	f040 811e 	bne.w	8013ab4 <qsort+0x280>
 8013878:	b017      	add	sp, #92	; 0x5c
 801387a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387e:	f04f 0802 	mov.w	r8, #2
 8013882:	e7e6      	b.n	8013852 <qsort+0x1e>
 8013884:	4643      	mov	r3, r8
 8013886:	4622      	mov	r2, r4
 8013888:	4639      	mov	r1, r7
 801388a:	4628      	mov	r0, r5
 801388c:	f7ff ff9a 	bl	80137c4 <swapfunc>
 8013890:	e00e      	b.n	80138b0 <qsort+0x7c>
 8013892:	9d01      	ldr	r5, [sp, #4]
 8013894:	e00d      	b.n	80138b2 <qsort+0x7e>
 8013896:	1b2f      	subs	r7, r5, r4
 8013898:	4629      	mov	r1, r5
 801389a:	4638      	mov	r0, r7
 801389c:	47d0      	blx	sl
 801389e:	2800      	cmp	r0, #0
 80138a0:	dd09      	ble.n	80138b6 <qsort+0x82>
 80138a2:	f1b8 0f00 	cmp.w	r8, #0
 80138a6:	d1ed      	bne.n	8013884 <qsort+0x50>
 80138a8:	682b      	ldr	r3, [r5, #0]
 80138aa:	683a      	ldr	r2, [r7, #0]
 80138ac:	602a      	str	r2, [r5, #0]
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	463d      	mov	r5, r7
 80138b2:	42ae      	cmp	r6, r5
 80138b4:	d3ef      	bcc.n	8013896 <qsort+0x62>
 80138b6:	9b01      	ldr	r3, [sp, #4]
 80138b8:	4423      	add	r3, r4
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	e7d4      	b.n	8013868 <qsort+0x34>
 80138be:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80138c2:	1b3f      	subs	r7, r7, r4
 80138c4:	2907      	cmp	r1, #7
 80138c6:	fb04 6909 	mla	r9, r4, r9, r6
 80138ca:	4437      	add	r7, r6
 80138cc:	d022      	beq.n	8013914 <qsort+0xe0>
 80138ce:	2928      	cmp	r1, #40	; 0x28
 80138d0:	d945      	bls.n	801395e <qsort+0x12a>
 80138d2:	08c9      	lsrs	r1, r1, #3
 80138d4:	fb04 f501 	mul.w	r5, r4, r1
 80138d8:	4653      	mov	r3, sl
 80138da:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80138de:	1971      	adds	r1, r6, r5
 80138e0:	4630      	mov	r0, r6
 80138e2:	f7ff ff88 	bl	80137f6 <med3.constprop.0>
 80138e6:	4649      	mov	r1, r9
 80138e8:	eb09 0205 	add.w	r2, r9, r5
 80138ec:	4653      	mov	r3, sl
 80138ee:	4683      	mov	fp, r0
 80138f0:	1b48      	subs	r0, r1, r5
 80138f2:	f7ff ff80 	bl	80137f6 <med3.constprop.0>
 80138f6:	463a      	mov	r2, r7
 80138f8:	4681      	mov	r9, r0
 80138fa:	4653      	mov	r3, sl
 80138fc:	1b79      	subs	r1, r7, r5
 80138fe:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8013902:	f7ff ff78 	bl	80137f6 <med3.constprop.0>
 8013906:	4602      	mov	r2, r0
 8013908:	4649      	mov	r1, r9
 801390a:	4653      	mov	r3, sl
 801390c:	4658      	mov	r0, fp
 801390e:	f7ff ff72 	bl	80137f6 <med3.constprop.0>
 8013912:	4681      	mov	r9, r0
 8013914:	f1b8 0f00 	cmp.w	r8, #0
 8013918:	d124      	bne.n	8013964 <qsort+0x130>
 801391a:	6833      	ldr	r3, [r6, #0]
 801391c:	f8d9 2000 	ldr.w	r2, [r9]
 8013920:	6032      	str	r2, [r6, #0]
 8013922:	f8c9 3000 	str.w	r3, [r9]
 8013926:	eb06 0b04 	add.w	fp, r6, r4
 801392a:	46b9      	mov	r9, r7
 801392c:	465d      	mov	r5, fp
 801392e:	2300      	movs	r3, #0
 8013930:	45bb      	cmp	fp, r7
 8013932:	d835      	bhi.n	80139a0 <qsort+0x16c>
 8013934:	4631      	mov	r1, r6
 8013936:	4658      	mov	r0, fp
 8013938:	9304      	str	r3, [sp, #16]
 801393a:	47d0      	blx	sl
 801393c:	2800      	cmp	r0, #0
 801393e:	9b04      	ldr	r3, [sp, #16]
 8013940:	dc3e      	bgt.n	80139c0 <qsort+0x18c>
 8013942:	d10a      	bne.n	801395a <qsort+0x126>
 8013944:	f1b8 0f00 	cmp.w	r8, #0
 8013948:	d113      	bne.n	8013972 <qsort+0x13e>
 801394a:	682b      	ldr	r3, [r5, #0]
 801394c:	f8db 2000 	ldr.w	r2, [fp]
 8013950:	602a      	str	r2, [r5, #0]
 8013952:	f8cb 3000 	str.w	r3, [fp]
 8013956:	4425      	add	r5, r4
 8013958:	2301      	movs	r3, #1
 801395a:	44a3      	add	fp, r4
 801395c:	e7e8      	b.n	8013930 <qsort+0xfc>
 801395e:	463a      	mov	r2, r7
 8013960:	46b3      	mov	fp, r6
 8013962:	e7d1      	b.n	8013908 <qsort+0xd4>
 8013964:	4643      	mov	r3, r8
 8013966:	4622      	mov	r2, r4
 8013968:	4649      	mov	r1, r9
 801396a:	4630      	mov	r0, r6
 801396c:	f7ff ff2a 	bl	80137c4 <swapfunc>
 8013970:	e7d9      	b.n	8013926 <qsort+0xf2>
 8013972:	4643      	mov	r3, r8
 8013974:	4622      	mov	r2, r4
 8013976:	4659      	mov	r1, fp
 8013978:	4628      	mov	r0, r5
 801397a:	f7ff ff23 	bl	80137c4 <swapfunc>
 801397e:	e7ea      	b.n	8013956 <qsort+0x122>
 8013980:	d10b      	bne.n	801399a <qsort+0x166>
 8013982:	f1b8 0f00 	cmp.w	r8, #0
 8013986:	d114      	bne.n	80139b2 <qsort+0x17e>
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	f8d9 2000 	ldr.w	r2, [r9]
 801398e:	603a      	str	r2, [r7, #0]
 8013990:	f8c9 3000 	str.w	r3, [r9]
 8013994:	eba9 0904 	sub.w	r9, r9, r4
 8013998:	2301      	movs	r3, #1
 801399a:	9f04      	ldr	r7, [sp, #16]
 801399c:	45bb      	cmp	fp, r7
 801399e:	d90f      	bls.n	80139c0 <qsort+0x18c>
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d143      	bne.n	8013a2c <qsort+0x1f8>
 80139a4:	9b01      	ldr	r3, [sp, #4]
 80139a6:	9a03      	ldr	r2, [sp, #12]
 80139a8:	4293      	cmp	r3, r2
 80139aa:	f4bf af61 	bcs.w	8013870 <qsort+0x3c>
 80139ae:	9d01      	ldr	r5, [sp, #4]
 80139b0:	e036      	b.n	8013a20 <qsort+0x1ec>
 80139b2:	4643      	mov	r3, r8
 80139b4:	4622      	mov	r2, r4
 80139b6:	4649      	mov	r1, r9
 80139b8:	4638      	mov	r0, r7
 80139ba:	f7ff ff03 	bl	80137c4 <swapfunc>
 80139be:	e7e9      	b.n	8013994 <qsort+0x160>
 80139c0:	4631      	mov	r1, r6
 80139c2:	4638      	mov	r0, r7
 80139c4:	9305      	str	r3, [sp, #20]
 80139c6:	47d0      	blx	sl
 80139c8:	1b3b      	subs	r3, r7, r4
 80139ca:	2800      	cmp	r0, #0
 80139cc:	9304      	str	r3, [sp, #16]
 80139ce:	9b05      	ldr	r3, [sp, #20]
 80139d0:	dad6      	bge.n	8013980 <qsort+0x14c>
 80139d2:	f1b8 0f00 	cmp.w	r8, #0
 80139d6:	d006      	beq.n	80139e6 <qsort+0x1b2>
 80139d8:	4643      	mov	r3, r8
 80139da:	4622      	mov	r2, r4
 80139dc:	4639      	mov	r1, r7
 80139de:	4658      	mov	r0, fp
 80139e0:	f7ff fef0 	bl	80137c4 <swapfunc>
 80139e4:	e005      	b.n	80139f2 <qsort+0x1be>
 80139e6:	f8db 3000 	ldr.w	r3, [fp]
 80139ea:	683a      	ldr	r2, [r7, #0]
 80139ec:	f8cb 2000 	str.w	r2, [fp]
 80139f0:	603b      	str	r3, [r7, #0]
 80139f2:	9f04      	ldr	r7, [sp, #16]
 80139f4:	e7b0      	b.n	8013958 <qsort+0x124>
 80139f6:	4643      	mov	r3, r8
 80139f8:	4622      	mov	r2, r4
 80139fa:	4639      	mov	r1, r7
 80139fc:	4628      	mov	r0, r5
 80139fe:	f7ff fee1 	bl	80137c4 <swapfunc>
 8013a02:	e00c      	b.n	8013a1e <qsort+0x1ea>
 8013a04:	1b2f      	subs	r7, r5, r4
 8013a06:	4629      	mov	r1, r5
 8013a08:	4638      	mov	r0, r7
 8013a0a:	47d0      	blx	sl
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	dd09      	ble.n	8013a24 <qsort+0x1f0>
 8013a10:	f1b8 0f00 	cmp.w	r8, #0
 8013a14:	d1ef      	bne.n	80139f6 <qsort+0x1c2>
 8013a16:	682b      	ldr	r3, [r5, #0]
 8013a18:	683a      	ldr	r2, [r7, #0]
 8013a1a:	602a      	str	r2, [r5, #0]
 8013a1c:	603b      	str	r3, [r7, #0]
 8013a1e:	463d      	mov	r5, r7
 8013a20:	42ae      	cmp	r6, r5
 8013a22:	d3ef      	bcc.n	8013a04 <qsort+0x1d0>
 8013a24:	9b01      	ldr	r3, [sp, #4]
 8013a26:	4423      	add	r3, r4
 8013a28:	9301      	str	r3, [sp, #4]
 8013a2a:	e7bb      	b.n	80139a4 <qsort+0x170>
 8013a2c:	ebab 0305 	sub.w	r3, fp, r5
 8013a30:	1baa      	subs	r2, r5, r6
 8013a32:	429a      	cmp	r2, r3
 8013a34:	bfa8      	it	ge
 8013a36:	461a      	movge	r2, r3
 8013a38:	9301      	str	r3, [sp, #4]
 8013a3a:	b12a      	cbz	r2, 8013a48 <qsort+0x214>
 8013a3c:	4643      	mov	r3, r8
 8013a3e:	ebab 0102 	sub.w	r1, fp, r2
 8013a42:	4630      	mov	r0, r6
 8013a44:	f7ff febe 	bl	80137c4 <swapfunc>
 8013a48:	9b03      	ldr	r3, [sp, #12]
 8013a4a:	eba3 0209 	sub.w	r2, r3, r9
 8013a4e:	eba9 0707 	sub.w	r7, r9, r7
 8013a52:	1b12      	subs	r2, r2, r4
 8013a54:	42ba      	cmp	r2, r7
 8013a56:	bf28      	it	cs
 8013a58:	463a      	movcs	r2, r7
 8013a5a:	b12a      	cbz	r2, 8013a68 <qsort+0x234>
 8013a5c:	9903      	ldr	r1, [sp, #12]
 8013a5e:	4643      	mov	r3, r8
 8013a60:	1a89      	subs	r1, r1, r2
 8013a62:	4658      	mov	r0, fp
 8013a64:	f7ff feae 	bl	80137c4 <swapfunc>
 8013a68:	9d01      	ldr	r5, [sp, #4]
 8013a6a:	9b03      	ldr	r3, [sp, #12]
 8013a6c:	42af      	cmp	r7, r5
 8013a6e:	eba3 0007 	sub.w	r0, r3, r7
 8013a72:	d904      	bls.n	8013a7e <qsort+0x24a>
 8013a74:	4633      	mov	r3, r6
 8013a76:	463d      	mov	r5, r7
 8013a78:	9f01      	ldr	r7, [sp, #4]
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	42a7      	cmp	r7, r4
 8013a80:	d921      	bls.n	8013ac6 <qsort+0x292>
 8013a82:	fbb7 f1f4 	udiv	r1, r7, r4
 8013a86:	9b02      	ldr	r3, [sp, #8]
 8013a88:	2b07      	cmp	r3, #7
 8013a8a:	d80d      	bhi.n	8013aa8 <qsort+0x274>
 8013a8c:	fbb5 f5f4 	udiv	r5, r5, r4
 8013a90:	aa16      	add	r2, sp, #88	; 0x58
 8013a92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013a96:	f843 6c40 	str.w	r6, [r3, #-64]
 8013a9a:	f843 5c3c 	str.w	r5, [r3, #-60]
 8013a9e:	9b02      	ldr	r3, [sp, #8]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	9302      	str	r3, [sp, #8]
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	e6d6      	b.n	8013856 <qsort+0x22>
 8013aa8:	4653      	mov	r3, sl
 8013aaa:	4622      	mov	r2, r4
 8013aac:	f7ff fec2 	bl	8013834 <qsort>
 8013ab0:	42a5      	cmp	r5, r4
 8013ab2:	d80b      	bhi.n	8013acc <qsort+0x298>
 8013ab4:	9b02      	ldr	r3, [sp, #8]
 8013ab6:	aa16      	add	r2, sp, #88	; 0x58
 8013ab8:	3b01      	subs	r3, #1
 8013aba:	9302      	str	r3, [sp, #8]
 8013abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ac0:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8013ac4:	e7ee      	b.n	8013aa4 <qsort+0x270>
 8013ac6:	42a5      	cmp	r5, r4
 8013ac8:	f67f aed2 	bls.w	8013870 <qsort+0x3c>
 8013acc:	fbb5 f1f4 	udiv	r1, r5, r4
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	e7e7      	b.n	8013aa4 <qsort+0x270>

08013ad4 <realloc>:
 8013ad4:	4b02      	ldr	r3, [pc, #8]	; (8013ae0 <realloc+0xc>)
 8013ad6:	460a      	mov	r2, r1
 8013ad8:	4601      	mov	r1, r0
 8013ada:	6818      	ldr	r0, [r3, #0]
 8013adc:	f002 bb57 	b.w	801618e <_realloc_r>
 8013ae0:	20000088 	.word	0x20000088

08013ae4 <_sbrk_r>:
 8013ae4:	b538      	push	{r3, r4, r5, lr}
 8013ae6:	4d06      	ldr	r5, [pc, #24]	; (8013b00 <_sbrk_r+0x1c>)
 8013ae8:	2300      	movs	r3, #0
 8013aea:	4604      	mov	r4, r0
 8013aec:	4608      	mov	r0, r1
 8013aee:	602b      	str	r3, [r5, #0]
 8013af0:	f7ed fe82 	bl	80017f8 <_sbrk>
 8013af4:	1c43      	adds	r3, r0, #1
 8013af6:	d102      	bne.n	8013afe <_sbrk_r+0x1a>
 8013af8:	682b      	ldr	r3, [r5, #0]
 8013afa:	b103      	cbz	r3, 8013afe <_sbrk_r+0x1a>
 8013afc:	6023      	str	r3, [r4, #0]
 8013afe:	bd38      	pop	{r3, r4, r5, pc}
 8013b00:	20003e80 	.word	0x20003e80

08013b04 <siprintf>:
 8013b04:	b40e      	push	{r1, r2, r3}
 8013b06:	b500      	push	{lr}
 8013b08:	b09c      	sub	sp, #112	; 0x70
 8013b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8013b0c:	9002      	str	r0, [sp, #8]
 8013b0e:	9006      	str	r0, [sp, #24]
 8013b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b14:	4809      	ldr	r0, [pc, #36]	; (8013b3c <siprintf+0x38>)
 8013b16:	9107      	str	r1, [sp, #28]
 8013b18:	9104      	str	r1, [sp, #16]
 8013b1a:	4909      	ldr	r1, [pc, #36]	; (8013b40 <siprintf+0x3c>)
 8013b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b20:	9105      	str	r1, [sp, #20]
 8013b22:	6800      	ldr	r0, [r0, #0]
 8013b24:	9301      	str	r3, [sp, #4]
 8013b26:	a902      	add	r1, sp, #8
 8013b28:	f002 fbbc 	bl	80162a4 <_svfiprintf_r>
 8013b2c:	9b02      	ldr	r3, [sp, #8]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	701a      	strb	r2, [r3, #0]
 8013b32:	b01c      	add	sp, #112	; 0x70
 8013b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b38:	b003      	add	sp, #12
 8013b3a:	4770      	bx	lr
 8013b3c:	20000088 	.word	0x20000088
 8013b40:	ffff0208 	.word	0xffff0208

08013b44 <siscanf>:
 8013b44:	b40e      	push	{r1, r2, r3}
 8013b46:	b510      	push	{r4, lr}
 8013b48:	b09f      	sub	sp, #124	; 0x7c
 8013b4a:	ac21      	add	r4, sp, #132	; 0x84
 8013b4c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013b50:	f854 2b04 	ldr.w	r2, [r4], #4
 8013b54:	9201      	str	r2, [sp, #4]
 8013b56:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013b5a:	9004      	str	r0, [sp, #16]
 8013b5c:	9008      	str	r0, [sp, #32]
 8013b5e:	f7ec fcc9 	bl	80004f4 <strlen>
 8013b62:	4b0c      	ldr	r3, [pc, #48]	; (8013b94 <siscanf+0x50>)
 8013b64:	9005      	str	r0, [sp, #20]
 8013b66:	9009      	str	r0, [sp, #36]	; 0x24
 8013b68:	930d      	str	r3, [sp, #52]	; 0x34
 8013b6a:	480b      	ldr	r0, [pc, #44]	; (8013b98 <siscanf+0x54>)
 8013b6c:	9a01      	ldr	r2, [sp, #4]
 8013b6e:	6800      	ldr	r0, [r0, #0]
 8013b70:	9403      	str	r4, [sp, #12]
 8013b72:	2300      	movs	r3, #0
 8013b74:	9311      	str	r3, [sp, #68]	; 0x44
 8013b76:	9316      	str	r3, [sp, #88]	; 0x58
 8013b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b80:	a904      	add	r1, sp, #16
 8013b82:	4623      	mov	r3, r4
 8013b84:	f002 fce8 	bl	8016558 <__ssvfiscanf_r>
 8013b88:	b01f      	add	sp, #124	; 0x7c
 8013b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b8e:	b003      	add	sp, #12
 8013b90:	4770      	bx	lr
 8013b92:	bf00      	nop
 8013b94:	08013bbf 	.word	0x08013bbf
 8013b98:	20000088 	.word	0x20000088

08013b9c <__sread>:
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ba4:	f002 ffa2 	bl	8016aec <_read_r>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	bfab      	itete	ge
 8013bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013bae:	89a3      	ldrhlt	r3, [r4, #12]
 8013bb0:	181b      	addge	r3, r3, r0
 8013bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013bb6:	bfac      	ite	ge
 8013bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013bba:	81a3      	strhlt	r3, [r4, #12]
 8013bbc:	bd10      	pop	{r4, pc}

08013bbe <__seofread>:
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	4770      	bx	lr

08013bc2 <__swrite>:
 8013bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc6:	461f      	mov	r7, r3
 8013bc8:	898b      	ldrh	r3, [r1, #12]
 8013bca:	05db      	lsls	r3, r3, #23
 8013bcc:	4605      	mov	r5, r0
 8013bce:	460c      	mov	r4, r1
 8013bd0:	4616      	mov	r6, r2
 8013bd2:	d505      	bpl.n	8013be0 <__swrite+0x1e>
 8013bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bd8:	2302      	movs	r3, #2
 8013bda:	2200      	movs	r2, #0
 8013bdc:	f001 fdcc 	bl	8015778 <_lseek_r>
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bea:	81a3      	strh	r3, [r4, #12]
 8013bec:	4632      	mov	r2, r6
 8013bee:	463b      	mov	r3, r7
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf6:	f001 b98b 	b.w	8014f10 <_write_r>

08013bfa <__sseek>:
 8013bfa:	b510      	push	{r4, lr}
 8013bfc:	460c      	mov	r4, r1
 8013bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c02:	f001 fdb9 	bl	8015778 <_lseek_r>
 8013c06:	1c43      	adds	r3, r0, #1
 8013c08:	89a3      	ldrh	r3, [r4, #12]
 8013c0a:	bf15      	itete	ne
 8013c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c16:	81a3      	strheq	r3, [r4, #12]
 8013c18:	bf18      	it	ne
 8013c1a:	81a3      	strhne	r3, [r4, #12]
 8013c1c:	bd10      	pop	{r4, pc}

08013c1e <__sclose>:
 8013c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c22:	f001 b9f5 	b.w	8015010 <_close_r>

08013c26 <strchr>:
 8013c26:	b2c9      	uxtb	r1, r1
 8013c28:	4603      	mov	r3, r0
 8013c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c2e:	b11a      	cbz	r2, 8013c38 <strchr+0x12>
 8013c30:	428a      	cmp	r2, r1
 8013c32:	d1f9      	bne.n	8013c28 <strchr+0x2>
 8013c34:	4618      	mov	r0, r3
 8013c36:	4770      	bx	lr
 8013c38:	2900      	cmp	r1, #0
 8013c3a:	bf18      	it	ne
 8013c3c:	2300      	movne	r3, #0
 8013c3e:	e7f9      	b.n	8013c34 <strchr+0xe>

08013c40 <strcspn>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	4603      	mov	r3, r0
 8013c44:	461e      	mov	r6, r3
 8013c46:	f813 4b01 	ldrb.w	r4, [r3], #1
 8013c4a:	b144      	cbz	r4, 8013c5e <strcspn+0x1e>
 8013c4c:	1e4a      	subs	r2, r1, #1
 8013c4e:	e001      	b.n	8013c54 <strcspn+0x14>
 8013c50:	42a5      	cmp	r5, r4
 8013c52:	d004      	beq.n	8013c5e <strcspn+0x1e>
 8013c54:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8013c58:	2d00      	cmp	r5, #0
 8013c5a:	d1f9      	bne.n	8013c50 <strcspn+0x10>
 8013c5c:	e7f2      	b.n	8013c44 <strcspn+0x4>
 8013c5e:	1a30      	subs	r0, r6, r0
 8013c60:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c64 <_strerror_r>:
 8013c64:	b510      	push	{r4, lr}
 8013c66:	4604      	mov	r4, r0
 8013c68:	4608      	mov	r0, r1
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	288e      	cmp	r0, #142	; 0x8e
 8013c6e:	f200 8130 	bhi.w	8013ed2 <_strerror_r+0x26e>
 8013c72:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013c76:	0139      	.short	0x0139
 8013c78:	0092008f 	.word	0x0092008f
 8013c7c:	00960094 	.word	0x00960094
 8013c80:	009a0098 	.word	0x009a0098
 8013c84:	009e009c 	.word	0x009e009c
 8013c88:	00a400a2 	.word	0x00a400a2
 8013c8c:	00aa00a8 	.word	0x00aa00a8
 8013c90:	00ae00ac 	.word	0x00ae00ac
 8013c94:	00b0012e 	.word	0x00b0012e
 8013c98:	00b400b2 	.word	0x00b400b2
 8013c9c:	00b800b6 	.word	0x00b800b6
 8013ca0:	00c000be 	.word	0x00c000be
 8013ca4:	00c800c6 	.word	0x00c800c6
 8013ca8:	00cc00ca 	.word	0x00cc00ca
 8013cac:	00d200ce 	.word	0x00d200ce
 8013cb0:	00d800d6 	.word	0x00d800d6
 8013cb4:	00dc00da 	.word	0x00dc00da
 8013cb8:	00e000de 	.word	0x00e000de
 8013cbc:	00e400e2 	.word	0x00e400e2
 8013cc0:	012e012e 	.word	0x012e012e
 8013cc4:	012e012e 	.word	0x012e012e
 8013cc8:	012e012e 	.word	0x012e012e
 8013ccc:	012e012e 	.word	0x012e012e
 8013cd0:	00ec00e8 	.word	0x00ec00e8
 8013cd4:	012e012e 	.word	0x012e012e
 8013cd8:	012e012e 	.word	0x012e012e
 8013cdc:	012e012e 	.word	0x012e012e
 8013ce0:	012e012e 	.word	0x012e012e
 8013ce4:	012e012e 	.word	0x012e012e
 8013ce8:	012e012e 	.word	0x012e012e
 8013cec:	00ee012e 	.word	0x00ee012e
 8013cf0:	00f00108 	.word	0x00f00108
 8013cf4:	012e00f2 	.word	0x012e00f2
 8013cf8:	012e012e 	.word	0x012e012e
 8013cfc:	012e00f4 	.word	0x012e00f4
 8013d00:	012e012e 	.word	0x012e012e
 8013d04:	012e00f6 	.word	0x012e00f6
 8013d08:	00fa012e 	.word	0x00fa012e
 8013d0c:	012e012e 	.word	0x012e012e
 8013d10:	012e00fc 	.word	0x012e00fc
 8013d14:	012e012e 	.word	0x012e012e
 8013d18:	012e012e 	.word	0x012e012e
 8013d1c:	012e012e 	.word	0x012e012e
 8013d20:	012e012e 	.word	0x012e012e
 8013d24:	00fe012e 	.word	0x00fe012e
 8013d28:	0100012e 	.word	0x0100012e
 8013d2c:	01040102 	.word	0x01040102
 8013d30:	012e012e 	.word	0x012e012e
 8013d34:	012e0126 	.word	0x012e0126
 8013d38:	012e012e 	.word	0x012e012e
 8013d3c:	012e012e 	.word	0x012e012e
 8013d40:	012e012e 	.word	0x012e012e
 8013d44:	0114012e 	.word	0x0114012e
 8013d48:	010a0106 	.word	0x010a0106
 8013d4c:	010e010c 	.word	0x010e010c
 8013d50:	012e0110 	.word	0x012e0110
 8013d54:	01160112 	.word	0x01160112
 8013d58:	00ea011a 	.word	0x00ea011a
 8013d5c:	012c00c2 	.word	0x012c00c2
 8013d60:	00d000ba 	.word	0x00d000ba
 8013d64:	00a000bc 	.word	0x00a000bc
 8013d68:	012a00a6 	.word	0x012a00a6
 8013d6c:	012e00f8 	.word	0x012e00f8
 8013d70:	00c40118 	.word	0x00c40118
 8013d74:	011c011e 	.word	0x011c011e
 8013d78:	012e012e 	.word	0x012e012e
 8013d7c:	012e012e 	.word	0x012e012e
 8013d80:	00d4012e 	.word	0x00d4012e
 8013d84:	012e012e 	.word	0x012e012e
 8013d88:	00e6012e 	.word	0x00e6012e
 8013d8c:	01200128 	.word	0x01200128
 8013d90:	01240122 	.word	0x01240122
 8013d94:	4b55      	ldr	r3, [pc, #340]	; (8013eec <_strerror_r+0x288>)
 8013d96:	4618      	mov	r0, r3
 8013d98:	bd10      	pop	{r4, pc}
 8013d9a:	4b55      	ldr	r3, [pc, #340]	; (8013ef0 <_strerror_r+0x28c>)
 8013d9c:	e7fb      	b.n	8013d96 <_strerror_r+0x132>
 8013d9e:	4b55      	ldr	r3, [pc, #340]	; (8013ef4 <_strerror_r+0x290>)
 8013da0:	e7f9      	b.n	8013d96 <_strerror_r+0x132>
 8013da2:	4b55      	ldr	r3, [pc, #340]	; (8013ef8 <_strerror_r+0x294>)
 8013da4:	e7f7      	b.n	8013d96 <_strerror_r+0x132>
 8013da6:	4b55      	ldr	r3, [pc, #340]	; (8013efc <_strerror_r+0x298>)
 8013da8:	e7f5      	b.n	8013d96 <_strerror_r+0x132>
 8013daa:	4b55      	ldr	r3, [pc, #340]	; (8013f00 <_strerror_r+0x29c>)
 8013dac:	e7f3      	b.n	8013d96 <_strerror_r+0x132>
 8013dae:	4b55      	ldr	r3, [pc, #340]	; (8013f04 <_strerror_r+0x2a0>)
 8013db0:	e7f1      	b.n	8013d96 <_strerror_r+0x132>
 8013db2:	4b55      	ldr	r3, [pc, #340]	; (8013f08 <_strerror_r+0x2a4>)
 8013db4:	e7ef      	b.n	8013d96 <_strerror_r+0x132>
 8013db6:	4b55      	ldr	r3, [pc, #340]	; (8013f0c <_strerror_r+0x2a8>)
 8013db8:	e7ed      	b.n	8013d96 <_strerror_r+0x132>
 8013dba:	4b55      	ldr	r3, [pc, #340]	; (8013f10 <_strerror_r+0x2ac>)
 8013dbc:	e7eb      	b.n	8013d96 <_strerror_r+0x132>
 8013dbe:	4b55      	ldr	r3, [pc, #340]	; (8013f14 <_strerror_r+0x2b0>)
 8013dc0:	e7e9      	b.n	8013d96 <_strerror_r+0x132>
 8013dc2:	4b55      	ldr	r3, [pc, #340]	; (8013f18 <_strerror_r+0x2b4>)
 8013dc4:	e7e7      	b.n	8013d96 <_strerror_r+0x132>
 8013dc6:	4b55      	ldr	r3, [pc, #340]	; (8013f1c <_strerror_r+0x2b8>)
 8013dc8:	e7e5      	b.n	8013d96 <_strerror_r+0x132>
 8013dca:	4b55      	ldr	r3, [pc, #340]	; (8013f20 <_strerror_r+0x2bc>)
 8013dcc:	e7e3      	b.n	8013d96 <_strerror_r+0x132>
 8013dce:	4b55      	ldr	r3, [pc, #340]	; (8013f24 <_strerror_r+0x2c0>)
 8013dd0:	e7e1      	b.n	8013d96 <_strerror_r+0x132>
 8013dd2:	4b55      	ldr	r3, [pc, #340]	; (8013f28 <_strerror_r+0x2c4>)
 8013dd4:	e7df      	b.n	8013d96 <_strerror_r+0x132>
 8013dd6:	4b55      	ldr	r3, [pc, #340]	; (8013f2c <_strerror_r+0x2c8>)
 8013dd8:	e7dd      	b.n	8013d96 <_strerror_r+0x132>
 8013dda:	4b55      	ldr	r3, [pc, #340]	; (8013f30 <_strerror_r+0x2cc>)
 8013ddc:	e7db      	b.n	8013d96 <_strerror_r+0x132>
 8013dde:	4b55      	ldr	r3, [pc, #340]	; (8013f34 <_strerror_r+0x2d0>)
 8013de0:	e7d9      	b.n	8013d96 <_strerror_r+0x132>
 8013de2:	4b55      	ldr	r3, [pc, #340]	; (8013f38 <_strerror_r+0x2d4>)
 8013de4:	e7d7      	b.n	8013d96 <_strerror_r+0x132>
 8013de6:	4b55      	ldr	r3, [pc, #340]	; (8013f3c <_strerror_r+0x2d8>)
 8013de8:	e7d5      	b.n	8013d96 <_strerror_r+0x132>
 8013dea:	4b55      	ldr	r3, [pc, #340]	; (8013f40 <_strerror_r+0x2dc>)
 8013dec:	e7d3      	b.n	8013d96 <_strerror_r+0x132>
 8013dee:	4b55      	ldr	r3, [pc, #340]	; (8013f44 <_strerror_r+0x2e0>)
 8013df0:	e7d1      	b.n	8013d96 <_strerror_r+0x132>
 8013df2:	4b55      	ldr	r3, [pc, #340]	; (8013f48 <_strerror_r+0x2e4>)
 8013df4:	e7cf      	b.n	8013d96 <_strerror_r+0x132>
 8013df6:	4b55      	ldr	r3, [pc, #340]	; (8013f4c <_strerror_r+0x2e8>)
 8013df8:	e7cd      	b.n	8013d96 <_strerror_r+0x132>
 8013dfa:	4b55      	ldr	r3, [pc, #340]	; (8013f50 <_strerror_r+0x2ec>)
 8013dfc:	e7cb      	b.n	8013d96 <_strerror_r+0x132>
 8013dfe:	4b55      	ldr	r3, [pc, #340]	; (8013f54 <_strerror_r+0x2f0>)
 8013e00:	e7c9      	b.n	8013d96 <_strerror_r+0x132>
 8013e02:	4b55      	ldr	r3, [pc, #340]	; (8013f58 <_strerror_r+0x2f4>)
 8013e04:	e7c7      	b.n	8013d96 <_strerror_r+0x132>
 8013e06:	4b55      	ldr	r3, [pc, #340]	; (8013f5c <_strerror_r+0x2f8>)
 8013e08:	e7c5      	b.n	8013d96 <_strerror_r+0x132>
 8013e0a:	4b55      	ldr	r3, [pc, #340]	; (8013f60 <_strerror_r+0x2fc>)
 8013e0c:	e7c3      	b.n	8013d96 <_strerror_r+0x132>
 8013e0e:	4b55      	ldr	r3, [pc, #340]	; (8013f64 <_strerror_r+0x300>)
 8013e10:	e7c1      	b.n	8013d96 <_strerror_r+0x132>
 8013e12:	4b55      	ldr	r3, [pc, #340]	; (8013f68 <_strerror_r+0x304>)
 8013e14:	e7bf      	b.n	8013d96 <_strerror_r+0x132>
 8013e16:	4b55      	ldr	r3, [pc, #340]	; (8013f6c <_strerror_r+0x308>)
 8013e18:	e7bd      	b.n	8013d96 <_strerror_r+0x132>
 8013e1a:	4b55      	ldr	r3, [pc, #340]	; (8013f70 <_strerror_r+0x30c>)
 8013e1c:	e7bb      	b.n	8013d96 <_strerror_r+0x132>
 8013e1e:	4b55      	ldr	r3, [pc, #340]	; (8013f74 <_strerror_r+0x310>)
 8013e20:	e7b9      	b.n	8013d96 <_strerror_r+0x132>
 8013e22:	4b55      	ldr	r3, [pc, #340]	; (8013f78 <_strerror_r+0x314>)
 8013e24:	e7b7      	b.n	8013d96 <_strerror_r+0x132>
 8013e26:	4b55      	ldr	r3, [pc, #340]	; (8013f7c <_strerror_r+0x318>)
 8013e28:	e7b5      	b.n	8013d96 <_strerror_r+0x132>
 8013e2a:	4b55      	ldr	r3, [pc, #340]	; (8013f80 <_strerror_r+0x31c>)
 8013e2c:	e7b3      	b.n	8013d96 <_strerror_r+0x132>
 8013e2e:	4b55      	ldr	r3, [pc, #340]	; (8013f84 <_strerror_r+0x320>)
 8013e30:	e7b1      	b.n	8013d96 <_strerror_r+0x132>
 8013e32:	4b55      	ldr	r3, [pc, #340]	; (8013f88 <_strerror_r+0x324>)
 8013e34:	e7af      	b.n	8013d96 <_strerror_r+0x132>
 8013e36:	4b55      	ldr	r3, [pc, #340]	; (8013f8c <_strerror_r+0x328>)
 8013e38:	e7ad      	b.n	8013d96 <_strerror_r+0x132>
 8013e3a:	4b55      	ldr	r3, [pc, #340]	; (8013f90 <_strerror_r+0x32c>)
 8013e3c:	e7ab      	b.n	8013d96 <_strerror_r+0x132>
 8013e3e:	4b55      	ldr	r3, [pc, #340]	; (8013f94 <_strerror_r+0x330>)
 8013e40:	e7a9      	b.n	8013d96 <_strerror_r+0x132>
 8013e42:	4b55      	ldr	r3, [pc, #340]	; (8013f98 <_strerror_r+0x334>)
 8013e44:	e7a7      	b.n	8013d96 <_strerror_r+0x132>
 8013e46:	4b55      	ldr	r3, [pc, #340]	; (8013f9c <_strerror_r+0x338>)
 8013e48:	e7a5      	b.n	8013d96 <_strerror_r+0x132>
 8013e4a:	4b55      	ldr	r3, [pc, #340]	; (8013fa0 <_strerror_r+0x33c>)
 8013e4c:	e7a3      	b.n	8013d96 <_strerror_r+0x132>
 8013e4e:	4b55      	ldr	r3, [pc, #340]	; (8013fa4 <_strerror_r+0x340>)
 8013e50:	e7a1      	b.n	8013d96 <_strerror_r+0x132>
 8013e52:	4b55      	ldr	r3, [pc, #340]	; (8013fa8 <_strerror_r+0x344>)
 8013e54:	e79f      	b.n	8013d96 <_strerror_r+0x132>
 8013e56:	4b55      	ldr	r3, [pc, #340]	; (8013fac <_strerror_r+0x348>)
 8013e58:	e79d      	b.n	8013d96 <_strerror_r+0x132>
 8013e5a:	4b55      	ldr	r3, [pc, #340]	; (8013fb0 <_strerror_r+0x34c>)
 8013e5c:	e79b      	b.n	8013d96 <_strerror_r+0x132>
 8013e5e:	4b55      	ldr	r3, [pc, #340]	; (8013fb4 <_strerror_r+0x350>)
 8013e60:	e799      	b.n	8013d96 <_strerror_r+0x132>
 8013e62:	4b55      	ldr	r3, [pc, #340]	; (8013fb8 <_strerror_r+0x354>)
 8013e64:	e797      	b.n	8013d96 <_strerror_r+0x132>
 8013e66:	4b55      	ldr	r3, [pc, #340]	; (8013fbc <_strerror_r+0x358>)
 8013e68:	e795      	b.n	8013d96 <_strerror_r+0x132>
 8013e6a:	4b55      	ldr	r3, [pc, #340]	; (8013fc0 <_strerror_r+0x35c>)
 8013e6c:	e793      	b.n	8013d96 <_strerror_r+0x132>
 8013e6e:	4b55      	ldr	r3, [pc, #340]	; (8013fc4 <_strerror_r+0x360>)
 8013e70:	e791      	b.n	8013d96 <_strerror_r+0x132>
 8013e72:	4b55      	ldr	r3, [pc, #340]	; (8013fc8 <_strerror_r+0x364>)
 8013e74:	e78f      	b.n	8013d96 <_strerror_r+0x132>
 8013e76:	4b55      	ldr	r3, [pc, #340]	; (8013fcc <_strerror_r+0x368>)
 8013e78:	e78d      	b.n	8013d96 <_strerror_r+0x132>
 8013e7a:	4b55      	ldr	r3, [pc, #340]	; (8013fd0 <_strerror_r+0x36c>)
 8013e7c:	e78b      	b.n	8013d96 <_strerror_r+0x132>
 8013e7e:	4b55      	ldr	r3, [pc, #340]	; (8013fd4 <_strerror_r+0x370>)
 8013e80:	e789      	b.n	8013d96 <_strerror_r+0x132>
 8013e82:	4b55      	ldr	r3, [pc, #340]	; (8013fd8 <_strerror_r+0x374>)
 8013e84:	e787      	b.n	8013d96 <_strerror_r+0x132>
 8013e86:	4b55      	ldr	r3, [pc, #340]	; (8013fdc <_strerror_r+0x378>)
 8013e88:	e785      	b.n	8013d96 <_strerror_r+0x132>
 8013e8a:	4b55      	ldr	r3, [pc, #340]	; (8013fe0 <_strerror_r+0x37c>)
 8013e8c:	e783      	b.n	8013d96 <_strerror_r+0x132>
 8013e8e:	4b55      	ldr	r3, [pc, #340]	; (8013fe4 <_strerror_r+0x380>)
 8013e90:	e781      	b.n	8013d96 <_strerror_r+0x132>
 8013e92:	4b55      	ldr	r3, [pc, #340]	; (8013fe8 <_strerror_r+0x384>)
 8013e94:	e77f      	b.n	8013d96 <_strerror_r+0x132>
 8013e96:	4b55      	ldr	r3, [pc, #340]	; (8013fec <_strerror_r+0x388>)
 8013e98:	e77d      	b.n	8013d96 <_strerror_r+0x132>
 8013e9a:	4b55      	ldr	r3, [pc, #340]	; (8013ff0 <_strerror_r+0x38c>)
 8013e9c:	e77b      	b.n	8013d96 <_strerror_r+0x132>
 8013e9e:	4b55      	ldr	r3, [pc, #340]	; (8013ff4 <_strerror_r+0x390>)
 8013ea0:	e779      	b.n	8013d96 <_strerror_r+0x132>
 8013ea2:	4b55      	ldr	r3, [pc, #340]	; (8013ff8 <_strerror_r+0x394>)
 8013ea4:	e777      	b.n	8013d96 <_strerror_r+0x132>
 8013ea6:	4b55      	ldr	r3, [pc, #340]	; (8013ffc <_strerror_r+0x398>)
 8013ea8:	e775      	b.n	8013d96 <_strerror_r+0x132>
 8013eaa:	4b55      	ldr	r3, [pc, #340]	; (8014000 <_strerror_r+0x39c>)
 8013eac:	e773      	b.n	8013d96 <_strerror_r+0x132>
 8013eae:	4b55      	ldr	r3, [pc, #340]	; (8014004 <_strerror_r+0x3a0>)
 8013eb0:	e771      	b.n	8013d96 <_strerror_r+0x132>
 8013eb2:	4b55      	ldr	r3, [pc, #340]	; (8014008 <_strerror_r+0x3a4>)
 8013eb4:	e76f      	b.n	8013d96 <_strerror_r+0x132>
 8013eb6:	4b55      	ldr	r3, [pc, #340]	; (801400c <_strerror_r+0x3a8>)
 8013eb8:	e76d      	b.n	8013d96 <_strerror_r+0x132>
 8013eba:	4b55      	ldr	r3, [pc, #340]	; (8014010 <_strerror_r+0x3ac>)
 8013ebc:	e76b      	b.n	8013d96 <_strerror_r+0x132>
 8013ebe:	4b55      	ldr	r3, [pc, #340]	; (8014014 <_strerror_r+0x3b0>)
 8013ec0:	e769      	b.n	8013d96 <_strerror_r+0x132>
 8013ec2:	4b55      	ldr	r3, [pc, #340]	; (8014018 <_strerror_r+0x3b4>)
 8013ec4:	e767      	b.n	8013d96 <_strerror_r+0x132>
 8013ec6:	4b55      	ldr	r3, [pc, #340]	; (801401c <_strerror_r+0x3b8>)
 8013ec8:	e765      	b.n	8013d96 <_strerror_r+0x132>
 8013eca:	4b55      	ldr	r3, [pc, #340]	; (8014020 <_strerror_r+0x3bc>)
 8013ecc:	e763      	b.n	8013d96 <_strerror_r+0x132>
 8013ece:	4b55      	ldr	r3, [pc, #340]	; (8014024 <_strerror_r+0x3c0>)
 8013ed0:	e761      	b.n	8013d96 <_strerror_r+0x132>
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	bf14      	ite	ne
 8013ed6:	461a      	movne	r2, r3
 8013ed8:	4622      	moveq	r2, r4
 8013eda:	f000 ffc5 	bl	8014e68 <_user_strerror>
 8013ede:	4b52      	ldr	r3, [pc, #328]	; (8014028 <_strerror_r+0x3c4>)
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	bf18      	it	ne
 8013ee4:	4603      	movne	r3, r0
 8013ee6:	e756      	b.n	8013d96 <_strerror_r+0x132>
 8013ee8:	4b50      	ldr	r3, [pc, #320]	; (801402c <_strerror_r+0x3c8>)
 8013eea:	e754      	b.n	8013d96 <_strerror_r+0x132>
 8013eec:	0801c38b 	.word	0x0801c38b
 8013ef0:	0801c395 	.word	0x0801c395
 8013ef4:	0801c3af 	.word	0x0801c3af
 8013ef8:	0801c3bf 	.word	0x0801c3bf
 8013efc:	0801c3d7 	.word	0x0801c3d7
 8013f00:	0801c3e1 	.word	0x0801c3e1
 8013f04:	0801c3fb 	.word	0x0801c3fb
 8013f08:	0801c40d 	.word	0x0801c40d
 8013f0c:	0801c41f 	.word	0x0801c41f
 8013f10:	0801c438 	.word	0x0801c438
 8013f14:	0801c448 	.word	0x0801c448
 8013f18:	0801c454 	.word	0x0801c454
 8013f1c:	0801c471 	.word	0x0801c471
 8013f20:	0801c483 	.word	0x0801c483
 8013f24:	0801c494 	.word	0x0801c494
 8013f28:	0801c4a6 	.word	0x0801c4a6
 8013f2c:	0801c4b2 	.word	0x0801c4b2
 8013f30:	0801c4ca 	.word	0x0801c4ca
 8013f34:	0801c4d6 	.word	0x0801c4d6
 8013f38:	0801c4e8 	.word	0x0801c4e8
 8013f3c:	0801c4f7 	.word	0x0801c4f7
 8013f40:	0801c507 	.word	0x0801c507
 8013f44:	0801c514 	.word	0x0801c514
 8013f48:	0801c533 	.word	0x0801c533
 8013f4c:	0801c542 	.word	0x0801c542
 8013f50:	0801c553 	.word	0x0801c553
 8013f54:	0801c577 	.word	0x0801c577
 8013f58:	0801c595 	.word	0x0801c595
 8013f5c:	0801c5b3 	.word	0x0801c5b3
 8013f60:	0801c5d3 	.word	0x0801c5d3
 8013f64:	0801c5ea 	.word	0x0801c5ea
 8013f68:	0801c5f9 	.word	0x0801c5f9
 8013f6c:	0801c608 	.word	0x0801c608
 8013f70:	0801c61c 	.word	0x0801c61c
 8013f74:	0801c634 	.word	0x0801c634
 8013f78:	0801c642 	.word	0x0801c642
 8013f7c:	0801c64f 	.word	0x0801c64f
 8013f80:	0801c665 	.word	0x0801c665
 8013f84:	0801c674 	.word	0x0801c674
 8013f88:	0801c680 	.word	0x0801c680
 8013f8c:	0801c6af 	.word	0x0801c6af
 8013f90:	0801c6c0 	.word	0x0801c6c0
 8013f94:	0801c6db 	.word	0x0801c6db
 8013f98:	0801c6ee 	.word	0x0801c6ee
 8013f9c:	0801c704 	.word	0x0801c704
 8013fa0:	0801c70d 	.word	0x0801c70d
 8013fa4:	0801c724 	.word	0x0801c724
 8013fa8:	0801c72c 	.word	0x0801c72c
 8013fac:	0801c739 	.word	0x0801c739
 8013fb0:	0801c74e 	.word	0x0801c74e
 8013fb4:	0801c762 	.word	0x0801c762
 8013fb8:	0801c77a 	.word	0x0801c77a
 8013fbc:	0801c789 	.word	0x0801c789
 8013fc0:	0801c79a 	.word	0x0801c79a
 8013fc4:	0801c7ad 	.word	0x0801c7ad
 8013fc8:	0801c7b9 	.word	0x0801c7b9
 8013fcc:	0801c7d2 	.word	0x0801c7d2
 8013fd0:	0801c7e6 	.word	0x0801c7e6
 8013fd4:	0801c801 	.word	0x0801c801
 8013fd8:	0801c819 	.word	0x0801c819
 8013fdc:	0801c833 	.word	0x0801c833
 8013fe0:	0801c83b 	.word	0x0801c83b
 8013fe4:	0801c86b 	.word	0x0801c86b
 8013fe8:	0801c88a 	.word	0x0801c88a
 8013fec:	0801c8a9 	.word	0x0801c8a9
 8013ff0:	0801c8c0 	.word	0x0801c8c0
 8013ff4:	0801c8d3 	.word	0x0801c8d3
 8013ff8:	0801c8ec 	.word	0x0801c8ec
 8013ffc:	0801c903 	.word	0x0801c903
 8014000:	0801c919 	.word	0x0801c919
 8014004:	0801c93a 	.word	0x0801c93a
 8014008:	0801c952 	.word	0x0801c952
 801400c:	0801c96e 	.word	0x0801c96e
 8014010:	0801c981 	.word	0x0801c981
 8014014:	0801c997 	.word	0x0801c997
 8014018:	0801c9ab 	.word	0x0801c9ab
 801401c:	0801c9cd 	.word	0x0801c9cd
 8014020:	0801c9f3 	.word	0x0801c9f3
 8014024:	0801ca04 	.word	0x0801ca04
 8014028:	0801ccd2 	.word	0x0801ccd2
 801402c:	0801ca19 	.word	0x0801ca19

08014030 <strerror>:
 8014030:	4601      	mov	r1, r0
 8014032:	4803      	ldr	r0, [pc, #12]	; (8014040 <strerror+0x10>)
 8014034:	2300      	movs	r3, #0
 8014036:	6800      	ldr	r0, [r0, #0]
 8014038:	461a      	mov	r2, r3
 801403a:	f7ff be13 	b.w	8013c64 <_strerror_r>
 801403e:	bf00      	nop
 8014040:	20000088 	.word	0x20000088

08014044 <strncpy>:
 8014044:	b510      	push	{r4, lr}
 8014046:	3901      	subs	r1, #1
 8014048:	4603      	mov	r3, r0
 801404a:	b132      	cbz	r2, 801405a <strncpy+0x16>
 801404c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014050:	f803 4b01 	strb.w	r4, [r3], #1
 8014054:	3a01      	subs	r2, #1
 8014056:	2c00      	cmp	r4, #0
 8014058:	d1f7      	bne.n	801404a <strncpy+0x6>
 801405a:	441a      	add	r2, r3
 801405c:	2100      	movs	r1, #0
 801405e:	4293      	cmp	r3, r2
 8014060:	d100      	bne.n	8014064 <strncpy+0x20>
 8014062:	bd10      	pop	{r4, pc}
 8014064:	f803 1b01 	strb.w	r1, [r3], #1
 8014068:	e7f9      	b.n	801405e <strncpy+0x1a>

0801406a <strrchr>:
 801406a:	b538      	push	{r3, r4, r5, lr}
 801406c:	4603      	mov	r3, r0
 801406e:	460c      	mov	r4, r1
 8014070:	b969      	cbnz	r1, 801408e <strrchr+0x24>
 8014072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014076:	f7ff bdd6 	b.w	8013c26 <strchr>
 801407a:	1c43      	adds	r3, r0, #1
 801407c:	4605      	mov	r5, r0
 801407e:	4621      	mov	r1, r4
 8014080:	4618      	mov	r0, r3
 8014082:	f7ff fdd0 	bl	8013c26 <strchr>
 8014086:	2800      	cmp	r0, #0
 8014088:	d1f7      	bne.n	801407a <strrchr+0x10>
 801408a:	4628      	mov	r0, r5
 801408c:	bd38      	pop	{r3, r4, r5, pc}
 801408e:	2500      	movs	r5, #0
 8014090:	e7f5      	b.n	801407e <strrchr+0x14>

08014092 <strspn>:
 8014092:	b570      	push	{r4, r5, r6, lr}
 8014094:	4603      	mov	r3, r0
 8014096:	461e      	mov	r6, r3
 8014098:	f813 4b01 	ldrb.w	r4, [r3], #1
 801409c:	b13c      	cbz	r4, 80140ae <strspn+0x1c>
 801409e:	1e4a      	subs	r2, r1, #1
 80140a0:	e001      	b.n	80140a6 <strspn+0x14>
 80140a2:	42a5      	cmp	r5, r4
 80140a4:	d0f7      	beq.n	8014096 <strspn+0x4>
 80140a6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80140aa:	2d00      	cmp	r5, #0
 80140ac:	d1f9      	bne.n	80140a2 <strspn+0x10>
 80140ae:	1a30      	subs	r0, r6, r0
 80140b0:	bd70      	pop	{r4, r5, r6, pc}

080140b2 <strstr>:
 80140b2:	780a      	ldrb	r2, [r1, #0]
 80140b4:	b570      	push	{r4, r5, r6, lr}
 80140b6:	b96a      	cbnz	r2, 80140d4 <strstr+0x22>
 80140b8:	bd70      	pop	{r4, r5, r6, pc}
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d109      	bne.n	80140d2 <strstr+0x20>
 80140be:	460c      	mov	r4, r1
 80140c0:	4605      	mov	r5, r0
 80140c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d0f6      	beq.n	80140b8 <strstr+0x6>
 80140ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80140ce:	429e      	cmp	r6, r3
 80140d0:	d0f7      	beq.n	80140c2 <strstr+0x10>
 80140d2:	3001      	adds	r0, #1
 80140d4:	7803      	ldrb	r3, [r0, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d1ef      	bne.n	80140ba <strstr+0x8>
 80140da:	4618      	mov	r0, r3
 80140dc:	e7ec      	b.n	80140b8 <strstr+0x6>

080140de <sulp>:
 80140de:	b570      	push	{r4, r5, r6, lr}
 80140e0:	4604      	mov	r4, r0
 80140e2:	460d      	mov	r5, r1
 80140e4:	ec45 4b10 	vmov	d0, r4, r5
 80140e8:	4616      	mov	r6, r2
 80140ea:	f001 ff01 	bl	8015ef0 <__ulp>
 80140ee:	ec51 0b10 	vmov	r0, r1, d0
 80140f2:	b17e      	cbz	r6, 8014114 <sulp+0x36>
 80140f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80140f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	dd09      	ble.n	8014114 <sulp+0x36>
 8014100:	051b      	lsls	r3, r3, #20
 8014102:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014106:	2400      	movs	r4, #0
 8014108:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801410c:	4622      	mov	r2, r4
 801410e:	462b      	mov	r3, r5
 8014110:	f7ec fbb4 	bl	800087c <__aeabi_dmul>
 8014114:	bd70      	pop	{r4, r5, r6, pc}
	...

08014118 <_strtod_l>:
 8014118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801411c:	ed2d 8b02 	vpush	{d8}
 8014120:	b09d      	sub	sp, #116	; 0x74
 8014122:	461f      	mov	r7, r3
 8014124:	2300      	movs	r3, #0
 8014126:	9318      	str	r3, [sp, #96]	; 0x60
 8014128:	4ba2      	ldr	r3, [pc, #648]	; (80143b4 <_strtod_l+0x29c>)
 801412a:	9213      	str	r2, [sp, #76]	; 0x4c
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	9305      	str	r3, [sp, #20]
 8014130:	4604      	mov	r4, r0
 8014132:	4618      	mov	r0, r3
 8014134:	4688      	mov	r8, r1
 8014136:	f7ec f9dd 	bl	80004f4 <strlen>
 801413a:	f04f 0a00 	mov.w	sl, #0
 801413e:	4605      	mov	r5, r0
 8014140:	f04f 0b00 	mov.w	fp, #0
 8014144:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801414a:	781a      	ldrb	r2, [r3, #0]
 801414c:	2a2b      	cmp	r2, #43	; 0x2b
 801414e:	d04e      	beq.n	80141ee <_strtod_l+0xd6>
 8014150:	d83b      	bhi.n	80141ca <_strtod_l+0xb2>
 8014152:	2a0d      	cmp	r2, #13
 8014154:	d834      	bhi.n	80141c0 <_strtod_l+0xa8>
 8014156:	2a08      	cmp	r2, #8
 8014158:	d834      	bhi.n	80141c4 <_strtod_l+0xac>
 801415a:	2a00      	cmp	r2, #0
 801415c:	d03e      	beq.n	80141dc <_strtod_l+0xc4>
 801415e:	2300      	movs	r3, #0
 8014160:	930a      	str	r3, [sp, #40]	; 0x28
 8014162:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014164:	7833      	ldrb	r3, [r6, #0]
 8014166:	2b30      	cmp	r3, #48	; 0x30
 8014168:	f040 80b0 	bne.w	80142cc <_strtod_l+0x1b4>
 801416c:	7873      	ldrb	r3, [r6, #1]
 801416e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014172:	2b58      	cmp	r3, #88	; 0x58
 8014174:	d168      	bne.n	8014248 <_strtod_l+0x130>
 8014176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	ab18      	add	r3, sp, #96	; 0x60
 801417c:	9702      	str	r7, [sp, #8]
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	4a8d      	ldr	r2, [pc, #564]	; (80143b8 <_strtod_l+0x2a0>)
 8014182:	ab19      	add	r3, sp, #100	; 0x64
 8014184:	a917      	add	r1, sp, #92	; 0x5c
 8014186:	4620      	mov	r0, r4
 8014188:	f000 ffcc 	bl	8015124 <__gethex>
 801418c:	f010 0707 	ands.w	r7, r0, #7
 8014190:	4605      	mov	r5, r0
 8014192:	d005      	beq.n	80141a0 <_strtod_l+0x88>
 8014194:	2f06      	cmp	r7, #6
 8014196:	d12c      	bne.n	80141f2 <_strtod_l+0xda>
 8014198:	3601      	adds	r6, #1
 801419a:	2300      	movs	r3, #0
 801419c:	9617      	str	r6, [sp, #92]	; 0x5c
 801419e:	930a      	str	r3, [sp, #40]	; 0x28
 80141a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	f040 8590 	bne.w	8014cc8 <_strtod_l+0xbb0>
 80141a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141aa:	b1eb      	cbz	r3, 80141e8 <_strtod_l+0xd0>
 80141ac:	4652      	mov	r2, sl
 80141ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80141b2:	ec43 2b10 	vmov	d0, r2, r3
 80141b6:	b01d      	add	sp, #116	; 0x74
 80141b8:	ecbd 8b02 	vpop	{d8}
 80141bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141c0:	2a20      	cmp	r2, #32
 80141c2:	d1cc      	bne.n	801415e <_strtod_l+0x46>
 80141c4:	3301      	adds	r3, #1
 80141c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80141c8:	e7be      	b.n	8014148 <_strtod_l+0x30>
 80141ca:	2a2d      	cmp	r2, #45	; 0x2d
 80141cc:	d1c7      	bne.n	801415e <_strtod_l+0x46>
 80141ce:	2201      	movs	r2, #1
 80141d0:	920a      	str	r2, [sp, #40]	; 0x28
 80141d2:	1c5a      	adds	r2, r3, #1
 80141d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80141d6:	785b      	ldrb	r3, [r3, #1]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d1c2      	bne.n	8014162 <_strtod_l+0x4a>
 80141dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80141de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f040 856e 	bne.w	8014cc4 <_strtod_l+0xbac>
 80141e8:	4652      	mov	r2, sl
 80141ea:	465b      	mov	r3, fp
 80141ec:	e7e1      	b.n	80141b2 <_strtod_l+0x9a>
 80141ee:	2200      	movs	r2, #0
 80141f0:	e7ee      	b.n	80141d0 <_strtod_l+0xb8>
 80141f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80141f4:	b13a      	cbz	r2, 8014206 <_strtod_l+0xee>
 80141f6:	2135      	movs	r1, #53	; 0x35
 80141f8:	a81a      	add	r0, sp, #104	; 0x68
 80141fa:	f001 ff84 	bl	8016106 <__copybits>
 80141fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014200:	4620      	mov	r0, r4
 8014202:	f001 fb43 	bl	801588c <_Bfree>
 8014206:	3f01      	subs	r7, #1
 8014208:	2f04      	cmp	r7, #4
 801420a:	d806      	bhi.n	801421a <_strtod_l+0x102>
 801420c:	e8df f007 	tbb	[pc, r7]
 8014210:	1714030a 	.word	0x1714030a
 8014214:	0a          	.byte	0x0a
 8014215:	00          	.byte	0x00
 8014216:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801421a:	0728      	lsls	r0, r5, #28
 801421c:	d5c0      	bpl.n	80141a0 <_strtod_l+0x88>
 801421e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014222:	e7bd      	b.n	80141a0 <_strtod_l+0x88>
 8014224:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014228:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801422a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801422e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014232:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014236:	e7f0      	b.n	801421a <_strtod_l+0x102>
 8014238:	f8df b180 	ldr.w	fp, [pc, #384]	; 80143bc <_strtod_l+0x2a4>
 801423c:	e7ed      	b.n	801421a <_strtod_l+0x102>
 801423e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014242:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014246:	e7e8      	b.n	801421a <_strtod_l+0x102>
 8014248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801424a:	1c5a      	adds	r2, r3, #1
 801424c:	9217      	str	r2, [sp, #92]	; 0x5c
 801424e:	785b      	ldrb	r3, [r3, #1]
 8014250:	2b30      	cmp	r3, #48	; 0x30
 8014252:	d0f9      	beq.n	8014248 <_strtod_l+0x130>
 8014254:	2b00      	cmp	r3, #0
 8014256:	d0a3      	beq.n	80141a0 <_strtod_l+0x88>
 8014258:	2301      	movs	r3, #1
 801425a:	f04f 0900 	mov.w	r9, #0
 801425e:	9304      	str	r3, [sp, #16]
 8014260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014262:	9308      	str	r3, [sp, #32]
 8014264:	f8cd 901c 	str.w	r9, [sp, #28]
 8014268:	464f      	mov	r7, r9
 801426a:	220a      	movs	r2, #10
 801426c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801426e:	7806      	ldrb	r6, [r0, #0]
 8014270:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014274:	b2d9      	uxtb	r1, r3
 8014276:	2909      	cmp	r1, #9
 8014278:	d92a      	bls.n	80142d0 <_strtod_l+0x1b8>
 801427a:	9905      	ldr	r1, [sp, #20]
 801427c:	462a      	mov	r2, r5
 801427e:	f002 fc87 	bl	8016b90 <strncmp>
 8014282:	b398      	cbz	r0, 80142ec <_strtod_l+0x1d4>
 8014284:	2000      	movs	r0, #0
 8014286:	4632      	mov	r2, r6
 8014288:	463d      	mov	r5, r7
 801428a:	9005      	str	r0, [sp, #20]
 801428c:	4603      	mov	r3, r0
 801428e:	2a65      	cmp	r2, #101	; 0x65
 8014290:	d001      	beq.n	8014296 <_strtod_l+0x17e>
 8014292:	2a45      	cmp	r2, #69	; 0x45
 8014294:	d118      	bne.n	80142c8 <_strtod_l+0x1b0>
 8014296:	b91d      	cbnz	r5, 80142a0 <_strtod_l+0x188>
 8014298:	9a04      	ldr	r2, [sp, #16]
 801429a:	4302      	orrs	r2, r0
 801429c:	d09e      	beq.n	80141dc <_strtod_l+0xc4>
 801429e:	2500      	movs	r5, #0
 80142a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80142a4:	f108 0201 	add.w	r2, r8, #1
 80142a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80142aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80142ae:	2a2b      	cmp	r2, #43	; 0x2b
 80142b0:	d075      	beq.n	801439e <_strtod_l+0x286>
 80142b2:	2a2d      	cmp	r2, #45	; 0x2d
 80142b4:	d07b      	beq.n	80143ae <_strtod_l+0x296>
 80142b6:	f04f 0c00 	mov.w	ip, #0
 80142ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80142be:	2909      	cmp	r1, #9
 80142c0:	f240 8082 	bls.w	80143c8 <_strtod_l+0x2b0>
 80142c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80142c8:	2600      	movs	r6, #0
 80142ca:	e09d      	b.n	8014408 <_strtod_l+0x2f0>
 80142cc:	2300      	movs	r3, #0
 80142ce:	e7c4      	b.n	801425a <_strtod_l+0x142>
 80142d0:	2f08      	cmp	r7, #8
 80142d2:	bfd8      	it	le
 80142d4:	9907      	ldrle	r1, [sp, #28]
 80142d6:	f100 0001 	add.w	r0, r0, #1
 80142da:	bfda      	itte	le
 80142dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80142e0:	9307      	strle	r3, [sp, #28]
 80142e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80142e6:	3701      	adds	r7, #1
 80142e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80142ea:	e7bf      	b.n	801426c <_strtod_l+0x154>
 80142ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142ee:	195a      	adds	r2, r3, r5
 80142f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80142f2:	5d5a      	ldrb	r2, [r3, r5]
 80142f4:	2f00      	cmp	r7, #0
 80142f6:	d037      	beq.n	8014368 <_strtod_l+0x250>
 80142f8:	9005      	str	r0, [sp, #20]
 80142fa:	463d      	mov	r5, r7
 80142fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014300:	2b09      	cmp	r3, #9
 8014302:	d912      	bls.n	801432a <_strtod_l+0x212>
 8014304:	2301      	movs	r3, #1
 8014306:	e7c2      	b.n	801428e <_strtod_l+0x176>
 8014308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801430a:	1c5a      	adds	r2, r3, #1
 801430c:	9217      	str	r2, [sp, #92]	; 0x5c
 801430e:	785a      	ldrb	r2, [r3, #1]
 8014310:	3001      	adds	r0, #1
 8014312:	2a30      	cmp	r2, #48	; 0x30
 8014314:	d0f8      	beq.n	8014308 <_strtod_l+0x1f0>
 8014316:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801431a:	2b08      	cmp	r3, #8
 801431c:	f200 84d9 	bhi.w	8014cd2 <_strtod_l+0xbba>
 8014320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014322:	9005      	str	r0, [sp, #20]
 8014324:	2000      	movs	r0, #0
 8014326:	9308      	str	r3, [sp, #32]
 8014328:	4605      	mov	r5, r0
 801432a:	3a30      	subs	r2, #48	; 0x30
 801432c:	f100 0301 	add.w	r3, r0, #1
 8014330:	d014      	beq.n	801435c <_strtod_l+0x244>
 8014332:	9905      	ldr	r1, [sp, #20]
 8014334:	4419      	add	r1, r3
 8014336:	9105      	str	r1, [sp, #20]
 8014338:	462b      	mov	r3, r5
 801433a:	eb00 0e05 	add.w	lr, r0, r5
 801433e:	210a      	movs	r1, #10
 8014340:	4573      	cmp	r3, lr
 8014342:	d113      	bne.n	801436c <_strtod_l+0x254>
 8014344:	182b      	adds	r3, r5, r0
 8014346:	2b08      	cmp	r3, #8
 8014348:	f105 0501 	add.w	r5, r5, #1
 801434c:	4405      	add	r5, r0
 801434e:	dc1c      	bgt.n	801438a <_strtod_l+0x272>
 8014350:	9907      	ldr	r1, [sp, #28]
 8014352:	230a      	movs	r3, #10
 8014354:	fb03 2301 	mla	r3, r3, r1, r2
 8014358:	9307      	str	r3, [sp, #28]
 801435a:	2300      	movs	r3, #0
 801435c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801435e:	1c51      	adds	r1, r2, #1
 8014360:	9117      	str	r1, [sp, #92]	; 0x5c
 8014362:	7852      	ldrb	r2, [r2, #1]
 8014364:	4618      	mov	r0, r3
 8014366:	e7c9      	b.n	80142fc <_strtod_l+0x1e4>
 8014368:	4638      	mov	r0, r7
 801436a:	e7d2      	b.n	8014312 <_strtod_l+0x1fa>
 801436c:	2b08      	cmp	r3, #8
 801436e:	dc04      	bgt.n	801437a <_strtod_l+0x262>
 8014370:	9e07      	ldr	r6, [sp, #28]
 8014372:	434e      	muls	r6, r1
 8014374:	9607      	str	r6, [sp, #28]
 8014376:	3301      	adds	r3, #1
 8014378:	e7e2      	b.n	8014340 <_strtod_l+0x228>
 801437a:	f103 0c01 	add.w	ip, r3, #1
 801437e:	f1bc 0f10 	cmp.w	ip, #16
 8014382:	bfd8      	it	le
 8014384:	fb01 f909 	mulle.w	r9, r1, r9
 8014388:	e7f5      	b.n	8014376 <_strtod_l+0x25e>
 801438a:	2d10      	cmp	r5, #16
 801438c:	bfdc      	itt	le
 801438e:	230a      	movle	r3, #10
 8014390:	fb03 2909 	mlale	r9, r3, r9, r2
 8014394:	e7e1      	b.n	801435a <_strtod_l+0x242>
 8014396:	2300      	movs	r3, #0
 8014398:	9305      	str	r3, [sp, #20]
 801439a:	2301      	movs	r3, #1
 801439c:	e77c      	b.n	8014298 <_strtod_l+0x180>
 801439e:	f04f 0c00 	mov.w	ip, #0
 80143a2:	f108 0202 	add.w	r2, r8, #2
 80143a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80143a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80143ac:	e785      	b.n	80142ba <_strtod_l+0x1a2>
 80143ae:	f04f 0c01 	mov.w	ip, #1
 80143b2:	e7f6      	b.n	80143a2 <_strtod_l+0x28a>
 80143b4:	0801caf8 	.word	0x0801caf8
 80143b8:	0801ca30 	.word	0x0801ca30
 80143bc:	7ff00000 	.word	0x7ff00000
 80143c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143c2:	1c51      	adds	r1, r2, #1
 80143c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80143c6:	7852      	ldrb	r2, [r2, #1]
 80143c8:	2a30      	cmp	r2, #48	; 0x30
 80143ca:	d0f9      	beq.n	80143c0 <_strtod_l+0x2a8>
 80143cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80143d0:	2908      	cmp	r1, #8
 80143d2:	f63f af79 	bhi.w	80142c8 <_strtod_l+0x1b0>
 80143d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80143da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143dc:	9206      	str	r2, [sp, #24]
 80143de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143e0:	1c51      	adds	r1, r2, #1
 80143e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80143e4:	7852      	ldrb	r2, [r2, #1]
 80143e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80143ea:	2e09      	cmp	r6, #9
 80143ec:	d937      	bls.n	801445e <_strtod_l+0x346>
 80143ee:	9e06      	ldr	r6, [sp, #24]
 80143f0:	1b89      	subs	r1, r1, r6
 80143f2:	2908      	cmp	r1, #8
 80143f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80143f8:	dc02      	bgt.n	8014400 <_strtod_l+0x2e8>
 80143fa:	4576      	cmp	r6, lr
 80143fc:	bfa8      	it	ge
 80143fe:	4676      	movge	r6, lr
 8014400:	f1bc 0f00 	cmp.w	ip, #0
 8014404:	d000      	beq.n	8014408 <_strtod_l+0x2f0>
 8014406:	4276      	negs	r6, r6
 8014408:	2d00      	cmp	r5, #0
 801440a:	d14d      	bne.n	80144a8 <_strtod_l+0x390>
 801440c:	9904      	ldr	r1, [sp, #16]
 801440e:	4301      	orrs	r1, r0
 8014410:	f47f aec6 	bne.w	80141a0 <_strtod_l+0x88>
 8014414:	2b00      	cmp	r3, #0
 8014416:	f47f aee1 	bne.w	80141dc <_strtod_l+0xc4>
 801441a:	2a69      	cmp	r2, #105	; 0x69
 801441c:	d027      	beq.n	801446e <_strtod_l+0x356>
 801441e:	dc24      	bgt.n	801446a <_strtod_l+0x352>
 8014420:	2a49      	cmp	r2, #73	; 0x49
 8014422:	d024      	beq.n	801446e <_strtod_l+0x356>
 8014424:	2a4e      	cmp	r2, #78	; 0x4e
 8014426:	f47f aed9 	bne.w	80141dc <_strtod_l+0xc4>
 801442a:	499f      	ldr	r1, [pc, #636]	; (80146a8 <_strtod_l+0x590>)
 801442c:	a817      	add	r0, sp, #92	; 0x5c
 801442e:	f001 f8d1 	bl	80155d4 <__match>
 8014432:	2800      	cmp	r0, #0
 8014434:	f43f aed2 	beq.w	80141dc <_strtod_l+0xc4>
 8014438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	2b28      	cmp	r3, #40	; 0x28
 801443e:	d12d      	bne.n	801449c <_strtod_l+0x384>
 8014440:	499a      	ldr	r1, [pc, #616]	; (80146ac <_strtod_l+0x594>)
 8014442:	aa1a      	add	r2, sp, #104	; 0x68
 8014444:	a817      	add	r0, sp, #92	; 0x5c
 8014446:	f001 f8d9 	bl	80155fc <__hexnan>
 801444a:	2805      	cmp	r0, #5
 801444c:	d126      	bne.n	801449c <_strtod_l+0x384>
 801444e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014450:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014454:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014458:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801445c:	e6a0      	b.n	80141a0 <_strtod_l+0x88>
 801445e:	210a      	movs	r1, #10
 8014460:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014464:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014468:	e7b9      	b.n	80143de <_strtod_l+0x2c6>
 801446a:	2a6e      	cmp	r2, #110	; 0x6e
 801446c:	e7db      	b.n	8014426 <_strtod_l+0x30e>
 801446e:	4990      	ldr	r1, [pc, #576]	; (80146b0 <_strtod_l+0x598>)
 8014470:	a817      	add	r0, sp, #92	; 0x5c
 8014472:	f001 f8af 	bl	80155d4 <__match>
 8014476:	2800      	cmp	r0, #0
 8014478:	f43f aeb0 	beq.w	80141dc <_strtod_l+0xc4>
 801447c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801447e:	498d      	ldr	r1, [pc, #564]	; (80146b4 <_strtod_l+0x59c>)
 8014480:	3b01      	subs	r3, #1
 8014482:	a817      	add	r0, sp, #92	; 0x5c
 8014484:	9317      	str	r3, [sp, #92]	; 0x5c
 8014486:	f001 f8a5 	bl	80155d4 <__match>
 801448a:	b910      	cbnz	r0, 8014492 <_strtod_l+0x37a>
 801448c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801448e:	3301      	adds	r3, #1
 8014490:	9317      	str	r3, [sp, #92]	; 0x5c
 8014492:	f8df b230 	ldr.w	fp, [pc, #560]	; 80146c4 <_strtod_l+0x5ac>
 8014496:	f04f 0a00 	mov.w	sl, #0
 801449a:	e681      	b.n	80141a0 <_strtod_l+0x88>
 801449c:	4886      	ldr	r0, [pc, #536]	; (80146b8 <_strtod_l+0x5a0>)
 801449e:	f002 fb37 	bl	8016b10 <nan>
 80144a2:	ec5b ab10 	vmov	sl, fp, d0
 80144a6:	e67b      	b.n	80141a0 <_strtod_l+0x88>
 80144a8:	9b05      	ldr	r3, [sp, #20]
 80144aa:	9807      	ldr	r0, [sp, #28]
 80144ac:	1af3      	subs	r3, r6, r3
 80144ae:	2f00      	cmp	r7, #0
 80144b0:	bf08      	it	eq
 80144b2:	462f      	moveq	r7, r5
 80144b4:	2d10      	cmp	r5, #16
 80144b6:	9306      	str	r3, [sp, #24]
 80144b8:	46a8      	mov	r8, r5
 80144ba:	bfa8      	it	ge
 80144bc:	f04f 0810 	movge.w	r8, #16
 80144c0:	f7ec f962 	bl	8000788 <__aeabi_ui2d>
 80144c4:	2d09      	cmp	r5, #9
 80144c6:	4682      	mov	sl, r0
 80144c8:	468b      	mov	fp, r1
 80144ca:	dd13      	ble.n	80144f4 <_strtod_l+0x3dc>
 80144cc:	4b7b      	ldr	r3, [pc, #492]	; (80146bc <_strtod_l+0x5a4>)
 80144ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80144d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80144d6:	f7ec f9d1 	bl	800087c <__aeabi_dmul>
 80144da:	4682      	mov	sl, r0
 80144dc:	4648      	mov	r0, r9
 80144de:	468b      	mov	fp, r1
 80144e0:	f7ec f952 	bl	8000788 <__aeabi_ui2d>
 80144e4:	4602      	mov	r2, r0
 80144e6:	460b      	mov	r3, r1
 80144e8:	4650      	mov	r0, sl
 80144ea:	4659      	mov	r1, fp
 80144ec:	f7ec f810 	bl	8000510 <__adddf3>
 80144f0:	4682      	mov	sl, r0
 80144f2:	468b      	mov	fp, r1
 80144f4:	2d0f      	cmp	r5, #15
 80144f6:	dc38      	bgt.n	801456a <_strtod_l+0x452>
 80144f8:	9b06      	ldr	r3, [sp, #24]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	f43f ae50 	beq.w	80141a0 <_strtod_l+0x88>
 8014500:	dd24      	ble.n	801454c <_strtod_l+0x434>
 8014502:	2b16      	cmp	r3, #22
 8014504:	dc0b      	bgt.n	801451e <_strtod_l+0x406>
 8014506:	496d      	ldr	r1, [pc, #436]	; (80146bc <_strtod_l+0x5a4>)
 8014508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801450c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014510:	4652      	mov	r2, sl
 8014512:	465b      	mov	r3, fp
 8014514:	f7ec f9b2 	bl	800087c <__aeabi_dmul>
 8014518:	4682      	mov	sl, r0
 801451a:	468b      	mov	fp, r1
 801451c:	e640      	b.n	80141a0 <_strtod_l+0x88>
 801451e:	9a06      	ldr	r2, [sp, #24]
 8014520:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014524:	4293      	cmp	r3, r2
 8014526:	db20      	blt.n	801456a <_strtod_l+0x452>
 8014528:	4c64      	ldr	r4, [pc, #400]	; (80146bc <_strtod_l+0x5a4>)
 801452a:	f1c5 050f 	rsb	r5, r5, #15
 801452e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014532:	4652      	mov	r2, sl
 8014534:	465b      	mov	r3, fp
 8014536:	e9d1 0100 	ldrd	r0, r1, [r1]
 801453a:	f7ec f99f 	bl	800087c <__aeabi_dmul>
 801453e:	9b06      	ldr	r3, [sp, #24]
 8014540:	1b5d      	subs	r5, r3, r5
 8014542:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014546:	e9d4 2300 	ldrd	r2, r3, [r4]
 801454a:	e7e3      	b.n	8014514 <_strtod_l+0x3fc>
 801454c:	9b06      	ldr	r3, [sp, #24]
 801454e:	3316      	adds	r3, #22
 8014550:	db0b      	blt.n	801456a <_strtod_l+0x452>
 8014552:	9b05      	ldr	r3, [sp, #20]
 8014554:	1b9e      	subs	r6, r3, r6
 8014556:	4b59      	ldr	r3, [pc, #356]	; (80146bc <_strtod_l+0x5a4>)
 8014558:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801455c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014560:	4650      	mov	r0, sl
 8014562:	4659      	mov	r1, fp
 8014564:	f7ec fab4 	bl	8000ad0 <__aeabi_ddiv>
 8014568:	e7d6      	b.n	8014518 <_strtod_l+0x400>
 801456a:	9b06      	ldr	r3, [sp, #24]
 801456c:	eba5 0808 	sub.w	r8, r5, r8
 8014570:	4498      	add	r8, r3
 8014572:	f1b8 0f00 	cmp.w	r8, #0
 8014576:	dd74      	ble.n	8014662 <_strtod_l+0x54a>
 8014578:	f018 030f 	ands.w	r3, r8, #15
 801457c:	d00a      	beq.n	8014594 <_strtod_l+0x47c>
 801457e:	494f      	ldr	r1, [pc, #316]	; (80146bc <_strtod_l+0x5a4>)
 8014580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014584:	4652      	mov	r2, sl
 8014586:	465b      	mov	r3, fp
 8014588:	e9d1 0100 	ldrd	r0, r1, [r1]
 801458c:	f7ec f976 	bl	800087c <__aeabi_dmul>
 8014590:	4682      	mov	sl, r0
 8014592:	468b      	mov	fp, r1
 8014594:	f038 080f 	bics.w	r8, r8, #15
 8014598:	d04f      	beq.n	801463a <_strtod_l+0x522>
 801459a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801459e:	dd22      	ble.n	80145e6 <_strtod_l+0x4ce>
 80145a0:	2500      	movs	r5, #0
 80145a2:	462e      	mov	r6, r5
 80145a4:	9507      	str	r5, [sp, #28]
 80145a6:	9505      	str	r5, [sp, #20]
 80145a8:	2322      	movs	r3, #34	; 0x22
 80145aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80146c4 <_strtod_l+0x5ac>
 80145ae:	6023      	str	r3, [r4, #0]
 80145b0:	f04f 0a00 	mov.w	sl, #0
 80145b4:	9b07      	ldr	r3, [sp, #28]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	f43f adf2 	beq.w	80141a0 <_strtod_l+0x88>
 80145bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80145be:	4620      	mov	r0, r4
 80145c0:	f001 f964 	bl	801588c <_Bfree>
 80145c4:	9905      	ldr	r1, [sp, #20]
 80145c6:	4620      	mov	r0, r4
 80145c8:	f001 f960 	bl	801588c <_Bfree>
 80145cc:	4631      	mov	r1, r6
 80145ce:	4620      	mov	r0, r4
 80145d0:	f001 f95c 	bl	801588c <_Bfree>
 80145d4:	9907      	ldr	r1, [sp, #28]
 80145d6:	4620      	mov	r0, r4
 80145d8:	f001 f958 	bl	801588c <_Bfree>
 80145dc:	4629      	mov	r1, r5
 80145de:	4620      	mov	r0, r4
 80145e0:	f001 f954 	bl	801588c <_Bfree>
 80145e4:	e5dc      	b.n	80141a0 <_strtod_l+0x88>
 80145e6:	4b36      	ldr	r3, [pc, #216]	; (80146c0 <_strtod_l+0x5a8>)
 80145e8:	9304      	str	r3, [sp, #16]
 80145ea:	2300      	movs	r3, #0
 80145ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80145f0:	4650      	mov	r0, sl
 80145f2:	4659      	mov	r1, fp
 80145f4:	4699      	mov	r9, r3
 80145f6:	f1b8 0f01 	cmp.w	r8, #1
 80145fa:	dc21      	bgt.n	8014640 <_strtod_l+0x528>
 80145fc:	b10b      	cbz	r3, 8014602 <_strtod_l+0x4ea>
 80145fe:	4682      	mov	sl, r0
 8014600:	468b      	mov	fp, r1
 8014602:	4b2f      	ldr	r3, [pc, #188]	; (80146c0 <_strtod_l+0x5a8>)
 8014604:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014608:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801460c:	4652      	mov	r2, sl
 801460e:	465b      	mov	r3, fp
 8014610:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014614:	f7ec f932 	bl	800087c <__aeabi_dmul>
 8014618:	4b2a      	ldr	r3, [pc, #168]	; (80146c4 <_strtod_l+0x5ac>)
 801461a:	460a      	mov	r2, r1
 801461c:	400b      	ands	r3, r1
 801461e:	492a      	ldr	r1, [pc, #168]	; (80146c8 <_strtod_l+0x5b0>)
 8014620:	428b      	cmp	r3, r1
 8014622:	4682      	mov	sl, r0
 8014624:	d8bc      	bhi.n	80145a0 <_strtod_l+0x488>
 8014626:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801462a:	428b      	cmp	r3, r1
 801462c:	bf86      	itte	hi
 801462e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80146cc <_strtod_l+0x5b4>
 8014632:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8014636:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801463a:	2300      	movs	r3, #0
 801463c:	9304      	str	r3, [sp, #16]
 801463e:	e084      	b.n	801474a <_strtod_l+0x632>
 8014640:	f018 0f01 	tst.w	r8, #1
 8014644:	d005      	beq.n	8014652 <_strtod_l+0x53a>
 8014646:	9b04      	ldr	r3, [sp, #16]
 8014648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464c:	f7ec f916 	bl	800087c <__aeabi_dmul>
 8014650:	2301      	movs	r3, #1
 8014652:	9a04      	ldr	r2, [sp, #16]
 8014654:	3208      	adds	r2, #8
 8014656:	f109 0901 	add.w	r9, r9, #1
 801465a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801465e:	9204      	str	r2, [sp, #16]
 8014660:	e7c9      	b.n	80145f6 <_strtod_l+0x4de>
 8014662:	d0ea      	beq.n	801463a <_strtod_l+0x522>
 8014664:	f1c8 0800 	rsb	r8, r8, #0
 8014668:	f018 020f 	ands.w	r2, r8, #15
 801466c:	d00a      	beq.n	8014684 <_strtod_l+0x56c>
 801466e:	4b13      	ldr	r3, [pc, #76]	; (80146bc <_strtod_l+0x5a4>)
 8014670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014674:	4650      	mov	r0, sl
 8014676:	4659      	mov	r1, fp
 8014678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467c:	f7ec fa28 	bl	8000ad0 <__aeabi_ddiv>
 8014680:	4682      	mov	sl, r0
 8014682:	468b      	mov	fp, r1
 8014684:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014688:	d0d7      	beq.n	801463a <_strtod_l+0x522>
 801468a:	f1b8 0f1f 	cmp.w	r8, #31
 801468e:	dd1f      	ble.n	80146d0 <_strtod_l+0x5b8>
 8014690:	2500      	movs	r5, #0
 8014692:	462e      	mov	r6, r5
 8014694:	9507      	str	r5, [sp, #28]
 8014696:	9505      	str	r5, [sp, #20]
 8014698:	2322      	movs	r3, #34	; 0x22
 801469a:	f04f 0a00 	mov.w	sl, #0
 801469e:	f04f 0b00 	mov.w	fp, #0
 80146a2:	6023      	str	r3, [r4, #0]
 80146a4:	e786      	b.n	80145b4 <_strtod_l+0x49c>
 80146a6:	bf00      	nop
 80146a8:	0801ca2a 	.word	0x0801ca2a
 80146ac:	0801ca44 	.word	0x0801ca44
 80146b0:	0801ca21 	.word	0x0801ca21
 80146b4:	0801ca24 	.word	0x0801ca24
 80146b8:	0801ccd2 	.word	0x0801ccd2
 80146bc:	0801cba8 	.word	0x0801cba8
 80146c0:	0801cb80 	.word	0x0801cb80
 80146c4:	7ff00000 	.word	0x7ff00000
 80146c8:	7ca00000 	.word	0x7ca00000
 80146cc:	7fefffff 	.word	0x7fefffff
 80146d0:	f018 0310 	ands.w	r3, r8, #16
 80146d4:	bf18      	it	ne
 80146d6:	236a      	movne	r3, #106	; 0x6a
 80146d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014a88 <_strtod_l+0x970>
 80146dc:	9304      	str	r3, [sp, #16]
 80146de:	4650      	mov	r0, sl
 80146e0:	4659      	mov	r1, fp
 80146e2:	2300      	movs	r3, #0
 80146e4:	f018 0f01 	tst.w	r8, #1
 80146e8:	d004      	beq.n	80146f4 <_strtod_l+0x5dc>
 80146ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80146ee:	f7ec f8c5 	bl	800087c <__aeabi_dmul>
 80146f2:	2301      	movs	r3, #1
 80146f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80146f8:	f109 0908 	add.w	r9, r9, #8
 80146fc:	d1f2      	bne.n	80146e4 <_strtod_l+0x5cc>
 80146fe:	b10b      	cbz	r3, 8014704 <_strtod_l+0x5ec>
 8014700:	4682      	mov	sl, r0
 8014702:	468b      	mov	fp, r1
 8014704:	9b04      	ldr	r3, [sp, #16]
 8014706:	b1c3      	cbz	r3, 801473a <_strtod_l+0x622>
 8014708:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801470c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014710:	2b00      	cmp	r3, #0
 8014712:	4659      	mov	r1, fp
 8014714:	dd11      	ble.n	801473a <_strtod_l+0x622>
 8014716:	2b1f      	cmp	r3, #31
 8014718:	f340 8124 	ble.w	8014964 <_strtod_l+0x84c>
 801471c:	2b34      	cmp	r3, #52	; 0x34
 801471e:	bfde      	ittt	le
 8014720:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014724:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8014728:	fa03 f202 	lslle.w	r2, r3, r2
 801472c:	f04f 0a00 	mov.w	sl, #0
 8014730:	bfcc      	ite	gt
 8014732:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014736:	ea02 0b01 	andle.w	fp, r2, r1
 801473a:	2200      	movs	r2, #0
 801473c:	2300      	movs	r3, #0
 801473e:	4650      	mov	r0, sl
 8014740:	4659      	mov	r1, fp
 8014742:	f7ec fb03 	bl	8000d4c <__aeabi_dcmpeq>
 8014746:	2800      	cmp	r0, #0
 8014748:	d1a2      	bne.n	8014690 <_strtod_l+0x578>
 801474a:	9b07      	ldr	r3, [sp, #28]
 801474c:	9300      	str	r3, [sp, #0]
 801474e:	9908      	ldr	r1, [sp, #32]
 8014750:	462b      	mov	r3, r5
 8014752:	463a      	mov	r2, r7
 8014754:	4620      	mov	r0, r4
 8014756:	f001 f901 	bl	801595c <__s2b>
 801475a:	9007      	str	r0, [sp, #28]
 801475c:	2800      	cmp	r0, #0
 801475e:	f43f af1f 	beq.w	80145a0 <_strtod_l+0x488>
 8014762:	9b05      	ldr	r3, [sp, #20]
 8014764:	1b9e      	subs	r6, r3, r6
 8014766:	9b06      	ldr	r3, [sp, #24]
 8014768:	2b00      	cmp	r3, #0
 801476a:	bfb4      	ite	lt
 801476c:	4633      	movlt	r3, r6
 801476e:	2300      	movge	r3, #0
 8014770:	930c      	str	r3, [sp, #48]	; 0x30
 8014772:	9b06      	ldr	r3, [sp, #24]
 8014774:	2500      	movs	r5, #0
 8014776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801477a:	9312      	str	r3, [sp, #72]	; 0x48
 801477c:	462e      	mov	r6, r5
 801477e:	9b07      	ldr	r3, [sp, #28]
 8014780:	4620      	mov	r0, r4
 8014782:	6859      	ldr	r1, [r3, #4]
 8014784:	f001 f842 	bl	801580c <_Balloc>
 8014788:	9005      	str	r0, [sp, #20]
 801478a:	2800      	cmp	r0, #0
 801478c:	f43f af0c 	beq.w	80145a8 <_strtod_l+0x490>
 8014790:	9b07      	ldr	r3, [sp, #28]
 8014792:	691a      	ldr	r2, [r3, #16]
 8014794:	3202      	adds	r2, #2
 8014796:	f103 010c 	add.w	r1, r3, #12
 801479a:	0092      	lsls	r2, r2, #2
 801479c:	300c      	adds	r0, #12
 801479e:	f7fe fbc5 	bl	8012f2c <memcpy>
 80147a2:	ec4b ab10 	vmov	d0, sl, fp
 80147a6:	aa1a      	add	r2, sp, #104	; 0x68
 80147a8:	a919      	add	r1, sp, #100	; 0x64
 80147aa:	4620      	mov	r0, r4
 80147ac:	f001 fc1c 	bl	8015fe8 <__d2b>
 80147b0:	ec4b ab18 	vmov	d8, sl, fp
 80147b4:	9018      	str	r0, [sp, #96]	; 0x60
 80147b6:	2800      	cmp	r0, #0
 80147b8:	f43f aef6 	beq.w	80145a8 <_strtod_l+0x490>
 80147bc:	2101      	movs	r1, #1
 80147be:	4620      	mov	r0, r4
 80147c0:	f001 f966 	bl	8015a90 <__i2b>
 80147c4:	4606      	mov	r6, r0
 80147c6:	2800      	cmp	r0, #0
 80147c8:	f43f aeee 	beq.w	80145a8 <_strtod_l+0x490>
 80147cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80147ce:	9904      	ldr	r1, [sp, #16]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	bfab      	itete	ge
 80147d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80147d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80147d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80147da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80147de:	bfac      	ite	ge
 80147e0:	eb03 0902 	addge.w	r9, r3, r2
 80147e4:	1ad7      	sublt	r7, r2, r3
 80147e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80147e8:	eba3 0801 	sub.w	r8, r3, r1
 80147ec:	4490      	add	r8, r2
 80147ee:	4ba1      	ldr	r3, [pc, #644]	; (8014a74 <_strtod_l+0x95c>)
 80147f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80147f4:	4598      	cmp	r8, r3
 80147f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80147fa:	f280 80c7 	bge.w	801498c <_strtod_l+0x874>
 80147fe:	eba3 0308 	sub.w	r3, r3, r8
 8014802:	2b1f      	cmp	r3, #31
 8014804:	eba2 0203 	sub.w	r2, r2, r3
 8014808:	f04f 0101 	mov.w	r1, #1
 801480c:	f300 80b1 	bgt.w	8014972 <_strtod_l+0x85a>
 8014810:	fa01 f303 	lsl.w	r3, r1, r3
 8014814:	930d      	str	r3, [sp, #52]	; 0x34
 8014816:	2300      	movs	r3, #0
 8014818:	9308      	str	r3, [sp, #32]
 801481a:	eb09 0802 	add.w	r8, r9, r2
 801481e:	9b04      	ldr	r3, [sp, #16]
 8014820:	45c1      	cmp	r9, r8
 8014822:	4417      	add	r7, r2
 8014824:	441f      	add	r7, r3
 8014826:	464b      	mov	r3, r9
 8014828:	bfa8      	it	ge
 801482a:	4643      	movge	r3, r8
 801482c:	42bb      	cmp	r3, r7
 801482e:	bfa8      	it	ge
 8014830:	463b      	movge	r3, r7
 8014832:	2b00      	cmp	r3, #0
 8014834:	bfc2      	ittt	gt
 8014836:	eba8 0803 	subgt.w	r8, r8, r3
 801483a:	1aff      	subgt	r7, r7, r3
 801483c:	eba9 0903 	subgt.w	r9, r9, r3
 8014840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014842:	2b00      	cmp	r3, #0
 8014844:	dd17      	ble.n	8014876 <_strtod_l+0x75e>
 8014846:	4631      	mov	r1, r6
 8014848:	461a      	mov	r2, r3
 801484a:	4620      	mov	r0, r4
 801484c:	f001 f9e0 	bl	8015c10 <__pow5mult>
 8014850:	4606      	mov	r6, r0
 8014852:	2800      	cmp	r0, #0
 8014854:	f43f aea8 	beq.w	80145a8 <_strtod_l+0x490>
 8014858:	4601      	mov	r1, r0
 801485a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801485c:	4620      	mov	r0, r4
 801485e:	f001 f92d 	bl	8015abc <__multiply>
 8014862:	900b      	str	r0, [sp, #44]	; 0x2c
 8014864:	2800      	cmp	r0, #0
 8014866:	f43f ae9f 	beq.w	80145a8 <_strtod_l+0x490>
 801486a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801486c:	4620      	mov	r0, r4
 801486e:	f001 f80d 	bl	801588c <_Bfree>
 8014872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014874:	9318      	str	r3, [sp, #96]	; 0x60
 8014876:	f1b8 0f00 	cmp.w	r8, #0
 801487a:	f300 808c 	bgt.w	8014996 <_strtod_l+0x87e>
 801487e:	9b06      	ldr	r3, [sp, #24]
 8014880:	2b00      	cmp	r3, #0
 8014882:	dd08      	ble.n	8014896 <_strtod_l+0x77e>
 8014884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014886:	9905      	ldr	r1, [sp, #20]
 8014888:	4620      	mov	r0, r4
 801488a:	f001 f9c1 	bl	8015c10 <__pow5mult>
 801488e:	9005      	str	r0, [sp, #20]
 8014890:	2800      	cmp	r0, #0
 8014892:	f43f ae89 	beq.w	80145a8 <_strtod_l+0x490>
 8014896:	2f00      	cmp	r7, #0
 8014898:	dd08      	ble.n	80148ac <_strtod_l+0x794>
 801489a:	9905      	ldr	r1, [sp, #20]
 801489c:	463a      	mov	r2, r7
 801489e:	4620      	mov	r0, r4
 80148a0:	f001 fa10 	bl	8015cc4 <__lshift>
 80148a4:	9005      	str	r0, [sp, #20]
 80148a6:	2800      	cmp	r0, #0
 80148a8:	f43f ae7e 	beq.w	80145a8 <_strtod_l+0x490>
 80148ac:	f1b9 0f00 	cmp.w	r9, #0
 80148b0:	dd08      	ble.n	80148c4 <_strtod_l+0x7ac>
 80148b2:	4631      	mov	r1, r6
 80148b4:	464a      	mov	r2, r9
 80148b6:	4620      	mov	r0, r4
 80148b8:	f001 fa04 	bl	8015cc4 <__lshift>
 80148bc:	4606      	mov	r6, r0
 80148be:	2800      	cmp	r0, #0
 80148c0:	f43f ae72 	beq.w	80145a8 <_strtod_l+0x490>
 80148c4:	9a05      	ldr	r2, [sp, #20]
 80148c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80148c8:	4620      	mov	r0, r4
 80148ca:	f001 fa87 	bl	8015ddc <__mdiff>
 80148ce:	4605      	mov	r5, r0
 80148d0:	2800      	cmp	r0, #0
 80148d2:	f43f ae69 	beq.w	80145a8 <_strtod_l+0x490>
 80148d6:	68c3      	ldr	r3, [r0, #12]
 80148d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80148da:	2300      	movs	r3, #0
 80148dc:	60c3      	str	r3, [r0, #12]
 80148de:	4631      	mov	r1, r6
 80148e0:	f001 fa60 	bl	8015da4 <__mcmp>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	da60      	bge.n	80149aa <_strtod_l+0x892>
 80148e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148ea:	ea53 030a 	orrs.w	r3, r3, sl
 80148ee:	f040 8082 	bne.w	80149f6 <_strtod_l+0x8de>
 80148f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d17d      	bne.n	80149f6 <_strtod_l+0x8de>
 80148fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80148fe:	0d1b      	lsrs	r3, r3, #20
 8014900:	051b      	lsls	r3, r3, #20
 8014902:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014906:	d976      	bls.n	80149f6 <_strtod_l+0x8de>
 8014908:	696b      	ldr	r3, [r5, #20]
 801490a:	b913      	cbnz	r3, 8014912 <_strtod_l+0x7fa>
 801490c:	692b      	ldr	r3, [r5, #16]
 801490e:	2b01      	cmp	r3, #1
 8014910:	dd71      	ble.n	80149f6 <_strtod_l+0x8de>
 8014912:	4629      	mov	r1, r5
 8014914:	2201      	movs	r2, #1
 8014916:	4620      	mov	r0, r4
 8014918:	f001 f9d4 	bl	8015cc4 <__lshift>
 801491c:	4631      	mov	r1, r6
 801491e:	4605      	mov	r5, r0
 8014920:	f001 fa40 	bl	8015da4 <__mcmp>
 8014924:	2800      	cmp	r0, #0
 8014926:	dd66      	ble.n	80149f6 <_strtod_l+0x8de>
 8014928:	9904      	ldr	r1, [sp, #16]
 801492a:	4a53      	ldr	r2, [pc, #332]	; (8014a78 <_strtod_l+0x960>)
 801492c:	465b      	mov	r3, fp
 801492e:	2900      	cmp	r1, #0
 8014930:	f000 8081 	beq.w	8014a36 <_strtod_l+0x91e>
 8014934:	ea02 010b 	and.w	r1, r2, fp
 8014938:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801493c:	dc7b      	bgt.n	8014a36 <_strtod_l+0x91e>
 801493e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014942:	f77f aea9 	ble.w	8014698 <_strtod_l+0x580>
 8014946:	4b4d      	ldr	r3, [pc, #308]	; (8014a7c <_strtod_l+0x964>)
 8014948:	4650      	mov	r0, sl
 801494a:	4659      	mov	r1, fp
 801494c:	2200      	movs	r2, #0
 801494e:	f7eb ff95 	bl	800087c <__aeabi_dmul>
 8014952:	460b      	mov	r3, r1
 8014954:	4303      	orrs	r3, r0
 8014956:	bf08      	it	eq
 8014958:	2322      	moveq	r3, #34	; 0x22
 801495a:	4682      	mov	sl, r0
 801495c:	468b      	mov	fp, r1
 801495e:	bf08      	it	eq
 8014960:	6023      	streq	r3, [r4, #0]
 8014962:	e62b      	b.n	80145bc <_strtod_l+0x4a4>
 8014964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014968:	fa02 f303 	lsl.w	r3, r2, r3
 801496c:	ea03 0a0a 	and.w	sl, r3, sl
 8014970:	e6e3      	b.n	801473a <_strtod_l+0x622>
 8014972:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014976:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801497a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801497e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014982:	fa01 f308 	lsl.w	r3, r1, r8
 8014986:	9308      	str	r3, [sp, #32]
 8014988:	910d      	str	r1, [sp, #52]	; 0x34
 801498a:	e746      	b.n	801481a <_strtod_l+0x702>
 801498c:	2300      	movs	r3, #0
 801498e:	9308      	str	r3, [sp, #32]
 8014990:	2301      	movs	r3, #1
 8014992:	930d      	str	r3, [sp, #52]	; 0x34
 8014994:	e741      	b.n	801481a <_strtod_l+0x702>
 8014996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014998:	4642      	mov	r2, r8
 801499a:	4620      	mov	r0, r4
 801499c:	f001 f992 	bl	8015cc4 <__lshift>
 80149a0:	9018      	str	r0, [sp, #96]	; 0x60
 80149a2:	2800      	cmp	r0, #0
 80149a4:	f47f af6b 	bne.w	801487e <_strtod_l+0x766>
 80149a8:	e5fe      	b.n	80145a8 <_strtod_l+0x490>
 80149aa:	465f      	mov	r7, fp
 80149ac:	d16e      	bne.n	8014a8c <_strtod_l+0x974>
 80149ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149b4:	b342      	cbz	r2, 8014a08 <_strtod_l+0x8f0>
 80149b6:	4a32      	ldr	r2, [pc, #200]	; (8014a80 <_strtod_l+0x968>)
 80149b8:	4293      	cmp	r3, r2
 80149ba:	d128      	bne.n	8014a0e <_strtod_l+0x8f6>
 80149bc:	9b04      	ldr	r3, [sp, #16]
 80149be:	4651      	mov	r1, sl
 80149c0:	b1eb      	cbz	r3, 80149fe <_strtod_l+0x8e6>
 80149c2:	4b2d      	ldr	r3, [pc, #180]	; (8014a78 <_strtod_l+0x960>)
 80149c4:	403b      	ands	r3, r7
 80149c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80149ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149ce:	d819      	bhi.n	8014a04 <_strtod_l+0x8ec>
 80149d0:	0d1b      	lsrs	r3, r3, #20
 80149d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80149d6:	fa02 f303 	lsl.w	r3, r2, r3
 80149da:	4299      	cmp	r1, r3
 80149dc:	d117      	bne.n	8014a0e <_strtod_l+0x8f6>
 80149de:	4b29      	ldr	r3, [pc, #164]	; (8014a84 <_strtod_l+0x96c>)
 80149e0:	429f      	cmp	r7, r3
 80149e2:	d102      	bne.n	80149ea <_strtod_l+0x8d2>
 80149e4:	3101      	adds	r1, #1
 80149e6:	f43f addf 	beq.w	80145a8 <_strtod_l+0x490>
 80149ea:	4b23      	ldr	r3, [pc, #140]	; (8014a78 <_strtod_l+0x960>)
 80149ec:	403b      	ands	r3, r7
 80149ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80149f2:	f04f 0a00 	mov.w	sl, #0
 80149f6:	9b04      	ldr	r3, [sp, #16]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d1a4      	bne.n	8014946 <_strtod_l+0x82e>
 80149fc:	e5de      	b.n	80145bc <_strtod_l+0x4a4>
 80149fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a02:	e7ea      	b.n	80149da <_strtod_l+0x8c2>
 8014a04:	4613      	mov	r3, r2
 8014a06:	e7e8      	b.n	80149da <_strtod_l+0x8c2>
 8014a08:	ea53 030a 	orrs.w	r3, r3, sl
 8014a0c:	d08c      	beq.n	8014928 <_strtod_l+0x810>
 8014a0e:	9b08      	ldr	r3, [sp, #32]
 8014a10:	b1db      	cbz	r3, 8014a4a <_strtod_l+0x932>
 8014a12:	423b      	tst	r3, r7
 8014a14:	d0ef      	beq.n	80149f6 <_strtod_l+0x8de>
 8014a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a18:	9a04      	ldr	r2, [sp, #16]
 8014a1a:	4650      	mov	r0, sl
 8014a1c:	4659      	mov	r1, fp
 8014a1e:	b1c3      	cbz	r3, 8014a52 <_strtod_l+0x93a>
 8014a20:	f7ff fb5d 	bl	80140de <sulp>
 8014a24:	4602      	mov	r2, r0
 8014a26:	460b      	mov	r3, r1
 8014a28:	ec51 0b18 	vmov	r0, r1, d8
 8014a2c:	f7eb fd70 	bl	8000510 <__adddf3>
 8014a30:	4682      	mov	sl, r0
 8014a32:	468b      	mov	fp, r1
 8014a34:	e7df      	b.n	80149f6 <_strtod_l+0x8de>
 8014a36:	4013      	ands	r3, r2
 8014a38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014a3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014a40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014a44:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014a48:	e7d5      	b.n	80149f6 <_strtod_l+0x8de>
 8014a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a4c:	ea13 0f0a 	tst.w	r3, sl
 8014a50:	e7e0      	b.n	8014a14 <_strtod_l+0x8fc>
 8014a52:	f7ff fb44 	bl	80140de <sulp>
 8014a56:	4602      	mov	r2, r0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	ec51 0b18 	vmov	r0, r1, d8
 8014a5e:	f7eb fd55 	bl	800050c <__aeabi_dsub>
 8014a62:	2200      	movs	r2, #0
 8014a64:	2300      	movs	r3, #0
 8014a66:	4682      	mov	sl, r0
 8014a68:	468b      	mov	fp, r1
 8014a6a:	f7ec f96f 	bl	8000d4c <__aeabi_dcmpeq>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d0c1      	beq.n	80149f6 <_strtod_l+0x8de>
 8014a72:	e611      	b.n	8014698 <_strtod_l+0x580>
 8014a74:	fffffc02 	.word	0xfffffc02
 8014a78:	7ff00000 	.word	0x7ff00000
 8014a7c:	39500000 	.word	0x39500000
 8014a80:	000fffff 	.word	0x000fffff
 8014a84:	7fefffff 	.word	0x7fefffff
 8014a88:	0801ca58 	.word	0x0801ca58
 8014a8c:	4631      	mov	r1, r6
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f001 fb06 	bl	80160a0 <__ratio>
 8014a94:	ec59 8b10 	vmov	r8, r9, d0
 8014a98:	ee10 0a10 	vmov	r0, s0
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014aa2:	4649      	mov	r1, r9
 8014aa4:	f7ec f966 	bl	8000d74 <__aeabi_dcmple>
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d07a      	beq.n	8014ba2 <_strtod_l+0xa8a>
 8014aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d04a      	beq.n	8014b48 <_strtod_l+0xa30>
 8014ab2:	4b95      	ldr	r3, [pc, #596]	; (8014d08 <_strtod_l+0xbf0>)
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014aba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014d08 <_strtod_l+0xbf0>
 8014abe:	f04f 0800 	mov.w	r8, #0
 8014ac2:	4b92      	ldr	r3, [pc, #584]	; (8014d0c <_strtod_l+0xbf4>)
 8014ac4:	403b      	ands	r3, r7
 8014ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8014ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014aca:	4b91      	ldr	r3, [pc, #580]	; (8014d10 <_strtod_l+0xbf8>)
 8014acc:	429a      	cmp	r2, r3
 8014ace:	f040 80b0 	bne.w	8014c32 <_strtod_l+0xb1a>
 8014ad2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ad6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014ada:	ec4b ab10 	vmov	d0, sl, fp
 8014ade:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ae2:	f001 fa05 	bl	8015ef0 <__ulp>
 8014ae6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014aea:	ec53 2b10 	vmov	r2, r3, d0
 8014aee:	f7eb fec5 	bl	800087c <__aeabi_dmul>
 8014af2:	4652      	mov	r2, sl
 8014af4:	465b      	mov	r3, fp
 8014af6:	f7eb fd0b 	bl	8000510 <__adddf3>
 8014afa:	460b      	mov	r3, r1
 8014afc:	4983      	ldr	r1, [pc, #524]	; (8014d0c <_strtod_l+0xbf4>)
 8014afe:	4a85      	ldr	r2, [pc, #532]	; (8014d14 <_strtod_l+0xbfc>)
 8014b00:	4019      	ands	r1, r3
 8014b02:	4291      	cmp	r1, r2
 8014b04:	4682      	mov	sl, r0
 8014b06:	d960      	bls.n	8014bca <_strtod_l+0xab2>
 8014b08:	ee18 3a90 	vmov	r3, s17
 8014b0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d104      	bne.n	8014b1e <_strtod_l+0xa06>
 8014b14:	ee18 3a10 	vmov	r3, s16
 8014b18:	3301      	adds	r3, #1
 8014b1a:	f43f ad45 	beq.w	80145a8 <_strtod_l+0x490>
 8014b1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014d20 <_strtod_l+0xc08>
 8014b22:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f000 feaf 	bl	801588c <_Bfree>
 8014b2e:	9905      	ldr	r1, [sp, #20]
 8014b30:	4620      	mov	r0, r4
 8014b32:	f000 feab 	bl	801588c <_Bfree>
 8014b36:	4631      	mov	r1, r6
 8014b38:	4620      	mov	r0, r4
 8014b3a:	f000 fea7 	bl	801588c <_Bfree>
 8014b3e:	4629      	mov	r1, r5
 8014b40:	4620      	mov	r0, r4
 8014b42:	f000 fea3 	bl	801588c <_Bfree>
 8014b46:	e61a      	b.n	801477e <_strtod_l+0x666>
 8014b48:	f1ba 0f00 	cmp.w	sl, #0
 8014b4c:	d11b      	bne.n	8014b86 <_strtod_l+0xa6e>
 8014b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b52:	b9f3      	cbnz	r3, 8014b92 <_strtod_l+0xa7a>
 8014b54:	4b6c      	ldr	r3, [pc, #432]	; (8014d08 <_strtod_l+0xbf0>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	4640      	mov	r0, r8
 8014b5a:	4649      	mov	r1, r9
 8014b5c:	f7ec f900 	bl	8000d60 <__aeabi_dcmplt>
 8014b60:	b9d0      	cbnz	r0, 8014b98 <_strtod_l+0xa80>
 8014b62:	4640      	mov	r0, r8
 8014b64:	4649      	mov	r1, r9
 8014b66:	4b6c      	ldr	r3, [pc, #432]	; (8014d18 <_strtod_l+0xc00>)
 8014b68:	2200      	movs	r2, #0
 8014b6a:	f7eb fe87 	bl	800087c <__aeabi_dmul>
 8014b6e:	4680      	mov	r8, r0
 8014b70:	4689      	mov	r9, r1
 8014b72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8014b7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b84:	e79d      	b.n	8014ac2 <_strtod_l+0x9aa>
 8014b86:	f1ba 0f01 	cmp.w	sl, #1
 8014b8a:	d102      	bne.n	8014b92 <_strtod_l+0xa7a>
 8014b8c:	2f00      	cmp	r7, #0
 8014b8e:	f43f ad83 	beq.w	8014698 <_strtod_l+0x580>
 8014b92:	4b62      	ldr	r3, [pc, #392]	; (8014d1c <_strtod_l+0xc04>)
 8014b94:	2200      	movs	r2, #0
 8014b96:	e78e      	b.n	8014ab6 <_strtod_l+0x99e>
 8014b98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014d18 <_strtod_l+0xc00>
 8014b9c:	f04f 0800 	mov.w	r8, #0
 8014ba0:	e7e7      	b.n	8014b72 <_strtod_l+0xa5a>
 8014ba2:	4b5d      	ldr	r3, [pc, #372]	; (8014d18 <_strtod_l+0xc00>)
 8014ba4:	4640      	mov	r0, r8
 8014ba6:	4649      	mov	r1, r9
 8014ba8:	2200      	movs	r2, #0
 8014baa:	f7eb fe67 	bl	800087c <__aeabi_dmul>
 8014bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bb0:	4680      	mov	r8, r0
 8014bb2:	4689      	mov	r9, r1
 8014bb4:	b933      	cbnz	r3, 8014bc4 <_strtod_l+0xaac>
 8014bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bba:	900e      	str	r0, [sp, #56]	; 0x38
 8014bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014bc2:	e7dd      	b.n	8014b80 <_strtod_l+0xa68>
 8014bc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014bc8:	e7f9      	b.n	8014bbe <_strtod_l+0xaa6>
 8014bca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014bce:	9b04      	ldr	r3, [sp, #16]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d1a8      	bne.n	8014b26 <_strtod_l+0xa0e>
 8014bd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014bda:	0d1b      	lsrs	r3, r3, #20
 8014bdc:	051b      	lsls	r3, r3, #20
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d1a1      	bne.n	8014b26 <_strtod_l+0xa0e>
 8014be2:	4640      	mov	r0, r8
 8014be4:	4649      	mov	r1, r9
 8014be6:	f7ec f91b 	bl	8000e20 <__aeabi_d2lz>
 8014bea:	f7eb fe19 	bl	8000820 <__aeabi_l2d>
 8014bee:	4602      	mov	r2, r0
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	4640      	mov	r0, r8
 8014bf4:	4649      	mov	r1, r9
 8014bf6:	f7eb fc89 	bl	800050c <__aeabi_dsub>
 8014bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c00:	ea43 030a 	orr.w	r3, r3, sl
 8014c04:	4313      	orrs	r3, r2
 8014c06:	4680      	mov	r8, r0
 8014c08:	4689      	mov	r9, r1
 8014c0a:	d055      	beq.n	8014cb8 <_strtod_l+0xba0>
 8014c0c:	a336      	add	r3, pc, #216	; (adr r3, 8014ce8 <_strtod_l+0xbd0>)
 8014c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c12:	f7ec f8a5 	bl	8000d60 <__aeabi_dcmplt>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f47f acd0 	bne.w	80145bc <_strtod_l+0x4a4>
 8014c1c:	a334      	add	r3, pc, #208	; (adr r3, 8014cf0 <_strtod_l+0xbd8>)
 8014c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c22:	4640      	mov	r0, r8
 8014c24:	4649      	mov	r1, r9
 8014c26:	f7ec f8b9 	bl	8000d9c <__aeabi_dcmpgt>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	f43f af7b 	beq.w	8014b26 <_strtod_l+0xa0e>
 8014c30:	e4c4      	b.n	80145bc <_strtod_l+0x4a4>
 8014c32:	9b04      	ldr	r3, [sp, #16]
 8014c34:	b333      	cbz	r3, 8014c84 <_strtod_l+0xb6c>
 8014c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c3c:	d822      	bhi.n	8014c84 <_strtod_l+0xb6c>
 8014c3e:	a32e      	add	r3, pc, #184	; (adr r3, 8014cf8 <_strtod_l+0xbe0>)
 8014c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c44:	4640      	mov	r0, r8
 8014c46:	4649      	mov	r1, r9
 8014c48:	f7ec f894 	bl	8000d74 <__aeabi_dcmple>
 8014c4c:	b1a0      	cbz	r0, 8014c78 <_strtod_l+0xb60>
 8014c4e:	4649      	mov	r1, r9
 8014c50:	4640      	mov	r0, r8
 8014c52:	f7ec f8ad 	bl	8000db0 <__aeabi_d2uiz>
 8014c56:	2801      	cmp	r0, #1
 8014c58:	bf38      	it	cc
 8014c5a:	2001      	movcc	r0, #1
 8014c5c:	f7eb fd94 	bl	8000788 <__aeabi_ui2d>
 8014c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c62:	4680      	mov	r8, r0
 8014c64:	4689      	mov	r9, r1
 8014c66:	bb23      	cbnz	r3, 8014cb2 <_strtod_l+0xb9a>
 8014c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c6c:	9010      	str	r0, [sp, #64]	; 0x40
 8014c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8014c70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014c74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	9309      	str	r3, [sp, #36]	; 0x24
 8014c84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c88:	eeb0 0a48 	vmov.f32	s0, s16
 8014c8c:	eef0 0a68 	vmov.f32	s1, s17
 8014c90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014c94:	f001 f92c 	bl	8015ef0 <__ulp>
 8014c98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c9c:	ec53 2b10 	vmov	r2, r3, d0
 8014ca0:	f7eb fdec 	bl	800087c <__aeabi_dmul>
 8014ca4:	ec53 2b18 	vmov	r2, r3, d8
 8014ca8:	f7eb fc32 	bl	8000510 <__adddf3>
 8014cac:	4682      	mov	sl, r0
 8014cae:	468b      	mov	fp, r1
 8014cb0:	e78d      	b.n	8014bce <_strtod_l+0xab6>
 8014cb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014cb6:	e7db      	b.n	8014c70 <_strtod_l+0xb58>
 8014cb8:	a311      	add	r3, pc, #68	; (adr r3, 8014d00 <_strtod_l+0xbe8>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7ec f84f 	bl	8000d60 <__aeabi_dcmplt>
 8014cc2:	e7b2      	b.n	8014c2a <_strtod_l+0xb12>
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8014cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ccc:	6013      	str	r3, [r2, #0]
 8014cce:	f7ff ba6b 	b.w	80141a8 <_strtod_l+0x90>
 8014cd2:	2a65      	cmp	r2, #101	; 0x65
 8014cd4:	f43f ab5f 	beq.w	8014396 <_strtod_l+0x27e>
 8014cd8:	2a45      	cmp	r2, #69	; 0x45
 8014cda:	f43f ab5c 	beq.w	8014396 <_strtod_l+0x27e>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	f7ff bb94 	b.w	801440c <_strtod_l+0x2f4>
 8014ce4:	f3af 8000 	nop.w
 8014ce8:	94a03595 	.word	0x94a03595
 8014cec:	3fdfffff 	.word	0x3fdfffff
 8014cf0:	35afe535 	.word	0x35afe535
 8014cf4:	3fe00000 	.word	0x3fe00000
 8014cf8:	ffc00000 	.word	0xffc00000
 8014cfc:	41dfffff 	.word	0x41dfffff
 8014d00:	94a03595 	.word	0x94a03595
 8014d04:	3fcfffff 	.word	0x3fcfffff
 8014d08:	3ff00000 	.word	0x3ff00000
 8014d0c:	7ff00000 	.word	0x7ff00000
 8014d10:	7fe00000 	.word	0x7fe00000
 8014d14:	7c9fffff 	.word	0x7c9fffff
 8014d18:	3fe00000 	.word	0x3fe00000
 8014d1c:	bff00000 	.word	0xbff00000
 8014d20:	7fefffff 	.word	0x7fefffff

08014d24 <strtod>:
 8014d24:	460a      	mov	r2, r1
 8014d26:	4601      	mov	r1, r0
 8014d28:	4802      	ldr	r0, [pc, #8]	; (8014d34 <strtod+0x10>)
 8014d2a:	4b03      	ldr	r3, [pc, #12]	; (8014d38 <strtod+0x14>)
 8014d2c:	6800      	ldr	r0, [r0, #0]
 8014d2e:	f7ff b9f3 	b.w	8014118 <_strtod_l>
 8014d32:	bf00      	nop
 8014d34:	20000088 	.word	0x20000088
 8014d38:	200000f0 	.word	0x200000f0

08014d3c <_strtol_l.constprop.0>:
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d42:	d001      	beq.n	8014d48 <_strtol_l.constprop.0+0xc>
 8014d44:	2b24      	cmp	r3, #36	; 0x24
 8014d46:	d906      	bls.n	8014d56 <_strtol_l.constprop.0+0x1a>
 8014d48:	f7fd fdc6 	bl	80128d8 <__errno>
 8014d4c:	2316      	movs	r3, #22
 8014d4e:	6003      	str	r3, [r0, #0]
 8014d50:	2000      	movs	r0, #0
 8014d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014e3c <_strtol_l.constprop.0+0x100>
 8014d5a:	460d      	mov	r5, r1
 8014d5c:	462e      	mov	r6, r5
 8014d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d62:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014d66:	f017 0708 	ands.w	r7, r7, #8
 8014d6a:	d1f7      	bne.n	8014d5c <_strtol_l.constprop.0+0x20>
 8014d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8014d6e:	d132      	bne.n	8014dd6 <_strtol_l.constprop.0+0x9a>
 8014d70:	782c      	ldrb	r4, [r5, #0]
 8014d72:	2701      	movs	r7, #1
 8014d74:	1cb5      	adds	r5, r6, #2
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d05b      	beq.n	8014e32 <_strtol_l.constprop.0+0xf6>
 8014d7a:	2b10      	cmp	r3, #16
 8014d7c:	d109      	bne.n	8014d92 <_strtol_l.constprop.0+0x56>
 8014d7e:	2c30      	cmp	r4, #48	; 0x30
 8014d80:	d107      	bne.n	8014d92 <_strtol_l.constprop.0+0x56>
 8014d82:	782c      	ldrb	r4, [r5, #0]
 8014d84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014d88:	2c58      	cmp	r4, #88	; 0x58
 8014d8a:	d14d      	bne.n	8014e28 <_strtol_l.constprop.0+0xec>
 8014d8c:	786c      	ldrb	r4, [r5, #1]
 8014d8e:	2310      	movs	r3, #16
 8014d90:	3502      	adds	r5, #2
 8014d92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014d96:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014d9a:	f04f 0c00 	mov.w	ip, #0
 8014d9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014da2:	4666      	mov	r6, ip
 8014da4:	fb03 8a19 	mls	sl, r3, r9, r8
 8014da8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014dac:	f1be 0f09 	cmp.w	lr, #9
 8014db0:	d816      	bhi.n	8014de0 <_strtol_l.constprop.0+0xa4>
 8014db2:	4674      	mov	r4, lr
 8014db4:	42a3      	cmp	r3, r4
 8014db6:	dd24      	ble.n	8014e02 <_strtol_l.constprop.0+0xc6>
 8014db8:	f1bc 0f00 	cmp.w	ip, #0
 8014dbc:	db1e      	blt.n	8014dfc <_strtol_l.constprop.0+0xc0>
 8014dbe:	45b1      	cmp	r9, r6
 8014dc0:	d31c      	bcc.n	8014dfc <_strtol_l.constprop.0+0xc0>
 8014dc2:	d101      	bne.n	8014dc8 <_strtol_l.constprop.0+0x8c>
 8014dc4:	45a2      	cmp	sl, r4
 8014dc6:	db19      	blt.n	8014dfc <_strtol_l.constprop.0+0xc0>
 8014dc8:	fb06 4603 	mla	r6, r6, r3, r4
 8014dcc:	f04f 0c01 	mov.w	ip, #1
 8014dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014dd4:	e7e8      	b.n	8014da8 <_strtol_l.constprop.0+0x6c>
 8014dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8014dd8:	bf04      	itt	eq
 8014dda:	782c      	ldrbeq	r4, [r5, #0]
 8014ddc:	1cb5      	addeq	r5, r6, #2
 8014dde:	e7ca      	b.n	8014d76 <_strtol_l.constprop.0+0x3a>
 8014de0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014de4:	f1be 0f19 	cmp.w	lr, #25
 8014de8:	d801      	bhi.n	8014dee <_strtol_l.constprop.0+0xb2>
 8014dea:	3c37      	subs	r4, #55	; 0x37
 8014dec:	e7e2      	b.n	8014db4 <_strtol_l.constprop.0+0x78>
 8014dee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014df2:	f1be 0f19 	cmp.w	lr, #25
 8014df6:	d804      	bhi.n	8014e02 <_strtol_l.constprop.0+0xc6>
 8014df8:	3c57      	subs	r4, #87	; 0x57
 8014dfa:	e7db      	b.n	8014db4 <_strtol_l.constprop.0+0x78>
 8014dfc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8014e00:	e7e6      	b.n	8014dd0 <_strtol_l.constprop.0+0x94>
 8014e02:	f1bc 0f00 	cmp.w	ip, #0
 8014e06:	da05      	bge.n	8014e14 <_strtol_l.constprop.0+0xd8>
 8014e08:	2322      	movs	r3, #34	; 0x22
 8014e0a:	6003      	str	r3, [r0, #0]
 8014e0c:	4646      	mov	r6, r8
 8014e0e:	b942      	cbnz	r2, 8014e22 <_strtol_l.constprop.0+0xe6>
 8014e10:	4630      	mov	r0, r6
 8014e12:	e79e      	b.n	8014d52 <_strtol_l.constprop.0+0x16>
 8014e14:	b107      	cbz	r7, 8014e18 <_strtol_l.constprop.0+0xdc>
 8014e16:	4276      	negs	r6, r6
 8014e18:	2a00      	cmp	r2, #0
 8014e1a:	d0f9      	beq.n	8014e10 <_strtol_l.constprop.0+0xd4>
 8014e1c:	f1bc 0f00 	cmp.w	ip, #0
 8014e20:	d000      	beq.n	8014e24 <_strtol_l.constprop.0+0xe8>
 8014e22:	1e69      	subs	r1, r5, #1
 8014e24:	6011      	str	r1, [r2, #0]
 8014e26:	e7f3      	b.n	8014e10 <_strtol_l.constprop.0+0xd4>
 8014e28:	2430      	movs	r4, #48	; 0x30
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d1b1      	bne.n	8014d92 <_strtol_l.constprop.0+0x56>
 8014e2e:	2308      	movs	r3, #8
 8014e30:	e7af      	b.n	8014d92 <_strtol_l.constprop.0+0x56>
 8014e32:	2c30      	cmp	r4, #48	; 0x30
 8014e34:	d0a5      	beq.n	8014d82 <_strtol_l.constprop.0+0x46>
 8014e36:	230a      	movs	r3, #10
 8014e38:	e7ab      	b.n	8014d92 <_strtol_l.constprop.0+0x56>
 8014e3a:	bf00      	nop
 8014e3c:	0801c1f3 	.word	0x0801c1f3

08014e40 <_strtol_r>:
 8014e40:	f7ff bf7c 	b.w	8014d3c <_strtol_l.constprop.0>

08014e44 <strtol>:
 8014e44:	4613      	mov	r3, r2
 8014e46:	460a      	mov	r2, r1
 8014e48:	4601      	mov	r1, r0
 8014e4a:	4802      	ldr	r0, [pc, #8]	; (8014e54 <strtol+0x10>)
 8014e4c:	6800      	ldr	r0, [r0, #0]
 8014e4e:	f7ff bf75 	b.w	8014d3c <_strtol_l.constprop.0>
 8014e52:	bf00      	nop
 8014e54:	20000088 	.word	0x20000088

08014e58 <gettimeofday>:
 8014e58:	4b02      	ldr	r3, [pc, #8]	; (8014e64 <gettimeofday+0xc>)
 8014e5a:	460a      	mov	r2, r1
 8014e5c:	4601      	mov	r1, r0
 8014e5e:	6818      	ldr	r0, [r3, #0]
 8014e60:	f000 bc68 	b.w	8015734 <_gettimeofday_r>
 8014e64:	20000088 	.word	0x20000088

08014e68 <_user_strerror>:
 8014e68:	2000      	movs	r0, #0
 8014e6a:	4770      	bx	lr

08014e6c <__swbuf_r>:
 8014e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e6e:	460e      	mov	r6, r1
 8014e70:	4614      	mov	r4, r2
 8014e72:	4605      	mov	r5, r0
 8014e74:	b118      	cbz	r0, 8014e7e <__swbuf_r+0x12>
 8014e76:	6983      	ldr	r3, [r0, #24]
 8014e78:	b90b      	cbnz	r3, 8014e7e <__swbuf_r+0x12>
 8014e7a:	f7fd fe4d 	bl	8012b18 <__sinit>
 8014e7e:	4b21      	ldr	r3, [pc, #132]	; (8014f04 <__swbuf_r+0x98>)
 8014e80:	429c      	cmp	r4, r3
 8014e82:	d12b      	bne.n	8014edc <__swbuf_r+0x70>
 8014e84:	686c      	ldr	r4, [r5, #4]
 8014e86:	69a3      	ldr	r3, [r4, #24]
 8014e88:	60a3      	str	r3, [r4, #8]
 8014e8a:	89a3      	ldrh	r3, [r4, #12]
 8014e8c:	071a      	lsls	r2, r3, #28
 8014e8e:	d52f      	bpl.n	8014ef0 <__swbuf_r+0x84>
 8014e90:	6923      	ldr	r3, [r4, #16]
 8014e92:	b36b      	cbz	r3, 8014ef0 <__swbuf_r+0x84>
 8014e94:	6923      	ldr	r3, [r4, #16]
 8014e96:	6820      	ldr	r0, [r4, #0]
 8014e98:	1ac0      	subs	r0, r0, r3
 8014e9a:	6963      	ldr	r3, [r4, #20]
 8014e9c:	b2f6      	uxtb	r6, r6
 8014e9e:	4283      	cmp	r3, r0
 8014ea0:	4637      	mov	r7, r6
 8014ea2:	dc04      	bgt.n	8014eae <__swbuf_r+0x42>
 8014ea4:	4621      	mov	r1, r4
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7fd fda2 	bl	80129f0 <_fflush_r>
 8014eac:	bb30      	cbnz	r0, 8014efc <__swbuf_r+0x90>
 8014eae:	68a3      	ldr	r3, [r4, #8]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	60a3      	str	r3, [r4, #8]
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	1c5a      	adds	r2, r3, #1
 8014eb8:	6022      	str	r2, [r4, #0]
 8014eba:	701e      	strb	r6, [r3, #0]
 8014ebc:	6963      	ldr	r3, [r4, #20]
 8014ebe:	3001      	adds	r0, #1
 8014ec0:	4283      	cmp	r3, r0
 8014ec2:	d004      	beq.n	8014ece <__swbuf_r+0x62>
 8014ec4:	89a3      	ldrh	r3, [r4, #12]
 8014ec6:	07db      	lsls	r3, r3, #31
 8014ec8:	d506      	bpl.n	8014ed8 <__swbuf_r+0x6c>
 8014eca:	2e0a      	cmp	r6, #10
 8014ecc:	d104      	bne.n	8014ed8 <__swbuf_r+0x6c>
 8014ece:	4621      	mov	r1, r4
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	f7fd fd8d 	bl	80129f0 <_fflush_r>
 8014ed6:	b988      	cbnz	r0, 8014efc <__swbuf_r+0x90>
 8014ed8:	4638      	mov	r0, r7
 8014eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014edc:	4b0a      	ldr	r3, [pc, #40]	; (8014f08 <__swbuf_r+0x9c>)
 8014ede:	429c      	cmp	r4, r3
 8014ee0:	d101      	bne.n	8014ee6 <__swbuf_r+0x7a>
 8014ee2:	68ac      	ldr	r4, [r5, #8]
 8014ee4:	e7cf      	b.n	8014e86 <__swbuf_r+0x1a>
 8014ee6:	4b09      	ldr	r3, [pc, #36]	; (8014f0c <__swbuf_r+0xa0>)
 8014ee8:	429c      	cmp	r4, r3
 8014eea:	bf08      	it	eq
 8014eec:	68ec      	ldreq	r4, [r5, #12]
 8014eee:	e7ca      	b.n	8014e86 <__swbuf_r+0x1a>
 8014ef0:	4621      	mov	r1, r4
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	f000 f81e 	bl	8014f34 <__swsetup_r>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	d0cb      	beq.n	8014e94 <__swbuf_r+0x28>
 8014efc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014f00:	e7ea      	b.n	8014ed8 <__swbuf_r+0x6c>
 8014f02:	bf00      	nop
 8014f04:	0801c314 	.word	0x0801c314
 8014f08:	0801c334 	.word	0x0801c334
 8014f0c:	0801c2f4 	.word	0x0801c2f4

08014f10 <_write_r>:
 8014f10:	b538      	push	{r3, r4, r5, lr}
 8014f12:	4d07      	ldr	r5, [pc, #28]	; (8014f30 <_write_r+0x20>)
 8014f14:	4604      	mov	r4, r0
 8014f16:	4608      	mov	r0, r1
 8014f18:	4611      	mov	r1, r2
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	602a      	str	r2, [r5, #0]
 8014f1e:	461a      	mov	r2, r3
 8014f20:	f7ec fc19 	bl	8001756 <_write>
 8014f24:	1c43      	adds	r3, r0, #1
 8014f26:	d102      	bne.n	8014f2e <_write_r+0x1e>
 8014f28:	682b      	ldr	r3, [r5, #0]
 8014f2a:	b103      	cbz	r3, 8014f2e <_write_r+0x1e>
 8014f2c:	6023      	str	r3, [r4, #0]
 8014f2e:	bd38      	pop	{r3, r4, r5, pc}
 8014f30:	20003e80 	.word	0x20003e80

08014f34 <__swsetup_r>:
 8014f34:	4b32      	ldr	r3, [pc, #200]	; (8015000 <__swsetup_r+0xcc>)
 8014f36:	b570      	push	{r4, r5, r6, lr}
 8014f38:	681d      	ldr	r5, [r3, #0]
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	b125      	cbz	r5, 8014f4a <__swsetup_r+0x16>
 8014f40:	69ab      	ldr	r3, [r5, #24]
 8014f42:	b913      	cbnz	r3, 8014f4a <__swsetup_r+0x16>
 8014f44:	4628      	mov	r0, r5
 8014f46:	f7fd fde7 	bl	8012b18 <__sinit>
 8014f4a:	4b2e      	ldr	r3, [pc, #184]	; (8015004 <__swsetup_r+0xd0>)
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	d10f      	bne.n	8014f70 <__swsetup_r+0x3c>
 8014f50:	686c      	ldr	r4, [r5, #4]
 8014f52:	89a3      	ldrh	r3, [r4, #12]
 8014f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f58:	0719      	lsls	r1, r3, #28
 8014f5a:	d42c      	bmi.n	8014fb6 <__swsetup_r+0x82>
 8014f5c:	06dd      	lsls	r5, r3, #27
 8014f5e:	d411      	bmi.n	8014f84 <__swsetup_r+0x50>
 8014f60:	2309      	movs	r3, #9
 8014f62:	6033      	str	r3, [r6, #0]
 8014f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014f68:	81a3      	strh	r3, [r4, #12]
 8014f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f6e:	e03e      	b.n	8014fee <__swsetup_r+0xba>
 8014f70:	4b25      	ldr	r3, [pc, #148]	; (8015008 <__swsetup_r+0xd4>)
 8014f72:	429c      	cmp	r4, r3
 8014f74:	d101      	bne.n	8014f7a <__swsetup_r+0x46>
 8014f76:	68ac      	ldr	r4, [r5, #8]
 8014f78:	e7eb      	b.n	8014f52 <__swsetup_r+0x1e>
 8014f7a:	4b24      	ldr	r3, [pc, #144]	; (801500c <__swsetup_r+0xd8>)
 8014f7c:	429c      	cmp	r4, r3
 8014f7e:	bf08      	it	eq
 8014f80:	68ec      	ldreq	r4, [r5, #12]
 8014f82:	e7e6      	b.n	8014f52 <__swsetup_r+0x1e>
 8014f84:	0758      	lsls	r0, r3, #29
 8014f86:	d512      	bpl.n	8014fae <__swsetup_r+0x7a>
 8014f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f8a:	b141      	cbz	r1, 8014f9e <__swsetup_r+0x6a>
 8014f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f90:	4299      	cmp	r1, r3
 8014f92:	d002      	beq.n	8014f9a <__swsetup_r+0x66>
 8014f94:	4630      	mov	r0, r6
 8014f96:	f7fd fff5 	bl	8012f84 <_free_r>
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8014f9e:	89a3      	ldrh	r3, [r4, #12]
 8014fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014fa4:	81a3      	strh	r3, [r4, #12]
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	6063      	str	r3, [r4, #4]
 8014faa:	6923      	ldr	r3, [r4, #16]
 8014fac:	6023      	str	r3, [r4, #0]
 8014fae:	89a3      	ldrh	r3, [r4, #12]
 8014fb0:	f043 0308 	orr.w	r3, r3, #8
 8014fb4:	81a3      	strh	r3, [r4, #12]
 8014fb6:	6923      	ldr	r3, [r4, #16]
 8014fb8:	b94b      	cbnz	r3, 8014fce <__swsetup_r+0x9a>
 8014fba:	89a3      	ldrh	r3, [r4, #12]
 8014fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fc4:	d003      	beq.n	8014fce <__swsetup_r+0x9a>
 8014fc6:	4621      	mov	r1, r4
 8014fc8:	4630      	mov	r0, r6
 8014fca:	f7fd ff4f 	bl	8012e6c <__smakebuf_r>
 8014fce:	89a0      	ldrh	r0, [r4, #12]
 8014fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014fd4:	f010 0301 	ands.w	r3, r0, #1
 8014fd8:	d00a      	beq.n	8014ff0 <__swsetup_r+0xbc>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	60a3      	str	r3, [r4, #8]
 8014fde:	6963      	ldr	r3, [r4, #20]
 8014fe0:	425b      	negs	r3, r3
 8014fe2:	61a3      	str	r3, [r4, #24]
 8014fe4:	6923      	ldr	r3, [r4, #16]
 8014fe6:	b943      	cbnz	r3, 8014ffa <__swsetup_r+0xc6>
 8014fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014fec:	d1ba      	bne.n	8014f64 <__swsetup_r+0x30>
 8014fee:	bd70      	pop	{r4, r5, r6, pc}
 8014ff0:	0781      	lsls	r1, r0, #30
 8014ff2:	bf58      	it	pl
 8014ff4:	6963      	ldrpl	r3, [r4, #20]
 8014ff6:	60a3      	str	r3, [r4, #8]
 8014ff8:	e7f4      	b.n	8014fe4 <__swsetup_r+0xb0>
 8014ffa:	2000      	movs	r0, #0
 8014ffc:	e7f7      	b.n	8014fee <__swsetup_r+0xba>
 8014ffe:	bf00      	nop
 8015000:	20000088 	.word	0x20000088
 8015004:	0801c314 	.word	0x0801c314
 8015008:	0801c334 	.word	0x0801c334
 801500c:	0801c2f4 	.word	0x0801c2f4

08015010 <_close_r>:
 8015010:	b538      	push	{r3, r4, r5, lr}
 8015012:	4d06      	ldr	r5, [pc, #24]	; (801502c <_close_r+0x1c>)
 8015014:	2300      	movs	r3, #0
 8015016:	4604      	mov	r4, r0
 8015018:	4608      	mov	r0, r1
 801501a:	602b      	str	r3, [r5, #0]
 801501c:	f7ec fbb7 	bl	800178e <_close>
 8015020:	1c43      	adds	r3, r0, #1
 8015022:	d102      	bne.n	801502a <_close_r+0x1a>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	b103      	cbz	r3, 801502a <_close_r+0x1a>
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	bd38      	pop	{r3, r4, r5, pc}
 801502c:	20003e80 	.word	0x20003e80

08015030 <_fstat_r>:
 8015030:	b538      	push	{r3, r4, r5, lr}
 8015032:	4d07      	ldr	r5, [pc, #28]	; (8015050 <_fstat_r+0x20>)
 8015034:	2300      	movs	r3, #0
 8015036:	4604      	mov	r4, r0
 8015038:	4608      	mov	r0, r1
 801503a:	4611      	mov	r1, r2
 801503c:	602b      	str	r3, [r5, #0]
 801503e:	f7ec fbb2 	bl	80017a6 <_fstat>
 8015042:	1c43      	adds	r3, r0, #1
 8015044:	d102      	bne.n	801504c <_fstat_r+0x1c>
 8015046:	682b      	ldr	r3, [r5, #0]
 8015048:	b103      	cbz	r3, 801504c <_fstat_r+0x1c>
 801504a:	6023      	str	r3, [r4, #0]
 801504c:	bd38      	pop	{r3, r4, r5, pc}
 801504e:	bf00      	nop
 8015050:	20003e80 	.word	0x20003e80

08015054 <rshift>:
 8015054:	6903      	ldr	r3, [r0, #16]
 8015056:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801505a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801505e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015062:	f100 0414 	add.w	r4, r0, #20
 8015066:	dd45      	ble.n	80150f4 <rshift+0xa0>
 8015068:	f011 011f 	ands.w	r1, r1, #31
 801506c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015070:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015074:	d10c      	bne.n	8015090 <rshift+0x3c>
 8015076:	f100 0710 	add.w	r7, r0, #16
 801507a:	4629      	mov	r1, r5
 801507c:	42b1      	cmp	r1, r6
 801507e:	d334      	bcc.n	80150ea <rshift+0x96>
 8015080:	1a9b      	subs	r3, r3, r2
 8015082:	009b      	lsls	r3, r3, #2
 8015084:	1eea      	subs	r2, r5, #3
 8015086:	4296      	cmp	r6, r2
 8015088:	bf38      	it	cc
 801508a:	2300      	movcc	r3, #0
 801508c:	4423      	add	r3, r4
 801508e:	e015      	b.n	80150bc <rshift+0x68>
 8015090:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015094:	f1c1 0820 	rsb	r8, r1, #32
 8015098:	40cf      	lsrs	r7, r1
 801509a:	f105 0e04 	add.w	lr, r5, #4
 801509e:	46a1      	mov	r9, r4
 80150a0:	4576      	cmp	r6, lr
 80150a2:	46f4      	mov	ip, lr
 80150a4:	d815      	bhi.n	80150d2 <rshift+0x7e>
 80150a6:	1a9a      	subs	r2, r3, r2
 80150a8:	0092      	lsls	r2, r2, #2
 80150aa:	3a04      	subs	r2, #4
 80150ac:	3501      	adds	r5, #1
 80150ae:	42ae      	cmp	r6, r5
 80150b0:	bf38      	it	cc
 80150b2:	2200      	movcc	r2, #0
 80150b4:	18a3      	adds	r3, r4, r2
 80150b6:	50a7      	str	r7, [r4, r2]
 80150b8:	b107      	cbz	r7, 80150bc <rshift+0x68>
 80150ba:	3304      	adds	r3, #4
 80150bc:	1b1a      	subs	r2, r3, r4
 80150be:	42a3      	cmp	r3, r4
 80150c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80150c4:	bf08      	it	eq
 80150c6:	2300      	moveq	r3, #0
 80150c8:	6102      	str	r2, [r0, #16]
 80150ca:	bf08      	it	eq
 80150cc:	6143      	streq	r3, [r0, #20]
 80150ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150d2:	f8dc c000 	ldr.w	ip, [ip]
 80150d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80150da:	ea4c 0707 	orr.w	r7, ip, r7
 80150de:	f849 7b04 	str.w	r7, [r9], #4
 80150e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80150e6:	40cf      	lsrs	r7, r1
 80150e8:	e7da      	b.n	80150a0 <rshift+0x4c>
 80150ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80150ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80150f2:	e7c3      	b.n	801507c <rshift+0x28>
 80150f4:	4623      	mov	r3, r4
 80150f6:	e7e1      	b.n	80150bc <rshift+0x68>

080150f8 <__hexdig_fun>:
 80150f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80150fc:	2b09      	cmp	r3, #9
 80150fe:	d802      	bhi.n	8015106 <__hexdig_fun+0xe>
 8015100:	3820      	subs	r0, #32
 8015102:	b2c0      	uxtb	r0, r0
 8015104:	4770      	bx	lr
 8015106:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801510a:	2b05      	cmp	r3, #5
 801510c:	d801      	bhi.n	8015112 <__hexdig_fun+0x1a>
 801510e:	3847      	subs	r0, #71	; 0x47
 8015110:	e7f7      	b.n	8015102 <__hexdig_fun+0xa>
 8015112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015116:	2b05      	cmp	r3, #5
 8015118:	d801      	bhi.n	801511e <__hexdig_fun+0x26>
 801511a:	3827      	subs	r0, #39	; 0x27
 801511c:	e7f1      	b.n	8015102 <__hexdig_fun+0xa>
 801511e:	2000      	movs	r0, #0
 8015120:	4770      	bx	lr
	...

08015124 <__gethex>:
 8015124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015128:	ed2d 8b02 	vpush	{d8}
 801512c:	b089      	sub	sp, #36	; 0x24
 801512e:	ee08 0a10 	vmov	s16, r0
 8015132:	9304      	str	r3, [sp, #16]
 8015134:	4bb4      	ldr	r3, [pc, #720]	; (8015408 <__gethex+0x2e4>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	9301      	str	r3, [sp, #4]
 801513a:	4618      	mov	r0, r3
 801513c:	468b      	mov	fp, r1
 801513e:	4690      	mov	r8, r2
 8015140:	f7eb f9d8 	bl	80004f4 <strlen>
 8015144:	9b01      	ldr	r3, [sp, #4]
 8015146:	f8db 2000 	ldr.w	r2, [fp]
 801514a:	4403      	add	r3, r0
 801514c:	4682      	mov	sl, r0
 801514e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015152:	9305      	str	r3, [sp, #20]
 8015154:	1c93      	adds	r3, r2, #2
 8015156:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801515a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801515e:	32fe      	adds	r2, #254	; 0xfe
 8015160:	18d1      	adds	r1, r2, r3
 8015162:	461f      	mov	r7, r3
 8015164:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015168:	9100      	str	r1, [sp, #0]
 801516a:	2830      	cmp	r0, #48	; 0x30
 801516c:	d0f8      	beq.n	8015160 <__gethex+0x3c>
 801516e:	f7ff ffc3 	bl	80150f8 <__hexdig_fun>
 8015172:	4604      	mov	r4, r0
 8015174:	2800      	cmp	r0, #0
 8015176:	d13a      	bne.n	80151ee <__gethex+0xca>
 8015178:	9901      	ldr	r1, [sp, #4]
 801517a:	4652      	mov	r2, sl
 801517c:	4638      	mov	r0, r7
 801517e:	f001 fd07 	bl	8016b90 <strncmp>
 8015182:	4605      	mov	r5, r0
 8015184:	2800      	cmp	r0, #0
 8015186:	d168      	bne.n	801525a <__gethex+0x136>
 8015188:	f817 000a 	ldrb.w	r0, [r7, sl]
 801518c:	eb07 060a 	add.w	r6, r7, sl
 8015190:	f7ff ffb2 	bl	80150f8 <__hexdig_fun>
 8015194:	2800      	cmp	r0, #0
 8015196:	d062      	beq.n	801525e <__gethex+0x13a>
 8015198:	4633      	mov	r3, r6
 801519a:	7818      	ldrb	r0, [r3, #0]
 801519c:	2830      	cmp	r0, #48	; 0x30
 801519e:	461f      	mov	r7, r3
 80151a0:	f103 0301 	add.w	r3, r3, #1
 80151a4:	d0f9      	beq.n	801519a <__gethex+0x76>
 80151a6:	f7ff ffa7 	bl	80150f8 <__hexdig_fun>
 80151aa:	2301      	movs	r3, #1
 80151ac:	fab0 f480 	clz	r4, r0
 80151b0:	0964      	lsrs	r4, r4, #5
 80151b2:	4635      	mov	r5, r6
 80151b4:	9300      	str	r3, [sp, #0]
 80151b6:	463a      	mov	r2, r7
 80151b8:	4616      	mov	r6, r2
 80151ba:	3201      	adds	r2, #1
 80151bc:	7830      	ldrb	r0, [r6, #0]
 80151be:	f7ff ff9b 	bl	80150f8 <__hexdig_fun>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	d1f8      	bne.n	80151b8 <__gethex+0x94>
 80151c6:	9901      	ldr	r1, [sp, #4]
 80151c8:	4652      	mov	r2, sl
 80151ca:	4630      	mov	r0, r6
 80151cc:	f001 fce0 	bl	8016b90 <strncmp>
 80151d0:	b980      	cbnz	r0, 80151f4 <__gethex+0xd0>
 80151d2:	b94d      	cbnz	r5, 80151e8 <__gethex+0xc4>
 80151d4:	eb06 050a 	add.w	r5, r6, sl
 80151d8:	462a      	mov	r2, r5
 80151da:	4616      	mov	r6, r2
 80151dc:	3201      	adds	r2, #1
 80151de:	7830      	ldrb	r0, [r6, #0]
 80151e0:	f7ff ff8a 	bl	80150f8 <__hexdig_fun>
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d1f8      	bne.n	80151da <__gethex+0xb6>
 80151e8:	1bad      	subs	r5, r5, r6
 80151ea:	00ad      	lsls	r5, r5, #2
 80151ec:	e004      	b.n	80151f8 <__gethex+0xd4>
 80151ee:	2400      	movs	r4, #0
 80151f0:	4625      	mov	r5, r4
 80151f2:	e7e0      	b.n	80151b6 <__gethex+0x92>
 80151f4:	2d00      	cmp	r5, #0
 80151f6:	d1f7      	bne.n	80151e8 <__gethex+0xc4>
 80151f8:	7833      	ldrb	r3, [r6, #0]
 80151fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80151fe:	2b50      	cmp	r3, #80	; 0x50
 8015200:	d13b      	bne.n	801527a <__gethex+0x156>
 8015202:	7873      	ldrb	r3, [r6, #1]
 8015204:	2b2b      	cmp	r3, #43	; 0x2b
 8015206:	d02c      	beq.n	8015262 <__gethex+0x13e>
 8015208:	2b2d      	cmp	r3, #45	; 0x2d
 801520a:	d02e      	beq.n	801526a <__gethex+0x146>
 801520c:	1c71      	adds	r1, r6, #1
 801520e:	f04f 0900 	mov.w	r9, #0
 8015212:	7808      	ldrb	r0, [r1, #0]
 8015214:	f7ff ff70 	bl	80150f8 <__hexdig_fun>
 8015218:	1e43      	subs	r3, r0, #1
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b18      	cmp	r3, #24
 801521e:	d82c      	bhi.n	801527a <__gethex+0x156>
 8015220:	f1a0 0210 	sub.w	r2, r0, #16
 8015224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015228:	f7ff ff66 	bl	80150f8 <__hexdig_fun>
 801522c:	1e43      	subs	r3, r0, #1
 801522e:	b2db      	uxtb	r3, r3
 8015230:	2b18      	cmp	r3, #24
 8015232:	d91d      	bls.n	8015270 <__gethex+0x14c>
 8015234:	f1b9 0f00 	cmp.w	r9, #0
 8015238:	d000      	beq.n	801523c <__gethex+0x118>
 801523a:	4252      	negs	r2, r2
 801523c:	4415      	add	r5, r2
 801523e:	f8cb 1000 	str.w	r1, [fp]
 8015242:	b1e4      	cbz	r4, 801527e <__gethex+0x15a>
 8015244:	9b00      	ldr	r3, [sp, #0]
 8015246:	2b00      	cmp	r3, #0
 8015248:	bf14      	ite	ne
 801524a:	2700      	movne	r7, #0
 801524c:	2706      	moveq	r7, #6
 801524e:	4638      	mov	r0, r7
 8015250:	b009      	add	sp, #36	; 0x24
 8015252:	ecbd 8b02 	vpop	{d8}
 8015256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801525a:	463e      	mov	r6, r7
 801525c:	4625      	mov	r5, r4
 801525e:	2401      	movs	r4, #1
 8015260:	e7ca      	b.n	80151f8 <__gethex+0xd4>
 8015262:	f04f 0900 	mov.w	r9, #0
 8015266:	1cb1      	adds	r1, r6, #2
 8015268:	e7d3      	b.n	8015212 <__gethex+0xee>
 801526a:	f04f 0901 	mov.w	r9, #1
 801526e:	e7fa      	b.n	8015266 <__gethex+0x142>
 8015270:	230a      	movs	r3, #10
 8015272:	fb03 0202 	mla	r2, r3, r2, r0
 8015276:	3a10      	subs	r2, #16
 8015278:	e7d4      	b.n	8015224 <__gethex+0x100>
 801527a:	4631      	mov	r1, r6
 801527c:	e7df      	b.n	801523e <__gethex+0x11a>
 801527e:	1bf3      	subs	r3, r6, r7
 8015280:	3b01      	subs	r3, #1
 8015282:	4621      	mov	r1, r4
 8015284:	2b07      	cmp	r3, #7
 8015286:	dc0b      	bgt.n	80152a0 <__gethex+0x17c>
 8015288:	ee18 0a10 	vmov	r0, s16
 801528c:	f000 fabe 	bl	801580c <_Balloc>
 8015290:	4604      	mov	r4, r0
 8015292:	b940      	cbnz	r0, 80152a6 <__gethex+0x182>
 8015294:	4b5d      	ldr	r3, [pc, #372]	; (801540c <__gethex+0x2e8>)
 8015296:	4602      	mov	r2, r0
 8015298:	21de      	movs	r1, #222	; 0xde
 801529a:	485d      	ldr	r0, [pc, #372]	; (8015410 <__gethex+0x2ec>)
 801529c:	f001 fd48 	bl	8016d30 <__assert_func>
 80152a0:	3101      	adds	r1, #1
 80152a2:	105b      	asrs	r3, r3, #1
 80152a4:	e7ee      	b.n	8015284 <__gethex+0x160>
 80152a6:	f100 0914 	add.w	r9, r0, #20
 80152aa:	f04f 0b00 	mov.w	fp, #0
 80152ae:	f1ca 0301 	rsb	r3, sl, #1
 80152b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80152b6:	f8cd b000 	str.w	fp, [sp]
 80152ba:	9306      	str	r3, [sp, #24]
 80152bc:	42b7      	cmp	r7, r6
 80152be:	d340      	bcc.n	8015342 <__gethex+0x21e>
 80152c0:	9802      	ldr	r0, [sp, #8]
 80152c2:	9b00      	ldr	r3, [sp, #0]
 80152c4:	f840 3b04 	str.w	r3, [r0], #4
 80152c8:	eba0 0009 	sub.w	r0, r0, r9
 80152cc:	1080      	asrs	r0, r0, #2
 80152ce:	0146      	lsls	r6, r0, #5
 80152d0:	6120      	str	r0, [r4, #16]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f000 fb8c 	bl	80159f0 <__hi0bits>
 80152d8:	1a30      	subs	r0, r6, r0
 80152da:	f8d8 6000 	ldr.w	r6, [r8]
 80152de:	42b0      	cmp	r0, r6
 80152e0:	dd63      	ble.n	80153aa <__gethex+0x286>
 80152e2:	1b87      	subs	r7, r0, r6
 80152e4:	4639      	mov	r1, r7
 80152e6:	4620      	mov	r0, r4
 80152e8:	f000 ff30 	bl	801614c <__any_on>
 80152ec:	4682      	mov	sl, r0
 80152ee:	b1a8      	cbz	r0, 801531c <__gethex+0x1f8>
 80152f0:	1e7b      	subs	r3, r7, #1
 80152f2:	1159      	asrs	r1, r3, #5
 80152f4:	f003 021f 	and.w	r2, r3, #31
 80152f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80152fc:	f04f 0a01 	mov.w	sl, #1
 8015300:	fa0a f202 	lsl.w	r2, sl, r2
 8015304:	420a      	tst	r2, r1
 8015306:	d009      	beq.n	801531c <__gethex+0x1f8>
 8015308:	4553      	cmp	r3, sl
 801530a:	dd05      	ble.n	8015318 <__gethex+0x1f4>
 801530c:	1eb9      	subs	r1, r7, #2
 801530e:	4620      	mov	r0, r4
 8015310:	f000 ff1c 	bl	801614c <__any_on>
 8015314:	2800      	cmp	r0, #0
 8015316:	d145      	bne.n	80153a4 <__gethex+0x280>
 8015318:	f04f 0a02 	mov.w	sl, #2
 801531c:	4639      	mov	r1, r7
 801531e:	4620      	mov	r0, r4
 8015320:	f7ff fe98 	bl	8015054 <rshift>
 8015324:	443d      	add	r5, r7
 8015326:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801532a:	42ab      	cmp	r3, r5
 801532c:	da4c      	bge.n	80153c8 <__gethex+0x2a4>
 801532e:	ee18 0a10 	vmov	r0, s16
 8015332:	4621      	mov	r1, r4
 8015334:	f000 faaa 	bl	801588c <_Bfree>
 8015338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801533a:	2300      	movs	r3, #0
 801533c:	6013      	str	r3, [r2, #0]
 801533e:	27a3      	movs	r7, #163	; 0xa3
 8015340:	e785      	b.n	801524e <__gethex+0x12a>
 8015342:	1e73      	subs	r3, r6, #1
 8015344:	9a05      	ldr	r2, [sp, #20]
 8015346:	9303      	str	r3, [sp, #12]
 8015348:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801534c:	4293      	cmp	r3, r2
 801534e:	d019      	beq.n	8015384 <__gethex+0x260>
 8015350:	f1bb 0f20 	cmp.w	fp, #32
 8015354:	d107      	bne.n	8015366 <__gethex+0x242>
 8015356:	9b02      	ldr	r3, [sp, #8]
 8015358:	9a00      	ldr	r2, [sp, #0]
 801535a:	f843 2b04 	str.w	r2, [r3], #4
 801535e:	9302      	str	r3, [sp, #8]
 8015360:	2300      	movs	r3, #0
 8015362:	9300      	str	r3, [sp, #0]
 8015364:	469b      	mov	fp, r3
 8015366:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801536a:	f7ff fec5 	bl	80150f8 <__hexdig_fun>
 801536e:	9b00      	ldr	r3, [sp, #0]
 8015370:	f000 000f 	and.w	r0, r0, #15
 8015374:	fa00 f00b 	lsl.w	r0, r0, fp
 8015378:	4303      	orrs	r3, r0
 801537a:	9300      	str	r3, [sp, #0]
 801537c:	f10b 0b04 	add.w	fp, fp, #4
 8015380:	9b03      	ldr	r3, [sp, #12]
 8015382:	e00d      	b.n	80153a0 <__gethex+0x27c>
 8015384:	9b03      	ldr	r3, [sp, #12]
 8015386:	9a06      	ldr	r2, [sp, #24]
 8015388:	4413      	add	r3, r2
 801538a:	42bb      	cmp	r3, r7
 801538c:	d3e0      	bcc.n	8015350 <__gethex+0x22c>
 801538e:	4618      	mov	r0, r3
 8015390:	9901      	ldr	r1, [sp, #4]
 8015392:	9307      	str	r3, [sp, #28]
 8015394:	4652      	mov	r2, sl
 8015396:	f001 fbfb 	bl	8016b90 <strncmp>
 801539a:	9b07      	ldr	r3, [sp, #28]
 801539c:	2800      	cmp	r0, #0
 801539e:	d1d7      	bne.n	8015350 <__gethex+0x22c>
 80153a0:	461e      	mov	r6, r3
 80153a2:	e78b      	b.n	80152bc <__gethex+0x198>
 80153a4:	f04f 0a03 	mov.w	sl, #3
 80153a8:	e7b8      	b.n	801531c <__gethex+0x1f8>
 80153aa:	da0a      	bge.n	80153c2 <__gethex+0x29e>
 80153ac:	1a37      	subs	r7, r6, r0
 80153ae:	4621      	mov	r1, r4
 80153b0:	ee18 0a10 	vmov	r0, s16
 80153b4:	463a      	mov	r2, r7
 80153b6:	f000 fc85 	bl	8015cc4 <__lshift>
 80153ba:	1bed      	subs	r5, r5, r7
 80153bc:	4604      	mov	r4, r0
 80153be:	f100 0914 	add.w	r9, r0, #20
 80153c2:	f04f 0a00 	mov.w	sl, #0
 80153c6:	e7ae      	b.n	8015326 <__gethex+0x202>
 80153c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80153cc:	42a8      	cmp	r0, r5
 80153ce:	dd72      	ble.n	80154b6 <__gethex+0x392>
 80153d0:	1b45      	subs	r5, r0, r5
 80153d2:	42ae      	cmp	r6, r5
 80153d4:	dc36      	bgt.n	8015444 <__gethex+0x320>
 80153d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d02a      	beq.n	8015434 <__gethex+0x310>
 80153de:	2b03      	cmp	r3, #3
 80153e0:	d02c      	beq.n	801543c <__gethex+0x318>
 80153e2:	2b01      	cmp	r3, #1
 80153e4:	d11c      	bne.n	8015420 <__gethex+0x2fc>
 80153e6:	42ae      	cmp	r6, r5
 80153e8:	d11a      	bne.n	8015420 <__gethex+0x2fc>
 80153ea:	2e01      	cmp	r6, #1
 80153ec:	d112      	bne.n	8015414 <__gethex+0x2f0>
 80153ee:	9a04      	ldr	r2, [sp, #16]
 80153f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80153f4:	6013      	str	r3, [r2, #0]
 80153f6:	2301      	movs	r3, #1
 80153f8:	6123      	str	r3, [r4, #16]
 80153fa:	f8c9 3000 	str.w	r3, [r9]
 80153fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015400:	2762      	movs	r7, #98	; 0x62
 8015402:	601c      	str	r4, [r3, #0]
 8015404:	e723      	b.n	801524e <__gethex+0x12a>
 8015406:	bf00      	nop
 8015408:	0801caf8 	.word	0x0801caf8
 801540c:	0801ca80 	.word	0x0801ca80
 8015410:	0801ca91 	.word	0x0801ca91
 8015414:	1e71      	subs	r1, r6, #1
 8015416:	4620      	mov	r0, r4
 8015418:	f000 fe98 	bl	801614c <__any_on>
 801541c:	2800      	cmp	r0, #0
 801541e:	d1e6      	bne.n	80153ee <__gethex+0x2ca>
 8015420:	ee18 0a10 	vmov	r0, s16
 8015424:	4621      	mov	r1, r4
 8015426:	f000 fa31 	bl	801588c <_Bfree>
 801542a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801542c:	2300      	movs	r3, #0
 801542e:	6013      	str	r3, [r2, #0]
 8015430:	2750      	movs	r7, #80	; 0x50
 8015432:	e70c      	b.n	801524e <__gethex+0x12a>
 8015434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015436:	2b00      	cmp	r3, #0
 8015438:	d1f2      	bne.n	8015420 <__gethex+0x2fc>
 801543a:	e7d8      	b.n	80153ee <__gethex+0x2ca>
 801543c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801543e:	2b00      	cmp	r3, #0
 8015440:	d1d5      	bne.n	80153ee <__gethex+0x2ca>
 8015442:	e7ed      	b.n	8015420 <__gethex+0x2fc>
 8015444:	1e6f      	subs	r7, r5, #1
 8015446:	f1ba 0f00 	cmp.w	sl, #0
 801544a:	d131      	bne.n	80154b0 <__gethex+0x38c>
 801544c:	b127      	cbz	r7, 8015458 <__gethex+0x334>
 801544e:	4639      	mov	r1, r7
 8015450:	4620      	mov	r0, r4
 8015452:	f000 fe7b 	bl	801614c <__any_on>
 8015456:	4682      	mov	sl, r0
 8015458:	117b      	asrs	r3, r7, #5
 801545a:	2101      	movs	r1, #1
 801545c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015460:	f007 071f 	and.w	r7, r7, #31
 8015464:	fa01 f707 	lsl.w	r7, r1, r7
 8015468:	421f      	tst	r7, r3
 801546a:	4629      	mov	r1, r5
 801546c:	4620      	mov	r0, r4
 801546e:	bf18      	it	ne
 8015470:	f04a 0a02 	orrne.w	sl, sl, #2
 8015474:	1b76      	subs	r6, r6, r5
 8015476:	f7ff fded 	bl	8015054 <rshift>
 801547a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801547e:	2702      	movs	r7, #2
 8015480:	f1ba 0f00 	cmp.w	sl, #0
 8015484:	d048      	beq.n	8015518 <__gethex+0x3f4>
 8015486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801548a:	2b02      	cmp	r3, #2
 801548c:	d015      	beq.n	80154ba <__gethex+0x396>
 801548e:	2b03      	cmp	r3, #3
 8015490:	d017      	beq.n	80154c2 <__gethex+0x39e>
 8015492:	2b01      	cmp	r3, #1
 8015494:	d109      	bne.n	80154aa <__gethex+0x386>
 8015496:	f01a 0f02 	tst.w	sl, #2
 801549a:	d006      	beq.n	80154aa <__gethex+0x386>
 801549c:	f8d9 0000 	ldr.w	r0, [r9]
 80154a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80154a4:	f01a 0f01 	tst.w	sl, #1
 80154a8:	d10e      	bne.n	80154c8 <__gethex+0x3a4>
 80154aa:	f047 0710 	orr.w	r7, r7, #16
 80154ae:	e033      	b.n	8015518 <__gethex+0x3f4>
 80154b0:	f04f 0a01 	mov.w	sl, #1
 80154b4:	e7d0      	b.n	8015458 <__gethex+0x334>
 80154b6:	2701      	movs	r7, #1
 80154b8:	e7e2      	b.n	8015480 <__gethex+0x35c>
 80154ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154bc:	f1c3 0301 	rsb	r3, r3, #1
 80154c0:	9315      	str	r3, [sp, #84]	; 0x54
 80154c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d0f0      	beq.n	80154aa <__gethex+0x386>
 80154c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80154cc:	f104 0314 	add.w	r3, r4, #20
 80154d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80154d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80154d8:	f04f 0c00 	mov.w	ip, #0
 80154dc:	4618      	mov	r0, r3
 80154de:	f853 2b04 	ldr.w	r2, [r3], #4
 80154e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80154e6:	d01c      	beq.n	8015522 <__gethex+0x3fe>
 80154e8:	3201      	adds	r2, #1
 80154ea:	6002      	str	r2, [r0, #0]
 80154ec:	2f02      	cmp	r7, #2
 80154ee:	f104 0314 	add.w	r3, r4, #20
 80154f2:	d13f      	bne.n	8015574 <__gethex+0x450>
 80154f4:	f8d8 2000 	ldr.w	r2, [r8]
 80154f8:	3a01      	subs	r2, #1
 80154fa:	42b2      	cmp	r2, r6
 80154fc:	d10a      	bne.n	8015514 <__gethex+0x3f0>
 80154fe:	1171      	asrs	r1, r6, #5
 8015500:	2201      	movs	r2, #1
 8015502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015506:	f006 061f 	and.w	r6, r6, #31
 801550a:	fa02 f606 	lsl.w	r6, r2, r6
 801550e:	421e      	tst	r6, r3
 8015510:	bf18      	it	ne
 8015512:	4617      	movne	r7, r2
 8015514:	f047 0720 	orr.w	r7, r7, #32
 8015518:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801551a:	601c      	str	r4, [r3, #0]
 801551c:	9b04      	ldr	r3, [sp, #16]
 801551e:	601d      	str	r5, [r3, #0]
 8015520:	e695      	b.n	801524e <__gethex+0x12a>
 8015522:	4299      	cmp	r1, r3
 8015524:	f843 cc04 	str.w	ip, [r3, #-4]
 8015528:	d8d8      	bhi.n	80154dc <__gethex+0x3b8>
 801552a:	68a3      	ldr	r3, [r4, #8]
 801552c:	459b      	cmp	fp, r3
 801552e:	db19      	blt.n	8015564 <__gethex+0x440>
 8015530:	6861      	ldr	r1, [r4, #4]
 8015532:	ee18 0a10 	vmov	r0, s16
 8015536:	3101      	adds	r1, #1
 8015538:	f000 f968 	bl	801580c <_Balloc>
 801553c:	4681      	mov	r9, r0
 801553e:	b918      	cbnz	r0, 8015548 <__gethex+0x424>
 8015540:	4b1a      	ldr	r3, [pc, #104]	; (80155ac <__gethex+0x488>)
 8015542:	4602      	mov	r2, r0
 8015544:	2184      	movs	r1, #132	; 0x84
 8015546:	e6a8      	b.n	801529a <__gethex+0x176>
 8015548:	6922      	ldr	r2, [r4, #16]
 801554a:	3202      	adds	r2, #2
 801554c:	f104 010c 	add.w	r1, r4, #12
 8015550:	0092      	lsls	r2, r2, #2
 8015552:	300c      	adds	r0, #12
 8015554:	f7fd fcea 	bl	8012f2c <memcpy>
 8015558:	4621      	mov	r1, r4
 801555a:	ee18 0a10 	vmov	r0, s16
 801555e:	f000 f995 	bl	801588c <_Bfree>
 8015562:	464c      	mov	r4, r9
 8015564:	6923      	ldr	r3, [r4, #16]
 8015566:	1c5a      	adds	r2, r3, #1
 8015568:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801556c:	6122      	str	r2, [r4, #16]
 801556e:	2201      	movs	r2, #1
 8015570:	615a      	str	r2, [r3, #20]
 8015572:	e7bb      	b.n	80154ec <__gethex+0x3c8>
 8015574:	6922      	ldr	r2, [r4, #16]
 8015576:	455a      	cmp	r2, fp
 8015578:	dd0b      	ble.n	8015592 <__gethex+0x46e>
 801557a:	2101      	movs	r1, #1
 801557c:	4620      	mov	r0, r4
 801557e:	f7ff fd69 	bl	8015054 <rshift>
 8015582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015586:	3501      	adds	r5, #1
 8015588:	42ab      	cmp	r3, r5
 801558a:	f6ff aed0 	blt.w	801532e <__gethex+0x20a>
 801558e:	2701      	movs	r7, #1
 8015590:	e7c0      	b.n	8015514 <__gethex+0x3f0>
 8015592:	f016 061f 	ands.w	r6, r6, #31
 8015596:	d0fa      	beq.n	801558e <__gethex+0x46a>
 8015598:	4453      	add	r3, sl
 801559a:	f1c6 0620 	rsb	r6, r6, #32
 801559e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80155a2:	f000 fa25 	bl	80159f0 <__hi0bits>
 80155a6:	42b0      	cmp	r0, r6
 80155a8:	dbe7      	blt.n	801557a <__gethex+0x456>
 80155aa:	e7f0      	b.n	801558e <__gethex+0x46a>
 80155ac:	0801ca80 	.word	0x0801ca80

080155b0 <L_shift>:
 80155b0:	f1c2 0208 	rsb	r2, r2, #8
 80155b4:	0092      	lsls	r2, r2, #2
 80155b6:	b570      	push	{r4, r5, r6, lr}
 80155b8:	f1c2 0620 	rsb	r6, r2, #32
 80155bc:	6843      	ldr	r3, [r0, #4]
 80155be:	6804      	ldr	r4, [r0, #0]
 80155c0:	fa03 f506 	lsl.w	r5, r3, r6
 80155c4:	432c      	orrs	r4, r5
 80155c6:	40d3      	lsrs	r3, r2
 80155c8:	6004      	str	r4, [r0, #0]
 80155ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80155ce:	4288      	cmp	r0, r1
 80155d0:	d3f4      	bcc.n	80155bc <L_shift+0xc>
 80155d2:	bd70      	pop	{r4, r5, r6, pc}

080155d4 <__match>:
 80155d4:	b530      	push	{r4, r5, lr}
 80155d6:	6803      	ldr	r3, [r0, #0]
 80155d8:	3301      	adds	r3, #1
 80155da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155de:	b914      	cbnz	r4, 80155e6 <__match+0x12>
 80155e0:	6003      	str	r3, [r0, #0]
 80155e2:	2001      	movs	r0, #1
 80155e4:	bd30      	pop	{r4, r5, pc}
 80155e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80155ee:	2d19      	cmp	r5, #25
 80155f0:	bf98      	it	ls
 80155f2:	3220      	addls	r2, #32
 80155f4:	42a2      	cmp	r2, r4
 80155f6:	d0f0      	beq.n	80155da <__match+0x6>
 80155f8:	2000      	movs	r0, #0
 80155fa:	e7f3      	b.n	80155e4 <__match+0x10>

080155fc <__hexnan>:
 80155fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015600:	680b      	ldr	r3, [r1, #0]
 8015602:	115e      	asrs	r6, r3, #5
 8015604:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015608:	f013 031f 	ands.w	r3, r3, #31
 801560c:	b087      	sub	sp, #28
 801560e:	bf18      	it	ne
 8015610:	3604      	addne	r6, #4
 8015612:	2500      	movs	r5, #0
 8015614:	1f37      	subs	r7, r6, #4
 8015616:	4690      	mov	r8, r2
 8015618:	6802      	ldr	r2, [r0, #0]
 801561a:	9301      	str	r3, [sp, #4]
 801561c:	4682      	mov	sl, r0
 801561e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015622:	46b9      	mov	r9, r7
 8015624:	463c      	mov	r4, r7
 8015626:	9502      	str	r5, [sp, #8]
 8015628:	46ab      	mov	fp, r5
 801562a:	7851      	ldrb	r1, [r2, #1]
 801562c:	1c53      	adds	r3, r2, #1
 801562e:	9303      	str	r3, [sp, #12]
 8015630:	b341      	cbz	r1, 8015684 <__hexnan+0x88>
 8015632:	4608      	mov	r0, r1
 8015634:	9205      	str	r2, [sp, #20]
 8015636:	9104      	str	r1, [sp, #16]
 8015638:	f7ff fd5e 	bl	80150f8 <__hexdig_fun>
 801563c:	2800      	cmp	r0, #0
 801563e:	d14f      	bne.n	80156e0 <__hexnan+0xe4>
 8015640:	9904      	ldr	r1, [sp, #16]
 8015642:	9a05      	ldr	r2, [sp, #20]
 8015644:	2920      	cmp	r1, #32
 8015646:	d818      	bhi.n	801567a <__hexnan+0x7e>
 8015648:	9b02      	ldr	r3, [sp, #8]
 801564a:	459b      	cmp	fp, r3
 801564c:	dd13      	ble.n	8015676 <__hexnan+0x7a>
 801564e:	454c      	cmp	r4, r9
 8015650:	d206      	bcs.n	8015660 <__hexnan+0x64>
 8015652:	2d07      	cmp	r5, #7
 8015654:	dc04      	bgt.n	8015660 <__hexnan+0x64>
 8015656:	462a      	mov	r2, r5
 8015658:	4649      	mov	r1, r9
 801565a:	4620      	mov	r0, r4
 801565c:	f7ff ffa8 	bl	80155b0 <L_shift>
 8015660:	4544      	cmp	r4, r8
 8015662:	d950      	bls.n	8015706 <__hexnan+0x10a>
 8015664:	2300      	movs	r3, #0
 8015666:	f1a4 0904 	sub.w	r9, r4, #4
 801566a:	f844 3c04 	str.w	r3, [r4, #-4]
 801566e:	f8cd b008 	str.w	fp, [sp, #8]
 8015672:	464c      	mov	r4, r9
 8015674:	461d      	mov	r5, r3
 8015676:	9a03      	ldr	r2, [sp, #12]
 8015678:	e7d7      	b.n	801562a <__hexnan+0x2e>
 801567a:	2929      	cmp	r1, #41	; 0x29
 801567c:	d156      	bne.n	801572c <__hexnan+0x130>
 801567e:	3202      	adds	r2, #2
 8015680:	f8ca 2000 	str.w	r2, [sl]
 8015684:	f1bb 0f00 	cmp.w	fp, #0
 8015688:	d050      	beq.n	801572c <__hexnan+0x130>
 801568a:	454c      	cmp	r4, r9
 801568c:	d206      	bcs.n	801569c <__hexnan+0xa0>
 801568e:	2d07      	cmp	r5, #7
 8015690:	dc04      	bgt.n	801569c <__hexnan+0xa0>
 8015692:	462a      	mov	r2, r5
 8015694:	4649      	mov	r1, r9
 8015696:	4620      	mov	r0, r4
 8015698:	f7ff ff8a 	bl	80155b0 <L_shift>
 801569c:	4544      	cmp	r4, r8
 801569e:	d934      	bls.n	801570a <__hexnan+0x10e>
 80156a0:	f1a8 0204 	sub.w	r2, r8, #4
 80156a4:	4623      	mov	r3, r4
 80156a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80156aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80156ae:	429f      	cmp	r7, r3
 80156b0:	d2f9      	bcs.n	80156a6 <__hexnan+0xaa>
 80156b2:	1b3b      	subs	r3, r7, r4
 80156b4:	f023 0303 	bic.w	r3, r3, #3
 80156b8:	3304      	adds	r3, #4
 80156ba:	3401      	adds	r4, #1
 80156bc:	3e03      	subs	r6, #3
 80156be:	42b4      	cmp	r4, r6
 80156c0:	bf88      	it	hi
 80156c2:	2304      	movhi	r3, #4
 80156c4:	4443      	add	r3, r8
 80156c6:	2200      	movs	r2, #0
 80156c8:	f843 2b04 	str.w	r2, [r3], #4
 80156cc:	429f      	cmp	r7, r3
 80156ce:	d2fb      	bcs.n	80156c8 <__hexnan+0xcc>
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	b91b      	cbnz	r3, 80156dc <__hexnan+0xe0>
 80156d4:	4547      	cmp	r7, r8
 80156d6:	d127      	bne.n	8015728 <__hexnan+0x12c>
 80156d8:	2301      	movs	r3, #1
 80156da:	603b      	str	r3, [r7, #0]
 80156dc:	2005      	movs	r0, #5
 80156de:	e026      	b.n	801572e <__hexnan+0x132>
 80156e0:	3501      	adds	r5, #1
 80156e2:	2d08      	cmp	r5, #8
 80156e4:	f10b 0b01 	add.w	fp, fp, #1
 80156e8:	dd06      	ble.n	80156f8 <__hexnan+0xfc>
 80156ea:	4544      	cmp	r4, r8
 80156ec:	d9c3      	bls.n	8015676 <__hexnan+0x7a>
 80156ee:	2300      	movs	r3, #0
 80156f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80156f4:	2501      	movs	r5, #1
 80156f6:	3c04      	subs	r4, #4
 80156f8:	6822      	ldr	r2, [r4, #0]
 80156fa:	f000 000f 	and.w	r0, r0, #15
 80156fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015702:	6022      	str	r2, [r4, #0]
 8015704:	e7b7      	b.n	8015676 <__hexnan+0x7a>
 8015706:	2508      	movs	r5, #8
 8015708:	e7b5      	b.n	8015676 <__hexnan+0x7a>
 801570a:	9b01      	ldr	r3, [sp, #4]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d0df      	beq.n	80156d0 <__hexnan+0xd4>
 8015710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015714:	f1c3 0320 	rsb	r3, r3, #32
 8015718:	fa22 f303 	lsr.w	r3, r2, r3
 801571c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015720:	401a      	ands	r2, r3
 8015722:	f846 2c04 	str.w	r2, [r6, #-4]
 8015726:	e7d3      	b.n	80156d0 <__hexnan+0xd4>
 8015728:	3f04      	subs	r7, #4
 801572a:	e7d1      	b.n	80156d0 <__hexnan+0xd4>
 801572c:	2004      	movs	r0, #4
 801572e:	b007      	add	sp, #28
 8015730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015734 <_gettimeofday_r>:
 8015734:	b538      	push	{r3, r4, r5, lr}
 8015736:	4d07      	ldr	r5, [pc, #28]	; (8015754 <_gettimeofday_r+0x20>)
 8015738:	2300      	movs	r3, #0
 801573a:	4604      	mov	r4, r0
 801573c:	4608      	mov	r0, r1
 801573e:	4611      	mov	r1, r2
 8015740:	602b      	str	r3, [r5, #0]
 8015742:	f001 fb67 	bl	8016e14 <_gettimeofday>
 8015746:	1c43      	adds	r3, r0, #1
 8015748:	d102      	bne.n	8015750 <_gettimeofday_r+0x1c>
 801574a:	682b      	ldr	r3, [r5, #0]
 801574c:	b103      	cbz	r3, 8015750 <_gettimeofday_r+0x1c>
 801574e:	6023      	str	r3, [r4, #0]
 8015750:	bd38      	pop	{r3, r4, r5, pc}
 8015752:	bf00      	nop
 8015754:	20003e80 	.word	0x20003e80

08015758 <_isatty_r>:
 8015758:	b538      	push	{r3, r4, r5, lr}
 801575a:	4d06      	ldr	r5, [pc, #24]	; (8015774 <_isatty_r+0x1c>)
 801575c:	2300      	movs	r3, #0
 801575e:	4604      	mov	r4, r0
 8015760:	4608      	mov	r0, r1
 8015762:	602b      	str	r3, [r5, #0]
 8015764:	f7ec f82f 	bl	80017c6 <_isatty>
 8015768:	1c43      	adds	r3, r0, #1
 801576a:	d102      	bne.n	8015772 <_isatty_r+0x1a>
 801576c:	682b      	ldr	r3, [r5, #0]
 801576e:	b103      	cbz	r3, 8015772 <_isatty_r+0x1a>
 8015770:	6023      	str	r3, [r4, #0]
 8015772:	bd38      	pop	{r3, r4, r5, pc}
 8015774:	20003e80 	.word	0x20003e80

08015778 <_lseek_r>:
 8015778:	b538      	push	{r3, r4, r5, lr}
 801577a:	4d07      	ldr	r5, [pc, #28]	; (8015798 <_lseek_r+0x20>)
 801577c:	4604      	mov	r4, r0
 801577e:	4608      	mov	r0, r1
 8015780:	4611      	mov	r1, r2
 8015782:	2200      	movs	r2, #0
 8015784:	602a      	str	r2, [r5, #0]
 8015786:	461a      	mov	r2, r3
 8015788:	f7ec f828 	bl	80017dc <_lseek>
 801578c:	1c43      	adds	r3, r0, #1
 801578e:	d102      	bne.n	8015796 <_lseek_r+0x1e>
 8015790:	682b      	ldr	r3, [r5, #0]
 8015792:	b103      	cbz	r3, 8015796 <_lseek_r+0x1e>
 8015794:	6023      	str	r3, [r4, #0]
 8015796:	bd38      	pop	{r3, r4, r5, pc}
 8015798:	20003e80 	.word	0x20003e80

0801579c <__ascii_mbtowc>:
 801579c:	b082      	sub	sp, #8
 801579e:	b901      	cbnz	r1, 80157a2 <__ascii_mbtowc+0x6>
 80157a0:	a901      	add	r1, sp, #4
 80157a2:	b142      	cbz	r2, 80157b6 <__ascii_mbtowc+0x1a>
 80157a4:	b14b      	cbz	r3, 80157ba <__ascii_mbtowc+0x1e>
 80157a6:	7813      	ldrb	r3, [r2, #0]
 80157a8:	600b      	str	r3, [r1, #0]
 80157aa:	7812      	ldrb	r2, [r2, #0]
 80157ac:	1e10      	subs	r0, r2, #0
 80157ae:	bf18      	it	ne
 80157b0:	2001      	movne	r0, #1
 80157b2:	b002      	add	sp, #8
 80157b4:	4770      	bx	lr
 80157b6:	4610      	mov	r0, r2
 80157b8:	e7fb      	b.n	80157b2 <__ascii_mbtowc+0x16>
 80157ba:	f06f 0001 	mvn.w	r0, #1
 80157be:	e7f8      	b.n	80157b2 <__ascii_mbtowc+0x16>

080157c0 <memmove>:
 80157c0:	4288      	cmp	r0, r1
 80157c2:	b510      	push	{r4, lr}
 80157c4:	eb01 0402 	add.w	r4, r1, r2
 80157c8:	d902      	bls.n	80157d0 <memmove+0x10>
 80157ca:	4284      	cmp	r4, r0
 80157cc:	4623      	mov	r3, r4
 80157ce:	d807      	bhi.n	80157e0 <memmove+0x20>
 80157d0:	1e43      	subs	r3, r0, #1
 80157d2:	42a1      	cmp	r1, r4
 80157d4:	d008      	beq.n	80157e8 <memmove+0x28>
 80157d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157de:	e7f8      	b.n	80157d2 <memmove+0x12>
 80157e0:	4402      	add	r2, r0
 80157e2:	4601      	mov	r1, r0
 80157e4:	428a      	cmp	r2, r1
 80157e6:	d100      	bne.n	80157ea <memmove+0x2a>
 80157e8:	bd10      	pop	{r4, pc}
 80157ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80157f2:	e7f7      	b.n	80157e4 <memmove+0x24>

080157f4 <__malloc_lock>:
 80157f4:	4801      	ldr	r0, [pc, #4]	; (80157fc <__malloc_lock+0x8>)
 80157f6:	f7fd bb12 	b.w	8012e1e <__retarget_lock_acquire_recursive>
 80157fa:	bf00      	nop
 80157fc:	20003e74 	.word	0x20003e74

08015800 <__malloc_unlock>:
 8015800:	4801      	ldr	r0, [pc, #4]	; (8015808 <__malloc_unlock+0x8>)
 8015802:	f7fd bb0d 	b.w	8012e20 <__retarget_lock_release_recursive>
 8015806:	bf00      	nop
 8015808:	20003e74 	.word	0x20003e74

0801580c <_Balloc>:
 801580c:	b570      	push	{r4, r5, r6, lr}
 801580e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015810:	4604      	mov	r4, r0
 8015812:	460d      	mov	r5, r1
 8015814:	b976      	cbnz	r6, 8015834 <_Balloc+0x28>
 8015816:	2010      	movs	r0, #16
 8015818:	f7fd fb68 	bl	8012eec <malloc>
 801581c:	4602      	mov	r2, r0
 801581e:	6260      	str	r0, [r4, #36]	; 0x24
 8015820:	b920      	cbnz	r0, 801582c <_Balloc+0x20>
 8015822:	4b18      	ldr	r3, [pc, #96]	; (8015884 <_Balloc+0x78>)
 8015824:	4818      	ldr	r0, [pc, #96]	; (8015888 <_Balloc+0x7c>)
 8015826:	2166      	movs	r1, #102	; 0x66
 8015828:	f001 fa82 	bl	8016d30 <__assert_func>
 801582c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015830:	6006      	str	r6, [r0, #0]
 8015832:	60c6      	str	r6, [r0, #12]
 8015834:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015836:	68f3      	ldr	r3, [r6, #12]
 8015838:	b183      	cbz	r3, 801585c <_Balloc+0x50>
 801583a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015842:	b9b8      	cbnz	r0, 8015874 <_Balloc+0x68>
 8015844:	2101      	movs	r1, #1
 8015846:	fa01 f605 	lsl.w	r6, r1, r5
 801584a:	1d72      	adds	r2, r6, #5
 801584c:	0092      	lsls	r2, r2, #2
 801584e:	4620      	mov	r0, r4
 8015850:	f7fd fb82 	bl	8012f58 <_calloc_r>
 8015854:	b160      	cbz	r0, 8015870 <_Balloc+0x64>
 8015856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801585a:	e00e      	b.n	801587a <_Balloc+0x6e>
 801585c:	2221      	movs	r2, #33	; 0x21
 801585e:	2104      	movs	r1, #4
 8015860:	4620      	mov	r0, r4
 8015862:	f7fd fb79 	bl	8012f58 <_calloc_r>
 8015866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015868:	60f0      	str	r0, [r6, #12]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d1e4      	bne.n	801583a <_Balloc+0x2e>
 8015870:	2000      	movs	r0, #0
 8015872:	bd70      	pop	{r4, r5, r6, pc}
 8015874:	6802      	ldr	r2, [r0, #0]
 8015876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801587a:	2300      	movs	r3, #0
 801587c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015880:	e7f7      	b.n	8015872 <_Balloc+0x66>
 8015882:	bf00      	nop
 8015884:	0801cb0c 	.word	0x0801cb0c
 8015888:	0801cb23 	.word	0x0801cb23

0801588c <_Bfree>:
 801588c:	b570      	push	{r4, r5, r6, lr}
 801588e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015890:	4605      	mov	r5, r0
 8015892:	460c      	mov	r4, r1
 8015894:	b976      	cbnz	r6, 80158b4 <_Bfree+0x28>
 8015896:	2010      	movs	r0, #16
 8015898:	f7fd fb28 	bl	8012eec <malloc>
 801589c:	4602      	mov	r2, r0
 801589e:	6268      	str	r0, [r5, #36]	; 0x24
 80158a0:	b920      	cbnz	r0, 80158ac <_Bfree+0x20>
 80158a2:	4b09      	ldr	r3, [pc, #36]	; (80158c8 <_Bfree+0x3c>)
 80158a4:	4809      	ldr	r0, [pc, #36]	; (80158cc <_Bfree+0x40>)
 80158a6:	218a      	movs	r1, #138	; 0x8a
 80158a8:	f001 fa42 	bl	8016d30 <__assert_func>
 80158ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80158b0:	6006      	str	r6, [r0, #0]
 80158b2:	60c6      	str	r6, [r0, #12]
 80158b4:	b13c      	cbz	r4, 80158c6 <_Bfree+0x3a>
 80158b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80158b8:	6862      	ldr	r2, [r4, #4]
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80158c0:	6021      	str	r1, [r4, #0]
 80158c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80158c6:	bd70      	pop	{r4, r5, r6, pc}
 80158c8:	0801cb0c 	.word	0x0801cb0c
 80158cc:	0801cb23 	.word	0x0801cb23

080158d0 <__multadd>:
 80158d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d4:	690d      	ldr	r5, [r1, #16]
 80158d6:	4607      	mov	r7, r0
 80158d8:	460c      	mov	r4, r1
 80158da:	461e      	mov	r6, r3
 80158dc:	f101 0c14 	add.w	ip, r1, #20
 80158e0:	2000      	movs	r0, #0
 80158e2:	f8dc 3000 	ldr.w	r3, [ip]
 80158e6:	b299      	uxth	r1, r3
 80158e8:	fb02 6101 	mla	r1, r2, r1, r6
 80158ec:	0c1e      	lsrs	r6, r3, #16
 80158ee:	0c0b      	lsrs	r3, r1, #16
 80158f0:	fb02 3306 	mla	r3, r2, r6, r3
 80158f4:	b289      	uxth	r1, r1
 80158f6:	3001      	adds	r0, #1
 80158f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80158fc:	4285      	cmp	r5, r0
 80158fe:	f84c 1b04 	str.w	r1, [ip], #4
 8015902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015906:	dcec      	bgt.n	80158e2 <__multadd+0x12>
 8015908:	b30e      	cbz	r6, 801594e <__multadd+0x7e>
 801590a:	68a3      	ldr	r3, [r4, #8]
 801590c:	42ab      	cmp	r3, r5
 801590e:	dc19      	bgt.n	8015944 <__multadd+0x74>
 8015910:	6861      	ldr	r1, [r4, #4]
 8015912:	4638      	mov	r0, r7
 8015914:	3101      	adds	r1, #1
 8015916:	f7ff ff79 	bl	801580c <_Balloc>
 801591a:	4680      	mov	r8, r0
 801591c:	b928      	cbnz	r0, 801592a <__multadd+0x5a>
 801591e:	4602      	mov	r2, r0
 8015920:	4b0c      	ldr	r3, [pc, #48]	; (8015954 <__multadd+0x84>)
 8015922:	480d      	ldr	r0, [pc, #52]	; (8015958 <__multadd+0x88>)
 8015924:	21b5      	movs	r1, #181	; 0xb5
 8015926:	f001 fa03 	bl	8016d30 <__assert_func>
 801592a:	6922      	ldr	r2, [r4, #16]
 801592c:	3202      	adds	r2, #2
 801592e:	f104 010c 	add.w	r1, r4, #12
 8015932:	0092      	lsls	r2, r2, #2
 8015934:	300c      	adds	r0, #12
 8015936:	f7fd faf9 	bl	8012f2c <memcpy>
 801593a:	4621      	mov	r1, r4
 801593c:	4638      	mov	r0, r7
 801593e:	f7ff ffa5 	bl	801588c <_Bfree>
 8015942:	4644      	mov	r4, r8
 8015944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015948:	3501      	adds	r5, #1
 801594a:	615e      	str	r6, [r3, #20]
 801594c:	6125      	str	r5, [r4, #16]
 801594e:	4620      	mov	r0, r4
 8015950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015954:	0801ca80 	.word	0x0801ca80
 8015958:	0801cb23 	.word	0x0801cb23

0801595c <__s2b>:
 801595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015960:	460c      	mov	r4, r1
 8015962:	4615      	mov	r5, r2
 8015964:	461f      	mov	r7, r3
 8015966:	2209      	movs	r2, #9
 8015968:	3308      	adds	r3, #8
 801596a:	4606      	mov	r6, r0
 801596c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015970:	2100      	movs	r1, #0
 8015972:	2201      	movs	r2, #1
 8015974:	429a      	cmp	r2, r3
 8015976:	db09      	blt.n	801598c <__s2b+0x30>
 8015978:	4630      	mov	r0, r6
 801597a:	f7ff ff47 	bl	801580c <_Balloc>
 801597e:	b940      	cbnz	r0, 8015992 <__s2b+0x36>
 8015980:	4602      	mov	r2, r0
 8015982:	4b19      	ldr	r3, [pc, #100]	; (80159e8 <__s2b+0x8c>)
 8015984:	4819      	ldr	r0, [pc, #100]	; (80159ec <__s2b+0x90>)
 8015986:	21ce      	movs	r1, #206	; 0xce
 8015988:	f001 f9d2 	bl	8016d30 <__assert_func>
 801598c:	0052      	lsls	r2, r2, #1
 801598e:	3101      	adds	r1, #1
 8015990:	e7f0      	b.n	8015974 <__s2b+0x18>
 8015992:	9b08      	ldr	r3, [sp, #32]
 8015994:	6143      	str	r3, [r0, #20]
 8015996:	2d09      	cmp	r5, #9
 8015998:	f04f 0301 	mov.w	r3, #1
 801599c:	6103      	str	r3, [r0, #16]
 801599e:	dd16      	ble.n	80159ce <__s2b+0x72>
 80159a0:	f104 0909 	add.w	r9, r4, #9
 80159a4:	46c8      	mov	r8, r9
 80159a6:	442c      	add	r4, r5
 80159a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80159ac:	4601      	mov	r1, r0
 80159ae:	3b30      	subs	r3, #48	; 0x30
 80159b0:	220a      	movs	r2, #10
 80159b2:	4630      	mov	r0, r6
 80159b4:	f7ff ff8c 	bl	80158d0 <__multadd>
 80159b8:	45a0      	cmp	r8, r4
 80159ba:	d1f5      	bne.n	80159a8 <__s2b+0x4c>
 80159bc:	f1a5 0408 	sub.w	r4, r5, #8
 80159c0:	444c      	add	r4, r9
 80159c2:	1b2d      	subs	r5, r5, r4
 80159c4:	1963      	adds	r3, r4, r5
 80159c6:	42bb      	cmp	r3, r7
 80159c8:	db04      	blt.n	80159d4 <__s2b+0x78>
 80159ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ce:	340a      	adds	r4, #10
 80159d0:	2509      	movs	r5, #9
 80159d2:	e7f6      	b.n	80159c2 <__s2b+0x66>
 80159d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80159d8:	4601      	mov	r1, r0
 80159da:	3b30      	subs	r3, #48	; 0x30
 80159dc:	220a      	movs	r2, #10
 80159de:	4630      	mov	r0, r6
 80159e0:	f7ff ff76 	bl	80158d0 <__multadd>
 80159e4:	e7ee      	b.n	80159c4 <__s2b+0x68>
 80159e6:	bf00      	nop
 80159e8:	0801ca80 	.word	0x0801ca80
 80159ec:	0801cb23 	.word	0x0801cb23

080159f0 <__hi0bits>:
 80159f0:	0c03      	lsrs	r3, r0, #16
 80159f2:	041b      	lsls	r3, r3, #16
 80159f4:	b9d3      	cbnz	r3, 8015a2c <__hi0bits+0x3c>
 80159f6:	0400      	lsls	r0, r0, #16
 80159f8:	2310      	movs	r3, #16
 80159fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80159fe:	bf04      	itt	eq
 8015a00:	0200      	lsleq	r0, r0, #8
 8015a02:	3308      	addeq	r3, #8
 8015a04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015a08:	bf04      	itt	eq
 8015a0a:	0100      	lsleq	r0, r0, #4
 8015a0c:	3304      	addeq	r3, #4
 8015a0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015a12:	bf04      	itt	eq
 8015a14:	0080      	lsleq	r0, r0, #2
 8015a16:	3302      	addeq	r3, #2
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	db05      	blt.n	8015a28 <__hi0bits+0x38>
 8015a1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015a20:	f103 0301 	add.w	r3, r3, #1
 8015a24:	bf08      	it	eq
 8015a26:	2320      	moveq	r3, #32
 8015a28:	4618      	mov	r0, r3
 8015a2a:	4770      	bx	lr
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	e7e4      	b.n	80159fa <__hi0bits+0xa>

08015a30 <__lo0bits>:
 8015a30:	6803      	ldr	r3, [r0, #0]
 8015a32:	f013 0207 	ands.w	r2, r3, #7
 8015a36:	4601      	mov	r1, r0
 8015a38:	d00b      	beq.n	8015a52 <__lo0bits+0x22>
 8015a3a:	07da      	lsls	r2, r3, #31
 8015a3c:	d423      	bmi.n	8015a86 <__lo0bits+0x56>
 8015a3e:	0798      	lsls	r0, r3, #30
 8015a40:	bf49      	itett	mi
 8015a42:	085b      	lsrmi	r3, r3, #1
 8015a44:	089b      	lsrpl	r3, r3, #2
 8015a46:	2001      	movmi	r0, #1
 8015a48:	600b      	strmi	r3, [r1, #0]
 8015a4a:	bf5c      	itt	pl
 8015a4c:	600b      	strpl	r3, [r1, #0]
 8015a4e:	2002      	movpl	r0, #2
 8015a50:	4770      	bx	lr
 8015a52:	b298      	uxth	r0, r3
 8015a54:	b9a8      	cbnz	r0, 8015a82 <__lo0bits+0x52>
 8015a56:	0c1b      	lsrs	r3, r3, #16
 8015a58:	2010      	movs	r0, #16
 8015a5a:	b2da      	uxtb	r2, r3
 8015a5c:	b90a      	cbnz	r2, 8015a62 <__lo0bits+0x32>
 8015a5e:	3008      	adds	r0, #8
 8015a60:	0a1b      	lsrs	r3, r3, #8
 8015a62:	071a      	lsls	r2, r3, #28
 8015a64:	bf04      	itt	eq
 8015a66:	091b      	lsreq	r3, r3, #4
 8015a68:	3004      	addeq	r0, #4
 8015a6a:	079a      	lsls	r2, r3, #30
 8015a6c:	bf04      	itt	eq
 8015a6e:	089b      	lsreq	r3, r3, #2
 8015a70:	3002      	addeq	r0, #2
 8015a72:	07da      	lsls	r2, r3, #31
 8015a74:	d403      	bmi.n	8015a7e <__lo0bits+0x4e>
 8015a76:	085b      	lsrs	r3, r3, #1
 8015a78:	f100 0001 	add.w	r0, r0, #1
 8015a7c:	d005      	beq.n	8015a8a <__lo0bits+0x5a>
 8015a7e:	600b      	str	r3, [r1, #0]
 8015a80:	4770      	bx	lr
 8015a82:	4610      	mov	r0, r2
 8015a84:	e7e9      	b.n	8015a5a <__lo0bits+0x2a>
 8015a86:	2000      	movs	r0, #0
 8015a88:	4770      	bx	lr
 8015a8a:	2020      	movs	r0, #32
 8015a8c:	4770      	bx	lr
	...

08015a90 <__i2b>:
 8015a90:	b510      	push	{r4, lr}
 8015a92:	460c      	mov	r4, r1
 8015a94:	2101      	movs	r1, #1
 8015a96:	f7ff feb9 	bl	801580c <_Balloc>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	b928      	cbnz	r0, 8015aaa <__i2b+0x1a>
 8015a9e:	4b05      	ldr	r3, [pc, #20]	; (8015ab4 <__i2b+0x24>)
 8015aa0:	4805      	ldr	r0, [pc, #20]	; (8015ab8 <__i2b+0x28>)
 8015aa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015aa6:	f001 f943 	bl	8016d30 <__assert_func>
 8015aaa:	2301      	movs	r3, #1
 8015aac:	6144      	str	r4, [r0, #20]
 8015aae:	6103      	str	r3, [r0, #16]
 8015ab0:	bd10      	pop	{r4, pc}
 8015ab2:	bf00      	nop
 8015ab4:	0801ca80 	.word	0x0801ca80
 8015ab8:	0801cb23 	.word	0x0801cb23

08015abc <__multiply>:
 8015abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac0:	4691      	mov	r9, r2
 8015ac2:	690a      	ldr	r2, [r1, #16]
 8015ac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	bfb8      	it	lt
 8015acc:	460b      	movlt	r3, r1
 8015ace:	460c      	mov	r4, r1
 8015ad0:	bfbc      	itt	lt
 8015ad2:	464c      	movlt	r4, r9
 8015ad4:	4699      	movlt	r9, r3
 8015ad6:	6927      	ldr	r7, [r4, #16]
 8015ad8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015adc:	68a3      	ldr	r3, [r4, #8]
 8015ade:	6861      	ldr	r1, [r4, #4]
 8015ae0:	eb07 060a 	add.w	r6, r7, sl
 8015ae4:	42b3      	cmp	r3, r6
 8015ae6:	b085      	sub	sp, #20
 8015ae8:	bfb8      	it	lt
 8015aea:	3101      	addlt	r1, #1
 8015aec:	f7ff fe8e 	bl	801580c <_Balloc>
 8015af0:	b930      	cbnz	r0, 8015b00 <__multiply+0x44>
 8015af2:	4602      	mov	r2, r0
 8015af4:	4b44      	ldr	r3, [pc, #272]	; (8015c08 <__multiply+0x14c>)
 8015af6:	4845      	ldr	r0, [pc, #276]	; (8015c0c <__multiply+0x150>)
 8015af8:	f240 115d 	movw	r1, #349	; 0x15d
 8015afc:	f001 f918 	bl	8016d30 <__assert_func>
 8015b00:	f100 0514 	add.w	r5, r0, #20
 8015b04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015b08:	462b      	mov	r3, r5
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	4543      	cmp	r3, r8
 8015b0e:	d321      	bcc.n	8015b54 <__multiply+0x98>
 8015b10:	f104 0314 	add.w	r3, r4, #20
 8015b14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015b18:	f109 0314 	add.w	r3, r9, #20
 8015b1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015b20:	9202      	str	r2, [sp, #8]
 8015b22:	1b3a      	subs	r2, r7, r4
 8015b24:	3a15      	subs	r2, #21
 8015b26:	f022 0203 	bic.w	r2, r2, #3
 8015b2a:	3204      	adds	r2, #4
 8015b2c:	f104 0115 	add.w	r1, r4, #21
 8015b30:	428f      	cmp	r7, r1
 8015b32:	bf38      	it	cc
 8015b34:	2204      	movcc	r2, #4
 8015b36:	9201      	str	r2, [sp, #4]
 8015b38:	9a02      	ldr	r2, [sp, #8]
 8015b3a:	9303      	str	r3, [sp, #12]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d80c      	bhi.n	8015b5a <__multiply+0x9e>
 8015b40:	2e00      	cmp	r6, #0
 8015b42:	dd03      	ble.n	8015b4c <__multiply+0x90>
 8015b44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d05a      	beq.n	8015c02 <__multiply+0x146>
 8015b4c:	6106      	str	r6, [r0, #16]
 8015b4e:	b005      	add	sp, #20
 8015b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b54:	f843 2b04 	str.w	r2, [r3], #4
 8015b58:	e7d8      	b.n	8015b0c <__multiply+0x50>
 8015b5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8015b5e:	f1ba 0f00 	cmp.w	sl, #0
 8015b62:	d024      	beq.n	8015bae <__multiply+0xf2>
 8015b64:	f104 0e14 	add.w	lr, r4, #20
 8015b68:	46a9      	mov	r9, r5
 8015b6a:	f04f 0c00 	mov.w	ip, #0
 8015b6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015b72:	f8d9 1000 	ldr.w	r1, [r9]
 8015b76:	fa1f fb82 	uxth.w	fp, r2
 8015b7a:	b289      	uxth	r1, r1
 8015b7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015b80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015b84:	f8d9 2000 	ldr.w	r2, [r9]
 8015b88:	4461      	add	r1, ip
 8015b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015b8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015b92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015b96:	b289      	uxth	r1, r1
 8015b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015b9c:	4577      	cmp	r7, lr
 8015b9e:	f849 1b04 	str.w	r1, [r9], #4
 8015ba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015ba6:	d8e2      	bhi.n	8015b6e <__multiply+0xb2>
 8015ba8:	9a01      	ldr	r2, [sp, #4]
 8015baa:	f845 c002 	str.w	ip, [r5, r2]
 8015bae:	9a03      	ldr	r2, [sp, #12]
 8015bb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	f1b9 0f00 	cmp.w	r9, #0
 8015bba:	d020      	beq.n	8015bfe <__multiply+0x142>
 8015bbc:	6829      	ldr	r1, [r5, #0]
 8015bbe:	f104 0c14 	add.w	ip, r4, #20
 8015bc2:	46ae      	mov	lr, r5
 8015bc4:	f04f 0a00 	mov.w	sl, #0
 8015bc8:	f8bc b000 	ldrh.w	fp, [ip]
 8015bcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015bd0:	fb09 220b 	mla	r2, r9, fp, r2
 8015bd4:	4492      	add	sl, r2
 8015bd6:	b289      	uxth	r1, r1
 8015bd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015bdc:	f84e 1b04 	str.w	r1, [lr], #4
 8015be0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015be4:	f8be 1000 	ldrh.w	r1, [lr]
 8015be8:	0c12      	lsrs	r2, r2, #16
 8015bea:	fb09 1102 	mla	r1, r9, r2, r1
 8015bee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015bf2:	4567      	cmp	r7, ip
 8015bf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015bf8:	d8e6      	bhi.n	8015bc8 <__multiply+0x10c>
 8015bfa:	9a01      	ldr	r2, [sp, #4]
 8015bfc:	50a9      	str	r1, [r5, r2]
 8015bfe:	3504      	adds	r5, #4
 8015c00:	e79a      	b.n	8015b38 <__multiply+0x7c>
 8015c02:	3e01      	subs	r6, #1
 8015c04:	e79c      	b.n	8015b40 <__multiply+0x84>
 8015c06:	bf00      	nop
 8015c08:	0801ca80 	.word	0x0801ca80
 8015c0c:	0801cb23 	.word	0x0801cb23

08015c10 <__pow5mult>:
 8015c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c14:	4615      	mov	r5, r2
 8015c16:	f012 0203 	ands.w	r2, r2, #3
 8015c1a:	4606      	mov	r6, r0
 8015c1c:	460f      	mov	r7, r1
 8015c1e:	d007      	beq.n	8015c30 <__pow5mult+0x20>
 8015c20:	4c25      	ldr	r4, [pc, #148]	; (8015cb8 <__pow5mult+0xa8>)
 8015c22:	3a01      	subs	r2, #1
 8015c24:	2300      	movs	r3, #0
 8015c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c2a:	f7ff fe51 	bl	80158d0 <__multadd>
 8015c2e:	4607      	mov	r7, r0
 8015c30:	10ad      	asrs	r5, r5, #2
 8015c32:	d03d      	beq.n	8015cb0 <__pow5mult+0xa0>
 8015c34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c36:	b97c      	cbnz	r4, 8015c58 <__pow5mult+0x48>
 8015c38:	2010      	movs	r0, #16
 8015c3a:	f7fd f957 	bl	8012eec <malloc>
 8015c3e:	4602      	mov	r2, r0
 8015c40:	6270      	str	r0, [r6, #36]	; 0x24
 8015c42:	b928      	cbnz	r0, 8015c50 <__pow5mult+0x40>
 8015c44:	4b1d      	ldr	r3, [pc, #116]	; (8015cbc <__pow5mult+0xac>)
 8015c46:	481e      	ldr	r0, [pc, #120]	; (8015cc0 <__pow5mult+0xb0>)
 8015c48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015c4c:	f001 f870 	bl	8016d30 <__assert_func>
 8015c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c54:	6004      	str	r4, [r0, #0]
 8015c56:	60c4      	str	r4, [r0, #12]
 8015c58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c60:	b94c      	cbnz	r4, 8015c76 <__pow5mult+0x66>
 8015c62:	f240 2171 	movw	r1, #625	; 0x271
 8015c66:	4630      	mov	r0, r6
 8015c68:	f7ff ff12 	bl	8015a90 <__i2b>
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c72:	4604      	mov	r4, r0
 8015c74:	6003      	str	r3, [r0, #0]
 8015c76:	f04f 0900 	mov.w	r9, #0
 8015c7a:	07eb      	lsls	r3, r5, #31
 8015c7c:	d50a      	bpl.n	8015c94 <__pow5mult+0x84>
 8015c7e:	4639      	mov	r1, r7
 8015c80:	4622      	mov	r2, r4
 8015c82:	4630      	mov	r0, r6
 8015c84:	f7ff ff1a 	bl	8015abc <__multiply>
 8015c88:	4639      	mov	r1, r7
 8015c8a:	4680      	mov	r8, r0
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	f7ff fdfd 	bl	801588c <_Bfree>
 8015c92:	4647      	mov	r7, r8
 8015c94:	106d      	asrs	r5, r5, #1
 8015c96:	d00b      	beq.n	8015cb0 <__pow5mult+0xa0>
 8015c98:	6820      	ldr	r0, [r4, #0]
 8015c9a:	b938      	cbnz	r0, 8015cac <__pow5mult+0x9c>
 8015c9c:	4622      	mov	r2, r4
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	f7ff ff0b 	bl	8015abc <__multiply>
 8015ca6:	6020      	str	r0, [r4, #0]
 8015ca8:	f8c0 9000 	str.w	r9, [r0]
 8015cac:	4604      	mov	r4, r0
 8015cae:	e7e4      	b.n	8015c7a <__pow5mult+0x6a>
 8015cb0:	4638      	mov	r0, r7
 8015cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cb6:	bf00      	nop
 8015cb8:	0801cc70 	.word	0x0801cc70
 8015cbc:	0801cb0c 	.word	0x0801cb0c
 8015cc0:	0801cb23 	.word	0x0801cb23

08015cc4 <__lshift>:
 8015cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc8:	460c      	mov	r4, r1
 8015cca:	6849      	ldr	r1, [r1, #4]
 8015ccc:	6923      	ldr	r3, [r4, #16]
 8015cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015cd2:	68a3      	ldr	r3, [r4, #8]
 8015cd4:	4607      	mov	r7, r0
 8015cd6:	4691      	mov	r9, r2
 8015cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015cdc:	f108 0601 	add.w	r6, r8, #1
 8015ce0:	42b3      	cmp	r3, r6
 8015ce2:	db0b      	blt.n	8015cfc <__lshift+0x38>
 8015ce4:	4638      	mov	r0, r7
 8015ce6:	f7ff fd91 	bl	801580c <_Balloc>
 8015cea:	4605      	mov	r5, r0
 8015cec:	b948      	cbnz	r0, 8015d02 <__lshift+0x3e>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	4b2a      	ldr	r3, [pc, #168]	; (8015d9c <__lshift+0xd8>)
 8015cf2:	482b      	ldr	r0, [pc, #172]	; (8015da0 <__lshift+0xdc>)
 8015cf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015cf8:	f001 f81a 	bl	8016d30 <__assert_func>
 8015cfc:	3101      	adds	r1, #1
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	e7ee      	b.n	8015ce0 <__lshift+0x1c>
 8015d02:	2300      	movs	r3, #0
 8015d04:	f100 0114 	add.w	r1, r0, #20
 8015d08:	f100 0210 	add.w	r2, r0, #16
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	4553      	cmp	r3, sl
 8015d10:	db37      	blt.n	8015d82 <__lshift+0xbe>
 8015d12:	6920      	ldr	r0, [r4, #16]
 8015d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d18:	f104 0314 	add.w	r3, r4, #20
 8015d1c:	f019 091f 	ands.w	r9, r9, #31
 8015d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015d28:	d02f      	beq.n	8015d8a <__lshift+0xc6>
 8015d2a:	f1c9 0e20 	rsb	lr, r9, #32
 8015d2e:	468a      	mov	sl, r1
 8015d30:	f04f 0c00 	mov.w	ip, #0
 8015d34:	681a      	ldr	r2, [r3, #0]
 8015d36:	fa02 f209 	lsl.w	r2, r2, r9
 8015d3a:	ea42 020c 	orr.w	r2, r2, ip
 8015d3e:	f84a 2b04 	str.w	r2, [sl], #4
 8015d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d46:	4298      	cmp	r0, r3
 8015d48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015d4c:	d8f2      	bhi.n	8015d34 <__lshift+0x70>
 8015d4e:	1b03      	subs	r3, r0, r4
 8015d50:	3b15      	subs	r3, #21
 8015d52:	f023 0303 	bic.w	r3, r3, #3
 8015d56:	3304      	adds	r3, #4
 8015d58:	f104 0215 	add.w	r2, r4, #21
 8015d5c:	4290      	cmp	r0, r2
 8015d5e:	bf38      	it	cc
 8015d60:	2304      	movcc	r3, #4
 8015d62:	f841 c003 	str.w	ip, [r1, r3]
 8015d66:	f1bc 0f00 	cmp.w	ip, #0
 8015d6a:	d001      	beq.n	8015d70 <__lshift+0xac>
 8015d6c:	f108 0602 	add.w	r6, r8, #2
 8015d70:	3e01      	subs	r6, #1
 8015d72:	4638      	mov	r0, r7
 8015d74:	612e      	str	r6, [r5, #16]
 8015d76:	4621      	mov	r1, r4
 8015d78:	f7ff fd88 	bl	801588c <_Bfree>
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8015d86:	3301      	adds	r3, #1
 8015d88:	e7c1      	b.n	8015d0e <__lshift+0x4a>
 8015d8a:	3904      	subs	r1, #4
 8015d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8015d94:	4298      	cmp	r0, r3
 8015d96:	d8f9      	bhi.n	8015d8c <__lshift+0xc8>
 8015d98:	e7ea      	b.n	8015d70 <__lshift+0xac>
 8015d9a:	bf00      	nop
 8015d9c:	0801ca80 	.word	0x0801ca80
 8015da0:	0801cb23 	.word	0x0801cb23

08015da4 <__mcmp>:
 8015da4:	b530      	push	{r4, r5, lr}
 8015da6:	6902      	ldr	r2, [r0, #16]
 8015da8:	690c      	ldr	r4, [r1, #16]
 8015daa:	1b12      	subs	r2, r2, r4
 8015dac:	d10e      	bne.n	8015dcc <__mcmp+0x28>
 8015dae:	f100 0314 	add.w	r3, r0, #20
 8015db2:	3114      	adds	r1, #20
 8015db4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015db8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015dbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015dc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015dc4:	42a5      	cmp	r5, r4
 8015dc6:	d003      	beq.n	8015dd0 <__mcmp+0x2c>
 8015dc8:	d305      	bcc.n	8015dd6 <__mcmp+0x32>
 8015dca:	2201      	movs	r2, #1
 8015dcc:	4610      	mov	r0, r2
 8015dce:	bd30      	pop	{r4, r5, pc}
 8015dd0:	4283      	cmp	r3, r0
 8015dd2:	d3f3      	bcc.n	8015dbc <__mcmp+0x18>
 8015dd4:	e7fa      	b.n	8015dcc <__mcmp+0x28>
 8015dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015dda:	e7f7      	b.n	8015dcc <__mcmp+0x28>

08015ddc <__mdiff>:
 8015ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de0:	460c      	mov	r4, r1
 8015de2:	4606      	mov	r6, r0
 8015de4:	4611      	mov	r1, r2
 8015de6:	4620      	mov	r0, r4
 8015de8:	4690      	mov	r8, r2
 8015dea:	f7ff ffdb 	bl	8015da4 <__mcmp>
 8015dee:	1e05      	subs	r5, r0, #0
 8015df0:	d110      	bne.n	8015e14 <__mdiff+0x38>
 8015df2:	4629      	mov	r1, r5
 8015df4:	4630      	mov	r0, r6
 8015df6:	f7ff fd09 	bl	801580c <_Balloc>
 8015dfa:	b930      	cbnz	r0, 8015e0a <__mdiff+0x2e>
 8015dfc:	4b3a      	ldr	r3, [pc, #232]	; (8015ee8 <__mdiff+0x10c>)
 8015dfe:	4602      	mov	r2, r0
 8015e00:	f240 2132 	movw	r1, #562	; 0x232
 8015e04:	4839      	ldr	r0, [pc, #228]	; (8015eec <__mdiff+0x110>)
 8015e06:	f000 ff93 	bl	8016d30 <__assert_func>
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e14:	bfa4      	itt	ge
 8015e16:	4643      	movge	r3, r8
 8015e18:	46a0      	movge	r8, r4
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015e20:	bfa6      	itte	ge
 8015e22:	461c      	movge	r4, r3
 8015e24:	2500      	movge	r5, #0
 8015e26:	2501      	movlt	r5, #1
 8015e28:	f7ff fcf0 	bl	801580c <_Balloc>
 8015e2c:	b920      	cbnz	r0, 8015e38 <__mdiff+0x5c>
 8015e2e:	4b2e      	ldr	r3, [pc, #184]	; (8015ee8 <__mdiff+0x10c>)
 8015e30:	4602      	mov	r2, r0
 8015e32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015e36:	e7e5      	b.n	8015e04 <__mdiff+0x28>
 8015e38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015e3c:	6926      	ldr	r6, [r4, #16]
 8015e3e:	60c5      	str	r5, [r0, #12]
 8015e40:	f104 0914 	add.w	r9, r4, #20
 8015e44:	f108 0514 	add.w	r5, r8, #20
 8015e48:	f100 0e14 	add.w	lr, r0, #20
 8015e4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015e54:	f108 0210 	add.w	r2, r8, #16
 8015e58:	46f2      	mov	sl, lr
 8015e5a:	2100      	movs	r1, #0
 8015e5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015e60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015e64:	fa1f f883 	uxth.w	r8, r3
 8015e68:	fa11 f18b 	uxtah	r1, r1, fp
 8015e6c:	0c1b      	lsrs	r3, r3, #16
 8015e6e:	eba1 0808 	sub.w	r8, r1, r8
 8015e72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015e76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015e7a:	fa1f f888 	uxth.w	r8, r8
 8015e7e:	1419      	asrs	r1, r3, #16
 8015e80:	454e      	cmp	r6, r9
 8015e82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015e86:	f84a 3b04 	str.w	r3, [sl], #4
 8015e8a:	d8e7      	bhi.n	8015e5c <__mdiff+0x80>
 8015e8c:	1b33      	subs	r3, r6, r4
 8015e8e:	3b15      	subs	r3, #21
 8015e90:	f023 0303 	bic.w	r3, r3, #3
 8015e94:	3304      	adds	r3, #4
 8015e96:	3415      	adds	r4, #21
 8015e98:	42a6      	cmp	r6, r4
 8015e9a:	bf38      	it	cc
 8015e9c:	2304      	movcc	r3, #4
 8015e9e:	441d      	add	r5, r3
 8015ea0:	4473      	add	r3, lr
 8015ea2:	469e      	mov	lr, r3
 8015ea4:	462e      	mov	r6, r5
 8015ea6:	4566      	cmp	r6, ip
 8015ea8:	d30e      	bcc.n	8015ec8 <__mdiff+0xec>
 8015eaa:	f10c 0203 	add.w	r2, ip, #3
 8015eae:	1b52      	subs	r2, r2, r5
 8015eb0:	f022 0203 	bic.w	r2, r2, #3
 8015eb4:	3d03      	subs	r5, #3
 8015eb6:	45ac      	cmp	ip, r5
 8015eb8:	bf38      	it	cc
 8015eba:	2200      	movcc	r2, #0
 8015ebc:	441a      	add	r2, r3
 8015ebe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015ec2:	b17b      	cbz	r3, 8015ee4 <__mdiff+0x108>
 8015ec4:	6107      	str	r7, [r0, #16]
 8015ec6:	e7a3      	b.n	8015e10 <__mdiff+0x34>
 8015ec8:	f856 8b04 	ldr.w	r8, [r6], #4
 8015ecc:	fa11 f288 	uxtah	r2, r1, r8
 8015ed0:	1414      	asrs	r4, r2, #16
 8015ed2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015ed6:	b292      	uxth	r2, r2
 8015ed8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015edc:	f84e 2b04 	str.w	r2, [lr], #4
 8015ee0:	1421      	asrs	r1, r4, #16
 8015ee2:	e7e0      	b.n	8015ea6 <__mdiff+0xca>
 8015ee4:	3f01      	subs	r7, #1
 8015ee6:	e7ea      	b.n	8015ebe <__mdiff+0xe2>
 8015ee8:	0801ca80 	.word	0x0801ca80
 8015eec:	0801cb23 	.word	0x0801cb23

08015ef0 <__ulp>:
 8015ef0:	b082      	sub	sp, #8
 8015ef2:	ed8d 0b00 	vstr	d0, [sp]
 8015ef6:	9b01      	ldr	r3, [sp, #4]
 8015ef8:	4912      	ldr	r1, [pc, #72]	; (8015f44 <__ulp+0x54>)
 8015efa:	4019      	ands	r1, r3
 8015efc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015f00:	2900      	cmp	r1, #0
 8015f02:	dd05      	ble.n	8015f10 <__ulp+0x20>
 8015f04:	2200      	movs	r2, #0
 8015f06:	460b      	mov	r3, r1
 8015f08:	ec43 2b10 	vmov	d0, r2, r3
 8015f0c:	b002      	add	sp, #8
 8015f0e:	4770      	bx	lr
 8015f10:	4249      	negs	r1, r1
 8015f12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015f16:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015f1a:	f04f 0200 	mov.w	r2, #0
 8015f1e:	f04f 0300 	mov.w	r3, #0
 8015f22:	da04      	bge.n	8015f2e <__ulp+0x3e>
 8015f24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015f28:	fa41 f300 	asr.w	r3, r1, r0
 8015f2c:	e7ec      	b.n	8015f08 <__ulp+0x18>
 8015f2e:	f1a0 0114 	sub.w	r1, r0, #20
 8015f32:	291e      	cmp	r1, #30
 8015f34:	bfda      	itte	le
 8015f36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015f3a:	fa20 f101 	lsrle.w	r1, r0, r1
 8015f3e:	2101      	movgt	r1, #1
 8015f40:	460a      	mov	r2, r1
 8015f42:	e7e1      	b.n	8015f08 <__ulp+0x18>
 8015f44:	7ff00000 	.word	0x7ff00000

08015f48 <__b2d>:
 8015f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f4a:	6905      	ldr	r5, [r0, #16]
 8015f4c:	f100 0714 	add.w	r7, r0, #20
 8015f50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015f54:	1f2e      	subs	r6, r5, #4
 8015f56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f7ff fd48 	bl	80159f0 <__hi0bits>
 8015f60:	f1c0 0320 	rsb	r3, r0, #32
 8015f64:	280a      	cmp	r0, #10
 8015f66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015fe4 <__b2d+0x9c>
 8015f6a:	600b      	str	r3, [r1, #0]
 8015f6c:	dc14      	bgt.n	8015f98 <__b2d+0x50>
 8015f6e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015f72:	fa24 f10e 	lsr.w	r1, r4, lr
 8015f76:	42b7      	cmp	r7, r6
 8015f78:	ea41 030c 	orr.w	r3, r1, ip
 8015f7c:	bf34      	ite	cc
 8015f7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f82:	2100      	movcs	r1, #0
 8015f84:	3015      	adds	r0, #21
 8015f86:	fa04 f000 	lsl.w	r0, r4, r0
 8015f8a:	fa21 f10e 	lsr.w	r1, r1, lr
 8015f8e:	ea40 0201 	orr.w	r2, r0, r1
 8015f92:	ec43 2b10 	vmov	d0, r2, r3
 8015f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f98:	42b7      	cmp	r7, r6
 8015f9a:	bf3a      	itte	cc
 8015f9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015fa0:	f1a5 0608 	subcc.w	r6, r5, #8
 8015fa4:	2100      	movcs	r1, #0
 8015fa6:	380b      	subs	r0, #11
 8015fa8:	d017      	beq.n	8015fda <__b2d+0x92>
 8015faa:	f1c0 0c20 	rsb	ip, r0, #32
 8015fae:	fa04 f500 	lsl.w	r5, r4, r0
 8015fb2:	42be      	cmp	r6, r7
 8015fb4:	fa21 f40c 	lsr.w	r4, r1, ip
 8015fb8:	ea45 0504 	orr.w	r5, r5, r4
 8015fbc:	bf8c      	ite	hi
 8015fbe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015fc2:	2400      	movls	r4, #0
 8015fc4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015fc8:	fa01 f000 	lsl.w	r0, r1, r0
 8015fcc:	fa24 f40c 	lsr.w	r4, r4, ip
 8015fd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015fd4:	ea40 0204 	orr.w	r2, r0, r4
 8015fd8:	e7db      	b.n	8015f92 <__b2d+0x4a>
 8015fda:	ea44 030c 	orr.w	r3, r4, ip
 8015fde:	460a      	mov	r2, r1
 8015fe0:	e7d7      	b.n	8015f92 <__b2d+0x4a>
 8015fe2:	bf00      	nop
 8015fe4:	3ff00000 	.word	0x3ff00000

08015fe8 <__d2b>:
 8015fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015fec:	4689      	mov	r9, r1
 8015fee:	2101      	movs	r1, #1
 8015ff0:	ec57 6b10 	vmov	r6, r7, d0
 8015ff4:	4690      	mov	r8, r2
 8015ff6:	f7ff fc09 	bl	801580c <_Balloc>
 8015ffa:	4604      	mov	r4, r0
 8015ffc:	b930      	cbnz	r0, 801600c <__d2b+0x24>
 8015ffe:	4602      	mov	r2, r0
 8016000:	4b25      	ldr	r3, [pc, #148]	; (8016098 <__d2b+0xb0>)
 8016002:	4826      	ldr	r0, [pc, #152]	; (801609c <__d2b+0xb4>)
 8016004:	f240 310a 	movw	r1, #778	; 0x30a
 8016008:	f000 fe92 	bl	8016d30 <__assert_func>
 801600c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016014:	bb35      	cbnz	r5, 8016064 <__d2b+0x7c>
 8016016:	2e00      	cmp	r6, #0
 8016018:	9301      	str	r3, [sp, #4]
 801601a:	d028      	beq.n	801606e <__d2b+0x86>
 801601c:	4668      	mov	r0, sp
 801601e:	9600      	str	r6, [sp, #0]
 8016020:	f7ff fd06 	bl	8015a30 <__lo0bits>
 8016024:	9900      	ldr	r1, [sp, #0]
 8016026:	b300      	cbz	r0, 801606a <__d2b+0x82>
 8016028:	9a01      	ldr	r2, [sp, #4]
 801602a:	f1c0 0320 	rsb	r3, r0, #32
 801602e:	fa02 f303 	lsl.w	r3, r2, r3
 8016032:	430b      	orrs	r3, r1
 8016034:	40c2      	lsrs	r2, r0
 8016036:	6163      	str	r3, [r4, #20]
 8016038:	9201      	str	r2, [sp, #4]
 801603a:	9b01      	ldr	r3, [sp, #4]
 801603c:	61a3      	str	r3, [r4, #24]
 801603e:	2b00      	cmp	r3, #0
 8016040:	bf14      	ite	ne
 8016042:	2202      	movne	r2, #2
 8016044:	2201      	moveq	r2, #1
 8016046:	6122      	str	r2, [r4, #16]
 8016048:	b1d5      	cbz	r5, 8016080 <__d2b+0x98>
 801604a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801604e:	4405      	add	r5, r0
 8016050:	f8c9 5000 	str.w	r5, [r9]
 8016054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016058:	f8c8 0000 	str.w	r0, [r8]
 801605c:	4620      	mov	r0, r4
 801605e:	b003      	add	sp, #12
 8016060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016068:	e7d5      	b.n	8016016 <__d2b+0x2e>
 801606a:	6161      	str	r1, [r4, #20]
 801606c:	e7e5      	b.n	801603a <__d2b+0x52>
 801606e:	a801      	add	r0, sp, #4
 8016070:	f7ff fcde 	bl	8015a30 <__lo0bits>
 8016074:	9b01      	ldr	r3, [sp, #4]
 8016076:	6163      	str	r3, [r4, #20]
 8016078:	2201      	movs	r2, #1
 801607a:	6122      	str	r2, [r4, #16]
 801607c:	3020      	adds	r0, #32
 801607e:	e7e3      	b.n	8016048 <__d2b+0x60>
 8016080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016088:	f8c9 0000 	str.w	r0, [r9]
 801608c:	6918      	ldr	r0, [r3, #16]
 801608e:	f7ff fcaf 	bl	80159f0 <__hi0bits>
 8016092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016096:	e7df      	b.n	8016058 <__d2b+0x70>
 8016098:	0801ca80 	.word	0x0801ca80
 801609c:	0801cb23 	.word	0x0801cb23

080160a0 <__ratio>:
 80160a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a4:	4688      	mov	r8, r1
 80160a6:	4669      	mov	r1, sp
 80160a8:	4681      	mov	r9, r0
 80160aa:	f7ff ff4d 	bl	8015f48 <__b2d>
 80160ae:	a901      	add	r1, sp, #4
 80160b0:	4640      	mov	r0, r8
 80160b2:	ec55 4b10 	vmov	r4, r5, d0
 80160b6:	f7ff ff47 	bl	8015f48 <__b2d>
 80160ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80160c2:	eba3 0c02 	sub.w	ip, r3, r2
 80160c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80160ca:	1a9b      	subs	r3, r3, r2
 80160cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80160d0:	ec51 0b10 	vmov	r0, r1, d0
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	bfd6      	itet	le
 80160d8:	460a      	movle	r2, r1
 80160da:	462a      	movgt	r2, r5
 80160dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80160e0:	468b      	mov	fp, r1
 80160e2:	462f      	mov	r7, r5
 80160e4:	bfd4      	ite	le
 80160e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80160ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80160ee:	4620      	mov	r0, r4
 80160f0:	ee10 2a10 	vmov	r2, s0
 80160f4:	465b      	mov	r3, fp
 80160f6:	4639      	mov	r1, r7
 80160f8:	f7ea fcea 	bl	8000ad0 <__aeabi_ddiv>
 80160fc:	ec41 0b10 	vmov	d0, r0, r1
 8016100:	b003      	add	sp, #12
 8016102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016106 <__copybits>:
 8016106:	3901      	subs	r1, #1
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	1149      	asrs	r1, r1, #5
 801610c:	6914      	ldr	r4, [r2, #16]
 801610e:	3101      	adds	r1, #1
 8016110:	f102 0314 	add.w	r3, r2, #20
 8016114:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016118:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801611c:	1f05      	subs	r5, r0, #4
 801611e:	42a3      	cmp	r3, r4
 8016120:	d30c      	bcc.n	801613c <__copybits+0x36>
 8016122:	1aa3      	subs	r3, r4, r2
 8016124:	3b11      	subs	r3, #17
 8016126:	f023 0303 	bic.w	r3, r3, #3
 801612a:	3211      	adds	r2, #17
 801612c:	42a2      	cmp	r2, r4
 801612e:	bf88      	it	hi
 8016130:	2300      	movhi	r3, #0
 8016132:	4418      	add	r0, r3
 8016134:	2300      	movs	r3, #0
 8016136:	4288      	cmp	r0, r1
 8016138:	d305      	bcc.n	8016146 <__copybits+0x40>
 801613a:	bd70      	pop	{r4, r5, r6, pc}
 801613c:	f853 6b04 	ldr.w	r6, [r3], #4
 8016140:	f845 6f04 	str.w	r6, [r5, #4]!
 8016144:	e7eb      	b.n	801611e <__copybits+0x18>
 8016146:	f840 3b04 	str.w	r3, [r0], #4
 801614a:	e7f4      	b.n	8016136 <__copybits+0x30>

0801614c <__any_on>:
 801614c:	f100 0214 	add.w	r2, r0, #20
 8016150:	6900      	ldr	r0, [r0, #16]
 8016152:	114b      	asrs	r3, r1, #5
 8016154:	4298      	cmp	r0, r3
 8016156:	b510      	push	{r4, lr}
 8016158:	db11      	blt.n	801617e <__any_on+0x32>
 801615a:	dd0a      	ble.n	8016172 <__any_on+0x26>
 801615c:	f011 011f 	ands.w	r1, r1, #31
 8016160:	d007      	beq.n	8016172 <__any_on+0x26>
 8016162:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016166:	fa24 f001 	lsr.w	r0, r4, r1
 801616a:	fa00 f101 	lsl.w	r1, r0, r1
 801616e:	428c      	cmp	r4, r1
 8016170:	d10b      	bne.n	801618a <__any_on+0x3e>
 8016172:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016176:	4293      	cmp	r3, r2
 8016178:	d803      	bhi.n	8016182 <__any_on+0x36>
 801617a:	2000      	movs	r0, #0
 801617c:	bd10      	pop	{r4, pc}
 801617e:	4603      	mov	r3, r0
 8016180:	e7f7      	b.n	8016172 <__any_on+0x26>
 8016182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016186:	2900      	cmp	r1, #0
 8016188:	d0f5      	beq.n	8016176 <__any_on+0x2a>
 801618a:	2001      	movs	r0, #1
 801618c:	e7f6      	b.n	801617c <__any_on+0x30>

0801618e <_realloc_r>:
 801618e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016192:	4680      	mov	r8, r0
 8016194:	4614      	mov	r4, r2
 8016196:	460e      	mov	r6, r1
 8016198:	b921      	cbnz	r1, 80161a4 <_realloc_r+0x16>
 801619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801619e:	4611      	mov	r1, r2
 80161a0:	f7fc bf5c 	b.w	801305c <_malloc_r>
 80161a4:	b92a      	cbnz	r2, 80161b2 <_realloc_r+0x24>
 80161a6:	f7fc feed 	bl	8012f84 <_free_r>
 80161aa:	4625      	mov	r5, r4
 80161ac:	4628      	mov	r0, r5
 80161ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161b2:	f000 fddb 	bl	8016d6c <_malloc_usable_size_r>
 80161b6:	4284      	cmp	r4, r0
 80161b8:	4607      	mov	r7, r0
 80161ba:	d802      	bhi.n	80161c2 <_realloc_r+0x34>
 80161bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80161c0:	d812      	bhi.n	80161e8 <_realloc_r+0x5a>
 80161c2:	4621      	mov	r1, r4
 80161c4:	4640      	mov	r0, r8
 80161c6:	f7fc ff49 	bl	801305c <_malloc_r>
 80161ca:	4605      	mov	r5, r0
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d0ed      	beq.n	80161ac <_realloc_r+0x1e>
 80161d0:	42bc      	cmp	r4, r7
 80161d2:	4622      	mov	r2, r4
 80161d4:	4631      	mov	r1, r6
 80161d6:	bf28      	it	cs
 80161d8:	463a      	movcs	r2, r7
 80161da:	f7fc fea7 	bl	8012f2c <memcpy>
 80161de:	4631      	mov	r1, r6
 80161e0:	4640      	mov	r0, r8
 80161e2:	f7fc fecf 	bl	8012f84 <_free_r>
 80161e6:	e7e1      	b.n	80161ac <_realloc_r+0x1e>
 80161e8:	4635      	mov	r5, r6
 80161ea:	e7df      	b.n	80161ac <_realloc_r+0x1e>

080161ec <__ssputs_r>:
 80161ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161f0:	688e      	ldr	r6, [r1, #8]
 80161f2:	429e      	cmp	r6, r3
 80161f4:	4682      	mov	sl, r0
 80161f6:	460c      	mov	r4, r1
 80161f8:	4690      	mov	r8, r2
 80161fa:	461f      	mov	r7, r3
 80161fc:	d838      	bhi.n	8016270 <__ssputs_r+0x84>
 80161fe:	898a      	ldrh	r2, [r1, #12]
 8016200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016204:	d032      	beq.n	801626c <__ssputs_r+0x80>
 8016206:	6825      	ldr	r5, [r4, #0]
 8016208:	6909      	ldr	r1, [r1, #16]
 801620a:	eba5 0901 	sub.w	r9, r5, r1
 801620e:	6965      	ldr	r5, [r4, #20]
 8016210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016218:	3301      	adds	r3, #1
 801621a:	444b      	add	r3, r9
 801621c:	106d      	asrs	r5, r5, #1
 801621e:	429d      	cmp	r5, r3
 8016220:	bf38      	it	cc
 8016222:	461d      	movcc	r5, r3
 8016224:	0553      	lsls	r3, r2, #21
 8016226:	d531      	bpl.n	801628c <__ssputs_r+0xa0>
 8016228:	4629      	mov	r1, r5
 801622a:	f7fc ff17 	bl	801305c <_malloc_r>
 801622e:	4606      	mov	r6, r0
 8016230:	b950      	cbnz	r0, 8016248 <__ssputs_r+0x5c>
 8016232:	230c      	movs	r3, #12
 8016234:	f8ca 3000 	str.w	r3, [sl]
 8016238:	89a3      	ldrh	r3, [r4, #12]
 801623a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801623e:	81a3      	strh	r3, [r4, #12]
 8016240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016248:	6921      	ldr	r1, [r4, #16]
 801624a:	464a      	mov	r2, r9
 801624c:	f7fc fe6e 	bl	8012f2c <memcpy>
 8016250:	89a3      	ldrh	r3, [r4, #12]
 8016252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801625a:	81a3      	strh	r3, [r4, #12]
 801625c:	6126      	str	r6, [r4, #16]
 801625e:	6165      	str	r5, [r4, #20]
 8016260:	444e      	add	r6, r9
 8016262:	eba5 0509 	sub.w	r5, r5, r9
 8016266:	6026      	str	r6, [r4, #0]
 8016268:	60a5      	str	r5, [r4, #8]
 801626a:	463e      	mov	r6, r7
 801626c:	42be      	cmp	r6, r7
 801626e:	d900      	bls.n	8016272 <__ssputs_r+0x86>
 8016270:	463e      	mov	r6, r7
 8016272:	6820      	ldr	r0, [r4, #0]
 8016274:	4632      	mov	r2, r6
 8016276:	4641      	mov	r1, r8
 8016278:	f7ff faa2 	bl	80157c0 <memmove>
 801627c:	68a3      	ldr	r3, [r4, #8]
 801627e:	1b9b      	subs	r3, r3, r6
 8016280:	60a3      	str	r3, [r4, #8]
 8016282:	6823      	ldr	r3, [r4, #0]
 8016284:	4433      	add	r3, r6
 8016286:	6023      	str	r3, [r4, #0]
 8016288:	2000      	movs	r0, #0
 801628a:	e7db      	b.n	8016244 <__ssputs_r+0x58>
 801628c:	462a      	mov	r2, r5
 801628e:	f7ff ff7e 	bl	801618e <_realloc_r>
 8016292:	4606      	mov	r6, r0
 8016294:	2800      	cmp	r0, #0
 8016296:	d1e1      	bne.n	801625c <__ssputs_r+0x70>
 8016298:	6921      	ldr	r1, [r4, #16]
 801629a:	4650      	mov	r0, sl
 801629c:	f7fc fe72 	bl	8012f84 <_free_r>
 80162a0:	e7c7      	b.n	8016232 <__ssputs_r+0x46>
	...

080162a4 <_svfiprintf_r>:
 80162a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a8:	4698      	mov	r8, r3
 80162aa:	898b      	ldrh	r3, [r1, #12]
 80162ac:	061b      	lsls	r3, r3, #24
 80162ae:	b09d      	sub	sp, #116	; 0x74
 80162b0:	4607      	mov	r7, r0
 80162b2:	460d      	mov	r5, r1
 80162b4:	4614      	mov	r4, r2
 80162b6:	d50e      	bpl.n	80162d6 <_svfiprintf_r+0x32>
 80162b8:	690b      	ldr	r3, [r1, #16]
 80162ba:	b963      	cbnz	r3, 80162d6 <_svfiprintf_r+0x32>
 80162bc:	2140      	movs	r1, #64	; 0x40
 80162be:	f7fc fecd 	bl	801305c <_malloc_r>
 80162c2:	6028      	str	r0, [r5, #0]
 80162c4:	6128      	str	r0, [r5, #16]
 80162c6:	b920      	cbnz	r0, 80162d2 <_svfiprintf_r+0x2e>
 80162c8:	230c      	movs	r3, #12
 80162ca:	603b      	str	r3, [r7, #0]
 80162cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162d0:	e0d1      	b.n	8016476 <_svfiprintf_r+0x1d2>
 80162d2:	2340      	movs	r3, #64	; 0x40
 80162d4:	616b      	str	r3, [r5, #20]
 80162d6:	2300      	movs	r3, #0
 80162d8:	9309      	str	r3, [sp, #36]	; 0x24
 80162da:	2320      	movs	r3, #32
 80162dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80162e4:	2330      	movs	r3, #48	; 0x30
 80162e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016490 <_svfiprintf_r+0x1ec>
 80162ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162ee:	f04f 0901 	mov.w	r9, #1
 80162f2:	4623      	mov	r3, r4
 80162f4:	469a      	mov	sl, r3
 80162f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162fa:	b10a      	cbz	r2, 8016300 <_svfiprintf_r+0x5c>
 80162fc:	2a25      	cmp	r2, #37	; 0x25
 80162fe:	d1f9      	bne.n	80162f4 <_svfiprintf_r+0x50>
 8016300:	ebba 0b04 	subs.w	fp, sl, r4
 8016304:	d00b      	beq.n	801631e <_svfiprintf_r+0x7a>
 8016306:	465b      	mov	r3, fp
 8016308:	4622      	mov	r2, r4
 801630a:	4629      	mov	r1, r5
 801630c:	4638      	mov	r0, r7
 801630e:	f7ff ff6d 	bl	80161ec <__ssputs_r>
 8016312:	3001      	adds	r0, #1
 8016314:	f000 80aa 	beq.w	801646c <_svfiprintf_r+0x1c8>
 8016318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801631a:	445a      	add	r2, fp
 801631c:	9209      	str	r2, [sp, #36]	; 0x24
 801631e:	f89a 3000 	ldrb.w	r3, [sl]
 8016322:	2b00      	cmp	r3, #0
 8016324:	f000 80a2 	beq.w	801646c <_svfiprintf_r+0x1c8>
 8016328:	2300      	movs	r3, #0
 801632a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801632e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016332:	f10a 0a01 	add.w	sl, sl, #1
 8016336:	9304      	str	r3, [sp, #16]
 8016338:	9307      	str	r3, [sp, #28]
 801633a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801633e:	931a      	str	r3, [sp, #104]	; 0x68
 8016340:	4654      	mov	r4, sl
 8016342:	2205      	movs	r2, #5
 8016344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016348:	4851      	ldr	r0, [pc, #324]	; (8016490 <_svfiprintf_r+0x1ec>)
 801634a:	f7ea f879 	bl	8000440 <memchr>
 801634e:	9a04      	ldr	r2, [sp, #16]
 8016350:	b9d8      	cbnz	r0, 801638a <_svfiprintf_r+0xe6>
 8016352:	06d0      	lsls	r0, r2, #27
 8016354:	bf44      	itt	mi
 8016356:	2320      	movmi	r3, #32
 8016358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801635c:	0711      	lsls	r1, r2, #28
 801635e:	bf44      	itt	mi
 8016360:	232b      	movmi	r3, #43	; 0x2b
 8016362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016366:	f89a 3000 	ldrb.w	r3, [sl]
 801636a:	2b2a      	cmp	r3, #42	; 0x2a
 801636c:	d015      	beq.n	801639a <_svfiprintf_r+0xf6>
 801636e:	9a07      	ldr	r2, [sp, #28]
 8016370:	4654      	mov	r4, sl
 8016372:	2000      	movs	r0, #0
 8016374:	f04f 0c0a 	mov.w	ip, #10
 8016378:	4621      	mov	r1, r4
 801637a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801637e:	3b30      	subs	r3, #48	; 0x30
 8016380:	2b09      	cmp	r3, #9
 8016382:	d94e      	bls.n	8016422 <_svfiprintf_r+0x17e>
 8016384:	b1b0      	cbz	r0, 80163b4 <_svfiprintf_r+0x110>
 8016386:	9207      	str	r2, [sp, #28]
 8016388:	e014      	b.n	80163b4 <_svfiprintf_r+0x110>
 801638a:	eba0 0308 	sub.w	r3, r0, r8
 801638e:	fa09 f303 	lsl.w	r3, r9, r3
 8016392:	4313      	orrs	r3, r2
 8016394:	9304      	str	r3, [sp, #16]
 8016396:	46a2      	mov	sl, r4
 8016398:	e7d2      	b.n	8016340 <_svfiprintf_r+0x9c>
 801639a:	9b03      	ldr	r3, [sp, #12]
 801639c:	1d19      	adds	r1, r3, #4
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	9103      	str	r1, [sp, #12]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	bfbb      	ittet	lt
 80163a6:	425b      	neglt	r3, r3
 80163a8:	f042 0202 	orrlt.w	r2, r2, #2
 80163ac:	9307      	strge	r3, [sp, #28]
 80163ae:	9307      	strlt	r3, [sp, #28]
 80163b0:	bfb8      	it	lt
 80163b2:	9204      	strlt	r2, [sp, #16]
 80163b4:	7823      	ldrb	r3, [r4, #0]
 80163b6:	2b2e      	cmp	r3, #46	; 0x2e
 80163b8:	d10c      	bne.n	80163d4 <_svfiprintf_r+0x130>
 80163ba:	7863      	ldrb	r3, [r4, #1]
 80163bc:	2b2a      	cmp	r3, #42	; 0x2a
 80163be:	d135      	bne.n	801642c <_svfiprintf_r+0x188>
 80163c0:	9b03      	ldr	r3, [sp, #12]
 80163c2:	1d1a      	adds	r2, r3, #4
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	9203      	str	r2, [sp, #12]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	bfb8      	it	lt
 80163cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80163d0:	3402      	adds	r4, #2
 80163d2:	9305      	str	r3, [sp, #20]
 80163d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80164a0 <_svfiprintf_r+0x1fc>
 80163d8:	7821      	ldrb	r1, [r4, #0]
 80163da:	2203      	movs	r2, #3
 80163dc:	4650      	mov	r0, sl
 80163de:	f7ea f82f 	bl	8000440 <memchr>
 80163e2:	b140      	cbz	r0, 80163f6 <_svfiprintf_r+0x152>
 80163e4:	2340      	movs	r3, #64	; 0x40
 80163e6:	eba0 000a 	sub.w	r0, r0, sl
 80163ea:	fa03 f000 	lsl.w	r0, r3, r0
 80163ee:	9b04      	ldr	r3, [sp, #16]
 80163f0:	4303      	orrs	r3, r0
 80163f2:	3401      	adds	r4, #1
 80163f4:	9304      	str	r3, [sp, #16]
 80163f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163fa:	4826      	ldr	r0, [pc, #152]	; (8016494 <_svfiprintf_r+0x1f0>)
 80163fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016400:	2206      	movs	r2, #6
 8016402:	f7ea f81d 	bl	8000440 <memchr>
 8016406:	2800      	cmp	r0, #0
 8016408:	d038      	beq.n	801647c <_svfiprintf_r+0x1d8>
 801640a:	4b23      	ldr	r3, [pc, #140]	; (8016498 <_svfiprintf_r+0x1f4>)
 801640c:	bb1b      	cbnz	r3, 8016456 <_svfiprintf_r+0x1b2>
 801640e:	9b03      	ldr	r3, [sp, #12]
 8016410:	3307      	adds	r3, #7
 8016412:	f023 0307 	bic.w	r3, r3, #7
 8016416:	3308      	adds	r3, #8
 8016418:	9303      	str	r3, [sp, #12]
 801641a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801641c:	4433      	add	r3, r6
 801641e:	9309      	str	r3, [sp, #36]	; 0x24
 8016420:	e767      	b.n	80162f2 <_svfiprintf_r+0x4e>
 8016422:	fb0c 3202 	mla	r2, ip, r2, r3
 8016426:	460c      	mov	r4, r1
 8016428:	2001      	movs	r0, #1
 801642a:	e7a5      	b.n	8016378 <_svfiprintf_r+0xd4>
 801642c:	2300      	movs	r3, #0
 801642e:	3401      	adds	r4, #1
 8016430:	9305      	str	r3, [sp, #20]
 8016432:	4619      	mov	r1, r3
 8016434:	f04f 0c0a 	mov.w	ip, #10
 8016438:	4620      	mov	r0, r4
 801643a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801643e:	3a30      	subs	r2, #48	; 0x30
 8016440:	2a09      	cmp	r2, #9
 8016442:	d903      	bls.n	801644c <_svfiprintf_r+0x1a8>
 8016444:	2b00      	cmp	r3, #0
 8016446:	d0c5      	beq.n	80163d4 <_svfiprintf_r+0x130>
 8016448:	9105      	str	r1, [sp, #20]
 801644a:	e7c3      	b.n	80163d4 <_svfiprintf_r+0x130>
 801644c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016450:	4604      	mov	r4, r0
 8016452:	2301      	movs	r3, #1
 8016454:	e7f0      	b.n	8016438 <_svfiprintf_r+0x194>
 8016456:	ab03      	add	r3, sp, #12
 8016458:	9300      	str	r3, [sp, #0]
 801645a:	462a      	mov	r2, r5
 801645c:	4b0f      	ldr	r3, [pc, #60]	; (801649c <_svfiprintf_r+0x1f8>)
 801645e:	a904      	add	r1, sp, #16
 8016460:	4638      	mov	r0, r7
 8016462:	f3af 8000 	nop.w
 8016466:	1c42      	adds	r2, r0, #1
 8016468:	4606      	mov	r6, r0
 801646a:	d1d6      	bne.n	801641a <_svfiprintf_r+0x176>
 801646c:	89ab      	ldrh	r3, [r5, #12]
 801646e:	065b      	lsls	r3, r3, #25
 8016470:	f53f af2c 	bmi.w	80162cc <_svfiprintf_r+0x28>
 8016474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016476:	b01d      	add	sp, #116	; 0x74
 8016478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801647c:	ab03      	add	r3, sp, #12
 801647e:	9300      	str	r3, [sp, #0]
 8016480:	462a      	mov	r2, r5
 8016482:	4b06      	ldr	r3, [pc, #24]	; (801649c <_svfiprintf_r+0x1f8>)
 8016484:	a904      	add	r1, sp, #16
 8016486:	4638      	mov	r0, r7
 8016488:	f7fd f82e 	bl	80134e8 <_printf_i>
 801648c:	e7eb      	b.n	8016466 <_svfiprintf_r+0x1c2>
 801648e:	bf00      	nop
 8016490:	0801c358 	.word	0x0801c358
 8016494:	0801c362 	.word	0x0801c362
 8016498:	00000000 	.word	0x00000000
 801649c:	080161ed 	.word	0x080161ed
 80164a0:	0801c35e 	.word	0x0801c35e

080164a4 <_sungetc_r>:
 80164a4:	b538      	push	{r3, r4, r5, lr}
 80164a6:	1c4b      	adds	r3, r1, #1
 80164a8:	4614      	mov	r4, r2
 80164aa:	d103      	bne.n	80164b4 <_sungetc_r+0x10>
 80164ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80164b0:	4628      	mov	r0, r5
 80164b2:	bd38      	pop	{r3, r4, r5, pc}
 80164b4:	8993      	ldrh	r3, [r2, #12]
 80164b6:	f023 0320 	bic.w	r3, r3, #32
 80164ba:	8193      	strh	r3, [r2, #12]
 80164bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80164be:	6852      	ldr	r2, [r2, #4]
 80164c0:	b2cd      	uxtb	r5, r1
 80164c2:	b18b      	cbz	r3, 80164e8 <_sungetc_r+0x44>
 80164c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80164c6:	4293      	cmp	r3, r2
 80164c8:	dd08      	ble.n	80164dc <_sungetc_r+0x38>
 80164ca:	6823      	ldr	r3, [r4, #0]
 80164cc:	1e5a      	subs	r2, r3, #1
 80164ce:	6022      	str	r2, [r4, #0]
 80164d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80164d4:	6863      	ldr	r3, [r4, #4]
 80164d6:	3301      	adds	r3, #1
 80164d8:	6063      	str	r3, [r4, #4]
 80164da:	e7e9      	b.n	80164b0 <_sungetc_r+0xc>
 80164dc:	4621      	mov	r1, r4
 80164de:	f000 fbdf 	bl	8016ca0 <__submore>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d0f1      	beq.n	80164ca <_sungetc_r+0x26>
 80164e6:	e7e1      	b.n	80164ac <_sungetc_r+0x8>
 80164e8:	6921      	ldr	r1, [r4, #16]
 80164ea:	6823      	ldr	r3, [r4, #0]
 80164ec:	b151      	cbz	r1, 8016504 <_sungetc_r+0x60>
 80164ee:	4299      	cmp	r1, r3
 80164f0:	d208      	bcs.n	8016504 <_sungetc_r+0x60>
 80164f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80164f6:	42a9      	cmp	r1, r5
 80164f8:	d104      	bne.n	8016504 <_sungetc_r+0x60>
 80164fa:	3b01      	subs	r3, #1
 80164fc:	3201      	adds	r2, #1
 80164fe:	6023      	str	r3, [r4, #0]
 8016500:	6062      	str	r2, [r4, #4]
 8016502:	e7d5      	b.n	80164b0 <_sungetc_r+0xc>
 8016504:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801650c:	6363      	str	r3, [r4, #52]	; 0x34
 801650e:	2303      	movs	r3, #3
 8016510:	63a3      	str	r3, [r4, #56]	; 0x38
 8016512:	4623      	mov	r3, r4
 8016514:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016518:	6023      	str	r3, [r4, #0]
 801651a:	2301      	movs	r3, #1
 801651c:	e7dc      	b.n	80164d8 <_sungetc_r+0x34>

0801651e <__ssrefill_r>:
 801651e:	b510      	push	{r4, lr}
 8016520:	460c      	mov	r4, r1
 8016522:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016524:	b169      	cbz	r1, 8016542 <__ssrefill_r+0x24>
 8016526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801652a:	4299      	cmp	r1, r3
 801652c:	d001      	beq.n	8016532 <__ssrefill_r+0x14>
 801652e:	f7fc fd29 	bl	8012f84 <_free_r>
 8016532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016534:	6063      	str	r3, [r4, #4]
 8016536:	2000      	movs	r0, #0
 8016538:	6360      	str	r0, [r4, #52]	; 0x34
 801653a:	b113      	cbz	r3, 8016542 <__ssrefill_r+0x24>
 801653c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801653e:	6023      	str	r3, [r4, #0]
 8016540:	bd10      	pop	{r4, pc}
 8016542:	6923      	ldr	r3, [r4, #16]
 8016544:	6023      	str	r3, [r4, #0]
 8016546:	2300      	movs	r3, #0
 8016548:	6063      	str	r3, [r4, #4]
 801654a:	89a3      	ldrh	r3, [r4, #12]
 801654c:	f043 0320 	orr.w	r3, r3, #32
 8016550:	81a3      	strh	r3, [r4, #12]
 8016552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016556:	e7f3      	b.n	8016540 <__ssrefill_r+0x22>

08016558 <__ssvfiscanf_r>:
 8016558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801655c:	460c      	mov	r4, r1
 801655e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016562:	2100      	movs	r1, #0
 8016564:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016568:	49a6      	ldr	r1, [pc, #664]	; (8016804 <__ssvfiscanf_r+0x2ac>)
 801656a:	91a0      	str	r1, [sp, #640]	; 0x280
 801656c:	f10d 0804 	add.w	r8, sp, #4
 8016570:	49a5      	ldr	r1, [pc, #660]	; (8016808 <__ssvfiscanf_r+0x2b0>)
 8016572:	4fa6      	ldr	r7, [pc, #664]	; (801680c <__ssvfiscanf_r+0x2b4>)
 8016574:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016810 <__ssvfiscanf_r+0x2b8>
 8016578:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801657c:	4606      	mov	r6, r0
 801657e:	91a1      	str	r1, [sp, #644]	; 0x284
 8016580:	9300      	str	r3, [sp, #0]
 8016582:	7813      	ldrb	r3, [r2, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	f000 815a 	beq.w	801683e <__ssvfiscanf_r+0x2e6>
 801658a:	5dd9      	ldrb	r1, [r3, r7]
 801658c:	f011 0108 	ands.w	r1, r1, #8
 8016590:	f102 0501 	add.w	r5, r2, #1
 8016594:	d019      	beq.n	80165ca <__ssvfiscanf_r+0x72>
 8016596:	6863      	ldr	r3, [r4, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	dd0f      	ble.n	80165bc <__ssvfiscanf_r+0x64>
 801659c:	6823      	ldr	r3, [r4, #0]
 801659e:	781a      	ldrb	r2, [r3, #0]
 80165a0:	5cba      	ldrb	r2, [r7, r2]
 80165a2:	0712      	lsls	r2, r2, #28
 80165a4:	d401      	bmi.n	80165aa <__ssvfiscanf_r+0x52>
 80165a6:	462a      	mov	r2, r5
 80165a8:	e7eb      	b.n	8016582 <__ssvfiscanf_r+0x2a>
 80165aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80165ac:	3201      	adds	r2, #1
 80165ae:	9245      	str	r2, [sp, #276]	; 0x114
 80165b0:	6862      	ldr	r2, [r4, #4]
 80165b2:	3301      	adds	r3, #1
 80165b4:	3a01      	subs	r2, #1
 80165b6:	6062      	str	r2, [r4, #4]
 80165b8:	6023      	str	r3, [r4, #0]
 80165ba:	e7ec      	b.n	8016596 <__ssvfiscanf_r+0x3e>
 80165bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80165be:	4621      	mov	r1, r4
 80165c0:	4630      	mov	r0, r6
 80165c2:	4798      	blx	r3
 80165c4:	2800      	cmp	r0, #0
 80165c6:	d0e9      	beq.n	801659c <__ssvfiscanf_r+0x44>
 80165c8:	e7ed      	b.n	80165a6 <__ssvfiscanf_r+0x4e>
 80165ca:	2b25      	cmp	r3, #37	; 0x25
 80165cc:	d012      	beq.n	80165f4 <__ssvfiscanf_r+0x9c>
 80165ce:	469a      	mov	sl, r3
 80165d0:	6863      	ldr	r3, [r4, #4]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	f340 8091 	ble.w	80166fa <__ssvfiscanf_r+0x1a2>
 80165d8:	6822      	ldr	r2, [r4, #0]
 80165da:	7813      	ldrb	r3, [r2, #0]
 80165dc:	4553      	cmp	r3, sl
 80165de:	f040 812e 	bne.w	801683e <__ssvfiscanf_r+0x2e6>
 80165e2:	6863      	ldr	r3, [r4, #4]
 80165e4:	3b01      	subs	r3, #1
 80165e6:	6063      	str	r3, [r4, #4]
 80165e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80165ea:	3201      	adds	r2, #1
 80165ec:	3301      	adds	r3, #1
 80165ee:	6022      	str	r2, [r4, #0]
 80165f0:	9345      	str	r3, [sp, #276]	; 0x114
 80165f2:	e7d8      	b.n	80165a6 <__ssvfiscanf_r+0x4e>
 80165f4:	9141      	str	r1, [sp, #260]	; 0x104
 80165f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80165f8:	7853      	ldrb	r3, [r2, #1]
 80165fa:	2b2a      	cmp	r3, #42	; 0x2a
 80165fc:	bf02      	ittt	eq
 80165fe:	2310      	moveq	r3, #16
 8016600:	1c95      	addeq	r5, r2, #2
 8016602:	9341      	streq	r3, [sp, #260]	; 0x104
 8016604:	220a      	movs	r2, #10
 8016606:	46aa      	mov	sl, r5
 8016608:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801660c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016610:	2b09      	cmp	r3, #9
 8016612:	d91d      	bls.n	8016650 <__ssvfiscanf_r+0xf8>
 8016614:	487e      	ldr	r0, [pc, #504]	; (8016810 <__ssvfiscanf_r+0x2b8>)
 8016616:	2203      	movs	r2, #3
 8016618:	f7e9 ff12 	bl	8000440 <memchr>
 801661c:	b140      	cbz	r0, 8016630 <__ssvfiscanf_r+0xd8>
 801661e:	2301      	movs	r3, #1
 8016620:	eba0 0009 	sub.w	r0, r0, r9
 8016624:	fa03 f000 	lsl.w	r0, r3, r0
 8016628:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801662a:	4318      	orrs	r0, r3
 801662c:	9041      	str	r0, [sp, #260]	; 0x104
 801662e:	4655      	mov	r5, sl
 8016630:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016634:	2b78      	cmp	r3, #120	; 0x78
 8016636:	d806      	bhi.n	8016646 <__ssvfiscanf_r+0xee>
 8016638:	2b57      	cmp	r3, #87	; 0x57
 801663a:	d810      	bhi.n	801665e <__ssvfiscanf_r+0x106>
 801663c:	2b25      	cmp	r3, #37	; 0x25
 801663e:	d0c6      	beq.n	80165ce <__ssvfiscanf_r+0x76>
 8016640:	d856      	bhi.n	80166f0 <__ssvfiscanf_r+0x198>
 8016642:	2b00      	cmp	r3, #0
 8016644:	d064      	beq.n	8016710 <__ssvfiscanf_r+0x1b8>
 8016646:	2303      	movs	r3, #3
 8016648:	9347      	str	r3, [sp, #284]	; 0x11c
 801664a:	230a      	movs	r3, #10
 801664c:	9342      	str	r3, [sp, #264]	; 0x108
 801664e:	e071      	b.n	8016734 <__ssvfiscanf_r+0x1dc>
 8016650:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016652:	fb02 1103 	mla	r1, r2, r3, r1
 8016656:	3930      	subs	r1, #48	; 0x30
 8016658:	9143      	str	r1, [sp, #268]	; 0x10c
 801665a:	4655      	mov	r5, sl
 801665c:	e7d3      	b.n	8016606 <__ssvfiscanf_r+0xae>
 801665e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016662:	2a20      	cmp	r2, #32
 8016664:	d8ef      	bhi.n	8016646 <__ssvfiscanf_r+0xee>
 8016666:	a101      	add	r1, pc, #4	; (adr r1, 801666c <__ssvfiscanf_r+0x114>)
 8016668:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801666c:	0801671f 	.word	0x0801671f
 8016670:	08016647 	.word	0x08016647
 8016674:	08016647 	.word	0x08016647
 8016678:	0801677d 	.word	0x0801677d
 801667c:	08016647 	.word	0x08016647
 8016680:	08016647 	.word	0x08016647
 8016684:	08016647 	.word	0x08016647
 8016688:	08016647 	.word	0x08016647
 801668c:	08016647 	.word	0x08016647
 8016690:	08016647 	.word	0x08016647
 8016694:	08016647 	.word	0x08016647
 8016698:	08016793 	.word	0x08016793
 801669c:	08016769 	.word	0x08016769
 80166a0:	080166f7 	.word	0x080166f7
 80166a4:	080166f7 	.word	0x080166f7
 80166a8:	080166f7 	.word	0x080166f7
 80166ac:	08016647 	.word	0x08016647
 80166b0:	0801676d 	.word	0x0801676d
 80166b4:	08016647 	.word	0x08016647
 80166b8:	08016647 	.word	0x08016647
 80166bc:	08016647 	.word	0x08016647
 80166c0:	08016647 	.word	0x08016647
 80166c4:	080167a3 	.word	0x080167a3
 80166c8:	08016775 	.word	0x08016775
 80166cc:	08016717 	.word	0x08016717
 80166d0:	08016647 	.word	0x08016647
 80166d4:	08016647 	.word	0x08016647
 80166d8:	0801679f 	.word	0x0801679f
 80166dc:	08016647 	.word	0x08016647
 80166e0:	08016769 	.word	0x08016769
 80166e4:	08016647 	.word	0x08016647
 80166e8:	08016647 	.word	0x08016647
 80166ec:	0801671f 	.word	0x0801671f
 80166f0:	3b45      	subs	r3, #69	; 0x45
 80166f2:	2b02      	cmp	r3, #2
 80166f4:	d8a7      	bhi.n	8016646 <__ssvfiscanf_r+0xee>
 80166f6:	2305      	movs	r3, #5
 80166f8:	e01b      	b.n	8016732 <__ssvfiscanf_r+0x1da>
 80166fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80166fc:	4621      	mov	r1, r4
 80166fe:	4630      	mov	r0, r6
 8016700:	4798      	blx	r3
 8016702:	2800      	cmp	r0, #0
 8016704:	f43f af68 	beq.w	80165d8 <__ssvfiscanf_r+0x80>
 8016708:	9844      	ldr	r0, [sp, #272]	; 0x110
 801670a:	2800      	cmp	r0, #0
 801670c:	f040 808d 	bne.w	801682a <__ssvfiscanf_r+0x2d2>
 8016710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016714:	e08f      	b.n	8016836 <__ssvfiscanf_r+0x2de>
 8016716:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016718:	f042 0220 	orr.w	r2, r2, #32
 801671c:	9241      	str	r2, [sp, #260]	; 0x104
 801671e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016724:	9241      	str	r2, [sp, #260]	; 0x104
 8016726:	2210      	movs	r2, #16
 8016728:	2b6f      	cmp	r3, #111	; 0x6f
 801672a:	9242      	str	r2, [sp, #264]	; 0x108
 801672c:	bf34      	ite	cc
 801672e:	2303      	movcc	r3, #3
 8016730:	2304      	movcs	r3, #4
 8016732:	9347      	str	r3, [sp, #284]	; 0x11c
 8016734:	6863      	ldr	r3, [r4, #4]
 8016736:	2b00      	cmp	r3, #0
 8016738:	dd42      	ble.n	80167c0 <__ssvfiscanf_r+0x268>
 801673a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801673c:	0659      	lsls	r1, r3, #25
 801673e:	d404      	bmi.n	801674a <__ssvfiscanf_r+0x1f2>
 8016740:	6823      	ldr	r3, [r4, #0]
 8016742:	781a      	ldrb	r2, [r3, #0]
 8016744:	5cba      	ldrb	r2, [r7, r2]
 8016746:	0712      	lsls	r2, r2, #28
 8016748:	d441      	bmi.n	80167ce <__ssvfiscanf_r+0x276>
 801674a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801674c:	2b02      	cmp	r3, #2
 801674e:	dc50      	bgt.n	80167f2 <__ssvfiscanf_r+0x29a>
 8016750:	466b      	mov	r3, sp
 8016752:	4622      	mov	r2, r4
 8016754:	a941      	add	r1, sp, #260	; 0x104
 8016756:	4630      	mov	r0, r6
 8016758:	f000 f876 	bl	8016848 <_scanf_chars>
 801675c:	2801      	cmp	r0, #1
 801675e:	d06e      	beq.n	801683e <__ssvfiscanf_r+0x2e6>
 8016760:	2802      	cmp	r0, #2
 8016762:	f47f af20 	bne.w	80165a6 <__ssvfiscanf_r+0x4e>
 8016766:	e7cf      	b.n	8016708 <__ssvfiscanf_r+0x1b0>
 8016768:	220a      	movs	r2, #10
 801676a:	e7dd      	b.n	8016728 <__ssvfiscanf_r+0x1d0>
 801676c:	2300      	movs	r3, #0
 801676e:	9342      	str	r3, [sp, #264]	; 0x108
 8016770:	2303      	movs	r3, #3
 8016772:	e7de      	b.n	8016732 <__ssvfiscanf_r+0x1da>
 8016774:	2308      	movs	r3, #8
 8016776:	9342      	str	r3, [sp, #264]	; 0x108
 8016778:	2304      	movs	r3, #4
 801677a:	e7da      	b.n	8016732 <__ssvfiscanf_r+0x1da>
 801677c:	4629      	mov	r1, r5
 801677e:	4640      	mov	r0, r8
 8016780:	f000 f9ce 	bl	8016b20 <__sccl>
 8016784:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801678a:	9341      	str	r3, [sp, #260]	; 0x104
 801678c:	4605      	mov	r5, r0
 801678e:	2301      	movs	r3, #1
 8016790:	e7cf      	b.n	8016732 <__ssvfiscanf_r+0x1da>
 8016792:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016798:	9341      	str	r3, [sp, #260]	; 0x104
 801679a:	2300      	movs	r3, #0
 801679c:	e7c9      	b.n	8016732 <__ssvfiscanf_r+0x1da>
 801679e:	2302      	movs	r3, #2
 80167a0:	e7c7      	b.n	8016732 <__ssvfiscanf_r+0x1da>
 80167a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80167a4:	06c3      	lsls	r3, r0, #27
 80167a6:	f53f aefe 	bmi.w	80165a6 <__ssvfiscanf_r+0x4e>
 80167aa:	9b00      	ldr	r3, [sp, #0]
 80167ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80167ae:	1d19      	adds	r1, r3, #4
 80167b0:	9100      	str	r1, [sp, #0]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	f010 0f01 	tst.w	r0, #1
 80167b8:	bf14      	ite	ne
 80167ba:	801a      	strhne	r2, [r3, #0]
 80167bc:	601a      	streq	r2, [r3, #0]
 80167be:	e6f2      	b.n	80165a6 <__ssvfiscanf_r+0x4e>
 80167c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80167c2:	4621      	mov	r1, r4
 80167c4:	4630      	mov	r0, r6
 80167c6:	4798      	blx	r3
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d0b6      	beq.n	801673a <__ssvfiscanf_r+0x1e2>
 80167cc:	e79c      	b.n	8016708 <__ssvfiscanf_r+0x1b0>
 80167ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80167d0:	3201      	adds	r2, #1
 80167d2:	9245      	str	r2, [sp, #276]	; 0x114
 80167d4:	6862      	ldr	r2, [r4, #4]
 80167d6:	3a01      	subs	r2, #1
 80167d8:	2a00      	cmp	r2, #0
 80167da:	6062      	str	r2, [r4, #4]
 80167dc:	dd02      	ble.n	80167e4 <__ssvfiscanf_r+0x28c>
 80167de:	3301      	adds	r3, #1
 80167e0:	6023      	str	r3, [r4, #0]
 80167e2:	e7ad      	b.n	8016740 <__ssvfiscanf_r+0x1e8>
 80167e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80167e6:	4621      	mov	r1, r4
 80167e8:	4630      	mov	r0, r6
 80167ea:	4798      	blx	r3
 80167ec:	2800      	cmp	r0, #0
 80167ee:	d0a7      	beq.n	8016740 <__ssvfiscanf_r+0x1e8>
 80167f0:	e78a      	b.n	8016708 <__ssvfiscanf_r+0x1b0>
 80167f2:	2b04      	cmp	r3, #4
 80167f4:	dc0e      	bgt.n	8016814 <__ssvfiscanf_r+0x2bc>
 80167f6:	466b      	mov	r3, sp
 80167f8:	4622      	mov	r2, r4
 80167fa:	a941      	add	r1, sp, #260	; 0x104
 80167fc:	4630      	mov	r0, r6
 80167fe:	f000 f87d 	bl	80168fc <_scanf_i>
 8016802:	e7ab      	b.n	801675c <__ssvfiscanf_r+0x204>
 8016804:	080164a5 	.word	0x080164a5
 8016808:	0801651f 	.word	0x0801651f
 801680c:	0801c1f3 	.word	0x0801c1f3
 8016810:	0801c35e 	.word	0x0801c35e
 8016814:	4b0b      	ldr	r3, [pc, #44]	; (8016844 <__ssvfiscanf_r+0x2ec>)
 8016816:	2b00      	cmp	r3, #0
 8016818:	f43f aec5 	beq.w	80165a6 <__ssvfiscanf_r+0x4e>
 801681c:	466b      	mov	r3, sp
 801681e:	4622      	mov	r2, r4
 8016820:	a941      	add	r1, sp, #260	; 0x104
 8016822:	4630      	mov	r0, r6
 8016824:	f3af 8000 	nop.w
 8016828:	e798      	b.n	801675c <__ssvfiscanf_r+0x204>
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016830:	bf18      	it	ne
 8016832:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8016836:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801683a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801683e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016840:	e7f9      	b.n	8016836 <__ssvfiscanf_r+0x2de>
 8016842:	bf00      	nop
 8016844:	00000000 	.word	0x00000000

08016848 <_scanf_chars>:
 8016848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801684c:	4615      	mov	r5, r2
 801684e:	688a      	ldr	r2, [r1, #8]
 8016850:	4680      	mov	r8, r0
 8016852:	460c      	mov	r4, r1
 8016854:	b932      	cbnz	r2, 8016864 <_scanf_chars+0x1c>
 8016856:	698a      	ldr	r2, [r1, #24]
 8016858:	2a00      	cmp	r2, #0
 801685a:	bf0c      	ite	eq
 801685c:	2201      	moveq	r2, #1
 801685e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8016862:	608a      	str	r2, [r1, #8]
 8016864:	6822      	ldr	r2, [r4, #0]
 8016866:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80168f8 <_scanf_chars+0xb0>
 801686a:	06d1      	lsls	r1, r2, #27
 801686c:	bf5f      	itttt	pl
 801686e:	681a      	ldrpl	r2, [r3, #0]
 8016870:	1d11      	addpl	r1, r2, #4
 8016872:	6019      	strpl	r1, [r3, #0]
 8016874:	6816      	ldrpl	r6, [r2, #0]
 8016876:	2700      	movs	r7, #0
 8016878:	69a0      	ldr	r0, [r4, #24]
 801687a:	b188      	cbz	r0, 80168a0 <_scanf_chars+0x58>
 801687c:	2801      	cmp	r0, #1
 801687e:	d107      	bne.n	8016890 <_scanf_chars+0x48>
 8016880:	682a      	ldr	r2, [r5, #0]
 8016882:	7811      	ldrb	r1, [r2, #0]
 8016884:	6962      	ldr	r2, [r4, #20]
 8016886:	5c52      	ldrb	r2, [r2, r1]
 8016888:	b952      	cbnz	r2, 80168a0 <_scanf_chars+0x58>
 801688a:	2f00      	cmp	r7, #0
 801688c:	d031      	beq.n	80168f2 <_scanf_chars+0xaa>
 801688e:	e022      	b.n	80168d6 <_scanf_chars+0x8e>
 8016890:	2802      	cmp	r0, #2
 8016892:	d120      	bne.n	80168d6 <_scanf_chars+0x8e>
 8016894:	682b      	ldr	r3, [r5, #0]
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	f813 3009 	ldrb.w	r3, [r3, r9]
 801689c:	071b      	lsls	r3, r3, #28
 801689e:	d41a      	bmi.n	80168d6 <_scanf_chars+0x8e>
 80168a0:	6823      	ldr	r3, [r4, #0]
 80168a2:	06da      	lsls	r2, r3, #27
 80168a4:	bf5e      	ittt	pl
 80168a6:	682b      	ldrpl	r3, [r5, #0]
 80168a8:	781b      	ldrbpl	r3, [r3, #0]
 80168aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80168ae:	682a      	ldr	r2, [r5, #0]
 80168b0:	686b      	ldr	r3, [r5, #4]
 80168b2:	3201      	adds	r2, #1
 80168b4:	602a      	str	r2, [r5, #0]
 80168b6:	68a2      	ldr	r2, [r4, #8]
 80168b8:	3b01      	subs	r3, #1
 80168ba:	3a01      	subs	r2, #1
 80168bc:	606b      	str	r3, [r5, #4]
 80168be:	3701      	adds	r7, #1
 80168c0:	60a2      	str	r2, [r4, #8]
 80168c2:	b142      	cbz	r2, 80168d6 <_scanf_chars+0x8e>
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	dcd7      	bgt.n	8016878 <_scanf_chars+0x30>
 80168c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168cc:	4629      	mov	r1, r5
 80168ce:	4640      	mov	r0, r8
 80168d0:	4798      	blx	r3
 80168d2:	2800      	cmp	r0, #0
 80168d4:	d0d0      	beq.n	8016878 <_scanf_chars+0x30>
 80168d6:	6823      	ldr	r3, [r4, #0]
 80168d8:	f013 0310 	ands.w	r3, r3, #16
 80168dc:	d105      	bne.n	80168ea <_scanf_chars+0xa2>
 80168de:	68e2      	ldr	r2, [r4, #12]
 80168e0:	3201      	adds	r2, #1
 80168e2:	60e2      	str	r2, [r4, #12]
 80168e4:	69a2      	ldr	r2, [r4, #24]
 80168e6:	b102      	cbz	r2, 80168ea <_scanf_chars+0xa2>
 80168e8:	7033      	strb	r3, [r6, #0]
 80168ea:	6923      	ldr	r3, [r4, #16]
 80168ec:	443b      	add	r3, r7
 80168ee:	6123      	str	r3, [r4, #16]
 80168f0:	2000      	movs	r0, #0
 80168f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168f6:	bf00      	nop
 80168f8:	0801c1f3 	.word	0x0801c1f3

080168fc <_scanf_i>:
 80168fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016900:	4698      	mov	r8, r3
 8016902:	4b76      	ldr	r3, [pc, #472]	; (8016adc <_scanf_i+0x1e0>)
 8016904:	460c      	mov	r4, r1
 8016906:	4682      	mov	sl, r0
 8016908:	4616      	mov	r6, r2
 801690a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801690e:	b087      	sub	sp, #28
 8016910:	ab03      	add	r3, sp, #12
 8016912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016916:	4b72      	ldr	r3, [pc, #456]	; (8016ae0 <_scanf_i+0x1e4>)
 8016918:	69a1      	ldr	r1, [r4, #24]
 801691a:	4a72      	ldr	r2, [pc, #456]	; (8016ae4 <_scanf_i+0x1e8>)
 801691c:	2903      	cmp	r1, #3
 801691e:	bf18      	it	ne
 8016920:	461a      	movne	r2, r3
 8016922:	68a3      	ldr	r3, [r4, #8]
 8016924:	9201      	str	r2, [sp, #4]
 8016926:	1e5a      	subs	r2, r3, #1
 8016928:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801692c:	bf88      	it	hi
 801692e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016932:	4627      	mov	r7, r4
 8016934:	bf82      	ittt	hi
 8016936:	eb03 0905 	addhi.w	r9, r3, r5
 801693a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801693e:	60a3      	strhi	r3, [r4, #8]
 8016940:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016944:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016948:	bf98      	it	ls
 801694a:	f04f 0900 	movls.w	r9, #0
 801694e:	6023      	str	r3, [r4, #0]
 8016950:	463d      	mov	r5, r7
 8016952:	f04f 0b00 	mov.w	fp, #0
 8016956:	6831      	ldr	r1, [r6, #0]
 8016958:	ab03      	add	r3, sp, #12
 801695a:	7809      	ldrb	r1, [r1, #0]
 801695c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016960:	2202      	movs	r2, #2
 8016962:	f7e9 fd6d 	bl	8000440 <memchr>
 8016966:	b328      	cbz	r0, 80169b4 <_scanf_i+0xb8>
 8016968:	f1bb 0f01 	cmp.w	fp, #1
 801696c:	d159      	bne.n	8016a22 <_scanf_i+0x126>
 801696e:	6862      	ldr	r2, [r4, #4]
 8016970:	b92a      	cbnz	r2, 801697e <_scanf_i+0x82>
 8016972:	6822      	ldr	r2, [r4, #0]
 8016974:	2308      	movs	r3, #8
 8016976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801697a:	6063      	str	r3, [r4, #4]
 801697c:	6022      	str	r2, [r4, #0]
 801697e:	6822      	ldr	r2, [r4, #0]
 8016980:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016984:	6022      	str	r2, [r4, #0]
 8016986:	68a2      	ldr	r2, [r4, #8]
 8016988:	1e51      	subs	r1, r2, #1
 801698a:	60a1      	str	r1, [r4, #8]
 801698c:	b192      	cbz	r2, 80169b4 <_scanf_i+0xb8>
 801698e:	6832      	ldr	r2, [r6, #0]
 8016990:	1c51      	adds	r1, r2, #1
 8016992:	6031      	str	r1, [r6, #0]
 8016994:	7812      	ldrb	r2, [r2, #0]
 8016996:	f805 2b01 	strb.w	r2, [r5], #1
 801699a:	6872      	ldr	r2, [r6, #4]
 801699c:	3a01      	subs	r2, #1
 801699e:	2a00      	cmp	r2, #0
 80169a0:	6072      	str	r2, [r6, #4]
 80169a2:	dc07      	bgt.n	80169b4 <_scanf_i+0xb8>
 80169a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80169a8:	4631      	mov	r1, r6
 80169aa:	4650      	mov	r0, sl
 80169ac:	4790      	blx	r2
 80169ae:	2800      	cmp	r0, #0
 80169b0:	f040 8085 	bne.w	8016abe <_scanf_i+0x1c2>
 80169b4:	f10b 0b01 	add.w	fp, fp, #1
 80169b8:	f1bb 0f03 	cmp.w	fp, #3
 80169bc:	d1cb      	bne.n	8016956 <_scanf_i+0x5a>
 80169be:	6863      	ldr	r3, [r4, #4]
 80169c0:	b90b      	cbnz	r3, 80169c6 <_scanf_i+0xca>
 80169c2:	230a      	movs	r3, #10
 80169c4:	6063      	str	r3, [r4, #4]
 80169c6:	6863      	ldr	r3, [r4, #4]
 80169c8:	4947      	ldr	r1, [pc, #284]	; (8016ae8 <_scanf_i+0x1ec>)
 80169ca:	6960      	ldr	r0, [r4, #20]
 80169cc:	1ac9      	subs	r1, r1, r3
 80169ce:	f000 f8a7 	bl	8016b20 <__sccl>
 80169d2:	f04f 0b00 	mov.w	fp, #0
 80169d6:	68a3      	ldr	r3, [r4, #8]
 80169d8:	6822      	ldr	r2, [r4, #0]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d03d      	beq.n	8016a5a <_scanf_i+0x15e>
 80169de:	6831      	ldr	r1, [r6, #0]
 80169e0:	6960      	ldr	r0, [r4, #20]
 80169e2:	f891 c000 	ldrb.w	ip, [r1]
 80169e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80169ea:	2800      	cmp	r0, #0
 80169ec:	d035      	beq.n	8016a5a <_scanf_i+0x15e>
 80169ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80169f2:	d124      	bne.n	8016a3e <_scanf_i+0x142>
 80169f4:	0510      	lsls	r0, r2, #20
 80169f6:	d522      	bpl.n	8016a3e <_scanf_i+0x142>
 80169f8:	f10b 0b01 	add.w	fp, fp, #1
 80169fc:	f1b9 0f00 	cmp.w	r9, #0
 8016a00:	d003      	beq.n	8016a0a <_scanf_i+0x10e>
 8016a02:	3301      	adds	r3, #1
 8016a04:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8016a08:	60a3      	str	r3, [r4, #8]
 8016a0a:	6873      	ldr	r3, [r6, #4]
 8016a0c:	3b01      	subs	r3, #1
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	6073      	str	r3, [r6, #4]
 8016a12:	dd1b      	ble.n	8016a4c <_scanf_i+0x150>
 8016a14:	6833      	ldr	r3, [r6, #0]
 8016a16:	3301      	adds	r3, #1
 8016a18:	6033      	str	r3, [r6, #0]
 8016a1a:	68a3      	ldr	r3, [r4, #8]
 8016a1c:	3b01      	subs	r3, #1
 8016a1e:	60a3      	str	r3, [r4, #8]
 8016a20:	e7d9      	b.n	80169d6 <_scanf_i+0xda>
 8016a22:	f1bb 0f02 	cmp.w	fp, #2
 8016a26:	d1ae      	bne.n	8016986 <_scanf_i+0x8a>
 8016a28:	6822      	ldr	r2, [r4, #0]
 8016a2a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016a2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016a32:	d1bf      	bne.n	80169b4 <_scanf_i+0xb8>
 8016a34:	2310      	movs	r3, #16
 8016a36:	6063      	str	r3, [r4, #4]
 8016a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016a3c:	e7a2      	b.n	8016984 <_scanf_i+0x88>
 8016a3e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016a42:	6022      	str	r2, [r4, #0]
 8016a44:	780b      	ldrb	r3, [r1, #0]
 8016a46:	f805 3b01 	strb.w	r3, [r5], #1
 8016a4a:	e7de      	b.n	8016a0a <_scanf_i+0x10e>
 8016a4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a50:	4631      	mov	r1, r6
 8016a52:	4650      	mov	r0, sl
 8016a54:	4798      	blx	r3
 8016a56:	2800      	cmp	r0, #0
 8016a58:	d0df      	beq.n	8016a1a <_scanf_i+0x11e>
 8016a5a:	6823      	ldr	r3, [r4, #0]
 8016a5c:	05db      	lsls	r3, r3, #23
 8016a5e:	d50d      	bpl.n	8016a7c <_scanf_i+0x180>
 8016a60:	42bd      	cmp	r5, r7
 8016a62:	d909      	bls.n	8016a78 <_scanf_i+0x17c>
 8016a64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a6c:	4632      	mov	r2, r6
 8016a6e:	4650      	mov	r0, sl
 8016a70:	4798      	blx	r3
 8016a72:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8016a76:	464d      	mov	r5, r9
 8016a78:	42bd      	cmp	r5, r7
 8016a7a:	d02d      	beq.n	8016ad8 <_scanf_i+0x1dc>
 8016a7c:	6822      	ldr	r2, [r4, #0]
 8016a7e:	f012 0210 	ands.w	r2, r2, #16
 8016a82:	d113      	bne.n	8016aac <_scanf_i+0x1b0>
 8016a84:	702a      	strb	r2, [r5, #0]
 8016a86:	6863      	ldr	r3, [r4, #4]
 8016a88:	9e01      	ldr	r6, [sp, #4]
 8016a8a:	4639      	mov	r1, r7
 8016a8c:	4650      	mov	r0, sl
 8016a8e:	47b0      	blx	r6
 8016a90:	6821      	ldr	r1, [r4, #0]
 8016a92:	f8d8 3000 	ldr.w	r3, [r8]
 8016a96:	f011 0f20 	tst.w	r1, #32
 8016a9a:	d013      	beq.n	8016ac4 <_scanf_i+0x1c8>
 8016a9c:	1d1a      	adds	r2, r3, #4
 8016a9e:	f8c8 2000 	str.w	r2, [r8]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	6018      	str	r0, [r3, #0]
 8016aa6:	68e3      	ldr	r3, [r4, #12]
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	60e3      	str	r3, [r4, #12]
 8016aac:	1bed      	subs	r5, r5, r7
 8016aae:	44ab      	add	fp, r5
 8016ab0:	6925      	ldr	r5, [r4, #16]
 8016ab2:	445d      	add	r5, fp
 8016ab4:	6125      	str	r5, [r4, #16]
 8016ab6:	2000      	movs	r0, #0
 8016ab8:	b007      	add	sp, #28
 8016aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016abe:	f04f 0b00 	mov.w	fp, #0
 8016ac2:	e7ca      	b.n	8016a5a <_scanf_i+0x15e>
 8016ac4:	1d1a      	adds	r2, r3, #4
 8016ac6:	f8c8 2000 	str.w	r2, [r8]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	f011 0f01 	tst.w	r1, #1
 8016ad0:	bf14      	ite	ne
 8016ad2:	8018      	strhne	r0, [r3, #0]
 8016ad4:	6018      	streq	r0, [r3, #0]
 8016ad6:	e7e6      	b.n	8016aa6 <_scanf_i+0x1aa>
 8016ad8:	2001      	movs	r0, #1
 8016ada:	e7ed      	b.n	8016ab8 <_scanf_i+0x1bc>
 8016adc:	080198f8 	.word	0x080198f8
 8016ae0:	08016c9d 	.word	0x08016c9d
 8016ae4:	08014e41 	.word	0x08014e41
 8016ae8:	0801cc95 	.word	0x0801cc95

08016aec <_read_r>:
 8016aec:	b538      	push	{r3, r4, r5, lr}
 8016aee:	4d07      	ldr	r5, [pc, #28]	; (8016b0c <_read_r+0x20>)
 8016af0:	4604      	mov	r4, r0
 8016af2:	4608      	mov	r0, r1
 8016af4:	4611      	mov	r1, r2
 8016af6:	2200      	movs	r2, #0
 8016af8:	602a      	str	r2, [r5, #0]
 8016afa:	461a      	mov	r2, r3
 8016afc:	f7ea fe0e 	bl	800171c <_read>
 8016b00:	1c43      	adds	r3, r0, #1
 8016b02:	d102      	bne.n	8016b0a <_read_r+0x1e>
 8016b04:	682b      	ldr	r3, [r5, #0]
 8016b06:	b103      	cbz	r3, 8016b0a <_read_r+0x1e>
 8016b08:	6023      	str	r3, [r4, #0]
 8016b0a:	bd38      	pop	{r3, r4, r5, pc}
 8016b0c:	20003e80 	.word	0x20003e80

08016b10 <nan>:
 8016b10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016b18 <nan+0x8>
 8016b14:	4770      	bx	lr
 8016b16:	bf00      	nop
 8016b18:	00000000 	.word	0x00000000
 8016b1c:	7ff80000 	.word	0x7ff80000

08016b20 <__sccl>:
 8016b20:	b570      	push	{r4, r5, r6, lr}
 8016b22:	780b      	ldrb	r3, [r1, #0]
 8016b24:	4604      	mov	r4, r0
 8016b26:	2b5e      	cmp	r3, #94	; 0x5e
 8016b28:	bf0b      	itete	eq
 8016b2a:	784b      	ldrbeq	r3, [r1, #1]
 8016b2c:	1c48      	addne	r0, r1, #1
 8016b2e:	1c88      	addeq	r0, r1, #2
 8016b30:	2200      	movne	r2, #0
 8016b32:	bf08      	it	eq
 8016b34:	2201      	moveq	r2, #1
 8016b36:	1e61      	subs	r1, r4, #1
 8016b38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016b3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016b40:	42a9      	cmp	r1, r5
 8016b42:	d1fb      	bne.n	8016b3c <__sccl+0x1c>
 8016b44:	b90b      	cbnz	r3, 8016b4a <__sccl+0x2a>
 8016b46:	3801      	subs	r0, #1
 8016b48:	bd70      	pop	{r4, r5, r6, pc}
 8016b4a:	f082 0201 	eor.w	r2, r2, #1
 8016b4e:	54e2      	strb	r2, [r4, r3]
 8016b50:	4605      	mov	r5, r0
 8016b52:	4628      	mov	r0, r5
 8016b54:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016b58:	292d      	cmp	r1, #45	; 0x2d
 8016b5a:	d006      	beq.n	8016b6a <__sccl+0x4a>
 8016b5c:	295d      	cmp	r1, #93	; 0x5d
 8016b5e:	d0f3      	beq.n	8016b48 <__sccl+0x28>
 8016b60:	b909      	cbnz	r1, 8016b66 <__sccl+0x46>
 8016b62:	4628      	mov	r0, r5
 8016b64:	e7f0      	b.n	8016b48 <__sccl+0x28>
 8016b66:	460b      	mov	r3, r1
 8016b68:	e7f1      	b.n	8016b4e <__sccl+0x2e>
 8016b6a:	786e      	ldrb	r6, [r5, #1]
 8016b6c:	2e5d      	cmp	r6, #93	; 0x5d
 8016b6e:	d0fa      	beq.n	8016b66 <__sccl+0x46>
 8016b70:	42b3      	cmp	r3, r6
 8016b72:	dcf8      	bgt.n	8016b66 <__sccl+0x46>
 8016b74:	3502      	adds	r5, #2
 8016b76:	4619      	mov	r1, r3
 8016b78:	3101      	adds	r1, #1
 8016b7a:	428e      	cmp	r6, r1
 8016b7c:	5462      	strb	r2, [r4, r1]
 8016b7e:	dcfb      	bgt.n	8016b78 <__sccl+0x58>
 8016b80:	1af1      	subs	r1, r6, r3
 8016b82:	3901      	subs	r1, #1
 8016b84:	1c58      	adds	r0, r3, #1
 8016b86:	42b3      	cmp	r3, r6
 8016b88:	bfa8      	it	ge
 8016b8a:	2100      	movge	r1, #0
 8016b8c:	1843      	adds	r3, r0, r1
 8016b8e:	e7e0      	b.n	8016b52 <__sccl+0x32>

08016b90 <strncmp>:
 8016b90:	b510      	push	{r4, lr}
 8016b92:	b17a      	cbz	r2, 8016bb4 <strncmp+0x24>
 8016b94:	4603      	mov	r3, r0
 8016b96:	3901      	subs	r1, #1
 8016b98:	1884      	adds	r4, r0, r2
 8016b9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016b9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016ba2:	4290      	cmp	r0, r2
 8016ba4:	d101      	bne.n	8016baa <strncmp+0x1a>
 8016ba6:	42a3      	cmp	r3, r4
 8016ba8:	d101      	bne.n	8016bae <strncmp+0x1e>
 8016baa:	1a80      	subs	r0, r0, r2
 8016bac:	bd10      	pop	{r4, pc}
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	d1f3      	bne.n	8016b9a <strncmp+0xa>
 8016bb2:	e7fa      	b.n	8016baa <strncmp+0x1a>
 8016bb4:	4610      	mov	r0, r2
 8016bb6:	e7f9      	b.n	8016bac <strncmp+0x1c>

08016bb8 <_strtoul_l.constprop.0>:
 8016bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bbc:	4f36      	ldr	r7, [pc, #216]	; (8016c98 <_strtoul_l.constprop.0+0xe0>)
 8016bbe:	4686      	mov	lr, r0
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	4628      	mov	r0, r5
 8016bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bc8:	5de6      	ldrb	r6, [r4, r7]
 8016bca:	f016 0608 	ands.w	r6, r6, #8
 8016bce:	d1f8      	bne.n	8016bc2 <_strtoul_l.constprop.0+0xa>
 8016bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8016bd2:	d12f      	bne.n	8016c34 <_strtoul_l.constprop.0+0x7c>
 8016bd4:	782c      	ldrb	r4, [r5, #0]
 8016bd6:	2601      	movs	r6, #1
 8016bd8:	1c85      	adds	r5, r0, #2
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d057      	beq.n	8016c8e <_strtoul_l.constprop.0+0xd6>
 8016bde:	2b10      	cmp	r3, #16
 8016be0:	d109      	bne.n	8016bf6 <_strtoul_l.constprop.0+0x3e>
 8016be2:	2c30      	cmp	r4, #48	; 0x30
 8016be4:	d107      	bne.n	8016bf6 <_strtoul_l.constprop.0+0x3e>
 8016be6:	7828      	ldrb	r0, [r5, #0]
 8016be8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016bec:	2858      	cmp	r0, #88	; 0x58
 8016bee:	d149      	bne.n	8016c84 <_strtoul_l.constprop.0+0xcc>
 8016bf0:	786c      	ldrb	r4, [r5, #1]
 8016bf2:	2310      	movs	r3, #16
 8016bf4:	3502      	adds	r5, #2
 8016bf6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016bfa:	2700      	movs	r7, #0
 8016bfc:	fbb8 f8f3 	udiv	r8, r8, r3
 8016c00:	fb03 f908 	mul.w	r9, r3, r8
 8016c04:	ea6f 0909 	mvn.w	r9, r9
 8016c08:	4638      	mov	r0, r7
 8016c0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016c0e:	f1bc 0f09 	cmp.w	ip, #9
 8016c12:	d814      	bhi.n	8016c3e <_strtoul_l.constprop.0+0x86>
 8016c14:	4664      	mov	r4, ip
 8016c16:	42a3      	cmp	r3, r4
 8016c18:	dd22      	ble.n	8016c60 <_strtoul_l.constprop.0+0xa8>
 8016c1a:	2f00      	cmp	r7, #0
 8016c1c:	db1d      	blt.n	8016c5a <_strtoul_l.constprop.0+0xa2>
 8016c1e:	4580      	cmp	r8, r0
 8016c20:	d31b      	bcc.n	8016c5a <_strtoul_l.constprop.0+0xa2>
 8016c22:	d101      	bne.n	8016c28 <_strtoul_l.constprop.0+0x70>
 8016c24:	45a1      	cmp	r9, r4
 8016c26:	db18      	blt.n	8016c5a <_strtoul_l.constprop.0+0xa2>
 8016c28:	fb00 4003 	mla	r0, r0, r3, r4
 8016c2c:	2701      	movs	r7, #1
 8016c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c32:	e7ea      	b.n	8016c0a <_strtoul_l.constprop.0+0x52>
 8016c34:	2c2b      	cmp	r4, #43	; 0x2b
 8016c36:	bf04      	itt	eq
 8016c38:	782c      	ldrbeq	r4, [r5, #0]
 8016c3a:	1c85      	addeq	r5, r0, #2
 8016c3c:	e7cd      	b.n	8016bda <_strtoul_l.constprop.0+0x22>
 8016c3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016c42:	f1bc 0f19 	cmp.w	ip, #25
 8016c46:	d801      	bhi.n	8016c4c <_strtoul_l.constprop.0+0x94>
 8016c48:	3c37      	subs	r4, #55	; 0x37
 8016c4a:	e7e4      	b.n	8016c16 <_strtoul_l.constprop.0+0x5e>
 8016c4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016c50:	f1bc 0f19 	cmp.w	ip, #25
 8016c54:	d804      	bhi.n	8016c60 <_strtoul_l.constprop.0+0xa8>
 8016c56:	3c57      	subs	r4, #87	; 0x57
 8016c58:	e7dd      	b.n	8016c16 <_strtoul_l.constprop.0+0x5e>
 8016c5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016c5e:	e7e6      	b.n	8016c2e <_strtoul_l.constprop.0+0x76>
 8016c60:	2f00      	cmp	r7, #0
 8016c62:	da07      	bge.n	8016c74 <_strtoul_l.constprop.0+0xbc>
 8016c64:	2322      	movs	r3, #34	; 0x22
 8016c66:	f8ce 3000 	str.w	r3, [lr]
 8016c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c6e:	b932      	cbnz	r2, 8016c7e <_strtoul_l.constprop.0+0xc6>
 8016c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c74:	b106      	cbz	r6, 8016c78 <_strtoul_l.constprop.0+0xc0>
 8016c76:	4240      	negs	r0, r0
 8016c78:	2a00      	cmp	r2, #0
 8016c7a:	d0f9      	beq.n	8016c70 <_strtoul_l.constprop.0+0xb8>
 8016c7c:	b107      	cbz	r7, 8016c80 <_strtoul_l.constprop.0+0xc8>
 8016c7e:	1e69      	subs	r1, r5, #1
 8016c80:	6011      	str	r1, [r2, #0]
 8016c82:	e7f5      	b.n	8016c70 <_strtoul_l.constprop.0+0xb8>
 8016c84:	2430      	movs	r4, #48	; 0x30
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d1b5      	bne.n	8016bf6 <_strtoul_l.constprop.0+0x3e>
 8016c8a:	2308      	movs	r3, #8
 8016c8c:	e7b3      	b.n	8016bf6 <_strtoul_l.constprop.0+0x3e>
 8016c8e:	2c30      	cmp	r4, #48	; 0x30
 8016c90:	d0a9      	beq.n	8016be6 <_strtoul_l.constprop.0+0x2e>
 8016c92:	230a      	movs	r3, #10
 8016c94:	e7af      	b.n	8016bf6 <_strtoul_l.constprop.0+0x3e>
 8016c96:	bf00      	nop
 8016c98:	0801c1f3 	.word	0x0801c1f3

08016c9c <_strtoul_r>:
 8016c9c:	f7ff bf8c 	b.w	8016bb8 <_strtoul_l.constprop.0>

08016ca0 <__submore>:
 8016ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca4:	460c      	mov	r4, r1
 8016ca6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cac:	4299      	cmp	r1, r3
 8016cae:	d11d      	bne.n	8016cec <__submore+0x4c>
 8016cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016cb4:	f7fc f9d2 	bl	801305c <_malloc_r>
 8016cb8:	b918      	cbnz	r0, 8016cc2 <__submore+0x22>
 8016cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016cc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8016cc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8016cce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016cd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016cd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016cda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016cde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016ce2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016ce6:	6020      	str	r0, [r4, #0]
 8016ce8:	2000      	movs	r0, #0
 8016cea:	e7e8      	b.n	8016cbe <__submore+0x1e>
 8016cec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016cee:	0077      	lsls	r7, r6, #1
 8016cf0:	463a      	mov	r2, r7
 8016cf2:	f7ff fa4c 	bl	801618e <_realloc_r>
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d0de      	beq.n	8016cba <__submore+0x1a>
 8016cfc:	eb00 0806 	add.w	r8, r0, r6
 8016d00:	4601      	mov	r1, r0
 8016d02:	4632      	mov	r2, r6
 8016d04:	4640      	mov	r0, r8
 8016d06:	f7fc f911 	bl	8012f2c <memcpy>
 8016d0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016d0e:	f8c4 8000 	str.w	r8, [r4]
 8016d12:	e7e9      	b.n	8016ce8 <__submore+0x48>

08016d14 <__ascii_wctomb>:
 8016d14:	b149      	cbz	r1, 8016d2a <__ascii_wctomb+0x16>
 8016d16:	2aff      	cmp	r2, #255	; 0xff
 8016d18:	bf85      	ittet	hi
 8016d1a:	238a      	movhi	r3, #138	; 0x8a
 8016d1c:	6003      	strhi	r3, [r0, #0]
 8016d1e:	700a      	strbls	r2, [r1, #0]
 8016d20:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016d24:	bf98      	it	ls
 8016d26:	2001      	movls	r0, #1
 8016d28:	4770      	bx	lr
 8016d2a:	4608      	mov	r0, r1
 8016d2c:	4770      	bx	lr
	...

08016d30 <__assert_func>:
 8016d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d32:	4614      	mov	r4, r2
 8016d34:	461a      	mov	r2, r3
 8016d36:	4b09      	ldr	r3, [pc, #36]	; (8016d5c <__assert_func+0x2c>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	4605      	mov	r5, r0
 8016d3c:	68d8      	ldr	r0, [r3, #12]
 8016d3e:	b14c      	cbz	r4, 8016d54 <__assert_func+0x24>
 8016d40:	4b07      	ldr	r3, [pc, #28]	; (8016d60 <__assert_func+0x30>)
 8016d42:	9100      	str	r1, [sp, #0]
 8016d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d48:	4906      	ldr	r1, [pc, #24]	; (8016d64 <__assert_func+0x34>)
 8016d4a:	462b      	mov	r3, r5
 8016d4c:	f7fb ff62 	bl	8012c14 <fiprintf>
 8016d50:	f000 f814 	bl	8016d7c <abort>
 8016d54:	4b04      	ldr	r3, [pc, #16]	; (8016d68 <__assert_func+0x38>)
 8016d56:	461c      	mov	r4, r3
 8016d58:	e7f3      	b.n	8016d42 <__assert_func+0x12>
 8016d5a:	bf00      	nop
 8016d5c:	20000088 	.word	0x20000088
 8016d60:	0801cc97 	.word	0x0801cc97
 8016d64:	0801cca4 	.word	0x0801cca4
 8016d68:	0801ccd2 	.word	0x0801ccd2

08016d6c <_malloc_usable_size_r>:
 8016d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d70:	1f18      	subs	r0, r3, #4
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	bfbc      	itt	lt
 8016d76:	580b      	ldrlt	r3, [r1, r0]
 8016d78:	18c0      	addlt	r0, r0, r3
 8016d7a:	4770      	bx	lr

08016d7c <abort>:
 8016d7c:	b508      	push	{r3, lr}
 8016d7e:	2006      	movs	r0, #6
 8016d80:	f000 f82c 	bl	8016ddc <raise>
 8016d84:	2001      	movs	r0, #1
 8016d86:	f7ea fcbf 	bl	8001708 <_exit>

08016d8a <_raise_r>:
 8016d8a:	291f      	cmp	r1, #31
 8016d8c:	b538      	push	{r3, r4, r5, lr}
 8016d8e:	4604      	mov	r4, r0
 8016d90:	460d      	mov	r5, r1
 8016d92:	d904      	bls.n	8016d9e <_raise_r+0x14>
 8016d94:	2316      	movs	r3, #22
 8016d96:	6003      	str	r3, [r0, #0]
 8016d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d9c:	bd38      	pop	{r3, r4, r5, pc}
 8016d9e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016da0:	b112      	cbz	r2, 8016da8 <_raise_r+0x1e>
 8016da2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016da6:	b94b      	cbnz	r3, 8016dbc <_raise_r+0x32>
 8016da8:	4620      	mov	r0, r4
 8016daa:	f000 f831 	bl	8016e10 <_getpid_r>
 8016dae:	462a      	mov	r2, r5
 8016db0:	4601      	mov	r1, r0
 8016db2:	4620      	mov	r0, r4
 8016db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016db8:	f000 b818 	b.w	8016dec <_kill_r>
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d00a      	beq.n	8016dd6 <_raise_r+0x4c>
 8016dc0:	1c59      	adds	r1, r3, #1
 8016dc2:	d103      	bne.n	8016dcc <_raise_r+0x42>
 8016dc4:	2316      	movs	r3, #22
 8016dc6:	6003      	str	r3, [r0, #0]
 8016dc8:	2001      	movs	r0, #1
 8016dca:	e7e7      	b.n	8016d9c <_raise_r+0x12>
 8016dcc:	2400      	movs	r4, #0
 8016dce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	4798      	blx	r3
 8016dd6:	2000      	movs	r0, #0
 8016dd8:	e7e0      	b.n	8016d9c <_raise_r+0x12>
	...

08016ddc <raise>:
 8016ddc:	4b02      	ldr	r3, [pc, #8]	; (8016de8 <raise+0xc>)
 8016dde:	4601      	mov	r1, r0
 8016de0:	6818      	ldr	r0, [r3, #0]
 8016de2:	f7ff bfd2 	b.w	8016d8a <_raise_r>
 8016de6:	bf00      	nop
 8016de8:	20000088 	.word	0x20000088

08016dec <_kill_r>:
 8016dec:	b538      	push	{r3, r4, r5, lr}
 8016dee:	4d07      	ldr	r5, [pc, #28]	; (8016e0c <_kill_r+0x20>)
 8016df0:	2300      	movs	r3, #0
 8016df2:	4604      	mov	r4, r0
 8016df4:	4608      	mov	r0, r1
 8016df6:	4611      	mov	r1, r2
 8016df8:	602b      	str	r3, [r5, #0]
 8016dfa:	f7ea fc75 	bl	80016e8 <_kill>
 8016dfe:	1c43      	adds	r3, r0, #1
 8016e00:	d102      	bne.n	8016e08 <_kill_r+0x1c>
 8016e02:	682b      	ldr	r3, [r5, #0]
 8016e04:	b103      	cbz	r3, 8016e08 <_kill_r+0x1c>
 8016e06:	6023      	str	r3, [r4, #0]
 8016e08:	bd38      	pop	{r3, r4, r5, pc}
 8016e0a:	bf00      	nop
 8016e0c:	20003e80 	.word	0x20003e80

08016e10 <_getpid_r>:
 8016e10:	f7ea bc62 	b.w	80016d8 <_getpid>

08016e14 <_gettimeofday>:
 8016e14:	4b02      	ldr	r3, [pc, #8]	; (8016e20 <_gettimeofday+0xc>)
 8016e16:	2258      	movs	r2, #88	; 0x58
 8016e18:	601a      	str	r2, [r3, #0]
 8016e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e1e:	4770      	bx	lr
 8016e20:	20003e80 	.word	0x20003e80

08016e24 <_init>:
 8016e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e26:	bf00      	nop
 8016e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e2a:	bc08      	pop	{r3}
 8016e2c:	469e      	mov	lr, r3
 8016e2e:	4770      	bx	lr

08016e30 <_fini>:
 8016e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e32:	bf00      	nop
 8016e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e36:	bc08      	pop	{r3}
 8016e38:	469e      	mov	lr, r3
 8016e3a:	4770      	bx	lr
