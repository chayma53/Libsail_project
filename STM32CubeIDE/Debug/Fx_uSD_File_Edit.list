
Fx_uSD_File_Edit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013854  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004374  08013a18  08013a18  00023a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d8c  08017d8c  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08017d8c  08017d8c  00027d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d94  08017d94  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d94  08017d94  00027d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017d98  08017d98  00027d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08017d9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          000039a0  20000248  20000248  00030248  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003be8  20003be8  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   000414f3  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009d98  00000000  00000000  0007176b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002248  00000000  00000000  0007b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d10  00000000  00000000  0007d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003b42e  00000000  00000000  0007f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c77f  00000000  00000000  000ba88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001123bb  00000000  00000000  000f700d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002093c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009524  00000000  00000000  00209418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0021293c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00212960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000248 	.word	0x20000248
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080139fc 	.word	0x080139fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000024c 	.word	0x2000024c
 80001fc:	080139fc 	.word	0x080139fc

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4919      	ldr	r1, [pc, #100]	; (800026c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4915      	ldr	r1, [pc, #84]	; (8000278 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490f      	ldr	r1, [pc, #60]	; (800027c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800024c:	f7ff bffe 	b.w	800024c <__tx_SVCallHandler>

08000250 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000250:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000252:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000256:	4770      	bx	lr

08000258 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000258:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800025a:	f000 f891 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000262:	4770      	bx	lr

08000264 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_NMIHandler>

08000268 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800026c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000270:	200035c4 	.word	0x200035c4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000274:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000278:	001b773f 	.word	0x001b773f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	40ff0000 	.word	0x40ff0000

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20003664 	.word	0x20003664
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	200035c8 	.word	0x200035c8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	200035cc 	.word	0x200035cc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	20003bd4 	.word	0x20003bd4

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f00e fc07 	bl	800ebec <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f00e fb10 	bl	800ea08 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	20003670 	.word	0x20003670
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	20003bd4 	.word	0x20003bd4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	20003674 	.word	0x20003674
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	20003700 	.word	0x20003700
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	20003704 	.word	0x20003704
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	200036fc 	.word	0x200036fc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	200036f8 	.word	0x200036f8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20003664 	.word	0x20003664
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	200035c8 	.word	0x200035c8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	200035cc 	.word	0x200035cc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <strcmp>:
 80004e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	bf28      	it	cs
 80004ec:	429a      	cmpcs	r2, r3
 80004ee:	d0f7      	beq.n	80004e0 <strcmp>
 80004f0:	1ad0      	subs	r0, r2, r3
 80004f2:	4770      	bx	lr

080004f4 <strlen>:
 80004f4:	4603      	mov	r3, r0
 80004f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d1fb      	bne.n	80004f6 <strlen+0x2>
 80004fe:	1a18      	subs	r0, r3, r0
 8000500:	3801      	subs	r0, #1
 8000502:	4770      	bx	lr

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_dmul>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8de 	bleq	8000a58 <__aeabi_dmul+0x1dc>
 800089c:	442c      	add	r4, r5
 800089e:	ea81 0603 	eor.w	r6, r1, r3
 80008a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ae:	bf18      	it	ne
 80008b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008bc:	d038      	beq.n	8000930 <__aeabi_dmul+0xb4>
 80008be:	fba0 ce02 	umull	ip, lr, r0, r2
 80008c2:	f04f 0500 	mov.w	r5, #0
 80008c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008d2:	f04f 0600 	mov.w	r6, #0
 80008d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008da:	f09c 0f00 	teq	ip, #0
 80008de:	bf18      	it	ne
 80008e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008f0:	d204      	bcs.n	80008fc <__aeabi_dmul+0x80>
 80008f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008f6:	416d      	adcs	r5, r5
 80008f8:	eb46 0606 	adc.w	r6, r6, r6
 80008fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000900:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000904:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000908:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800090c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000910:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000914:	bf88      	it	hi
 8000916:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091a:	d81e      	bhi.n	800095a <__aeabi_dmul+0xde>
 800091c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000920:	bf08      	it	eq
 8000922:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000934:	ea46 0101 	orr.w	r1, r6, r1
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	f300 80ab 	bgt.w	8000ab4 <__aeabi_dmul+0x238>
 800095e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000962:	bfde      	ittt	le
 8000964:	2000      	movle	r0, #0
 8000966:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800096a:	bd70      	pople	{r4, r5, r6, pc}
 800096c:	f1c4 0400 	rsb	r4, r4, #0
 8000970:	3c20      	subs	r4, #32
 8000972:	da35      	bge.n	80009e0 <__aeabi_dmul+0x164>
 8000974:	340c      	adds	r4, #12
 8000976:	dc1b      	bgt.n	80009b0 <__aeabi_dmul+0x134>
 8000978:	f104 0414 	add.w	r4, r4, #20
 800097c:	f1c4 0520 	rsb	r5, r4, #32
 8000980:	fa00 f305 	lsl.w	r3, r0, r5
 8000984:	fa20 f004 	lsr.w	r0, r0, r4
 8000988:	fa01 f205 	lsl.w	r2, r1, r5
 800098c:	ea40 0002 	orr.w	r0, r0, r2
 8000990:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000994:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800099c:	fa21 f604 	lsr.w	r6, r1, r4
 80009a0:	eb42 0106 	adc.w	r1, r2, r6
 80009a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a8:	bf08      	it	eq
 80009aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f1c4 040c 	rsb	r4, r4, #12
 80009b4:	f1c4 0520 	rsb	r5, r4, #32
 80009b8:	fa00 f304 	lsl.w	r3, r0, r4
 80009bc:	fa20 f005 	lsr.w	r0, r0, r5
 80009c0:	fa01 f204 	lsl.w	r2, r1, r4
 80009c4:	ea40 0002 	orr.w	r0, r0, r2
 80009c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009d0:	f141 0100 	adc.w	r1, r1, #0
 80009d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d8:	bf08      	it	eq
 80009da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f1c4 0520 	rsb	r5, r4, #32
 80009e4:	fa00 f205 	lsl.w	r2, r0, r5
 80009e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009ec:	fa20 f304 	lsr.w	r3, r0, r4
 80009f0:	fa01 f205 	lsl.w	r2, r1, r5
 80009f4:	ea43 0302 	orr.w	r3, r3, r2
 80009f8:	fa21 f004 	lsr.w	r0, r1, r4
 80009fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a00:	fa21 f204 	lsr.w	r2, r1, r4
 8000a04:	ea20 0002 	bic.w	r0, r0, r2
 8000a08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f094 0f00 	teq	r4, #0
 8000a1c:	d10f      	bne.n	8000a3e <__aeabi_dmul+0x1c2>
 8000a1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a22:	0040      	lsls	r0, r0, #1
 8000a24:	eb41 0101 	adc.w	r1, r1, r1
 8000a28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a2c:	bf08      	it	eq
 8000a2e:	3c01      	subeq	r4, #1
 8000a30:	d0f7      	beq.n	8000a22 <__aeabi_dmul+0x1a6>
 8000a32:	ea41 0106 	orr.w	r1, r1, r6
 8000a36:	f095 0f00 	teq	r5, #0
 8000a3a:	bf18      	it	ne
 8000a3c:	4770      	bxne	lr
 8000a3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a42:	0052      	lsls	r2, r2, #1
 8000a44:	eb43 0303 	adc.w	r3, r3, r3
 8000a48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a4c:	bf08      	it	eq
 8000a4e:	3d01      	subeq	r5, #1
 8000a50:	d0f7      	beq.n	8000a42 <__aeabi_dmul+0x1c6>
 8000a52:	ea43 0306 	orr.w	r3, r3, r6
 8000a56:	4770      	bx	lr
 8000a58:	ea94 0f0c 	teq	r4, ip
 8000a5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a60:	bf18      	it	ne
 8000a62:	ea95 0f0c 	teqne	r5, ip
 8000a66:	d00c      	beq.n	8000a82 <__aeabi_dmul+0x206>
 8000a68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a6c:	bf18      	it	ne
 8000a6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a72:	d1d1      	bne.n	8000a18 <__aeabi_dmul+0x19c>
 8000a74:	ea81 0103 	eor.w	r1, r1, r3
 8000a78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a86:	bf06      	itte	eq
 8000a88:	4610      	moveq	r0, r2
 8000a8a:	4619      	moveq	r1, r3
 8000a8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a90:	d019      	beq.n	8000ac6 <__aeabi_dmul+0x24a>
 8000a92:	ea94 0f0c 	teq	r4, ip
 8000a96:	d102      	bne.n	8000a9e <__aeabi_dmul+0x222>
 8000a98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a9c:	d113      	bne.n	8000ac6 <__aeabi_dmul+0x24a>
 8000a9e:	ea95 0f0c 	teq	r5, ip
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_dmul+0x234>
 8000aa4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000aa8:	bf1c      	itt	ne
 8000aaa:	4610      	movne	r0, r2
 8000aac:	4619      	movne	r1, r3
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dmul+0x24a>
 8000ab0:	ea81 0103 	eor.w	r1, r1, r3
 8000ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000abc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ace:	bd70      	pop	{r4, r5, r6, pc}

08000ad0 <__aeabi_ddiv>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ade:	bf1d      	ittte	ne
 8000ae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ae4:	ea94 0f0c 	teqne	r4, ip
 8000ae8:	ea95 0f0c 	teqne	r5, ip
 8000aec:	f000 f8a7 	bleq	8000c3e <__aeabi_ddiv+0x16e>
 8000af0:	eba4 0405 	sub.w	r4, r4, r5
 8000af4:	ea81 0e03 	eor.w	lr, r1, r3
 8000af8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000afc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b00:	f000 8088 	beq.w	8000c14 <__aeabi_ddiv+0x144>
 8000b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b20:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b28:	429d      	cmp	r5, r3
 8000b2a:	bf08      	it	eq
 8000b2c:	4296      	cmpeq	r6, r2
 8000b2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b32:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b36:	d202      	bcs.n	8000b3e <__aeabi_ddiv+0x6e>
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	eb65 0503 	sbc.w	r5, r5, r3
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5a:	bf22      	ittt	cs
 8000b5c:	1ab6      	subcs	r6, r6, r2
 8000b5e:	4675      	movcs	r5, lr
 8000b60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b72:	bf22      	ittt	cs
 8000b74:	1ab6      	subcs	r6, r6, r2
 8000b76:	4675      	movcs	r5, lr
 8000b78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b7c:	085b      	lsrs	r3, r3, #1
 8000b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b82:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b8a:	bf22      	ittt	cs
 8000b8c:	1ab6      	subcs	r6, r6, r2
 8000b8e:	4675      	movcs	r5, lr
 8000b90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ba2:	bf22      	ittt	cs
 8000ba4:	1ab6      	subcs	r6, r6, r2
 8000ba6:	4675      	movcs	r5, lr
 8000ba8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bac:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bb0:	d018      	beq.n	8000be4 <__aeabi_ddiv+0x114>
 8000bb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bce:	d1c0      	bne.n	8000b52 <__aeabi_ddiv+0x82>
 8000bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd4:	d10b      	bne.n	8000bee <__aeabi_ddiv+0x11e>
 8000bd6:	ea41 0100 	orr.w	r1, r1, r0
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000be2:	e7b6      	b.n	8000b52 <__aeabi_ddiv+0x82>
 8000be4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be8:	bf04      	itt	eq
 8000bea:	4301      	orreq	r1, r0
 8000bec:	2000      	moveq	r0, #0
 8000bee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bf2:	bf88      	it	hi
 8000bf4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bf8:	f63f aeaf 	bhi.w	800095a <__aeabi_dmul+0xde>
 8000bfc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c00:	bf04      	itt	eq
 8000c02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c0a:	f150 0000 	adcs.w	r0, r0, #0
 8000c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
 8000c14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c20:	bfc2      	ittt	gt
 8000c22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c2a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c30:	f04f 0e00 	mov.w	lr, #0
 8000c34:	3c01      	subs	r4, #1
 8000c36:	e690      	b.n	800095a <__aeabi_dmul+0xde>
 8000c38:	ea45 0e06 	orr.w	lr, r5, r6
 8000c3c:	e68d      	b.n	800095a <__aeabi_dmul+0xde>
 8000c3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c42:	ea94 0f0c 	teq	r4, ip
 8000c46:	bf08      	it	eq
 8000c48:	ea95 0f0c 	teqeq	r5, ip
 8000c4c:	f43f af3b 	beq.w	8000ac6 <__aeabi_dmul+0x24a>
 8000c50:	ea94 0f0c 	teq	r4, ip
 8000c54:	d10a      	bne.n	8000c6c <__aeabi_ddiv+0x19c>
 8000c56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c5a:	f47f af34 	bne.w	8000ac6 <__aeabi_dmul+0x24a>
 8000c5e:	ea95 0f0c 	teq	r5, ip
 8000c62:	f47f af25 	bne.w	8000ab0 <__aeabi_dmul+0x234>
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	e72c      	b.n	8000ac6 <__aeabi_dmul+0x24a>
 8000c6c:	ea95 0f0c 	teq	r5, ip
 8000c70:	d106      	bne.n	8000c80 <__aeabi_ddiv+0x1b0>
 8000c72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c76:	f43f aefd 	beq.w	8000a74 <__aeabi_dmul+0x1f8>
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	e722      	b.n	8000ac6 <__aeabi_dmul+0x24a>
 8000c80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c84:	bf18      	it	ne
 8000c86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c8a:	f47f aec5 	bne.w	8000a18 <__aeabi_dmul+0x19c>
 8000c8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c92:	f47f af0d 	bne.w	8000ab0 <__aeabi_dmul+0x234>
 8000c96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c9a:	f47f aeeb 	bne.w	8000a74 <__aeabi_dmul+0x1f8>
 8000c9e:	e712      	b.n	8000ac6 <__aeabi_dmul+0x24a>

08000ca0 <__gedf2>:
 8000ca0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ca4:	e006      	b.n	8000cb4 <__cmpdf2+0x4>
 8000ca6:	bf00      	nop

08000ca8 <__ledf2>:
 8000ca8:	f04f 0c01 	mov.w	ip, #1
 8000cac:	e002      	b.n	8000cb4 <__cmpdf2+0x4>
 8000cae:	bf00      	nop

08000cb0 <__cmpdf2>:
 8000cb0:	f04f 0c01 	mov.w	ip, #1
 8000cb4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cca:	d01b      	beq.n	8000d04 <__cmpdf2+0x54>
 8000ccc:	b001      	add	sp, #4
 8000cce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cd2:	bf0c      	ite	eq
 8000cd4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cd8:	ea91 0f03 	teqne	r1, r3
 8000cdc:	bf02      	ittt	eq
 8000cde:	ea90 0f02 	teqeq	r0, r2
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	4770      	bxeq	lr
 8000ce6:	f110 0f00 	cmn.w	r0, #0
 8000cea:	ea91 0f03 	teq	r1, r3
 8000cee:	bf58      	it	pl
 8000cf0:	4299      	cmppl	r1, r3
 8000cf2:	bf08      	it	eq
 8000cf4:	4290      	cmpeq	r0, r2
 8000cf6:	bf2c      	ite	cs
 8000cf8:	17d8      	asrcs	r0, r3, #31
 8000cfa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cfe:	f040 0001 	orr.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	d102      	bne.n	8000d14 <__cmpdf2+0x64>
 8000d0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d12:	d107      	bne.n	8000d24 <__cmpdf2+0x74>
 8000d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d1c:	d1d6      	bne.n	8000ccc <__cmpdf2+0x1c>
 8000d1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d22:	d0d3      	beq.n	8000ccc <__cmpdf2+0x1c>
 8000d24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <__aeabi_cdrcmple>:
 8000d2c:	4684      	mov	ip, r0
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4662      	mov	r2, ip
 8000d32:	468c      	mov	ip, r1
 8000d34:	4619      	mov	r1, r3
 8000d36:	4663      	mov	r3, ip
 8000d38:	e000      	b.n	8000d3c <__aeabi_cdcmpeq>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_cdcmpeq>:
 8000d3c:	b501      	push	{r0, lr}
 8000d3e:	f7ff ffb7 	bl	8000cb0 <__cmpdf2>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	bf48      	it	mi
 8000d46:	f110 0f00 	cmnmi.w	r0, #0
 8000d4a:	bd01      	pop	{r0, pc}

08000d4c <__aeabi_dcmpeq>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff fff4 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d54:	bf0c      	ite	eq
 8000d56:	2001      	moveq	r0, #1
 8000d58:	2000      	movne	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_dcmplt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffea 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_dcmple>:
 8000d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d78:	f7ff ffe0 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d7c:	bf94      	ite	ls
 8000d7e:	2001      	movls	r0, #1
 8000d80:	2000      	movhi	r0, #0
 8000d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d86:	bf00      	nop

08000d88 <__aeabi_dcmpge>:
 8000d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d8c:	f7ff ffce 	bl	8000d2c <__aeabi_cdrcmple>
 8000d90:	bf94      	ite	ls
 8000d92:	2001      	movls	r0, #1
 8000d94:	2000      	movhi	r0, #0
 8000d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9a:	bf00      	nop

08000d9c <__aeabi_dcmpgt>:
 8000d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da0:	f7ff ffc4 	bl	8000d2c <__aeabi_cdrcmple>
 8000da4:	bf34      	ite	cc
 8000da6:	2001      	movcc	r0, #1
 8000da8:	2000      	movcs	r0, #0
 8000daa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dae:	bf00      	nop

08000db0 <__aeabi_d2uiz>:
 8000db0:	004a      	lsls	r2, r1, #1
 8000db2:	d211      	bcs.n	8000dd8 <__aeabi_d2uiz+0x28>
 8000db4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000db8:	d211      	bcs.n	8000dde <__aeabi_d2uiz+0x2e>
 8000dba:	d50d      	bpl.n	8000dd8 <__aeabi_d2uiz+0x28>
 8000dbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000dc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dc4:	d40e      	bmi.n	8000de4 <__aeabi_d2uiz+0x34>
 8000dc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd6:	4770      	bx	lr
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	4770      	bx	lr
 8000dde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000de2:	d102      	bne.n	8000dea <__aeabi_d2uiz+0x3a>
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de8:	4770      	bx	lr
 8000dea:	f04f 0000 	mov.w	r0, #0
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_uldivmod>:
 8000df0:	b953      	cbnz	r3, 8000e08 <__aeabi_uldivmod+0x18>
 8000df2:	b94a      	cbnz	r2, 8000e08 <__aeabi_uldivmod+0x18>
 8000df4:	2900      	cmp	r1, #0
 8000df6:	bf08      	it	eq
 8000df8:	2800      	cmpeq	r0, #0
 8000dfa:	bf1c      	itt	ne
 8000dfc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 b9fe 	b.w	8001204 <__aeabi_idiv0>
 8000e08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e10:	f000 f83c 	bl	8000e8c <__udivmoddi4>
 8000e14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_d2lz>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	2200      	movs	r2, #0
 8000e24:	2300      	movs	r3, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	460d      	mov	r5, r1
 8000e2a:	f7ff ff99 	bl	8000d60 <__aeabi_dcmplt>
 8000e2e:	b928      	cbnz	r0, 8000e3c <__aeabi_d2lz+0x1c>
 8000e30:	4620      	mov	r0, r4
 8000e32:	4629      	mov	r1, r5
 8000e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e38:	f000 b80a 	b.w	8000e50 <__aeabi_d2ulz>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e42:	f000 f805 	bl	8000e50 <__aeabi_d2ulz>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	bd38      	pop	{r3, r4, r5, pc}
 8000e4e:	bf00      	nop

08000e50 <__aeabi_d2ulz>:
 8000e50:	b5d0      	push	{r4, r6, r7, lr}
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__aeabi_d2ulz+0x34>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	4606      	mov	r6, r0
 8000e58:	460f      	mov	r7, r1
 8000e5a:	f7ff fd0f 	bl	800087c <__aeabi_dmul>
 8000e5e:	f7ff ffa7 	bl	8000db0 <__aeabi_d2uiz>
 8000e62:	4604      	mov	r4, r0
 8000e64:	f7ff fc90 	bl	8000788 <__aeabi_ui2d>
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <__aeabi_d2ulz+0x38>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f7ff fd06 	bl	800087c <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4630      	mov	r0, r6
 8000e76:	4639      	mov	r1, r7
 8000e78:	f7ff fb48 	bl	800050c <__aeabi_dsub>
 8000e7c:	f7ff ff98 	bl	8000db0 <__aeabi_d2uiz>
 8000e80:	4621      	mov	r1, r4
 8000e82:	bdd0      	pop	{r4, r6, r7, pc}
 8000e84:	3df00000 	.word	0x3df00000
 8000e88:	41f00000 	.word	0x41f00000

08000e8c <__udivmoddi4>:
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	9d08      	ldr	r5, [sp, #32]
 8000e92:	4604      	mov	r4, r0
 8000e94:	468e      	mov	lr, r1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14d      	bne.n	8000f36 <__udivmoddi4+0xaa>
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	4694      	mov	ip, r2
 8000e9e:	d969      	bls.n	8000f74 <__udivmoddi4+0xe8>
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	b152      	cbz	r2, 8000ebc <__udivmoddi4+0x30>
 8000ea6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eaa:	f1c2 0120 	rsb	r1, r2, #32
 8000eae:	fa20 f101 	lsr.w	r1, r0, r1
 8000eb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000eba:	4094      	lsls	r4, r2
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	0c21      	lsrs	r1, r4, #16
 8000ec2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ec6:	fa1f f78c 	uxth.w	r7, ip
 8000eca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ece:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ed2:	fb06 f107 	mul.w	r1, r6, r7
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d90a      	bls.n	8000ef0 <__udivmoddi4+0x64>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ee2:	f080 811f 	bcs.w	8001124 <__udivmoddi4+0x298>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 811c 	bls.w	8001124 <__udivmoddi4+0x298>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef8:	fb08 3310 	mls	r3, r8, r0, r3
 8000efc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f00:	fb00 f707 	mul.w	r7, r0, r7
 8000f04:	42a7      	cmp	r7, r4
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x92>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f10:	f080 810a 	bcs.w	8001128 <__udivmoddi4+0x29c>
 8000f14:	42a7      	cmp	r7, r4
 8000f16:	f240 8107 	bls.w	8001128 <__udivmoddi4+0x29c>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	1be4      	subs	r4, r4, r7
 8000f24:	2600      	movs	r6, #0
 8000f26:	b11d      	cbz	r5, 8000f30 <__udivmoddi4+0xa4>
 8000f28:	40d4      	lsrs	r4, r2
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d909      	bls.n	8000f4e <__udivmoddi4+0xc2>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	f000 80ef 	beq.w	800111e <__udivmoddi4+0x292>
 8000f40:	2600      	movs	r6, #0
 8000f42:	e9c5 0100 	strd	r0, r1, [r5]
 8000f46:	4630      	mov	r0, r6
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	fab3 f683 	clz	r6, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d14a      	bne.n	8000fec <__udivmoddi4+0x160>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d302      	bcc.n	8000f60 <__udivmoddi4+0xd4>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	f200 80f9 	bhi.w	8001152 <__udivmoddi4+0x2c6>
 8000f60:	1a84      	subs	r4, r0, r2
 8000f62:	eb61 0303 	sbc.w	r3, r1, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	469e      	mov	lr, r3
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	d0e0      	beq.n	8000f30 <__udivmoddi4+0xa4>
 8000f6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f72:	e7dd      	b.n	8000f30 <__udivmoddi4+0xa4>
 8000f74:	b902      	cbnz	r2, 8000f78 <__udivmoddi4+0xec>
 8000f76:	deff      	udf	#255	; 0xff
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	f040 8092 	bne.w	80010a6 <__udivmoddi4+0x21a>
 8000f82:	eba1 010c 	sub.w	r1, r1, ip
 8000f86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8a:	fa1f fe8c 	uxth.w	lr, ip
 8000f8e:	2601      	movs	r6, #1
 8000f90:	0c20      	lsrs	r0, r4, #16
 8000f92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f96:	fb07 1113 	mls	r1, r7, r3, r1
 8000f9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f9e:	fb0e f003 	mul.w	r0, lr, r3
 8000fa2:	4288      	cmp	r0, r1
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x12c>
 8000fa6:	eb1c 0101 	adds.w	r1, ip, r1
 8000faa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x12a>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f200 80cb 	bhi.w	800114c <__udivmoddi4+0x2c0>
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	1a09      	subs	r1, r1, r0
 8000fba:	b2a4      	uxth	r4, r4
 8000fbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000fc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000fcc:	45a6      	cmp	lr, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x156>
 8000fd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fd8:	d202      	bcs.n	8000fe0 <__udivmoddi4+0x154>
 8000fda:	45a6      	cmp	lr, r4
 8000fdc:	f200 80bb 	bhi.w	8001156 <__udivmoddi4+0x2ca>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	eba4 040e 	sub.w	r4, r4, lr
 8000fe6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fea:	e79c      	b.n	8000f26 <__udivmoddi4+0x9a>
 8000fec:	f1c6 0720 	rsb	r7, r6, #32
 8000ff0:	40b3      	lsls	r3, r6
 8000ff2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffa:	fa20 f407 	lsr.w	r4, r0, r7
 8000ffe:	fa01 f306 	lsl.w	r3, r1, r6
 8001002:	431c      	orrs	r4, r3
 8001004:	40f9      	lsrs	r1, r7
 8001006:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800100a:	fa00 f306 	lsl.w	r3, r0, r6
 800100e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001012:	0c20      	lsrs	r0, r4, #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fb09 1118 	mls	r1, r9, r8, r1
 800101c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001020:	fb08 f00e 	mul.w	r0, r8, lr
 8001024:	4288      	cmp	r0, r1
 8001026:	fa02 f206 	lsl.w	r2, r2, r6
 800102a:	d90b      	bls.n	8001044 <__udivmoddi4+0x1b8>
 800102c:	eb1c 0101 	adds.w	r1, ip, r1
 8001030:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001034:	f080 8088 	bcs.w	8001148 <__udivmoddi4+0x2bc>
 8001038:	4288      	cmp	r0, r1
 800103a:	f240 8085 	bls.w	8001148 <__udivmoddi4+0x2bc>
 800103e:	f1a8 0802 	sub.w	r8, r8, #2
 8001042:	4461      	add	r1, ip
 8001044:	1a09      	subs	r1, r1, r0
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb1 f0f9 	udiv	r0, r1, r9
 800104c:	fb09 1110 	mls	r1, r9, r0, r1
 8001050:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001054:	fb00 fe0e 	mul.w	lr, r0, lr
 8001058:	458e      	cmp	lr, r1
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x1e2>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8001064:	d26c      	bcs.n	8001140 <__udivmoddi4+0x2b4>
 8001066:	458e      	cmp	lr, r1
 8001068:	d96a      	bls.n	8001140 <__udivmoddi4+0x2b4>
 800106a:	3802      	subs	r0, #2
 800106c:	4461      	add	r1, ip
 800106e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001072:	fba0 9402 	umull	r9, r4, r0, r2
 8001076:	eba1 010e 	sub.w	r1, r1, lr
 800107a:	42a1      	cmp	r1, r4
 800107c:	46c8      	mov	r8, r9
 800107e:	46a6      	mov	lr, r4
 8001080:	d356      	bcc.n	8001130 <__udivmoddi4+0x2a4>
 8001082:	d053      	beq.n	800112c <__udivmoddi4+0x2a0>
 8001084:	b15d      	cbz	r5, 800109e <__udivmoddi4+0x212>
 8001086:	ebb3 0208 	subs.w	r2, r3, r8
 800108a:	eb61 010e 	sbc.w	r1, r1, lr
 800108e:	fa01 f707 	lsl.w	r7, r1, r7
 8001092:	fa22 f306 	lsr.w	r3, r2, r6
 8001096:	40f1      	lsrs	r1, r6
 8001098:	431f      	orrs	r7, r3
 800109a:	e9c5 7100 	strd	r7, r1, [r5]
 800109e:	2600      	movs	r6, #0
 80010a0:	4631      	mov	r1, r6
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	f1c2 0320 	rsb	r3, r2, #32
 80010aa:	40d8      	lsrs	r0, r3
 80010ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80010b0:	fa21 f303 	lsr.w	r3, r1, r3
 80010b4:	4091      	lsls	r1, r2
 80010b6:	4301      	orrs	r1, r0
 80010b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010bc:	fa1f fe8c 	uxth.w	lr, ip
 80010c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80010c4:	fb07 3610 	mls	r6, r7, r0, r3
 80010c8:	0c0b      	lsrs	r3, r1, #16
 80010ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010ce:	fb00 f60e 	mul.w	r6, r0, lr
 80010d2:	429e      	cmp	r6, r3
 80010d4:	fa04 f402 	lsl.w	r4, r4, r2
 80010d8:	d908      	bls.n	80010ec <__udivmoddi4+0x260>
 80010da:	eb1c 0303 	adds.w	r3, ip, r3
 80010de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010e2:	d22f      	bcs.n	8001144 <__udivmoddi4+0x2b8>
 80010e4:	429e      	cmp	r6, r3
 80010e6:	d92d      	bls.n	8001144 <__udivmoddi4+0x2b8>
 80010e8:	3802      	subs	r0, #2
 80010ea:	4463      	add	r3, ip
 80010ec:	1b9b      	subs	r3, r3, r6
 80010ee:	b289      	uxth	r1, r1
 80010f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80010f4:	fb07 3316 	mls	r3, r7, r6, r3
 80010f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fc:	fb06 f30e 	mul.w	r3, r6, lr
 8001100:	428b      	cmp	r3, r1
 8001102:	d908      	bls.n	8001116 <__udivmoddi4+0x28a>
 8001104:	eb1c 0101 	adds.w	r1, ip, r1
 8001108:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800110c:	d216      	bcs.n	800113c <__udivmoddi4+0x2b0>
 800110e:	428b      	cmp	r3, r1
 8001110:	d914      	bls.n	800113c <__udivmoddi4+0x2b0>
 8001112:	3e02      	subs	r6, #2
 8001114:	4461      	add	r1, ip
 8001116:	1ac9      	subs	r1, r1, r3
 8001118:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800111c:	e738      	b.n	8000f90 <__udivmoddi4+0x104>
 800111e:	462e      	mov	r6, r5
 8001120:	4628      	mov	r0, r5
 8001122:	e705      	b.n	8000f30 <__udivmoddi4+0xa4>
 8001124:	4606      	mov	r6, r0
 8001126:	e6e3      	b.n	8000ef0 <__udivmoddi4+0x64>
 8001128:	4618      	mov	r0, r3
 800112a:	e6f8      	b.n	8000f1e <__udivmoddi4+0x92>
 800112c:	454b      	cmp	r3, r9
 800112e:	d2a9      	bcs.n	8001084 <__udivmoddi4+0x1f8>
 8001130:	ebb9 0802 	subs.w	r8, r9, r2
 8001134:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001138:	3801      	subs	r0, #1
 800113a:	e7a3      	b.n	8001084 <__udivmoddi4+0x1f8>
 800113c:	4646      	mov	r6, r8
 800113e:	e7ea      	b.n	8001116 <__udivmoddi4+0x28a>
 8001140:	4620      	mov	r0, r4
 8001142:	e794      	b.n	800106e <__udivmoddi4+0x1e2>
 8001144:	4640      	mov	r0, r8
 8001146:	e7d1      	b.n	80010ec <__udivmoddi4+0x260>
 8001148:	46d0      	mov	r8, sl
 800114a:	e77b      	b.n	8001044 <__udivmoddi4+0x1b8>
 800114c:	3b02      	subs	r3, #2
 800114e:	4461      	add	r1, ip
 8001150:	e732      	b.n	8000fb8 <__udivmoddi4+0x12c>
 8001152:	4630      	mov	r0, r6
 8001154:	e709      	b.n	8000f6a <__udivmoddi4+0xde>
 8001156:	4464      	add	r4, ip
 8001158:	3802      	subs	r0, #2
 800115a:	e742      	b.n	8000fe2 <__udivmoddi4+0x156>

0800115c <__gthread_active_p>:
 800115c:	2000      	movs	r0, #0
 800115e:	4770      	bx	lr

08001160 <emutls_alloc>:
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	6845      	ldr	r5, [r0, #4]
 8001164:	6806      	ldr	r6, [r0, #0]
 8001166:	2d04      	cmp	r5, #4
 8001168:	4604      	mov	r4, r0
 800116a:	d80f      	bhi.n	800118c <emutls_alloc+0x2c>
 800116c:	1d30      	adds	r0, r6, #4
 800116e:	f00e fca9 	bl	800fac4 <malloc>
 8001172:	4603      	mov	r3, r0
 8001174:	b1f8      	cbz	r0, 80011b6 <emutls_alloc+0x56>
 8001176:	68e1      	ldr	r1, [r4, #12]
 8001178:	6000      	str	r0, [r0, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	4632      	mov	r2, r6
 800117e:	4618      	mov	r0, r3
 8001180:	b1a1      	cbz	r1, 80011ac <emutls_alloc+0x4c>
 8001182:	f00e fcbf 	bl	800fb04 <memcpy>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	19a8      	adds	r0, r5, r6
 800118e:	3003      	adds	r0, #3
 8001190:	f00e fc98 	bl	800fac4 <malloc>
 8001194:	b178      	cbz	r0, 80011b6 <emutls_alloc+0x56>
 8001196:	1ceb      	adds	r3, r5, #3
 8001198:	4403      	add	r3, r0
 800119a:	426d      	negs	r5, r5
 800119c:	402b      	ands	r3, r5
 800119e:	4632      	mov	r2, r6
 80011a0:	f843 0c04 	str.w	r0, [r3, #-4]
 80011a4:	68e1      	ldr	r1, [r4, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	2900      	cmp	r1, #0
 80011aa:	d1ea      	bne.n	8001182 <emutls_alloc+0x22>
 80011ac:	f00e fcb8 	bl	800fb20 <memset>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	f012 fbcd 	bl	8013954 <abort>
 80011ba:	bf00      	nop

080011bc <__emutls_get_address>:
 80011bc:	b510      	push	{r4, lr}
 80011be:	4604      	mov	r4, r0
 80011c0:	f7ff ffcc 	bl	800115c <__gthread_active_p>
 80011c4:	b938      	cbnz	r0, 80011d6 <__emutls_get_address+0x1a>
 80011c6:	68a0      	ldr	r0, [r4, #8]
 80011c8:	b100      	cbz	r0, 80011cc <__emutls_get_address+0x10>
 80011ca:	bd10      	pop	{r4, pc}
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff ffc7 	bl	8001160 <emutls_alloc>
 80011d2:	60a0      	str	r0, [r4, #8]
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	f012 fbbd 	bl	8013954 <abort>
 80011da:	bf00      	nop

080011dc <__emutls_register_common>:
 80011dc:	b410      	push	{r4}
 80011de:	6804      	ldr	r4, [r0, #0]
 80011e0:	428c      	cmp	r4, r1
 80011e2:	d202      	bcs.n	80011ea <__emutls_register_common+0xe>
 80011e4:	2400      	movs	r4, #0
 80011e6:	6001      	str	r1, [r0, #0]
 80011e8:	60c4      	str	r4, [r0, #12]
 80011ea:	6844      	ldr	r4, [r0, #4]
 80011ec:	4294      	cmp	r4, r2
 80011ee:	bf38      	it	cc
 80011f0:	6042      	strcc	r2, [r0, #4]
 80011f2:	b11b      	cbz	r3, 80011fc <__emutls_register_common+0x20>
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	428a      	cmp	r2, r1
 80011f8:	bf08      	it	eq
 80011fa:	60c3      	streq	r3, [r0, #12]
 80011fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__aeabi_idiv0>:
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001210:	2334      	movs	r3, #52	; 0x34
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <tx_application_define+0x74>)
 800121a:	4919      	ldr	r1, [pc, #100]	; (8001280 <tx_application_define+0x78>)
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <tx_application_define+0x7c>)
 800121e:	f00d ff8f 	bl	800f140 <_txe_byte_pool_create>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 8001228:	f000 f94e 	bl	80014c8 <Error_Handler>
 800122c:	e009      	b.n	8001242 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <tx_application_define+0x7c>)
 8001230:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f82e 	bl	8001294 <App_ThreadX_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 800123e:	f000 f943 	bl	80014c8 <Error_Handler>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001242:	2334      	movs	r3, #52	; 0x34
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <tx_application_define+0x80>)
 800124c:	490f      	ldr	r1, [pc, #60]	; (800128c <tx_application_define+0x84>)
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <tx_application_define+0x88>)
 8001250:	f00d ff76 	bl	800f140 <_txe_byte_pool_create>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <tx_application_define+0x58>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Error */
    Error_Handler();
 800125a:	f000 f935 	bl	80014c8 <Error_Handler>
    /* USER CODE BEGIN MX_FileX_Init_Success */

    /* USER CODE END MX_FileX_Init_Success */
  }

}
 800125e:	e009      	b.n	8001274 <tx_application_define+0x6c>
    memory_ptr = (VOID *)&fx_app_byte_pool;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <tx_application_define+0x88>)
 8001262:	60fb      	str	r3, [r7, #12]
    if (MX_FileX_Init(memory_ptr) != FX_SUCCESS)
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 fac1 	bl	80017ec <MX_FileX_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <tx_application_define+0x6c>
      Error_Handler();
 8001270:	f000 f92a 	bl	80014c8 <Error_Handler>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000264 	.word	0x20000264
 8001280:	08013a18 	.word	0x08013a18
 8001284:	20002264 	.word	0x20002264
 8001288:	20002298 	.word	0x20002298
 800128c:	08013a2c 	.word	0x08013a2c
 8001290:	20003298 	.word	0x20003298

08001294 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80012b6:	f00c fe99 	bl	800dfec <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 fbff 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f80d 	bl	80012e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LED */
  BSP_LED_Init(LED_GREEN);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fb2c 	bl	8001928 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 fb29 	bl	8001928 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f8a1 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 80012da:	f000 f877 	bl	80013cc <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80012de:	f7ff ffe8 	bl	80012b2 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <main+0x24>

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2234      	movs	r2, #52	; 0x34
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00e fc14 	bl	800fb20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <SystemClock_Config+0xe0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <SystemClock_Config+0xe0>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <SystemClock_Config+0xe0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <SystemClock_Config+0xe4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <SystemClock_Config+0xe4>)
 800132e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <SystemClock_Config+0xe4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001348:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001358:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800135c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001362:	2308      	movs	r3, #8
 8001364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001366:	2302      	movs	r3, #2
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fb0a 	bl	8002988 <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137a:	f000 f8a5 	bl	80014c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800137e:	f001 f875 	bl	800246c <HAL_PWREx_EnableOverDrive>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001388:	f000 f89e 	bl	80014c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001398:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800139c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2105      	movs	r1, #5
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f8ae 	bl	800250c <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80013b6:	f000 f887 	bl	80014c8 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	; 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_DMA_Init+0x4c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <MX_DMA_Init+0x4c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_DMA_Init+0x4c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 15, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	210f      	movs	r1, #15
 80013f2:	203b      	movs	r0, #59	; 0x3b
 80013f4:	f000 fc84 	bl	8001d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013f8:	203b      	movs	r0, #59	; 0x3b
 80013fa:	f000 fc9d 	bl	8001d38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 15, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	210f      	movs	r1, #15
 8001402:	2045      	movs	r0, #69	; 0x45
 8001404:	f000 fc7c 	bl	8001d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001408:	2045      	movs	r0, #69	; 0x45
 800140a:	f000 fc95 	bl	8001d38 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <MX_GPIO_Init+0x84>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MX_GPIO_Init+0x84>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_GPIO_Init+0x84>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_GPIO_Init+0x84>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b6:	f000 fb27 	bl	8001b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40001000 	.word	0x40001000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_GREEN);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 faab 	bl	8001a28 <BSP_LED_Off>
  while (1)
  {
    BSP_LED_Toggle(LED_RED);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 fac6 	bl	8001a64 <BSP_LED_Toggle>
    HAL_Delay(200);
 80014d8:	20c8      	movs	r0, #200	; 0xc8
 80014da:	f000 fb35 	bl	8001b48 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 80014de:	e7f8      	b.n	80014d2 <Error_Handler+0xa>

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x4c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	2036      	movs	r0, #54	; 0x36
 8001546:	f000 fbdb 	bl	8001d00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800154a:	2036      	movs	r0, #54	; 0x36
 800154c:	f000 fbf4 	bl	8001d38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_InitTick+0xa4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_InitTick+0xa4>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_InitTick+0xa4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156c:	f107 0210 	add.w	r2, r7, #16
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f001 f9d4 	bl	8002924 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800157c:	f001 f9be 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_InitTick+0xa8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3b01      	subs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_InitTick+0xac>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_InitTick+0xb0>)
 8001598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_InitTick+0xac>)
 800159c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_InitTick+0xac>)
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_InitTick+0xac>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_InitTick+0xac>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <HAL_InitTick+0xac>)
 80015b6:	f001 ff51 	bl	800345c <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <HAL_InitTick+0xac>)
 80015c2:	f001 ffa5 	bl	8003510 <HAL_TIM_Base_Start_IT>
 80015c6:	4603      	mov	r3, r0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	20003410 	.word	0x20003410
 80015e0:	40001000 	.word	0x40001000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <SDIO_IRQHandler+0x10>)
 8001616:	f001 fc3b 	bl	8002e90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200032cc 	.word	0x200032cc

08001624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM6_DAC_IRQHandler+0x10>)
 800162a:	f001 ffe1 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20003410 	.word	0x20003410

08001638 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA2_Stream3_IRQHandler+0x10>)
 800163e:	f000 fbab 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20003350 	.word	0x20003350

0800164c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA2_Stream6_IRQHandler+0x10>)
 8001652:	f000 fba1 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200033b0 	.word	0x200033b0

08001660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	return 1;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_kill>:

int _kill(int pid, int sig)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167a:	f00d ff19 	bl	800f4b0 <__errno>
 800167e:	4603      	mov	r3, r0
 8001680:	2216      	movs	r2, #22
 8001682:	601a      	str	r2, [r3, #0]
	return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_exit>:

void _exit (int status)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ffe7 	bl	8001670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016a2:	e7fe      	b.n	80016a2 <_exit+0x12>

080016a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e00a      	b.n	80016cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016b6:	f3af 8000 	nop.w
 80016ba:	4601      	mov	r1, r0
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf0      	blt.n	80016b6 <_read+0x12>
	}

return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e009      	b.n	8001704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf1      	blt.n	80016f0 <_write+0x12>
	}
	return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_close>:

int _close(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	return -1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173e:	605a      	str	r2, [r3, #4]
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_isatty>:

int _isatty(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	return 1;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f00d fe7e 	bl	800f4b0 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20050000 	.word	0x20050000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	20003458 	.word	0x20003458
 80017e8:	20003be8 	.word	0x20003be8

080017ec <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08e      	sub	sp, #56	; 0x38
 80017f0:	af08      	add	r7, sp, #32
 80017f2:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN MX_FileX_Init */
  VOID *pointer;

  /* Allocate memory for the main thread's stack */
  ret = tx_byte_allocate(byte_pool, &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80017fc:	f107 010c 	add.w	r1, r7, #12
 8001800:	2300      	movs	r3, #0
 8001802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001806:	6938      	ldr	r0, [r7, #16]
 8001808:	f00d fc26 	bl	800f058 <_txe_byte_allocate>
 800180c:	6178      	str	r0, [r7, #20]

  if (ret != FX_SUCCESS)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_FileX_Init+0x2c>
  {
    /* Failed at allocating memory */
    Error_Handler();
 8001814:	f7ff fe58 	bl	80014c8 <Error_Handler>
  }

  /* Create the main thread.  */
  tx_thread_create(&fx_app_thread, "FileX App Thread", fx_thread_entry, 0, pointer, DEFAULT_STACK_SIZE,
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	22b4      	movs	r2, #180	; 0xb4
 800181c:	9206      	str	r2, [sp, #24]
 800181e:	2201      	movs	r2, #1
 8001820:	9205      	str	r2, [sp, #20]
 8001822:	2200      	movs	r2, #0
 8001824:	9204      	str	r2, [sp, #16]
 8001826:	220a      	movs	r2, #10
 8001828:	9203      	str	r2, [sp, #12]
 800182a:	220a      	movs	r2, #10
 800182c:	9202      	str	r2, [sp, #8]
 800182e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001832:	9201      	str	r2, [sp, #4]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <MX_FileX_Init+0x64>)
 800183a:	4906      	ldr	r1, [pc, #24]	; (8001854 <MX_FileX_Init+0x68>)
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_FileX_Init+0x6c>)
 800183e:	f00d fd3d 	bl	800f2bc <_txe_thread_create>
                   DEFAULT_THREAD_PRIO, DEFAULT_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);

  /* Initialize FileX.  */
  fx_system_initialize();
 8001842:	f002 fa53 	bl	8003cec <_fx_system_initialize>

  /* USER CODE END MX_FileX_Init */
  return ret;
 8001846:	697b      	ldr	r3, [r7, #20]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	0800185d 	.word	0x0800185d
 8001854:	08013a44 	.word	0x08013a44
 8001858:	20003460 	.word	0x20003460

0800185c <fx_thread_entry>:

/* USER CODE BEGIN 1 */

void fx_thread_entry(ULONG thread_input)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
/* UINT status;
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";*/
  //sail_load_image_from_memory((const void *)bmp_buffer, bmp_buffer_len, &image_bmp);
	UINT check_load_image=SAIL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]

	check_load_image = sail_load_image_from_memory(bmp_buffer, bmp_buffer_len, &fst_bmp);
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <fx_thread_entry+0x34>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <fx_thread_entry+0x38>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <fx_thread_entry+0x3c>)
 8001874:	4619      	mov	r1, r3
 8001876:	f00a fd4d 	bl	800c314 <sail_load_image_from_memory>
 800187a:	4603      	mov	r3, r0
 800187c:	60fb      	str	r3, [r7, #12]
	if(check_load_image != SAIL_OK)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <fx_thread_entry+0x2c>
	{
		Error_Handler();
 8001884:	f7ff fe20 	bl	80014c8 <Error_Handler>
  {
    BSP_LED_Toggle(LED_GREEN);
    tx_thread_sleep(50);
  }
#endif
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	0801647c 	.word	0x0801647c
 8001894:	20000020 	.word	0x20000020
 8001898:	2000345c 	.word	0x2000345c

0800189c <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <HAL_SD_TxCpltCallback+0x18>)
 80018a6:	f00d fceb 	bl	800f280 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20003514 	.word	0x20003514

080018b8 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <HAL_SD_RxCpltCallback+0x18>)
 80018c2:	f00d fcdd 	bl	800f280 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20003514 	.word	0x20003514

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800190c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fe:	f000 f8cf 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001902:	f00e f853 	bl	800f9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7ff fcda 	bl	80012be <main>
  bx  lr    
 800190a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800190c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8001918:	08017d9c 	.word	0x08017d9c
  ldr r2, =_sbss
 800191c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8001920:	20003be8 	.word	0x20003be8

08001924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC_IRQHandler>
	...

08001928 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d86d      	bhi.n	8001a14 <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <BSP_LED_Init+0xf4>)
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001946:	2301      	movs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d847      	bhi.n	80019e4 <BSP_LED_Init+0xbc>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <BSP_LED_Init+0x34>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800196d 	.word	0x0800196d
 8001960:	0800198b 	.word	0x0800198b
 8001964:	080019a9 	.word	0x080019a9
 8001968:	080019c7 	.word	0x080019c7
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <BSP_LED_Init+0xf8>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <BSP_LED_Init+0xf8>)
 8001976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <BSP_LED_Init+0xf8>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]
      break;
 8001988:	e02d      	b.n	80019e6 <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <BSP_LED_Init+0xf8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <BSP_LED_Init+0xf8>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <BSP_LED_Init+0xf8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
      break;
 80019a6:	e01e      	b.n	80019e6 <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <BSP_LED_Init+0xf8>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <BSP_LED_Init+0xf8>)
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	6313      	str	r3, [r2, #48]	; 0x30
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <BSP_LED_Init+0xf8>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
      break;
 80019c4:	e00f      	b.n	80019e6 <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <BSP_LED_Init+0xf8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <BSP_LED_Init+0xf8>)
 80019d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <BSP_LED_Init+0xf8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
      break;
 80019e2:	e000      	b.n	80019e6 <BSP_LED_Init+0xbe>
    default :
      break;
 80019e4:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <BSP_LED_Init+0xfc>)
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	f107 021c 	add.w	r2, r7, #28
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fb59 	bl	80020ac <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <BSP_LED_Init+0xfc>)
 80019fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <BSP_LED_Init+0xf4>)
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f000 fcf8 	bl	8002404 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 8001a14:	bf00      	nop
 8001a16:	3730      	adds	r7, #48	; 0x30
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000024 	.word	0x20000024
 8001a20:	40023800 	.word	0x40023800
 8001a24:	20000034 	.word	0x20000034

08001a28 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d80c      	bhi.n	8001a52 <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <BSP_LED_Off+0x34>)
 8001a3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <BSP_LED_Off+0x38>)
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f000 fcd9 	bl	8002404 <HAL_GPIO_WritePin>
  }
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000034 	.word	0x20000034
 8001a60:	20000024 	.word	0x20000024

08001a64 <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d80c      	bhi.n	8001a8e <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <BSP_LED_Toggle+0x34>)
 8001a78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4907      	ldr	r1, [pc, #28]	; (8001a9c <BSP_LED_Toggle+0x38>)
 8001a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f000 fcd4 	bl	8002436 <HAL_GPIO_TogglePin>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000034 	.word	0x20000034
 8001a9c:	20000024 	.word	0x20000024

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_Init+0x40>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_Init+0x40>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x40>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f8fc 	bl	8001cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f7ff fd1c 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fcf2 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000004c 	.word	0x2000004c
 8001b2c:	20003534 	.word	0x20003534

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20003534 	.word	0x20003534

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000004c 	.word	0x2000004c

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff4c 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d12:	f7ff ff61 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f7ff ffb1 	bl	8001c84 <NVIC_EncodePriority>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff80 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff54 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da4:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_DMA_IRQHandler+0x248>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a8e      	ldr	r2, [pc, #568]	; (8001fe4 <HAL_DMA_IRQHandler+0x24c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2208      	movs	r2, #8
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2201      	movs	r2, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2210      	movs	r2, #16
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d043      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03c      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2210      	movs	r2, #16
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d018      	beq.n	8001eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e01f      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e016      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808f 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8087 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	2220      	movs	r2, #32
 8001f30:	409a      	lsls	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d136      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x1da>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	223f      	movs	r2, #63	; 0x3f
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07e      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
        }
        return;
 8001fae:	e079      	b.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d031      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e02c      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
 8001fde:	bf00      	nop
 8001fe0:	20000044 	.word	0x20000044
 8001fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e01e      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10f      	bne.n	8002028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0210 	bic.w	r2, r2, #16
 8002016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d022      	beq.n	8002092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d307      	bcc.n	8002080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f2      	bne.n	8002064 <HAL_DMA_IRQHandler+0x2cc>
 800207e:	e000      	b.n	8002082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a4:	bf00      	nop
    }
  }
}
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e177      	b.n	80023b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8166 	bne.w	80023b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d005      	beq.n	80020fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d130      	bne.n	8002160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 0201 	and.w	r2, r3, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b03      	cmp	r3, #3
 800216a:	d017      	beq.n	800219c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d123      	bne.n	80021f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80c0 	beq.w	80023b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_GPIO_Init+0x324>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_GPIO_Init+0x324>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224e:	4a61      	ldr	r2, [pc, #388]	; (80023d4 <HAL_GPIO_Init+0x328>)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_GPIO_Init+0x32c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d037      	beq.n	80022ea <HAL_GPIO_Init+0x23e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a57      	ldr	r2, [pc, #348]	; (80023dc <HAL_GPIO_Init+0x330>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d031      	beq.n	80022e6 <HAL_GPIO_Init+0x23a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <HAL_GPIO_Init+0x334>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02b      	beq.n	80022e2 <HAL_GPIO_Init+0x236>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a55      	ldr	r2, [pc, #340]	; (80023e4 <HAL_GPIO_Init+0x338>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x232>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <HAL_GPIO_Init+0x33c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x22e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a53      	ldr	r2, [pc, #332]	; (80023ec <HAL_GPIO_Init+0x340>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x22a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_GPIO_Init+0x344>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x226>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a51      	ldr	r2, [pc, #324]	; (80023f4 <HAL_GPIO_Init+0x348>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x222>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_GPIO_Init+0x34c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x21e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_GPIO_Init+0x350>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x21a>
 80022c2:	2309      	movs	r3, #9
 80022c4:	e012      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022c6:	230a      	movs	r3, #10
 80022c8:	e010      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ca:	2308      	movs	r3, #8
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ce:	2307      	movs	r3, #7
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x240>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_GPIO_Init+0x328>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_GPIO_Init+0x354>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232e:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002358:	4a29      	ldr	r2, [pc, #164]	; (8002400 <HAL_GPIO_Init+0x354>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_GPIO_Init+0x354>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_GPIO_Init+0x354>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_GPIO_Init+0x354>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae84 	bls.w	80020c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40022400 	.word	0x40022400
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	041a      	lsls	r2, r3, #16
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43d9      	mvns	r1, r3
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	400b      	ands	r3, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_PWREx_EnableOverDrive+0x90>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_PWREx_EnableOverDrive+0x94>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7ff fb4a 	bl	8001b30 <HAL_GetTick>
 800249c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800249e:	e009      	b.n	80024b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024a0:	f7ff fb46 	bl	8001b30 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ae:	d901      	bls.n	80024b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e01f      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_PWREx_EnableOverDrive+0x98>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d1ee      	bne.n	80024a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c8:	f7ff fb32 	bl	8001b30 <HAL_GetTick>
 80024cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ce:	e009      	b.n	80024e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024d0:	f7ff fb2e 	bl	8001b30 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024de:	d901      	bls.n	80024e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e007      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f0:	d1ee      	bne.n	80024d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	420e0040 	.word	0x420e0040
 8002504:	40007000 	.word	0x40007000
 8002508:	420e0044 	.word	0x420e0044

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d90c      	bls.n	8002548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d044      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e067      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff fa98 	bl	8001b30 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff fa94 	bl	8001b30 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d20c      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe ff3c 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08017288 	.word	0x08017288
 80026d0:	20000044 	.word	0x20000044
 80026d4:	20000048 	.word	0x20000048

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b094      	sub	sp, #80	; 0x50
 80026de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
 80026e4:	2300      	movs	r3, #0
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e8:	2300      	movs	r3, #0
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f0:	4b79      	ldr	r3, [pc, #484]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d00d      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x40>
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	f200 80e1 	bhi.w	80028c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x3a>
 800270a:	e0db      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002710:	e0db      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002716:	e0d8      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002722:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
 8002738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
 8002742:	2300      	movs	r3, #0
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
 8002746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800274a:	4622      	mov	r2, r4
 800274c:	462b      	mov	r3, r5
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4621      	mov	r1, r4
 8002764:	1a51      	subs	r1, r2, r1
 8002766:	6139      	str	r1, [r7, #16]
 8002768:	4629      	mov	r1, r5
 800276a:	eb63 0301 	sbc.w	r3, r3, r1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800277c:	4659      	mov	r1, fp
 800277e:	018b      	lsls	r3, r1, #6
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002786:	4651      	mov	r1, sl
 8002788:	018a      	lsls	r2, r1, #6
 800278a:	4651      	mov	r1, sl
 800278c:	ebb2 0801 	subs.w	r8, r2, r1
 8002790:	4659      	mov	r1, fp
 8002792:	eb63 0901 	sbc.w	r9, r3, r1
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027aa:	4690      	mov	r8, r2
 80027ac:	4699      	mov	r9, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	eb18 0303 	adds.w	r3, r8, r3
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	462b      	mov	r3, r5
 80027b8:	eb49 0303 	adc.w	r3, r9, r3
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ca:	4629      	mov	r1, r5
 80027cc:	024b      	lsls	r3, r1, #9
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d4:	4621      	mov	r1, r4
 80027d6:	024a      	lsls	r2, r1, #9
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e8:	f7fe fb02 	bl	8000df0 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	e058      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f6:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	2200      	movs	r2, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	4611      	mov	r1, r2
 8002802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002810:	4642      	mov	r2, r8
 8002812:	464b      	mov	r3, r9
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0159      	lsls	r1, r3, #5
 800281e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002822:	0150      	lsls	r0, r2, #5
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4641      	mov	r1, r8
 800282a:	ebb2 0a01 	subs.w	sl, r2, r1
 800282e:	4649      	mov	r1, r9
 8002830:	eb63 0b01 	sbc.w	fp, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002848:	ebb2 040a 	subs.w	r4, r2, sl
 800284c:	eb63 050b 	sbc.w	r5, r3, fp
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	464b      	mov	r3, r9
 800286c:	eb45 0303 	adc.w	r3, r5, r3
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287e:	4629      	mov	r1, r5
 8002880:	028b      	lsls	r3, r1, #10
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002888:	4621      	mov	r1, r4
 800288a:	028a      	lsls	r2, r1, #10
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002892:	2200      	movs	r2, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	61fa      	str	r2, [r7, #28]
 8002898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800289c:	f7fe faa8 	bl	8000df0 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	3301      	adds	r3, #1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c2:	e002      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetSysClockFreq+0x204>)
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3750      	adds	r7, #80	; 0x50
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	007a1200 	.word	0x007a1200

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000044 	.word	0x20000044

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002900:	f7ff fff0 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0a9b      	lsrs	r3, r3, #10
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08017298 	.word	0x08017298

08002924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	220f      	movs	r2, #15
 8002932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_GetClockConfig+0x5c>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_RCC_GetClockConfig+0x60>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40023c00 	.word	0x40023c00

08002988 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e273      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d075      	beq.n	8002a92 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d00c      	beq.n	80029cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b85      	ldr	r3, [pc, #532]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x108>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d157      	bne.n	8002a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e24e      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x74>
 80029ee:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e01d      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x98>
 8002a06:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6f      	ldr	r2, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 8002a20:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a68      	ldr	r2, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff f876 	bl	8001b30 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff f872 	bl	8001b30 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e213      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0xc0>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f862 	bl	8001b30 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff f85e 	bl	8001b30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1ff      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0xe8>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1d3      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4937      	ldr	r1, [pc, #220]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_OscConfig+0x244>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7ff f817 	bl	8001b30 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b06:	f7ff f813 	bl	8001b30 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1b4      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4925      	ldr	r1, [pc, #148]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_OscConfig+0x244>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fff6 	bl	8001b30 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe fff2 	bl	8001b30 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e193      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d036      	beq.n	8002be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCC_OscConfig+0x248>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fe ffd6 	bl	8001b30 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fe ffd2 	bl	8001b30 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e173      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x200>
 8002ba6:	e01b      	b.n	8002be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x248>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe ffbf 	bl	8001b30 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	e00e      	b.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7fe ffbb 	bl	8001b30 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d907      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e15c      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470000 	.word	0x42470000
 8002bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ea      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8097 	beq.w	8002d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a7e      	ldr	r2, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b79      	ldr	r3, [pc, #484]	; (8002e04 <HAL_RCC_OscConfig+0x47c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x47c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a75      	ldr	r2, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x47c>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe ff7b 	bl	8001b30 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe ff77 	bl	8001b30 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e118      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <HAL_RCC_OscConfig+0x47c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2ea>
 8002c64:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	e01c      	b.n	8002cac <HAL_RCC_OscConfig+0x324>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x30c>
 8002c7a:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0x324>
 8002c94:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a59      	ldr	r2, [pc, #356]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe ff3c 	bl	8001b30 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe ff38 	bl	8001b30 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0d7      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCC_OscConfig+0x334>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fe ff26 	bl	8001b30 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fe ff22 	bl	8001b30 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0c1      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfe:	4b40      	ldr	r3, [pc, #256]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80ad 	beq.w	8002e80 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d060      	beq.n	8002df4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d145      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <HAL_RCC_OscConfig+0x480>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fef6 	bl	8001b30 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe fef2 	bl	8001b30 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e093      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	491b      	ldr	r1, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x480>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fec7 	bl	8001b30 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fec3 	bl	8001b30 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e064      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x41e>
 8002dc4:	e05c      	b.n	8002e80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x480>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe feb0 	bl	8001b30 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe feac 	bl	8001b30 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e04d      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x44c>
 8002df2:	e045      	b.n	8002e80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e040      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_RCC_OscConfig+0x504>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d030      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d129      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d122      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d119      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d10f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_SD_IRQHandler+0x2e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa2a 	bl	8003310 <SD_Read_IT>
 8002ebc:	e155      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 808f 	beq.w	8002fec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8002ee6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002eea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d039      	beq.n	8002f7a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <HAL_SD_IRQHandler+0x8a>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d011      	beq.n	8002f3e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fdb2 	bl	8003a88 <SDMMC_CmdStopTransfer>
 8002f24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f91f 	bl	800317c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <HAL_SD_IRQHandler+0xda>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe fca4 	bl	80018b8 <HAL_SD_RxCpltCallback>
 8002f70:	e0fb      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fc92 	bl	800189c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f78:	e0f7      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80f2 	beq.w	800316a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fd77 	bl	8003a88 <SDMMC_CmdStopTransfer>
 8002f9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8e4 	bl	800317c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 80d5 	bne.w	800316a <HAL_SD_IRQHandler+0x2da>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 80cf 	bne.w	800316a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe fc59 	bl	800189c <HAL_SD_TxCpltCallback>
}
 8002fea:	e0be      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_SD_IRQHandler+0x17c>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f9d4 	bl	80033b2 <SD_Write_IT>
 800300a:	e0ae      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003012:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a7 	beq.w	800316a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	f043 0202 	orr.w	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	f043 0208 	orr.w	r2, r3, #8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f240 523a 	movw	r2, #1338	; 0x53a
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800309c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fcf0 	bl	8003a88 <SDMMC_CmdStopTransfer>
 80030a8:	4602      	mov	r2, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f855 	bl	800317c <HAL_SD_ErrorCallback>
}
 80030d2:	e04a      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d045      	beq.n	800316a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_SD_IRQHandler+0x262>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d011      	beq.n	8003116 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <HAL_SD_IRQHandler+0x2e4>)
 80030f8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fe28 	bl	8001d54 <HAL_DMA_Abort_IT>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02f      	beq.n	800316a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f868 	bl	80031e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003114:	e029      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_SD_IRQHandler+0x29a>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_SD_IRQHandler+0x2e8>)
 8003130:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fe0c 	bl	8001d54 <HAL_DMA_Abort_IT>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f883 	bl	8003252 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800314c:	e00d      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f814 	bl	8003190 <HAL_SD_AbortCallback>
}
 8003168:	e7ff      	b.n	800316a <HAL_SD_IRQHandler+0x2da>
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	080031e5 	.word	0x080031e5
 8003178:	08003253 	.word	0x08003253

0800317c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f882 	bl	80032c0 <SD_SendStatus>
 80031bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	0a5b      	lsrs	r3, r3, #9
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80031da:	693b      	ldr	r3, [r7, #16]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ffd1 	bl	80031a4 <HAL_SD_GetCardState>
 8003202:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b06      	cmp	r3, #6
 8003216:	d002      	beq.n	800321e <SD_DMATxAbort+0x3a>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10a      	bne.n	8003234 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fc30 	bl	8003a88 <SDMMC_CmdStopTransfer>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	431a      	orrs	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ffa7 	bl	8003190 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003242:	e002      	b.n	800324a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff ff99 	bl	800317c <HAL_SD_ErrorCallback>
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f240 523a 	movw	r2, #1338	; 0x53a
 8003268:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff ff9a 	bl	80031a4 <HAL_SD_GetCardState>
 8003270:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d002      	beq.n	800328c <SD_DMARxAbort+0x3a>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d10a      	bne.n	80032a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fbf9 	bl	8003a88 <SDMMC_CmdStopTransfer>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff70 	bl	8003190 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80032b0:	e002      	b.n	80032b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff62 	bl	800317c <HAL_SD_ErrorCallback>
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80032d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032d4:	e018      	b.n	8003308 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 fbf2 	bl	8003acc <SDMMC_CmdSendStatus>
 80032e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	e009      	b.n	8003308 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fbb1 	bl	8003a62 <SDIO_GetResponse>
 8003300:	4602      	mov	r2, r0
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03f      	beq.n	80033aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e033      	b.n	8003398 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb3f 	bl	80039b8 <SDIO_ReadFIFO>
 800333a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3301      	adds	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3b01      	subs	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	701a      	strb	r2, [r3, #0]
      tmp++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3b01      	subs	r3, #1
 8003364:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	3b01      	subs	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	0e1b      	lsrs	r3, r3, #24
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	3b01      	subs	r3, #1
 8003390:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3301      	adds	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b07      	cmp	r3, #7
 800339c:	d9c8      	bls.n	8003330 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d043      	beq.n	8003454 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e037      	b.n	8003442 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4313      	orrs	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3b01      	subs	r3, #1
 8003412:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	061a      	lsls	r2, r3, #24
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3b01      	subs	r3, #1
 800342a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f107 0208 	add.w	r2, r7, #8
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 facb 	bl	80039d2 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3301      	adds	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b07      	cmp	r3, #7
 8003446:	d9c4      	bls.n	80033d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e041      	b.n	80034f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f839 	bl	80034fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 f9d8 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e04e      	b.n	80035c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d01d      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x80>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_TIM_Base_Start_IT+0xdc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d010      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	e007      	b.n	80035c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40001800 	.word	0x40001800

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8ee 	bl	8003814 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8e0 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8f1 	bl	8003828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8c4 	bl	8003814 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8b6 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8c7 	bl	8003828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f89a 	bl	8003814 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f88c 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f89d 	bl	8003828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f870 	bl	8003814 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f862 	bl	8003800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f873 	bl	8003828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0201 	mvn.w	r2, #1
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fe98 	bl	80014a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f902 	bl	80039a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f838 	bl	800383c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0220 	mvn.w	r2, #32
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8cc 	bl	8003990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a40      	ldr	r2, [pc, #256]	; (8003964 <TIM_Base_SetConfig+0x114>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d00f      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3d      	ldr	r2, [pc, #244]	; (8003968 <TIM_Base_SetConfig+0x118>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3c      	ldr	r2, [pc, #240]	; (800396c <TIM_Base_SetConfig+0x11c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <TIM_Base_SetConfig+0x120>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <TIM_Base_SetConfig+0x124>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <TIM_Base_SetConfig+0x114>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d027      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <TIM_Base_SetConfig+0x118>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d023      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2b      	ldr	r2, [pc, #172]	; (800396c <TIM_Base_SetConfig+0x11c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <TIM_Base_SetConfig+0x120>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a29      	ldr	r2, [pc, #164]	; (8003974 <TIM_Base_SetConfig+0x124>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d017      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a28      	ldr	r2, [pc, #160]	; (8003978 <TIM_Base_SetConfig+0x128>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a27      	ldr	r2, [pc, #156]	; (800397c <TIM_Base_SetConfig+0x12c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a26      	ldr	r2, [pc, #152]	; (8003980 <TIM_Base_SetConfig+0x130>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a25      	ldr	r2, [pc, #148]	; (8003984 <TIM_Base_SetConfig+0x134>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a24      	ldr	r2, [pc, #144]	; (8003988 <TIM_Base_SetConfig+0x138>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a23      	ldr	r2, [pc, #140]	; (800398c <TIM_Base_SetConfig+0x13c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <TIM_Base_SetConfig+0x114>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <TIM_Base_SetConfig+0x124>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d103      	bne.n	8003950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	615a      	str	r2, [r3, #20]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40010400 	.word	0x40010400
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800
 8003984:	40001800 	.word	0x40001800
 8003988:	40001c00 	.word	0x40001c00
 800398c:	40002000 	.word	0x40002000

08003990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003a18:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003a1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a2e:	f023 030f 	bic.w	r3, r3, #15
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	b2db      	uxtb	r3, r3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	461a      	mov	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
}  
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003a94:	230c      	movs	r3, #12
 8003a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a98:	2340      	movs	r3, #64	; 0x40
 8003a9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aa6:	f107 0308 	add.w	r3, r7, #8
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ffa1 	bl	80039f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <SDMMC_CmdStopTransfer+0x40>)
 8003ab4:	210c      	movs	r1, #12
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f82a 	bl	8003b10 <SDMMC_GetCmdResp1>
 8003abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003abe:	69fb      	ldr	r3, [r7, #28]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	05f5e100 	.word	0x05f5e100

08003acc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003ada:	230d      	movs	r3, #13
 8003adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff7e 	bl	80039f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	210d      	movs	r1, #13
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f806 	bl	8003b10 <SDMMC_GetCmdResp1>
 8003b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b06:	69fb      	ldr	r3, [r7, #28]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b1e:	4b70      	ldr	r3, [pc, #448]	; (8003ce0 <SDMMC_GetCmdResp1+0x1d0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <SDMMC_GetCmdResp1+0x1d4>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0a5a      	lsrs	r2, r3, #9
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	61fa      	str	r2, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b40:	e0c9      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ef      	beq.n	8003b32 <SDMMC_GetCmdResp1+0x22>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ea      	bne.n	8003b32 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e0b1      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0a6      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	22c5      	movs	r2, #197	; 0xc5
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ff5a 	bl	8003a48 <SDIO_GetCommandResponse>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	7afb      	ldrb	r3, [r7, #11]
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d001      	beq.n	8003ba2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e099      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff ff5c 	bl	8003a62 <SDIO_GetResponse>
 8003baa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4b4e      	ldr	r3, [pc, #312]	; (8003ce8 <SDMMC_GetCmdResp1+0x1d8>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e08d      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da02      	bge.n	8003bc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc4:	e087      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003bd0:	2340      	movs	r3, #64	; 0x40
 8003bd2:	e080      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	e079      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf0:	e071      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c00:	e069      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c10:	e061      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c20:	e059      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c30:	e051      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c40:	e049      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c50:	e041      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c60:	e039      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c70:	e031      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003c7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c80:	e029      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003c8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c90:	e021      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003c9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ca0:	e019      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cb0:	e011      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cc0:	e009      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003ccc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003cd0:	e001      	b.n	8003cd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000044 	.word	0x20000044
 8003ce4:	10624dd3 	.word	0x10624dd3
 8003ce8:	fdffe008 	.word	0xfdffe008

08003cec <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <_fx_system_initialize+0xa4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <_fx_system_initialize+0xa8>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 8003cfe:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <_fx_system_initialize+0xac>)
 8003d00:	f644 2221 	movw	r2, #18977	; 0x4a21
 8003d04:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8003d06:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <_fx_system_initialize+0xb0>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <_fx_system_initialize+0xb4>)
 8003d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d12:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8003d14:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <_fx_system_initialize+0xb8>)
 8003d16:	2210      	movs	r2, #16
 8003d18:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	9302      	str	r3, [sp, #8]
 8003d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <_fx_system_initialize+0xbc>)
 8003d2c:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <_fx_system_initialize+0xc0>)
 8003d2e:	4920      	ldr	r1, [pc, #128]	; (8003db0 <_fx_system_initialize+0xc4>)
 8003d30:	4820      	ldr	r0, [pc, #128]	; (8003db4 <_fx_system_initialize+0xc8>)
 8003d32:	f00a fef7 	bl	800eb24 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <_fx_system_initialize+0xcc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <_fx_system_initialize+0xcc>)
 8003d40:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <_fx_system_initialize+0xcc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <_fx_system_initialize+0xcc>)
 8003d4c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <_fx_system_initialize+0xd0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d56:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <_fx_system_initialize+0xd0>)
 8003d58:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 8003d5a:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <_fx_system_initialize+0xd0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <_fx_system_initialize+0xd0>)
 8003d64:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <_fx_system_initialize+0xd0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f043 0310 	orr.w	r3, r3, #16
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <_fx_system_initialize+0xd0>)
 8003d70:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <_fx_system_initialize+0xd4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <_fx_system_initialize+0xd4>)
 8003d7c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <_fx_system_initialize+0xd4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 8003d86:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <_fx_system_initialize+0xd4>)
 8003d88:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20003538 	.word	0x20003538
 8003d94:	2000353c 	.word	0x2000353c
 8003d98:	20003540 	.word	0x20003540
 8003d9c:	20003544 	.word	0x20003544
 8003da0:	20003548 	.word	0x20003548
 8003da4:	2000354c 	.word	0x2000354c
 8003da8:	46585359 	.word	0x46585359
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08013a58 	.word	0x08013a58
 8003db4:	2000355c 	.word	0x2000355c
 8003db8:	20003550 	.word	0x20003550
 8003dbc:	20003554 	.word	0x20003554
 8003dc0:	20003558 	.word	0x20003558

08003dc4 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b089      	sub	sp, #36	; 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a9d      	ldr	r2, [pc, #628]	; (8004044 <_fx_system_timer_entry+0x280>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	f040 8132 	bne.w	800403a <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 8003dd6:	4b9c      	ldr	r3, [pc, #624]	; (8004048 <_fx_system_timer_entry+0x284>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8003de2:	4b99      	ldr	r3, [pc, #612]	; (8004048 <_fx_system_timer_entry+0x284>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8003dee:	4b96      	ldr	r3, [pc, #600]	; (8004048 <_fx_system_timer_entry+0x284>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0adb      	lsrs	r3, r3, #11
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 8003dfa:	4b94      	ldr	r3, [pc, #592]	; (800404c <_fx_system_timer_entry+0x288>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8003e04:	4b91      	ldr	r3, [pc, #580]	; (800404c <_fx_system_timer_entry+0x288>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8003e10:	4b8e      	ldr	r3, [pc, #568]	; (800404c <_fx_system_timer_entry+0x288>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0a5b      	lsrs	r3, r3, #9
 8003e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8003e1e:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	330a      	adds	r3, #10
 8003e24:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2b3b      	cmp	r3, #59	; 0x3b
 8003e2a:	f240 80d4 	bls.w	8003fd6 <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4a87      	ldr	r2, [pc, #540]	; (8004050 <_fx_system_timer_entry+0x28c>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	4b83      	ldr	r3, [pc, #524]	; (8004050 <_fx_system_timer_entry+0x28c>)
 8003e42:	fba3 1302 	umull	r1, r3, r3, r2
 8003e46:	0959      	lsrs	r1, r3, #5
 8003e48:	460b      	mov	r3, r1
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a5b      	subs	r3, r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b3b      	cmp	r3, #59	; 0x3b
 8003e58:	f240 80bd 	bls.w	8003fd6 <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4a7c      	ldr	r2, [pc, #496]	; (8004050 <_fx_system_timer_entry+0x28c>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4b78      	ldr	r3, [pc, #480]	; (8004050 <_fx_system_timer_entry+0x28c>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	0959      	lsrs	r1, r3, #5
 8003e76:	460b      	mov	r3, r1
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a5b      	subs	r3, r3, r1
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b17      	cmp	r3, #23
 8003e86:	f240 80a6 	bls.w	8003fd6 <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
                    day++;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	3301      	adds	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	2b0b      	cmp	r3, #11
 8003e9a:	f200 80cb 	bhi.w	8004034 <_fx_system_timer_entry+0x270>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <_fx_system_timer_entry+0xe0>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003ed5 	.word	0x08003ed5
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003f15 	.word	0x08003f15
 8003eb0:	08003f27 	.word	0x08003f27
 8003eb4:	08003f39 	.word	0x08003f39
 8003eb8:	08003f4b 	.word	0x08003f4b
 8003ebc:	08003f5d 	.word	0x08003f5d
 8003ec0:	08003f6f 	.word	0x08003f6f
 8003ec4:	08003f81 	.word	0x08003f81
 8003ec8:	08003f93 	.word	0x08003f93
 8003ecc:	08003fa5 	.word	0x08003fa5
 8003ed0:	08003fb7 	.word	0x08003fb7

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b1f      	cmp	r3, #31
 8003ed8:	d97f      	bls.n	8003fda <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003eda:	2301      	movs	r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
                            month++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003ee4:	e079      	b.n	8003fda <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b1d      	cmp	r3, #29
 8003ef4:	d973      	bls.n	8003fde <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	613b      	str	r3, [r7, #16]
                                month++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8003f00:	e06d      	b.n	8003fde <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b1c      	cmp	r3, #28
 8003f06:	d96a      	bls.n	8003fde <_fx_system_timer_entry+0x21a>
                                day = 1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
                                month++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
                        break;
 8003f12:	e064      	b.n	8003fde <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b1f      	cmp	r3, #31
 8003f18:	d963      	bls.n	8003fe2 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
                            month++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f24:	e05d      	b.n	8003fe2 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b1e      	cmp	r3, #30
 8003f2a:	d95c      	bls.n	8003fe6 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
                            month++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f36:	e056      	b.n	8003fe6 <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b1f      	cmp	r3, #31
 8003f3c:	d955      	bls.n	8003fea <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	613b      	str	r3, [r7, #16]
                            month++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f48:	e04f      	b.n	8003fea <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b1e      	cmp	r3, #30
 8003f4e:	d94e      	bls.n	8003fee <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f50:	2301      	movs	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
                            month++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f5a:	e048      	b.n	8003fee <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b1f      	cmp	r3, #31
 8003f60:	d947      	bls.n	8003ff2 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
                            month++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f6c:	e041      	b.n	8003ff2 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b1f      	cmp	r3, #31
 8003f72:	d940      	bls.n	8003ff6 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f74:	2301      	movs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
                            month++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f7e:	e03a      	b.n	8003ff6 <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b1e      	cmp	r3, #30
 8003f84:	d939      	bls.n	8003ffa <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	613b      	str	r3, [r7, #16]
                            month++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003f90:	e033      	b.n	8003ffa <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b1f      	cmp	r3, #31
 8003f96:	d932      	bls.n	8003ffe <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
                            month++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003fa2:	e02c      	b.n	8003ffe <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b1e      	cmp	r3, #30
 8003fa8:	d92b      	bls.n	8004002 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	613b      	str	r3, [r7, #16]
                            month++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8003fb4:	e025      	b.n	8004002 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b1f      	cmp	r3, #31
 8003fba:	d924      	bls.n	8004006 <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
                            month = 1;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f640 023b 	movw	r2, #2107	; 0x83b
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d831      	bhi.n	8004038 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 8003fd4:	e017      	b.n	8004006 <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 8003fd6:	bf00      	nop
 8003fd8:	e016      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003fda:	bf00      	nop
 8003fdc:	e014      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003fde:	bf00      	nop
 8003fe0:	e012      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003fe2:	bf00      	nop
 8003fe4:	e010      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003fe6:	bf00      	nop
 8003fe8:	e00e      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003fea:	bf00      	nop
 8003fec:	e00c      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003fee:	bf00      	nop
 8003ff0:	e00a      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003ff2:	bf00      	nop
 8003ff4:	e008      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003ff6:	bf00      	nop
 8003ff8:	e006      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <_fx_system_timer_entry+0x244>
                        break;
 8004006:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800400e:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8004014:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <_fx_system_timer_entry+0x288>)
 800401c:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8004026:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800402e:	4a06      	ldr	r2, [pc, #24]	; (8004048 <_fx_system_timer_entry+0x284>)
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e002      	b.n	800403a <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <_fx_system_timer_entry+0x276>
                                return;
 8004038:	bf00      	nop
    }
}
 800403a:	3724      	adds	r7, #36	; 0x24
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	46585359 	.word	0x46585359
 8004048:	20003544 	.word	0x20003544
 800404c:	20003540 	.word	0x20003540
 8004050:	88888889 	.word	0x88888889

08004054 <alloc_bmp_state>:

    bool frame_loaded;
    void *common_bmp_state;
};

static sail_status_t alloc_bmp_state(struct bmp_state **bmp_state) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct bmp_state), &ptr));
 800405c:	f107 0308 	add.w	r3, r7, #8
 8004060:	4619      	mov	r1, r3
 8004062:	2010      	movs	r0, #16
 8004064:	f007 fcb6 	bl	800b9d4 <sail_malloc>
 8004068:	4603      	mov	r3, r0
 800406a:	81fb      	strh	r3, [r7, #14]
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <alloc_bmp_state+0x2c>
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	e013      	b.n	80040a8 <alloc_bmp_state+0x54>
    *bmp_state = ptr;
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	601a      	str	r2, [r3, #0]

    (*bmp_state)->load_options = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    (*bmp_state)->save_options = NULL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	605a      	str	r2, [r3, #4]

    (*bmp_state)->frame_loaded     = false;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	721a      	strb	r2, [r3, #8]
    (*bmp_state)->common_bmp_state = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]

    return SAIL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <destroy_bmp_state>:

static void destroy_bmp_state(struct bmp_state *bmp_state) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

    if (bmp_state == NULL) {
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <destroy_bmp_state+0x2a>
        return;
    }

    sail_destroy_load_options(bmp_state->load_options);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 fa7e 	bl	800b5c4 <sail_destroy_load_options>
    sail_destroy_save_options(bmp_state->save_options);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f008 fcbc 	bl	800ca4a <sail_destroy_save_options>

    sail_free(bmp_state);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f007 fd06 	bl	800bae4 <sail_free>
 80040d8:	e000      	b.n	80040dc <destroy_bmp_state+0x2c>
        return;
 80040da:	bf00      	nop
}
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <sail_codec_load_init_v7_bmp>:

/*
 * Decoding functions.
 */

SAIL_EXPORT sail_status_t sail_codec_load_init_v7_bmp(struct sail_io *io, const struct sail_load_options *load_options, void **state) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d011      	beq.n	8004124 <sail_codec_load_init_v7_bmp+0x40>
 8004100:	4b3e      	ldr	r3, [pc, #248]	; (80041fc <sail_codec_load_init_v7_bmp+0x118>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <sail_codec_load_init_v7_bmp+0x11c>)
 8004106:	224c      	movs	r2, #76	; 0x4c
 8004108:	493e      	ldr	r1, [pc, #248]	; (8004204 <sail_codec_load_init_v7_bmp+0x120>)
 800410a:	2001      	movs	r0, #1
 800410c:	f007 fb6a 	bl	800b7e4 <sail_log>
 8004110:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <sail_codec_load_init_v7_bmp+0x124>)
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4b3d      	ldr	r3, [pc, #244]	; (800420c <sail_codec_load_init_v7_bmp+0x128>)
 8004116:	224c      	movs	r2, #76	; 0x4c
 8004118:	493a      	ldr	r1, [pc, #232]	; (8004204 <sail_codec_load_init_v7_bmp+0x120>)
 800411a:	2001      	movs	r0, #1
 800411c:	f007 fb62 	bl	800b7e4 <sail_log>
 8004120:	2301      	movs	r3, #1
 8004122:	e066      	b.n	80041f2 <sail_codec_load_init_v7_bmp+0x10e>
    *state = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

    SAIL_TRY(sail_check_io_valid(io));
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f006 fcaa 	bl	800aa84 <sail_check_io_valid>
 8004130:	4603      	mov	r3, r0
 8004132:	83fb      	strh	r3, [r7, #30]
 8004134:	8bfb      	ldrh	r3, [r7, #30]
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <sail_codec_load_init_v7_bmp+0x64>
 8004144:	8bfb      	ldrh	r3, [r7, #30]
 8004146:	e054      	b.n	80041f2 <sail_codec_load_init_v7_bmp+0x10e>
    SAIL_CHECK_PTR(load_options);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d011      	beq.n	800417c <sail_codec_load_init_v7_bmp+0x98>
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <sail_codec_load_init_v7_bmp+0x12c>)
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <sail_codec_load_init_v7_bmp+0x11c>)
 800415e:	2250      	movs	r2, #80	; 0x50
 8004160:	4928      	ldr	r1, [pc, #160]	; (8004204 <sail_codec_load_init_v7_bmp+0x120>)
 8004162:	2001      	movs	r0, #1
 8004164:	f007 fb3e 	bl	800b7e4 <sail_log>
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <sail_codec_load_init_v7_bmp+0x124>)
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4b27      	ldr	r3, [pc, #156]	; (800420c <sail_codec_load_init_v7_bmp+0x128>)
 800416e:	2250      	movs	r2, #80	; 0x50
 8004170:	4924      	ldr	r1, [pc, #144]	; (8004204 <sail_codec_load_init_v7_bmp+0x120>)
 8004172:	2001      	movs	r0, #1
 8004174:	f007 fb36 	bl	800b7e4 <sail_log>
 8004178:	2301      	movs	r3, #1
 800417a:	e03a      	b.n	80041f2 <sail_codec_load_init_v7_bmp+0x10e>

    /* Allocate a new state. */
    struct bmp_state *bmp_state;
    SAIL_TRY(alloc_bmp_state(&bmp_state));
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff67 	bl	8004054 <alloc_bmp_state>
 8004186:	4603      	mov	r3, r0
 8004188:	83bb      	strh	r3, [r7, #28]
 800418a:	8bbb      	ldrh	r3, [r7, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <sail_codec_load_init_v7_bmp+0xba>
 800419a:	8bbb      	ldrh	r3, [r7, #28]
 800419c:	e029      	b.n	80041f2 <sail_codec_load_init_v7_bmp+0x10e>
    *state = bmp_state;
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]

    /* Deep copy load options. */
    SAIL_TRY(sail_copy_load_options(load_options, &bmp_state->load_options));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4619      	mov	r1, r3
 80041a8:	68b8      	ldr	r0, [r7, #8]
 80041aa:	f007 fa7d 	bl	800b6a8 <sail_copy_load_options>
 80041ae:	4603      	mov	r3, r0
 80041b0:	837b      	strh	r3, [r7, #26]
 80041b2:	8b7b      	ldrh	r3, [r7, #26]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <sail_codec_load_init_v7_bmp+0xe2>
 80041c2:	8b7b      	ldrh	r3, [r7, #26]
 80041c4:	e015      	b.n	80041f2 <sail_codec_load_init_v7_bmp+0x10e>

    SAIL_TRY(bmp_private_read_init(io, bmp_state->load_options, &bmp_state->common_bmp_state, SAIL_READ_BMP_FILE_HEADER));
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f103 020c 	add.w	r2, r3, #12
 80041d0:	2301      	movs	r3, #1
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fc4a 	bl	8004a6c <bmp_private_read_init>
 80041d8:	4603      	mov	r3, r0
 80041da:	833b      	strh	r3, [r7, #24]
 80041dc:	8b3b      	ldrh	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <sail_codec_load_init_v7_bmp+0x10c>
 80041ec:	8b3b      	ldrh	r3, [r7, #24]
 80041ee:	e000      	b.n	80041f2 <sail_codec_load_init_v7_bmp+0x10e>

    return SAIL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	08013ad4 	.word	0x08013ad4
 8004200:	08013a6c 	.word	0x08013a6c
 8004204:	08013a84 	.word	0x08013a84
 8004208:	08013ae0 	.word	0x08013ae0
 800420c:	08013adc 	.word	0x08013adc
 8004210:	08013af4 	.word	0x08013af4

08004214 <sail_codec_load_seek_next_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_seek_next_frame_v7_bmp(void *state, struct sail_io *io, struct sail_image **image) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	; 0x28
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d011      	beq.n	8004254 <sail_codec_load_seek_next_frame_v7_bmp+0x40>
 8004230:	4b32      	ldr	r3, [pc, #200]	; (80042fc <sail_codec_load_seek_next_frame_v7_bmp+0xe8>)
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <sail_codec_load_seek_next_frame_v7_bmp+0xec>)
 8004236:	2261      	movs	r2, #97	; 0x61
 8004238:	4932      	ldr	r1, [pc, #200]	; (8004304 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 800423a:	2001      	movs	r0, #1
 800423c:	f007 fad2 	bl	800b7e4 <sail_log>
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <sail_codec_load_seek_next_frame_v7_bmp+0xf4>)
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 8004246:	2261      	movs	r2, #97	; 0x61
 8004248:	492e      	ldr	r1, [pc, #184]	; (8004304 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 800424a:	2001      	movs	r0, #1
 800424c:	f007 faca 	bl	800b7e4 <sail_log>
 8004250:	2301      	movs	r3, #1
 8004252:	e04f      	b.n	80042f4 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    SAIL_TRY(sail_check_io_valid(io));
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f006 fc15 	bl	800aa84 <sail_check_io_valid>
 800425a:	4603      	mov	r3, r0
 800425c:	83fb      	strh	r3, [r7, #30]
 800425e:	8bfb      	ldrh	r3, [r7, #30]
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <sail_codec_load_seek_next_frame_v7_bmp+0x5e>
 800426e:	8bfb      	ldrh	r3, [r7, #30]
 8004270:	e040      	b.n	80042f4 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    SAIL_CHECK_PTR(image);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d011      	beq.n	80042a6 <sail_codec_load_seek_next_frame_v7_bmp+0x92>
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <sail_codec_load_seek_next_frame_v7_bmp+0xfc>)
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <sail_codec_load_seek_next_frame_v7_bmp+0xec>)
 8004288:	2263      	movs	r2, #99	; 0x63
 800428a:	491e      	ldr	r1, [pc, #120]	; (8004304 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 800428c:	2001      	movs	r0, #1
 800428e:	f007 faa9 	bl	800b7e4 <sail_log>
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <sail_codec_load_seek_next_frame_v7_bmp+0xf4>)
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 8004298:	2263      	movs	r2, #99	; 0x63
 800429a:	491a      	ldr	r1, [pc, #104]	; (8004304 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 800429c:	2001      	movs	r0, #1
 800429e:	f007 faa1 	bl	800b7e4 <sail_log>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e026      	b.n	80042f4 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	61bb      	str	r3, [r7, #24]

    if (bmp_state->frame_loaded) {
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	7a1b      	ldrb	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <sail_codec_load_seek_next_frame_v7_bmp+0xb2>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_NO_MORE_FRAMES);
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <sail_codec_load_seek_next_frame_v7_bmp+0x100>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 80042b8:	2268      	movs	r2, #104	; 0x68
 80042ba:	4912      	ldr	r1, [pc, #72]	; (8004304 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 80042bc:	2001      	movs	r0, #1
 80042be:	f007 fa91 	bl	800b7e4 <sail_log>
 80042c2:	23ce      	movs	r3, #206	; 0xce
 80042c4:	e016      	b.n	80042f4 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    }

    bmp_state->frame_loaded = true;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2201      	movs	r2, #1
 80042ca:	721a      	strb	r2, [r3, #8]

    SAIL_TRY(bmp_private_read_seek_next_frame(bmp_state->common_bmp_state, io, image));
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 ff05 	bl	80050e4 <bmp_private_read_seek_next_frame>
 80042da:	4603      	mov	r3, r0
 80042dc:	82fb      	strh	r3, [r7, #22]
 80042de:	8afb      	ldrh	r3, [r7, #22]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <sail_codec_load_seek_next_frame_v7_bmp+0xde>
 80042ee:	8afb      	ldrh	r3, [r7, #22]
 80042f0:	e000      	b.n	80042f4 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>

    return SAIL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08013ad4 	.word	0x08013ad4
 8004300:	08013a6c 	.word	0x08013a6c
 8004304:	08013a84 	.word	0x08013a84
 8004308:	08013ae0 	.word	0x08013ae0
 800430c:	08013adc 	.word	0x08013adc
 8004310:	08013b04 	.word	0x08013b04
 8004314:	08013b0c 	.word	0x08013b0c

08004318 <sail_codec_load_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_frame_v7_bmp(void *state, struct sail_io *io, struct sail_image *image) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d011      	beq.n	8004358 <sail_codec_load_frame_v7_bmp+0x40>
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <sail_codec_load_frame_v7_bmp+0xb0>)
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4b24      	ldr	r3, [pc, #144]	; (80043cc <sail_codec_load_frame_v7_bmp+0xb4>)
 800433a:	2274      	movs	r2, #116	; 0x74
 800433c:	4924      	ldr	r1, [pc, #144]	; (80043d0 <sail_codec_load_frame_v7_bmp+0xb8>)
 800433e:	2001      	movs	r0, #1
 8004340:	f007 fa50 	bl	800b7e4 <sail_log>
 8004344:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <sail_codec_load_frame_v7_bmp+0xbc>)
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <sail_codec_load_frame_v7_bmp+0xc0>)
 800434a:	2274      	movs	r2, #116	; 0x74
 800434c:	4920      	ldr	r1, [pc, #128]	; (80043d0 <sail_codec_load_frame_v7_bmp+0xb8>)
 800434e:	2001      	movs	r0, #1
 8004350:	f007 fa48 	bl	800b7e4 <sail_log>
 8004354:	2301      	movs	r3, #1
 8004356:	e033      	b.n	80043c0 <sail_codec_load_frame_v7_bmp+0xa8>
    SAIL_TRY(sail_check_io_valid(io));
 8004358:	68b8      	ldr	r0, [r7, #8]
 800435a:	f006 fb93 	bl	800aa84 <sail_check_io_valid>
 800435e:	4603      	mov	r3, r0
 8004360:	83fb      	strh	r3, [r7, #30]
 8004362:	8bfb      	ldrh	r3, [r7, #30]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <sail_codec_load_frame_v7_bmp+0x5e>
 8004372:	8bfb      	ldrh	r3, [r7, #30]
 8004374:	e024      	b.n	80043c0 <sail_codec_load_frame_v7_bmp+0xa8>
    SAIL_TRY(sail_check_image_skeleton_valid(image));
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f005 ffaa 	bl	800a2d0 <sail_check_image_skeleton_valid>
 800437c:	4603      	mov	r3, r0
 800437e:	83bb      	strh	r3, [r7, #28]
 8004380:	8bbb      	ldrh	r3, [r7, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <sail_codec_load_frame_v7_bmp+0x7c>
 8004390:	8bbb      	ldrh	r3, [r7, #28]
 8004392:	e015      	b.n	80043c0 <sail_codec_load_frame_v7_bmp+0xa8>

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	61bb      	str	r3, [r7, #24]

    SAIL_TRY(bmp_private_read_frame(bmp_state->common_bmp_state, io, image));
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 ffd1 	bl	8005348 <bmp_private_read_frame>
 80043a6:	4603      	mov	r3, r0
 80043a8:	82fb      	strh	r3, [r7, #22]
 80043aa:	8afb      	ldrh	r3, [r7, #22]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <sail_codec_load_frame_v7_bmp+0xa6>
 80043ba:	8afb      	ldrh	r3, [r7, #22]
 80043bc:	e000      	b.n	80043c0 <sail_codec_load_frame_v7_bmp+0xa8>

    return SAIL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	08013ad4 	.word	0x08013ad4
 80043cc:	08013a6c 	.word	0x08013a6c
 80043d0:	08013a84 	.word	0x08013a84
 80043d4:	08013ae0 	.word	0x08013ae0
 80043d8:	08013adc 	.word	0x08013adc

080043dc <sail_codec_load_finish_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_finish_v7_bmp(void **state, struct sail_io *io) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d011      	beq.n	800441a <sail_codec_load_finish_v7_bmp+0x3e>
 80043f6:	4b24      	ldr	r3, [pc, #144]	; (8004488 <sail_codec_load_finish_v7_bmp+0xac>)
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <sail_codec_load_finish_v7_bmp+0xb0>)
 80043fc:	2281      	movs	r2, #129	; 0x81
 80043fe:	4924      	ldr	r1, [pc, #144]	; (8004490 <sail_codec_load_finish_v7_bmp+0xb4>)
 8004400:	2001      	movs	r0, #1
 8004402:	f007 f9ef 	bl	800b7e4 <sail_log>
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <sail_codec_load_finish_v7_bmp+0xb8>)
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <sail_codec_load_finish_v7_bmp+0xbc>)
 800440c:	2281      	movs	r2, #129	; 0x81
 800440e:	4920      	ldr	r1, [pc, #128]	; (8004490 <sail_codec_load_finish_v7_bmp+0xb4>)
 8004410:	2001      	movs	r0, #1
 8004412:	f007 f9e7 	bl	800b7e4 <sail_log>
 8004416:	2301      	movs	r3, #1
 8004418:	e031      	b.n	800447e <sail_codec_load_finish_v7_bmp+0xa2>
    SAIL_TRY(sail_check_io_valid(io));
 800441a:	6838      	ldr	r0, [r7, #0]
 800441c:	f006 fb32 	bl	800aa84 <sail_check_io_valid>
 8004420:	4603      	mov	r3, r0
 8004422:	82fb      	strh	r3, [r7, #22]
 8004424:	8afb      	ldrh	r3, [r7, #22]
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <sail_codec_load_finish_v7_bmp+0x5c>
 8004434:	8afb      	ldrh	r3, [r7, #22]
 8004436:	e022      	b.n	800447e <sail_codec_load_finish_v7_bmp+0xa2>

    struct bmp_state *bmp_state = (struct bmp_state *)(*state);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	613b      	str	r3, [r7, #16]

    *state = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

    if (bmp_state->common_bmp_state != NULL) {
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d014      	beq.n	8004476 <sail_codec_load_finish_v7_bmp+0x9a>
        SAIL_TRY_OR_CLEANUP(bmp_private_read_finish(&bmp_state->common_bmp_state, io),
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	330c      	adds	r3, #12
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fa24 	bl	80058a0 <bmp_private_read_finish>
 8004458:	4603      	mov	r3, r0
 800445a:	81fb      	strh	r3, [r7, #14]
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <sail_codec_load_finish_v7_bmp+0x9a>
 800446c:	6938      	ldr	r0, [r7, #16]
 800446e:	f7ff fe1f 	bl	80040b0 <destroy_bmp_state>
 8004472:	89fb      	ldrh	r3, [r7, #14]
 8004474:	e003      	b.n	800447e <sail_codec_load_finish_v7_bmp+0xa2>
                            /* cleanup */ destroy_bmp_state(bmp_state));
    }

    destroy_bmp_state(bmp_state);
 8004476:	6938      	ldr	r0, [r7, #16]
 8004478:	f7ff fe1a 	bl	80040b0 <destroy_bmp_state>

    return SAIL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	08013ad4 	.word	0x08013ad4
 800448c:	08013a6c 	.word	0x08013a6c
 8004490:	08013a84 	.word	0x08013a84
 8004494:	08013ae0 	.word	0x08013ae0
 8004498:	08013adc 	.word	0x08013adc

0800449c <sail_codec_save_init_v7_bmp>:

/*
 * Encoding functions.
 */

SAIL_EXPORT sail_status_t sail_codec_save_init_v7_bmp(struct sail_io *io, const struct sail_save_options *save_options, void **state) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d011      	beq.n	80044dc <sail_codec_save_init_v7_bmp+0x40>
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <sail_codec_save_init_v7_bmp+0xac>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	4b23      	ldr	r3, [pc, #140]	; (800454c <sail_codec_save_init_v7_bmp+0xb0>)
 80044be:	2298      	movs	r2, #152	; 0x98
 80044c0:	4923      	ldr	r1, [pc, #140]	; (8004550 <sail_codec_save_init_v7_bmp+0xb4>)
 80044c2:	2001      	movs	r0, #1
 80044c4:	f007 f98e 	bl	800b7e4 <sail_log>
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <sail_codec_save_init_v7_bmp+0xb8>)
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <sail_codec_save_init_v7_bmp+0xbc>)
 80044ce:	2298      	movs	r2, #152	; 0x98
 80044d0:	491f      	ldr	r1, [pc, #124]	; (8004550 <sail_codec_save_init_v7_bmp+0xb4>)
 80044d2:	2001      	movs	r0, #1
 80044d4:	f007 f986 	bl	800b7e4 <sail_log>
 80044d8:	2301      	movs	r3, #1
 80044da:	e031      	b.n	8004540 <sail_codec_save_init_v7_bmp+0xa4>
    SAIL_TRY(sail_check_io_valid(io));
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f006 fad1 	bl	800aa84 <sail_check_io_valid>
 80044e2:	4603      	mov	r3, r0
 80044e4:	82fb      	strh	r3, [r7, #22]
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <sail_codec_save_init_v7_bmp+0x5e>
 80044f6:	8afb      	ldrh	r3, [r7, #22]
 80044f8:	e022      	b.n	8004540 <sail_codec_save_init_v7_bmp+0xa4>
    SAIL_CHECK_PTR(save_options);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d011      	beq.n	800452e <sail_codec_save_init_v7_bmp+0x92>
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <sail_codec_save_init_v7_bmp+0xc0>)
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <sail_codec_save_init_v7_bmp+0xb0>)
 8004510:	229a      	movs	r2, #154	; 0x9a
 8004512:	490f      	ldr	r1, [pc, #60]	; (8004550 <sail_codec_save_init_v7_bmp+0xb4>)
 8004514:	2001      	movs	r0, #1
 8004516:	f007 f965 	bl	800b7e4 <sail_log>
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <sail_codec_save_init_v7_bmp+0xb8>)
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <sail_codec_save_init_v7_bmp+0xbc>)
 8004520:	229a      	movs	r2, #154	; 0x9a
 8004522:	490b      	ldr	r1, [pc, #44]	; (8004550 <sail_codec_save_init_v7_bmp+0xb4>)
 8004524:	2001      	movs	r0, #1
 8004526:	f007 f95d 	bl	800b7e4 <sail_log>
 800452a:	2301      	movs	r3, #1
 800452c:	e008      	b.n	8004540 <sail_codec_save_init_v7_bmp+0xa4>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <sail_codec_save_init_v7_bmp+0xc4>)
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <sail_codec_save_init_v7_bmp+0xbc>)
 8004534:	229c      	movs	r2, #156	; 0x9c
 8004536:	4906      	ldr	r1, [pc, #24]	; (8004550 <sail_codec_save_init_v7_bmp+0xb4>)
 8004538:	2001      	movs	r0, #1
 800453a:	f007 f953 	bl	800b7e4 <sail_log>
 800453e:	2311      	movs	r3, #17
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08013ad4 	.word	0x08013ad4
 800454c:	08013a6c 	.word	0x08013a6c
 8004550:	08013a84 	.word	0x08013a84
 8004554:	08013ae0 	.word	0x08013ae0
 8004558:	08013adc 	.word	0x08013adc
 800455c:	08013b28 	.word	0x08013b28
 8004560:	08013b38 	.word	0x08013b38

08004564 <sail_codec_save_seek_next_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_seek_next_frame_v7_bmp(void *state, struct sail_io *io, const struct sail_image *image) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d011      	beq.n	80045a4 <sail_codec_save_seek_next_frame_v7_bmp+0x40>
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <sail_codec_save_seek_next_frame_v7_bmp+0x98>)
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <sail_codec_save_seek_next_frame_v7_bmp+0x9c>)
 8004586:	22a1      	movs	r2, #161	; 0xa1
 8004588:	491e      	ldr	r1, [pc, #120]	; (8004604 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 800458a:	2001      	movs	r0, #1
 800458c:	f007 f92a 	bl	800b7e4 <sail_log>
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <sail_codec_save_seek_next_frame_v7_bmp+0xa4>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4b1d      	ldr	r3, [pc, #116]	; (800460c <sail_codec_save_seek_next_frame_v7_bmp+0xa8>)
 8004596:	22a1      	movs	r2, #161	; 0xa1
 8004598:	491a      	ldr	r1, [pc, #104]	; (8004604 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 800459a:	2001      	movs	r0, #1
 800459c:	f007 f922 	bl	800b7e4 <sail_log>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e026      	b.n	80045f2 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_io_valid(io));
 80045a4:	68b8      	ldr	r0, [r7, #8]
 80045a6:	f006 fa6d 	bl	800aa84 <sail_check_io_valid>
 80045aa:	4603      	mov	r3, r0
 80045ac:	82fb      	strh	r3, [r7, #22]
 80045ae:	8afb      	ldrh	r3, [r7, #22]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <sail_codec_save_seek_next_frame_v7_bmp+0x5e>
 80045be:	8afb      	ldrh	r3, [r7, #22]
 80045c0:	e017      	b.n	80045f2 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_image_valid(image));
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f005 fee6 	bl	800a394 <sail_check_image_valid>
 80045c8:	4603      	mov	r3, r0
 80045ca:	82bb      	strh	r3, [r7, #20]
 80045cc:	8abb      	ldrh	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <sail_codec_save_seek_next_frame_v7_bmp+0x7c>
 80045dc:	8abb      	ldrh	r3, [r7, #20]
 80045de:	e008      	b.n	80045f2 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <sail_codec_save_seek_next_frame_v7_bmp+0xac>)
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <sail_codec_save_seek_next_frame_v7_bmp+0xa8>)
 80045e6:	22a5      	movs	r2, #165	; 0xa5
 80045e8:	4906      	ldr	r1, [pc, #24]	; (8004604 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 80045ea:	2001      	movs	r0, #1
 80045ec:	f007 f8fa 	bl	800b7e4 <sail_log>
 80045f0:	2311      	movs	r3, #17
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	08013ad4 	.word	0x08013ad4
 8004600:	08013a6c 	.word	0x08013a6c
 8004604:	08013a84 	.word	0x08013a84
 8004608:	08013ae0 	.word	0x08013ae0
 800460c:	08013adc 	.word	0x08013adc
 8004610:	08013b38 	.word	0x08013b38

08004614 <sail_codec_save_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_frame_v7_bmp(void *state, struct sail_io *io, const struct sail_image *image) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d011      	beq.n	8004654 <sail_codec_save_frame_v7_bmp+0x40>
 8004630:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <sail_codec_save_frame_v7_bmp+0x98>)
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <sail_codec_save_frame_v7_bmp+0x9c>)
 8004636:	22aa      	movs	r2, #170	; 0xaa
 8004638:	491e      	ldr	r1, [pc, #120]	; (80046b4 <sail_codec_save_frame_v7_bmp+0xa0>)
 800463a:	2001      	movs	r0, #1
 800463c:	f007 f8d2 	bl	800b7e4 <sail_log>
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <sail_codec_save_frame_v7_bmp+0xa4>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <sail_codec_save_frame_v7_bmp+0xa8>)
 8004646:	22aa      	movs	r2, #170	; 0xaa
 8004648:	491a      	ldr	r1, [pc, #104]	; (80046b4 <sail_codec_save_frame_v7_bmp+0xa0>)
 800464a:	2001      	movs	r0, #1
 800464c:	f007 f8ca 	bl	800b7e4 <sail_log>
 8004650:	2301      	movs	r3, #1
 8004652:	e026      	b.n	80046a2 <sail_codec_save_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_io_valid(io));
 8004654:	68b8      	ldr	r0, [r7, #8]
 8004656:	f006 fa15 	bl	800aa84 <sail_check_io_valid>
 800465a:	4603      	mov	r3, r0
 800465c:	82fb      	strh	r3, [r7, #22]
 800465e:	8afb      	ldrh	r3, [r7, #22]
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <sail_codec_save_frame_v7_bmp+0x5e>
 800466e:	8afb      	ldrh	r3, [r7, #22]
 8004670:	e017      	b.n	80046a2 <sail_codec_save_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_image_valid(image));
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f005 fe8e 	bl	800a394 <sail_check_image_valid>
 8004678:	4603      	mov	r3, r0
 800467a:	82bb      	strh	r3, [r7, #20]
 800467c:	8abb      	ldrh	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <sail_codec_save_frame_v7_bmp+0x7c>
 800468c:	8abb      	ldrh	r3, [r7, #20]
 800468e:	e008      	b.n	80046a2 <sail_codec_save_frame_v7_bmp+0x8e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <sail_codec_save_frame_v7_bmp+0xac>)
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <sail_codec_save_frame_v7_bmp+0xa8>)
 8004696:	22ae      	movs	r2, #174	; 0xae
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <sail_codec_save_frame_v7_bmp+0xa0>)
 800469a:	2001      	movs	r0, #1
 800469c:	f007 f8a2 	bl	800b7e4 <sail_log>
 80046a0:	2311      	movs	r3, #17
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	08013ad4 	.word	0x08013ad4
 80046b0:	08013a6c 	.word	0x08013a6c
 80046b4:	08013a84 	.word	0x08013a84
 80046b8:	08013ae0 	.word	0x08013ae0
 80046bc:	08013adc 	.word	0x08013adc
 80046c0:	08013b38 	.word	0x08013b38

080046c4 <sail_codec_save_finish_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_finish_v7_bmp(void **state, struct sail_io *io) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d011      	beq.n	8004702 <sail_codec_save_finish_v7_bmp+0x3e>
 80046de:	4b17      	ldr	r3, [pc, #92]	; (800473c <sail_codec_save_finish_v7_bmp+0x78>)
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <sail_codec_save_finish_v7_bmp+0x7c>)
 80046e4:	22b3      	movs	r2, #179	; 0xb3
 80046e6:	4917      	ldr	r1, [pc, #92]	; (8004744 <sail_codec_save_finish_v7_bmp+0x80>)
 80046e8:	2001      	movs	r0, #1
 80046ea:	f007 f87b 	bl	800b7e4 <sail_log>
 80046ee:	4b16      	ldr	r3, [pc, #88]	; (8004748 <sail_codec_save_finish_v7_bmp+0x84>)
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <sail_codec_save_finish_v7_bmp+0x88>)
 80046f4:	22b3      	movs	r2, #179	; 0xb3
 80046f6:	4913      	ldr	r1, [pc, #76]	; (8004744 <sail_codec_save_finish_v7_bmp+0x80>)
 80046f8:	2001      	movs	r0, #1
 80046fa:	f007 f873 	bl	800b7e4 <sail_log>
 80046fe:	2301      	movs	r3, #1
 8004700:	e017      	b.n	8004732 <sail_codec_save_finish_v7_bmp+0x6e>
    SAIL_TRY(sail_check_io_valid(io));
 8004702:	6838      	ldr	r0, [r7, #0]
 8004704:	f006 f9be 	bl	800aa84 <sail_check_io_valid>
 8004708:	4603      	mov	r3, r0
 800470a:	81fb      	strh	r3, [r7, #14]
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	2b00      	cmp	r3, #0
 8004710:	bf14      	ite	ne
 8004712:	2301      	movne	r3, #1
 8004714:	2300      	moveq	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <sail_codec_save_finish_v7_bmp+0x5c>
 800471c:	89fb      	ldrh	r3, [r7, #14]
 800471e:	e008      	b.n	8004732 <sail_codec_save_finish_v7_bmp+0x6e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <sail_codec_save_finish_v7_bmp+0x8c>)
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <sail_codec_save_finish_v7_bmp+0x88>)
 8004726:	22b6      	movs	r2, #182	; 0xb6
 8004728:	4906      	ldr	r1, [pc, #24]	; (8004744 <sail_codec_save_finish_v7_bmp+0x80>)
 800472a:	2001      	movs	r0, #1
 800472c:	f007 f85a 	bl	800b7e4 <sail_log>
 8004730:	2311      	movs	r3, #17
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	08013ad4 	.word	0x08013ad4
 8004740:	08013a6c 	.word	0x08013a6c
 8004744:	08013a84 	.word	0x08013a84
 8004748:	08013ae0 	.word	0x08013ae0
 800474c:	08013adc 	.word	0x08013adc
 8004750:	08013b38 	.word	0x08013b38

08004754 <alloc_bmp_state>:
    /* Number of bytes to pad scan lines to 4-byte boundary. */
    unsigned pad_bytes;
    bool flipped;
};

static sail_status_t alloc_bmp_state(struct bmp_state **bmp_state) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	6078      	str	r0, [r7, #4]

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct bmp_state), &ptr));
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4619      	mov	r1, r3
 8004762:	20c4      	movs	r0, #196	; 0xc4
 8004764:	f007 f936 	bl	800b9d4 <sail_malloc>
 8004768:	4603      	mov	r3, r0
 800476a:	81fb      	strh	r3, [r7, #14]
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <alloc_bmp_state+0x2c>
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	e03b      	b.n	80047f8 <alloc_bmp_state+0xa4>
    *bmp_state = ptr;
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]

    if (*bmp_state == NULL) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <alloc_bmp_state+0x4e>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <alloc_bmp_state+0xac>)
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <alloc_bmp_state+0xb0>)
 8004794:	226b      	movs	r2, #107	; 0x6b
 8004796:	491c      	ldr	r1, [pc, #112]	; (8004808 <alloc_bmp_state+0xb4>)
 8004798:	2001      	movs	r0, #1
 800479a:	f007 f823 	bl	800b7e4 <sail_log>
 800479e:	2302      	movs	r3, #2
 80047a0:	e02a      	b.n	80047f8 <alloc_bmp_state+0xa4>
    }

    (*bmp_state)->load_options     = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
    (*bmp_state)->save_options     = NULL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	605a      	str	r2, [r3, #4]
    (*bmp_state)->bmp_load_options = 0;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
    (*bmp_state)->iccp             = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    (*bmp_state)->palette          = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    (*bmp_state)->palette_count    = 0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    (*bmp_state)->bytes_in_row     = 0;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    (*bmp_state)->pad_bytes        = 0;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    (*bmp_state)->flipped          = false;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    return SAIL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08013bb0 	.word	0x08013bb0
 8004804:	08013b54 	.word	0x08013b54
 8004808:	08013b58 	.word	0x08013b58

0800480c <destroy_bmp_state>:

static void destroy_bmp_state(struct bmp_state *bmp_state) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

    if (bmp_state == NULL) {
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00f      	beq.n	800483a <destroy_bmp_state+0x2e>
        return;
    }

    sail_destroy_iccp(bmp_state->iccp);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004820:	4618      	mov	r0, r3
 8004822:	f005 fc97 	bl	800a154 <sail_destroy_iccp>

    sail_free(bmp_state->palette);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800482c:	4618      	mov	r0, r3
 800482e:	f007 f959 	bl	800bae4 <sail_free>

    sail_free(bmp_state);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f007 f956 	bl	800bae4 <sail_free>
 8004838:	e000      	b.n	800483c <destroy_bmp_state+0x30>
        return;
 800483a:	bf00      	nop
}
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <read_bmp_headers>:

static sail_status_t read_bmp_headers(struct sail_io *io, struct bmp_state *bmp_state) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

    size_t offset_of_bitmap_header;
    SAIL_TRY(io->tell(io->stream, &offset_of_bitmap_header));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	f107 0108 	add.w	r1, r7, #8
 800485a:	4610      	mov	r0, r2
 800485c:	4798      	blx	r3
 800485e:	4603      	mov	r3, r0
 8004860:	83fb      	strh	r3, [r7, #30]
 8004862:	8bfb      	ldrh	r3, [r7, #30]
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <read_bmp_headers+0x32>
 8004872:	8bfb      	ldrh	r3, [r7, #30]
 8004874:	e0eb      	b.n	8004a4e <read_bmp_headers+0x20a>

    SAIL_TRY(bmp_private_read_v2(io, &bmp_state->v2));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3330      	adds	r3, #48	; 0x30
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f001 f947 	bl	8005b10 <bmp_private_read_v2>
 8004882:	4603      	mov	r3, r0
 8004884:	83bb      	strh	r3, [r7, #28]
 8004886:	8bbb      	ldrh	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <read_bmp_headers+0x56>
 8004896:	8bbb      	ldrh	r3, [r7, #28]
 8004898:	e0d9      	b.n	8004a4e <read_bmp_headers+0x20a>

    /* If the height is negative, the bitmap is top-to-bottom. */
    if (bmp_state->v2.height < 0) {
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	da09      	bge.n	80048b6 <read_bmp_headers+0x72>
        bmp_state->v2.height = -bmp_state->v2.height;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	425a      	negs	r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
        bmp_state->flipped = false;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 80048b4:	e003      	b.n	80048be <read_bmp_headers+0x7a>
    } else {
        bmp_state->flipped = true;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    switch (bmp_state->v2.size) {
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	2b7c      	cmp	r3, #124	; 0x7c
 80048c4:	d04d      	beq.n	8004962 <read_bmp_headers+0x11e>
 80048c6:	2b7c      	cmp	r3, #124	; 0x7c
 80048c8:	f200 80a8 	bhi.w	8004a1c <read_bmp_headers+0x1d8>
 80048cc:	2b6c      	cmp	r3, #108	; 0x6c
 80048ce:	d021      	beq.n	8004914 <read_bmp_headers+0xd0>
 80048d0:	2b6c      	cmp	r3, #108	; 0x6c
 80048d2:	f200 80a3 	bhi.w	8004a1c <read_bmp_headers+0x1d8>
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d002      	beq.n	80048e0 <read_bmp_headers+0x9c>
 80048da:	2b28      	cmp	r3, #40	; 0x28
 80048dc:	d004      	beq.n	80048e8 <read_bmp_headers+0xa4>
 80048de:	e09d      	b.n	8004a1c <read_bmp_headers+0x1d8>
        case SAIL_BITMAP_DIB_HEADER_V2_SIZE: {
            bmp_state->version = SAIL_BMP_V2;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2202      	movs	r2, #2
 80048e4:	735a      	strb	r2, [r3, #13]
            break;
 80048e6:	e0b1      	b.n	8004a4c <read_bmp_headers+0x208>
        }
        case SAIL_BITMAP_DIB_HEADER_V3_SIZE: {
            bmp_state->version = SAIL_BMP_V3;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2203      	movs	r2, #3
 80048ec:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	3340      	adds	r3, #64	; 0x40
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 f97b 	bl	8005bf0 <bmp_private_read_v3>
 80048fa:	4603      	mov	r3, r0
 80048fc:	81fb      	strh	r3, [r7, #14]
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8099 	beq.w	8004a42 <read_bmp_headers+0x1fe>
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	e09c      	b.n	8004a4e <read_bmp_headers+0x20a>
            break;
        }
        case SAIL_BITMAP_DIB_HEADER_V4_SIZE: {
            bmp_state->version = SAIL_BMP_V4;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2204      	movs	r2, #4
 8004918:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3340      	adds	r3, #64	; 0x40
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 f965 	bl	8005bf0 <bmp_private_read_v3>
 8004926:	4603      	mov	r3, r0
 8004928:	827b      	strh	r3, [r7, #18]
 800492a:	8a7b      	ldrh	r3, [r7, #18]
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <read_bmp_headers+0xfa>
 800493a:	8a7b      	ldrh	r3, [r7, #18]
 800493c:	e087      	b.n	8004a4e <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v4(io, &bmp_state->v4));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3358      	adds	r3, #88	; 0x58
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f9d8 	bl	8005cfa <bmp_private_read_v4>
 800494a:	4603      	mov	r3, r0
 800494c:	823b      	strh	r3, [r7, #16]
 800494e:	8a3b      	ldrh	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d073      	beq.n	8004a46 <read_bmp_headers+0x202>
 800495e:	8a3b      	ldrh	r3, [r7, #16]
 8004960:	e075      	b.n	8004a4e <read_bmp_headers+0x20a>
            break;
        }
        case SAIL_BITMAP_DIB_HEADER_V5_SIZE: {
            bmp_state->version = SAIL_BMP_V5;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2205      	movs	r2, #5
 8004966:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	3340      	adds	r3, #64	; 0x40
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f93e 	bl	8005bf0 <bmp_private_read_v3>
 8004974:	4603      	mov	r3, r0
 8004976:	837b      	strh	r3, [r7, #26]
 8004978:	8b7b      	ldrh	r3, [r7, #26]
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <read_bmp_headers+0x148>
 8004988:	8b7b      	ldrh	r3, [r7, #26]
 800498a:	e060      	b.n	8004a4e <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v4(io, &bmp_state->v4));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	3358      	adds	r3, #88	; 0x58
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 f9b1 	bl	8005cfa <bmp_private_read_v4>
 8004998:	4603      	mov	r3, r0
 800499a:	833b      	strh	r3, [r7, #24]
 800499c:	8b3b      	ldrh	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf14      	ite	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	2300      	moveq	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <read_bmp_headers+0x16c>
 80049ac:	8b3b      	ldrh	r3, [r7, #24]
 80049ae:	e04e      	b.n	8004a4e <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v5(io, &bmp_state->v5));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	339c      	adds	r3, #156	; 0x9c
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fb0b 	bl	8005fd2 <bmp_private_read_v5>
 80049bc:	4603      	mov	r3, r0
 80049be:	82fb      	strh	r3, [r7, #22]
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <read_bmp_headers+0x190>
 80049d0:	8afb      	ldrh	r3, [r7, #22]
 80049d2:	e03c      	b.n	8004a4e <read_bmp_headers+0x20a>

            if (memcmp(&bmp_state->v4.color_space_type, SAIL_PROFILE_EMBEDDED, sizeof(SAIL_PROFILE_EMBEDDED)) == 0) {
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3368      	adds	r3, #104	; 0x68
 80049d8:	2204      	movs	r2, #4
 80049da:	491f      	ldr	r1, [pc, #124]	; (8004a58 <read_bmp_headers+0x214>)
 80049dc:	4618      	mov	r0, r3
 80049de:	f00b f881 	bl	800fae4 <memcmp>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d130      	bne.n	8004a4a <read_bmp_headers+0x206>
                SAIL_TRY(bmp_private_fetch_iccp(io, (long)(offset_of_bitmap_header + bmp_state->v5.profile_data), bmp_state->v5.profile_size, &bmp_state->iccp));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4413      	add	r3, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	33ac      	adds	r3, #172	; 0xac
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 fbc2 	bl	8006188 <bmp_private_fetch_iccp>
 8004a04:	4603      	mov	r3, r0
 8004a06:	82bb      	strh	r3, [r7, #20]
 8004a08:	8abb      	ldrh	r3, [r7, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d018      	beq.n	8004a4a <read_bmp_headers+0x206>
 8004a18:	8abb      	ldrh	r3, [r7, #20]
 8004a1a:	e018      	b.n	8004a4e <read_bmp_headers+0x20a>
            }

            break;
        }
        default: {
            SAIL_LOG_ERROR("BMP: Unsupported file header size %u", bmp_state->v2.size);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <read_bmp_headers+0x218>)
 8004a24:	22b4      	movs	r2, #180	; 0xb4
 8004a26:	490e      	ldr	r1, [pc, #56]	; (8004a60 <read_bmp_headers+0x21c>)
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f006 fedb 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <read_bmp_headers+0x220>)
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <read_bmp_headers+0x224>)
 8004a34:	22b5      	movs	r2, #181	; 0xb5
 8004a36:	490a      	ldr	r1, [pc, #40]	; (8004a60 <read_bmp_headers+0x21c>)
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f006 fed3 	bl	800b7e4 <sail_log>
 8004a3e:	23d4      	movs	r3, #212	; 0xd4
 8004a40:	e005      	b.n	8004a4e <read_bmp_headers+0x20a>
            break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <read_bmp_headers+0x208>
            break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <read_bmp_headers+0x208>
            break;
 8004a4a:	bf00      	nop
        }
    }

    return SAIL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	080172a0 	.word	0x080172a0
 8004a5c:	08013bd0 	.word	0x08013bd0
 8004a60:	08013b58 	.word	0x08013b58
 8004a64:	08013bf8 	.word	0x08013bf8
 8004a68:	08013b54 	.word	0x08013b54

08004a6c <bmp_private_read_init>:

/*
 * Decoding functions.
 */

sail_status_t bmp_private_read_init(struct sail_io *io, const struct sail_load_options *load_options, void **state, int bmp_load_options) {
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b097      	sub	sp, #92	; 0x5c
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]

    /* Allocate a new state. */
    struct bmp_state *bmp_state;
    SAIL_TRY(alloc_bmp_state(&bmp_state));
 8004a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fe68 	bl	8004754 <alloc_bmp_state>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <bmp_private_read_init+0x36>
 8004a9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004aa0:	e312      	b.n	80050c8 <bmp_private_read_init+0x65c>
    *state = bmp_state;
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Shallow copy load options. */
    bmp_state->load_options = load_options;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	601a      	str	r2, [r3, #0]

    bmp_state->bmp_load_options = bmp_load_options;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	609a      	str	r2, [r3, #8]

    if (bmp_load_options & SAIL_READ_BMP_FILE_HEADER) {
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8092 	beq.w	8004be4 <bmp_private_read_init+0x178>
        /* "BM" or 0x02. */
        uint16_t magic;
        SAIL_TRY(io->strict_read(io->stream, &magic, sizeof(magic)));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	68d0      	ldr	r0, [r2, #12]
 8004ac8:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8004acc:	2202      	movs	r2, #2
 8004ace:	4798      	blx	r3
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <bmp_private_read_init+0x82>
 8004ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004aec:	e2ec      	b.n	80050c8 <bmp_private_read_init+0x65c>
        SAIL_TRY(io->seek(io->stream, 0, SEEK_SET));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	68d0      	ldr	r0, [r2, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	4798      	blx	r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <bmp_private_read_init+0xae>
 8004b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b18:	e2d6      	b.n	80050c8 <bmp_private_read_init+0x65c>

        if (magic == SAIL_DDB_IDENTIFIER) {
 8004b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d126      	bne.n	8004b70 <bmp_private_read_init+0x104>
            bmp_state->version = SAIL_BMP_V1;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	2201      	movs	r2, #1
 8004b26:	735a      	strb	r2, [r3, #13]

            SAIL_TRY(bmp_private_read_ddb_file_header(io, &bmp_state->ddb_file_header));
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	330e      	adds	r3, #14
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fec9 	bl	80058c6 <bmp_private_read_ddb_file_header>
 8004b34:	4603      	mov	r3, r0
 8004b36:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <bmp_private_read_init+0xe0>
 8004b48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b4a:	e2bd      	b.n	80050c8 <bmp_private_read_init+0x65c>
            SAIL_TRY(bmp_private_read_v1(io, &bmp_state->v1));
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	3310      	adds	r3, #16
 8004b50:	4619      	mov	r1, r3
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fed4 	bl	8005900 <bmp_private_read_v1>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d04f      	beq.n	8004c0c <bmp_private_read_init+0x1a0>
 8004b6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b6e:	e2ab      	b.n	80050c8 <bmp_private_read_init+0x65c>
        } else if (magic == SAIL_DIB_IDENTIFIER) {
 8004b70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b72:	f644 5242 	movw	r2, #19778	; 0x4d42
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d122      	bne.n	8004bc0 <bmp_private_read_init+0x154>
            SAIL_TRY(bmp_private_read_dib_file_header(io, &bmp_state->dib_file_header));
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	3320      	adds	r3, #32
 8004b7e:	4619      	mov	r1, r3
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 ff55 	bl	8005a30 <bmp_private_read_dib_file_header>
 8004b86:	4603      	mov	r3, r0
 8004b88:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <bmp_private_read_init+0x132>
 8004b9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b9c:	e294      	b.n	80050c8 <bmp_private_read_init+0x65c>
            SAIL_TRY(read_bmp_headers(io, bmp_state));
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fe4e 	bl	8004844 <read_bmp_headers>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d027      	beq.n	8004c0c <bmp_private_read_init+0x1a0>
 8004bbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bbe:	e283      	b.n	80050c8 <bmp_private_read_init+0x65c>
        } else {
            SAIL_LOG_ERROR("BMP: 0x%x is not a valid magic number", magic);
 8004bc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4b90      	ldr	r3, [pc, #576]	; (8004e08 <bmp_private_read_init+0x39c>)
 8004bc6:	22db      	movs	r2, #219	; 0xdb
 8004bc8:	4990      	ldr	r1, [pc, #576]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f006 fe0a 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8004bd0:	4b8f      	ldr	r3, [pc, #572]	; (8004e10 <bmp_private_read_init+0x3a4>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004bd6:	22dc      	movs	r2, #220	; 0xdc
 8004bd8:	498c      	ldr	r1, [pc, #560]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004bda:	2001      	movs	r0, #1
 8004bdc:	f006 fe02 	bl	800b7e4 <sail_log>
 8004be0:	23d4      	movs	r3, #212	; 0xd4
 8004be2:	e271      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
    } else {
        SAIL_TRY(read_bmp_headers(io, bmp_state));
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	4619      	mov	r1, r3
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff fe2b 	bl	8004844 <read_bmp_headers>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <bmp_private_read_init+0x1a0>
 8004c06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c0a:	e25d      	b.n	80050c8 <bmp_private_read_init+0x65c>
    }

    /* Check BMP restrictions. */
    if (bmp_state->version == SAIL_BMP_V1) {
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	7b5b      	ldrb	r3, [r3, #13]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d15a      	bne.n	8004cca <bmp_private_read_init+0x25e>
        if (bmp_state->v1.type != 0) {
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	8a1b      	ldrh	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00f      	beq.n	8004c3c <bmp_private_read_init+0x1d0>
            SAIL_LOG_ERROR("BMP: DDB type must always be 0");
 8004c1c:	4b7e      	ldr	r3, [pc, #504]	; (8004e18 <bmp_private_read_init+0x3ac>)
 8004c1e:	22e5      	movs	r2, #229	; 0xe5
 8004c20:	497a      	ldr	r1, [pc, #488]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004c22:	2001      	movs	r0, #1
 8004c24:	f006 fdde 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004c28:	4b7c      	ldr	r3, [pc, #496]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004c2e:	22e6      	movs	r2, #230	; 0xe6
 8004c30:	4976      	ldr	r1, [pc, #472]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004c32:	2001      	movs	r0, #1
 8004c34:	f006 fdd6 	bl	800b7e4 <sail_log>
 8004c38:	23d5      	movs	r3, #213	; 0xd5
 8004c3a:	e245      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.planes != 1) {
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	7e1b      	ldrb	r3, [r3, #24]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d00f      	beq.n	8004c64 <bmp_private_read_init+0x1f8>
            SAIL_LOG_ERROR("BMP: DDB planes must always be 1");
 8004c44:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <bmp_private_read_init+0x3b4>)
 8004c46:	22e9      	movs	r2, #233	; 0xe9
 8004c48:	4970      	ldr	r1, [pc, #448]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f006 fdca 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004c50:	4b72      	ldr	r3, [pc, #456]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004c56:	22ea      	movs	r2, #234	; 0xea
 8004c58:	496c      	ldr	r1, [pc, #432]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004c5a:	2001      	movs	r0, #1
 8004c5c:	f006 fdc2 	bl	800b7e4 <sail_log>
 8004c60:	23d5      	movs	r3, #213	; 0xd5
 8004c62:	e231      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.pixels != 0) {
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00f      	beq.n	8004c8c <bmp_private_read_init+0x220>
            SAIL_LOG_ERROR("BMP: DDB pixels must always be 0");
 8004c6c:	4b6d      	ldr	r3, [pc, #436]	; (8004e24 <bmp_private_read_init+0x3b8>)
 8004c6e:	22ed      	movs	r2, #237	; 0xed
 8004c70:	4966      	ldr	r1, [pc, #408]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004c72:	2001      	movs	r0, #1
 8004c74:	f006 fdb6 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004c78:	4b68      	ldr	r3, [pc, #416]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	4b65      	ldr	r3, [pc, #404]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004c7e:	22ee      	movs	r2, #238	; 0xee
 8004c80:	4962      	ldr	r1, [pc, #392]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004c82:	2001      	movs	r0, #1
 8004c84:	f006 fdae 	bl	800b7e4 <sail_log>
 8004c88:	23d5      	movs	r3, #213	; 0xd5
 8004c8a:	e21d      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.bit_count != 1 && bmp_state->v1.bit_count != 4 && bmp_state->v1.bit_count != 8) {
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	7e5b      	ldrb	r3, [r3, #25]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f000 808e 	beq.w	8004db2 <bmp_private_read_init+0x346>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	7e5b      	ldrb	r3, [r3, #25]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	f000 8089 	beq.w	8004db2 <bmp_private_read_init+0x346>
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	7e5b      	ldrb	r3, [r3, #25]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	f000 8084 	beq.w	8004db2 <bmp_private_read_init+0x346>
            SAIL_LOG_ERROR("BMP: DDB bpp must be 1, 4, or 8");
 8004caa:	4b5f      	ldr	r3, [pc, #380]	; (8004e28 <bmp_private_read_init+0x3bc>)
 8004cac:	22f1      	movs	r2, #241	; 0xf1
 8004cae:	4957      	ldr	r1, [pc, #348]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f006 fd97 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004cb6:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4b56      	ldr	r3, [pc, #344]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004cbc:	22f2      	movs	r2, #242	; 0xf2
 8004cbe:	4953      	ldr	r1, [pc, #332]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	f006 fd8f 	bl	800b7e4 <sail_log>
 8004cc6:	23d5      	movs	r3, #213	; 0xd5
 8004cc8:	e1fe      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
    } else if (bmp_state->version >= SAIL_BMP_V3) {
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	7b5b      	ldrb	r3, [r3, #13]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d96f      	bls.n	8004db2 <bmp_private_read_init+0x346>
        if (bmp_state->v3.compression == SAIL_BI_BITFIELDS && bmp_state->v2.bit_count != 16 && bmp_state->v2.bit_count != 32) {
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d117      	bne.n	8004d0c <bmp_private_read_init+0x2a0>
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d013      	beq.n	8004d0c <bmp_private_read_init+0x2a0>
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d00f      	beq.n	8004d0c <bmp_private_read_init+0x2a0>
            SAIL_LOG_ERROR("BMP: BitFields compression is allowed only for 16 or 32 bpp");
 8004cec:	4b4f      	ldr	r3, [pc, #316]	; (8004e2c <bmp_private_read_init+0x3c0>)
 8004cee:	22f6      	movs	r2, #246	; 0xf6
 8004cf0:	4946      	ldr	r1, [pc, #280]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f006 fd76 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004cf8:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	4b45      	ldr	r3, [pc, #276]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004cfe:	22f7      	movs	r2, #247	; 0xf7
 8004d00:	4942      	ldr	r1, [pc, #264]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004d02:	2001      	movs	r0, #1
 8004d04:	f006 fd6e 	bl	800b7e4 <sail_log>
 8004d08:	23d5      	movs	r3, #213	; 0xd5
 8004d0a:	e1dd      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression != SAIL_BI_RGB && bmp_state->v3.compression != SAIL_BI_RLE4 && bmp_state->v3.compression != SAIL_BI_RLE8) {
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	2200      	movs	r2, #0
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d019      	beq.n	8004d4a <bmp_private_read_init+0x2de>
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d014      	beq.n	8004d4a <bmp_private_read_init+0x2de>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	2201      	movs	r2, #1
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00f      	beq.n	8004d4a <bmp_private_read_init+0x2de>
            SAIL_LOG_ERROR("BMP: Only RGB, RLE4, and RLE8 compressions are supported");
 8004d2a:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <bmp_private_read_init+0x3c4>)
 8004d2c:	22fa      	movs	r2, #250	; 0xfa
 8004d2e:	4937      	ldr	r1, [pc, #220]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004d30:	2001      	movs	r0, #1
 8004d32:	f006 fd57 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_COMPRESSION);
 8004d36:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <bmp_private_read_init+0x3c8>)
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004d3c:	22fb      	movs	r2, #251	; 0xfb
 8004d3e:	4933      	ldr	r1, [pc, #204]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004d40:	2001      	movs	r0, #1
 8004d42:	f006 fd4f 	bl	800b7e4 <sail_log>
 8004d46:	23cb      	movs	r3, #203	; 0xcb
 8004d48:	e1be      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression == SAIL_BI_RLE4 && bmp_state->v2.bit_count != 4) {
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2202      	movs	r2, #2
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d113      	bne.n	8004d7c <bmp_private_read_init+0x310>
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00f      	beq.n	8004d7c <bmp_private_read_init+0x310>
            SAIL_LOG_ERROR("BMP: RLE4 compression must only be used with 4 bpp");
 8004d5c:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <bmp_private_read_init+0x3cc>)
 8004d5e:	22fe      	movs	r2, #254	; 0xfe
 8004d60:	492a      	ldr	r1, [pc, #168]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004d62:	2001      	movs	r0, #1
 8004d64:	f006 fd3e 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004d68:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004d6e:	22ff      	movs	r2, #255	; 0xff
 8004d70:	4926      	ldr	r1, [pc, #152]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004d72:	2001      	movs	r0, #1
 8004d74:	f006 fd36 	bl	800b7e4 <sail_log>
 8004d78:	23d5      	movs	r3, #213	; 0xd5
 8004d7a:	e1a5      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression == SAIL_BI_RLE8 && bmp_state->v2.bit_count != 8) {
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2201      	movs	r2, #1
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d115      	bne.n	8004db2 <bmp_private_read_init+0x346>
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d011      	beq.n	8004db2 <bmp_private_read_init+0x346>
            SAIL_LOG_ERROR("BMP: RLE8 compression must only be used with 8 bpp");
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <bmp_private_read_init+0x3d0>)
 8004d90:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004d94:	491d      	ldr	r1, [pc, #116]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004d96:	2001      	movs	r0, #1
 8004d98:	f006 fd24 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <bmp_private_read_init+0x3b0>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <bmp_private_read_init+0x3a8>)
 8004da2:	f240 1203 	movw	r2, #259	; 0x103
 8004da6:	4919      	ldr	r1, [pc, #100]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004da8:	2001      	movs	r0, #1
 8004daa:	f006 fd1b 	bl	800b7e4 <sail_log>
 8004dae:	23d5      	movs	r3, #213	; 0xd5
 8004db0:	e18a      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }
    }

    SAIL_TRY(bmp_private_bit_count_to_pixel_format(bmp_state->version == SAIL_BMP_V1 ? bmp_state->v1.bit_count : bmp_state->v2.bit_count,
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	7b5b      	ldrb	r3, [r3, #13]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d103      	bne.n	8004dc2 <bmp_private_read_init+0x356>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	7e5b      	ldrb	r3, [r3, #25]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	e001      	b.n	8004dc6 <bmp_private_read_init+0x35a>
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	320c      	adds	r2, #12
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 f95b 	bl	8006088 <bmp_private_bit_count_to_pixel_format>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <bmp_private_read_init+0x37e>
 8004de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004de8:	e16e      	b.n	80050c8 <bmp_private_read_init+0x65c>
                                                    &bmp_state->source_pixel_format));

    if (bmp_state->version < SAIL_BMP_V3) {
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	7b5b      	ldrb	r3, [r3, #13]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d828      	bhi.n	8004e44 <bmp_private_read_init+0x3d8>
        SAIL_LOG_DEBUG("BMP: Version(%d)", bmp_state->version);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	7b5b      	ldrb	r3, [r3, #13]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <bmp_private_read_init+0x3d4>)
 8004dfa:	f240 120b 	movw	r2, #267	; 0x10b
 8004dfe:	4903      	ldr	r1, [pc, #12]	; (8004e0c <bmp_private_read_init+0x3a0>)
 8004e00:	2005      	movs	r0, #5
 8004e02:	f006 fcef 	bl	800b7e4 <sail_log>
 8004e06:	e02b      	b.n	8004e60 <bmp_private_read_init+0x3f4>
 8004e08:	08013c18 	.word	0x08013c18
 8004e0c:	08013b58 	.word	0x08013b58
 8004e10:	08013bf8 	.word	0x08013bf8
 8004e14:	08013b54 	.word	0x08013b54
 8004e18:	08013c40 	.word	0x08013c40
 8004e1c:	08013c60 	.word	0x08013c60
 8004e20:	08013c78 	.word	0x08013c78
 8004e24:	08013c9c 	.word	0x08013c9c
 8004e28:	08013cc0 	.word	0x08013cc0
 8004e2c:	08013ce0 	.word	0x08013ce0
 8004e30:	08013d1c 	.word	0x08013d1c
 8004e34:	08013d58 	.word	0x08013d58
 8004e38:	08013d7c 	.word	0x08013d7c
 8004e3c:	08013db0 	.word	0x08013db0
 8004e40:	08013de4 	.word	0x08013de4
    } else {
        SAIL_LOG_DEBUG("BMP: Version(%d), compression(%u)", bmp_state->version, bmp_state->v3.compression);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	7b5b      	ldrb	r3, [r3, #13]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	9200      	str	r2, [sp, #0]
 8004e52:	4b9f      	ldr	r3, [pc, #636]	; (80050d0 <bmp_private_read_init+0x664>)
 8004e54:	f240 120d 	movw	r2, #269	; 0x10d
 8004e58:	499e      	ldr	r1, [pc, #632]	; (80050d4 <bmp_private_read_init+0x668>)
 8004e5a:	2005      	movs	r0, #5
 8004e5c:	f006 fcc2 	bl	800b7e4 <sail_log>
    }

    /* Read palette.  */
    if (bmp_state->version == SAIL_BMP_V1) {
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	7b5b      	ldrb	r3, [r3, #13]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d117      	bne.n	8004e98 <bmp_private_read_init+0x42c>
        SAIL_TRY(bmp_private_fill_system_palette(bmp_state->v1.bit_count, &bmp_state->palette, &bmp_state->palette_count));
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	7e5b      	ldrb	r3, [r3, #25]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	33b4      	adds	r3, #180	; 0xb4
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f001 fae3 	bl	8006444 <bmp_private_fill_system_palette>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 80d2 	beq.w	8005038 <bmp_private_read_init+0x5cc>
 8004e94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e96:	e117      	b.n	80050c8 <bmp_private_read_init+0x65c>
    } else if (bmp_state->v2.bit_count < 16) {
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9c:	2b0f      	cmp	r3, #15
 8004e9e:	f200 80cb 	bhi.w	8005038 <bmp_private_read_init+0x5cc>
        if (bmp_state->version == SAIL_BMP_V2) {
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	7b5b      	ldrb	r3, [r3, #13]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d109      	bne.n	8004ebe <bmp_private_read_init+0x452>
            bmp_state->palette_count = 1 << bmp_state->v2.bit_count;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	fa03 f202 	lsl.w	r2, r3, r2
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004ebc:	e00e      	b.n	8004edc <bmp_private_read_init+0x470>
        } else {
            bmp_state->palette_count = (bmp_state->v3.colors_used == 0) ? (1U << bmp_state->v2.bit_count) : bmp_state->v3.colors_used;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d105      	bne.n	8004ed2 <bmp_private_read_init+0x466>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4093      	lsls	r3, r2
 8004ed0:	e001      	b.n	8004ed6 <bmp_private_read_init+0x46a>
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        }

        if (bmp_state->palette_count == 0) {
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d111      	bne.n	8004f0a <bmp_private_read_init+0x49e>
            SAIL_LOG_ERROR("BMP: Indexed image has no palette");
 8004ee6:	4b7c      	ldr	r3, [pc, #496]	; (80050d8 <bmp_private_read_init+0x66c>)
 8004ee8:	f240 121b 	movw	r2, #283	; 0x11b
 8004eec:	4979      	ldr	r1, [pc, #484]	; (80050d4 <bmp_private_read_init+0x668>)
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f006 fc78 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8004ef4:	4b79      	ldr	r3, [pc, #484]	; (80050dc <bmp_private_read_init+0x670>)
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4b79      	ldr	r3, [pc, #484]	; (80050e0 <bmp_private_read_init+0x674>)
 8004efa:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8004efe:	4975      	ldr	r1, [pc, #468]	; (80050d4 <bmp_private_read_init+0x668>)
 8004f00:	2001      	movs	r0, #1
 8004f02:	f006 fc6f 	bl	800b7e4 <sail_log>
 8004f06:	23d3      	movs	r3, #211	; 0xd3
 8004f08:	e0de      	b.n	80050c8 <bmp_private_read_init+0x65c>
        }

        void *ptr;
        SAIL_TRY(sail_malloc(sizeof(sail_rgba32_t) * bmp_state->palette_count, &ptr));
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	f107 021c 	add.w	r2, r7, #28
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f006 fd5b 	bl	800b9d4 <sail_malloc>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <bmp_private_read_init+0x4ca>
 8004f32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f34:	e0c8      	b.n	80050c8 <bmp_private_read_init+0x65c>
        bmp_state->palette = ptr;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        if (bmp_state->version == SAIL_BMP_V2) {
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	7b5b      	ldrb	r3, [r3, #13]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d13c      	bne.n	8004fc0 <bmp_private_read_init+0x554>
            sail_rgb24_t rgb;

            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f4a:	e032      	b.n	8004fb2 <bmp_private_read_init+0x546>
                SAIL_TRY(sail_read_pixel3_uint8(io, &rgb));
 8004f4c:	f107 0318 	add.w	r3, r7, #24
 8004f50:	4619      	mov	r1, r3
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f006 fed6 	bl	800bd04 <sail_read_pixel3_uint8>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	863b      	strh	r3, [r7, #48]	; 0x30
 8004f5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf14      	ite	ne
 8004f62:	2301      	movne	r3, #1
 8004f64:	2300      	moveq	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <bmp_private_read_init+0x504>
 8004f6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8004f6e:	e0ab      	b.n	80050c8 <bmp_private_read_init+0x65c>

                bmp_state->palette[i].component1 = rgb.component1;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	440b      	add	r3, r1
 8004f80:	7e3a      	ldrb	r2, [r7, #24]
 8004f82:	701a      	strb	r2, [r3, #0]
                bmp_state->palette[i].component2 = rgb.component2;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	440b      	add	r3, r1
 8004f94:	7e7a      	ldrb	r2, [r7, #25]
 8004f96:	705a      	strb	r2, [r3, #1]
                bmp_state->palette[i].component3 = rgb.component3;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	7eba      	ldrb	r2, [r7, #26]
 8004faa:	709a      	strb	r2, [r3, #2]
            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	3301      	adds	r3, #1
 8004fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3c6      	bcc.n	8004f4c <bmp_private_read_init+0x4e0>
 8004fbe:	e03b      	b.n	8005038 <bmp_private_read_init+0x5cc>
            }
        } else {
            sail_rgba32_t rgba;

            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc4:	e032      	b.n	800502c <bmp_private_read_init+0x5c0>
                SAIL_TRY(sail_read_pixel4_uint8(io, &rgba));
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f006 ff01 	bl	800bdd4 <sail_read_pixel4_uint8>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	867b      	strh	r3, [r7, #50]	; 0x32
 8004fd6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <bmp_private_read_init+0x57e>
 8004fe6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8004fe8:	e06e      	b.n	80050c8 <bmp_private_read_init+0x65c>

                bmp_state->palette[i].component1 = rgba.component1;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	7d3a      	ldrb	r2, [r7, #20]
 8004ffc:	701a      	strb	r2, [r3, #0]
                bmp_state->palette[i].component2 = rgba.component2;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005006:	4613      	mov	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4413      	add	r3, r2
 800500c:	440b      	add	r3, r1
 800500e:	7d7a      	ldrb	r2, [r7, #21]
 8005010:	705a      	strb	r2, [r3, #1]
                bmp_state->palette[i].component3 = rgba.component3;
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	440b      	add	r3, r1
 8005022:	7dba      	ldrb	r2, [r7, #22]
 8005024:	709a      	strb	r2, [r3, #2]
            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8005026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005028:	3301      	adds	r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005034:	429a      	cmp	r2, r3
 8005036:	d3c6      	bcc.n	8004fc6 <bmp_private_read_init+0x55a>
            }
        }
    }

    /* Calculate the number of pad bytes to align scan lines to 4-byte boundary. */
    if (bmp_state->version == SAIL_BMP_V1) {
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	7b5b      	ldrb	r3, [r3, #13]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d121      	bne.n	8005084 <bmp_private_read_init+0x618>
        SAIL_TRY(bmp_private_bytes_in_row(bmp_state->v1.width, bmp_state->v1.bit_count, &bmp_state->bytes_in_row));
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	8a5b      	ldrh	r3, [r3, #18]
 8005044:	4618      	mov	r0, r3
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	7e5b      	ldrb	r3, [r3, #25]
 800504a:	4619      	mov	r1, r3
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	33b8      	adds	r3, #184	; 0xb8
 8005050:	461a      	mov	r2, r3
 8005052:	f001 f959 	bl	8006308 <bmp_private_bytes_in_row>
 8005056:	4603      	mov	r3, r0
 8005058:	857b      	strh	r3, [r7, #42]	; 0x2a
 800505a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <bmp_private_read_init+0x602>
 800506a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800506c:	e02c      	b.n	80050c8 <bmp_private_read_init+0x65c>
        bmp_state->pad_bytes = bmp_state->v1.byte_width - bmp_state->bytes_in_row;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	8adb      	ldrh	r3, [r3, #22]
 8005072:	4619      	mov	r1, r3
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	1a8a      	subs	r2, r1, r2
 800507e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005082:	e020      	b.n	80050c6 <bmp_private_read_init+0x65a>
    } else {
        SAIL_TRY(bmp_private_bytes_in_row(bmp_state->v2.width, bmp_state->v2.bit_count, &bmp_state->bytes_in_row));
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	4618      	mov	r0, r3
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508e:	4619      	mov	r1, r3
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	33b8      	adds	r3, #184	; 0xb8
 8005094:	461a      	mov	r2, r3
 8005096:	f001 f937 	bl	8006308 <bmp_private_bytes_in_row>
 800509a:	4603      	mov	r3, r0
 800509c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800509e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <bmp_private_read_init+0x646>
 80050ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050b0:	e00a      	b.n	80050c8 <bmp_private_read_init+0x65c>
        bmp_state->pad_bytes = bmp_private_pad_bytes(bmp_state->bytes_in_row);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050b8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 f9ac 	bl	8006418 <bmp_private_pad_bytes>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    }

    return SAIL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3754      	adds	r7, #84	; 0x54
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	08013df8 	.word	0x08013df8
 80050d4:	08013b58 	.word	0x08013b58
 80050d8:	08013e1c 	.word	0x08013e1c
 80050dc:	08013e40 	.word	0x08013e40
 80050e0:	08013b54 	.word	0x08013b54

080050e4 <bmp_private_read_seek_next_frame>:

sail_status_t bmp_private_read_seek_next_frame(void *state, struct sail_io *io, struct sail_image **image) {
 80050e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050e8:	b08c      	sub	sp, #48	; 0x30
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24

    struct sail_image *image_local;
    SAIL_TRY(sail_alloc_image(&image_local));
 80050f6:	f107 0314 	add.w	r3, r7, #20
 80050fa:	4618      	mov	r0, r3
 80050fc:	f005 f83e 	bl	800a17c <sail_alloc_image>
 8005100:	4603      	mov	r3, r0
 8005102:	847b      	strh	r3, [r7, #34]	; 0x22
 8005104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <bmp_private_read_seek_next_frame+0x34>
 8005114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005116:	e112      	b.n	800533e <bmp_private_read_seek_next_frame+0x25a>
    SAIL_TRY_OR_CLEANUP(sail_alloc_source_image(&image_local->source_image),
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3334      	adds	r3, #52	; 0x34
 800511c:	4618      	mov	r0, r3
 800511e:	f007 fca3 	bl	800ca68 <sail_alloc_source_image>
 8005122:	4603      	mov	r3, r0
 8005124:	843b      	strh	r3, [r7, #32]
 8005126:	8c3b      	ldrh	r3, [r7, #32]
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <bmp_private_read_seek_next_frame+0x5e>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4618      	mov	r0, r3
 800513a:	f005 f89b 	bl	800a274 <sail_destroy_image>
 800513e:	8c3b      	ldrh	r3, [r7, #32]
 8005140:	e0fd      	b.n	800533e <bmp_private_read_seek_next_frame+0x25a>
                        /* cleanup */ sail_destroy_image(image_local));

    image_local->source_image->pixel_format = bmp_state->source_pixel_format;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	7b12      	ldrb	r2, [r2, #12]
 800514a:	701a      	strb	r2, [r3, #0]
    image_local->source_image->properties = bmp_state->flipped ? SAIL_IMAGE_PROPERTY_FLIPPED_VERTICALLY : 0;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <bmp_private_read_seek_next_frame+0x76>
 8005156:	2202      	movs	r2, #2
 8005158:	e000      	b.n	800515c <bmp_private_read_seek_next_frame+0x78>
 800515a:	2200      	movs	r2, #0
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	605a      	str	r2, [r3, #4]
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2202      	movs	r2, #2
                                             ? SAIL_COMPRESSION_RLE : SAIL_COMPRESSION_NONE;
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <bmp_private_read_seek_next_frame+0x92>
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	2201      	movs	r2, #1
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <bmp_private_read_seek_next_frame+0x96>
                                             ? SAIL_COMPRESSION_RLE : SAIL_COMPRESSION_NONE;
 8005176:	221e      	movs	r2, #30
 8005178:	e000      	b.n	800517c <bmp_private_read_seek_next_frame+0x98>
 800517a:	2201      	movs	r2, #1
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005180:	721a      	strb	r2, [r3, #8]
    image_local->width = (bmp_state->version == SAIL_BMP_V1) ? bmp_state->v1.width : bmp_state->v2.width;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	7b5b      	ldrb	r3, [r3, #13]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d103      	bne.n	8005192 <bmp_private_read_seek_next_frame+0xae>
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	8a5b      	ldrh	r3, [r3, #18]
 800518e:	461a      	mov	r2, r3
 8005190:	e002      	b.n	8005198 <bmp_private_read_seek_next_frame+0xb4>
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	461a      	mov	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	605a      	str	r2, [r3, #4]
    image_local->height = (bmp_state->version == SAIL_BMP_V1) ? bmp_state->v1.height : bmp_state->v2.height;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	7b5b      	ldrb	r3, [r3, #13]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d103      	bne.n	80051ac <bmp_private_read_seek_next_frame+0xc8>
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	8a9b      	ldrh	r3, [r3, #20]
 80051a8:	461a      	mov	r2, r3
 80051aa:	e002      	b.n	80051b2 <bmp_private_read_seek_next_frame+0xce>
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	461a      	mov	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	609a      	str	r2, [r3, #8]

    if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE4) {
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	7b5b      	ldrb	r3, [r3, #13]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d90e      	bls.n	80051dc <bmp_private_read_seek_next_frame+0xf8>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2202      	movs	r2, #2
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d109      	bne.n	80051dc <bmp_private_read_seek_next_frame+0xf8>
        /* We expand RLE-encoded 4-bit pixels to 8-bit. TODO: Unpack into 4-bit indexed image. */
        image_local->pixel_format = SAIL_PIXEL_FORMAT_BPP8_INDEXED;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2210      	movs	r2, #16
 80051cc:	751a      	strb	r2, [r3, #20]
        image_local->bytes_per_line = bmp_state->bytes_in_row * 2;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	0052      	lsls	r2, r2, #1
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	e008      	b.n	80051ee <bmp_private_read_seek_next_frame+0x10a>
    } else {
        image_local->pixel_format = bmp_state->source_pixel_format;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	7b12      	ldrb	r2, [r2, #12]
 80051e2:	751a      	strb	r2, [r3, #20]
        image_local->bytes_per_line = bmp_state->bytes_in_row;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e8:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 80051ec:	60da      	str	r2, [r3, #12]
    }

    if (bmp_state->palette != NULL) {
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d04f      	beq.n	8005298 <bmp_private_read_seek_next_frame+0x1b4>
        SAIL_TRY_OR_CLEANUP(sail_alloc_palette_for_data(SAIL_PIXEL_FORMAT_BPP24_RGB, bmp_state->palette_count, &image_local->palette),
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	461a      	mov	r2, r3
 8005204:	201f      	movs	r0, #31
 8005206:	f006 fd01 	bl	800bc0c <sail_alloc_palette_for_data>
 800520a:	4603      	mov	r3, r0
 800520c:	83fb      	strh	r3, [r7, #30]
 800520e:	8bfb      	ldrh	r3, [r7, #30]
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <bmp_private_read_seek_next_frame+0x146>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4618      	mov	r0, r3
 8005222:	f005 f827 	bl	800a274 <sail_destroy_image>
 8005226:	8bfb      	ldrh	r3, [r7, #30]
 8005228:	e089      	b.n	800533e <bmp_private_read_seek_next_frame+0x25a>
                            /* cleanup */ sail_destroy_image(image_local));

        unsigned char *palette_ptr = image_local->palette->data;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c

        for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
 8005236:	e029      	b.n	800528c <bmp_private_read_seek_next_frame+0x1a8>
            *palette_ptr++ = bmp_state->palette[i].component3;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800523e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005240:	4613      	mov	r3, r2
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	18ca      	adds	r2, r1, r3
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800524e:	7892      	ldrb	r2, [r2, #2]
 8005250:	701a      	strb	r2, [r3, #0]
            *palette_ptr++ = bmp_state->palette[i].component2;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525a:	4613      	mov	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	4413      	add	r3, r2
 8005260:	18ca      	adds	r2, r1, r3
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005268:	7852      	ldrb	r2, [r2, #1]
 800526a:	701a      	strb	r2, [r3, #0]
            *palette_ptr++ = bmp_state->palette[i].component1;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	18ca      	adds	r2, r1, r3
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005282:	7812      	ldrb	r2, [r2, #0]
 8005284:	701a      	strb	r2, [r3, #0]
        for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	3301      	adds	r3, #1
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005294:	429a      	cmp	r2, r3
 8005296:	d3cf      	bcc.n	8005238 <bmp_private_read_seek_next_frame+0x154>
        }
    }

    /* Resolution. */
    if (bmp_state->version >= SAIL_BMP_V3) {
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	7b5b      	ldrb	r3, [r3, #13]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d927      	bls.n	80052f0 <bmp_private_read_seek_next_frame+0x20c>
        SAIL_TRY_OR_CLEANUP(
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb fa7f 	bl	80007a8 <__aeabi_i2d>
 80052aa:	4604      	mov	r4, r0
 80052ac:	460d      	mov	r5, r1
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fa78 	bl	80007a8 <__aeabi_i2d>
 80052b8:	4680      	mov	r8, r0
 80052ba:	4689      	mov	r9, r1
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3310      	adds	r3, #16
 80052c0:	4619      	mov	r1, r3
 80052c2:	ec49 8b11 	vmov	d1, r8, r9
 80052c6:	ec45 4b10 	vmov	d0, r4, r5
 80052ca:	2003      	movs	r0, #3
 80052cc:	f006 fdec 	bl	800bea8 <sail_alloc_resolution_from_data>
 80052d0:	4603      	mov	r3, r0
 80052d2:	83bb      	strh	r3, [r7, #28]
 80052d4:	8bbb      	ldrh	r3, [r7, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <bmp_private_read_seek_next_frame+0x20c>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f004 ffc4 	bl	800a274 <sail_destroy_image>
 80052ec:	8bbb      	ldrh	r3, [r7, #28]
 80052ee:	e026      	b.n	800533e <bmp_private_read_seek_next_frame+0x25a>
            sail_alloc_resolution_from_data(SAIL_RESOLUTION_UNIT_METER, bmp_state->v3.x_pixels_per_meter, bmp_state->v3.y_pixels_per_meter, &image_local->resolution),
                        /* cleanup */ sail_destroy_image(image_local));
    }

    /* Seek to the bitmap data if we have the file header. */
    if (bmp_state->bmp_load_options & SAIL_READ_BMP_FILE_HEADER) {
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01c      	beq.n	8005336 <bmp_private_read_seek_next_frame+0x252>
        if (bmp_state->version > SAIL_BMP_V1) {
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	7b5b      	ldrb	r3, [r3, #13]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d918      	bls.n	8005336 <bmp_private_read_seek_next_frame+0x252>
            SAIL_TRY_OR_CLEANUP(io->seek(io->stream, bmp_state->dib_file_header.offset, SEEK_SET),
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	68d0      	ldr	r0, [r2, #12]
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	4798      	blx	r3
 8005316:	4603      	mov	r3, r0
 8005318:	837b      	strh	r3, [r7, #26]
 800531a:	8b7b      	ldrh	r3, [r7, #26]
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <bmp_private_read_seek_next_frame+0x252>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	4618      	mov	r0, r3
 800532e:	f004 ffa1 	bl	800a274 <sail_destroy_image>
 8005332:	8b7b      	ldrh	r3, [r7, #26]
 8005334:	e003      	b.n	800533e <bmp_private_read_seek_next_frame+0x25a>
                                /* cleanup */ sail_destroy_image(image_local));
        }
    }

    *image = image_local;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3730      	adds	r7, #48	; 0x30
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005348 <bmp_private_read_frame>:

sail_status_t bmp_private_read_frame(void *state, struct sail_io *io, struct sail_image *image) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b098      	sub	sp, #96	; 0x60
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* RLE-encoded images don't need to skip pad bytes. */
    bool skip_pad_bytes = true;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    for (unsigned i = image->height; i > 0; i--) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	653b      	str	r3, [r7, #80]	; 0x50
 8005364:	e28a      	b.n	800587c <bmp_private_read_frame+0x534>
        unsigned char *scan = (unsigned char *)image->pixels + image->bytes_per_line * (bmp_state->flipped ? (i - 1) : (image->height - i));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <bmp_private_read_frame+0x36>
 8005378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537a:	3b01      	subs	r3, #1
 800537c:	e003      	b.n	8005386 <bmp_private_read_frame+0x3e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6898      	ldr	r0, [r3, #8]
 8005382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005384:	1ac3      	subs	r3, r0, r3
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	64fb      	str	r3, [r7, #76]	; 0x4c

        for (unsigned pixel_index = 0; pixel_index < image->width;) {
 800538e:	2300      	movs	r3, #0
 8005390:	64bb      	str	r3, [r7, #72]	; 0x48
 8005392:	e250      	b.n	8005836 <bmp_private_read_frame+0x4ee>
            if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE4) {
 8005394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005396:	7b5b      	ldrb	r3, [r3, #13]
 8005398:	2b02      	cmp	r3, #2
 800539a:	f240 812f 	bls.w	80055fc <bmp_private_read_frame+0x2b4>
 800539e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2202      	movs	r2, #2
 80053a4:	4293      	cmp	r3, r2
 80053a6:	f040 8129 	bne.w	80055fc <bmp_private_read_frame+0x2b4>
                skip_pad_bytes = false;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                uint8_t marker;
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	68d0      	ldr	r0, [r2, #12]
 80053b8:	f107 011d 	add.w	r1, r7, #29
 80053bc:	2201      	movs	r2, #1
 80053be:	4798      	blx	r3
 80053c0:	4603      	mov	r3, r0
 80053c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80053c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf14      	ite	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	2300      	moveq	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <bmp_private_read_frame+0x90>
 80053d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053d6:	e256      	b.n	8005886 <bmp_private_read_frame+0x53e>

                if (marker == SAIL_UNENCODED_RUN_MARKER) {
 80053d8:	7f7b      	ldrb	r3, [r7, #29]
 80053da:	2200      	movs	r2, #0
 80053dc:	4293      	cmp	r3, r2
 80053de:	f040 80b3 	bne.w	8005548 <bmp_private_read_frame+0x200>
                    uint8_t count_or_marker;
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	68d0      	ldr	r0, [r2, #12]
 80053ea:	f107 011c 	add.w	r1, r7, #28
 80053ee:	2201      	movs	r2, #1
 80053f0:	4798      	blx	r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80053f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <bmp_private_read_frame+0xc2>
 8005406:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005408:	e09d      	b.n	8005546 <bmp_private_read_frame+0x1fe>

                    if (count_or_marker == SAIL_END_OF_SCAN_LINE_MARKER) {
 800540a:	7f3b      	ldrb	r3, [r7, #28]
 800540c:	2200      	movs	r2, #0
 800540e:	4293      	cmp	r3, r2
 8005410:	d104      	bne.n	800541c <bmp_private_read_frame+0xd4>
                        /* Jump to the end of scan line. +1 to avoid reading end-of-scan-line marker twice below. */
                        pixel_index = image->width + 1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	3301      	adds	r3, #1
 8005418:	64bb      	str	r3, [r7, #72]	; 0x48
 800541a:	e0d9      	b.n	80055d0 <bmp_private_read_frame+0x288>
                    } else if (count_or_marker == SAIL_END_OF_RLE_DATA_MARKER) {
 800541c:	7f3b      	ldrb	r3, [r7, #28]
 800541e:	2201      	movs	r2, #1
 8005420:	4293      	cmp	r3, r2
 8005422:	d111      	bne.n	8005448 <bmp_private_read_frame+0x100>
                        SAIL_LOG_ERROR("BMP: Unexpected end-of-rle-data marker");
 8005424:	4ba2      	ldr	r3, [pc, #648]	; (80056b0 <bmp_private_read_frame+0x368>)
 8005426:	f240 1299 	movw	r2, #409	; 0x199
 800542a:	49a2      	ldr	r1, [pc, #648]	; (80056b4 <bmp_private_read_frame+0x36c>)
 800542c:	2001      	movs	r0, #1
 800542e:	f006 f9d9 	bl	800b7e4 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8005432:	4ba1      	ldr	r3, [pc, #644]	; (80056b8 <bmp_private_read_frame+0x370>)
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4ba1      	ldr	r3, [pc, #644]	; (80056bc <bmp_private_read_frame+0x374>)
 8005438:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800543c:	499d      	ldr	r1, [pc, #628]	; (80056b4 <bmp_private_read_frame+0x36c>)
 800543e:	2001      	movs	r0, #1
 8005440:	f006 f9d0 	bl	800b7e4 <sail_log>
 8005444:	23d5      	movs	r3, #213	; 0xd5
 8005446:	e07e      	b.n	8005546 <bmp_private_read_frame+0x1fe>
                    } else if (count_or_marker == SAIL_DELTA_MARKER) {
 8005448:	7f3b      	ldrb	r3, [r7, #28]
 800544a:	2202      	movs	r2, #2
 800544c:	4293      	cmp	r3, r2
 800544e:	d111      	bne.n	8005474 <bmp_private_read_frame+0x12c>
                        SAIL_LOG_ERROR("BMP: Delta marker is not supported");
 8005450:	4b9b      	ldr	r3, [pc, #620]	; (80056c0 <bmp_private_read_frame+0x378>)
 8005452:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005456:	4997      	ldr	r1, [pc, #604]	; (80056b4 <bmp_private_read_frame+0x36c>)
 8005458:	2001      	movs	r0, #1
 800545a:	f006 f9c3 	bl	800b7e4 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 800545e:	4b99      	ldr	r3, [pc, #612]	; (80056c4 <bmp_private_read_frame+0x37c>)
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	4b96      	ldr	r3, [pc, #600]	; (80056bc <bmp_private_read_frame+0x374>)
 8005464:	f240 129d 	movw	r2, #413	; 0x19d
 8005468:	4992      	ldr	r1, [pc, #584]	; (80056b4 <bmp_private_read_frame+0x36c>)
 800546a:	2001      	movs	r0, #1
 800546c:	f006 f9ba 	bl	800b7e4 <sail_log>
 8005470:	23d4      	movs	r3, #212	; 0xd4
 8005472:	e068      	b.n	8005546 <bmp_private_read_frame+0x1fe>
                    } else {
                        bool read_byte = true;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        uint8_t byte = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	76fb      	strb	r3, [r7, #27]
                        uint8_t index;

                        for (uint8_t k = 0; k < count_or_marker; k++) {
 800547e:	2300      	movs	r3, #0
 8005480:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005484:	e032      	b.n	80054ec <bmp_private_read_frame+0x1a4>
                            if (read_byte) {
 8005486:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01b      	beq.n	80054c6 <bmp_private_read_frame+0x17e>
                                SAIL_TRY(io->strict_read(io->stream, &byte, sizeof(byte)));
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	68d0      	ldr	r0, [r2, #12]
 8005496:	f107 011b 	add.w	r1, r7, #27
 800549a:	2201      	movs	r2, #1
 800549c:	4798      	blx	r3
 800549e:	4603      	mov	r3, r0
 80054a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <bmp_private_read_frame+0x16e>
 80054b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054b4:	e046      	b.n	8005544 <bmp_private_read_frame+0x1fc>
                                index = (byte >> 4) & 0xf;
 80054b6:	7efb      	ldrb	r3, [r7, #27]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                                read_byte = false;
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80054c4:	e007      	b.n	80054d6 <bmp_private_read_frame+0x18e>
                            } else {
                                index = byte & 0xf;
 80054c6:	7efb      	ldrb	r3, [r7, #27]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                                read_byte = true;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            }

                            *scan++ = index;
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054dc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80054e0:	701a      	strb	r2, [r3, #0]
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 80054e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80054e6:	3301      	adds	r3, #1
 80054e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80054ec:	7f3b      	ldrb	r3, [r7, #28]
 80054ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3c7      	bcc.n	8005486 <bmp_private_read_frame+0x13e>
                        }

                        /* Odd number of bytes is accompanied with an additional byte. */
                        uint8_t number_of_unencoded_bytes = (count_or_marker + 1) / 2;
 80054f6:	7f3b      	ldrb	r3, [r7, #28]
 80054f8:	3301      	adds	r3, #1
 80054fa:	0fda      	lsrs	r2, r3, #31
 80054fc:	4413      	add	r3, r2
 80054fe:	105b      	asrs	r3, r3, #1
 8005500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        if ((number_of_unencoded_bytes % 2) != 0) {
 8005504:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d012      	beq.n	8005538 <bmp_private_read_frame+0x1f0>
                            SAIL_TRY(io->seek(io->stream, 1, SEEK_CUR));
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	68d0      	ldr	r0, [r2, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	2101      	movs	r1, #1
 800551e:	4798      	blx	r3
 8005520:	4603      	mov	r3, r0
 8005522:	863b      	strh	r3, [r7, #48]	; 0x30
 8005524:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf14      	ite	ne
 800552a:	2301      	movne	r3, #1
 800552c:	2300      	moveq	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <bmp_private_read_frame+0x1f0>
 8005534:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005536:	e005      	b.n	8005544 <bmp_private_read_frame+0x1fc>
                        }

                        pixel_index += count_or_marker;
 8005538:	7f3b      	ldrb	r3, [r7, #28]
 800553a:	461a      	mov	r2, r3
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	4413      	add	r3, r2
 8005540:	64bb      	str	r3, [r7, #72]	; 0x48
 8005542:	e045      	b.n	80055d0 <bmp_private_read_frame+0x288>
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8005544:	e19f      	b.n	8005886 <bmp_private_read_frame+0x53e>
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8005546:	e19e      	b.n	8005886 <bmp_private_read_frame+0x53e>
                    }
                } else {
                    /* Normal RLE: count + value. */
                    bool high_4_bits = true;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                    uint8_t index;

                    uint8_t byte;
                    SAIL_TRY(io->strict_read(io->stream, &byte, sizeof(byte)));
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	68d0      	ldr	r0, [r2, #12]
 8005556:	f107 011a 	add.w	r1, r7, #26
 800555a:	2201      	movs	r2, #1
 800555c:	4798      	blx	r3
 800555e:	4603      	mov	r3, r0
 8005560:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <bmp_private_read_frame+0x22e>
 8005572:	8efb      	ldrh	r3, [r7, #54]	; 0x36
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8005574:	e187      	b.n	8005886 <bmp_private_read_frame+0x53e>

                    for (uint8_t k = 0; k < marker; k++) {
 8005576:	2300      	movs	r3, #0
 8005578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800557c:	e01e      	b.n	80055bc <bmp_private_read_frame+0x274>
                        if (high_4_bits) {
 800557e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <bmp_private_read_frame+0x24e>
                            index = (byte >> 4) & 0xf;
 8005586:	7ebb      	ldrb	r3, [r7, #26]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            high_4_bits = false;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005594:	e007      	b.n	80055a6 <bmp_private_read_frame+0x25e>
                        } else {
                            index = byte & 0xf;
 8005596:	7ebb      	ldrb	r3, [r7, #26]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            high_4_bits = true;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                        }

                        *scan++ = index;
 80055a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80055ac:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80055b0:	701a      	strb	r2, [r3, #0]
                    for (uint8_t k = 0; k < marker; k++) {
 80055b2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80055b6:	3301      	adds	r3, #1
 80055b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055bc:	7f7b      	ldrb	r3, [r7, #29]
 80055be:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d3db      	bcc.n	800557e <bmp_private_read_frame+0x236>
                    }

                    pixel_index += marker;
 80055c6:	7f7b      	ldrb	r3, [r7, #29]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055cc:	4413      	add	r3, r2
 80055ce:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Read a possible end-of-scan-line marker at the end of line. */
                if (pixel_index == image->width) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055d6:	429a      	cmp	r2, r3
 80055d8:	f040 812d 	bne.w	8005836 <bmp_private_read_frame+0x4ee>
                    SAIL_TRY(bmp_private_skip_end_of_scan_line(io));
 80055dc:	68b8      	ldr	r0, [r7, #8]
 80055de:	f000 fe31 	bl	8006244 <bmp_private_skip_end_of_scan_line>
 80055e2:	4603      	mov	r3, r0
 80055e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80055e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 811f 	beq.w	8005836 <bmp_private_read_frame+0x4ee>
 80055f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055fa:	e144      	b.n	8005886 <bmp_private_read_frame+0x53e>
                }
            } else if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE8) {
 80055fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fe:	7b5b      	ldrb	r3, [r3, #13]
 8005600:	2b02      	cmp	r3, #2
 8005602:	f240 80fe 	bls.w	8005802 <bmp_private_read_frame+0x4ba>
 8005606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2201      	movs	r2, #1
 800560c:	4293      	cmp	r3, r2
 800560e:	f040 80f8 	bne.w	8005802 <bmp_private_read_frame+0x4ba>
                skip_pad_bytes = false;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                uint8_t marker;
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	68d0      	ldr	r0, [r2, #12]
 8005620:	f107 0119 	add.w	r1, r7, #25
 8005624:	2201      	movs	r2, #1
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800562c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <bmp_private_read_frame+0x2f8>
 800563c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800563e:	e122      	b.n	8005886 <bmp_private_read_frame+0x53e>

                if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8005640:	7e7b      	ldrb	r3, [r7, #25]
 8005642:	2200      	movs	r2, #0
 8005644:	4293      	cmp	r3, r2
 8005646:	f040 809c 	bne.w	8005782 <bmp_private_read_frame+0x43a>
                    uint8_t count_or_marker;
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	68d0      	ldr	r0, [r2, #12]
 8005652:	f107 0118 	add.w	r1, r7, #24
 8005656:	2201      	movs	r2, #1
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800565e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <bmp_private_read_frame+0x32a>
 800566e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005670:	e086      	b.n	8005780 <bmp_private_read_frame+0x438>

                    if (count_or_marker == SAIL_END_OF_SCAN_LINE_MARKER) {
 8005672:	7e3b      	ldrb	r3, [r7, #24]
 8005674:	2200      	movs	r2, #0
 8005676:	4293      	cmp	r3, r2
 8005678:	d104      	bne.n	8005684 <bmp_private_read_frame+0x33c>
                        /* Jump to the end of scan line. +1 to avoid reading end-of-scan-line marker twice below. */
                        pixel_index = image->width + 1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	3301      	adds	r3, #1
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
 8005682:	e0aa      	b.n	80057da <bmp_private_read_frame+0x492>
                    } else if (count_or_marker == SAIL_END_OF_RLE_DATA_MARKER) {
 8005684:	7e3b      	ldrb	r3, [r7, #24]
 8005686:	2201      	movs	r2, #1
 8005688:	4293      	cmp	r3, r2
 800568a:	d11d      	bne.n	80056c8 <bmp_private_read_frame+0x380>
                        SAIL_LOG_ERROR("BMP: Unexpected end-of-rle-data marker");
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <bmp_private_read_frame+0x368>)
 800568e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005692:	4908      	ldr	r1, [pc, #32]	; (80056b4 <bmp_private_read_frame+0x36c>)
 8005694:	2001      	movs	r0, #1
 8005696:	f006 f8a5 	bl	800b7e4 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <bmp_private_read_frame+0x370>)
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <bmp_private_read_frame+0x374>)
 80056a0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80056a4:	4903      	ldr	r1, [pc, #12]	; (80056b4 <bmp_private_read_frame+0x36c>)
 80056a6:	2001      	movs	r0, #1
 80056a8:	f006 f89c 	bl	800b7e4 <sail_log>
 80056ac:	23d5      	movs	r3, #213	; 0xd5
 80056ae:	e067      	b.n	8005780 <bmp_private_read_frame+0x438>
 80056b0:	08013e5c 	.word	0x08013e5c
 80056b4:	08013b58 	.word	0x08013b58
 80056b8:	08013c60 	.word	0x08013c60
 80056bc:	08013b54 	.word	0x08013b54
 80056c0:	08013e84 	.word	0x08013e84
 80056c4:	08013bf8 	.word	0x08013bf8
                    } else if (count_or_marker == SAIL_DELTA_MARKER) {
 80056c8:	7e3b      	ldrb	r3, [r7, #24]
 80056ca:	2202      	movs	r2, #2
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <bmp_private_read_frame+0x3ac>
                        SAIL_LOG_ERROR("BMP: Delta marker is not supported");
 80056d0:	4b6f      	ldr	r3, [pc, #444]	; (8005890 <bmp_private_read_frame+0x548>)
 80056d2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80056d6:	496f      	ldr	r1, [pc, #444]	; (8005894 <bmp_private_read_frame+0x54c>)
 80056d8:	2001      	movs	r0, #1
 80056da:	f006 f883 	bl	800b7e4 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 80056de:	4b6e      	ldr	r3, [pc, #440]	; (8005898 <bmp_private_read_frame+0x550>)
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	4b6e      	ldr	r3, [pc, #440]	; (800589c <bmp_private_read_frame+0x554>)
 80056e4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80056e8:	496a      	ldr	r1, [pc, #424]	; (8005894 <bmp_private_read_frame+0x54c>)
 80056ea:	2001      	movs	r0, #1
 80056ec:	f006 f87a 	bl	800b7e4 <sail_log>
 80056f0:	23d4      	movs	r3, #212	; 0xd4
 80056f2:	e045      	b.n	8005780 <bmp_private_read_frame+0x438>
                    } else {
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80056fa:	e01d      	b.n	8005738 <bmp_private_read_frame+0x3f0>
                            uint8_t index;
                            SAIL_TRY(io->strict_read(io->stream, &index, sizeof(index)));
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	68d0      	ldr	r0, [r2, #12]
 8005704:	f107 0117 	add.w	r1, r7, #23
 8005708:	2201      	movs	r2, #1
 800570a:	4798      	blx	r3
 800570c:	4603      	mov	r3, r0
 800570e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <bmp_private_read_frame+0x3dc>
 8005720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8005722:	e0b0      	b.n	8005886 <bmp_private_read_frame+0x53e>

                            *scan++ = index;
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	64fa      	str	r2, [r7, #76]	; 0x4c
 800572a:	7dfa      	ldrb	r2, [r7, #23]
 800572c:	701a      	strb	r2, [r3, #0]
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 800572e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005732:	3301      	adds	r3, #1
 8005734:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005738:	7e3b      	ldrb	r3, [r7, #24]
 800573a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800573e:	429a      	cmp	r2, r3
 8005740:	d3dc      	bcc.n	80056fc <bmp_private_read_frame+0x3b4>
                        }

                        /* Odd number of pixels is accompanied with an additional byte. */
                        if ((count_or_marker % 2) != 0) {
 8005742:	7e3b      	ldrb	r3, [r7, #24]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d012      	beq.n	8005774 <bmp_private_read_frame+0x42c>
                            SAIL_TRY(io->seek(io->stream, 1, SEEK_CUR));
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	68d0      	ldr	r0, [r2, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	2101      	movs	r1, #1
 800575a:	4798      	blx	r3
 800575c:	4603      	mov	r3, r0
 800575e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <bmp_private_read_frame+0x42c>
 8005770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005772:	e005      	b.n	8005780 <bmp_private_read_frame+0x438>
                        }

                        pixel_index += count_or_marker;
 8005774:	7e3b      	ldrb	r3, [r7, #24]
 8005776:	461a      	mov	r2, r3
 8005778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577a:	4413      	add	r3, r2
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
 800577e:	e02c      	b.n	80057da <bmp_private_read_frame+0x492>
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8005780:	e081      	b.n	8005886 <bmp_private_read_frame+0x53e>
                    }
                } else {
                    /* Normal RLE: count + value. */
                    uint8_t index;
                    SAIL_TRY(io->strict_read(io->stream, &index, sizeof(index)));
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	68d0      	ldr	r0, [r2, #12]
 800578a:	f107 0116 	add.w	r1, r7, #22
 800578e:	2201      	movs	r2, #1
 8005790:	4798      	blx	r3
 8005792:	4603      	mov	r3, r0
 8005794:	853b      	strh	r3, [r7, #40]	; 0x28
 8005796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <bmp_private_read_frame+0x462>
 80057a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 80057a8:	e06d      	b.n	8005886 <bmp_private_read_frame+0x53e>

                    for (uint8_t k = 0; k < marker; k++) {
 80057aa:	2300      	movs	r3, #0
 80057ac:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80057b0:	e009      	b.n	80057c6 <bmp_private_read_frame+0x47e>
                        *scan++ = index;
 80057b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80057b8:	7dba      	ldrb	r2, [r7, #22]
 80057ba:	701a      	strb	r2, [r3, #0]
                    for (uint8_t k = 0; k < marker; k++) {
 80057bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80057c0:	3301      	adds	r3, #1
 80057c2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80057c6:	7e7b      	ldrb	r3, [r7, #25]
 80057c8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d3f0      	bcc.n	80057b2 <bmp_private_read_frame+0x46a>
                    }

                    pixel_index += marker;
 80057d0:	7e7b      	ldrb	r3, [r7, #25]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d6:	4413      	add	r3, r2
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Read a possible end-of-scan-line marker at the end of line. */
                if (pixel_index == image->width) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d128      	bne.n	8005836 <bmp_private_read_frame+0x4ee>
                    SAIL_TRY(bmp_private_skip_end_of_scan_line(io));
 80057e4:	68b8      	ldr	r0, [r7, #8]
 80057e6:	f000 fd2d 	bl	8006244 <bmp_private_skip_end_of_scan_line>
 80057ea:	4603      	mov	r3, r0
 80057ec:	843b      	strh	r3, [r7, #32]
 80057ee:	8c3b      	ldrh	r3, [r7, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01b      	beq.n	8005836 <bmp_private_read_frame+0x4ee>
 80057fe:	8c3b      	ldrh	r3, [r7, #32]
 8005800:	e041      	b.n	8005886 <bmp_private_read_frame+0x53e>
                }
            } else {
                /* Read a whole scan line. */
                SAIL_TRY(io->strict_read(io->stream, scan, bmp_state->bytes_in_row));
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	68d0      	ldr	r0, [r2, #12]
 800580a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800580c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8005810:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005812:	4798      	blx	r3
 8005814:	4603      	mov	r3, r0
 8005816:	83fb      	strh	r3, [r7, #30]
 8005818:	8bfb      	ldrh	r3, [r7, #30]
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <bmp_private_read_frame+0x4e4>
 8005828:	8bfb      	ldrh	r3, [r7, #30]
 800582a:	e02c      	b.n	8005886 <bmp_private_read_frame+0x53e>
                pixel_index += image->width;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005832:	4413      	add	r3, r2
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48
        for (unsigned pixel_index = 0; pixel_index < image->width;) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583c:	429a      	cmp	r2, r3
 800583e:	f4ff ada9 	bcc.w	8005394 <bmp_private_read_frame+0x4c>
            }
        }

        /* Skip pad bytes. */
        if (skip_pad_bytes) {
 8005842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005846:	2b00      	cmp	r3, #0
 8005848:	d015      	beq.n	8005876 <bmp_private_read_frame+0x52e>
            SAIL_TRY(io->seek(io->stream, bmp_state->pad_bytes, SEEK_CUR));
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	68d0      	ldr	r0, [r2, #12]
 8005852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005854:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8005858:	4611      	mov	r1, r2
 800585a:	2201      	movs	r2, #1
 800585c:	4798      	blx	r3
 800585e:	4603      	mov	r3, r0
 8005860:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005862:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <bmp_private_read_frame+0x52e>
 8005872:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005874:	e007      	b.n	8005886 <bmp_private_read_frame+0x53e>
    for (unsigned i = image->height; i > 0; i--) {
 8005876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005878:	3b01      	subs	r3, #1
 800587a:	653b      	str	r3, [r7, #80]	; 0x50
 800587c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587e:	2b00      	cmp	r3, #0
 8005880:	f47f ad71 	bne.w	8005366 <bmp_private_read_frame+0x1e>
        }
    }

    return SAIL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3758      	adds	r7, #88	; 0x58
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	08013e84 	.word	0x08013e84
 8005894:	08013b58 	.word	0x08013b58
 8005898:	08013bf8 	.word	0x08013bf8
 800589c:	08013b54 	.word	0x08013b54

080058a0 <bmp_private_read_finish>:

sail_status_t bmp_private_read_finish(void **state, struct sail_io *io) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]

    (void)io;

    struct bmp_state *bmp_state = (struct bmp_state *)(*state);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

    *state = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

    destroy_bmp_state(bmp_state);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7fe ffa8 	bl	800480c <destroy_bmp_state>

    return SAIL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <bmp_private_read_ddb_file_header>:

#include "sail-common.h"

#include "helpers.h"

sail_status_t bmp_private_read_ddb_file_header(struct sail_io *io, struct SailBmpDdbFileHeader *ddb_file_header) {
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &ddb_file_header->type, sizeof(ddb_file_header->type)));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	68d0      	ldr	r0, [r2, #12]
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	2202      	movs	r2, #2
 80058dc:	4798      	blx	r3
 80058de:	4603      	mov	r3, r0
 80058e0:	81fb      	strh	r3, [r7, #14]
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <bmp_private_read_ddb_file_header+0x30>
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	e000      	b.n	80058f8 <bmp_private_read_ddb_file_header+0x32>

    return SAIL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <bmp_private_read_v1>:

sail_status_t bmp_private_read_v1(struct sail_io *io, struct SailBmpDdbBitmap *v1) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v1->type,       sizeof(v1->type)));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d0      	ldr	r0, [r2, #12]
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	2202      	movs	r2, #2
 8005916:	4798      	blx	r3
 8005918:	4603      	mov	r3, r0
 800591a:	82fb      	strh	r3, [r7, #22]
 800591c:	8afb      	ldrh	r3, [r7, #22]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf14      	ite	ne
 8005922:	2301      	movne	r3, #1
 8005924:	2300      	moveq	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <bmp_private_read_v1+0x30>
 800592c:	8afb      	ldrh	r3, [r7, #22]
 800592e:	e07b      	b.n	8005a28 <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->width,      sizeof(v1->width)));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68d0      	ldr	r0, [r2, #12]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	1c91      	adds	r1, r2, #2
 800593c:	2202      	movs	r2, #2
 800593e:	4798      	blx	r3
 8005940:	4603      	mov	r3, r0
 8005942:	82bb      	strh	r3, [r7, #20]
 8005944:	8abb      	ldrh	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <bmp_private_read_v1+0x58>
 8005954:	8abb      	ldrh	r3, [r7, #20]
 8005956:	e067      	b.n	8005a28 <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->height,     sizeof(v1->height)));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68d0      	ldr	r0, [r2, #12]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	1d11      	adds	r1, r2, #4
 8005964:	2202      	movs	r2, #2
 8005966:	4798      	blx	r3
 8005968:	4603      	mov	r3, r0
 800596a:	827b      	strh	r3, [r7, #18]
 800596c:	8a7b      	ldrh	r3, [r7, #18]
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <bmp_private_read_v1+0x80>
 800597c:	8a7b      	ldrh	r3, [r7, #18]
 800597e:	e053      	b.n	8005a28 <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->byte_width, sizeof(v1->byte_width)));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68d0      	ldr	r0, [r2, #12]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	1d91      	adds	r1, r2, #6
 800598c:	2202      	movs	r2, #2
 800598e:	4798      	blx	r3
 8005990:	4603      	mov	r3, r0
 8005992:	823b      	strh	r3, [r7, #16]
 8005994:	8a3b      	ldrh	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <bmp_private_read_v1+0xa8>
 80059a4:	8a3b      	ldrh	r3, [r7, #16]
 80059a6:	e03f      	b.n	8005a28 <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->planes,     sizeof(v1->planes)));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68d0      	ldr	r0, [r2, #12]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	f102 0108 	add.w	r1, r2, #8
 80059b6:	2201      	movs	r2, #1
 80059b8:	4798      	blx	r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	81fb      	strh	r3, [r7, #14]
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <bmp_private_read_v1+0xd2>
 80059ce:	89fb      	ldrh	r3, [r7, #14]
 80059d0:	e02a      	b.n	8005a28 <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->bit_count,  sizeof(v1->bit_count)));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68d0      	ldr	r0, [r2, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	f102 0109 	add.w	r1, r2, #9
 80059e0:	2201      	movs	r2, #1
 80059e2:	4798      	blx	r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	81bb      	strh	r3, [r7, #12]
 80059e8:	89bb      	ldrh	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf14      	ite	ne
 80059ee:	2301      	movne	r3, #1
 80059f0:	2300      	moveq	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <bmp_private_read_v1+0xfc>
 80059f8:	89bb      	ldrh	r3, [r7, #12]
 80059fa:	e015      	b.n	8005a28 <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->pixels,     sizeof(v1->pixels)));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68d0      	ldr	r0, [r2, #12]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	f102 010c 	add.w	r1, r2, #12
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	4798      	blx	r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	817b      	strh	r3, [r7, #10]
 8005a12:	897b      	ldrh	r3, [r7, #10]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <bmp_private_read_v1+0x126>
 8005a22:	897b      	ldrh	r3, [r7, #10]
 8005a24:	e000      	b.n	8005a28 <bmp_private_read_v1+0x128>

    return SAIL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <bmp_private_read_dib_file_header>:

sail_status_t bmp_private_read_dib_file_header(struct sail_io *io, struct SailBmpDibFileHeader *fh) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &fh->type,      sizeof(fh->type)));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68d0      	ldr	r0, [r2, #12]
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	2202      	movs	r2, #2
 8005a46:	4798      	blx	r3
 8005a48:	4603      	mov	r3, r0
 8005a4a:	82fb      	strh	r3, [r7, #22]
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <bmp_private_read_dib_file_header+0x30>
 8005a5c:	8afb      	ldrh	r3, [r7, #22]
 8005a5e:	e053      	b.n	8005b08 <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->size,      sizeof(fh->size)));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68d0      	ldr	r0, [r2, #12]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	1d11      	adds	r1, r2, #4
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	4798      	blx	r3
 8005a70:	4603      	mov	r3, r0
 8005a72:	82bb      	strh	r3, [r7, #20]
 8005a74:	8abb      	ldrh	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bf14      	ite	ne
 8005a7a:	2301      	movne	r3, #1
 8005a7c:	2300      	moveq	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <bmp_private_read_dib_file_header+0x58>
 8005a84:	8abb      	ldrh	r3, [r7, #20]
 8005a86:	e03f      	b.n	8005b08 <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->reserved1, sizeof(fh->reserved1)));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	68d0      	ldr	r0, [r2, #12]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	f102 0108 	add.w	r1, r2, #8
 8005a96:	2202      	movs	r2, #2
 8005a98:	4798      	blx	r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	827b      	strh	r3, [r7, #18]
 8005a9e:	8a7b      	ldrh	r3, [r7, #18]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <bmp_private_read_dib_file_header+0x82>
 8005aae:	8a7b      	ldrh	r3, [r7, #18]
 8005ab0:	e02a      	b.n	8005b08 <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->reserved2, sizeof(fh->reserved2)));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68d0      	ldr	r0, [r2, #12]
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	f102 010a 	add.w	r1, r2, #10
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	4798      	blx	r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	823b      	strh	r3, [r7, #16]
 8005ac8:	8a3b      	ldrh	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <bmp_private_read_dib_file_header+0xac>
 8005ad8:	8a3b      	ldrh	r3, [r7, #16]
 8005ada:	e015      	b.n	8005b08 <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->offset,    sizeof(fh->offset)));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68d0      	ldr	r0, [r2, #12]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	f102 010c 	add.w	r1, r2, #12
 8005aea:	2204      	movs	r2, #4
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	81fb      	strh	r3, [r7, #14]
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <bmp_private_read_dib_file_header+0xd6>
 8005b02:	89fb      	ldrh	r3, [r7, #14]
 8005b04:	e000      	b.n	8005b08 <bmp_private_read_dib_file_header+0xd8>

    return SAIL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <bmp_private_read_v2>:

sail_status_t bmp_private_read_v2(struct sail_io *io, struct SailBmpDibHeaderV2 *v2) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v2->size,      sizeof(v2->size)));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68d0      	ldr	r0, [r2, #12]
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	2204      	movs	r2, #4
 8005b26:	4798      	blx	r3
 8005b28:	4603      	mov	r3, r0
 8005b2a:	82fb      	strh	r3, [r7, #22]
 8005b2c:	8afb      	ldrh	r3, [r7, #22]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bf14      	ite	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	2300      	moveq	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <bmp_private_read_v2+0x30>
 8005b3c:	8afb      	ldrh	r3, [r7, #22]
 8005b3e:	e053      	b.n	8005be8 <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->width,     sizeof(v2->width)));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68d0      	ldr	r0, [r2, #12]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	1d11      	adds	r1, r2, #4
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	4798      	blx	r3
 8005b50:	4603      	mov	r3, r0
 8005b52:	82bb      	strh	r3, [r7, #20]
 8005b54:	8abb      	ldrh	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf14      	ite	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <bmp_private_read_v2+0x58>
 8005b64:	8abb      	ldrh	r3, [r7, #20]
 8005b66:	e03f      	b.n	8005be8 <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->height,    sizeof(v2->height)));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	68d0      	ldr	r0, [r2, #12]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	f102 0108 	add.w	r1, r2, #8
 8005b76:	2204      	movs	r2, #4
 8005b78:	4798      	blx	r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	827b      	strh	r3, [r7, #18]
 8005b7e:	8a7b      	ldrh	r3, [r7, #18]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <bmp_private_read_v2+0x82>
 8005b8e:	8a7b      	ldrh	r3, [r7, #18]
 8005b90:	e02a      	b.n	8005be8 <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->planes,    sizeof(v2->planes)));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68d0      	ldr	r0, [r2, #12]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	f102 010c 	add.w	r1, r2, #12
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	4798      	blx	r3
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	823b      	strh	r3, [r7, #16]
 8005ba8:	8a3b      	ldrh	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bf14      	ite	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <bmp_private_read_v2+0xac>
 8005bb8:	8a3b      	ldrh	r3, [r7, #16]
 8005bba:	e015      	b.n	8005be8 <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->bit_count, sizeof(v2->bit_count)));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	68d0      	ldr	r0, [r2, #12]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	f102 010e 	add.w	r1, r2, #14
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4798      	blx	r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	81fb      	strh	r3, [r7, #14]
 8005bd2:	89fb      	ldrh	r3, [r7, #14]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <bmp_private_read_v2+0xd6>
 8005be2:	89fb      	ldrh	r3, [r7, #14]
 8005be4:	e000      	b.n	8005be8 <bmp_private_read_v2+0xd8>

    return SAIL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <bmp_private_read_v3>:

sail_status_t bmp_private_read_v3(struct sail_io *io, struct SailBmpDibHeaderV3 *v3) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v3->compression,        sizeof(v3->compression)));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68d0      	ldr	r0, [r2, #12]
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	2204      	movs	r2, #4
 8005c06:	4798      	blx	r3
 8005c08:	4603      	mov	r3, r0
 8005c0a:	82fb      	strh	r3, [r7, #22]
 8005c0c:	8afb      	ldrh	r3, [r7, #22]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <bmp_private_read_v3+0x30>
 8005c1c:	8afb      	ldrh	r3, [r7, #22]
 8005c1e:	e068      	b.n	8005cf2 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->bitmap_size,        sizeof(v3->bitmap_size)));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68d0      	ldr	r0, [r2, #12]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	1d11      	adds	r1, r2, #4
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	4798      	blx	r3
 8005c30:	4603      	mov	r3, r0
 8005c32:	82bb      	strh	r3, [r7, #20]
 8005c34:	8abb      	ldrh	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <bmp_private_read_v3+0x58>
 8005c44:	8abb      	ldrh	r3, [r7, #20]
 8005c46:	e054      	b.n	8005cf2 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->x_pixels_per_meter, sizeof(v3->x_pixels_per_meter)));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68d0      	ldr	r0, [r2, #12]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	f102 0108 	add.w	r1, r2, #8
 8005c56:	2204      	movs	r2, #4
 8005c58:	4798      	blx	r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	827b      	strh	r3, [r7, #18]
 8005c5e:	8a7b      	ldrh	r3, [r7, #18]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf14      	ite	ne
 8005c64:	2301      	movne	r3, #1
 8005c66:	2300      	moveq	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <bmp_private_read_v3+0x82>
 8005c6e:	8a7b      	ldrh	r3, [r7, #18]
 8005c70:	e03f      	b.n	8005cf2 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->y_pixels_per_meter, sizeof(v3->y_pixels_per_meter)));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68d0      	ldr	r0, [r2, #12]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	f102 010c 	add.w	r1, r2, #12
 8005c80:	2204      	movs	r2, #4
 8005c82:	4798      	blx	r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	823b      	strh	r3, [r7, #16]
 8005c88:	8a3b      	ldrh	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <bmp_private_read_v3+0xac>
 8005c98:	8a3b      	ldrh	r3, [r7, #16]
 8005c9a:	e02a      	b.n	8005cf2 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->colors_used,        sizeof(v3->colors_used)));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68d0      	ldr	r0, [r2, #12]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	f102 0110 	add.w	r1, r2, #16
 8005caa:	2204      	movs	r2, #4
 8005cac:	4798      	blx	r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	81fb      	strh	r3, [r7, #14]
 8005cb2:	89fb      	ldrh	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <bmp_private_read_v3+0xd6>
 8005cc2:	89fb      	ldrh	r3, [r7, #14]
 8005cc4:	e015      	b.n	8005cf2 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->colors_important,   sizeof(v3->colors_important)));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68d0      	ldr	r0, [r2, #12]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	f102 0114 	add.w	r1, r2, #20
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	4798      	blx	r3
 8005cd8:	4603      	mov	r3, r0
 8005cda:	81bb      	strh	r3, [r7, #12]
 8005cdc:	89bb      	ldrh	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bf14      	ite	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	2300      	moveq	r3, #0
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <bmp_private_read_v3+0x100>
 8005cec:	89bb      	ldrh	r3, [r7, #12]
 8005cee:	e000      	b.n	8005cf2 <bmp_private_read_v3+0x102>

    return SAIL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <bmp_private_read_v4>:

sail_status_t bmp_private_read_v4(struct sail_io *io, struct SailBmpDibHeaderV4 *v4) {
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b08c      	sub	sp, #48	; 0x30
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v4->red_mask,         sizeof(v4->red_mask)));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68d0      	ldr	r0, [r2, #12]
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	4798      	blx	r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <bmp_private_read_v4+0x30>
 8005d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d28:	e14f      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_mask,       sizeof(v4->green_mask)));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68d0      	ldr	r0, [r2, #12]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	1d11      	adds	r1, r2, #4
 8005d36:	2204      	movs	r2, #4
 8005d38:	4798      	blx	r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <bmp_private_read_v4+0x58>
 8005d4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d50:	e13b      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_mask,        sizeof(v4->blue_mask)));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68d0      	ldr	r0, [r2, #12]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	f102 0108 	add.w	r1, r2, #8
 8005d60:	2204      	movs	r2, #4
 8005d62:	4798      	blx	r3
 8005d64:	4603      	mov	r3, r0
 8005d66:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <bmp_private_read_v4+0x82>
 8005d78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d7a:	e126      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->alpha_mask,       sizeof(v4->alpha_mask)));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68d0      	ldr	r0, [r2, #12]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	f102 010c 	add.w	r1, r2, #12
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4798      	blx	r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	853b      	strh	r3, [r7, #40]	; 0x28
 8005d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <bmp_private_read_v4+0xac>
 8005da2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005da4:	e111      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->color_space_type, sizeof(v4->color_space_type)));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68d0      	ldr	r0, [r2, #12]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	f102 0110 	add.w	r1, r2, #16
 8005db4:	2204      	movs	r2, #4
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <bmp_private_read_v4+0xd6>
 8005dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dce:	e0fc      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_x,            sizeof(v4->red_x)));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	68d0      	ldr	r0, [r2, #12]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	f102 0114 	add.w	r1, r2, #20
 8005dde:	2204      	movs	r2, #4
 8005de0:	4798      	blx	r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <bmp_private_read_v4+0x100>
 8005df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005df8:	e0e7      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_y,            sizeof(v4->red_y)));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68d0      	ldr	r0, [r2, #12]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	f102 0118 	add.w	r1, r2, #24
 8005e08:	2204      	movs	r2, #4
 8005e0a:	4798      	blx	r3
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <bmp_private_read_v4+0x12a>
 8005e20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e22:	e0d2      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_z,            sizeof(v4->red_z)));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68d0      	ldr	r0, [r2, #12]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	f102 011c 	add.w	r1, r2, #28
 8005e32:	2204      	movs	r2, #4
 8005e34:	4798      	blx	r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	843b      	strh	r3, [r7, #32]
 8005e3a:	8c3b      	ldrh	r3, [r7, #32]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <bmp_private_read_v4+0x154>
 8005e4a:	8c3b      	ldrh	r3, [r7, #32]
 8005e4c:	e0bd      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_x,          sizeof(v4->green_x)));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68d0      	ldr	r0, [r2, #12]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	f102 0120 	add.w	r1, r2, #32
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	4798      	blx	r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	83fb      	strh	r3, [r7, #30]
 8005e64:	8bfb      	ldrh	r3, [r7, #30]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bf14      	ite	ne
 8005e6a:	2301      	movne	r3, #1
 8005e6c:	2300      	moveq	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <bmp_private_read_v4+0x17e>
 8005e74:	8bfb      	ldrh	r3, [r7, #30]
 8005e76:	e0a8      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_y,          sizeof(v4->green_y)));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68d0      	ldr	r0, [r2, #12]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8005e86:	2204      	movs	r2, #4
 8005e88:	4798      	blx	r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	83bb      	strh	r3, [r7, #28]
 8005e8e:	8bbb      	ldrh	r3, [r7, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <bmp_private_read_v4+0x1a8>
 8005e9e:	8bbb      	ldrh	r3, [r7, #28]
 8005ea0:	e093      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_z,          sizeof(v4->green_z)));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	68d0      	ldr	r0, [r2, #12]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	837b      	strh	r3, [r7, #26]
 8005eb8:	8b7b      	ldrh	r3, [r7, #26]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <bmp_private_read_v4+0x1d2>
 8005ec8:	8b7b      	ldrh	r3, [r7, #26]
 8005eca:	e07e      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_x,           sizeof(v4->blue_x)));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68d0      	ldr	r0, [r2, #12]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8005eda:	2204      	movs	r2, #4
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	833b      	strh	r3, [r7, #24]
 8005ee2:	8b3b      	ldrh	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <bmp_private_read_v4+0x1fc>
 8005ef2:	8b3b      	ldrh	r3, [r7, #24]
 8005ef4:	e069      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_y,           sizeof(v4->blue_y)));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d0      	ldr	r0, [r2, #12]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005f04:	2204      	movs	r2, #4
 8005f06:	4798      	blx	r3
 8005f08:	4603      	mov	r3, r0
 8005f0a:	82fb      	strh	r3, [r7, #22]
 8005f0c:	8afb      	ldrh	r3, [r7, #22]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf14      	ite	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	2300      	moveq	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <bmp_private_read_v4+0x226>
 8005f1c:	8afb      	ldrh	r3, [r7, #22]
 8005f1e:	e054      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_z,           sizeof(v4->blue_z)));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68d0      	ldr	r0, [r2, #12]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	f102 0134 	add.w	r1, r2, #52	; 0x34
 8005f2e:	2204      	movs	r2, #4
 8005f30:	4798      	blx	r3
 8005f32:	4603      	mov	r3, r0
 8005f34:	82bb      	strh	r3, [r7, #20]
 8005f36:	8abb      	ldrh	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <bmp_private_read_v4+0x250>
 8005f46:	8abb      	ldrh	r3, [r7, #20]
 8005f48:	e03f      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_red,        sizeof(v4->gamma_red)));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68d0      	ldr	r0, [r2, #12]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	f102 0138 	add.w	r1, r2, #56	; 0x38
 8005f58:	2204      	movs	r2, #4
 8005f5a:	4798      	blx	r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	827b      	strh	r3, [r7, #18]
 8005f60:	8a7b      	ldrh	r3, [r7, #18]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bf14      	ite	ne
 8005f66:	2301      	movne	r3, #1
 8005f68:	2300      	moveq	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <bmp_private_read_v4+0x27a>
 8005f70:	8a7b      	ldrh	r3, [r7, #18]
 8005f72:	e02a      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_green,      sizeof(v4->gamma_green)));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	68d0      	ldr	r0, [r2, #12]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8005f82:	2204      	movs	r2, #4
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	823b      	strh	r3, [r7, #16]
 8005f8a:	8a3b      	ldrh	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <bmp_private_read_v4+0x2a4>
 8005f9a:	8a3b      	ldrh	r3, [r7, #16]
 8005f9c:	e015      	b.n	8005fca <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_blue,       sizeof(v4->gamma_blue)));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68d0      	ldr	r0, [r2, #12]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8005fac:	2204      	movs	r2, #4
 8005fae:	4798      	blx	r3
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	81fb      	strh	r3, [r7, #14]
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <bmp_private_read_v4+0x2ce>
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	e000      	b.n	8005fca <bmp_private_read_v4+0x2d0>

    return SAIL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3730      	adds	r7, #48	; 0x30
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <bmp_private_read_v5>:

sail_status_t bmp_private_read_v5(struct sail_io *io, struct SailBmpDibHeaderV5 *v5) {
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v5->intent,       sizeof(v5->intent)));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68d0      	ldr	r0, [r2, #12]
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	4798      	blx	r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	81fb      	strh	r3, [r7, #14]
 8005fee:	89fb      	ldrh	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <bmp_private_read_v5+0x30>
 8005ffe:	89fb      	ldrh	r3, [r7, #14]
 8006000:	e03e      	b.n	8006080 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->profile_data, sizeof(v5->profile_data)));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68d0      	ldr	r0, [r2, #12]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	1d11      	adds	r1, r2, #4
 800600e:	2204      	movs	r2, #4
 8006010:	4798      	blx	r3
 8006012:	4603      	mov	r3, r0
 8006014:	81bb      	strh	r3, [r7, #12]
 8006016:	89bb      	ldrh	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <bmp_private_read_v5+0x58>
 8006026:	89bb      	ldrh	r3, [r7, #12]
 8006028:	e02a      	b.n	8006080 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->profile_size, sizeof(v5->profile_size)));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	68d0      	ldr	r0, [r2, #12]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	f102 0108 	add.w	r1, r2, #8
 8006038:	2204      	movs	r2, #4
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	817b      	strh	r3, [r7, #10]
 8006040:	897b      	ldrh	r3, [r7, #10]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <bmp_private_read_v5+0x82>
 8006050:	897b      	ldrh	r3, [r7, #10]
 8006052:	e015      	b.n	8006080 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->reserved,     sizeof(v5->reserved)));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68d0      	ldr	r0, [r2, #12]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	f102 010c 	add.w	r1, r2, #12
 8006062:	2204      	movs	r2, #4
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	813b      	strh	r3, [r7, #8]
 800606a:	893b      	ldrh	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	bf14      	ite	ne
 8006070:	2301      	movne	r3, #1
 8006072:	2300      	moveq	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <bmp_private_read_v5+0xac>
 800607a:	893b      	ldrh	r3, [r7, #8]
 800607c:	e000      	b.n	8006080 <bmp_private_read_v5+0xae>

    return SAIL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <bmp_private_bit_count_to_pixel_format>:

sail_status_t bmp_private_bit_count_to_pixel_format(uint16_t bit_count, enum SailPixelFormat *pixel_format) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af02      	add	r7, sp, #8
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	80fb      	strh	r3, [r7, #6]

    switch (bit_count) {
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	3b01      	subs	r3, #1
 8006098:	2b1f      	cmp	r3, #31
 800609a:	d861      	bhi.n	8006160 <bmp_private_bit_count_to_pixel_format+0xd8>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <bmp_private_bit_count_to_pixel_format+0x1c>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	08006125 	.word	0x08006125
 80060a8:	08006161 	.word	0x08006161
 80060ac:	08006161 	.word	0x08006161
 80060b0:	0800612f 	.word	0x0800612f
 80060b4:	08006161 	.word	0x08006161
 80060b8:	08006161 	.word	0x08006161
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006139 	.word	0x08006139
 80060c4:	08006161 	.word	0x08006161
 80060c8:	08006161 	.word	0x08006161
 80060cc:	08006161 	.word	0x08006161
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006161 	.word	0x08006161
 80060d8:	08006161 	.word	0x08006161
 80060dc:	08006161 	.word	0x08006161
 80060e0:	08006143 	.word	0x08006143
 80060e4:	08006161 	.word	0x08006161
 80060e8:	08006161 	.word	0x08006161
 80060ec:	08006161 	.word	0x08006161
 80060f0:	08006161 	.word	0x08006161
 80060f4:	08006161 	.word	0x08006161
 80060f8:	08006161 	.word	0x08006161
 80060fc:	08006161 	.word	0x08006161
 8006100:	0800614d 	.word	0x0800614d
 8006104:	08006161 	.word	0x08006161
 8006108:	08006161 	.word	0x08006161
 800610c:	08006161 	.word	0x08006161
 8006110:	08006161 	.word	0x08006161
 8006114:	08006161 	.word	0x08006161
 8006118:	08006161 	.word	0x08006161
 800611c:	08006161 	.word	0x08006161
 8006120:	08006157 	.word	0x08006157
        case 1:  *pixel_format = SAIL_PIXEL_FORMAT_BPP1_INDEXED; return SAIL_OK;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	220d      	movs	r2, #13
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	e021      	b.n	8006172 <bmp_private_bit_count_to_pixel_format+0xea>
        case 4:  *pixel_format = SAIL_PIXEL_FORMAT_BPP4_INDEXED; return SAIL_OK;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	220f      	movs	r2, #15
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	e01c      	b.n	8006172 <bmp_private_bit_count_to_pixel_format+0xea>
        case 8:  *pixel_format = SAIL_PIXEL_FORMAT_BPP8_INDEXED; return SAIL_OK;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2210      	movs	r2, #16
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	2300      	movs	r3, #0
 8006140:	e017      	b.n	8006172 <bmp_private_bit_count_to_pixel_format+0xea>
        case 16: *pixel_format = SAIL_PIXEL_FORMAT_BPP16_BGR555; return SAIL_OK;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	221c      	movs	r2, #28
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	2300      	movs	r3, #0
 800614a:	e012      	b.n	8006172 <bmp_private_bit_count_to_pixel_format+0xea>
        case 24: *pixel_format = SAIL_PIXEL_FORMAT_BPP24_BGR;    return SAIL_OK;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2220      	movs	r2, #32
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	2300      	movs	r3, #0
 8006154:	e00d      	b.n	8006172 <bmp_private_bit_count_to_pixel_format+0xea>
        case 32: *pixel_format = SAIL_PIXEL_FORMAT_BPP32_BGRA;   return SAIL_OK;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2230      	movs	r2, #48	; 0x30
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	e008      	b.n	8006172 <bmp_private_bit_count_to_pixel_format+0xea>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_BIT_DEPTH);
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <bmp_private_bit_count_to_pixel_format+0xf4>)
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <bmp_private_bit_count_to_pixel_format+0xf8>)
 8006166:	2282      	movs	r2, #130	; 0x82
 8006168:	4906      	ldr	r1, [pc, #24]	; (8006184 <bmp_private_bit_count_to_pixel_format+0xfc>)
 800616a:	2001      	movs	r0, #1
 800616c:	f005 fb3a 	bl	800b7e4 <sail_log>
 8006170:	23d2      	movs	r3, #210	; 0xd2
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	08013f08 	.word	0x08013f08
 8006180:	08013ea8 	.word	0x08013ea8
 8006184:	08013eac 	.word	0x08013eac

08006188 <bmp_private_fetch_iccp>:

sail_status_t bmp_private_fetch_iccp(struct sail_io *io, long offset_of_data, uint32_t profile_size, struct sail_iccp **iccp) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]

    SAIL_TRY(io->seek(io->stream, offset_of_data, SEEK_SET));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	68d0      	ldr	r0, [r2, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	4798      	blx	r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	83fb      	strh	r3, [r7, #30]
 80061a8:	8bfb      	ldrh	r3, [r7, #30]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <bmp_private_fetch_iccp+0x34>
 80061b8:	8bfb      	ldrh	r3, [r7, #30]
 80061ba:	e03f      	b.n	800623c <bmp_private_fetch_iccp+0xb4>

    void *profile_data;
    SAIL_TRY(sail_malloc(profile_size, &profile_data));
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f005 fc06 	bl	800b9d4 <sail_malloc>
 80061c8:	4603      	mov	r3, r0
 80061ca:	83bb      	strh	r3, [r7, #28]
 80061cc:	8bbb      	ldrh	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bf14      	ite	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	2300      	moveq	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <bmp_private_fetch_iccp+0x58>
 80061dc:	8bbb      	ldrh	r3, [r7, #28]
 80061de:	e02d      	b.n	800623c <bmp_private_fetch_iccp+0xb4>

    SAIL_TRY_OR_CLEANUP(io->strict_read(io->stream, profile_data, profile_size),
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	68d0      	ldr	r0, [r2, #12]
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	4798      	blx	r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	837b      	strh	r3, [r7, #26]
 80061f2:	8b7b      	ldrh	r3, [r7, #26]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf14      	ite	ne
 80061f8:	2301      	movne	r3, #1
 80061fa:	2300      	moveq	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <bmp_private_fetch_iccp+0x86>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4618      	mov	r0, r3
 8006206:	f005 fc6d 	bl	800bae4 <sail_free>
 800620a:	8b7b      	ldrh	r3, [r7, #26]
 800620c:	e016      	b.n	800623c <bmp_private_fetch_iccp+0xb4>
                        /* cleanup */ sail_free(profile_data));

    SAIL_TRY_OR_CLEANUP(sail_alloc_iccp_move_data(profile_data, profile_size, iccp),
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4618      	mov	r0, r3
 8006216:	f003 ff3b 	bl	800a090 <sail_alloc_iccp_move_data>
 800621a:	4603      	mov	r3, r0
 800621c:	833b      	strh	r3, [r7, #24]
 800621e:	8b3b      	ldrh	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <bmp_private_fetch_iccp+0xb2>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4618      	mov	r0, r3
 8006232:	f005 fc57 	bl	800bae4 <sail_free>
 8006236:	8b3b      	ldrh	r3, [r7, #24]
 8006238:	e000      	b.n	800623c <bmp_private_fetch_iccp+0xb4>
                        /* cleanup */ sail_free(profile_data));

    return SAIL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <bmp_private_skip_end_of_scan_line>:

sail_status_t bmp_private_skip_end_of_scan_line(struct sail_io *io) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

    uint8_t marker;
    SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68d0      	ldr	r0, [r2, #12]
 8006254:	f107 010f 	add.w	r1, r7, #15
 8006258:	2201      	movs	r2, #1
 800625a:	4798      	blx	r3
 800625c:	4603      	mov	r3, r0
 800625e:	82fb      	strh	r3, [r7, #22]
 8006260:	8afb      	ldrh	r3, [r7, #22]
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <bmp_private_skip_end_of_scan_line+0x30>
 8006270:	8afb      	ldrh	r3, [r7, #22]
 8006272:	e044      	b.n	80062fe <bmp_private_skip_end_of_scan_line+0xba>

    if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2200      	movs	r2, #0
 8006278:	4293      	cmp	r3, r2
 800627a:	d12b      	bne.n	80062d4 <bmp_private_skip_end_of_scan_line+0x90>
        SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68d0      	ldr	r0, [r2, #12]
 8006284:	f107 010f 	add.w	r1, r7, #15
 8006288:	2201      	movs	r2, #1
 800628a:	4798      	blx	r3
 800628c:	4603      	mov	r3, r0
 800628e:	827b      	strh	r3, [r7, #18]
 8006290:	8a7b      	ldrh	r3, [r7, #18]
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <bmp_private_skip_end_of_scan_line+0x60>
 80062a0:	8a7b      	ldrh	r3, [r7, #18]
 80062a2:	e02c      	b.n	80062fe <bmp_private_skip_end_of_scan_line+0xba>

        if (marker != SAIL_END_OF_SCAN_LINE_MARKER) {
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2200      	movs	r2, #0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d027      	beq.n	80062fc <bmp_private_skip_end_of_scan_line+0xb8>
            SAIL_TRY(io->seek(io->stream, -2, SEEK_CUR));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68d0      	ldr	r0, [r2, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f06f 0101 	mvn.w	r1, #1
 80062ba:	4798      	blx	r3
 80062bc:	4603      	mov	r3, r0
 80062be:	823b      	strh	r3, [r7, #16]
 80062c0:	8a3b      	ldrh	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bf14      	ite	ne
 80062c6:	2301      	movne	r3, #1
 80062c8:	2300      	moveq	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d015      	beq.n	80062fc <bmp_private_skip_end_of_scan_line+0xb8>
 80062d0:	8a3b      	ldrh	r3, [r7, #16]
 80062d2:	e014      	b.n	80062fe <bmp_private_skip_end_of_scan_line+0xba>
        }
    } else {
        SAIL_TRY(io->seek(io->stream, -1, SEEK_CUR));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68d0      	ldr	r0, [r2, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	82bb      	strh	r3, [r7, #20]
 80062e8:	8abb      	ldrh	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	2300      	moveq	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <bmp_private_skip_end_of_scan_line+0xb8>
 80062f8:	8abb      	ldrh	r3, [r7, #20]
 80062fa:	e000      	b.n	80062fe <bmp_private_skip_end_of_scan_line+0xba>
    }

    return SAIL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <bmp_private_bytes_in_row>:

sail_status_t bmp_private_bytes_in_row(unsigned width, unsigned bit_count, unsigned *bytes_in_row) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]

    switch (bit_count) {
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	3b01      	subs	r3, #1
 8006318:	2b1f      	cmp	r3, #31
 800631a:	d86a      	bhi.n	80063f2 <bmp_private_bytes_in_row+0xea>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <bmp_private_bytes_in_row+0x1c>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	080063a5 	.word	0x080063a5
 8006328:	080063f3 	.word	0x080063f3
 800632c:	080063f3 	.word	0x080063f3
 8006330:	080063b3 	.word	0x080063b3
 8006334:	080063f3 	.word	0x080063f3
 8006338:	080063f3 	.word	0x080063f3
 800633c:	080063f3 	.word	0x080063f3
 8006340:	080063c1 	.word	0x080063c1
 8006344:	080063f3 	.word	0x080063f3
 8006348:	080063f3 	.word	0x080063f3
 800634c:	080063f3 	.word	0x080063f3
 8006350:	080063f3 	.word	0x080063f3
 8006354:	080063f3 	.word	0x080063f3
 8006358:	080063f3 	.word	0x080063f3
 800635c:	080063f3 	.word	0x080063f3
 8006360:	080063cb 	.word	0x080063cb
 8006364:	080063f3 	.word	0x080063f3
 8006368:	080063f3 	.word	0x080063f3
 800636c:	080063f3 	.word	0x080063f3
 8006370:	080063f3 	.word	0x080063f3
 8006374:	080063f3 	.word	0x080063f3
 8006378:	080063f3 	.word	0x080063f3
 800637c:	080063f3 	.word	0x080063f3
 8006380:	080063d7 	.word	0x080063d7
 8006384:	080063f3 	.word	0x080063f3
 8006388:	080063f3 	.word	0x080063f3
 800638c:	080063f3 	.word	0x080063f3
 8006390:	080063f3 	.word	0x080063f3
 8006394:	080063f3 	.word	0x080063f3
 8006398:	080063f3 	.word	0x080063f3
 800639c:	080063f3 	.word	0x080063f3
 80063a0:	080063e7 	.word	0x080063e7
        case 1:  *bytes_in_row = (width + 7) / 8; return SAIL_OK;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3307      	adds	r3, #7
 80063a8:	08da      	lsrs	r2, r3, #3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	e028      	b.n	8006404 <bmp_private_bytes_in_row+0xfc>
        case 4:  *bytes_in_row = (width + 1) / 2; return SAIL_OK;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	085a      	lsrs	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	e021      	b.n	8006404 <bmp_private_bytes_in_row+0xfc>
        case 8:  *bytes_in_row = width;           return SAIL_OK;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	e01c      	b.n	8006404 <bmp_private_bytes_in_row+0xfc>
        case 16: *bytes_in_row = width * 2;       return SAIL_OK;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	005a      	lsls	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	e016      	b.n	8006404 <bmp_private_bytes_in_row+0xfc>
        case 24: *bytes_in_row = width * 3;       return SAIL_OK;
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4613      	mov	r3, r2
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	441a      	add	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	e00e      	b.n	8006404 <bmp_private_bytes_in_row+0xfc>
        case 32: *bytes_in_row = width * 4;       return SAIL_OK;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	009a      	lsls	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	2300      	movs	r3, #0
 80063f0:	e008      	b.n	8006404 <bmp_private_bytes_in_row+0xfc>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <bmp_private_bytes_in_row+0x104>)
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <bmp_private_bytes_in_row+0x108>)
 80063f8:	22b2      	movs	r2, #178	; 0xb2
 80063fa:	4906      	ldr	r1, [pc, #24]	; (8006414 <bmp_private_bytes_in_row+0x10c>)
 80063fc:	2001      	movs	r0, #1
 80063fe:	f005 f9f1 	bl	800b7e4 <sail_log>
 8006402:	23d4      	movs	r3, #212	; 0xd4
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	08013f2c 	.word	0x08013f2c
 8006410:	08013ea8 	.word	0x08013ea8
 8006414:	08013eac 	.word	0x08013eac

08006418 <bmp_private_pad_bytes>:

unsigned bmp_private_pad_bytes(unsigned bytes_in_row) {
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

    const unsigned remainder = bytes_in_row % 4;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
    return (remainder == 0) ? 0 : (4 - remainder);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <bmp_private_pad_bytes+0x1e>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f1c3 0304 	rsb	r3, r3, #4
 8006434:	e000      	b.n	8006438 <bmp_private_pad_bytes+0x20>
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <bmp_private_fill_system_palette>:

sail_status_t bmp_private_fill_system_palette(unsigned bit_count, sail_rgb24_t **palette, unsigned *palette_count) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b09c      	sub	sp, #112	; 0x70
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]

    switch (bit_count) {
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d003      	beq.n	800645e <bmp_private_fill_system_palette+0x1a>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d032      	beq.n	80064c2 <bmp_private_fill_system_palette+0x7e>
 800645c:	e0d9      	b.n	8006612 <bmp_private_fill_system_palette+0x1ce>
        case 1: {
            *palette_count = 2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	601a      	str	r2, [r3, #0]

            void *ptr;
            SAIL_TRY(sail_malloc(sizeof(sail_rgb24_t) * (*palette_count), &ptr));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f005 faad 	bl	800b9d4 <sail_malloc>
 800647a:	4603      	mov	r3, r0
 800647c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006480:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <bmp_private_fill_system_palette+0x54>
 8006492:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006496:	e0c5      	b.n	8006624 <bmp_private_fill_system_palette+0x1e0>
            *palette = ptr;
 8006498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	601a      	str	r2, [r3, #0]

            (*palette)[0] = (sail_rgb24_t) { 0,   0,   0   };
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	705a      	strb	r2, [r3, #1]
 80064aa:	2200      	movs	r2, #0
 80064ac:	709a      	strb	r2, [r3, #2]
            (*palette)[1] = (sail_rgb24_t) { 255, 255, 255 };
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3303      	adds	r3, #3
 80064b4:	4a5d      	ldr	r2, [pc, #372]	; (800662c <bmp_private_fill_system_palette+0x1e8>)
 80064b6:	8811      	ldrh	r1, [r2, #0]
 80064b8:	7892      	ldrb	r2, [r2, #2]
 80064ba:	8019      	strh	r1, [r3, #0]
 80064bc:	709a      	strb	r2, [r3, #2]

            return SAIL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e0b0      	b.n	8006624 <bmp_private_fill_system_palette+0x1e0>
        }
        case 4: {
            *palette_count = 16;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2210      	movs	r2, #16
 80064c6:	601a      	str	r2, [r3, #0]

            void *ptr;
            SAIL_TRY(sail_malloc(sizeof(sail_rgb24_t) * (*palette_count), &ptr));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f005 fa7b 	bl	800b9d4 <sail_malloc>
 80064de:	4603      	mov	r3, r0
 80064e0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80064e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf14      	ite	ne
 80064ec:	2301      	movne	r3, #1
 80064ee:	2300      	moveq	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <bmp_private_fill_system_palette+0xb8>
 80064f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80064fa:	e093      	b.n	8006624 <bmp_private_fill_system_palette+0x1e0>
            *palette = ptr;
 80064fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	601a      	str	r2, [r3, #0]

            (*palette)[0]  = (sail_rgb24_t) { 0,   0,   0   };
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	705a      	strb	r2, [r3, #1]
 800650e:	2200      	movs	r2, #0
 8006510:	709a      	strb	r2, [r3, #2]
            (*palette)[1]  = (sail_rgb24_t) { 128, 0,   0   };
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3303      	adds	r3, #3
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	2200      	movs	r2, #0
 800651e:	705a      	strb	r2, [r3, #1]
 8006520:	2200      	movs	r2, #0
 8006522:	709a      	strb	r2, [r3, #2]
            (*palette)[2]  = (sail_rgb24_t) { 0,   128, 0   };
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3306      	adds	r3, #6
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	705a      	strb	r2, [r3, #1]
 8006532:	2200      	movs	r2, #0
 8006534:	709a      	strb	r2, [r3, #2]
            (*palette)[3]  = (sail_rgb24_t) { 128, 128, 0   };
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3309      	adds	r3, #9
 800653c:	4a3c      	ldr	r2, [pc, #240]	; (8006630 <bmp_private_fill_system_palette+0x1ec>)
 800653e:	8811      	ldrh	r1, [r2, #0]
 8006540:	7892      	ldrb	r2, [r2, #2]
 8006542:	8019      	strh	r1, [r3, #0]
 8006544:	709a      	strb	r2, [r3, #2]
            (*palette)[4]  = (sail_rgb24_t) { 0,   0,   128 };
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	2200      	movs	r2, #0
 8006552:	705a      	strb	r2, [r3, #1]
 8006554:	2280      	movs	r2, #128	; 0x80
 8006556:	709a      	strb	r2, [r3, #2]
            (*palette)[5]  = (sail_rgb24_t) { 128, 0,   128 };
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330f      	adds	r3, #15
 800655e:	4a35      	ldr	r2, [pc, #212]	; (8006634 <bmp_private_fill_system_palette+0x1f0>)
 8006560:	8811      	ldrh	r1, [r2, #0]
 8006562:	7892      	ldrb	r2, [r2, #2]
 8006564:	8019      	strh	r1, [r3, #0]
 8006566:	709a      	strb	r2, [r3, #2]
            (*palette)[6]  = (sail_rgb24_t) { 0,   128, 128 };
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3312      	adds	r3, #18
 800656e:	4a32      	ldr	r2, [pc, #200]	; (8006638 <bmp_private_fill_system_palette+0x1f4>)
 8006570:	8811      	ldrh	r1, [r2, #0]
 8006572:	7892      	ldrb	r2, [r2, #2]
 8006574:	8019      	strh	r1, [r3, #0]
 8006576:	709a      	strb	r2, [r3, #2]
            (*palette)[7]  = (sail_rgb24_t) { 192, 192, 192 };
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3315      	adds	r3, #21
 800657e:	4a2f      	ldr	r2, [pc, #188]	; (800663c <bmp_private_fill_system_palette+0x1f8>)
 8006580:	8811      	ldrh	r1, [r2, #0]
 8006582:	7892      	ldrb	r2, [r2, #2]
 8006584:	8019      	strh	r1, [r3, #0]
 8006586:	709a      	strb	r2, [r3, #2]
            (*palette)[8]  = (sail_rgb24_t) { 128, 128, 128 };
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3318      	adds	r3, #24
 800658e:	4a2c      	ldr	r2, [pc, #176]	; (8006640 <bmp_private_fill_system_palette+0x1fc>)
 8006590:	8811      	ldrh	r1, [r2, #0]
 8006592:	7892      	ldrb	r2, [r2, #2]
 8006594:	8019      	strh	r1, [r3, #0]
 8006596:	709a      	strb	r2, [r3, #2]
            (*palette)[9]  = (sail_rgb24_t) { 255, 0,   0   };
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	331b      	adds	r3, #27
 800659e:	22ff      	movs	r2, #255	; 0xff
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	705a      	strb	r2, [r3, #1]
 80065a6:	2200      	movs	r2, #0
 80065a8:	709a      	strb	r2, [r3, #2]
            (*palette)[10] = (sail_rgb24_t) { 0,   255, 0   };
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	331e      	adds	r3, #30
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	705a      	strb	r2, [r3, #1]
 80065b8:	2200      	movs	r2, #0
 80065ba:	709a      	strb	r2, [r3, #2]
            (*palette)[11] = (sail_rgb24_t) { 255, 255, 0   };
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3321      	adds	r3, #33	; 0x21
 80065c2:	4a20      	ldr	r2, [pc, #128]	; (8006644 <bmp_private_fill_system_palette+0x200>)
 80065c4:	8811      	ldrh	r1, [r2, #0]
 80065c6:	7892      	ldrb	r2, [r2, #2]
 80065c8:	8019      	strh	r1, [r3, #0]
 80065ca:	709a      	strb	r2, [r3, #2]
            (*palette)[12] = (sail_rgb24_t) { 0,   0,   255 };
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	705a      	strb	r2, [r3, #1]
 80065da:	22ff      	movs	r2, #255	; 0xff
 80065dc:	709a      	strb	r2, [r3, #2]
            (*palette)[13] = (sail_rgb24_t) { 255, 0,   255 };
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3327      	adds	r3, #39	; 0x27
 80065e4:	4a18      	ldr	r2, [pc, #96]	; (8006648 <bmp_private_fill_system_palette+0x204>)
 80065e6:	8811      	ldrh	r1, [r2, #0]
 80065e8:	7892      	ldrb	r2, [r2, #2]
 80065ea:	8019      	strh	r1, [r3, #0]
 80065ec:	709a      	strb	r2, [r3, #2]
            (*palette)[14] = (sail_rgb24_t) { 0,   255, 255 };
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	332a      	adds	r3, #42	; 0x2a
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <bmp_private_fill_system_palette+0x208>)
 80065f6:	8811      	ldrh	r1, [r2, #0]
 80065f8:	7892      	ldrb	r2, [r2, #2]
 80065fa:	8019      	strh	r1, [r3, #0]
 80065fc:	709a      	strb	r2, [r3, #2]
            (*palette)[15] = (sail_rgb24_t) { 255, 255, 255 };
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	332d      	adds	r3, #45	; 0x2d
 8006604:	4a09      	ldr	r2, [pc, #36]	; (800662c <bmp_private_fill_system_palette+0x1e8>)
 8006606:	8811      	ldrh	r1, [r2, #0]
 8006608:	7892      	ldrb	r2, [r2, #2]
 800660a:	8019      	strh	r1, [r3, #0]
 800660c:	709a      	strb	r2, [r3, #2]

            return SAIL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e008      	b.n	8006624 <bmp_private_fill_system_palette+0x1e0>
        }
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_BIT_DEPTH);
 8006612:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <bmp_private_fill_system_palette+0x20c>)
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <bmp_private_fill_system_palette+0x210>)
 8006618:	22e6      	movs	r2, #230	; 0xe6
 800661a:	490f      	ldr	r1, [pc, #60]	; (8006658 <bmp_private_fill_system_palette+0x214>)
 800661c:	2001      	movs	r0, #1
 800661e:	f005 f8e1 	bl	800b7e4 <sail_log>
 8006622:	23d2      	movs	r3, #210	; 0xd2
}
 8006624:	4618      	mov	r0, r3
 8006626:	3768      	adds	r7, #104	; 0x68
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	08013f4c 	.word	0x08013f4c
 8006630:	08013f50 	.word	0x08013f50
 8006634:	08013f54 	.word	0x08013f54
 8006638:	08013f58 	.word	0x08013f58
 800663c:	08013f5c 	.word	0x08013f5c
 8006640:	08013f60 	.word	0x08013f60
 8006644:	08013f64 	.word	0x08013f64
 8006648:	08013f68 	.word	0x08013f68
 800664c:	08013f6c 	.word	0x08013f6c
 8006650:	08013f08 	.word	0x08013f08
 8006654:	08013ea8 	.word	0x08013ea8
 8006658:	08013eac 	.word	0x08013eac

0800665c <alloc_codec>:

/*
 * Private functions.
 */

static sail_status_t alloc_codec(struct sail_codec **codec) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d011      	beq.n	8006698 <alloc_codec+0x3c>
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <alloc_codec+0x88>)
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <alloc_codec+0x8c>)
 800667a:	2232      	movs	r2, #50	; 0x32
 800667c:	491b      	ldr	r1, [pc, #108]	; (80066ec <alloc_codec+0x90>)
 800667e:	2001      	movs	r0, #1
 8006680:	f005 f8b0 	bl	800b7e4 <sail_log>
 8006684:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <alloc_codec+0x94>)
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <alloc_codec+0x98>)
 800668a:	2232      	movs	r2, #50	; 0x32
 800668c:	4917      	ldr	r1, [pc, #92]	; (80066ec <alloc_codec+0x90>)
 800668e:	2001      	movs	r0, #1
 8006690:	f005 f8a8 	bl	800b7e4 <sail_log>
 8006694:	2301      	movs	r3, #1
 8006696:	e021      	b.n	80066dc <alloc_codec+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec), &ptr));
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	4619      	mov	r1, r3
 800669e:	200c      	movs	r0, #12
 80066a0:	f005 f998 	bl	800b9d4 <sail_malloc>
 80066a4:	4603      	mov	r3, r0
 80066a6:	81fb      	strh	r3, [r7, #14]
 80066a8:	89fb      	ldrh	r3, [r7, #14]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf14      	ite	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	2300      	moveq	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <alloc_codec+0x60>
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	e00f      	b.n	80066dc <alloc_codec+0x80>
    *codec = ptr;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]

    (*codec)->layout = 0;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
    (*codec)->handle = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
    (*codec)->v7     = NULL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	08013fd0 	.word	0x08013fd0
 80066e8:	08013f70 	.word	0x08013f70
 80066ec:	08013f88 	.word	0x08013f88
 80066f0:	08013fdc 	.word	0x08013fdc
 80066f4:	08013fd8 	.word	0x08013fd8

080066f8 <load_combined_codec>:

#ifdef SAIL_COMBINE_CODECS
static sail_status_t load_combined_codec(const struct sail_codec_info *codec_info, struct sail_codec *codec) {
 80066f8:	b5b0      	push	{r4, r5, r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
    extern struct sail_codec_layout_v7 const sail_enabled_codecs_layouts[];
#else
    SAIL_IMPORT extern const char * const sail_enabled_codecs[];
    SAIL_IMPORT extern struct sail_codec_layout_v7 const sail_enabled_codecs_layouts[];
#endif
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e01f      	b.n	8006748 <load_combined_codec+0x50>
        if (strcmp(sail_enabled_codecs[i], codec_info->name) == 0) {
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <load_combined_codec+0x8c>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7f9 fee2 	bl	80004e0 <strcmp>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10f      	bne.n	8006742 <load_combined_codec+0x4a>
            *codec->v7 = sail_enabled_codecs_layouts[i];
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6899      	ldr	r1, [r3, #8]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <load_combined_codec+0x90>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	4413      	add	r3, r2
 800672e:	460c      	mov	r4, r1
 8006730:	461d      	mov	r5, r3
 8006732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006736:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800673a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            return SAIL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e01b      	b.n	800677a <load_combined_codec+0x82>
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	4a0e      	ldr	r2, [pc, #56]	; (8006784 <load_combined_codec+0x8c>)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1d9      	bne.n	8006708 <load_combined_codec+0x10>
        }
    }

    SAIL_LOG_ERROR("Failed to find combined %s codec", codec_info->name);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <load_combined_codec+0x94>)
 800675c:	2251      	movs	r2, #81	; 0x51
 800675e:	490c      	ldr	r1, [pc, #48]	; (8006790 <load_combined_codec+0x98>)
 8006760:	2001      	movs	r0, #1
 8006762:	f005 f83f 	bl	800b7e4 <sail_log>
    SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <load_combined_codec+0x9c>)
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <load_combined_codec+0xa0>)
 800676c:	2252      	movs	r2, #82	; 0x52
 800676e:	4908      	ldr	r1, [pc, #32]	; (8006790 <load_combined_codec+0x98>)
 8006770:	2001      	movs	r0, #1
 8006772:	f005 f837 	bl	800b7e4 <sail_log>
 8006776:	f240 132d 	movw	r3, #301	; 0x12d
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}
 8006782:	bf00      	nop
 8006784:	08016478 	.word	0x08016478
 8006788:	20000000 	.word	0x20000000
 800678c:	08013ff0 	.word	0x08013ff0
 8006790:	08013f88 	.word	0x08013f88
 8006794:	08014014 	.word	0x08014014
 8006798:	08013fd8 	.word	0x08013fd8

0800679c <load_codec_from_file>:
#endif

static sail_status_t load_codec_from_file(const struct sail_codec_info *codec_info, struct sail_codec *codec) {
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
    SAIL_RESOLVE(codec->v7->save_init,            handle, sail_codec_save_init_v7,            codec_info->name);
    SAIL_RESOLVE(codec->v7->save_seek_next_frame, handle, sail_codec_save_seek_next_frame_v7, codec_info->name);
    SAIL_RESOLVE(codec->v7->save_frame,           handle, sail_codec_save_frame_v7,           codec_info->name);
    SAIL_RESOLVE(codec->v7->save_finish,          handle, sail_codec_save_finish_v7,          codec_info->name);
# endif
    return SAIL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <alloc_and_load_codec>:

/*
 * Public functions.
 */

sail_status_t alloc_and_load_codec(const struct sail_codec_info *codec_info, struct sail_codec **codec) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08c      	sub	sp, #48	; 0x30
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d011      	beq.n	80067f2 <alloc_and_load_codec+0x3e>
 80067ce:	4b67      	ldr	r3, [pc, #412]	; (800696c <alloc_and_load_codec+0x1b8>)
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4b67      	ldr	r3, [pc, #412]	; (8006970 <alloc_and_load_codec+0x1bc>)
 80067d4:	229f      	movs	r2, #159	; 0x9f
 80067d6:	4967      	ldr	r1, [pc, #412]	; (8006974 <alloc_and_load_codec+0x1c0>)
 80067d8:	2001      	movs	r0, #1
 80067da:	f005 f803 	bl	800b7e4 <sail_log>
 80067de:	4b66      	ldr	r3, [pc, #408]	; (8006978 <alloc_and_load_codec+0x1c4>)
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4b66      	ldr	r3, [pc, #408]	; (800697c <alloc_and_load_codec+0x1c8>)
 80067e4:	229f      	movs	r2, #159	; 0x9f
 80067e6:	4963      	ldr	r1, [pc, #396]	; (8006974 <alloc_and_load_codec+0x1c0>)
 80067e8:	2001      	movs	r0, #1
 80067ea:	f004 fffb 	bl	800b7e4 <sail_log>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e0b8      	b.n	8006964 <alloc_and_load_codec+0x1b0>
    SAIL_CHECK_PTR(codec);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d011      	beq.n	8006826 <alloc_and_load_codec+0x72>
 8006802:	4b5f      	ldr	r3, [pc, #380]	; (8006980 <alloc_and_load_codec+0x1cc>)
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <alloc_and_load_codec+0x1bc>)
 8006808:	22a0      	movs	r2, #160	; 0xa0
 800680a:	495a      	ldr	r1, [pc, #360]	; (8006974 <alloc_and_load_codec+0x1c0>)
 800680c:	2001      	movs	r0, #1
 800680e:	f004 ffe9 	bl	800b7e4 <sail_log>
 8006812:	4b59      	ldr	r3, [pc, #356]	; (8006978 <alloc_and_load_codec+0x1c4>)
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4b59      	ldr	r3, [pc, #356]	; (800697c <alloc_and_load_codec+0x1c8>)
 8006818:	22a0      	movs	r2, #160	; 0xa0
 800681a:	4956      	ldr	r1, [pc, #344]	; (8006974 <alloc_and_load_codec+0x1c0>)
 800681c:	2001      	movs	r0, #1
 800681e:	f004 ffe1 	bl	800b7e4 <sail_log>
 8006822:	2301      	movs	r3, #1
 8006824:	e09e      	b.n	8006964 <alloc_and_load_codec+0x1b0>

    if (codec_info->layout != SAIL_CODEC_LAYOUT_V7) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b07      	cmp	r3, #7
 800682c:	d018      	beq.n	8006860 <alloc_and_load_codec+0xac>
        SAIL_LOG_ERROR("Failed to load %s codec with unsupported layout V%d (expected V%d)", codec_info->name, codec_info->layout, SAIL_CODEC_LAYOUT_V7);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6852      	ldr	r2, [r2, #4]
 8006836:	2107      	movs	r1, #7
 8006838:	9102      	str	r1, [sp, #8]
 800683a:	9201      	str	r2, [sp, #4]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4b51      	ldr	r3, [pc, #324]	; (8006984 <alloc_and_load_codec+0x1d0>)
 8006840:	22a3      	movs	r2, #163	; 0xa3
 8006842:	494c      	ldr	r1, [pc, #304]	; (8006974 <alloc_and_load_codec+0x1c0>)
 8006844:	2001      	movs	r0, #1
 8006846:	f004 ffcd 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_CODEC_LAYOUT);
 800684a:	4b4f      	ldr	r3, [pc, #316]	; (8006988 <alloc_and_load_codec+0x1d4>)
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	4b4b      	ldr	r3, [pc, #300]	; (800697c <alloc_and_load_codec+0x1c8>)
 8006850:	22a4      	movs	r2, #164	; 0xa4
 8006852:	4948      	ldr	r1, [pc, #288]	; (8006974 <alloc_and_load_codec+0x1c0>)
 8006854:	2001      	movs	r0, #1
 8006856:	f004 ffc5 	bl	800b7e4 <sail_log>
 800685a:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800685e:	e081      	b.n	8006964 <alloc_and_load_codec+0x1b0>
        SAIL_LOG_ERROR("Failed to load %s codec with empty path when SAIL_COMBINE_CODECS is disabled", codec_info->name);
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
    }
#endif

    const bool fetch_combined_codec = codec_info->path == NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf0c      	ite	eq
 8006868:	2301      	moveq	r3, #1
 800686a:	2300      	movne	r3, #0
 800686c:	77fb      	strb	r3, [r7, #31]

    struct sail_codec *codec_local;
    SAIL_TRY(alloc_codec(&codec_local));
 800686e:	f107 0310 	add.w	r3, r7, #16
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fef2 	bl	800665c <alloc_codec>
 8006878:	4603      	mov	r3, r0
 800687a:	83bb      	strh	r3, [r7, #28]
 800687c:	8bbb      	ldrh	r3, [r7, #28]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2301      	movne	r3, #1
 8006884:	2300      	moveq	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <alloc_and_load_codec+0xdc>
 800688c:	8bbb      	ldrh	r3, [r7, #28]
 800688e:	e069      	b.n	8006964 <alloc_and_load_codec+0x1b0>
    codec_local->layout = codec_info->layout;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6852      	ldr	r2, [r2, #4]
 8006896:	601a      	str	r2, [r3, #0]

    if (fetch_combined_codec) {
 8006898:	7ffb      	ldrb	r3, [r7, #31]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <alloc_and_load_codec+0x104>
        SAIL_LOG_DEBUG("Fetching V%d functions for %s codec", codec_info->layout, codec_info->name);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6912      	ldr	r2, [r2, #16]
 80068a6:	9201      	str	r2, [sp, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4b38      	ldr	r3, [pc, #224]	; (800698c <alloc_and_load_codec+0x1d8>)
 80068ac:	22bb      	movs	r2, #187	; 0xbb
 80068ae:	4931      	ldr	r1, [pc, #196]	; (8006974 <alloc_and_load_codec+0x1c0>)
 80068b0:	2005      	movs	r0, #5
 80068b2:	f004 ff97 	bl	800b7e4 <sail_log>
 80068b6:	e00b      	b.n	80068d0 <alloc_and_load_codec+0x11c>
    } else {
        SAIL_LOG_DEBUG("Loading %s codec from %s", codec_info->name, codec_info->path);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	9201      	str	r2, [sp, #4]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4b32      	ldr	r3, [pc, #200]	; (8006990 <alloc_and_load_codec+0x1dc>)
 80068c6:	22bd      	movs	r2, #189	; 0xbd
 80068c8:	492a      	ldr	r1, [pc, #168]	; (8006974 <alloc_and_load_codec+0x1c0>)
 80068ca:	2005      	movs	r0, #5
 80068cc:	f004 ff8a 	bl	800b7e4 <sail_log>
    }

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct sail_codec_layout_v7), &ptr),
 80068d0:	f107 030c 	add.w	r3, r7, #12
 80068d4:	4619      	mov	r1, r3
 80068d6:	2020      	movs	r0, #32
 80068d8:	f005 f87c 	bl	800b9d4 <sail_malloc>
 80068dc:	4603      	mov	r3, r0
 80068de:	837b      	strh	r3, [r7, #26]
 80068e0:	8b7b      	ldrh	r3, [r7, #26]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <alloc_and_load_codec+0x148>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f84e 	bl	8006994 <destroy_codec>
 80068f8:	8b7b      	ldrh	r3, [r7, #26]
 80068fa:	e033      	b.n	8006964 <alloc_and_load_codec+0x1b0>
                        /* cleanup */ destroy_codec(codec_local));
    codec_local->v7 = ptr;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]

#ifdef SAIL_COMBINE_CODECS
    if (fetch_combined_codec) {
 8006902:	7ffb      	ldrb	r3, [r7, #31]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d014      	beq.n	8006932 <alloc_and_load_codec+0x17e>
        SAIL_TRY_OR_CLEANUP(load_combined_codec(codec_info, codec_local),
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fef3 	bl	80066f8 <load_combined_codec>
 8006912:	4603      	mov	r3, r0
 8006914:	82fb      	strh	r3, [r7, #22]
 8006916:	8afb      	ldrh	r3, [r7, #22]
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01a      	beq.n	800695c <alloc_and_load_codec+0x1a8>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 f833 	bl	8006994 <destroy_codec>
 800692e:	8afb      	ldrh	r3, [r7, #22]
 8006930:	e018      	b.n	8006964 <alloc_and_load_codec+0x1b0>
                            /* cleanup */ destroy_codec(codec_local));
    } else {
        SAIL_TRY_OR_CLEANUP(load_codec_from_file(codec_info, codec_local),
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff30 	bl	800679c <load_codec_from_file>
 800693c:	4603      	mov	r3, r0
 800693e:	833b      	strh	r3, [r7, #24]
 8006940:	8b3b      	ldrh	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	bf14      	ite	ne
 8006946:	2301      	movne	r3, #1
 8006948:	2300      	moveq	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <alloc_and_load_codec+0x1a8>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 f81e 	bl	8006994 <destroy_codec>
 8006958:	8b3b      	ldrh	r3, [r7, #24]
 800695a:	e003      	b.n	8006964 <alloc_and_load_codec+0x1b0>
#else
    SAIL_TRY_OR_CLEANUP(load_codec_from_file(codec_info, codec_local),
                        /* cleanup */ destroy_codec(codec_local));
#endif

    *codec = codec_local;
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	08014030 	.word	0x08014030
 8006970:	08013f70 	.word	0x08013f70
 8006974:	08013f88 	.word	0x08013f88
 8006978:	08013fdc 	.word	0x08013fdc
 800697c:	08013fd8 	.word	0x08013fd8
 8006980:	08013fd0 	.word	0x08013fd0
 8006984:	0801403c 	.word	0x0801403c
 8006988:	08014080 	.word	0x08014080
 800698c:	080140a4 	.word	0x080140a4
 8006990:	080140c8 	.word	0x080140c8

08006994 <destroy_codec>:

void destroy_codec(struct sail_codec *codec) {
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
    }

    sail_free(codec->v7);
    sail_free(codec);
#endif
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <alloc_codec_bundle_node>:
    SOFTWARE.
*/

#include "sail.h"

sail_status_t alloc_codec_bundle_node(struct sail_codec_bundle_node **codec_bundle_node) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

    SAIL_TRY(sail_private_alloc_linked_list_node((struct linked_list_node **)codec_bundle_node));
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f004 fbfd 	bl	800b1b0 <sail_private_alloc_linked_list_node>
 80069b6:	4603      	mov	r3, r0
 80069b8:	81fb      	strh	r3, [r7, #14]
 80069ba:	89fb      	ldrh	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <alloc_codec_bundle_node+0x26>
 80069ca:	89fb      	ldrh	r3, [r7, #14]
 80069cc:	e000      	b.n	80069d0 <alloc_codec_bundle_node+0x28>

    return SAIL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <destroy_codec_bundle_node>:

void destroy_codec_bundle_node(struct sail_codec_bundle_node *codec_bundle_node) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node((struct linked_list_node *)codec_bundle_node,
 80069e0:	4903      	ldr	r1, [pc, #12]	; (80069f0 <destroy_codec_bundle_node+0x18>)
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f004 fc2e 	bl	800b244 <sail_private_destroy_linked_list_node>
                                          (linked_list_value_deallocator_t)&destroy_codec_bundle);
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	08006a89 	.word	0x08006a89

080069f4 <alloc_codec_bundle>:
    SOFTWARE.
*/

#include "sail.h"

sail_status_t alloc_codec_bundle(struct sail_codec_bundle **codec_bundle) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec_bundle);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <alloc_codec_bundle+0x3c>
 8006a0c:	4b19      	ldr	r3, [pc, #100]	; (8006a74 <alloc_codec_bundle+0x80>)
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <alloc_codec_bundle+0x84>)
 8006a12:	221e      	movs	r2, #30
 8006a14:	4919      	ldr	r1, [pc, #100]	; (8006a7c <alloc_codec_bundle+0x88>)
 8006a16:	2001      	movs	r0, #1
 8006a18:	f004 fee4 	bl	800b7e4 <sail_log>
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <alloc_codec_bundle+0x8c>)
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <alloc_codec_bundle+0x90>)
 8006a22:	221e      	movs	r2, #30
 8006a24:	4915      	ldr	r1, [pc, #84]	; (8006a7c <alloc_codec_bundle+0x88>)
 8006a26:	2001      	movs	r0, #1
 8006a28:	f004 fedc 	bl	800b7e4 <sail_log>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e01d      	b.n	8006a6c <alloc_codec_bundle+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_bundle), &ptr));
 8006a30:	f107 0308 	add.w	r3, r7, #8
 8006a34:	4619      	mov	r1, r3
 8006a36:	2008      	movs	r0, #8
 8006a38:	f004 ffcc 	bl	800b9d4 <sail_malloc>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	81fb      	strh	r3, [r7, #14]
 8006a40:	89fb      	ldrh	r3, [r7, #14]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf14      	ite	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	2300      	moveq	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <alloc_codec_bundle+0x60>
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	e00b      	b.n	8006a6c <alloc_codec_bundle+0x78>
    *codec_bundle = ptr;
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]

    (*codec_bundle)->codec_info = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
    (*codec_bundle)->codec      = NULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	08014154 	.word	0x08014154
 8006a78:	080140e4 	.word	0x080140e4
 8006a7c:	080140fc 	.word	0x080140fc
 8006a80:	08014168 	.word	0x08014168
 8006a84:	08014164 	.word	0x08014164

08006a88 <destroy_codec_bundle>:

void destroy_codec_bundle(struct sail_codec_bundle *codec_bundle) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]

    if (codec_bundle == NULL) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00d      	beq.n	8006ab2 <destroy_codec_bundle+0x2a>
        return;
    }

    destroy_codec_info(codec_bundle->codec_info);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 faa8 	bl	8007ff0 <destroy_codec_info>
    destroy_codec(codec_bundle->codec);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff75 	bl	8006994 <destroy_codec>

    sail_free(codec_bundle);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f005 f81a 	bl	800bae4 <sail_free>
 8006ab0:	e000      	b.n	8006ab4 <destroy_codec_bundle+0x2c>
        return;
 8006ab2:	bf00      	nop
}
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <sail_codec_info_by_magic_number_from_memory>:
    sail_destroy_io(io);

    return SAIL_OK;
}

sail_status_t sail_codec_info_by_magic_number_from_memory(const unsigned char *bmp_buffer[], size_t buffer_length, const struct sail_codec_info **codec_info) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(bmp_buffer);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d011      	beq.n	8006afc <sail_codec_info_by_magic_number_from_memory+0x40>
 8006ad8:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <sail_codec_info_by_magic_number_from_memory+0xd8>)
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <sail_codec_info_by_magic_number_from_memory+0xdc>)
 8006ade:	225d      	movs	r2, #93	; 0x5d
 8006ae0:	492e      	ldr	r1, [pc, #184]	; (8006b9c <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f004 fe7e 	bl	800b7e4 <sail_log>
 8006ae8:	4b2d      	ldr	r3, [pc, #180]	; (8006ba0 <sail_codec_info_by_magic_number_from_memory+0xe4>)
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	4b2d      	ldr	r3, [pc, #180]	; (8006ba4 <sail_codec_info_by_magic_number_from_memory+0xe8>)
 8006aee:	225d      	movs	r2, #93	; 0x5d
 8006af0:	492a      	ldr	r1, [pc, #168]	; (8006b9c <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8006af2:	2001      	movs	r0, #1
 8006af4:	f004 fe76 	bl	800b7e4 <sail_log>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e046      	b.n	8006b8a <sail_codec_info_by_magic_number_from_memory+0xce>
    SAIL_CHECK_PTR(codec_info);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d011      	beq.n	8006b30 <sail_codec_info_by_magic_number_from_memory+0x74>
 8006b0c:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <sail_codec_info_by_magic_number_from_memory+0xec>)
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <sail_codec_info_by_magic_number_from_memory+0xdc>)
 8006b12:	225e      	movs	r2, #94	; 0x5e
 8006b14:	4921      	ldr	r1, [pc, #132]	; (8006b9c <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8006b16:	2001      	movs	r0, #1
 8006b18:	f004 fe64 	bl	800b7e4 <sail_log>
 8006b1c:	4b20      	ldr	r3, [pc, #128]	; (8006ba0 <sail_codec_info_by_magic_number_from_memory+0xe4>)
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <sail_codec_info_by_magic_number_from_memory+0xe8>)
 8006b22:	225e      	movs	r2, #94	; 0x5e
 8006b24:	491d      	ldr	r1, [pc, #116]	; (8006b9c <sail_codec_info_by_magic_number_from_memory+0xe0>)
 8006b26:	2001      	movs	r0, #1
 8006b28:	f004 fe5c 	bl	800b7e4 <sail_log>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e02c      	b.n	8006b8a <sail_codec_info_by_magic_number_from_memory+0xce>

    struct sail_io *io;
    SAIL_TRY(sail_alloc_io_read_memory(bmp_buffer, buffer_length, &io));
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	461a      	mov	r2, r3
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f004 fa25 	bl	800af88 <sail_alloc_io_read_memory>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	82fb      	strh	r3, [r7, #22]
 8006b42:	8afb      	ldrh	r3, [r7, #22]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <sail_codec_info_by_magic_number_from_memory+0x9a>
 8006b52:	8afb      	ldrh	r3, [r7, #22]
 8006b54:	e019      	b.n	8006b8a <sail_codec_info_by_magic_number_from_memory+0xce>

    SAIL_TRY_OR_CLEANUP(sail_codec_info_by_magic_number_from_io(io, codec_info),
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f826 	bl	8006bac <sail_codec_info_by_magic_number_from_io>
 8006b60:	4603      	mov	r3, r0
 8006b62:	82bb      	strh	r3, [r7, #20]
 8006b64:	8abb      	ldrh	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <sail_codec_info_by_magic_number_from_memory+0xc4>
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f003 ff58 	bl	800aa2c <sail_destroy_io>
 8006b7c:	8abb      	ldrh	r3, [r7, #20]
 8006b7e:	e004      	b.n	8006b8a <sail_codec_info_by_magic_number_from_memory+0xce>
                        /* cleanup */ sail_destroy_io(io));

    sail_destroy_io(io);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f003 ff52 	bl	800aa2c <sail_destroy_io>

    return SAIL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	0801426c 	.word	0x0801426c
 8006b98:	0801417c 	.word	0x0801417c
 8006b9c:	08014194 	.word	0x08014194
 8006ba0:	080141f0 	.word	0x080141f0
 8006ba4:	080141ec 	.word	0x080141ec
 8006ba8:	08014204 	.word	0x08014204

08006bac <sail_codec_info_by_magic_number_from_io>:

sail_status_t sail_codec_info_by_magic_number_from_io(struct sail_io *io, const struct sail_codec_info **codec_info) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b0a4      	sub	sp, #144	; 0x90
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d011      	beq.n	8006bea <sail_codec_info_by_magic_number_from_io+0x3e>
 8006bc6:	4b9c      	ldr	r3, [pc, #624]	; (8006e38 <sail_codec_info_by_magic_number_from_io+0x28c>)
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	4b9c      	ldr	r3, [pc, #624]	; (8006e3c <sail_codec_info_by_magic_number_from_io+0x290>)
 8006bcc:	226d      	movs	r2, #109	; 0x6d
 8006bce:	499c      	ldr	r1, [pc, #624]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f004 fe07 	bl	800b7e4 <sail_log>
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	; (8006e44 <sail_codec_info_by_magic_number_from_io+0x298>)
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	4b9b      	ldr	r3, [pc, #620]	; (8006e48 <sail_codec_info_by_magic_number_from_io+0x29c>)
 8006bdc:	226d      	movs	r2, #109	; 0x6d
 8006bde:	4998      	ldr	r1, [pc, #608]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006be0:	2001      	movs	r0, #1
 8006be2:	f004 fdff 	bl	800b7e4 <sail_log>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e160      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>
    SAIL_CHECK_PTR(codec_info);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <sail_codec_info_by_magic_number_from_io+0x72>
 8006bfa:	4b94      	ldr	r3, [pc, #592]	; (8006e4c <sail_codec_info_by_magic_number_from_io+0x2a0>)
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	4b8f      	ldr	r3, [pc, #572]	; (8006e3c <sail_codec_info_by_magic_number_from_io+0x290>)
 8006c00:	226e      	movs	r2, #110	; 0x6e
 8006c02:	498f      	ldr	r1, [pc, #572]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006c04:	2001      	movs	r0, #1
 8006c06:	f004 fded 	bl	800b7e4 <sail_log>
 8006c0a:	4b8e      	ldr	r3, [pc, #568]	; (8006e44 <sail_codec_info_by_magic_number_from_io+0x298>)
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	4b8e      	ldr	r3, [pc, #568]	; (8006e48 <sail_codec_info_by_magic_number_from_io+0x29c>)
 8006c10:	226e      	movs	r2, #110	; 0x6e
 8006c12:	498b      	ldr	r1, [pc, #556]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006c14:	2001      	movs	r0, #1
 8006c16:	f004 fde5 	bl	800b7e4 <sail_log>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e146      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>

    struct sail_context *context;
    SAIL_TRY(fetch_global_context_guarded(&context));
 8006c1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006c22:	4618      	mov	r0, r3
 8006c24:	f002 fff0 	bl	8009c08 <fetch_global_context_guarded>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006c2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <sail_codec_info_by_magic_number_from_io+0x9a>
 8006c40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c44:	e132      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>

    size_t saved_offset;
    SAIL_TRY(io->tell(io->stream, &saved_offset));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	68d2      	ldr	r2, [r2, #12]
 8006c4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006c52:	4610      	mov	r0, r2
 8006c54:	4798      	blx	r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006c5c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bf14      	ite	ne
 8006c64:	2301      	movne	r3, #1
 8006c66:	2300      	moveq	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <sail_codec_info_by_magic_number_from_io+0xc8>
 8006c6e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c72:	e11b      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>

    /* Read the image magic. */
    unsigned char buffer[SAIL_MAGIC_BUFFER_SIZE];
    SAIL_TRY(io->strict_read(io->stream, buffer, sizeof(buffer)));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	68d0      	ldr	r0, [r2, #12]
 8006c7c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006c80:	2210      	movs	r2, #16
 8006c82:	4798      	blx	r3
 8006c84:	4603      	mov	r3, r0
 8006c86:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006c8a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bf14      	ite	ne
 8006c92:	2301      	movne	r3, #1
 8006c94:	2300      	moveq	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <sail_codec_info_by_magic_number_from_io+0xf6>
 8006c9c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006ca0:	e104      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>

    /* Seek back. */
    SAIL_TRY(io->seek(io->stream, (long)saved_offset, SEEK_SET));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68d0      	ldr	r0, [r2, #12]
 8006caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cac:	4611      	mov	r1, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4798      	blx	r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <sail_codec_info_by_magic_number_from_io+0x124>
 8006cca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006cce:	e0ed      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>
    /* \xFF\xDD => "FF DD" + string terminator. */
    char hex_numbers[sizeof(buffer) * 3 + 1];

    /* Debug print. */
    {
        char *hex_numbers_ptr = hex_numbers;
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        for (size_t i = 0; i < sizeof(buffer); i++, hex_numbers_ptr += 3) {
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cde:	e015      	b.n	8006d0c <sail_codec_info_by_magic_number_from_io+0x160>
#ifdef _MSC_VER
            sprintf_s(hex_numbers_ptr, 4, "%02x ", buffer[i]);
#else
            sprintf(hex_numbers_ptr, "%02x ", buffer[i]);
 8006ce0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	4958      	ldr	r1, [pc, #352]	; (8006e50 <sail_codec_info_by_magic_number_from_io+0x2a4>)
 8006cf0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006cf4:	f009 fcf2 	bl	80106dc <siprintf>
        for (size_t i = 0; i < sizeof(buffer); i++, hex_numbers_ptr += 3) {
 8006cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d06:	3303      	adds	r3, #3
 8006d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d10:	2b0f      	cmp	r3, #15
 8006d12:	d9e5      	bls.n	8006ce0 <sail_codec_info_by_magic_number_from_io+0x134>
#endif
        }

        *(hex_numbers_ptr-1) = '\0';
 8006d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
        SAIL_LOG_DEBUG("Read magic number: '%s'", hex_numbers);
 8006d1e:	f107 0314 	add.w	r3, r7, #20
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <sail_codec_info_by_magic_number_from_io+0x2a8>)
 8006d26:	228d      	movs	r2, #141	; 0x8d
 8006d28:	4945      	ldr	r1, [pc, #276]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006d2a:	2005      	movs	r0, #5
 8006d2c:	f004 fd5a 	bl	800b7e4 <sail_log>
    }

    /* Find the codec info. */
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 8006d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d36:	e0a2      	b.n	8006e7e <sail_codec_info_by_magic_number_from_io+0x2d2>
        const struct sail_codec_bundle *codec_bundle = codec_bundle_node->codec_bundle;
 8006d38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	663b      	str	r3, [r7, #96]	; 0x60
        const struct sail_string_node *magic_number_node = codec_bundle->codec_info->magic_number_node;
 8006d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	67bb      	str	r3, [r7, #120]	; 0x78
        /*
         * Split "ab cd" into bytes and compare individual bytes against the read magic number.
         * Additionally, we support "??" pattern matching any byte. For example, "?? ?? 66 74"
         * matches both "00 20 66 74" and "20 30 66 74".
         */
        while (magic_number_node != NULL) {
 8006d46:	e093      	b.n	8006e70 <sail_codec_info_by_magic_number_from_io+0x2c4>
            size_t buffer_index = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	677b      	str	r3, [r7, #116]	; 0x74
            const char *magic = magic_number_node->string;
 8006d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	673b      	str	r3, [r7, #112]	; 0x70
            char hex_byte[3];
            int bytes_consumed = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
            bool mismatch = false;
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            SAIL_LOG_TRACE("Check against %s magic '%s'", codec_bundle->codec_info->name, magic);
 8006d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d64:	9201      	str	r2, [sp, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4b3b      	ldr	r3, [pc, #236]	; (8006e58 <sail_codec_info_by_magic_number_from_io+0x2ac>)
 8006d6a:	22a1      	movs	r2, #161	; 0xa1
 8006d6c:	4934      	ldr	r1, [pc, #208]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006d6e:	2006      	movs	r0, #6
 8006d70:	f004 fd38 	bl	800b7e4 <sail_log>

#ifdef _MSC_VER
            while (buffer_index < sizeof(buffer) && sscanf_s(magic, "%2s%n", hex_byte, (unsigned)sizeof(hex_byte), &bytes_consumed) == 1) {
#else
            while (buffer_index < sizeof(buffer) && sscanf(magic, "%2s%n", hex_byte, &bytes_consumed) == 1) {
 8006d74:	e03a      	b.n	8006dec <sail_codec_info_by_magic_number_from_io+0x240>
#endif
                if (hex_byte[0] == '?') {
 8006d76:	7c3b      	ldrb	r3, [r7, #16]
 8006d78:	2b3f      	cmp	r3, #63	; 0x3f
 8006d7a:	d106      	bne.n	8006d8a <sail_codec_info_by_magic_number_from_io+0x1de>
                    SAIL_LOG_TRACE("Skipping ? character");
 8006d7c:	4b37      	ldr	r3, [pc, #220]	; (8006e5c <sail_codec_info_by_magic_number_from_io+0x2b0>)
 8006d7e:	22a9      	movs	r2, #169	; 0xa9
 8006d80:	492f      	ldr	r1, [pc, #188]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006d82:	2006      	movs	r0, #6
 8006d84:	f004 fd2e 	bl	800b7e4 <sail_log>
 8006d88:	e028      	b.n	8006ddc <sail_codec_info_by_magic_number_from_io+0x230>
                } else {
                    unsigned byte = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]

#ifdef _MSC_VER
                    if (sscanf_s(hex_byte, "%02x", &byte) != 1 || byte != buffer[buffer_index]) {
#else
                    if (sscanf(hex_byte, "%02x", &byte) != 1 || byte != buffer[buffer_index]) {
 8006d8e:	f107 0208 	add.w	r2, r7, #8
 8006d92:	f107 0310 	add.w	r3, r7, #16
 8006d96:	4932      	ldr	r1, [pc, #200]	; (8006e60 <sail_codec_info_by_magic_number_from_io+0x2b4>)
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f009 fcbf 	bl	801071c <siscanf>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d108      	bne.n	8006db6 <sail_codec_info_by_magic_number_from_io+0x20a>
 8006da4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006daa:	4413      	add	r3, r2
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d012      	beq.n	8006ddc <sail_codec_info_by_magic_number_from_io+0x230>
#endif
                        SAIL_LOG_TRACE("Character mismatch %02x != %02x", buffer[buffer_index], byte);
 8006db6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dbc:	4413      	add	r3, r2
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	9200      	str	r2, [sp, #0]
 8006dc8:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <sail_codec_info_by_magic_number_from_io+0x2b8>)
 8006dca:	22b2      	movs	r2, #178	; 0xb2
 8006dcc:	491c      	ldr	r1, [pc, #112]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006dce:	2006      	movs	r0, #6
 8006dd0:	f004 fd08 	bl	800b7e4 <sail_log>
                        mismatch = true;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006dda:	e015      	b.n	8006e08 <sail_codec_info_by_magic_number_from_io+0x25c>
                        break;
                    }
                }

                magic += bytes_consumed;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de2:	4413      	add	r3, r2
 8006de4:	673b      	str	r3, [r7, #112]	; 0x70
                buffer_index++;
 8006de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de8:	3301      	adds	r3, #1
 8006dea:	677b      	str	r3, [r7, #116]	; 0x74
            while (buffer_index < sizeof(buffer) && sscanf(magic, "%2s%n", hex_byte, &bytes_consumed) == 1) {
 8006dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d80a      	bhi.n	8006e08 <sail_codec_info_by_magic_number_from_io+0x25c>
 8006df2:	f107 030c 	add.w	r3, r7, #12
 8006df6:	f107 0210 	add.w	r2, r7, #16
 8006dfa:	491b      	ldr	r1, [pc, #108]	; (8006e68 <sail_codec_info_by_magic_number_from_io+0x2bc>)
 8006dfc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006dfe:	f009 fc8d 	bl	801071c <siscanf>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d0b6      	beq.n	8006d76 <sail_codec_info_by_magic_number_from_io+0x1ca>
            }

            if (mismatch) {
 8006e08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <sail_codec_info_by_magic_number_from_io+0x26c>
                magic_number_node = magic_number_node->next;
 8006e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e16:	e02b      	b.n	8006e70 <sail_codec_info_by_magic_number_from_io+0x2c4>
            } else {
                *codec_info = codec_bundle->codec_info;
 8006e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	601a      	str	r2, [r3, #0]
                SAIL_LOG_DEBUG("Found codec info: %s", (*codec_info)->name);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <sail_codec_info_by_magic_number_from_io+0x2c0>)
 8006e2a:	22c0      	movs	r2, #192	; 0xc0
 8006e2c:	4904      	ldr	r1, [pc, #16]	; (8006e40 <sail_codec_info_by_magic_number_from_io+0x294>)
 8006e2e:	2005      	movs	r0, #5
 8006e30:	f004 fcd8 	bl	800b7e4 <sail_log>
                return SAIL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e039      	b.n	8006eac <sail_codec_info_by_magic_number_from_io+0x300>
 8006e38:	08014278 	.word	0x08014278
 8006e3c:	0801417c 	.word	0x0801417c
 8006e40:	08014194 	.word	0x08014194
 8006e44:	080141f0 	.word	0x080141f0
 8006e48:	080141ec 	.word	0x080141ec
 8006e4c:	08014204 	.word	0x08014204
 8006e50:	0801427c 	.word	0x0801427c
 8006e54:	08014284 	.word	0x08014284
 8006e58:	0801429c 	.word	0x0801429c
 8006e5c:	080142b8 	.word	0x080142b8
 8006e60:	080142d0 	.word	0x080142d0
 8006e64:	080142d8 	.word	0x080142d8
 8006e68:	080142f8 	.word	0x080142f8
 8006e6c:	08014300 	.word	0x08014300
        while (magic_number_node != NULL) {
 8006e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f47f af68 	bne.w	8006d48 <sail_codec_info_by_magic_number_from_io+0x19c>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 8006e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f af59 	bne.w	8006d38 <sail_codec_info_by_magic_number_from_io+0x18c>
            }
        }
    }

    SAIL_LOG_ERROR("Magic number '%s' is not supported by any codec", hex_numbers);
 8006e86:	f107 0314 	add.w	r3, r7, #20
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <sail_codec_info_by_magic_number_from_io+0x308>)
 8006e8e:	22c6      	movs	r2, #198	; 0xc6
 8006e90:	4909      	ldr	r1, [pc, #36]	; (8006eb8 <sail_codec_info_by_magic_number_from_io+0x30c>)
 8006e92:	2001      	movs	r0, #1
 8006e94:	f004 fca6 	bl	800b7e4 <sail_log>
    SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <sail_codec_info_by_magic_number_from_io+0x310>)
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <sail_codec_info_by_magic_number_from_io+0x314>)
 8006e9e:	22c7      	movs	r2, #199	; 0xc7
 8006ea0:	4905      	ldr	r1, [pc, #20]	; (8006eb8 <sail_codec_info_by_magic_number_from_io+0x30c>)
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	f004 fc9e 	bl	800b7e4 <sail_log>
 8006ea8:	f240 132d 	movw	r3, #301	; 0x12d
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3788      	adds	r7, #136	; 0x88
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	08014318 	.word	0x08014318
 8006eb8:	08014194 	.word	0x08014194
 8006ebc:	08014348 	.word	0x08014348
 8006ec0:	080141ec 	.word	0x080141ec

08006ec4 <pixel_format_from_string>:

/*
 * Private functions.
 */

static int pixel_format_from_string(const char *str) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

    return sail_pixel_format_from_string(str);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f92d 	bl	800812c <sail_pixel_format_from_string>
 8006ed2:	4603      	mov	r3, r0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <compression_from_string>:

static int compression_from_string(const char *str) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]

    return sail_compression_from_string(str);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 ff21 	bl	8008d2c <sail_compression_from_string>
 8006eea:	4603      	mov	r3, r0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <parse_serialized_ints>:

static sail_status_t parse_serialized_ints(const char *value, int **target, unsigned *length, int (*converter)(const char *str)) {
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b08d      	sub	sp, #52	; 0x34
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(value);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <parse_serialized_ints+0x42>
 8006f12:	4b55      	ldr	r3, [pc, #340]	; (8007068 <parse_serialized_ints+0x174>)
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4b55      	ldr	r3, [pc, #340]	; (800706c <parse_serialized_ints+0x178>)
 8006f18:	2231      	movs	r2, #49	; 0x31
 8006f1a:	4955      	ldr	r1, [pc, #340]	; (8007070 <parse_serialized_ints+0x17c>)
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f004 fc61 	bl	800b7e4 <sail_log>
 8006f22:	4b54      	ldr	r3, [pc, #336]	; (8007074 <parse_serialized_ints+0x180>)
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	4b54      	ldr	r3, [pc, #336]	; (8007078 <parse_serialized_ints+0x184>)
 8006f28:	2231      	movs	r2, #49	; 0x31
 8006f2a:	4951      	ldr	r1, [pc, #324]	; (8007070 <parse_serialized_ints+0x17c>)
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	f004 fc59 	bl	800b7e4 <sail_log>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e093      	b.n	800705e <parse_serialized_ints+0x16a>
    SAIL_CHECK_PTR(target);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bf0c      	ite	eq
 8006f3c:	2301      	moveq	r3, #1
 8006f3e:	2300      	movne	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d011      	beq.n	8006f6a <parse_serialized_ints+0x76>
 8006f46:	4b4d      	ldr	r3, [pc, #308]	; (800707c <parse_serialized_ints+0x188>)
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4b48      	ldr	r3, [pc, #288]	; (800706c <parse_serialized_ints+0x178>)
 8006f4c:	2232      	movs	r2, #50	; 0x32
 8006f4e:	4948      	ldr	r1, [pc, #288]	; (8007070 <parse_serialized_ints+0x17c>)
 8006f50:	2001      	movs	r0, #1
 8006f52:	f004 fc47 	bl	800b7e4 <sail_log>
 8006f56:	4b47      	ldr	r3, [pc, #284]	; (8007074 <parse_serialized_ints+0x180>)
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4b47      	ldr	r3, [pc, #284]	; (8007078 <parse_serialized_ints+0x184>)
 8006f5c:	2232      	movs	r2, #50	; 0x32
 8006f5e:	4944      	ldr	r1, [pc, #272]	; (8007070 <parse_serialized_ints+0x17c>)
 8006f60:	2001      	movs	r0, #1
 8006f62:	f004 fc3f 	bl	800b7e4 <sail_log>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e079      	b.n	800705e <parse_serialized_ints+0x16a>
    SAIL_CHECK_PTR(length);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d011      	beq.n	8006f9e <parse_serialized_ints+0xaa>
 8006f7a:	4b41      	ldr	r3, [pc, #260]	; (8007080 <parse_serialized_ints+0x18c>)
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	4b3b      	ldr	r3, [pc, #236]	; (800706c <parse_serialized_ints+0x178>)
 8006f80:	2233      	movs	r2, #51	; 0x33
 8006f82:	493b      	ldr	r1, [pc, #236]	; (8007070 <parse_serialized_ints+0x17c>)
 8006f84:	2001      	movs	r0, #1
 8006f86:	f004 fc2d 	bl	800b7e4 <sail_log>
 8006f8a:	4b3a      	ldr	r3, [pc, #232]	; (8007074 <parse_serialized_ints+0x180>)
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <parse_serialized_ints+0x184>)
 8006f90:	2233      	movs	r2, #51	; 0x33
 8006f92:	4937      	ldr	r1, [pc, #220]	; (8007070 <parse_serialized_ints+0x17c>)
 8006f94:	2001      	movs	r0, #1
 8006f96:	f004 fc25 	bl	800b7e4 <sail_log>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e05f      	b.n	800705e <parse_serialized_ints+0x16a>

    struct sail_string_node *string_node;
    SAIL_TRY(sail_split_into_string_node_chain(value, &string_node));
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f005 fdfd 	bl	800cba4 <sail_split_into_string_node_chain>
 8006faa:	4603      	mov	r3, r0
 8006fac:	837b      	strh	r3, [r7, #26]
 8006fae:	8b7b      	ldrh	r3, [r7, #26]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <parse_serialized_ints+0xce>
 8006fbe:	8b7b      	ldrh	r3, [r7, #26]
 8006fc0:	e04d      	b.n	800705e <parse_serialized_ints+0x16a>

    *length = 0;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]

    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
 8006fcc:	e007      	b.n	8006fde <parse_serialized_ints+0xea>
        (*length)++;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f4      	bne.n	8006fce <parse_serialized_ints+0xda>
    }

    if (*length > 0) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d033      	beq.n	8007054 <parse_serialized_ints+0x160>
        void *ptr;
        SAIL_TRY_OR_CLEANUP(sail_malloc((size_t)*length * sizeof(int), &ptr),
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	f107 0210 	add.w	r2, r7, #16
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f004 fceb 	bl	800b9d4 <sail_malloc>
 8006ffe:	4603      	mov	r3, r0
 8007000:	833b      	strh	r3, [r7, #24]
 8007002:	8b3b      	ldrh	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <parse_serialized_ints+0x12a>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	4618      	mov	r0, r3
 8007016:	f005 fdb7 	bl	800cb88 <sail_destroy_string_node_chain>
 800701a:	8b3b      	ldrh	r3, [r7, #24]
 800701c:	e01f      	b.n	800705e <parse_serialized_ints+0x16a>
                            /* cleanup */ sail_destroy_string_node_chain(string_node));
        *target = ptr;
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	601a      	str	r2, [r3, #0]

        int i = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	623b      	str	r3, [r7, #32]

        for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	e00f      	b.n	800704e <parse_serialized_ints+0x15a>
            *(*target + i++) = converter(node->string);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	1c59      	adds	r1, r3, #1
 800703a:	6239      	str	r1, [r7, #32]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	18d4      	adds	r4, r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	6023      	str	r3, [r4, #0]
        for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ec      	bne.n	800702e <parse_serialized_ints+0x13a>
        }
    }

    sail_destroy_string_node_chain(string_node);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4618      	mov	r0, r3
 8007058:	f005 fd96 	bl	800cb88 <sail_destroy_string_node_chain>

    return SAIL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	372c      	adds	r7, #44	; 0x2c
 8007062:	46bd      	mov	sp, r7
 8007064:	bd90      	pop	{r4, r7, pc}
 8007066:	bf00      	nop
 8007068:	08014514 	.word	0x08014514
 800706c:	080144a4 	.word	0x080144a4
 8007070:	080144bc 	.word	0x080144bc
 8007074:	08014520 	.word	0x08014520
 8007078:	0801451c 	.word	0x0801451c
 800707c:	08014534 	.word	0x08014534
 8007080:	0801453c 	.word	0x0801453c

08007084 <codec_feature_from_string>:

static int codec_feature_from_string(const char *str) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]

    return sail_codec_feature_from_string(str);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f002 f943 	bl	8009318 <sail_codec_feature_from_string>
 8007092:	4603      	mov	r3, r0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <parse_flags>:

static sail_status_t parse_flags(const char *value, int *features, int (*converter)(const char *str)) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(value);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf0c      	ite	eq
 80070ae:	2301      	moveq	r3, #1
 80070b0:	2300      	movne	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d011      	beq.n	80070dc <parse_flags+0x40>
 80070b8:	4b2e      	ldr	r3, [pc, #184]	; (8007174 <parse_flags+0xd8>)
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <parse_flags+0xdc>)
 80070be:	2257      	movs	r2, #87	; 0x57
 80070c0:	492e      	ldr	r1, [pc, #184]	; (800717c <parse_flags+0xe0>)
 80070c2:	2001      	movs	r0, #1
 80070c4:	f004 fb8e 	bl	800b7e4 <sail_log>
 80070c8:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <parse_flags+0xe4>)
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <parse_flags+0xe8>)
 80070ce:	2257      	movs	r2, #87	; 0x57
 80070d0:	492a      	ldr	r1, [pc, #168]	; (800717c <parse_flags+0xe0>)
 80070d2:	2001      	movs	r0, #1
 80070d4:	f004 fb86 	bl	800b7e4 <sail_log>
 80070d8:	2301      	movs	r3, #1
 80070da:	e047      	b.n	800716c <parse_flags+0xd0>
    SAIL_CHECK_PTR(features);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d011      	beq.n	8007110 <parse_flags+0x74>
 80070ec:	4b26      	ldr	r3, [pc, #152]	; (8007188 <parse_flags+0xec>)
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4b21      	ldr	r3, [pc, #132]	; (8007178 <parse_flags+0xdc>)
 80070f2:	2258      	movs	r2, #88	; 0x58
 80070f4:	4921      	ldr	r1, [pc, #132]	; (800717c <parse_flags+0xe0>)
 80070f6:	2001      	movs	r0, #1
 80070f8:	f004 fb74 	bl	800b7e4 <sail_log>
 80070fc:	4b20      	ldr	r3, [pc, #128]	; (8007180 <parse_flags+0xe4>)
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4b20      	ldr	r3, [pc, #128]	; (8007184 <parse_flags+0xe8>)
 8007102:	2258      	movs	r2, #88	; 0x58
 8007104:	491d      	ldr	r1, [pc, #116]	; (800717c <parse_flags+0xe0>)
 8007106:	2001      	movs	r0, #1
 8007108:	f004 fb6c 	bl	800b7e4 <sail_log>
 800710c:	2301      	movs	r3, #1
 800710e:	e02d      	b.n	800716c <parse_flags+0xd0>

    struct sail_string_node *string_node;
    SAIL_TRY(sail_split_into_string_node_chain(value, &string_node));
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	4619      	mov	r1, r3
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f005 fd44 	bl	800cba4 <sail_split_into_string_node_chain>
 800711c:	4603      	mov	r3, r0
 800711e:	837b      	strh	r3, [r7, #26]
 8007120:	8b7b      	ldrh	r3, [r7, #26]
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <parse_flags+0x98>
 8007130:	8b7b      	ldrh	r3, [r7, #26]
 8007132:	e01b      	b.n	800716c <parse_flags+0xd0>

    *features = 0;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	e00d      	b.n	800715c <parse_flags+0xc0>
        *features |= converter(node->string);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4610      	mov	r0, r2
 8007148:	4798      	blx	r3
 800714a:	4602      	mov	r2, r0
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	431a      	orrs	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	601a      	str	r2, [r3, #0]
    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	61fb      	str	r3, [r7, #28]
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1ee      	bne.n	8007140 <parse_flags+0xa4>
    }

    sail_destroy_string_node_chain(string_node);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4618      	mov	r0, r3
 8007166:	f005 fd0f 	bl	800cb88 <sail_destroy_string_node_chain>

    return SAIL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	08014514 	.word	0x08014514
 8007178:	080144a4 	.word	0x080144a4
 800717c:	080144bc 	.word	0x080144bc
 8007180:	08014520 	.word	0x08014520
 8007184:	0801451c 	.word	0x0801451c
 8007188:	08014544 	.word	0x08014544

0800718c <codec_priority_from_string>:

struct init_data {
    struct sail_codec_info *codec_info;
};

static sail_status_t codec_priority_from_string(const char *str, enum SailCodecPriority *result) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 8007196:	f107 0308 	add.w	r3, r7, #8
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f005 fe97 	bl	800ced0 <sail_string_hash>
 80071a2:	4603      	mov	r3, r0
 80071a4:	82fb      	strh	r3, [r7, #22]
 80071a6:	8afb      	ldrh	r3, [r7, #22]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bf14      	ite	ne
 80071ac:	2301      	movne	r3, #1
 80071ae:	2300      	moveq	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <codec_priority_from_string+0x30>
 80071b6:	f44f 7399 	mov.w	r3, #306	; 0x132
 80071ba:	e050      	b.n	800725e <codec_priority_from_string+0xd2>
                        /* cleanup */ return SAIL_ERROR_UNSUPPORTED_CODEC_PRIORITY);

    switch (hash) {
 80071bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c0:	4829      	ldr	r0, [pc, #164]	; (8007268 <codec_priority_from_string+0xdc>)
 80071c2:	f24d 01a9 	movw	r1, #53417	; 0xd0a9
 80071c6:	428b      	cmp	r3, r1
 80071c8:	bf08      	it	eq
 80071ca:	4282      	cmpeq	r2, r0
 80071cc:	d02c      	beq.n	8007228 <codec_priority_from_string+0x9c>
 80071ce:	4927      	ldr	r1, [pc, #156]	; (800726c <codec_priority_from_string+0xe0>)
 80071d0:	428a      	cmp	r2, r1
 80071d2:	f24d 01a9 	movw	r1, #53417	; 0xd0a9
 80071d6:	eb73 0101 	sbcs.w	r1, r3, r1
 80071da:	d23e      	bcs.n	800725a <codec_priority_from_string+0xce>
 80071dc:	4824      	ldr	r0, [pc, #144]	; (8007270 <codec_priority_from_string+0xe4>)
 80071de:	f240 6152 	movw	r1, #1618	; 0x652
 80071e2:	428b      	cmp	r3, r1
 80071e4:	bf08      	it	eq
 80071e6:	4282      	cmpeq	r2, r0
 80071e8:	d028      	beq.n	800723c <codec_priority_from_string+0xb0>
 80071ea:	4922      	ldr	r1, [pc, #136]	; (8007274 <codec_priority_from_string+0xe8>)
 80071ec:	428a      	cmp	r2, r1
 80071ee:	f240 6152 	movw	r1, #1618	; 0x652
 80071f2:	eb73 0101 	sbcs.w	r1, r3, r1
 80071f6:	d230      	bcs.n	800725a <codec_priority_from_string+0xce>
 80071f8:	481f      	ldr	r0, [pc, #124]	; (8007278 <codec_priority_from_string+0xec>)
 80071fa:	f240 6152 	movw	r1, #1618	; 0x652
 80071fe:	428b      	cmp	r3, r1
 8007200:	bf08      	it	eq
 8007202:	4282      	cmpeq	r2, r0
 8007204:	d024      	beq.n	8007250 <codec_priority_from_string+0xc4>
 8007206:	491d      	ldr	r1, [pc, #116]	; (800727c <codec_priority_from_string+0xf0>)
 8007208:	428a      	cmp	r2, r1
 800720a:	f240 6152 	movw	r1, #1618	; 0x652
 800720e:	eb73 0101 	sbcs.w	r1, r3, r1
 8007212:	d222      	bcs.n	800725a <codec_priority_from_string+0xce>
 8007214:	491a      	ldr	r1, [pc, #104]	; (8007280 <codec_priority_from_string+0xf4>)
 8007216:	4411      	add	r1, r2
 8007218:	4319      	orrs	r1, r3
 800721a:	d014      	beq.n	8007246 <codec_priority_from_string+0xba>
 800721c:	4919      	ldr	r1, [pc, #100]	; (8007284 <codec_priority_from_string+0xf8>)
 800721e:	2b01      	cmp	r3, #1
 8007220:	bf08      	it	eq
 8007222:	428a      	cmpeq	r2, r1
 8007224:	d005      	beq.n	8007232 <codec_priority_from_string+0xa6>
 8007226:	e018      	b.n	800725a <codec_priority_from_string+0xce>
        case UINT64_C(229425771102513): *result = SAIL_CODEC_PRIORITY_HIGHEST; return SAIL_OK;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	2300      	movs	r3, #0
 8007230:	e015      	b.n	800725e <codec_priority_from_string+0xd2>
        case UINT64_C(6384110277):      *result = SAIL_CODEC_PRIORITY_HIGH;    return SAIL_OK;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	2300      	movs	r3, #0
 800723a:	e010      	b.n	800725e <codec_priority_from_string+0xd2>
        case UINT64_C(6952486921094):   *result = SAIL_CODEC_PRIORITY_MEDIUM;  return SAIL_OK;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2202      	movs	r2, #2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	2300      	movs	r3, #0
 8007244:	e00b      	b.n	800725e <codec_priority_from_string+0xd2>
        case UINT64_C(193462455):       *result = SAIL_CODEC_PRIORITY_LOW;     return SAIL_OK;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2203      	movs	r2, #3
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	2300      	movs	r3, #0
 800724e:	e006      	b.n	800725e <codec_priority_from_string+0xd2>
        case UINT64_C(6952460323299):   *result = SAIL_CODEC_PRIORITY_LOWEST;  return SAIL_OK;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2204      	movs	r2, #4
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	2300      	movs	r3, #0
 8007258:	e001      	b.n	800725e <codec_priority_from_string+0xd2>

        default: return SAIL_ERROR_UNSUPPORTED_CODEC_PRIORITY;
 800725a:	f44f 7399 	mov.w	r3, #306	; 0x132
    }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	5996c131 	.word	0x5996c131
 800726c:	5996c132 	.word	0x5996c132
 8007270:	c0836386 	.word	0xc0836386
 8007274:	c0836387 	.word	0xc0836387
 8007278:	beed89e3 	.word	0xbeed89e3
 800727c:	beed89e4 	.word	0xbeed89e4
 8007280:	f477ff49 	.word	0xf477ff49
 8007284:	7c85cac5 	.word	0x7c85cac5

08007288 <inih_handler_sail_error>:

static sail_status_t inih_handler_sail_error(void *data, const char *section, const char *name, const char *value) {
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b095      	sub	sp, #84	; 0x54
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]

    /* Silently ignore empty values. */
    if (strlen(value) == 0) {
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <inih_handler_sail_error+0x1a>
        return SAIL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e35b      	b.n	800795a <inih_handler_sail_error+0x6d2>
    }

    struct init_data *init_data = (struct init_data *)data;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	63bb      	str	r3, [r7, #56]	; 0x38
    struct sail_codec_info *codec_info = init_data->codec_info;
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34

    if (strcmp(section, "codec") == 0) {
 80072ac:	4998      	ldr	r1, [pc, #608]	; (8007510 <inih_handler_sail_error+0x288>)
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	f7f9 f916 	bl	80004e0 <strcmp>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8148 	bne.w	800754c <inih_handler_sail_error+0x2c4>
        if (strcmp(name, "layout") == 0) {
 80072bc:	4995      	ldr	r1, [pc, #596]	; (8007514 <inih_handler_sail_error+0x28c>)
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7f9 f90e 	bl	80004e0 <strcmp>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <inih_handler_sail_error+0x50>
            codec_info->layout = atoi(value);
 80072ca:	6838      	ldr	r0, [r7, #0]
 80072cc:	f008 f8eb 	bl	800f4a6 <atoi>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	e33f      	b.n	8007958 <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "version") == 0) {
 80072d8:	498f      	ldr	r1, [pc, #572]	; (8007518 <inih_handler_sail_error+0x290>)
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7f9 f900 	bl	80004e0 <strcmp>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d112      	bne.n	800730c <inih_handler_sail_error+0x84>
            SAIL_TRY(sail_strdup(value, &codec_info->version));
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	330c      	adds	r3, #12
 80072ea:	4619      	mov	r1, r3
 80072ec:	6838      	ldr	r0, [r7, #0]
 80072ee:	f005 fd3d 	bl	800cd6c <sail_strdup>
 80072f2:	4603      	mov	r3, r0
 80072f4:	827b      	strh	r3, [r7, #18]
 80072f6:	8a7b      	ldrh	r3, [r7, #18]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8328 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 8007308:	8a7b      	ldrh	r3, [r7, #18]
 800730a:	e326      	b.n	800795a <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "priority") == 0) {
 800730c:	4983      	ldr	r1, [pc, #524]	; (800751c <inih_handler_sail_error+0x294>)
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7f9 f8e6 	bl	80004e0 <strcmp>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d11a      	bne.n	8007350 <inih_handler_sail_error+0xc8>
            SAIL_TRY_OR_CLEANUP(codec_priority_from_string(value, &codec_info->priority),
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	3308      	adds	r3, #8
 800731e:	4619      	mov	r1, r3
 8007320:	6838      	ldr	r0, [r7, #0]
 8007322:	f7ff ff33 	bl	800718c <codec_priority_from_string>
 8007326:	4603      	mov	r3, r0
 8007328:	82bb      	strh	r3, [r7, #20]
 800732a:	8abb      	ldrh	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 830e 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4b77      	ldr	r3, [pc, #476]	; (8007520 <inih_handler_sail_error+0x298>)
 8007342:	228e      	movs	r2, #142	; 0x8e
 8007344:	4977      	ldr	r1, [pc, #476]	; (8007524 <inih_handler_sail_error+0x29c>)
 8007346:	2001      	movs	r0, #1
 8007348:	f004 fa4c 	bl	800b7e4 <sail_log>
 800734c:	8abb      	ldrh	r3, [r7, #20]
 800734e:	e304      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec priority: '%s'", value));
        } else if (strcmp(name, "name") == 0) {
 8007350:	4975      	ldr	r1, [pc, #468]	; (8007528 <inih_handler_sail_error+0x2a0>)
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7f9 f8c4 	bl	80004e0 <strcmp>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d112      	bne.n	8007384 <inih_handler_sail_error+0xfc>
            SAIL_TRY(sail_strdup(value, &codec_info->name));
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	3310      	adds	r3, #16
 8007362:	4619      	mov	r1, r3
 8007364:	6838      	ldr	r0, [r7, #0]
 8007366:	f005 fd01 	bl	800cd6c <sail_strdup>
 800736a:	4603      	mov	r3, r0
 800736c:	82fb      	strh	r3, [r7, #22]
 800736e:	8afb      	ldrh	r3, [r7, #22]
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 82ec 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 8007380:	8afb      	ldrh	r3, [r7, #22]
 8007382:	e2ea      	b.n	800795a <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "description") == 0) {
 8007384:	4969      	ldr	r1, [pc, #420]	; (800752c <inih_handler_sail_error+0x2a4>)
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7f9 f8aa 	bl	80004e0 <strcmp>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d112      	bne.n	80073b8 <inih_handler_sail_error+0x130>
            SAIL_TRY(sail_strdup(value, &codec_info->description));
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	3314      	adds	r3, #20
 8007396:	4619      	mov	r1, r3
 8007398:	6838      	ldr	r0, [r7, #0]
 800739a:	f005 fce7 	bl	800cd6c <sail_strdup>
 800739e:	4603      	mov	r3, r0
 80073a0:	833b      	strh	r3, [r7, #24]
 80073a2:	8b3b      	ldrh	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 82d2 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 80073b4:	8b3b      	ldrh	r3, [r7, #24]
 80073b6:	e2d0      	b.n	800795a <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "magic-numbers") == 0) {
 80073b8:	495d      	ldr	r1, [pc, #372]	; (8007530 <inih_handler_sail_error+0x2a8>)
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7f9 f890 	bl	80004e0 <strcmp>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d13e      	bne.n	8007444 <inih_handler_sail_error+0x1bc>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->magic_number_node));
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	3318      	adds	r3, #24
 80073ca:	4619      	mov	r1, r3
 80073cc:	6838      	ldr	r0, [r7, #0]
 80073ce:	f005 fbe9 	bl	800cba4 <sail_split_into_string_node_chain>
 80073d2:	4603      	mov	r3, r0
 80073d4:	837b      	strh	r3, [r7, #26]
 80073d6:	8b7b      	ldrh	r3, [r7, #26]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <inih_handler_sail_error+0x162>
 80073e6:	8b7b      	ldrh	r3, [r7, #26]
 80073e8:	e2b7      	b.n	800795a <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->magic_number_node; node != NULL; node = node->next) {
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	647b      	str	r3, [r7, #68]	; 0x44
 80073f0:	e024      	b.n	800743c <inih_handler_sail_error+0x1b4>
                if (strlen(node->string) > SAIL_MAGIC_BUFFER_SIZE * 3 - 1) {
 80073f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7f9 f87c 	bl	80004f4 <strlen>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b2f      	cmp	r3, #47	; 0x2f
 8007400:	d914      	bls.n	800742c <inih_handler_sail_error+0x1a4>
                    SAIL_LOG_ERROR("Magic number '%s' is too long. Magic numbers for the '%s' codec are disabled",
 8007402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007408:	6912      	ldr	r2, [r2, #16]
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4b49      	ldr	r3, [pc, #292]	; (8007534 <inih_handler_sail_error+0x2ac>)
 8007410:	2298      	movs	r2, #152	; 0x98
 8007412:	4944      	ldr	r1, [pc, #272]	; (8007524 <inih_handler_sail_error+0x29c>)
 8007414:	2001      	movs	r0, #1
 8007416:	f004 f9e5 	bl	800b7e4 <sail_log>
                                    node->string, codec_info->name);
                    sail_destroy_string_node_chain(codec_info->magic_number_node);
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	4618      	mov	r0, r3
 8007420:	f005 fbb2 	bl	800cb88 <sail_destroy_string_node_chain>
                    codec_info->magic_number_node = NULL;
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	2200      	movs	r2, #0
 8007428:	619a      	str	r2, [r3, #24]
                    break;
 800742a:	e295      	b.n	8007958 <inih_handler_sail_error+0x6d0>
                }

                sail_to_lower(node->string);
 800742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f005 fd19 	bl	800ce68 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->magic_number_node; node != NULL; node = node->next) {
 8007436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	647b      	str	r3, [r7, #68]	; 0x44
 800743c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1d7      	bne.n	80073f2 <inih_handler_sail_error+0x16a>
 8007442:	e289      	b.n	8007958 <inih_handler_sail_error+0x6d0>
            }
        } else if (strcmp(name, "extensions") == 0) {
 8007444:	493c      	ldr	r1, [pc, #240]	; (8007538 <inih_handler_sail_error+0x2b0>)
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7f9 f84a 	bl	80004e0 <strcmp>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d121      	bne.n	8007496 <inih_handler_sail_error+0x20e>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->extension_node));
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	331c      	adds	r3, #28
 8007456:	4619      	mov	r1, r3
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	f005 fba3 	bl	800cba4 <sail_split_into_string_node_chain>
 800745e:	4603      	mov	r3, r0
 8007460:	83bb      	strh	r3, [r7, #28]
 8007462:	8bbb      	ldrh	r3, [r7, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf14      	ite	ne
 8007468:	2301      	movne	r3, #1
 800746a:	2300      	moveq	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <inih_handler_sail_error+0x1ee>
 8007472:	8bbb      	ldrh	r3, [r7, #28]
 8007474:	e271      	b.n	800795a <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->extension_node; node != NULL; node = node->next) {
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	643b      	str	r3, [r7, #64]	; 0x40
 800747c:	e007      	b.n	800748e <inih_handler_sail_error+0x206>
                sail_to_lower(node->string);
 800747e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f005 fcf0 	bl	800ce68 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->extension_node; node != NULL; node = node->next) {
 8007488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	643b      	str	r3, [r7, #64]	; 0x40
 800748e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1f4      	bne.n	800747e <inih_handler_sail_error+0x1f6>
 8007494:	e260      	b.n	8007958 <inih_handler_sail_error+0x6d0>
            }
        } else if (strcmp(name, "mime-types") == 0) {
 8007496:	4929      	ldr	r1, [pc, #164]	; (800753c <inih_handler_sail_error+0x2b4>)
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7f9 f821 	bl	80004e0 <strcmp>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d121      	bne.n	80074e8 <inih_handler_sail_error+0x260>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->mime_type_node));
 80074a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a6:	3320      	adds	r3, #32
 80074a8:	4619      	mov	r1, r3
 80074aa:	6838      	ldr	r0, [r7, #0]
 80074ac:	f005 fb7a 	bl	800cba4 <sail_split_into_string_node_chain>
 80074b0:	4603      	mov	r3, r0
 80074b2:	83fb      	strh	r3, [r7, #30]
 80074b4:	8bfb      	ldrh	r3, [r7, #30]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	2300      	moveq	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <inih_handler_sail_error+0x240>
 80074c4:	8bfb      	ldrh	r3, [r7, #30]
 80074c6:	e248      	b.n	800795a <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->mime_type_node; node != NULL; node = node->next) {
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ce:	e007      	b.n	80074e0 <inih_handler_sail_error+0x258>
                sail_to_lower(node->string);
 80074d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f005 fcc7 	bl	800ce68 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->mime_type_node; node != NULL; node = node->next) {
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f4      	bne.n	80074d0 <inih_handler_sail_error+0x248>
 80074e6:	e237      	b.n	8007958 <inih_handler_sail_error+0x6d0>
            }
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	4b13      	ldr	r3, [pc, #76]	; (8007540 <inih_handler_sail_error+0x2b8>)
 80074f2:	22ae      	movs	r2, #174	; 0xae
 80074f4:	490b      	ldr	r1, [pc, #44]	; (8007524 <inih_handler_sail_error+0x29c>)
 80074f6:	2001      	movs	r0, #1
 80074f8:	f004 f974 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 80074fc:	4b11      	ldr	r3, [pc, #68]	; (8007544 <inih_handler_sail_error+0x2bc>)
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4b11      	ldr	r3, [pc, #68]	; (8007548 <inih_handler_sail_error+0x2c0>)
 8007502:	22af      	movs	r2, #175	; 0xaf
 8007504:	4907      	ldr	r1, [pc, #28]	; (8007524 <inih_handler_sail_error+0x29c>)
 8007506:	2001      	movs	r0, #1
 8007508:	f004 f96c 	bl	800b7e4 <sail_log>
 800750c:	2308      	movs	r3, #8
 800750e:	e224      	b.n	800795a <inih_handler_sail_error+0x6d2>
 8007510:	08014550 	.word	0x08014550
 8007514:	08014558 	.word	0x08014558
 8007518:	08014560 	.word	0x08014560
 800751c:	08014568 	.word	0x08014568
 8007520:	08014574 	.word	0x08014574
 8007524:	080144bc 	.word	0x080144bc
 8007528:	0801459c 	.word	0x0801459c
 800752c:	080145a4 	.word	0x080145a4
 8007530:	080145b0 	.word	0x080145b0
 8007534:	080145c0 	.word	0x080145c0
 8007538:	08014610 	.word	0x08014610
 800753c:	0801461c 	.word	0x0801461c
 8007540:	08014628 	.word	0x08014628
 8007544:	08014650 	.word	0x08014650
 8007548:	0801451c 	.word	0x0801451c
        }
    } else if (strcmp(section, "load-features") == 0) {
 800754c:	499f      	ldr	r1, [pc, #636]	; (80077cc <inih_handler_sail_error+0x544>)
 800754e:	68b8      	ldr	r0, [r7, #8]
 8007550:	f7f8 ffc6 	bl	80004e0 <strcmp>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d159      	bne.n	800760e <inih_handler_sail_error+0x386>
        if (strcmp(name, "features") == 0) {
 800755a:	499d      	ldr	r1, [pc, #628]	; (80077d0 <inih_handler_sail_error+0x548>)
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7f8 ffbf 	bl	80004e0 <strcmp>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11b      	bne.n	80075a0 <inih_handler_sail_error+0x318>
            SAIL_TRY_OR_CLEANUP(parse_flags(value, &codec_info->load_features->features, codec_feature_from_string),
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	4a99      	ldr	r2, [pc, #612]	; (80077d4 <inih_handler_sail_error+0x54c>)
 800756e:	4619      	mov	r1, r3
 8007570:	6838      	ldr	r0, [r7, #0]
 8007572:	f7ff fd93 	bl	800709c <parse_flags>
 8007576:	4603      	mov	r3, r0
 8007578:	843b      	strh	r3, [r7, #32]
 800757a:	8c3b      	ldrh	r3, [r7, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	bf14      	ite	ne
 8007580:	2301      	movne	r3, #1
 8007582:	2300      	moveq	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 81e6 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4b91      	ldr	r3, [pc, #580]	; (80077d8 <inih_handler_sail_error+0x550>)
 8007592:	22b4      	movs	r2, #180	; 0xb4
 8007594:	4991      	ldr	r1, [pc, #580]	; (80077dc <inih_handler_sail_error+0x554>)
 8007596:	2001      	movs	r0, #1
 8007598:	f004 f924 	bl	800b7e4 <sail_log>
 800759c:	8c3b      	ldrh	r3, [r7, #32]
 800759e:	e1dc      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec features: '%s'", value));
        } else if (strcmp(name, "tuning") == 0) {
 80075a0:	498f      	ldr	r1, [pc, #572]	; (80077e0 <inih_handler_sail_error+0x558>)
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7f8 ff9c 	bl	80004e0 <strcmp>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11b      	bne.n	80075e6 <inih_handler_sail_error+0x35e>
            SAIL_TRY_OR_CLEANUP(sail_split_into_string_node_chain(value, &codec_info->load_features->tuning),
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	6838      	ldr	r0, [r7, #0]
 80075b8:	f005 faf4 	bl	800cba4 <sail_split_into_string_node_chain>
 80075bc:	4603      	mov	r3, r0
 80075be:	847b      	strh	r3, [r7, #34]	; 0x22
 80075c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 81c3 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	4b83      	ldr	r3, [pc, #524]	; (80077e4 <inih_handler_sail_error+0x55c>)
 80075d8:	22b7      	movs	r2, #183	; 0xb7
 80075da:	4980      	ldr	r1, [pc, #512]	; (80077dc <inih_handler_sail_error+0x554>)
 80075dc:	2001      	movs	r0, #1
 80075de:	f004 f901 	bl	800b7e4 <sail_log>
 80075e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075e4:	e1b9      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                    /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec tuning: '%s'", value));
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	4b7e      	ldr	r3, [pc, #504]	; (80077e8 <inih_handler_sail_error+0x560>)
 80075f0:	22b9      	movs	r2, #185	; 0xb9
 80075f2:	497a      	ldr	r1, [pc, #488]	; (80077dc <inih_handler_sail_error+0x554>)
 80075f4:	2001      	movs	r0, #1
 80075f6:	f004 f8f5 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 80075fa:	4b7c      	ldr	r3, [pc, #496]	; (80077ec <inih_handler_sail_error+0x564>)
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	4b7c      	ldr	r3, [pc, #496]	; (80077f0 <inih_handler_sail_error+0x568>)
 8007600:	22ba      	movs	r2, #186	; 0xba
 8007602:	4976      	ldr	r1, [pc, #472]	; (80077dc <inih_handler_sail_error+0x554>)
 8007604:	2001      	movs	r0, #1
 8007606:	f004 f8ed 	bl	800b7e4 <sail_log>
 800760a:	2308      	movs	r3, #8
 800760c:	e1a5      	b.n	800795a <inih_handler_sail_error+0x6d2>
        }
    } else if (strcmp(section, "save-features") == 0) {
 800760e:	4979      	ldr	r1, [pc, #484]	; (80077f4 <inih_handler_sail_error+0x56c>)
 8007610:	68b8      	ldr	r0, [r7, #8]
 8007612:	f7f8 ff65 	bl	80004e0 <strcmp>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 818b 	bne.w	8007934 <inih_handler_sail_error+0x6ac>
        if (strcmp(name, "features") == 0) {
 800761e:	496c      	ldr	r1, [pc, #432]	; (80077d0 <inih_handler_sail_error+0x548>)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7f8 ff5d 	bl	80004e0 <strcmp>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11c      	bne.n	8007666 <inih_handler_sail_error+0x3de>
            SAIL_TRY_OR_CLEANUP(parse_flags(value, &codec_info->save_features->features, codec_feature_from_string),
 800762c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	3308      	adds	r3, #8
 8007632:	4a68      	ldr	r2, [pc, #416]	; (80077d4 <inih_handler_sail_error+0x54c>)
 8007634:	4619      	mov	r1, r3
 8007636:	6838      	ldr	r0, [r7, #0]
 8007638:	f7ff fd30 	bl	800709c <parse_flags>
 800763c:	4603      	mov	r3, r0
 800763e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8183 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	4b60      	ldr	r3, [pc, #384]	; (80077d8 <inih_handler_sail_error+0x550>)
 8007658:	22bf      	movs	r2, #191	; 0xbf
 800765a:	4960      	ldr	r1, [pc, #384]	; (80077dc <inih_handler_sail_error+0x554>)
 800765c:	2001      	movs	r0, #1
 800765e:	f004 f8c1 	bl	800b7e4 <sail_log>
 8007662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007664:	e179      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec features: '%s'", value));
        } else if (strcmp(name, "pixel-formats") == 0) {
 8007666:	4964      	ldr	r1, [pc, #400]	; (80077f8 <inih_handler_sail_error+0x570>)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7f8 ff39 	bl	80004e0 <strcmp>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11e      	bne.n	80076b2 <inih_handler_sail_error+0x42a>
            SAIL_TRY_OR_CLEANUP(parse_serialized_ints(value,
 8007674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	4619      	mov	r1, r3
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	4b5e      	ldr	r3, [pc, #376]	; (80077fc <inih_handler_sail_error+0x574>)
 8007682:	6838      	ldr	r0, [r7, #0]
 8007684:	f7ff fc36 	bl	8006ef4 <parse_serialized_ints>
 8007688:	4603      	mov	r3, r0
 800768a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800768c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 815d 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4b57      	ldr	r3, [pc, #348]	; (8007800 <inih_handler_sail_error+0x578>)
 80076a4:	22c5      	movs	r2, #197	; 0xc5
 80076a6:	494d      	ldr	r1, [pc, #308]	; (80077dc <inih_handler_sail_error+0x554>)
 80076a8:	2001      	movs	r0, #1
 80076aa:	f004 f89b 	bl	800b7e4 <sail_log>
 80076ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076b0:	e153      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                                        (int **)&codec_info->save_features->pixel_formats,
                                                        &codec_info->save_features->pixel_formats_length,
                                                        pixel_format_from_string),
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse output pixel formats: '%s'", value));
        } else if (strcmp(name, "compressions") == 0) {
 80076b2:	4954      	ldr	r1, [pc, #336]	; (8007804 <inih_handler_sail_error+0x57c>)
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7f8 ff13 	bl	80004e0 <strcmp>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d120      	bne.n	8007702 <inih_handler_sail_error+0x47a>
            SAIL_TRY_OR_CLEANUP(parse_serialized_ints(value,
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	f103 010c 	add.w	r1, r3, #12
 80076c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	f103 0210 	add.w	r2, r3, #16
 80076d0:	4b4d      	ldr	r3, [pc, #308]	; (8007808 <inih_handler_sail_error+0x580>)
 80076d2:	6838      	ldr	r0, [r7, #0]
 80076d4:	f7ff fc0e 	bl	8006ef4 <parse_serialized_ints>
 80076d8:	4603      	mov	r3, r0
 80076da:	853b      	strh	r3, [r7, #40]	; 0x28
 80076dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8135 	beq.w	8007958 <inih_handler_sail_error+0x6d0>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4b46      	ldr	r3, [pc, #280]	; (800780c <inih_handler_sail_error+0x584>)
 80076f4:	22cb      	movs	r2, #203	; 0xcb
 80076f6:	4939      	ldr	r1, [pc, #228]	; (80077dc <inih_handler_sail_error+0x554>)
 80076f8:	2001      	movs	r0, #1
 80076fa:	f004 f873 	bl	800b7e4 <sail_log>
 80076fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007700:	e12b      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                                        (int **)&codec_info->save_features->compressions,
                                                        &codec_info->save_features->compressions_length,
                                                        compression_from_string),
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse compressions: '%s'", value));
        } else if (strcmp(name, "default-compression") == 0) {
 8007702:	4943      	ldr	r1, [pc, #268]	; (8007810 <inih_handler_sail_error+0x588>)
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7f8 feeb 	bl	80004e0 <strcmp>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <inih_handler_sail_error+0x498>
            codec_info->save_features->default_compression = sail_compression_from_string(value);
 8007710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007712:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007714:	6838      	ldr	r0, [r7, #0]
 8007716:	f001 fb09 	bl	8008d2c <sail_compression_from_string>
 800771a:	4603      	mov	r3, r0
 800771c:	7523      	strb	r3, [r4, #20]
 800771e:	e11b      	b.n	8007958 <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-min") == 0) {
 8007720:	493c      	ldr	r1, [pc, #240]	; (8007814 <inih_handler_sail_error+0x58c>)
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7f8 fedc 	bl	80004e0 <strcmp>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d123      	bne.n	8007776 <inih_handler_sail_error+0x4ee>
            if (codec_info->save_features->compression_level == NULL) {
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d111      	bne.n	800775c <inih_handler_sail_error+0x4d4>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	3318      	adds	r3, #24
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fe80 	bl	8009444 <sail_alloc_compression_level>
 8007744:	4603      	mov	r3, r0
 8007746:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007748:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf14      	ite	ne
 800774e:	2301      	movne	r3, #1
 8007750:	2300      	moveq	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <inih_handler_sail_error+0x4d4>
 8007758:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800775a:	e0fe      	b.n	800795a <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->min_level = atof(value);
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	699c      	ldr	r4, [r3, #24]
 8007762:	6838      	ldr	r0, [r7, #0]
 8007764:	f007 fe9c 	bl	800f4a0 <atof>
 8007768:	eeb0 7a40 	vmov.f32	s14, s0
 800776c:	eef0 7a60 	vmov.f32	s15, s1
 8007770:	ed84 7b00 	vstr	d7, [r4]
 8007774:	e0f0      	b.n	8007958 <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-max") == 0) {
 8007776:	4928      	ldr	r1, [pc, #160]	; (8007818 <inih_handler_sail_error+0x590>)
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7f8 feb1 	bl	80004e0 <strcmp>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d14b      	bne.n	800781c <inih_handler_sail_error+0x594>
            if (codec_info->save_features->compression_level == NULL) {
 8007784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d111      	bne.n	80077b2 <inih_handler_sail_error+0x52a>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	3318      	adds	r3, #24
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fe55 	bl	8009444 <sail_alloc_compression_level>
 800779a:	4603      	mov	r3, r0
 800779c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800779e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <inih_handler_sail_error+0x52a>
 80077ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077b0:	e0d3      	b.n	800795a <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->max_level = atof(value);
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	699c      	ldr	r4, [r3, #24]
 80077b8:	6838      	ldr	r0, [r7, #0]
 80077ba:	f007 fe71 	bl	800f4a0 <atof>
 80077be:	eeb0 7a40 	vmov.f32	s14, s0
 80077c2:	eef0 7a60 	vmov.f32	s15, s1
 80077c6:	ed84 7b02 	vstr	d7, [r4, #8]
 80077ca:	e0c5      	b.n	8007958 <inih_handler_sail_error+0x6d0>
 80077cc:	08014668 	.word	0x08014668
 80077d0:	08014544 	.word	0x08014544
 80077d4:	08007085 	.word	0x08007085
 80077d8:	08014678 	.word	0x08014678
 80077dc:	080144bc 	.word	0x080144bc
 80077e0:	080146a0 	.word	0x080146a0
 80077e4:	080146a8 	.word	0x080146a8
 80077e8:	08014628 	.word	0x08014628
 80077ec:	08014650 	.word	0x08014650
 80077f0:	0801451c 	.word	0x0801451c
 80077f4:	080146cc 	.word	0x080146cc
 80077f8:	080146dc 	.word	0x080146dc
 80077fc:	08006ec5 	.word	0x08006ec5
 8007800:	080146ec 	.word	0x080146ec
 8007804:	08014718 	.word	0x08014718
 8007808:	08006edd 	.word	0x08006edd
 800780c:	08014728 	.word	0x08014728
 8007810:	0801474c 	.word	0x0801474c
 8007814:	08014760 	.word	0x08014760
 8007818:	08014778 	.word	0x08014778
        } else if (strcmp(name, "compression-level-default") == 0) {
 800781c:	4951      	ldr	r1, [pc, #324]	; (8007964 <inih_handler_sail_error+0x6dc>)
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7f8 fe5e 	bl	80004e0 <strcmp>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d123      	bne.n	8007872 <inih_handler_sail_error+0x5ea>
            if (codec_info->save_features->compression_level == NULL) {
 800782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d111      	bne.n	8007858 <inih_handler_sail_error+0x5d0>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	3318      	adds	r3, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f001 fe02 	bl	8009444 <sail_alloc_compression_level>
 8007840:	4603      	mov	r3, r0
 8007842:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <inih_handler_sail_error+0x5d0>
 8007854:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007856:	e080      	b.n	800795a <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->default_level = atof(value);
 8007858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	699c      	ldr	r4, [r3, #24]
 800785e:	6838      	ldr	r0, [r7, #0]
 8007860:	f007 fe1e 	bl	800f4a0 <atof>
 8007864:	eeb0 7a40 	vmov.f32	s14, s0
 8007868:	eef0 7a60 	vmov.f32	s15, s1
 800786c:	ed84 7b04 	vstr	d7, [r4, #16]
 8007870:	e072      	b.n	8007958 <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-step") == 0) {
 8007872:	493d      	ldr	r1, [pc, #244]	; (8007968 <inih_handler_sail_error+0x6e0>)
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7f8 fe33 	bl	80004e0 <strcmp>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d123      	bne.n	80078c8 <inih_handler_sail_error+0x640>
            if (codec_info->save_features->compression_level == NULL) {
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d111      	bne.n	80078ae <inih_handler_sail_error+0x626>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	3318      	adds	r3, #24
 8007890:	4618      	mov	r0, r3
 8007892:	f001 fdd7 	bl	8009444 <sail_alloc_compression_level>
 8007896:	4603      	mov	r3, r0
 8007898:	863b      	strh	r3, [r7, #48]	; 0x30
 800789a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800789c:	2b00      	cmp	r3, #0
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <inih_handler_sail_error+0x626>
 80078aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80078ac:	e055      	b.n	800795a <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->step = atof(value);
 80078ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	699c      	ldr	r4, [r3, #24]
 80078b4:	6838      	ldr	r0, [r7, #0]
 80078b6:	f007 fdf3 	bl	800f4a0 <atof>
 80078ba:	eeb0 7a40 	vmov.f32	s14, s0
 80078be:	eef0 7a60 	vmov.f32	s15, s1
 80078c2:	ed84 7b06 	vstr	d7, [r4, #24]
 80078c6:	e047      	b.n	8007958 <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "tuning") == 0) {
 80078c8:	4928      	ldr	r1, [pc, #160]	; (800796c <inih_handler_sail_error+0x6e4>)
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7f8 fe08 	bl	80004e0 <strcmp>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d11a      	bne.n	800790c <inih_handler_sail_error+0x684>
            SAIL_TRY_OR_CLEANUP(sail_split_into_string_node_chain(value, &codec_info->save_features->tuning),
 80078d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	331c      	adds	r3, #28
 80078dc:	4619      	mov	r1, r3
 80078de:	6838      	ldr	r0, [r7, #0]
 80078e0:	f005 f960 	bl	800cba4 <sail_split_into_string_node_chain>
 80078e4:	4603      	mov	r3, r0
 80078e6:	867b      	strh	r3, [r7, #50]	; 0x32
 80078e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf14      	ite	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	2300      	moveq	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d02f      	beq.n	8007958 <inih_handler_sail_error+0x6d0>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <inih_handler_sail_error+0x6e8>)
 80078fe:	22e8      	movs	r2, #232	; 0xe8
 8007900:	491c      	ldr	r1, [pc, #112]	; (8007974 <inih_handler_sail_error+0x6ec>)
 8007902:	2001      	movs	r0, #1
 8007904:	f003 ff6e 	bl	800b7e4 <sail_log>
 8007908:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800790a:	e026      	b.n	800795a <inih_handler_sail_error+0x6d2>
                                    /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec tuning: '%s'", value));
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4b18      	ldr	r3, [pc, #96]	; (8007978 <inih_handler_sail_error+0x6f0>)
 8007916:	22ea      	movs	r2, #234	; 0xea
 8007918:	4916      	ldr	r1, [pc, #88]	; (8007974 <inih_handler_sail_error+0x6ec>)
 800791a:	2001      	movs	r0, #1
 800791c:	f003 ff62 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 8007920:	4b16      	ldr	r3, [pc, #88]	; (800797c <inih_handler_sail_error+0x6f4>)
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4b16      	ldr	r3, [pc, #88]	; (8007980 <inih_handler_sail_error+0x6f8>)
 8007926:	22eb      	movs	r2, #235	; 0xeb
 8007928:	4912      	ldr	r1, [pc, #72]	; (8007974 <inih_handler_sail_error+0x6ec>)
 800792a:	2001      	movs	r0, #1
 800792c:	f003 ff5a 	bl	800b7e4 <sail_log>
 8007930:	2308      	movs	r3, #8
 8007932:	e012      	b.n	800795a <inih_handler_sail_error+0x6d2>
        }
    } else {
        SAIL_LOG_ERROR("Unsupported codec info section '%s'", section);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <inih_handler_sail_error+0x6fc>)
 800793a:	22ee      	movs	r2, #238	; 0xee
 800793c:	490d      	ldr	r1, [pc, #52]	; (8007974 <inih_handler_sail_error+0x6ec>)
 800793e:	2001      	movs	r0, #1
 8007940:	f003 ff50 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <inih_handler_sail_error+0x6f4>)
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <inih_handler_sail_error+0x6f8>)
 800794a:	22ef      	movs	r2, #239	; 0xef
 800794c:	4909      	ldr	r1, [pc, #36]	; (8007974 <inih_handler_sail_error+0x6ec>)
 800794e:	2001      	movs	r0, #1
 8007950:	f003 ff48 	bl	800b7e4 <sail_log>
 8007954:	2308      	movs	r3, #8
 8007956:	e000      	b.n	800795a <inih_handler_sail_error+0x6d2>
    }

    return SAIL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	374c      	adds	r7, #76	; 0x4c
 800795e:	46bd      	mov	sp, r7
 8007960:	bd90      	pop	{r4, r7, pc}
 8007962:	bf00      	nop
 8007964:	08014790 	.word	0x08014790
 8007968:	080147ac 	.word	0x080147ac
 800796c:	080146a0 	.word	0x080146a0
 8007970:	080146a8 	.word	0x080146a8
 8007974:	080144bc 	.word	0x080144bc
 8007978:	08014628 	.word	0x08014628
 800797c:	08014650 	.word	0x08014650
 8007980:	0801451c 	.word	0x0801451c
 8007984:	080147c4 	.word	0x080147c4

08007988 <inih_handler>:

/* Returns 1 on success. */
static int inih_handler(void *data, const char *section, const char *name, const char *value) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]

    SAIL_TRY_OR_EXECUTE(inih_handler_sail_error(data, section, name, value),
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fc73 	bl	8007288 <inih_handler_sail_error>
 80079a2:	4603      	mov	r3, r0
 80079a4:	82fb      	strh	r3, [r7, #22]
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bf14      	ite	ne
 80079ac:	2301      	movne	r3, #1
 80079ae:	2300      	moveq	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <inih_handler+0x32>
 80079b6:	2300      	movs	r3, #0
 80079b8:	e000      	b.n	80079bc <inih_handler+0x34>
                        /* on error */ return 0);

    return 1;
 80079ba:	2301      	movs	r3, #1
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <check_codec_info>:

static sail_status_t check_codec_info(const struct sail_codec_info *codec_info) {
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b08d      	sub	sp, #52	; 0x34
 80079c8:	af06      	add	r7, sp, #24
 80079ca:	6078      	str	r0, [r7, #4]

    if (codec_info->name == NULL || strlen(codec_info->name) == 0) {
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <check_codec_info+0x1a>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d112      	bne.n	8007a04 <check_codec_info+0x40>
        SAIL_LOG_ERROR("Codec validation error: the codec currently being parsed has empty name");
 80079de:	4b9b      	ldr	r3, [pc, #620]	; (8007c4c <check_codec_info+0x288>)
 80079e0:	f240 1201 	movw	r2, #257	; 0x101
 80079e4:	499a      	ldr	r1, [pc, #616]	; (8007c50 <check_codec_info+0x28c>)
 80079e6:	2001      	movs	r0, #1
 80079e8:	f003 fefc 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 80079ec:	4b99      	ldr	r3, [pc, #612]	; (8007c54 <check_codec_info+0x290>)
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4b99      	ldr	r3, [pc, #612]	; (8007c58 <check_codec_info+0x294>)
 80079f2:	f44f 7281 	mov.w	r2, #258	; 0x102
 80079f6:	4996      	ldr	r1, [pc, #600]	; (8007c50 <check_codec_info+0x28c>)
 80079f8:	2001      	movs	r0, #1
 80079fa:	f003 fef3 	bl	800b7e4 <sail_log>
 80079fe:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007a02:	e1b5      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    for (size_t i = 0; i < strlen(codec_info->name); i++) {
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e026      	b.n	8007a58 <check_codec_info+0x94>
        if (codec_info->name[i] >= 'a' && codec_info->name[i] <= 'z') {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b60      	cmp	r3, #96	; 0x60
 8007a16:	d91c      	bls.n	8007a52 <check_codec_info+0x8e>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b7a      	cmp	r3, #122	; 0x7a
 8007a24:	d815      	bhi.n	8007a52 <check_codec_info+0x8e>
            SAIL_LOG_ERROR("Codec validation error: %s codec has lowercase letters in its name", codec_info->name);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4b8b      	ldr	r3, [pc, #556]	; (8007c5c <check_codec_info+0x298>)
 8007a2e:	f240 1207 	movw	r2, #263	; 0x107
 8007a32:	4987      	ldr	r1, [pc, #540]	; (8007c50 <check_codec_info+0x28c>)
 8007a34:	2001      	movs	r0, #1
 8007a36:	f003 fed5 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007a3a:	4b86      	ldr	r3, [pc, #536]	; (8007c54 <check_codec_info+0x290>)
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	4b86      	ldr	r3, [pc, #536]	; (8007c58 <check_codec_info+0x294>)
 8007a40:	f44f 7284 	mov.w	r2, #264	; 0x108
 8007a44:	4982      	ldr	r1, [pc, #520]	; (8007c50 <check_codec_info+0x28c>)
 8007a46:	2001      	movs	r0, #1
 8007a48:	f003 fecc 	bl	800b7e4 <sail_log>
 8007a4c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007a50:	e18e      	b.n	8007d70 <check_codec_info+0x3ac>
    for (size_t i = 0; i < strlen(codec_info->name); i++) {
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	3301      	adds	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7f8 fd49 	bl	80004f4 <strlen>
 8007a62:	4602      	mov	r2, r0
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d3cf      	bcc.n	8007a0a <check_codec_info+0x46>
        }
    }

    if (codec_info->version == NULL || strlen(codec_info->version) == 0) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <check_codec_info+0xb8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d115      	bne.n	8007aa8 <check_codec_info+0xe4>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty version", codec_info->name);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	4b77      	ldr	r3, [pc, #476]	; (8007c60 <check_codec_info+0x29c>)
 8007a84:	f240 120d 	movw	r2, #269	; 0x10d
 8007a88:	4971      	ldr	r1, [pc, #452]	; (8007c50 <check_codec_info+0x28c>)
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	f003 feaa 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007a90:	4b70      	ldr	r3, [pc, #448]	; (8007c54 <check_codec_info+0x290>)
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4b70      	ldr	r3, [pc, #448]	; (8007c58 <check_codec_info+0x294>)
 8007a96:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8007a9a:	496d      	ldr	r1, [pc, #436]	; (8007c50 <check_codec_info+0x28c>)
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	f003 fea1 	bl	800b7e4 <sail_log>
 8007aa2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007aa6:	e163      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    if (codec_info->description == NULL || strlen(codec_info->description) == 0) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <check_codec_info+0xf6>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d115      	bne.n	8007ae6 <check_codec_info+0x122>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty description", codec_info->name);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	4b68      	ldr	r3, [pc, #416]	; (8007c64 <check_codec_info+0x2a0>)
 8007ac2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007ac6:	4962      	ldr	r1, [pc, #392]	; (8007c50 <check_codec_info+0x28c>)
 8007ac8:	2001      	movs	r0, #1
 8007aca:	f003 fe8b 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007ace:	4b61      	ldr	r3, [pc, #388]	; (8007c54 <check_codec_info+0x290>)
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4b61      	ldr	r3, [pc, #388]	; (8007c58 <check_codec_info+0x294>)
 8007ad4:	f240 1213 	movw	r2, #275	; 0x113
 8007ad8:	495d      	ldr	r1, [pc, #372]	; (8007c50 <check_codec_info+0x28c>)
 8007ada:	2001      	movs	r0, #1
 8007adc:	f003 fe82 	bl	800b7e4 <sail_log>
 8007ae0:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007ae4:	e144      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    if (codec_info->magic_number_node == NULL && codec_info->extension_node == NULL && codec_info->mime_type_node == NULL) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d11d      	bne.n	8007b2a <check_codec_info+0x166>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d119      	bne.n	8007b2a <check_codec_info+0x166>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d115      	bne.n	8007b2a <check_codec_info+0x166>
        SAIL_LOG_ERROR("Codec validation error: %s codec has no identification method (magic number or extension or mime type)", codec_info->name);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	4b58      	ldr	r3, [pc, #352]	; (8007c68 <check_codec_info+0x2a4>)
 8007b06:	f240 1217 	movw	r2, #279	; 0x117
 8007b0a:	4951      	ldr	r1, [pc, #324]	; (8007c50 <check_codec_info+0x28c>)
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	f003 fe69 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007b12:	4b50      	ldr	r3, [pc, #320]	; (8007c54 <check_codec_info+0x290>)
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4b50      	ldr	r3, [pc, #320]	; (8007c58 <check_codec_info+0x294>)
 8007b18:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007b1c:	494c      	ldr	r1, [pc, #304]	; (8007c50 <check_codec_info+0x28c>)
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f003 fe60 	bl	800b7e4 <sail_log>
 8007b24:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007b28:	e122      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    const struct sail_save_features *save_features = codec_info->save_features;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	60fb      	str	r3, [r7, #12]

    /* Check save features. */
    if ((save_features->features & SAIL_CODEC_FEATURE_STATIC ||
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <check_codec_info+0x190>
            save_features->features & SAIL_CODEC_FEATURE_ANIMATED ||
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0304 	and.w	r3, r3, #4
    if ((save_features->features & SAIL_CODEC_FEATURE_STATIC ||
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <check_codec_info+0x190>
            save_features->features & SAIL_CODEC_FEATURE_MULTI_PAGED) &&
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
            save_features->features & SAIL_CODEC_FEATURE_ANIMATED ||
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d01d      	beq.n	8007b90 <check_codec_info+0x1cc>
            (save_features->pixel_formats == NULL || save_features->pixel_formats_length == 0)) {
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
            save_features->features & SAIL_CODEC_FEATURE_MULTI_PAGED) &&
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <check_codec_info+0x1a0>
            (save_features->pixel_formats == NULL || save_features->pixel_formats_length == 0)) {
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d115      	bne.n	8007b90 <check_codec_info+0x1cc>
        SAIL_LOG_ERROR("Codec validation error: %s codec is able to save images, but output pixel formats are not specified", codec_info->name);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4b40      	ldr	r3, [pc, #256]	; (8007c6c <check_codec_info+0x2a8>)
 8007b6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007b70:	4937      	ldr	r1, [pc, #220]	; (8007c50 <check_codec_info+0x28c>)
 8007b72:	2001      	movs	r0, #1
 8007b74:	f003 fe36 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007b78:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <check_codec_info+0x290>)
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4b36      	ldr	r3, [pc, #216]	; (8007c58 <check_codec_info+0x294>)
 8007b7e:	f240 1223 	movw	r2, #291	; 0x123
 8007b82:	4933      	ldr	r1, [pc, #204]	; (8007c50 <check_codec_info+0x28c>)
 8007b84:	2001      	movs	r0, #1
 8007b86:	f003 fe2d 	bl	800b7e4 <sail_log>
 8007b8a:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007b8e:	e0ef      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    /* Compressions must exist if we're able to save this image format.*/
    if (save_features->features != 0 && (save_features->compressions == NULL || save_features->compressions_length == 0)) {
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01d      	beq.n	8007bd4 <check_codec_info+0x210>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <check_codec_info+0x1e4>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d115      	bne.n	8007bd4 <check_codec_info+0x210>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty compressions list", codec_info->name);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	4b30      	ldr	r3, [pc, #192]	; (8007c70 <check_codec_info+0x2ac>)
 8007bb0:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007bb4:	4926      	ldr	r1, [pc, #152]	; (8007c50 <check_codec_info+0x28c>)
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	f003 fe14 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <check_codec_info+0x290>)
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4b25      	ldr	r3, [pc, #148]	; (8007c58 <check_codec_info+0x294>)
 8007bc2:	f240 1229 	movw	r2, #297	; 0x129
 8007bc6:	4922      	ldr	r1, [pc, #136]	; (8007c50 <check_codec_info+0x28c>)
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f003 fe0b 	bl	800b7e4 <sail_log>
 8007bce:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007bd2:	e0cd      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    /* Compression levels and types are mutually exclusive.*/
    if (save_features->compressions_length > 1 && save_features->compression_level != NULL &&
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d933      	bls.n	8007c44 <check_codec_info+0x280>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d02f      	beq.n	8007c44 <check_codec_info+0x280>
            (save_features->compression_level->min_level != 0 || save_features->compression_level->max_level != 0)) {
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	e9d3 0100 	ldrd	r0, r1, [r3]
    if (save_features->compressions_length > 1 && save_features->compression_level != NULL &&
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	f7f9 f8aa 	bl	8000d4c <__aeabi_dcmpeq>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00c      	beq.n	8007c18 <check_codec_info+0x254>
            (save_features->compression_level->min_level != 0 || save_features->compression_level->max_level != 0)) {
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	f7f9 f89d 	bl	8000d4c <__aeabi_dcmpeq>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d115      	bne.n	8007c44 <check_codec_info+0x280>
        SAIL_LOG_ERROR("Codec validation error: %s codec has more than two compression types and non-zero compression levels which is unsupported", codec_info->name);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4b15      	ldr	r3, [pc, #84]	; (8007c74 <check_codec_info+0x2b0>)
 8007c20:	f240 122f 	movw	r2, #303	; 0x12f
 8007c24:	490a      	ldr	r1, [pc, #40]	; (8007c50 <check_codec_info+0x28c>)
 8007c26:	2001      	movs	r0, #1
 8007c28:	f003 fddc 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <check_codec_info+0x290>)
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <check_codec_info+0x294>)
 8007c32:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007c36:	4906      	ldr	r1, [pc, #24]	; (8007c50 <check_codec_info+0x28c>)
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f003 fdd3 	bl	800b7e4 <sail_log>
 8007c3e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007c42:	e095      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    for (unsigned i = 0; i < save_features->compressions_length; i++) {
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e036      	b.n	8007cb8 <check_codec_info+0x2f4>
 8007c4a:	bf00      	nop
 8007c4c:	080147e8 	.word	0x080147e8
 8007c50:	080144bc 	.word	0x080144bc
 8007c54:	08014830 	.word	0x08014830
 8007c58:	0801451c 	.word	0x0801451c
 8007c5c:	08014854 	.word	0x08014854
 8007c60:	08014898 	.word	0x08014898
 8007c64:	080148cc 	.word	0x080148cc
 8007c68:	08014904 	.word	0x08014904
 8007c6c:	0801496c 	.word	0x0801496c
 8007c70:	080149d0 	.word	0x080149d0
 8007c74:	08014a10 	.word	0x08014a10
        if (save_features->compressions[i] == SAIL_COMPRESSION_UNKNOWN) {
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d115      	bne.n	8007cb2 <check_codec_info+0x2ee>
            SAIL_LOG_ERROR("Codec validation error: %s codec has UNKNOWN compression", codec_info->name);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4b3a      	ldr	r3, [pc, #232]	; (8007d78 <check_codec_info+0x3b4>)
 8007c8e:	f240 1235 	movw	r2, #309	; 0x135
 8007c92:	493a      	ldr	r1, [pc, #232]	; (8007d7c <check_codec_info+0x3b8>)
 8007c94:	2001      	movs	r0, #1
 8007c96:	f003 fda5 	bl	800b7e4 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007c9a:	4b39      	ldr	r3, [pc, #228]	; (8007d80 <check_codec_info+0x3bc>)
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <check_codec_info+0x3c0>)
 8007ca0:	f44f 729b 	mov.w	r2, #310	; 0x136
 8007ca4:	4935      	ldr	r1, [pc, #212]	; (8007d7c <check_codec_info+0x3b8>)
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	f003 fd9c 	bl	800b7e4 <sail_log>
 8007cac:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007cb0:	e05e      	b.n	8007d70 <check_codec_info+0x3ac>
    for (unsigned i = 0; i < save_features->compressions_length; i++) {
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d3da      	bcc.n	8007c78 <check_codec_info+0x2b4>
        }
    }

    if (save_features->compressions_length > 0 && save_features->default_compression == SAIL_COMPRESSION_UNKNOWN) {
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d019      	beq.n	8007cfe <check_codec_info+0x33a>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	7d1b      	ldrb	r3, [r3, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d115      	bne.n	8007cfe <check_codec_info+0x33a>
        SAIL_LOG_ERROR("Codec validation error: %s codec has UNKNOWN default compression", codec_info->name);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4b2b      	ldr	r3, [pc, #172]	; (8007d88 <check_codec_info+0x3c4>)
 8007cda:	f240 123b 	movw	r2, #315	; 0x13b
 8007cde:	4927      	ldr	r1, [pc, #156]	; (8007d7c <check_codec_info+0x3b8>)
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	f003 fd7f 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007ce6:	4b26      	ldr	r3, [pc, #152]	; (8007d80 <check_codec_info+0x3bc>)
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4b26      	ldr	r3, [pc, #152]	; (8007d84 <check_codec_info+0x3c0>)
 8007cec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007cf0:	4922      	ldr	r1, [pc, #136]	; (8007d7c <check_codec_info+0x3b8>)
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f003 fd76 	bl	800b7e4 <sail_log>
 8007cf8:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007cfc:	e038      	b.n	8007d70 <check_codec_info+0x3ac>
    }

    if (codec_info->save_features->compression_level != NULL) {
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d032      	beq.n	8007d6e <check_codec_info+0x3aa>
        if (codec_info->save_features->compression_level->min_level > codec_info->save_features->compression_level->max_level) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d1c:	f7f9 f83e 	bl	8000d9c <__aeabi_dcmpgt>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d023      	beq.n	8007d6e <check_codec_info+0x3aa>
            SAIL_LOG_ERROR("Codec validation error: %s codec has incorrect compression levels of min(%.1f), max(%.1f)",
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691c      	ldr	r4, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8007d38:	6989      	ldr	r1, [r1, #24]
 8007d3a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8007d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d46:	9400      	str	r4, [sp, #0]
 8007d48:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <check_codec_info+0x3c8>)
 8007d4a:	f240 1241 	movw	r2, #321	; 0x141
 8007d4e:	490b      	ldr	r1, [pc, #44]	; (8007d7c <check_codec_info+0x3b8>)
 8007d50:	2001      	movs	r0, #1
 8007d52:	f003 fd47 	bl	800b7e4 <sail_log>
                            codec_info->name, codec_info->save_features->compression_level->min_level,
                            codec_info->save_features->compression_level->max_level);
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 8007d56:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <check_codec_info+0x3bc>)
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <check_codec_info+0x3c0>)
 8007d5c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8007d60:	4906      	ldr	r1, [pc, #24]	; (8007d7c <check_codec_info+0x3b8>)
 8007d62:	2001      	movs	r0, #1
 8007d64:	f003 fd3e 	bl	800b7e4 <sail_log>
 8007d68:	f44f 7398 	mov.w	r3, #304	; 0x130
 8007d6c:	e000      	b.n	8007d70 <check_codec_info+0x3ac>
        }
    }

    return SAIL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd90      	pop	{r4, r7, pc}
 8007d78:	08014a8c 	.word	0x08014a8c
 8007d7c:	080144bc 	.word	0x080144bc
 8007d80:	08014830 	.word	0x08014830
 8007d84:	0801451c 	.word	0x0801451c
 8007d88:	08014ac8 	.word	0x08014ac8
 8007d8c:	08014b0c 	.word	0x08014b0c

08007d90 <alloc_codec_info>:

static sail_status_t alloc_codec_info(struct sail_codec_info **codec_info) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec_info);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf0c      	ite	eq
 8007d9e:	2301      	moveq	r3, #1
 8007da0:	2300      	movne	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d013      	beq.n	8007dd0 <alloc_codec_info+0x40>
 8007da8:	4b2a      	ldr	r3, [pc, #168]	; (8007e54 <alloc_codec_info+0xc4>)
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	4b2a      	ldr	r3, [pc, #168]	; (8007e58 <alloc_codec_info+0xc8>)
 8007dae:	f240 124d 	movw	r2, #333	; 0x14d
 8007db2:	492a      	ldr	r1, [pc, #168]	; (8007e5c <alloc_codec_info+0xcc>)
 8007db4:	2001      	movs	r0, #1
 8007db6:	f003 fd15 	bl	800b7e4 <sail_log>
 8007dba:	4b29      	ldr	r3, [pc, #164]	; (8007e60 <alloc_codec_info+0xd0>)
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <alloc_codec_info+0xd4>)
 8007dc0:	f240 124d 	movw	r2, #333	; 0x14d
 8007dc4:	4925      	ldr	r1, [pc, #148]	; (8007e5c <alloc_codec_info+0xcc>)
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	f003 fd0c 	bl	800b7e4 <sail_log>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e03d      	b.n	8007e4c <alloc_codec_info+0xbc>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_info), &ptr));
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	202c      	movs	r0, #44	; 0x2c
 8007dd8:	f003 fdfc 	bl	800b9d4 <sail_malloc>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	81fb      	strh	r3, [r7, #14]
 8007de0:	89fb      	ldrh	r3, [r7, #14]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bf14      	ite	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	2300      	moveq	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <alloc_codec_info+0x64>
 8007df0:	89fb      	ldrh	r3, [r7, #14]
 8007df2:	e02b      	b.n	8007e4c <alloc_codec_info+0xbc>
    *codec_info = ptr;
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]

    (*codec_info)->path              = NULL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
    (*codec_info)->layout            = 0;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	605a      	str	r2, [r3, #4]
    (*codec_info)->version           = NULL;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	60da      	str	r2, [r3, #12]
    (*codec_info)->name              = NULL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2200      	movs	r2, #0
 8007e18:	611a      	str	r2, [r3, #16]
    (*codec_info)->description       = NULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	615a      	str	r2, [r3, #20]
    (*codec_info)->magic_number_node = NULL;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	619a      	str	r2, [r3, #24]
    (*codec_info)->extension_node    = NULL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	61da      	str	r2, [r3, #28]
    (*codec_info)->mime_type_node    = NULL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	621a      	str	r2, [r3, #32]
    (*codec_info)->load_features     = NULL;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	625a      	str	r2, [r3, #36]	; 0x24
    (*codec_info)->save_features    = NULL;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2200      	movs	r2, #0
 8007e48:	629a      	str	r2, [r3, #40]	; 0x28

    return SAIL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08014b68 	.word	0x08014b68
 8007e58:	080144a4 	.word	0x080144a4
 8007e5c:	080144bc 	.word	0x080144bc
 8007e60:	08014520 	.word	0x08014520
 8007e64:	0801451c 	.word	0x0801451c

08007e68 <codec_read_info_from_input>:

static sail_status_t codec_read_info_from_input(const char *input, int (*ini_parser)(const char*, ini_handler, void*), struct sail_codec_info **codec_info) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08c      	sub	sp, #48	; 0x30
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]

    struct sail_codec_info *codec_info_local;
    SAIL_TRY(alloc_codec_info(&codec_info_local));
 8007e74:	f107 0314 	add.w	r3, r7, #20
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff ff89 	bl	8007d90 <alloc_codec_info>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007e82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <codec_read_info_from_input+0x2e>
 8007e92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e94:	e098      	b.n	8007fc8 <codec_read_info_from_input+0x160>
    SAIL_TRY_OR_CLEANUP(sail_alloc_load_features(&codec_info_local->load_features),
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f003 faea 	bl	800b474 <sail_alloc_load_features>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bf14      	ite	ne
 8007eaa:	2301      	movne	r3, #1
 8007eac:	2300      	moveq	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <codec_read_info_from_input+0x58>
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f89a 	bl	8007ff0 <destroy_codec_info>
 8007ebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ebe:	e083      	b.n	8007fc8 <codec_read_info_from_input+0x160>
                        destroy_codec_info(codec_info_local));
    SAIL_TRY_OR_CLEANUP(sail_alloc_save_features(&codec_info_local->save_features),
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	3328      	adds	r3, #40	; 0x28
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f004 fd3b 	bl	800c940 <sail_alloc_save_features>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	847b      	strh	r3, [r7, #34]	; 0x22
 8007ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf14      	ite	ne
 8007ed4:	2301      	movne	r3, #1
 8007ed6:	2300      	moveq	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <codec_read_info_from_input+0x82>
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 f885 	bl	8007ff0 <destroy_codec_info>
 8007ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ee8:	e06e      	b.n	8007fc8 <codec_read_info_from_input+0x160>
                        destroy_codec_info(codec_info_local));

    struct init_data init_data;
    init_data.codec_info = codec_info_local;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	613b      	str	r3, [r7, #16]
     *  - 0 on success
     *  - line number of first error on parse error
     *  - -1 on file open error
     *  - -2 on memory allocation error (only when INI_USE_STACK is zero).
     */
    const int code = ini_parser(input, inih_handler, &init_data);
 8007eee:	f107 0210 	add.w	r2, r7, #16
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	4936      	ldr	r1, [pc, #216]	; (8007fd0 <codec_read_info_from_input+0x168>)
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	4798      	blx	r3
 8007efa:	61f8      	str	r0, [r7, #28]

    /* Success. */
    if (code == 0) {
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d136      	bne.n	8007f70 <codec_read_info_from_input+0x108>
        if (codec_info_local->layout != SAIL_CODEC_LAYOUT_V7) {
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b07      	cmp	r3, #7
 8007f08:	d019      	beq.n	8007f3e <codec_read_info_from_input+0xd6>
            SAIL_LOG_ERROR("Unsupported codec layout version %d. Please check your codec info files", codec_info_local->layout);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4b30      	ldr	r3, [pc, #192]	; (8007fd4 <codec_read_info_from_input+0x16c>)
 8007f12:	f240 1279 	movw	r2, #377	; 0x179
 8007f16:	4930      	ldr	r1, [pc, #192]	; (8007fd8 <codec_read_info_from_input+0x170>)
 8007f18:	2001      	movs	r0, #1
 8007f1a:	f003 fc63 	bl	800b7e4 <sail_log>
            destroy_codec_info(codec_info_local);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f865 	bl	8007ff0 <destroy_codec_info>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_CODEC_LAYOUT);
 8007f26:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <codec_read_info_from_input+0x174>)
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4b2d      	ldr	r3, [pc, #180]	; (8007fe0 <codec_read_info_from_input+0x178>)
 8007f2c:	f240 127b 	movw	r2, #379	; 0x17b
 8007f30:	4929      	ldr	r1, [pc, #164]	; (8007fd8 <codec_read_info_from_input+0x170>)
 8007f32:	2001      	movs	r0, #1
 8007f34:	f003 fc56 	bl	800b7e4 <sail_log>
 8007f38:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8007f3c:	e044      	b.n	8007fc8 <codec_read_info_from_input+0x160>
        }

        /* Paranoid error checks. */
        SAIL_TRY_OR_CLEANUP(check_codec_info(codec_info_local),
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fd3f 	bl	80079c4 <check_codec_info>
 8007f46:	4603      	mov	r3, r0
 8007f48:	837b      	strh	r3, [r7, #26]
 8007f4a:	8b7b      	ldrh	r3, [r7, #26]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bf14      	ite	ne
 8007f50:	2301      	movne	r3, #1
 8007f52:	2300      	moveq	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <codec_read_info_from_input+0xfe>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f847 	bl	8007ff0 <destroy_codec_info>
 8007f62:	8b7b      	ldrh	r3, [r7, #26]
 8007f64:	e030      	b.n	8007fc8 <codec_read_info_from_input+0x160>
                            /* cleanup */ destroy_codec_info(codec_info_local));

        *codec_info = codec_info_local;
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	601a      	str	r2, [r3, #0]

        return SAIL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e02b      	b.n	8007fc8 <codec_read_info_from_input+0x160>
    } else {
        destroy_codec_info(codec_info_local);
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f83c 	bl	8007ff0 <destroy_codec_info>

        switch (code) {
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f113 0f02 	cmn.w	r3, #2
 8007f7e:	d00e      	beq.n	8007f9e <codec_read_info_from_input+0x136>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f86:	d115      	bne.n	8007fb4 <codec_read_info_from_input+0x14c>
            case -1: SAIL_LOG_AND_RETURN(SAIL_ERROR_OPEN_FILE);
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <codec_read_info_from_input+0x17c>)
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <codec_read_info_from_input+0x178>)
 8007f8e:	f240 1289 	movw	r2, #393	; 0x189
 8007f92:	4911      	ldr	r1, [pc, #68]	; (8007fd8 <codec_read_info_from_input+0x170>)
 8007f94:	2001      	movs	r0, #1
 8007f96:	f003 fc25 	bl	800b7e4 <sail_log>
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e014      	b.n	8007fc8 <codec_read_info_from_input+0x160>
            case -2: SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 8007f9e:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <codec_read_info_from_input+0x180>)
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <codec_read_info_from_input+0x178>)
 8007fa4:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8007fa8:	490b      	ldr	r1, [pc, #44]	; (8007fd8 <codec_read_info_from_input+0x170>)
 8007faa:	2001      	movs	r0, #1
 8007fac:	f003 fc1a 	bl	800b7e4 <sail_log>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e009      	b.n	8007fc8 <codec_read_info_from_input+0x160>

            default: SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 8007fb4:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <codec_read_info_from_input+0x184>)
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <codec_read_info_from_input+0x178>)
 8007fba:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007fbe:	4906      	ldr	r1, [pc, #24]	; (8007fd8 <codec_read_info_from_input+0x170>)
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f003 fc0f 	bl	800b7e4 <sail_log>
 8007fc6:	2308      	movs	r3, #8
        }
    }
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3728      	adds	r7, #40	; 0x28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	08007989 	.word	0x08007989
 8007fd4:	08014b74 	.word	0x08014b74
 8007fd8:	080144bc 	.word	0x080144bc
 8007fdc:	08014bbc 	.word	0x08014bbc
 8007fe0:	0801451c 	.word	0x0801451c
 8007fe4:	08014be0 	.word	0x08014be0
 8007fe8:	08014bf8 	.word	0x08014bf8
 8007fec:	08014650 	.word	0x08014650

08007ff0 <destroy_codec_info>:

/*
 * Public functions.
 */

void destroy_codec_info(struct sail_codec_info *codec_info) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

    if (codec_info == NULL) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d030      	beq.n	8008060 <destroy_codec_info+0x70>
        return;
    }

    sail_free(codec_info->path);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f003 fd6e 	bl	800bae4 <sail_free>
    sail_free(codec_info->version);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4618      	mov	r0, r3
 800800e:	f003 fd69 	bl	800bae4 <sail_free>
    sail_free(codec_info->name);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	4618      	mov	r0, r3
 8008018:	f003 fd64 	bl	800bae4 <sail_free>
    sail_free(codec_info->description);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	4618      	mov	r0, r3
 8008022:	f003 fd5f 	bl	800bae4 <sail_free>

    sail_destroy_string_node_chain(codec_info->magic_number_node);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	4618      	mov	r0, r3
 800802c:	f004 fdac 	bl	800cb88 <sail_destroy_string_node_chain>
    sail_destroy_string_node_chain(codec_info->extension_node);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	4618      	mov	r0, r3
 8008036:	f004 fda7 	bl	800cb88 <sail_destroy_string_node_chain>
    sail_destroy_string_node_chain(codec_info->mime_type_node);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	4618      	mov	r0, r3
 8008040:	f004 fda2 	bl	800cb88 <sail_destroy_string_node_chain>

    sail_destroy_load_features(codec_info->load_features);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	4618      	mov	r0, r3
 800804a:	f003 fa5d 	bl	800b508 <sail_destroy_load_features>
    sail_destroy_save_features(codec_info->save_features);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	4618      	mov	r0, r3
 8008054:	f004 fcd6 	bl	800ca04 <sail_destroy_save_features>

    sail_free(codec_info);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f003 fd43 	bl	800bae4 <sail_free>
 800805e:	e000      	b.n	8008062 <destroy_codec_info+0x72>
        return;
 8008060:	bf00      	nop
}
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <codec_read_info_from_string>:
    SAIL_TRY(codec_read_info_from_input(path, ini_parse, codec_info));

    return SAIL_OK;
}

sail_status_t codec_read_info_from_string(const char *str, struct sail_codec_info **codec_info) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af02      	add	r7, sp, #8
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(str);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bf0c      	ite	eq
 8008078:	2301      	moveq	r3, #1
 800807a:	2300      	movne	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d013      	beq.n	80080aa <codec_read_info_from_string+0x42>
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <codec_read_info_from_string+0xa8>)
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	4b23      	ldr	r3, [pc, #140]	; (8008114 <codec_read_info_from_string+0xac>)
 8008088:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800808c:	4922      	ldr	r1, [pc, #136]	; (8008118 <codec_read_info_from_string+0xb0>)
 800808e:	2001      	movs	r0, #1
 8008090:	f003 fba8 	bl	800b7e4 <sail_log>
 8008094:	4b21      	ldr	r3, [pc, #132]	; (800811c <codec_read_info_from_string+0xb4>)
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4b21      	ldr	r3, [pc, #132]	; (8008120 <codec_read_info_from_string+0xb8>)
 800809a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800809e:	491e      	ldr	r1, [pc, #120]	; (8008118 <codec_read_info_from_string+0xb0>)
 80080a0:	2001      	movs	r0, #1
 80080a2:	f003 fb9f 	bl	800b7e4 <sail_log>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e02d      	b.n	8008106 <codec_read_info_from_string+0x9e>
    SAIL_CHECK_PTR(codec_info);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bf0c      	ite	eq
 80080b0:	2301      	moveq	r3, #1
 80080b2:	2300      	movne	r3, #0
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <codec_read_info_from_string+0x7a>
 80080ba:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <codec_read_info_from_string+0xbc>)
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	4b15      	ldr	r3, [pc, #84]	; (8008114 <codec_read_info_from_string+0xac>)
 80080c0:	f240 12b9 	movw	r2, #441	; 0x1b9
 80080c4:	4914      	ldr	r1, [pc, #80]	; (8008118 <codec_read_info_from_string+0xb0>)
 80080c6:	2001      	movs	r0, #1
 80080c8:	f003 fb8c 	bl	800b7e4 <sail_log>
 80080cc:	4b13      	ldr	r3, [pc, #76]	; (800811c <codec_read_info_from_string+0xb4>)
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	4b13      	ldr	r3, [pc, #76]	; (8008120 <codec_read_info_from_string+0xb8>)
 80080d2:	f240 12b9 	movw	r2, #441	; 0x1b9
 80080d6:	4910      	ldr	r1, [pc, #64]	; (8008118 <codec_read_info_from_string+0xb0>)
 80080d8:	2001      	movs	r0, #1
 80080da:	f003 fb83 	bl	800b7e4 <sail_log>
 80080de:	2301      	movs	r3, #1
 80080e0:	e011      	b.n	8008106 <codec_read_info_from_string+0x9e>

    SAIL_TRY(codec_read_info_from_input(str, ini_parse_string, codec_info));
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4910      	ldr	r1, [pc, #64]	; (8008128 <codec_read_info_from_string+0xc0>)
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff febe 	bl	8007e68 <codec_read_info_from_input>
 80080ec:	4603      	mov	r3, r0
 80080ee:	81fb      	strh	r3, [r7, #14]
 80080f0:	89fb      	ldrh	r3, [r7, #14]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bf14      	ite	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	2300      	moveq	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <codec_read_info_from_string+0x9c>
 8008100:	89fb      	ldrh	r3, [r7, #14]
 8008102:	e000      	b.n	8008106 <codec_read_info_from_string+0x9e>

    return SAIL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	08014c38 	.word	0x08014c38
 8008114:	080144a4 	.word	0x080144a4
 8008118:	080144bc 	.word	0x080144bc
 800811c:	08014520 	.word	0x08014520
 8008120:	0801451c 	.word	0x0801451c
 8008124:	08014b68 	.word	0x08014b68
 8008128:	0800a909 	.word	0x0800a909

0800812c <sail_pixel_format_from_string>:
    }

    return NULL;
}

enum SailPixelFormat sail_pixel_format_from_string(const char *str) {
 800812c:	b5b0      	push	{r4, r5, r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 8008134:	f107 0308 	add.w	r3, r7, #8
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f004 fec8 	bl	800ced0 <sail_string_hash>
 8008140:	4603      	mov	r3, r0
 8008142:	82fb      	strh	r3, [r7, #22]
 8008144:	8afb      	ldrh	r3, [r7, #22]
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf14      	ite	ne
 800814a:	2301      	movne	r3, #1
 800814c:	2300      	moveq	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <sail_pixel_format_from_string+0x2e>
 8008154:	2300      	movs	r3, #0
 8008156:	f000 bde4 	b.w	8008d22 <sail_pixel_format_from_string+0xbf6>
     * extra data structures and initializations. It's not C++11, so we choose between two evils:
     *
     *     1. Introduce extra data structures and their initializations to work with hashes.
     *     2. Use a single ugly looking switch/case.
     */
    switch (hash) {
 800815a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800815e:	48b2      	ldr	r0, [pc, #712]	; (8008428 <sail_pixel_format_from_string+0x2fc>)
 8008160:	49b2      	ldr	r1, [pc, #712]	; (800842c <sail_pixel_format_from_string+0x300>)
 8008162:	428b      	cmp	r3, r1
 8008164:	bf08      	it	eq
 8008166:	4282      	cmpeq	r2, r0
 8008168:	f000 85be 	beq.w	8008ce8 <sail_pixel_format_from_string+0xbbc>
 800816c:	49b0      	ldr	r1, [pc, #704]	; (8008430 <sail_pixel_format_from_string+0x304>)
 800816e:	428a      	cmp	r2, r1
 8008170:	49ae      	ldr	r1, [pc, #696]	; (800842c <sail_pixel_format_from_string+0x300>)
 8008172:	eb73 0101 	sbcs.w	r1, r3, r1
 8008176:	f080 85d3 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800817a:	48ae      	ldr	r0, [pc, #696]	; (8008434 <sail_pixel_format_from_string+0x308>)
 800817c:	49ae      	ldr	r1, [pc, #696]	; (8008438 <sail_pixel_format_from_string+0x30c>)
 800817e:	428b      	cmp	r3, r1
 8008180:	bf08      	it	eq
 8008182:	4282      	cmpeq	r2, r0
 8008184:	f000 84fa 	beq.w	8008b7c <sail_pixel_format_from_string+0xa50>
 8008188:	49ac      	ldr	r1, [pc, #688]	; (800843c <sail_pixel_format_from_string+0x310>)
 800818a:	428a      	cmp	r2, r1
 800818c:	49aa      	ldr	r1, [pc, #680]	; (8008438 <sail_pixel_format_from_string+0x30c>)
 800818e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008192:	f080 85c5 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008196:	48aa      	ldr	r0, [pc, #680]	; (8008440 <sail_pixel_format_from_string+0x314>)
 8008198:	49aa      	ldr	r1, [pc, #680]	; (8008444 <sail_pixel_format_from_string+0x318>)
 800819a:	428b      	cmp	r3, r1
 800819c:	bf08      	it	eq
 800819e:	4282      	cmpeq	r2, r0
 80081a0:	f000 84ea 	beq.w	8008b78 <sail_pixel_format_from_string+0xa4c>
 80081a4:	49a8      	ldr	r1, [pc, #672]	; (8008448 <sail_pixel_format_from_string+0x31c>)
 80081a6:	428a      	cmp	r2, r1
 80081a8:	49a6      	ldr	r1, [pc, #664]	; (8008444 <sail_pixel_format_from_string+0x318>)
 80081aa:	eb73 0101 	sbcs.w	r1, r3, r1
 80081ae:	f080 85b7 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80081b2:	48a6      	ldr	r0, [pc, #664]	; (800844c <sail_pixel_format_from_string+0x320>)
 80081b4:	49a6      	ldr	r1, [pc, #664]	; (8008450 <sail_pixel_format_from_string+0x324>)
 80081b6:	428b      	cmp	r3, r1
 80081b8:	bf08      	it	eq
 80081ba:	4282      	cmpeq	r2, r0
 80081bc:	f000 84da 	beq.w	8008b74 <sail_pixel_format_from_string+0xa48>
 80081c0:	49a4      	ldr	r1, [pc, #656]	; (8008454 <sail_pixel_format_from_string+0x328>)
 80081c2:	428a      	cmp	r2, r1
 80081c4:	49a2      	ldr	r1, [pc, #648]	; (8008450 <sail_pixel_format_from_string+0x324>)
 80081c6:	eb73 0101 	sbcs.w	r1, r3, r1
 80081ca:	f080 85a9 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80081ce:	48a2      	ldr	r0, [pc, #648]	; (8008458 <sail_pixel_format_from_string+0x32c>)
 80081d0:	49a2      	ldr	r1, [pc, #648]	; (800845c <sail_pixel_format_from_string+0x330>)
 80081d2:	428b      	cmp	r3, r1
 80081d4:	bf08      	it	eq
 80081d6:	4282      	cmpeq	r2, r0
 80081d8:	f000 84ea 	beq.w	8008bb0 <sail_pixel_format_from_string+0xa84>
 80081dc:	49a0      	ldr	r1, [pc, #640]	; (8008460 <sail_pixel_format_from_string+0x334>)
 80081de:	428a      	cmp	r2, r1
 80081e0:	499e      	ldr	r1, [pc, #632]	; (800845c <sail_pixel_format_from_string+0x330>)
 80081e2:	eb73 0101 	sbcs.w	r1, r3, r1
 80081e6:	f080 859b 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80081ea:	489e      	ldr	r0, [pc, #632]	; (8008464 <sail_pixel_format_from_string+0x338>)
 80081ec:	499b      	ldr	r1, [pc, #620]	; (800845c <sail_pixel_format_from_string+0x330>)
 80081ee:	428b      	cmp	r3, r1
 80081f0:	bf08      	it	eq
 80081f2:	4282      	cmpeq	r2, r0
 80081f4:	f000 84d8 	beq.w	8008ba8 <sail_pixel_format_from_string+0xa7c>
 80081f8:	499b      	ldr	r1, [pc, #620]	; (8008468 <sail_pixel_format_from_string+0x33c>)
 80081fa:	428a      	cmp	r2, r1
 80081fc:	4997      	ldr	r1, [pc, #604]	; (800845c <sail_pixel_format_from_string+0x330>)
 80081fe:	eb73 0101 	sbcs.w	r1, r3, r1
 8008202:	f080 858d 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008206:	4899      	ldr	r0, [pc, #612]	; (800846c <sail_pixel_format_from_string+0x340>)
 8008208:	4994      	ldr	r1, [pc, #592]	; (800845c <sail_pixel_format_from_string+0x330>)
 800820a:	428b      	cmp	r3, r1
 800820c:	bf08      	it	eq
 800820e:	4282      	cmpeq	r2, r0
 8008210:	f000 852c 	beq.w	8008c6c <sail_pixel_format_from_string+0xb40>
 8008214:	4996      	ldr	r1, [pc, #600]	; (8008470 <sail_pixel_format_from_string+0x344>)
 8008216:	428a      	cmp	r2, r1
 8008218:	4990      	ldr	r1, [pc, #576]	; (800845c <sail_pixel_format_from_string+0x330>)
 800821a:	eb73 0101 	sbcs.w	r1, r3, r1
 800821e:	f080 857f 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008222:	4894      	ldr	r0, [pc, #592]	; (8008474 <sail_pixel_format_from_string+0x348>)
 8008224:	498d      	ldr	r1, [pc, #564]	; (800845c <sail_pixel_format_from_string+0x330>)
 8008226:	428b      	cmp	r3, r1
 8008228:	bf08      	it	eq
 800822a:	4282      	cmpeq	r2, r0
 800822c:	f000 84be 	beq.w	8008bac <sail_pixel_format_from_string+0xa80>
 8008230:	4991      	ldr	r1, [pc, #580]	; (8008478 <sail_pixel_format_from_string+0x34c>)
 8008232:	428a      	cmp	r2, r1
 8008234:	4989      	ldr	r1, [pc, #548]	; (800845c <sail_pixel_format_from_string+0x330>)
 8008236:	eb73 0101 	sbcs.w	r1, r3, r1
 800823a:	f080 8571 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800823e:	488f      	ldr	r0, [pc, #572]	; (800847c <sail_pixel_format_from_string+0x350>)
 8008240:	498f      	ldr	r1, [pc, #572]	; (8008480 <sail_pixel_format_from_string+0x354>)
 8008242:	428b      	cmp	r3, r1
 8008244:	bf08      	it	eq
 8008246:	4282      	cmpeq	r2, r0
 8008248:	f000 8492 	beq.w	8008b70 <sail_pixel_format_from_string+0xa44>
 800824c:	498d      	ldr	r1, [pc, #564]	; (8008484 <sail_pixel_format_from_string+0x358>)
 800824e:	428a      	cmp	r2, r1
 8008250:	498b      	ldr	r1, [pc, #556]	; (8008480 <sail_pixel_format_from_string+0x354>)
 8008252:	eb73 0101 	sbcs.w	r1, r3, r1
 8008256:	f080 8563 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800825a:	488b      	ldr	r0, [pc, #556]	; (8008488 <sail_pixel_format_from_string+0x35c>)
 800825c:	498b      	ldr	r1, [pc, #556]	; (800848c <sail_pixel_format_from_string+0x360>)
 800825e:	428b      	cmp	r3, r1
 8008260:	bf08      	it	eq
 8008262:	4282      	cmpeq	r2, r0
 8008264:	f000 854a 	beq.w	8008cfc <sail_pixel_format_from_string+0xbd0>
 8008268:	4989      	ldr	r1, [pc, #548]	; (8008490 <sail_pixel_format_from_string+0x364>)
 800826a:	428a      	cmp	r2, r1
 800826c:	4987      	ldr	r1, [pc, #540]	; (800848c <sail_pixel_format_from_string+0x360>)
 800826e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008272:	f080 8555 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008276:	4887      	ldr	r0, [pc, #540]	; (8008494 <sail_pixel_format_from_string+0x368>)
 8008278:	4984      	ldr	r1, [pc, #528]	; (800848c <sail_pixel_format_from_string+0x360>)
 800827a:	428b      	cmp	r3, r1
 800827c:	bf08      	it	eq
 800827e:	4282      	cmpeq	r2, r0
 8008280:	f000 8538 	beq.w	8008cf4 <sail_pixel_format_from_string+0xbc8>
 8008284:	4984      	ldr	r1, [pc, #528]	; (8008498 <sail_pixel_format_from_string+0x36c>)
 8008286:	428a      	cmp	r2, r1
 8008288:	4980      	ldr	r1, [pc, #512]	; (800848c <sail_pixel_format_from_string+0x360>)
 800828a:	eb73 0101 	sbcs.w	r1, r3, r1
 800828e:	f080 8547 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008292:	4882      	ldr	r0, [pc, #520]	; (800849c <sail_pixel_format_from_string+0x370>)
 8008294:	4982      	ldr	r1, [pc, #520]	; (80084a0 <sail_pixel_format_from_string+0x374>)
 8008296:	428b      	cmp	r3, r1
 8008298:	bf08      	it	eq
 800829a:	4282      	cmpeq	r2, r0
 800829c:	f000 852c 	beq.w	8008cf8 <sail_pixel_format_from_string+0xbcc>
 80082a0:	4980      	ldr	r1, [pc, #512]	; (80084a4 <sail_pixel_format_from_string+0x378>)
 80082a2:	428a      	cmp	r2, r1
 80082a4:	497e      	ldr	r1, [pc, #504]	; (80084a0 <sail_pixel_format_from_string+0x374>)
 80082a6:	eb73 0101 	sbcs.w	r1, r3, r1
 80082aa:	f080 8539 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80082ae:	487e      	ldr	r0, [pc, #504]	; (80084a8 <sail_pixel_format_from_string+0x37c>)
 80082b0:	497b      	ldr	r1, [pc, #492]	; (80084a0 <sail_pixel_format_from_string+0x374>)
 80082b2:	428b      	cmp	r3, r1
 80082b4:	bf08      	it	eq
 80082b6:	4282      	cmpeq	r2, r0
 80082b8:	f000 851a 	beq.w	8008cf0 <sail_pixel_format_from_string+0xbc4>
 80082bc:	497b      	ldr	r1, [pc, #492]	; (80084ac <sail_pixel_format_from_string+0x380>)
 80082be:	428a      	cmp	r2, r1
 80082c0:	4977      	ldr	r1, [pc, #476]	; (80084a0 <sail_pixel_format_from_string+0x374>)
 80082c2:	eb73 0101 	sbcs.w	r1, r3, r1
 80082c6:	f080 852b 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80082ca:	4879      	ldr	r0, [pc, #484]	; (80084b0 <sail_pixel_format_from_string+0x384>)
 80082cc:	4979      	ldr	r1, [pc, #484]	; (80084b4 <sail_pixel_format_from_string+0x388>)
 80082ce:	428b      	cmp	r3, r1
 80082d0:	bf08      	it	eq
 80082d2:	4282      	cmpeq	r2, r0
 80082d4:	f000 8454 	beq.w	8008b80 <sail_pixel_format_from_string+0xa54>
 80082d8:	4977      	ldr	r1, [pc, #476]	; (80084b8 <sail_pixel_format_from_string+0x38c>)
 80082da:	428a      	cmp	r2, r1
 80082dc:	4975      	ldr	r1, [pc, #468]	; (80084b4 <sail_pixel_format_from_string+0x388>)
 80082de:	eb73 0101 	sbcs.w	r1, r3, r1
 80082e2:	f080 851d 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80082e6:	4875      	ldr	r0, [pc, #468]	; (80084bc <sail_pixel_format_from_string+0x390>)
 80082e8:	4975      	ldr	r1, [pc, #468]	; (80084c0 <sail_pixel_format_from_string+0x394>)
 80082ea:	428b      	cmp	r3, r1
 80082ec:	bf08      	it	eq
 80082ee:	4282      	cmpeq	r2, r0
 80082f0:	f000 844e 	beq.w	8008b90 <sail_pixel_format_from_string+0xa64>
 80082f4:	4973      	ldr	r1, [pc, #460]	; (80084c4 <sail_pixel_format_from_string+0x398>)
 80082f6:	428a      	cmp	r2, r1
 80082f8:	4971      	ldr	r1, [pc, #452]	; (80084c0 <sail_pixel_format_from_string+0x394>)
 80082fa:	eb73 0101 	sbcs.w	r1, r3, r1
 80082fe:	f080 850f 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008302:	4871      	ldr	r0, [pc, #452]	; (80084c8 <sail_pixel_format_from_string+0x39c>)
 8008304:	4971      	ldr	r1, [pc, #452]	; (80084cc <sail_pixel_format_from_string+0x3a0>)
 8008306:	428b      	cmp	r3, r1
 8008308:	bf08      	it	eq
 800830a:	4282      	cmpeq	r2, r0
 800830c:	f000 843e 	beq.w	8008b8c <sail_pixel_format_from_string+0xa60>
 8008310:	496f      	ldr	r1, [pc, #444]	; (80084d0 <sail_pixel_format_from_string+0x3a4>)
 8008312:	428a      	cmp	r2, r1
 8008314:	496d      	ldr	r1, [pc, #436]	; (80084cc <sail_pixel_format_from_string+0x3a0>)
 8008316:	eb73 0101 	sbcs.w	r1, r3, r1
 800831a:	f080 8501 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800831e:	486d      	ldr	r0, [pc, #436]	; (80084d4 <sail_pixel_format_from_string+0x3a8>)
 8008320:	496d      	ldr	r1, [pc, #436]	; (80084d8 <sail_pixel_format_from_string+0x3ac>)
 8008322:	428b      	cmp	r3, r1
 8008324:	bf08      	it	eq
 8008326:	4282      	cmpeq	r2, r0
 8008328:	f000 842e 	beq.w	8008b88 <sail_pixel_format_from_string+0xa5c>
 800832c:	496b      	ldr	r1, [pc, #428]	; (80084dc <sail_pixel_format_from_string+0x3b0>)
 800832e:	428a      	cmp	r2, r1
 8008330:	4969      	ldr	r1, [pc, #420]	; (80084d8 <sail_pixel_format_from_string+0x3ac>)
 8008332:	eb73 0101 	sbcs.w	r1, r3, r1
 8008336:	f080 84f3 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800833a:	4869      	ldr	r0, [pc, #420]	; (80084e0 <sail_pixel_format_from_string+0x3b4>)
 800833c:	4969      	ldr	r1, [pc, #420]	; (80084e4 <sail_pixel_format_from_string+0x3b8>)
 800833e:	428b      	cmp	r3, r1
 8008340:	bf08      	it	eq
 8008342:	4282      	cmpeq	r2, r0
 8008344:	f000 841e 	beq.w	8008b84 <sail_pixel_format_from_string+0xa58>
 8008348:	4967      	ldr	r1, [pc, #412]	; (80084e8 <sail_pixel_format_from_string+0x3bc>)
 800834a:	428a      	cmp	r2, r1
 800834c:	4965      	ldr	r1, [pc, #404]	; (80084e4 <sail_pixel_format_from_string+0x3b8>)
 800834e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008352:	f080 84e5 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008356:	4865      	ldr	r0, [pc, #404]	; (80084ec <sail_pixel_format_from_string+0x3c0>)
 8008358:	4965      	ldr	r1, [pc, #404]	; (80084f0 <sail_pixel_format_from_string+0x3c4>)
 800835a:	428b      	cmp	r3, r1
 800835c:	bf08      	it	eq
 800835e:	4282      	cmpeq	r2, r0
 8008360:	f000 841c 	beq.w	8008b9c <sail_pixel_format_from_string+0xa70>
 8008364:	4963      	ldr	r1, [pc, #396]	; (80084f4 <sail_pixel_format_from_string+0x3c8>)
 8008366:	428a      	cmp	r2, r1
 8008368:	4961      	ldr	r1, [pc, #388]	; (80084f0 <sail_pixel_format_from_string+0x3c4>)
 800836a:	eb73 0101 	sbcs.w	r1, r3, r1
 800836e:	f080 84d7 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008372:	4861      	ldr	r0, [pc, #388]	; (80084f8 <sail_pixel_format_from_string+0x3cc>)
 8008374:	4961      	ldr	r1, [pc, #388]	; (80084fc <sail_pixel_format_from_string+0x3d0>)
 8008376:	428b      	cmp	r3, r1
 8008378:	bf08      	it	eq
 800837a:	4282      	cmpeq	r2, r0
 800837c:	f000 840c 	beq.w	8008b98 <sail_pixel_format_from_string+0xa6c>
 8008380:	495f      	ldr	r1, [pc, #380]	; (8008500 <sail_pixel_format_from_string+0x3d4>)
 8008382:	428a      	cmp	r2, r1
 8008384:	495d      	ldr	r1, [pc, #372]	; (80084fc <sail_pixel_format_from_string+0x3d0>)
 8008386:	eb73 0101 	sbcs.w	r1, r3, r1
 800838a:	f080 84c9 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800838e:	485d      	ldr	r0, [pc, #372]	; (8008504 <sail_pixel_format_from_string+0x3d8>)
 8008390:	495d      	ldr	r1, [pc, #372]	; (8008508 <sail_pixel_format_from_string+0x3dc>)
 8008392:	428b      	cmp	r3, r1
 8008394:	bf08      	it	eq
 8008396:	4282      	cmpeq	r2, r0
 8008398:	f000 83fc 	beq.w	8008b94 <sail_pixel_format_from_string+0xa68>
 800839c:	495b      	ldr	r1, [pc, #364]	; (800850c <sail_pixel_format_from_string+0x3e0>)
 800839e:	428a      	cmp	r2, r1
 80083a0:	4959      	ldr	r1, [pc, #356]	; (8008508 <sail_pixel_format_from_string+0x3dc>)
 80083a2:	eb73 0101 	sbcs.w	r1, r3, r1
 80083a6:	f080 84bb 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80083aa:	4859      	ldr	r0, [pc, #356]	; (8008510 <sail_pixel_format_from_string+0x3e4>)
 80083ac:	4959      	ldr	r1, [pc, #356]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 80083ae:	428b      	cmp	r3, r1
 80083b0:	bf08      	it	eq
 80083b2:	4282      	cmpeq	r2, r0
 80083b4:	f000 84b2 	beq.w	8008d1c <sail_pixel_format_from_string+0xbf0>
 80083b8:	4957      	ldr	r1, [pc, #348]	; (8008518 <sail_pixel_format_from_string+0x3ec>)
 80083ba:	428a      	cmp	r2, r1
 80083bc:	4955      	ldr	r1, [pc, #340]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 80083be:	eb73 0101 	sbcs.w	r1, r3, r1
 80083c2:	f080 84ad 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80083c6:	4855      	ldr	r0, [pc, #340]	; (800851c <sail_pixel_format_from_string+0x3f0>)
 80083c8:	4952      	ldr	r1, [pc, #328]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 80083ca:	428b      	cmp	r3, r1
 80083cc:	bf08      	it	eq
 80083ce:	4282      	cmpeq	r2, r0
 80083d0:	f000 847a 	beq.w	8008cc8 <sail_pixel_format_from_string+0xb9c>
 80083d4:	4952      	ldr	r1, [pc, #328]	; (8008520 <sail_pixel_format_from_string+0x3f4>)
 80083d6:	428a      	cmp	r2, r1
 80083d8:	494e      	ldr	r1, [pc, #312]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 80083da:	eb73 0101 	sbcs.w	r1, r3, r1
 80083de:	f080 849f 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80083e2:	4850      	ldr	r0, [pc, #320]	; (8008524 <sail_pixel_format_from_string+0x3f8>)
 80083e4:	494b      	ldr	r1, [pc, #300]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 80083e6:	428b      	cmp	r3, r1
 80083e8:	bf08      	it	eq
 80083ea:	4282      	cmpeq	r2, r0
 80083ec:	f000 846e 	beq.w	8008ccc <sail_pixel_format_from_string+0xba0>
 80083f0:	494d      	ldr	r1, [pc, #308]	; (8008528 <sail_pixel_format_from_string+0x3fc>)
 80083f2:	428a      	cmp	r2, r1
 80083f4:	4947      	ldr	r1, [pc, #284]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 80083f6:	eb73 0101 	sbcs.w	r1, r3, r1
 80083fa:	f080 8491 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80083fe:	484b      	ldr	r0, [pc, #300]	; (800852c <sail_pixel_format_from_string+0x400>)
 8008400:	4944      	ldr	r1, [pc, #272]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 8008402:	428b      	cmp	r3, r1
 8008404:	bf08      	it	eq
 8008406:	4282      	cmpeq	r2, r0
 8008408:	f000 845a 	beq.w	8008cc0 <sail_pixel_format_from_string+0xb94>
 800840c:	4948      	ldr	r1, [pc, #288]	; (8008530 <sail_pixel_format_from_string+0x404>)
 800840e:	428a      	cmp	r2, r1
 8008410:	4940      	ldr	r1, [pc, #256]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 8008412:	eb73 0101 	sbcs.w	r1, r3, r1
 8008416:	f080 8483 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800841a:	4846      	ldr	r0, [pc, #280]	; (8008534 <sail_pixel_format_from_string+0x408>)
 800841c:	493d      	ldr	r1, [pc, #244]	; (8008514 <sail_pixel_format_from_string+0x3e8>)
 800841e:	428b      	cmp	r3, r1
 8008420:	bf08      	it	eq
 8008422:	4282      	cmpeq	r2, r0
 8008424:	e088      	b.n	8008538 <sail_pixel_format_from_string+0x40c>
 8008426:	bf00      	nop
 8008428:	2e99a0ad 	.word	0x2e99a0ad
 800842c:	bfc1deac 	.word	0xbfc1deac
 8008430:	2e99a0ae 	.word	0x2e99a0ae
 8008434:	98b585ed 	.word	0x98b585ed
 8008438:	b7fdbba1 	.word	0xb7fdbba1
 800843c:	98b585ee 	.word	0x98b585ee
 8008440:	c6c3c1e9 	.word	0xc6c3c1e9
 8008444:	b7fdb683 	.word	0xb7fdb683
 8008448:	c6c3c1ea 	.word	0xc6c3c1ea
 800844c:	ddcadfe7 	.word	0xddcadfe7
 8008450:	b7fdb3f4 	.word	0xb7fdb3f4
 8008454:	ddcadfe8 	.word	0xddcadfe8
 8008458:	55c8f5b6 	.word	0x55c8f5b6
 800845c:	b7fdb2fe 	.word	0xb7fdb2fe
 8008460:	55c8f5b7 	.word	0x55c8f5b7
 8008464:	55c8f595 	.word	0x55c8f595
 8008468:	55c8f596 	.word	0x55c8f596
 800846c:	307f31b6 	.word	0x307f31b6
 8008470:	307f31b7 	.word	0x307f31b7
 8008474:	307f3195 	.word	0x307f3195
 8008478:	307f3196 	.word	0x307f3196
 800847c:	694e6ee6 	.word	0x694e6ee6
 8008480:	b7fdb2ad 	.word	0xb7fdb2ad
 8008484:	694e6ee7 	.word	0x694e6ee7
 8008488:	e24fc44d 	.word	0xe24fc44d
 800848c:	b7b489b9 	.word	0xb7b489b9
 8008490:	e24fc44e 	.word	0xe24fc44e
 8008494:	e24fc1a5 	.word	0xe24fc1a5
 8008498:	e24fc1a6 	.word	0xe24fc1a6
 800849c:	ac2c660f 	.word	0xac2c660f
 80084a0:	b7b43a6b 	.word	0xb7b43a6b
 80084a4:	ac2c6610 	.word	0xac2c6610
 80084a8:	ac2c6367 	.word	0xac2c6367
 80084ac:	ac2c6368 	.word	0xac2c6368
 80084b0:	6a9d301c 	.word	0x6a9d301c
 80084b4:	b7b412c6 	.word	0xb7b412c6
 80084b8:	6a9d301d 	.word	0x6a9d301d
 80084bc:	ab9a0707 	.word	0xab9a0707
 80084c0:	ae5b2802 	.word	0xae5b2802
 80084c4:	ab9a0708 	.word	0xab9a0708
 80084c8:	96273203 	.word	0x96273203
 80084cc:	ae456428 	.word	0xae456428
 80084d0:	96273204 	.word	0x96273204
 80084d4:	8b6dc781 	.word	0x8b6dc781
 80084d8:	ae3a823b 	.word	0xae3a823b
 80084dc:	8b6dc782 	.word	0x8b6dc782
 80084e0:	06111240 	.word	0x06111240
 80084e4:	ae351145 	.word	0xae351145
 80084e8:	06111241 	.word	0x06111241
 80084ec:	d75657fa 	.word	0xd75657fa
 80084f0:	ada718bc 	.word	0xada718bc
 80084f4:	d75657fb 	.word	0xd75657fb
 80084f8:	8beecff6 	.word	0x8beecff6
 80084fc:	82004aea 	.word	0x82004aea
 8008500:	8beecff7 	.word	0x8beecff7
 8008504:	9614f8f6 	.word	0x9614f8f6
 8008508:	7503dba3 	.word	0x7503dba3
 800850c:	9614f8f7 	.word	0x9614f8f7
 8008510:	3552c323 	.word	0x3552c323
 8008514:	726ab92d 	.word	0x726ab92d
 8008518:	3552c324 	.word	0x3552c324
 800851c:	35522811 	.word	0x35522811
 8008520:	35522812 	.word	0x35522812
 8008524:	3551e411 	.word	0x3551e411
 8008528:	3551e412 	.word	0x3551e412
 800852c:	354eae71 	.word	0x354eae71
 8008530:	354eae72 	.word	0x354eae72
 8008534:	354eae5a 	.word	0x354eae5a
 8008538:	f000 83ca 	beq.w	8008cd0 <sail_pixel_format_from_string+0xba4>
 800853c:	49b1      	ldr	r1, [pc, #708]	; (8008804 <sail_pixel_format_from_string+0x6d8>)
 800853e:	428a      	cmp	r2, r1
 8008540:	49b1      	ldr	r1, [pc, #708]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 8008542:	eb73 0101 	sbcs.w	r1, r3, r1
 8008546:	f080 83eb 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800854a:	48b0      	ldr	r0, [pc, #704]	; (800880c <sail_pixel_format_from_string+0x6e0>)
 800854c:	49ae      	ldr	r1, [pc, #696]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 800854e:	428b      	cmp	r3, r1
 8008550:	bf08      	it	eq
 8008552:	4282      	cmpeq	r2, r0
 8008554:	f000 83c6 	beq.w	8008ce4 <sail_pixel_format_from_string+0xbb8>
 8008558:	49ad      	ldr	r1, [pc, #692]	; (8008810 <sail_pixel_format_from_string+0x6e4>)
 800855a:	428a      	cmp	r2, r1
 800855c:	49aa      	ldr	r1, [pc, #680]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 800855e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008562:	f080 83dd 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008566:	48ab      	ldr	r0, [pc, #684]	; (8008814 <sail_pixel_format_from_string+0x6e8>)
 8008568:	49a7      	ldr	r1, [pc, #668]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 800856a:	428b      	cmp	r3, r1
 800856c:	bf08      	it	eq
 800856e:	4282      	cmpeq	r2, r0
 8008570:	f000 83a8 	beq.w	8008cc4 <sail_pixel_format_from_string+0xb98>
 8008574:	49a8      	ldr	r1, [pc, #672]	; (8008818 <sail_pixel_format_from_string+0x6ec>)
 8008576:	428a      	cmp	r2, r1
 8008578:	49a3      	ldr	r1, [pc, #652]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 800857a:	eb73 0101 	sbcs.w	r1, r3, r1
 800857e:	f080 83cf 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008582:	48a6      	ldr	r0, [pc, #664]	; (800881c <sail_pixel_format_from_string+0x6f0>)
 8008584:	49a0      	ldr	r1, [pc, #640]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 8008586:	428b      	cmp	r3, r1
 8008588:	bf08      	it	eq
 800858a:	4282      	cmpeq	r2, r0
 800858c:	f000 83a2 	beq.w	8008cd4 <sail_pixel_format_from_string+0xba8>
 8008590:	49a3      	ldr	r1, [pc, #652]	; (8008820 <sail_pixel_format_from_string+0x6f4>)
 8008592:	428a      	cmp	r2, r1
 8008594:	499c      	ldr	r1, [pc, #624]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 8008596:	eb73 0101 	sbcs.w	r1, r3, r1
 800859a:	f080 83c1 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800859e:	48a1      	ldr	r0, [pc, #644]	; (8008824 <sail_pixel_format_from_string+0x6f8>)
 80085a0:	4999      	ldr	r1, [pc, #612]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 80085a2:	428b      	cmp	r3, r1
 80085a4:	bf08      	it	eq
 80085a6:	4282      	cmpeq	r2, r0
 80085a8:	f000 8396 	beq.w	8008cd8 <sail_pixel_format_from_string+0xbac>
 80085ac:	499e      	ldr	r1, [pc, #632]	; (8008828 <sail_pixel_format_from_string+0x6fc>)
 80085ae:	428a      	cmp	r2, r1
 80085b0:	4995      	ldr	r1, [pc, #596]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 80085b2:	eb73 0101 	sbcs.w	r1, r3, r1
 80085b6:	f080 83b3 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80085ba:	489c      	ldr	r0, [pc, #624]	; (800882c <sail_pixel_format_from_string+0x700>)
 80085bc:	4992      	ldr	r1, [pc, #584]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 80085be:	428b      	cmp	r3, r1
 80085c0:	bf08      	it	eq
 80085c2:	4282      	cmpeq	r2, r0
 80085c4:	f000 838a 	beq.w	8008cdc <sail_pixel_format_from_string+0xbb0>
 80085c8:	4999      	ldr	r1, [pc, #612]	; (8008830 <sail_pixel_format_from_string+0x704>)
 80085ca:	428a      	cmp	r2, r1
 80085cc:	498e      	ldr	r1, [pc, #568]	; (8008808 <sail_pixel_format_from_string+0x6dc>)
 80085ce:	eb73 0101 	sbcs.w	r1, r3, r1
 80085d2:	f080 83a5 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80085d6:	4897      	ldr	r0, [pc, #604]	; (8008834 <sail_pixel_format_from_string+0x708>)
 80085d8:	4997      	ldr	r1, [pc, #604]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80085da:	428b      	cmp	r3, r1
 80085dc:	bf08      	it	eq
 80085de:	4282      	cmpeq	r2, r0
 80085e0:	f000 839a 	beq.w	8008d18 <sail_pixel_format_from_string+0xbec>
 80085e4:	4995      	ldr	r1, [pc, #596]	; (800883c <sail_pixel_format_from_string+0x710>)
 80085e6:	428a      	cmp	r2, r1
 80085e8:	4993      	ldr	r1, [pc, #588]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80085ea:	eb73 0101 	sbcs.w	r1, r3, r1
 80085ee:	f080 8397 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80085f2:	4893      	ldr	r0, [pc, #588]	; (8008840 <sail_pixel_format_from_string+0x714>)
 80085f4:	4990      	ldr	r1, [pc, #576]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80085f6:	428b      	cmp	r3, r1
 80085f8:	bf08      	it	eq
 80085fa:	4282      	cmpeq	r2, r0
 80085fc:	f000 838a 	beq.w	8008d14 <sail_pixel_format_from_string+0xbe8>
 8008600:	4990      	ldr	r1, [pc, #576]	; (8008844 <sail_pixel_format_from_string+0x718>)
 8008602:	428a      	cmp	r2, r1
 8008604:	498c      	ldr	r1, [pc, #560]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008606:	eb73 0101 	sbcs.w	r1, r3, r1
 800860a:	f080 8389 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800860e:	488e      	ldr	r0, [pc, #568]	; (8008848 <sail_pixel_format_from_string+0x71c>)
 8008610:	4989      	ldr	r1, [pc, #548]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008612:	428b      	cmp	r3, r1
 8008614:	bf08      	it	eq
 8008616:	4282      	cmpeq	r2, r0
 8008618:	f000 837a 	beq.w	8008d10 <sail_pixel_format_from_string+0xbe4>
 800861c:	498b      	ldr	r1, [pc, #556]	; (800884c <sail_pixel_format_from_string+0x720>)
 800861e:	428a      	cmp	r2, r1
 8008620:	4985      	ldr	r1, [pc, #532]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008622:	eb73 0101 	sbcs.w	r1, r3, r1
 8008626:	f080 837b 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800862a:	4889      	ldr	r0, [pc, #548]	; (8008850 <sail_pixel_format_from_string+0x724>)
 800862c:	4982      	ldr	r1, [pc, #520]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800862e:	428b      	cmp	r3, r1
 8008630:	bf08      	it	eq
 8008632:	4282      	cmpeq	r2, r0
 8008634:	f000 835a 	beq.w	8008cec <sail_pixel_format_from_string+0xbc0>
 8008638:	4986      	ldr	r1, [pc, #536]	; (8008854 <sail_pixel_format_from_string+0x728>)
 800863a:	428a      	cmp	r2, r1
 800863c:	497e      	ldr	r1, [pc, #504]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800863e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008642:	f080 836d 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008646:	4884      	ldr	r0, [pc, #528]	; (8008858 <sail_pixel_format_from_string+0x72c>)
 8008648:	497b      	ldr	r1, [pc, #492]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800864a:	428b      	cmp	r3, r1
 800864c:	bf08      	it	eq
 800864e:	4282      	cmpeq	r2, r0
 8008650:	f000 832a 	beq.w	8008ca8 <sail_pixel_format_from_string+0xb7c>
 8008654:	4981      	ldr	r1, [pc, #516]	; (800885c <sail_pixel_format_from_string+0x730>)
 8008656:	428a      	cmp	r2, r1
 8008658:	4977      	ldr	r1, [pc, #476]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800865a:	eb73 0101 	sbcs.w	r1, r3, r1
 800865e:	f080 835f 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008662:	487f      	ldr	r0, [pc, #508]	; (8008860 <sail_pixel_format_from_string+0x734>)
 8008664:	4974      	ldr	r1, [pc, #464]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008666:	428b      	cmp	r3, r1
 8008668:	bf08      	it	eq
 800866a:	4282      	cmpeq	r2, r0
 800866c:	f000 831e 	beq.w	8008cac <sail_pixel_format_from_string+0xb80>
 8008670:	497c      	ldr	r1, [pc, #496]	; (8008864 <sail_pixel_format_from_string+0x738>)
 8008672:	428a      	cmp	r2, r1
 8008674:	4970      	ldr	r1, [pc, #448]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008676:	eb73 0101 	sbcs.w	r1, r3, r1
 800867a:	f080 8351 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800867e:	487a      	ldr	r0, [pc, #488]	; (8008868 <sail_pixel_format_from_string+0x73c>)
 8008680:	496d      	ldr	r1, [pc, #436]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008682:	428b      	cmp	r3, r1
 8008684:	bf08      	it	eq
 8008686:	4282      	cmpeq	r2, r0
 8008688:	f000 830a 	beq.w	8008ca0 <sail_pixel_format_from_string+0xb74>
 800868c:	4977      	ldr	r1, [pc, #476]	; (800886c <sail_pixel_format_from_string+0x740>)
 800868e:	428a      	cmp	r2, r1
 8008690:	4969      	ldr	r1, [pc, #420]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008692:	eb73 0101 	sbcs.w	r1, r3, r1
 8008696:	f080 8343 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800869a:	4875      	ldr	r0, [pc, #468]	; (8008870 <sail_pixel_format_from_string+0x744>)
 800869c:	4966      	ldr	r1, [pc, #408]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800869e:	428b      	cmp	r3, r1
 80086a0:	bf08      	it	eq
 80086a2:	4282      	cmpeq	r2, r0
 80086a4:	f000 8304 	beq.w	8008cb0 <sail_pixel_format_from_string+0xb84>
 80086a8:	4972      	ldr	r1, [pc, #456]	; (8008874 <sail_pixel_format_from_string+0x748>)
 80086aa:	428a      	cmp	r2, r1
 80086ac:	4962      	ldr	r1, [pc, #392]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80086ae:	eb73 0101 	sbcs.w	r1, r3, r1
 80086b2:	f080 8335 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80086b6:	4870      	ldr	r0, [pc, #448]	; (8008878 <sail_pixel_format_from_string+0x74c>)
 80086b8:	495f      	ldr	r1, [pc, #380]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80086ba:	428b      	cmp	r3, r1
 80086bc:	bf08      	it	eq
 80086be:	4282      	cmpeq	r2, r0
 80086c0:	f000 830e 	beq.w	8008ce0 <sail_pixel_format_from_string+0xbb4>
 80086c4:	496d      	ldr	r1, [pc, #436]	; (800887c <sail_pixel_format_from_string+0x750>)
 80086c6:	428a      	cmp	r2, r1
 80086c8:	495b      	ldr	r1, [pc, #364]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80086ca:	eb73 0101 	sbcs.w	r1, r3, r1
 80086ce:	f080 8327 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80086d2:	486b      	ldr	r0, [pc, #428]	; (8008880 <sail_pixel_format_from_string+0x754>)
 80086d4:	4958      	ldr	r1, [pc, #352]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80086d6:	428b      	cmp	r3, r1
 80086d8:	bf08      	it	eq
 80086da:	4282      	cmpeq	r2, r0
 80086dc:	f000 82e2 	beq.w	8008ca4 <sail_pixel_format_from_string+0xb78>
 80086e0:	4968      	ldr	r1, [pc, #416]	; (8008884 <sail_pixel_format_from_string+0x758>)
 80086e2:	428a      	cmp	r2, r1
 80086e4:	4954      	ldr	r1, [pc, #336]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80086e6:	eb73 0101 	sbcs.w	r1, r3, r1
 80086ea:	f080 8319 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80086ee:	4866      	ldr	r0, [pc, #408]	; (8008888 <sail_pixel_format_from_string+0x75c>)
 80086f0:	4951      	ldr	r1, [pc, #324]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 80086f2:	428b      	cmp	r3, r1
 80086f4:	bf08      	it	eq
 80086f6:	4282      	cmpeq	r2, r0
 80086f8:	f000 82dc 	beq.w	8008cb4 <sail_pixel_format_from_string+0xb88>
 80086fc:	4963      	ldr	r1, [pc, #396]	; (800888c <sail_pixel_format_from_string+0x760>)
 80086fe:	428a      	cmp	r2, r1
 8008700:	494d      	ldr	r1, [pc, #308]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 8008702:	eb73 0101 	sbcs.w	r1, r3, r1
 8008706:	f080 830b 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800870a:	4861      	ldr	r0, [pc, #388]	; (8008890 <sail_pixel_format_from_string+0x764>)
 800870c:	494a      	ldr	r1, [pc, #296]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800870e:	428b      	cmp	r3, r1
 8008710:	bf08      	it	eq
 8008712:	4282      	cmpeq	r2, r0
 8008714:	f000 82d0 	beq.w	8008cb8 <sail_pixel_format_from_string+0xb8c>
 8008718:	495e      	ldr	r1, [pc, #376]	; (8008894 <sail_pixel_format_from_string+0x768>)
 800871a:	428a      	cmp	r2, r1
 800871c:	4946      	ldr	r1, [pc, #280]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800871e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008722:	f080 82fd 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008726:	485c      	ldr	r0, [pc, #368]	; (8008898 <sail_pixel_format_from_string+0x76c>)
 8008728:	4943      	ldr	r1, [pc, #268]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800872a:	428b      	cmp	r3, r1
 800872c:	bf08      	it	eq
 800872e:	4282      	cmpeq	r2, r0
 8008730:	f000 82c4 	beq.w	8008cbc <sail_pixel_format_from_string+0xb90>
 8008734:	4959      	ldr	r1, [pc, #356]	; (800889c <sail_pixel_format_from_string+0x770>)
 8008736:	428a      	cmp	r2, r1
 8008738:	493f      	ldr	r1, [pc, #252]	; (8008838 <sail_pixel_format_from_string+0x70c>)
 800873a:	eb73 0101 	sbcs.w	r1, r3, r1
 800873e:	f080 82ef 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008742:	4857      	ldr	r0, [pc, #348]	; (80088a0 <sail_pixel_format_from_string+0x774>)
 8008744:	4957      	ldr	r1, [pc, #348]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 8008746:	428b      	cmp	r3, r1
 8008748:	bf08      	it	eq
 800874a:	4282      	cmpeq	r2, r0
 800874c:	f000 829c 	beq.w	8008c88 <sail_pixel_format_from_string+0xb5c>
 8008750:	4955      	ldr	r1, [pc, #340]	; (80088a8 <sail_pixel_format_from_string+0x77c>)
 8008752:	428a      	cmp	r2, r1
 8008754:	4953      	ldr	r1, [pc, #332]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 8008756:	eb73 0101 	sbcs.w	r1, r3, r1
 800875a:	f080 82e1 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800875e:	4853      	ldr	r0, [pc, #332]	; (80088ac <sail_pixel_format_from_string+0x780>)
 8008760:	4950      	ldr	r1, [pc, #320]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 8008762:	428b      	cmp	r3, r1
 8008764:	bf08      	it	eq
 8008766:	4282      	cmpeq	r2, r0
 8008768:	f000 8290 	beq.w	8008c8c <sail_pixel_format_from_string+0xb60>
 800876c:	4950      	ldr	r1, [pc, #320]	; (80088b0 <sail_pixel_format_from_string+0x784>)
 800876e:	428a      	cmp	r2, r1
 8008770:	494c      	ldr	r1, [pc, #304]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 8008772:	eb73 0101 	sbcs.w	r1, r3, r1
 8008776:	f080 82d3 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800877a:	484e      	ldr	r0, [pc, #312]	; (80088b4 <sail_pixel_format_from_string+0x788>)
 800877c:	4949      	ldr	r1, [pc, #292]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 800877e:	428b      	cmp	r3, r1
 8008780:	bf08      	it	eq
 8008782:	4282      	cmpeq	r2, r0
 8008784:	f000 827c 	beq.w	8008c80 <sail_pixel_format_from_string+0xb54>
 8008788:	494b      	ldr	r1, [pc, #300]	; (80088b8 <sail_pixel_format_from_string+0x78c>)
 800878a:	428a      	cmp	r2, r1
 800878c:	4945      	ldr	r1, [pc, #276]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 800878e:	eb73 0101 	sbcs.w	r1, r3, r1
 8008792:	f080 82c5 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008796:	4849      	ldr	r0, [pc, #292]	; (80088bc <sail_pixel_format_from_string+0x790>)
 8008798:	4942      	ldr	r1, [pc, #264]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 800879a:	428b      	cmp	r3, r1
 800879c:	bf08      	it	eq
 800879e:	4282      	cmpeq	r2, r0
 80087a0:	f000 8276 	beq.w	8008c90 <sail_pixel_format_from_string+0xb64>
 80087a4:	4946      	ldr	r1, [pc, #280]	; (80088c0 <sail_pixel_format_from_string+0x794>)
 80087a6:	428a      	cmp	r2, r1
 80087a8:	493e      	ldr	r1, [pc, #248]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087aa:	eb73 0101 	sbcs.w	r1, r3, r1
 80087ae:	f080 82b7 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80087b2:	4844      	ldr	r0, [pc, #272]	; (80088c4 <sail_pixel_format_from_string+0x798>)
 80087b4:	493b      	ldr	r1, [pc, #236]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087b6:	428b      	cmp	r3, r1
 80087b8:	bf08      	it	eq
 80087ba:	4282      	cmpeq	r2, r0
 80087bc:	f000 8262 	beq.w	8008c84 <sail_pixel_format_from_string+0xb58>
 80087c0:	4941      	ldr	r1, [pc, #260]	; (80088c8 <sail_pixel_format_from_string+0x79c>)
 80087c2:	428a      	cmp	r2, r1
 80087c4:	4937      	ldr	r1, [pc, #220]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087c6:	eb73 0101 	sbcs.w	r1, r3, r1
 80087ca:	f080 82a9 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80087ce:	483f      	ldr	r0, [pc, #252]	; (80088cc <sail_pixel_format_from_string+0x7a0>)
 80087d0:	4934      	ldr	r1, [pc, #208]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087d2:	428b      	cmp	r3, r1
 80087d4:	bf08      	it	eq
 80087d6:	4282      	cmpeq	r2, r0
 80087d8:	f000 825c 	beq.w	8008c94 <sail_pixel_format_from_string+0xb68>
 80087dc:	493c      	ldr	r1, [pc, #240]	; (80088d0 <sail_pixel_format_from_string+0x7a4>)
 80087de:	428a      	cmp	r2, r1
 80087e0:	4930      	ldr	r1, [pc, #192]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087e2:	eb73 0101 	sbcs.w	r1, r3, r1
 80087e6:	f080 829b 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80087ea:	483a      	ldr	r0, [pc, #232]	; (80088d4 <sail_pixel_format_from_string+0x7a8>)
 80087ec:	492d      	ldr	r1, [pc, #180]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087ee:	428b      	cmp	r3, r1
 80087f0:	bf08      	it	eq
 80087f2:	4282      	cmpeq	r2, r0
 80087f4:	f000 8250 	beq.w	8008c98 <sail_pixel_format_from_string+0xb6c>
 80087f8:	4937      	ldr	r1, [pc, #220]	; (80088d8 <sail_pixel_format_from_string+0x7ac>)
 80087fa:	428a      	cmp	r2, r1
 80087fc:	4929      	ldr	r1, [pc, #164]	; (80088a4 <sail_pixel_format_from_string+0x778>)
 80087fe:	eb73 0101 	sbcs.w	r1, r3, r1
 8008802:	e06b      	b.n	80088dc <sail_pixel_format_from_string+0x7b0>
 8008804:	354eae5b 	.word	0x354eae5b
 8008808:	726ab92d 	.word	0x726ab92d
 800880c:	35469132 	.word	0x35469132
 8008810:	35469133 	.word	0x35469133
 8008814:	3545ea71 	.word	0x3545ea71
 8008818:	3545ea72 	.word	0x3545ea72
 800881c:	3545ea5a 	.word	0x3545ea5a
 8008820:	3545ea5b 	.word	0x3545ea5b
 8008824:	35458b5a 	.word	0x35458b5a
 8008828:	35458b5b 	.word	0x35458b5b
 800882c:	3545475a 	.word	0x3545475a
 8008830:	3545475b 	.word	0x3545475b
 8008834:	a4b2ec25 	.word	0xa4b2ec25
 8008838:	726ab92c 	.word	0x726ab92c
 800883c:	a4b2ec26 	.word	0xa4b2ec26
 8008840:	9209a71d 	.word	0x9209a71d
 8008844:	9209a71e 	.word	0x9209a71e
 8008848:	49b9bb9e 	.word	0x49b9bb9e
 800884c:	49b9bb9f 	.word	0x49b9bb9f
 8008850:	49b96ca3 	.word	0x49b96ca3
 8008854:	49b96ca4 	.word	0x49b96ca4
 8008858:	49b9208c 	.word	0x49b9208c
 800885c:	49b9208d 	.word	0x49b9208d
 8008860:	49b8dc8c 	.word	0x49b8dc8c
 8008864:	49b8dc8d 	.word	0x49b8dc8d
 8008868:	49b5a6ec 	.word	0x49b5a6ec
 800886c:	49b5a6ed 	.word	0x49b5a6ed
 8008870:	49b5a6d5 	.word	0x49b5a6d5
 8008874:	49b5a6d6 	.word	0x49b5a6d6
 8008878:	49ad89ad 	.word	0x49ad89ad
 800887c:	49ad89ae 	.word	0x49ad89ae
 8008880:	49ace2ec 	.word	0x49ace2ec
 8008884:	49ace2ed 	.word	0x49ace2ed
 8008888:	49ace2d5 	.word	0x49ace2d5
 800888c:	49ace2d6 	.word	0x49ace2d6
 8008890:	49ac83d5 	.word	0x49ac83d5
 8008894:	49ac83d6 	.word	0x49ac83d6
 8008898:	49ac3fd5 	.word	0x49ac3fd5
 800889c:	49ac3fd6 	.word	0x49ac3fd6
 80088a0:	b919498e 	.word	0xb919498e
 80088a4:	726ab92b 	.word	0x726ab92b
 80088a8:	b919498f 	.word	0xb919498f
 80088ac:	b919058e 	.word	0xb919058e
 80088b0:	b919058f 	.word	0xb919058f
 80088b4:	b915cfee 	.word	0xb915cfee
 80088b8:	b915cfef 	.word	0xb915cfef
 80088bc:	b915cfd7 	.word	0xb915cfd7
 80088c0:	b915cfd8 	.word	0xb915cfd8
 80088c4:	b90d0bee 	.word	0xb90d0bee
 80088c8:	b90d0bef 	.word	0xb90d0bef
 80088cc:	b90d0bd7 	.word	0xb90d0bd7
 80088d0:	b90d0bd8 	.word	0xb90d0bd8
 80088d4:	b90cacd7 	.word	0xb90cacd7
 80088d8:	b90cacd8 	.word	0xb90cacd8
 80088dc:	f080 8220 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80088e0:	48b4      	ldr	r0, [pc, #720]	; (8008bb4 <sail_pixel_format_from_string+0xa88>)
 80088e2:	49b5      	ldr	r1, [pc, #724]	; (8008bb8 <sail_pixel_format_from_string+0xa8c>)
 80088e4:	428b      	cmp	r3, r1
 80088e6:	bf08      	it	eq
 80088e8:	4282      	cmpeq	r2, r0
 80088ea:	f000 81d7 	beq.w	8008c9c <sail_pixel_format_from_string+0xb70>
 80088ee:	49b3      	ldr	r1, [pc, #716]	; (8008bbc <sail_pixel_format_from_string+0xa90>)
 80088f0:	428a      	cmp	r2, r1
 80088f2:	49b1      	ldr	r1, [pc, #708]	; (8008bb8 <sail_pixel_format_from_string+0xa8c>)
 80088f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80088f8:	f080 8212 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80088fc:	48b0      	ldr	r0, [pc, #704]	; (8008bc0 <sail_pixel_format_from_string+0xa94>)
 80088fe:	49b1      	ldr	r1, [pc, #708]	; (8008bc4 <sail_pixel_format_from_string+0xa98>)
 8008900:	428b      	cmp	r3, r1
 8008902:	bf08      	it	eq
 8008904:	4282      	cmpeq	r2, r0
 8008906:	f000 814d 	beq.w	8008ba4 <sail_pixel_format_from_string+0xa78>
 800890a:	49af      	ldr	r1, [pc, #700]	; (8008bc8 <sail_pixel_format_from_string+0xa9c>)
 800890c:	428a      	cmp	r2, r1
 800890e:	49ad      	ldr	r1, [pc, #692]	; (8008bc4 <sail_pixel_format_from_string+0xa98>)
 8008910:	eb73 0101 	sbcs.w	r1, r3, r1
 8008914:	f080 8204 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008918:	48ac      	ldr	r0, [pc, #688]	; (8008bcc <sail_pixel_format_from_string+0xaa0>)
 800891a:	49ad      	ldr	r1, [pc, #692]	; (8008bd0 <sail_pixel_format_from_string+0xaa4>)
 800891c:	428b      	cmp	r3, r1
 800891e:	bf08      	it	eq
 8008920:	4282      	cmpeq	r2, r0
 8008922:	f000 813d 	beq.w	8008ba0 <sail_pixel_format_from_string+0xa74>
 8008926:	49ab      	ldr	r1, [pc, #684]	; (8008bd4 <sail_pixel_format_from_string+0xaa8>)
 8008928:	428a      	cmp	r2, r1
 800892a:	49a9      	ldr	r1, [pc, #676]	; (8008bd0 <sail_pixel_format_from_string+0xaa4>)
 800892c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008930:	f080 81f6 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008934:	48a8      	ldr	r0, [pc, #672]	; (8008bd8 <sail_pixel_format_from_string+0xaac>)
 8008936:	49a9      	ldr	r1, [pc, #676]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008938:	428b      	cmp	r3, r1
 800893a:	bf08      	it	eq
 800893c:	4282      	cmpeq	r2, r0
 800893e:	f000 81e5 	beq.w	8008d0c <sail_pixel_format_from_string+0xbe0>
 8008942:	49a7      	ldr	r1, [pc, #668]	; (8008be0 <sail_pixel_format_from_string+0xab4>)
 8008944:	428a      	cmp	r2, r1
 8008946:	49a5      	ldr	r1, [pc, #660]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008948:	eb73 0101 	sbcs.w	r1, r3, r1
 800894c:	f080 81e8 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008950:	48a4      	ldr	r0, [pc, #656]	; (8008be4 <sail_pixel_format_from_string+0xab8>)
 8008952:	49a2      	ldr	r1, [pc, #648]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008954:	428b      	cmp	r3, r1
 8008956:	bf08      	it	eq
 8008958:	4282      	cmpeq	r2, r0
 800895a:	f000 818d 	beq.w	8008c78 <sail_pixel_format_from_string+0xb4c>
 800895e:	49a2      	ldr	r1, [pc, #648]	; (8008be8 <sail_pixel_format_from_string+0xabc>)
 8008960:	428a      	cmp	r2, r1
 8008962:	499e      	ldr	r1, [pc, #632]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008964:	eb73 0101 	sbcs.w	r1, r3, r1
 8008968:	f080 81da 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 800896c:	489f      	ldr	r0, [pc, #636]	; (8008bec <sail_pixel_format_from_string+0xac0>)
 800896e:	499b      	ldr	r1, [pc, #620]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008970:	428b      	cmp	r3, r1
 8008972:	bf08      	it	eq
 8008974:	4282      	cmpeq	r2, r0
 8008976:	f000 8181 	beq.w	8008c7c <sail_pixel_format_from_string+0xb50>
 800897a:	499d      	ldr	r1, [pc, #628]	; (8008bf0 <sail_pixel_format_from_string+0xac4>)
 800897c:	428a      	cmp	r2, r1
 800897e:	4997      	ldr	r1, [pc, #604]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008980:	eb73 0101 	sbcs.w	r1, r3, r1
 8008984:	f080 81cc 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008988:	489a      	ldr	r0, [pc, #616]	; (8008bf4 <sail_pixel_format_from_string+0xac8>)
 800898a:	4994      	ldr	r1, [pc, #592]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 800898c:	428b      	cmp	r3, r1
 800898e:	bf08      	it	eq
 8008990:	4282      	cmpeq	r2, r0
 8008992:	f000 81b9 	beq.w	8008d08 <sail_pixel_format_from_string+0xbdc>
 8008996:	4998      	ldr	r1, [pc, #608]	; (8008bf8 <sail_pixel_format_from_string+0xacc>)
 8008998:	428a      	cmp	r2, r1
 800899a:	4990      	ldr	r1, [pc, #576]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 800899c:	eb73 0101 	sbcs.w	r1, r3, r1
 80089a0:	f080 81be 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80089a4:	4895      	ldr	r0, [pc, #596]	; (8008bfc <sail_pixel_format_from_string+0xad0>)
 80089a6:	498d      	ldr	r1, [pc, #564]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089a8:	428b      	cmp	r3, r1
 80089aa:	bf08      	it	eq
 80089ac:	4282      	cmpeq	r2, r0
 80089ae:	f000 81a9 	beq.w	8008d04 <sail_pixel_format_from_string+0xbd8>
 80089b2:	4993      	ldr	r1, [pc, #588]	; (8008c00 <sail_pixel_format_from_string+0xad4>)
 80089b4:	428a      	cmp	r2, r1
 80089b6:	4989      	ldr	r1, [pc, #548]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089b8:	eb73 0101 	sbcs.w	r1, r3, r1
 80089bc:	f080 81b0 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80089c0:	4890      	ldr	r0, [pc, #576]	; (8008c04 <sail_pixel_format_from_string+0xad8>)
 80089c2:	4986      	ldr	r1, [pc, #536]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089c4:	428b      	cmp	r3, r1
 80089c6:	bf08      	it	eq
 80089c8:	4282      	cmpeq	r2, r0
 80089ca:	f000 8199 	beq.w	8008d00 <sail_pixel_format_from_string+0xbd4>
 80089ce:	498e      	ldr	r1, [pc, #568]	; (8008c08 <sail_pixel_format_from_string+0xadc>)
 80089d0:	428a      	cmp	r2, r1
 80089d2:	4982      	ldr	r1, [pc, #520]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089d4:	eb73 0101 	sbcs.w	r1, r3, r1
 80089d8:	f080 81a2 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80089dc:	488b      	ldr	r0, [pc, #556]	; (8008c0c <sail_pixel_format_from_string+0xae0>)
 80089de:	497f      	ldr	r1, [pc, #508]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089e0:	428b      	cmp	r3, r1
 80089e2:	bf08      	it	eq
 80089e4:	4282      	cmpeq	r2, r0
 80089e6:	f000 8143 	beq.w	8008c70 <sail_pixel_format_from_string+0xb44>
 80089ea:	4989      	ldr	r1, [pc, #548]	; (8008c10 <sail_pixel_format_from_string+0xae4>)
 80089ec:	428a      	cmp	r2, r1
 80089ee:	497b      	ldr	r1, [pc, #492]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089f0:	eb73 0101 	sbcs.w	r1, r3, r1
 80089f4:	f080 8194 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 80089f8:	4886      	ldr	r0, [pc, #536]	; (8008c14 <sail_pixel_format_from_string+0xae8>)
 80089fa:	4978      	ldr	r1, [pc, #480]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf08      	it	eq
 8008a00:	4282      	cmpeq	r2, r0
 8008a02:	f000 8137 	beq.w	8008c74 <sail_pixel_format_from_string+0xb48>
 8008a06:	4984      	ldr	r1, [pc, #528]	; (8008c18 <sail_pixel_format_from_string+0xaec>)
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	4974      	ldr	r1, [pc, #464]	; (8008bdc <sail_pixel_format_from_string+0xab0>)
 8008a0c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008a10:	f080 8186 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008a14:	4881      	ldr	r0, [pc, #516]	; (8008c1c <sail_pixel_format_from_string+0xaf0>)
 8008a16:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 8008a1a:	428b      	cmp	r3, r1
 8008a1c:	bf08      	it	eq
 8008a1e:	4282      	cmpeq	r2, r0
 8008a20:	f000 808c 	beq.w	8008b3c <sail_pixel_format_from_string+0xa10>
 8008a24:	497e      	ldr	r1, [pc, #504]	; (8008c20 <sail_pixel_format_from_string+0xaf4>)
 8008a26:	428a      	cmp	r2, r1
 8008a28:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 8008a2c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008a30:	f080 8176 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008a34:	487b      	ldr	r0, [pc, #492]	; (8008c24 <sail_pixel_format_from_string+0xaf8>)
 8008a36:	f240 6152 	movw	r1, #1618	; 0x652
 8008a3a:	428b      	cmp	r3, r1
 8008a3c:	bf08      	it	eq
 8008a3e:	4282      	cmpeq	r2, r0
 8008a40:	f000 8094 	beq.w	8008b6c <sail_pixel_format_from_string+0xa40>
 8008a44:	4978      	ldr	r1, [pc, #480]	; (8008c28 <sail_pixel_format_from_string+0xafc>)
 8008a46:	428a      	cmp	r2, r1
 8008a48:	f240 6152 	movw	r1, #1618	; 0x652
 8008a4c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008a50:	f080 8166 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008a54:	4975      	ldr	r1, [pc, #468]	; (8008c2c <sail_pixel_format_from_string+0xb00>)
 8008a56:	2b31      	cmp	r3, #49	; 0x31
 8008a58:	bf08      	it	eq
 8008a5a:	428a      	cmpeq	r2, r1
 8008a5c:	f000 8084 	beq.w	8008b68 <sail_pixel_format_from_string+0xa3c>
 8008a60:	4973      	ldr	r1, [pc, #460]	; (8008c30 <sail_pixel_format_from_string+0xb04>)
 8008a62:	428a      	cmp	r2, r1
 8008a64:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008a68:	f080 815a 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008a6c:	4971      	ldr	r1, [pc, #452]	; (8008c34 <sail_pixel_format_from_string+0xb08>)
 8008a6e:	2b31      	cmp	r3, #49	; 0x31
 8008a70:	bf08      	it	eq
 8008a72:	428a      	cmpeq	r2, r1
 8008a74:	d076      	beq.n	8008b64 <sail_pixel_format_from_string+0xa38>
 8008a76:	4970      	ldr	r1, [pc, #448]	; (8008c38 <sail_pixel_format_from_string+0xb0c>)
 8008a78:	428a      	cmp	r2, r1
 8008a7a:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008a7e:	f080 814f 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008a82:	496e      	ldr	r1, [pc, #440]	; (8008c3c <sail_pixel_format_from_string+0xb10>)
 8008a84:	2b31      	cmp	r3, #49	; 0x31
 8008a86:	bf08      	it	eq
 8008a88:	428a      	cmpeq	r2, r1
 8008a8a:	d069      	beq.n	8008b60 <sail_pixel_format_from_string+0xa34>
 8008a8c:	496c      	ldr	r1, [pc, #432]	; (8008c40 <sail_pixel_format_from_string+0xb14>)
 8008a8e:	428a      	cmp	r2, r1
 8008a90:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008a94:	f080 8144 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008a98:	496a      	ldr	r1, [pc, #424]	; (8008c44 <sail_pixel_format_from_string+0xb18>)
 8008a9a:	2b31      	cmp	r3, #49	; 0x31
 8008a9c:	bf08      	it	eq
 8008a9e:	428a      	cmpeq	r2, r1
 8008aa0:	d05c      	beq.n	8008b5c <sail_pixel_format_from_string+0xa30>
 8008aa2:	4969      	ldr	r1, [pc, #420]	; (8008c48 <sail_pixel_format_from_string+0xb1c>)
 8008aa4:	428a      	cmp	r2, r1
 8008aa6:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008aaa:	f080 8139 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008aae:	4967      	ldr	r1, [pc, #412]	; (8008c4c <sail_pixel_format_from_string+0xb20>)
 8008ab0:	2b31      	cmp	r3, #49	; 0x31
 8008ab2:	bf08      	it	eq
 8008ab4:	428a      	cmpeq	r2, r1
 8008ab6:	d04f      	beq.n	8008b58 <sail_pixel_format_from_string+0xa2c>
 8008ab8:	4965      	ldr	r1, [pc, #404]	; (8008c50 <sail_pixel_format_from_string+0xb24>)
 8008aba:	428a      	cmp	r2, r1
 8008abc:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008ac0:	f080 812e 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008ac4:	4963      	ldr	r1, [pc, #396]	; (8008c54 <sail_pixel_format_from_string+0xb28>)
 8008ac6:	2b31      	cmp	r3, #49	; 0x31
 8008ac8:	bf08      	it	eq
 8008aca:	428a      	cmpeq	r2, r1
 8008acc:	d042      	beq.n	8008b54 <sail_pixel_format_from_string+0xa28>
 8008ace:	4962      	ldr	r1, [pc, #392]	; (8008c58 <sail_pixel_format_from_string+0xb2c>)
 8008ad0:	428a      	cmp	r2, r1
 8008ad2:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008ad6:	f080 8123 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008ada:	4960      	ldr	r1, [pc, #384]	; (8008c5c <sail_pixel_format_from_string+0xb30>)
 8008adc:	428a      	cmp	r2, r1
 8008ade:	f173 0101 	sbcs.w	r1, r3, #1
 8008ae2:	d225      	bcs.n	8008b30 <sail_pixel_format_from_string+0xa04>
 8008ae4:	495e      	ldr	r1, [pc, #376]	; (8008c60 <sail_pixel_format_from_string+0xb34>)
 8008ae6:	428a      	cmp	r2, r1
 8008ae8:	f173 0101 	sbcs.w	r1, r3, #1
 8008aec:	f0c0 8118 	bcc.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008af0:	495c      	ldr	r1, [pc, #368]	; (8008c64 <sail_pixel_format_from_string+0xb38>)
 8008af2:	1854      	adds	r4, r2, r1
 8008af4:	f163 0501 	sbc.w	r5, r3, #1
 8008af8:	2c08      	cmp	r4, #8
 8008afa:	f175 0300 	sbcs.w	r3, r5, #0
 8008afe:	f080 810f 	bcs.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008b02:	2c07      	cmp	r4, #7
 8008b04:	f200 810c 	bhi.w	8008d20 <sail_pixel_format_from_string+0xbf4>
 8008b08:	a301      	add	r3, pc, #4	; (adr r3, 8008b10 <sail_pixel_format_from_string+0x9e4>)
 8008b0a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b41 	.word	0x08008b41
 8008b14:	08008b45 	.word	0x08008b45
 8008b18:	08008d21 	.word	0x08008d21
 8008b1c:	08008b49 	.word	0x08008b49
 8008b20:	08008d21 	.word	0x08008d21
 8008b24:	08008d21 	.word	0x08008d21
 8008b28:	08008d21 	.word	0x08008d21
 8008b2c:	08008b4d 	.word	0x08008b4d
 8008b30:	494d      	ldr	r1, [pc, #308]	; (8008c68 <sail_pixel_format_from_string+0xb3c>)
 8008b32:	2b31      	cmp	r3, #49	; 0x31
 8008b34:	bf08      	it	eq
 8008b36:	428a      	cmpeq	r2, r1
 8008b38:	d00a      	beq.n	8008b50 <sail_pixel_format_from_string+0xa24>
 8008b3a:	e0f1      	b.n	8008d20 <sail_pixel_format_from_string+0xbf4>
        case UINT64_C(229442760833397):      return SAIL_PIXEL_FORMAT_UNKNOWN;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e0f0      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(6383902552):           return SAIL_PIXEL_FORMAT_BPP1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e0ee      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902553):           return SAIL_PIXEL_FORMAT_BPP2;
 8008b44:	2302      	movs	r3, #2
 8008b46:	e0ec      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902555):           return SAIL_PIXEL_FORMAT_BPP4;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e0ea      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902559):           return SAIL_PIXEL_FORMAT_BPP8;
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	e0e8      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784270):         return SAIL_PIXEL_FORMAT_BPP16;
 8008b50:	2305      	movs	r3, #5
 8008b52:	e0e6      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784301):         return SAIL_PIXEL_FORMAT_BPP24;
 8008b54:	2306      	movs	r3, #6
 8008b56:	e0e4      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784332):         return SAIL_PIXEL_FORMAT_BPP32;
 8008b58:	2307      	movs	r3, #7
 8008b5a:	e0e2      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784371):         return SAIL_PIXEL_FORMAT_BPP48;
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	e0e0      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784433):         return SAIL_PIXEL_FORMAT_BPP64;
 8008b60:	2309      	movs	r3, #9
 8008b62:	e0de      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784464):         return SAIL_PIXEL_FORMAT_BPP72;
 8008b64:	230a      	movs	r3, #10
 8008b66:	e0dc      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784534):         return SAIL_PIXEL_FORMAT_BPP96;
 8008b68:	230b      	movs	r3, #11
 8008b6a:	e0da      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6952069880834):        return SAIL_PIXEL_FORMAT_BPP128;
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	e0d8      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13257949335914442470): return SAIL_PIXEL_FORMAT_BPP1_INDEXED;
 8008b70:	230d      	movs	r3, #13
 8008b72:	e0d6      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257950742323060711): return SAIL_PIXEL_FORMAT_BPP2_INDEXED;
 8008b74:	230e      	movs	r3, #14
 8008b76:	e0d4      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257953555140297193): return SAIL_PIXEL_FORMAT_BPP4_INDEXED;
 8008b78:	230f      	movs	r3, #15
 8008b7a:	e0d2      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257959180774770157): return SAIL_PIXEL_FORMAT_BPP8_INDEXED;
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	e0d0      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237225848150241308): return SAIL_PIXEL_FORMAT_BPP16_INDEXED;
 8008b80:	2311      	movs	r3, #17
 8008b82:	e0ce      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(12552958524517323328): return SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE;
 8008b84:	2312      	movs	r3, #18
 8008b86:	e0cc      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12554490103502587777): return SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE;
 8008b88:	2313      	movs	r3, #19
 8008b8a:	e0ca      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12557553261473116675): return SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE;
 8008b8c:	2314      	movs	r3, #20
 8008b8e:	e0c8      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12563679577414174471): return SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE;
 8008b90:	2315      	movs	r3, #21
 8008b92:	e0c6      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8431824423011809526):  return SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE;
 8008b94:	2316      	movs	r3, #22
 8008b96:	e0c4      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(9367569596161118198):  return SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA;
 8008b98:	2317      	movs	r3, #23
 8008b9a:	e0c2      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12512997289017890810): return SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA;
 8008b9c:	2318      	movs	r3, #24
 8008b9e:	e0c0      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(3292614999547101481):  return SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA;
 8008ba0:	2319      	movs	r3, #25
 8008ba2:	e0be      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(5929884054553197927):  return SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA;
 8008ba4:	231a      	movs	r3, #26
 8008ba6:	e0bc      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13257949683479278997): return SAIL_PIXEL_FORMAT_BPP16_RGB555;
 8008ba8:	231b      	movs	r3, #27
 8008baa:	e0ba      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257949682853687701): return SAIL_PIXEL_FORMAT_BPP16_BGR555;
 8008bac:	231c      	movs	r3, #28
 8008bae:	e0b8      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257949683479279030): return SAIL_PIXEL_FORMAT_BPP16_RGB565;
 8008bb0:	231d      	movs	r3, #29
 8008bb2:	e0b6      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
 8008bb4:	b90c68d7 	.word	0xb90c68d7
 8008bb8:	726ab92b 	.word	0x726ab92b
 8008bbc:	b90c68d8 	.word	0xb90c68d8
 8008bc0:	36e57d67 	.word	0x36e57d67
 8008bc4:	524b2e21 	.word	0x524b2e21
 8008bc8:	36e57d68 	.word	0x36e57d68
 8008bcc:	a620c129 	.word	0xa620c129
 8008bd0:	2db1b7e5 	.word	0x2db1b7e5
 8008bd4:	a620c12a 	.word	0xa620c12a
 8008bd8:	5a52ff64 	.word	0x5a52ff64
 8008bdc:	03779901 	.word	0x03779901
 8008be0:	5a52ff65 	.word	0x5a52ff65
 8008be4:	5a52dfbb 	.word	0x5a52dfbb
 8008be8:	5a52dfbc 	.word	0x5a52dfbc
 8008bec:	5a529bbb 	.word	0x5a529bbb
 8008bf0:	5a529bbc 	.word	0x5a529bbc
 8008bf4:	57d9a5c1 	.word	0x57d9a5c1
 8008bf8:	57d9a5c2 	.word	0x57d9a5c2
 8008bfc:	576d12bb 	.word	0x576d12bb
 8008c00:	576d12bc 	.word	0x576d12bc
 8008c04:	55604c1e 	.word	0x55604c1e
 8008c08:	55604c1f 	.word	0x55604c1f
 8008c0c:	55602c75 	.word	0x55602c75
 8008c10:	55602c76 	.word	0x55602c76
 8008c14:	555fe875 	.word	0x555fe875
 8008c18:	555fe876 	.word	0x555fe876
 8008c1c:	4e417975 	.word	0x4e417975
 8008c20:	4e417976 	.word	0x4e417976
 8008c24:	a7a7dc02 	.word	0xa7a7dc02
 8008c28:	a7a7dc03 	.word	0xa7a7dc03
 8008c2c:	0cd68b96 	.word	0x0cd68b96
 8008c30:	0cd68b97 	.word	0x0cd68b97
 8008c34:	0cd68b50 	.word	0x0cd68b50
 8008c38:	0cd68b51 	.word	0x0cd68b51
 8008c3c:	0cd68b31 	.word	0x0cd68b31
 8008c40:	0cd68b32 	.word	0x0cd68b32
 8008c44:	0cd68af3 	.word	0x0cd68af3
 8008c48:	0cd68af4 	.word	0x0cd68af4
 8008c4c:	0cd68acc 	.word	0x0cd68acc
 8008c50:	0cd68acd 	.word	0x0cd68acd
 8008c54:	0cd68aad 	.word	0x0cd68aad
 8008c58:	0cd68aae 	.word	0x0cd68aae
 8008c5c:	7c829f60 	.word	0x7c829f60
 8008c60:	7c829f58 	.word	0x7c829f58
 8008c64:	837d60a8 	.word	0x837d60a8
 8008c68:	0cd68a8e 	.word	0x0cd68a8e
        case UINT64_C(13257949682853687734): return SAIL_PIXEL_FORMAT_BPP16_BGR565;
 8008c6c:	231e      	movs	r3, #30
 8008c6e:	e058      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535348735093):   return SAIL_PIXEL_FORMAT_BPP24_RGB;
 8008c70:	231f      	movs	r3, #31
 8008c72:	e056      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535348717685):   return SAIL_PIXEL_FORMAT_BPP24_BGR;
 8008c74:	2320      	movs	r3, #32
 8008c76:	e054      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535431749563):   return SAIL_PIXEL_FORMAT_BPP48_RGB;
 8008c78:	2321      	movs	r3, #33	; 0x21
 8008c7a:	e052      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535431732155):   return SAIL_PIXEL_FORMAT_BPP48_BGR;
 8008c7c:	2322      	movs	r3, #34	; 0x22
 8008c7e:	e050      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605665295060974):  return SAIL_PIXEL_FORMAT_BPP16_RGBX;
 8008c80:	2323      	movs	r3, #35	; 0x23
 8008c82:	e04e      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294486510):  return SAIL_PIXEL_FORMAT_BPP16_BGRX;
 8008c84:	2324      	movs	r3, #36	; 0x24
 8008c86:	e04c      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295288718):  return SAIL_PIXEL_FORMAT_BPP16_XRGB;
 8008c88:	2325      	movs	r3, #37	; 0x25
 8008c8a:	e04a      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295271310):  return SAIL_PIXEL_FORMAT_BPP16_XBGR;
 8008c8c:	2326      	movs	r3, #38	; 0x26
 8008c8e:	e048      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295060951):  return SAIL_PIXEL_FORMAT_BPP16_RGBA;
 8008c90:	2327      	movs	r3, #39	; 0x27
 8008c92:	e046      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294486487):  return SAIL_PIXEL_FORMAT_BPP16_BGRA;
 8008c94:	2328      	movs	r3, #40	; 0x28
 8008c96:	e044      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294462167):  return SAIL_PIXEL_FORMAT_BPP16_ARGB;
 8008c98:	2329      	movs	r3, #41	; 0x29
 8008c9a:	e042      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294444759):  return SAIL_PIXEL_FORMAT_BPP16_ABGR;
 8008c9c:	232a      	movs	r3, #42	; 0x2a
 8008c9e:	e040      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721455340):  return SAIL_PIXEL_FORMAT_BPP32_RGBX;
 8008ca0:	232b      	movs	r3, #43	; 0x2b
 8008ca2:	e03e      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720880876):  return SAIL_PIXEL_FORMAT_BPP32_BGRX;
 8008ca4:	232c      	movs	r3, #44	; 0x2c
 8008ca6:	e03c      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721683084):  return SAIL_PIXEL_FORMAT_BPP32_XRGB;
 8008ca8:	232d      	movs	r3, #45	; 0x2d
 8008caa:	e03a      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721665676):  return SAIL_PIXEL_FORMAT_BPP32_XBGR;
 8008cac:	232e      	movs	r3, #46	; 0x2e
 8008cae:	e038      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721455317):  return SAIL_PIXEL_FORMAT_BPP32_RGBA;
 8008cb0:	232f      	movs	r3, #47	; 0x2f
 8008cb2:	e036      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720880853):  return SAIL_PIXEL_FORMAT_BPP32_BGRA;
 8008cb4:	2330      	movs	r3, #48	; 0x30
 8008cb6:	e034      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720856533):  return SAIL_PIXEL_FORMAT_BPP32_ARGB;
 8008cb8:	2331      	movs	r3, #49	; 0x31
 8008cba:	e032      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720839125):  return SAIL_PIXEL_FORMAT_BPP32_ABGR;
 8008cbc:	2332      	movs	r3, #50	; 0x32
 8008cbe:	e030      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605671674130033):  return SAIL_PIXEL_FORMAT_BPP64_RGBX;
 8008cc0:	2333      	movs	r3, #51	; 0x33
 8008cc2:	e02e      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673555569):  return SAIL_PIXEL_FORMAT_BPP64_BGRX;
 8008cc4:	2334      	movs	r3, #52	; 0x34
 8008cc6:	e02c      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674357777):  return SAIL_PIXEL_FORMAT_BPP64_XRGB;
 8008cc8:	2335      	movs	r3, #53	; 0x35
 8008cca:	e02a      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674340369):  return SAIL_PIXEL_FORMAT_BPP64_XBGR;
 8008ccc:	2336      	movs	r3, #54	; 0x36
 8008cce:	e028      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674130010):  return SAIL_PIXEL_FORMAT_BPP64_RGBA;
 8008cd0:	2337      	movs	r3, #55	; 0x37
 8008cd2:	e026      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673555546):  return SAIL_PIXEL_FORMAT_BPP64_BGRA;
 8008cd4:	2338      	movs	r3, #56	; 0x38
 8008cd6:	e024      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673531226):  return SAIL_PIXEL_FORMAT_BPP64_ARGB;
 8008cd8:	2339      	movs	r3, #57	; 0x39
 8008cda:	e022      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673513818):  return SAIL_PIXEL_FORMAT_BPP64_ABGR;
 8008cdc:	233a      	movs	r3, #58	; 0x3a
 8008cde:	e020      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667720923565):  return SAIL_PIXEL_FORMAT_BPP32_CMYK;
 8008ce0:	233b      	movs	r3, #59	; 0x3b
 8008ce2:	e01e      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673598258):  return SAIL_PIXEL_FORMAT_BPP64_CMYK;
 8008ce4:	233c      	movs	r3, #60	; 0x3c
 8008ce6:	e01c      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13817569962846953645): return SAIL_PIXEL_FORMAT_BPP24_YCBCR;
 8008ce8:	233d      	movs	r3, #61	; 0x3d
 8008cea:	e01a      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721702563):  return SAIL_PIXEL_FORMAT_BPP32_YCCK;
 8008cec:	233e      	movs	r3, #62	; 0x3e
 8008cee:	e018      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13237269438873232231): return SAIL_PIXEL_FORMAT_BPP24_CIE_LAB;
 8008cf0:	233f      	movs	r3, #63	; 0x3f
 8008cf2:	e016      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237356636207563173): return SAIL_PIXEL_FORMAT_BPP40_CIE_LAB;
 8008cf4:	2340      	movs	r3, #64	; 0x40
 8008cf6:	e014      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13237269438873232911): return SAIL_PIXEL_FORMAT_BPP24_CIE_LUV;
 8008cf8:	2341      	movs	r3, #65	; 0x41
 8008cfa:	e012      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237356636207563853): return SAIL_PIXEL_FORMAT_BPP40_CIE_LUV;
 8008cfc:	2342      	movs	r3, #66	; 0x42
 8008cfe:	e010      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535348743198):   return SAIL_PIXEL_FORMAT_BPP24_YUV;
 8008d00:	2343      	movs	r3, #67	; 0x43
 8008d02:	e00e      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535383134907):   return SAIL_PIXEL_FORMAT_BPP30_YUV;
 8008d04:	2344      	movs	r3, #68	; 0x44
 8008d06:	e00c      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535390250433):   return SAIL_PIXEL_FORMAT_BPP36_YUV;
 8008d08:	2345      	movs	r3, #69	; 0x45
 8008d0a:	e00a      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535431757668):   return SAIL_PIXEL_FORMAT_BPP48_YUV;
 8008d0c:	2346      	movs	r3, #70	; 0x46
 8008d0e:	e008      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721722782):  return SAIL_PIXEL_FORMAT_BPP32_YUVA;
 8008d10:	2347      	movs	r3, #71	; 0x47
 8008d12:	e006      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605668934919965):  return SAIL_PIXEL_FORMAT_BPP40_YUVA;
 8008d14:	2348      	movs	r3, #72	; 0x48
 8008d16:	e004      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605669248003109):  return SAIL_PIXEL_FORMAT_BPP48_YUVA;
 8008d18:	2349      	movs	r3, #73	; 0x49
 8008d1a:	e002      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674397475):  return SAIL_PIXEL_FORMAT_BPP64_YUVA;
 8008d1c:	234a      	movs	r3, #74	; 0x4a
 8008d1e:	e000      	b.n	8008d22 <sail_pixel_format_from_string+0xbf6>
    }

    return SAIL_PIXEL_FORMAT_UNKNOWN;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bdb0      	pop	{r4, r5, r7, pc}
 8008d2a:	bf00      	nop

08008d2c <sail_compression_from_string>:
    }

    return NULL;
}

enum SailCompression sail_compression_from_string(const char *str) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 8008d34:	f107 0308 	add.w	r3, r7, #8
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f004 f8c8 	bl	800ced0 <sail_string_hash>
 8008d40:	4603      	mov	r3, r0
 8008d42:	82fb      	strh	r3, [r7, #22]
 8008d44:	8afb      	ldrh	r3, [r7, #22]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <sail_compression_from_string+0x2c>
 8008d54:	2300      	movs	r3, #0
 8008d56:	e2b0      	b.n	80092ba <sail_compression_from_string+0x58e>
                        /* cleanup */ return SAIL_COMPRESSION_UNKNOWN);

    switch (hash) {
 8008d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d5c:	48ba      	ldr	r0, [pc, #744]	; (8009048 <sail_compression_from_string+0x31c>)
 8008d5e:	49bb      	ldr	r1, [pc, #748]	; (800904c <sail_compression_from_string+0x320>)
 8008d60:	428b      	cmp	r3, r1
 8008d62:	bf08      	it	eq
 8008d64:	4282      	cmpeq	r2, r0
 8008d66:	f000 82a1 	beq.w	80092ac <sail_compression_from_string+0x580>
 8008d6a:	49b9      	ldr	r1, [pc, #740]	; (8009050 <sail_compression_from_string+0x324>)
 8008d6c:	428a      	cmp	r2, r1
 8008d6e:	49b7      	ldr	r1, [pc, #732]	; (800904c <sail_compression_from_string+0x320>)
 8008d70:	eb73 0101 	sbcs.w	r1, r3, r1
 8008d74:	f080 82a0 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008d78:	48b6      	ldr	r0, [pc, #728]	; (8009054 <sail_compression_from_string+0x328>)
 8008d7a:	49b7      	ldr	r1, [pc, #732]	; (8009058 <sail_compression_from_string+0x32c>)
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf08      	it	eq
 8008d80:	4282      	cmpeq	r2, r0
 8008d82:	f000 8251 	beq.w	8009228 <sail_compression_from_string+0x4fc>
 8008d86:	49b5      	ldr	r1, [pc, #724]	; (800905c <sail_compression_from_string+0x330>)
 8008d88:	428a      	cmp	r2, r1
 8008d8a:	49b3      	ldr	r1, [pc, #716]	; (8009058 <sail_compression_from_string+0x32c>)
 8008d8c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008d90:	f080 8292 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008d94:	48b2      	ldr	r0, [pc, #712]	; (8009060 <sail_compression_from_string+0x334>)
 8008d96:	49b3      	ldr	r1, [pc, #716]	; (8009064 <sail_compression_from_string+0x338>)
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf08      	it	eq
 8008d9c:	4282      	cmpeq	r2, r0
 8008d9e:	f000 8275 	beq.w	800928c <sail_compression_from_string+0x560>
 8008da2:	49b1      	ldr	r1, [pc, #708]	; (8009068 <sail_compression_from_string+0x33c>)
 8008da4:	428a      	cmp	r2, r1
 8008da6:	49af      	ldr	r1, [pc, #700]	; (8009064 <sail_compression_from_string+0x338>)
 8008da8:	eb73 0101 	sbcs.w	r1, r3, r1
 8008dac:	f080 8284 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008db0:	48ae      	ldr	r0, [pc, #696]	; (800906c <sail_compression_from_string+0x340>)
 8008db2:	49af      	ldr	r1, [pc, #700]	; (8009070 <sail_compression_from_string+0x344>)
 8008db4:	428b      	cmp	r3, r1
 8008db6:	bf08      	it	eq
 8008db8:	4282      	cmpeq	r2, r0
 8008dba:	f000 823f 	beq.w	800923c <sail_compression_from_string+0x510>
 8008dbe:	49ad      	ldr	r1, [pc, #692]	; (8009074 <sail_compression_from_string+0x348>)
 8008dc0:	428a      	cmp	r2, r1
 8008dc2:	49ab      	ldr	r1, [pc, #684]	; (8009070 <sail_compression_from_string+0x344>)
 8008dc4:	eb73 0101 	sbcs.w	r1, r3, r1
 8008dc8:	f080 8276 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008dcc:	48aa      	ldr	r0, [pc, #680]	; (8009078 <sail_compression_from_string+0x34c>)
 8008dce:	49a8      	ldr	r1, [pc, #672]	; (8009070 <sail_compression_from_string+0x344>)
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	bf08      	it	eq
 8008dd4:	4282      	cmpeq	r2, r0
 8008dd6:	f000 822d 	beq.w	8009234 <sail_compression_from_string+0x508>
 8008dda:	49a8      	ldr	r1, [pc, #672]	; (800907c <sail_compression_from_string+0x350>)
 8008ddc:	428a      	cmp	r2, r1
 8008dde:	49a4      	ldr	r1, [pc, #656]	; (8009070 <sail_compression_from_string+0x344>)
 8008de0:	eb73 0101 	sbcs.w	r1, r3, r1
 8008de4:	f080 8268 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008de8:	48a5      	ldr	r0, [pc, #660]	; (8009080 <sail_compression_from_string+0x354>)
 8008dea:	49a1      	ldr	r1, [pc, #644]	; (8009070 <sail_compression_from_string+0x344>)
 8008dec:	428b      	cmp	r3, r1
 8008dee:	bf08      	it	eq
 8008df0:	4282      	cmpeq	r2, r0
 8008df2:	f000 821d 	beq.w	8009230 <sail_compression_from_string+0x504>
 8008df6:	49a0      	ldr	r1, [pc, #640]	; (8009078 <sail_compression_from_string+0x34c>)
 8008df8:	428a      	cmp	r2, r1
 8008dfa:	499d      	ldr	r1, [pc, #628]	; (8009070 <sail_compression_from_string+0x344>)
 8008dfc:	eb73 0101 	sbcs.w	r1, r3, r1
 8008e00:	f080 825a 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008e04:	489f      	ldr	r0, [pc, #636]	; (8009084 <sail_compression_from_string+0x358>)
 8008e06:	49a0      	ldr	r1, [pc, #640]	; (8009088 <sail_compression_from_string+0x35c>)
 8008e08:	428b      	cmp	r3, r1
 8008e0a:	bf08      	it	eq
 8008e0c:	4282      	cmpeq	r2, r0
 8008e0e:	f000 8247 	beq.w	80092a0 <sail_compression_from_string+0x574>
 8008e12:	499e      	ldr	r1, [pc, #632]	; (800908c <sail_compression_from_string+0x360>)
 8008e14:	428a      	cmp	r2, r1
 8008e16:	499c      	ldr	r1, [pc, #624]	; (8009088 <sail_compression_from_string+0x35c>)
 8008e18:	eb73 0101 	sbcs.w	r1, r3, r1
 8008e1c:	f080 824c 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008e20:	489b      	ldr	r0, [pc, #620]	; (8009090 <sail_compression_from_string+0x364>)
 8008e22:	499c      	ldr	r1, [pc, #624]	; (8009094 <sail_compression_from_string+0x368>)
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf08      	it	eq
 8008e28:	4282      	cmpeq	r2, r0
 8008e2a:	f000 8231 	beq.w	8009290 <sail_compression_from_string+0x564>
 8008e2e:	499a      	ldr	r1, [pc, #616]	; (8009098 <sail_compression_from_string+0x36c>)
 8008e30:	428a      	cmp	r2, r1
 8008e32:	4998      	ldr	r1, [pc, #608]	; (8009094 <sail_compression_from_string+0x368>)
 8008e34:	eb73 0101 	sbcs.w	r1, r3, r1
 8008e38:	f080 823e 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008e3c:	4897      	ldr	r0, [pc, #604]	; (800909c <sail_compression_from_string+0x370>)
 8008e3e:	4998      	ldr	r1, [pc, #608]	; (80090a0 <sail_compression_from_string+0x374>)
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf08      	it	eq
 8008e44:	4282      	cmpeq	r2, r0
 8008e46:	f000 820f 	beq.w	8009268 <sail_compression_from_string+0x53c>
 8008e4a:	4996      	ldr	r1, [pc, #600]	; (80090a4 <sail_compression_from_string+0x378>)
 8008e4c:	428a      	cmp	r2, r1
 8008e4e:	4994      	ldr	r1, [pc, #592]	; (80090a0 <sail_compression_from_string+0x374>)
 8008e50:	eb73 0101 	sbcs.w	r1, r3, r1
 8008e54:	f080 8230 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008e58:	4893      	ldr	r0, [pc, #588]	; (80090a8 <sail_compression_from_string+0x37c>)
 8008e5a:	4994      	ldr	r1, [pc, #592]	; (80090ac <sail_compression_from_string+0x380>)
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf08      	it	eq
 8008e60:	4282      	cmpeq	r2, r0
 8008e62:	f000 81f7 	beq.w	8009254 <sail_compression_from_string+0x528>
 8008e66:	4992      	ldr	r1, [pc, #584]	; (80090b0 <sail_compression_from_string+0x384>)
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	4990      	ldr	r1, [pc, #576]	; (80090ac <sail_compression_from_string+0x380>)
 8008e6c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008e70:	f080 8222 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008e74:	488f      	ldr	r0, [pc, #572]	; (80090b4 <sail_compression_from_string+0x388>)
 8008e76:	4990      	ldr	r1, [pc, #576]	; (80090b8 <sail_compression_from_string+0x38c>)
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf08      	it	eq
 8008e7c:	4282      	cmpeq	r2, r0
 8008e7e:	f000 81db 	beq.w	8009238 <sail_compression_from_string+0x50c>
 8008e82:	498e      	ldr	r1, [pc, #568]	; (80090bc <sail_compression_from_string+0x390>)
 8008e84:	428a      	cmp	r2, r1
 8008e86:	498c      	ldr	r1, [pc, #560]	; (80090b8 <sail_compression_from_string+0x38c>)
 8008e88:	eb73 0101 	sbcs.w	r1, r3, r1
 8008e8c:	f080 8214 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008e90:	488b      	ldr	r0, [pc, #556]	; (80090c0 <sail_compression_from_string+0x394>)
 8008e92:	498c      	ldr	r1, [pc, #560]	; (80090c4 <sail_compression_from_string+0x398>)
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf08      	it	eq
 8008e98:	4282      	cmpeq	r2, r0
 8008e9a:	f000 81f5 	beq.w	8009288 <sail_compression_from_string+0x55c>
 8008e9e:	498a      	ldr	r1, [pc, #552]	; (80090c8 <sail_compression_from_string+0x39c>)
 8008ea0:	428a      	cmp	r2, r1
 8008ea2:	4988      	ldr	r1, [pc, #544]	; (80090c4 <sail_compression_from_string+0x398>)
 8008ea4:	eb73 0101 	sbcs.w	r1, r3, r1
 8008ea8:	f080 8206 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008eac:	4887      	ldr	r0, [pc, #540]	; (80090cc <sail_compression_from_string+0x3a0>)
 8008eae:	4988      	ldr	r1, [pc, #544]	; (80090d0 <sail_compression_from_string+0x3a4>)
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf08      	it	eq
 8008eb4:	4282      	cmpeq	r2, r0
 8008eb6:	f000 81c5 	beq.w	8009244 <sail_compression_from_string+0x518>
 8008eba:	4986      	ldr	r1, [pc, #536]	; (80090d4 <sail_compression_from_string+0x3a8>)
 8008ebc:	428a      	cmp	r2, r1
 8008ebe:	4984      	ldr	r1, [pc, #528]	; (80090d0 <sail_compression_from_string+0x3a4>)
 8008ec0:	eb73 0101 	sbcs.w	r1, r3, r1
 8008ec4:	f080 81f8 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008ec8:	4883      	ldr	r0, [pc, #524]	; (80090d8 <sail_compression_from_string+0x3ac>)
 8008eca:	4981      	ldr	r1, [pc, #516]	; (80090d0 <sail_compression_from_string+0x3a4>)
 8008ecc:	428b      	cmp	r3, r1
 8008ece:	bf08      	it	eq
 8008ed0:	4282      	cmpeq	r2, r0
 8008ed2:	f000 81b5 	beq.w	8009240 <sail_compression_from_string+0x514>
 8008ed6:	4981      	ldr	r1, [pc, #516]	; (80090dc <sail_compression_from_string+0x3b0>)
 8008ed8:	428a      	cmp	r2, r1
 8008eda:	497d      	ldr	r1, [pc, #500]	; (80090d0 <sail_compression_from_string+0x3a4>)
 8008edc:	eb73 0101 	sbcs.w	r1, r3, r1
 8008ee0:	f080 81ea 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008ee4:	487e      	ldr	r0, [pc, #504]	; (80090e0 <sail_compression_from_string+0x3b4>)
 8008ee6:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 8008eea:	428b      	cmp	r3, r1
 8008eec:	bf08      	it	eq
 8008eee:	4282      	cmpeq	r2, r0
 8008ef0:	f000 8196 	beq.w	8009220 <sail_compression_from_string+0x4f4>
 8008ef4:	497b      	ldr	r1, [pc, #492]	; (80090e4 <sail_compression_from_string+0x3b8>)
 8008ef6:	428a      	cmp	r2, r1
 8008ef8:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 8008efc:	eb73 0101 	sbcs.w	r1, r3, r1
 8008f00:	f080 81da 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008f04:	4878      	ldr	r0, [pc, #480]	; (80090e8 <sail_compression_from_string+0x3bc>)
 8008f06:	f24d 01ac 	movw	r1, #53420	; 0xd0ac
 8008f0a:	428b      	cmp	r3, r1
 8008f0c:	bf08      	it	eq
 8008f0e:	4282      	cmpeq	r2, r0
 8008f10:	f000 81c4 	beq.w	800929c <sail_compression_from_string+0x570>
 8008f14:	4975      	ldr	r1, [pc, #468]	; (80090ec <sail_compression_from_string+0x3c0>)
 8008f16:	428a      	cmp	r2, r1
 8008f18:	f24d 01ac 	movw	r1, #53420	; 0xd0ac
 8008f1c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008f20:	f080 81ca 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008f24:	4872      	ldr	r0, [pc, #456]	; (80090f0 <sail_compression_from_string+0x3c4>)
 8008f26:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 8008f2a:	428b      	cmp	r3, r1
 8008f2c:	bf08      	it	eq
 8008f2e:	4282      	cmpeq	r2, r0
 8008f30:	f000 819e 	beq.w	8009270 <sail_compression_from_string+0x544>
 8008f34:	496f      	ldr	r1, [pc, #444]	; (80090f4 <sail_compression_from_string+0x3c8>)
 8008f36:	428a      	cmp	r2, r1
 8008f38:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 8008f3c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008f40:	f080 81ba 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008f44:	486c      	ldr	r0, [pc, #432]	; (80090f8 <sail_compression_from_string+0x3cc>)
 8008f46:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 8008f4a:	428b      	cmp	r3, r1
 8008f4c:	bf08      	it	eq
 8008f4e:	4282      	cmpeq	r2, r0
 8008f50:	f000 818c 	beq.w	800926c <sail_compression_from_string+0x540>
 8008f54:	4969      	ldr	r1, [pc, #420]	; (80090fc <sail_compression_from_string+0x3d0>)
 8008f56:	428a      	cmp	r2, r1
 8008f58:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 8008f5c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008f60:	f080 81aa 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008f64:	4866      	ldr	r0, [pc, #408]	; (8009100 <sail_compression_from_string+0x3d4>)
 8008f66:	f24d 01a8 	movw	r1, #53416	; 0xd0a8
 8008f6a:	428b      	cmp	r3, r1
 8008f6c:	bf08      	it	eq
 8008f6e:	4282      	cmpeq	r2, r0
 8008f70:	f000 816c 	beq.w	800924c <sail_compression_from_string+0x520>
 8008f74:	4963      	ldr	r1, [pc, #396]	; (8009104 <sail_compression_from_string+0x3d8>)
 8008f76:	428a      	cmp	r2, r1
 8008f78:	f24d 01a8 	movw	r1, #53416	; 0xd0a8
 8008f7c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008f80:	f080 819a 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008f84:	4860      	ldr	r0, [pc, #384]	; (8009108 <sail_compression_from_string+0x3dc>)
 8008f86:	f240 6152 	movw	r1, #1618	; 0x652
 8008f8a:	428b      	cmp	r3, r1
 8008f8c:	bf08      	it	eq
 8008f8e:	4282      	cmpeq	r2, r0
 8008f90:	f000 8164 	beq.w	800925c <sail_compression_from_string+0x530>
 8008f94:	495d      	ldr	r1, [pc, #372]	; (800910c <sail_compression_from_string+0x3e0>)
 8008f96:	428a      	cmp	r2, r1
 8008f98:	f240 6152 	movw	r1, #1618	; 0x652
 8008f9c:	eb73 0101 	sbcs.w	r1, r3, r1
 8008fa0:	f080 818a 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008fa4:	485a      	ldr	r0, [pc, #360]	; (8009110 <sail_compression_from_string+0x3e4>)
 8008fa6:	f240 6152 	movw	r1, #1618	; 0x652
 8008faa:	428b      	cmp	r3, r1
 8008fac:	bf08      	it	eq
 8008fae:	4282      	cmpeq	r2, r0
 8008fb0:	f000 8152 	beq.w	8009258 <sail_compression_from_string+0x52c>
 8008fb4:	4957      	ldr	r1, [pc, #348]	; (8009114 <sail_compression_from_string+0x3e8>)
 8008fb6:	428a      	cmp	r2, r1
 8008fb8:	f240 6152 	movw	r1, #1618	; 0x652
 8008fbc:	eb73 0101 	sbcs.w	r1, r3, r1
 8008fc0:	f080 817a 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008fc4:	4854      	ldr	r0, [pc, #336]	; (8009118 <sail_compression_from_string+0x3ec>)
 8008fc6:	f240 6152 	movw	r1, #1618	; 0x652
 8008fca:	428b      	cmp	r3, r1
 8008fcc:	bf08      	it	eq
 8008fce:	4282      	cmpeq	r2, r0
 8008fd0:	f000 813e 	beq.w	8009250 <sail_compression_from_string+0x524>
 8008fd4:	4951      	ldr	r1, [pc, #324]	; (800911c <sail_compression_from_string+0x3f0>)
 8008fd6:	428a      	cmp	r2, r1
 8008fd8:	f240 6152 	movw	r1, #1618	; 0x652
 8008fdc:	eb73 0101 	sbcs.w	r1, r3, r1
 8008fe0:	f080 816a 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008fe4:	494e      	ldr	r1, [pc, #312]	; (8009120 <sail_compression_from_string+0x3f4>)
 8008fe6:	2b31      	cmp	r3, #49	; 0x31
 8008fe8:	bf08      	it	eq
 8008fea:	428a      	cmpeq	r2, r1
 8008fec:	f000 814a 	beq.w	8009284 <sail_compression_from_string+0x558>
 8008ff0:	494c      	ldr	r1, [pc, #304]	; (8009124 <sail_compression_from_string+0x3f8>)
 8008ff2:	428a      	cmp	r2, r1
 8008ff4:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 8008ff8:	f080 815e 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8008ffc:	494a      	ldr	r1, [pc, #296]	; (8009128 <sail_compression_from_string+0x3fc>)
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	bf08      	it	eq
 8009002:	428a      	cmpeq	r2, r1
 8009004:	f000 8156 	beq.w	80092b4 <sail_compression_from_string+0x588>
 8009008:	4948      	ldr	r1, [pc, #288]	; (800912c <sail_compression_from_string+0x400>)
 800900a:	428a      	cmp	r2, r1
 800900c:	f173 0101 	sbcs.w	r1, r3, #1
 8009010:	f080 8152 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8009014:	4946      	ldr	r1, [pc, #280]	; (8009130 <sail_compression_from_string+0x404>)
 8009016:	2b01      	cmp	r3, #1
 8009018:	bf08      	it	eq
 800901a:	428a      	cmpeq	r2, r1
 800901c:	f000 8148 	beq.w	80092b0 <sail_compression_from_string+0x584>
 8009020:	4944      	ldr	r1, [pc, #272]	; (8009134 <sail_compression_from_string+0x408>)
 8009022:	428a      	cmp	r2, r1
 8009024:	f173 0101 	sbcs.w	r1, r3, #1
 8009028:	f080 8146 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 800902c:	4942      	ldr	r1, [pc, #264]	; (8009138 <sail_compression_from_string+0x40c>)
 800902e:	2b01      	cmp	r3, #1
 8009030:	bf08      	it	eq
 8009032:	428a      	cmpeq	r2, r1
 8009034:	f000 80f6 	beq.w	8009224 <sail_compression_from_string+0x4f8>
 8009038:	4940      	ldr	r1, [pc, #256]	; (800913c <sail_compression_from_string+0x410>)
 800903a:	428a      	cmp	r2, r1
 800903c:	f173 0101 	sbcs.w	r1, r3, #1
 8009040:	f080 813a 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8009044:	493e      	ldr	r1, [pc, #248]	; (8009140 <sail_compression_from_string+0x414>)
 8009046:	e07d      	b.n	8009144 <sail_compression_from_string+0x418>
 8009048:	93950d84 	.word	0x93950d84
 800904c:	c02285d1 	.word	0xc02285d1
 8009050:	93950d85 	.word	0x93950d85
 8009054:	ccbd5d62 	.word	0xccbd5d62
 8009058:	98213c90 	.word	0x98213c90
 800905c:	ccbd5d63 	.word	0xccbd5d63
 8009060:	353f029e 	.word	0x353f029e
 8009064:	726cff80 	.word	0x726cff80
 8009068:	353f029f 	.word	0x353f029f
 800906c:	2932f8c3 	.word	0x2932f8c3
 8009070:	726ad286 	.word	0x726ad286
 8009074:	2932f8c4 	.word	0x2932f8c4
 8009078:	292c37bc 	.word	0x292c37bc
 800907c:	292c37bd 	.word	0x292c37bd
 8009080:	292c37bb 	.word	0x292c37bb
 8009084:	9e967c9d 	.word	0x9e967c9d
 8009088:	0377ae64 	.word	0x0377ae64
 800908c:	9e967c9e 	.word	0x9e967c9e
 8009090:	cb4f9678 	.word	0xcb4f9678
 8009094:	0377aaa6 	.word	0x0377aaa6
 8009098:	cb4f9679 	.word	0xcb4f9679
 800909c:	db02ec1a 	.word	0xdb02ec1a
 80090a0:	0377a339 	.word	0x0377a339
 80090a4:	db02ec1b 	.word	0xdb02ec1b
 80090a8:	f3d3e2d3 	.word	0xf3d3e2d3
 80090ac:	0377a215 	.word	0x0377a215
 80090b0:	f3d3e2d4 	.word	0xf3d3e2d4
 80090b4:	013f9aec 	.word	0x013f9aec
 80090b8:	037799c6 	.word	0x037799c6
 80090bc:	013f9aed 	.word	0x013f9aed
 80090c0:	7d8b7ff6 	.word	0x7d8b7ff6
 80090c4:	001ae621 	.word	0x001ae621
 80090c8:	7d8b7ff7 	.word	0x7d8b7ff7
 80090cc:	26d361f3 	.word	0x26d361f3
 80090d0:	001ae5a1 	.word	0x001ae5a1
 80090d4:	26d361f4 	.word	0x26d361f4
 80090d8:	26d361f1 	.word	0x26d361f1
 80090dc:	26d361f2 	.word	0x26d361f2
 80090e0:	4e417975 	.word	0x4e417975
 80090e4:	4e417976 	.word	0x4e417976
 80090e8:	a3c28c37 	.word	0xa3c28c37
 80090ec:	a3c28c38 	.word	0xa3c28c38
 80090f0:	03ba3442 	.word	0x03ba3442
 80090f4:	03ba3443 	.word	0x03ba3443
 80090f8:	03ba343c 	.word	0x03ba343c
 80090fc:	03ba343d 	.word	0x03ba343d
 8009100:	1c4933ba 	.word	0x1c4933ba
 8009104:	1c4933bb 	.word	0x1c4933bb
 8009108:	b83723e4 	.word	0xb83723e4
 800910c:	b83723e5 	.word	0xb83723e5
 8009110:	b83723ca 	.word	0xb83723ca
 8009114:	b83723cb 	.word	0xb83723cb
 8009118:	b8372275 	.word	0xb8372275
 800911c:	b8372276 	.word	0xb8372276
 8009120:	0dbe817a 	.word	0x0dbe817a
 8009124:	0dbe817b 	.word	0x0dbe817b
 8009128:	7c8fd5ca 	.word	0x7c8fd5ca
 800912c:	7c8fd5cb 	.word	0x7c8fd5cb
 8009130:	7c8df2d3 	.word	0x7c8df2d3
 8009134:	7c8df2d4 	.word	0x7c8df2d4
 8009138:	7c892f75 	.word	0x7c892f75
 800913c:	7c892f76 	.word	0x7c892f76
 8009140:	7c890644 	.word	0x7c890644
 8009144:	2b01      	cmp	r3, #1
 8009146:	bf08      	it	eq
 8009148:	428a      	cmpeq	r2, r1
 800914a:	f000 8099 	beq.w	8009280 <sail_compression_from_string+0x554>
 800914e:	495d      	ldr	r1, [pc, #372]	; (80092c4 <sail_compression_from_string+0x598>)
 8009150:	428a      	cmp	r2, r1
 8009152:	f173 0101 	sbcs.w	r1, r3, #1
 8009156:	f080 80af 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 800915a:	495b      	ldr	r1, [pc, #364]	; (80092c8 <sail_compression_from_string+0x59c>)
 800915c:	2b01      	cmp	r3, #1
 800915e:	bf08      	it	eq
 8009160:	428a      	cmpeq	r2, r1
 8009162:	f000 8089 	beq.w	8009278 <sail_compression_from_string+0x54c>
 8009166:	4959      	ldr	r1, [pc, #356]	; (80092cc <sail_compression_from_string+0x5a0>)
 8009168:	428a      	cmp	r2, r1
 800916a:	f173 0101 	sbcs.w	r1, r3, #1
 800916e:	f080 80a3 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8009172:	4957      	ldr	r1, [pc, #348]	; (80092d0 <sail_compression_from_string+0x5a4>)
 8009174:	2b01      	cmp	r3, #1
 8009176:	bf08      	it	eq
 8009178:	428a      	cmpeq	r2, r1
 800917a:	d07b      	beq.n	8009274 <sail_compression_from_string+0x548>
 800917c:	4955      	ldr	r1, [pc, #340]	; (80092d4 <sail_compression_from_string+0x5a8>)
 800917e:	428a      	cmp	r2, r1
 8009180:	f173 0101 	sbcs.w	r1, r3, #1
 8009184:	f080 8098 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 8009188:	4953      	ldr	r1, [pc, #332]	; (80092d8 <sail_compression_from_string+0x5ac>)
 800918a:	2b01      	cmp	r3, #1
 800918c:	bf08      	it	eq
 800918e:	428a      	cmpeq	r2, r1
 8009190:	d068      	beq.n	8009264 <sail_compression_from_string+0x538>
 8009192:	4952      	ldr	r1, [pc, #328]	; (80092dc <sail_compression_from_string+0x5b0>)
 8009194:	428a      	cmp	r2, r1
 8009196:	f173 0101 	sbcs.w	r1, r3, #1
 800919a:	f080 808d 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 800919e:	4950      	ldr	r1, [pc, #320]	; (80092e0 <sail_compression_from_string+0x5b4>)
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	bf08      	it	eq
 80091a4:	428a      	cmpeq	r2, r1
 80091a6:	d05b      	beq.n	8009260 <sail_compression_from_string+0x534>
 80091a8:	494e      	ldr	r1, [pc, #312]	; (80092e4 <sail_compression_from_string+0x5b8>)
 80091aa:	428a      	cmp	r2, r1
 80091ac:	f173 0101 	sbcs.w	r1, r3, #1
 80091b0:	f080 8082 	bcs.w	80092b8 <sail_compression_from_string+0x58c>
 80091b4:	494c      	ldr	r1, [pc, #304]	; (80092e8 <sail_compression_from_string+0x5bc>)
 80091b6:	4411      	add	r1, r2
 80091b8:	4319      	orrs	r1, r3
 80091ba:	d075      	beq.n	80092a8 <sail_compression_from_string+0x57c>
 80091bc:	494b      	ldr	r1, [pc, #300]	; (80092ec <sail_compression_from_string+0x5c0>)
 80091be:	428a      	cmp	r2, r1
 80091c0:	f173 0100 	sbcs.w	r1, r3, #0
 80091c4:	d278      	bcs.n	80092b8 <sail_compression_from_string+0x58c>
 80091c6:	494a      	ldr	r1, [pc, #296]	; (80092f0 <sail_compression_from_string+0x5c4>)
 80091c8:	4411      	add	r1, r2
 80091ca:	4319      	orrs	r1, r3
 80091cc:	d06a      	beq.n	80092a4 <sail_compression_from_string+0x578>
 80091ce:	4949      	ldr	r1, [pc, #292]	; (80092f4 <sail_compression_from_string+0x5c8>)
 80091d0:	428a      	cmp	r2, r1
 80091d2:	f173 0100 	sbcs.w	r1, r3, #0
 80091d6:	d26f      	bcs.n	80092b8 <sail_compression_from_string+0x58c>
 80091d8:	4947      	ldr	r1, [pc, #284]	; (80092f8 <sail_compression_from_string+0x5cc>)
 80091da:	4411      	add	r1, r2
 80091dc:	4319      	orrs	r1, r3
 80091de:	d05b      	beq.n	8009298 <sail_compression_from_string+0x56c>
 80091e0:	4946      	ldr	r1, [pc, #280]	; (80092fc <sail_compression_from_string+0x5d0>)
 80091e2:	428a      	cmp	r2, r1
 80091e4:	f173 0100 	sbcs.w	r1, r3, #0
 80091e8:	d266      	bcs.n	80092b8 <sail_compression_from_string+0x58c>
 80091ea:	4945      	ldr	r1, [pc, #276]	; (8009300 <sail_compression_from_string+0x5d4>)
 80091ec:	4411      	add	r1, r2
 80091ee:	4319      	orrs	r1, r3
 80091f0:	d050      	beq.n	8009294 <sail_compression_from_string+0x568>
 80091f2:	4944      	ldr	r1, [pc, #272]	; (8009304 <sail_compression_from_string+0x5d8>)
 80091f4:	428a      	cmp	r2, r1
 80091f6:	f173 0100 	sbcs.w	r1, r3, #0
 80091fa:	d25d      	bcs.n	80092b8 <sail_compression_from_string+0x58c>
 80091fc:	4942      	ldr	r1, [pc, #264]	; (8009308 <sail_compression_from_string+0x5dc>)
 80091fe:	4411      	add	r1, r2
 8009200:	4319      	orrs	r1, r3
 8009202:	d03b      	beq.n	800927c <sail_compression_from_string+0x550>
 8009204:	4941      	ldr	r1, [pc, #260]	; (800930c <sail_compression_from_string+0x5e0>)
 8009206:	428a      	cmp	r2, r1
 8009208:	f173 0100 	sbcs.w	r1, r3, #0
 800920c:	d254      	bcs.n	80092b8 <sail_compression_from_string+0x58c>
 800920e:	4940      	ldr	r1, [pc, #256]	; (8009310 <sail_compression_from_string+0x5e4>)
 8009210:	4411      	add	r1, r2
 8009212:	4319      	orrs	r1, r3
 8009214:	d00a      	beq.n	800922c <sail_compression_from_string+0x500>
 8009216:	493f      	ldr	r1, [pc, #252]	; (8009314 <sail_compression_from_string+0x5e8>)
 8009218:	4411      	add	r1, r2
 800921a:	430b      	orrs	r3, r1
 800921c:	d014      	beq.n	8009248 <sail_compression_from_string+0x51c>
 800921e:	e04b      	b.n	80092b8 <sail_compression_from_string+0x58c>
        case UINT64_C(229442760833397):      return SAIL_COMPRESSION_UNKNOWN;
 8009220:	2300      	movs	r3, #0
 8009222:	e04a      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384332661):           return SAIL_COMPRESSION_NONE;
 8009224:	2301      	movs	r3, #1
 8009226:	e048      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(10962109560604417378): return SAIL_COMPRESSION_ADOBE_DEFLATE;
 8009228:	2302      	movs	r3, #2
 800922a:	e046      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193450669):            return SAIL_COMPRESSION_AV1;
 800922c:	2303      	movs	r3, #3
 800922e:	e044      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513328571):  return SAIL_COMPRESSION_CCITT_FAX3;
 8009230:	2304      	movs	r3, #4
 8009232:	e042      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513328572):  return SAIL_COMPRESSION_CCITT_FAX4;
 8009234:	2305      	movs	r3, #5
 8009236:	e040      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(249837380045871852):   return SAIL_COMPRESSION_CCITT_RLE;
 8009238:	2306      	movs	r3, #6
 800923a:	e03e      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513771203):  return SAIL_COMPRESSION_CCITT_RLEW;
 800923c:	2307      	movs	r3, #7
 800923e:	e03c      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(7570829698359793):     return SAIL_COMPRESSION_CCITT_T4;
 8009240:	2308      	movs	r3, #8
 8009242:	e03a      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(7570829698359795):     return SAIL_COMPRESSION_CCITT_T6;
 8009244:	2309      	movs	r3, #9
 8009246:	e038      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193453343):            return SAIL_COMPRESSION_DCS;
 8009248:	230a      	movs	r3, #10
 800924a:	e036      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(229420447642554):      return SAIL_COMPRESSION_DEFLATE;
 800924c:	230b      	movs	r3, #11
 800924e:	e034      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6952347705973):        return SAIL_COMPRESSION_IT8_BL;
 8009250:	230c      	movs	r3, #12
 8009252:	e032      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(249846519511114451):   return SAIL_COMPRESSION_IT8_CTPAD;
 8009254:	230d      	movs	r3, #13
 8009256:	e030      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6952347706314):        return SAIL_COMPRESSION_IT8_LW;
 8009258:	230e      	movs	r3, #14
 800925a:	e02e      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6952347706340):        return SAIL_COMPRESSION_IT8_MP;
 800925c:	230f      	movs	r3, #15
 800925e:	e02c      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384174593):           return SAIL_COMPRESSION_JBIG;
 8009260:	2310      	movs	r3, #16
 8009262:	e02a      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384189707):           return SAIL_COMPRESSION_JPEG;
 8009264:	2311      	movs	r3, #17
 8009266:	e028      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(249847773225217050):   return SAIL_COMPRESSION_JPEG_2000;
 8009268:	2312      	movs	r3, #18
 800926a:	e026      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(229428625552444):      return SAIL_COMPRESSION_JPEG_XL;
 800926c:	2313      	movs	r3, #19
 800926e:	e024      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(229428625552450):      return SAIL_COMPRESSION_JPEG_XR;
 8009270:	2314      	movs	r3, #20
 8009272:	e022      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384250027):           return SAIL_COMPRESSION_LERC;
 8009274:	2315      	movs	r3, #21
 8009276:	e020      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384272729):           return SAIL_COMPRESSION_LZMA;
 8009278:	2316      	movs	r3, #22
 800927a:	e01e      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193462818):            return SAIL_COMPRESSION_LZW;
 800927c:	2317      	movs	r3, #23
 800927e:	e01c      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384322116):           return SAIL_COMPRESSION_NEXT;
 8009280:	2318      	movs	r3, #24
 8009282:	e01a      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(210683986298):         return SAIL_COMPRESSION_OJPEG;
 8009284:	2319      	movs	r3, #25
 8009286:	e018      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(7571380909080566):     return SAIL_COMPRESSION_PACKBITS;
 8009288:	231a      	movs	r3, #26
 800928a:	e016      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(8245245943922754206):  return SAIL_COMPRESSION_PIXAR_FILM;
 800928c:	231b      	movs	r3, #27
 800928e:	e014      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(249855937694635640):   return SAIL_COMPRESSION_PIXAR_LOG;
 8009290:	231c      	movs	r3, #28
 8009292:	e012      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193467886):            return SAIL_COMPRESSION_QOI;
 8009294:	231d      	movs	r3, #29
 8009296:	e010      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193468872):            return SAIL_COMPRESSION_RLE;
 8009298:	231e      	movs	r3, #30
 800929a:	e00e      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(229439900388407):      return SAIL_COMPRESSION_SGI_LOG;
 800929c:	231f      	movs	r3, #31
 800929e:	e00c      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(249860051522976925):   return SAIL_COMPRESSION_SGI_LOG24;
 80092a0:	2320      	movs	r3, #32
 80092a2:	e00a      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193470240):            return SAIL_COMPRESSION_T43;
 80092a4:	2321      	movs	r3, #33	; 0x21
 80092a6:	e008      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(193470374):            return SAIL_COMPRESSION_T85;
 80092a8:	2322      	movs	r3, #34	; 0x22
 80092aa:	e006      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(13844775339661004164): return SAIL_COMPRESSION_THUNDERSCAN;
 80092ac:	2323      	movs	r3, #35	; 0x23
 80092ae:	e004      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384644819):           return SAIL_COMPRESSION_WEBP;
 80092b0:	2324      	movs	r3, #36	; 0x24
 80092b2:	e002      	b.n	80092ba <sail_compression_from_string+0x58e>
        case UINT64_C(6384768458):           return SAIL_COMPRESSION_ZSTD;
 80092b4:	2325      	movs	r3, #37	; 0x25
 80092b6:	e000      	b.n	80092ba <sail_compression_from_string+0x58e>
    }

    return SAIL_COMPRESSION_UNKNOWN;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	7c890645 	.word	0x7c890645
 80092c8:	7c884559 	.word	0x7c884559
 80092cc:	7c88455a 	.word	0x7c88455a
 80092d0:	7c87ecab 	.word	0x7c87ecab
 80092d4:	7c87ecac 	.word	0x7c87ecac
 80092d8:	7c87010b 	.word	0x7c87010b
 80092dc:	7c87010c 	.word	0x7c87010c
 80092e0:	7c86c601 	.word	0x7c86c601
 80092e4:	7c86c602 	.word	0x7c86c602
 80092e8:	f477e05a 	.word	0xf477e05a
 80092ec:	0b881fa7 	.word	0x0b881fa7
 80092f0:	f477e0e0 	.word	0xf477e0e0
 80092f4:	0b881f21 	.word	0x0b881f21
 80092f8:	f477e638 	.word	0xf477e638
 80092fc:	0b8819c9 	.word	0x0b8819c9
 8009300:	f477ea12 	.word	0xf477ea12
 8009304:	0b8815ef 	.word	0x0b8815ef
 8009308:	f477fdde 	.word	0xf477fdde
 800930c:	0b880223 	.word	0x0b880223
 8009310:	f4782d53 	.word	0xf4782d53
 8009314:	f47822e1 	.word	0xf47822e1

08009318 <sail_codec_feature_from_string>:
    }

    return NULL;
}

enum SailCodecFeature sail_codec_feature_from_string(const char *str) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 8009320:	f107 0308 	add.w	r3, r7, #8
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f003 fdd2 	bl	800ced0 <sail_string_hash>
 800932c:	4603      	mov	r3, r0
 800932e:	82fb      	strh	r3, [r7, #22]
 8009330:	8afb      	ldrh	r3, [r7, #22]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bf14      	ite	ne
 8009336:	2301      	movne	r3, #1
 8009338:	2300      	moveq	r3, #0
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <sail_codec_feature_from_string+0x2c>
 8009340:	2301      	movs	r3, #1
 8009342:	e05b      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
                        /* cleanup */ return SAIL_CODEC_FEATURE_UNKNOWN);

    switch (hash) {
 8009344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009348:	482e      	ldr	r0, [pc, #184]	; (8009404 <sail_codec_feature_from_string+0xec>)
 800934a:	492f      	ldr	r1, [pc, #188]	; (8009408 <sail_codec_feature_from_string+0xf0>)
 800934c:	428b      	cmp	r3, r1
 800934e:	bf08      	it	eq
 8009350:	4282      	cmpeq	r2, r0
 8009352:	d04a      	beq.n	80093ea <sail_codec_feature_from_string+0xd2>
 8009354:	492d      	ldr	r1, [pc, #180]	; (800940c <sail_codec_feature_from_string+0xf4>)
 8009356:	428a      	cmp	r2, r1
 8009358:	492b      	ldr	r1, [pc, #172]	; (8009408 <sail_codec_feature_from_string+0xf0>)
 800935a:	eb73 0101 	sbcs.w	r1, r3, r1
 800935e:	d24c      	bcs.n	80093fa <sail_codec_feature_from_string+0xe2>
 8009360:	482b      	ldr	r0, [pc, #172]	; (8009410 <sail_codec_feature_from_string+0xf8>)
 8009362:	492c      	ldr	r1, [pc, #176]	; (8009414 <sail_codec_feature_from_string+0xfc>)
 8009364:	428b      	cmp	r3, r1
 8009366:	bf08      	it	eq
 8009368:	4282      	cmpeq	r2, r0
 800936a:	d042      	beq.n	80093f2 <sail_codec_feature_from_string+0xda>
 800936c:	492a      	ldr	r1, [pc, #168]	; (8009418 <sail_codec_feature_from_string+0x100>)
 800936e:	428a      	cmp	r2, r1
 8009370:	4928      	ldr	r1, [pc, #160]	; (8009414 <sail_codec_feature_from_string+0xfc>)
 8009372:	eb73 0101 	sbcs.w	r1, r3, r1
 8009376:	d240      	bcs.n	80093fa <sail_codec_feature_from_string+0xe2>
 8009378:	4828      	ldr	r0, [pc, #160]	; (800941c <sail_codec_feature_from_string+0x104>)
 800937a:	4929      	ldr	r1, [pc, #164]	; (8009420 <sail_codec_feature_from_string+0x108>)
 800937c:	428b      	cmp	r3, r1
 800937e:	bf08      	it	eq
 8009380:	4282      	cmpeq	r2, r0
 8009382:	d034      	beq.n	80093ee <sail_codec_feature_from_string+0xd6>
 8009384:	4927      	ldr	r1, [pc, #156]	; (8009424 <sail_codec_feature_from_string+0x10c>)
 8009386:	428a      	cmp	r2, r1
 8009388:	4925      	ldr	r1, [pc, #148]	; (8009420 <sail_codec_feature_from_string+0x108>)
 800938a:	eb73 0101 	sbcs.w	r1, r3, r1
 800938e:	d234      	bcs.n	80093fa <sail_codec_feature_from_string+0xe2>
 8009390:	4825      	ldr	r0, [pc, #148]	; (8009428 <sail_codec_feature_from_string+0x110>)
 8009392:	4926      	ldr	r1, [pc, #152]	; (800942c <sail_codec_feature_from_string+0x114>)
 8009394:	428b      	cmp	r3, r1
 8009396:	bf08      	it	eq
 8009398:	4282      	cmpeq	r2, r0
 800939a:	d024      	beq.n	80093e6 <sail_codec_feature_from_string+0xce>
 800939c:	4924      	ldr	r1, [pc, #144]	; (8009430 <sail_codec_feature_from_string+0x118>)
 800939e:	428a      	cmp	r2, r1
 80093a0:	4922      	ldr	r1, [pc, #136]	; (800942c <sail_codec_feature_from_string+0x114>)
 80093a2:	eb73 0101 	sbcs.w	r1, r3, r1
 80093a6:	d228      	bcs.n	80093fa <sail_codec_feature_from_string+0xe2>
 80093a8:	4822      	ldr	r0, [pc, #136]	; (8009434 <sail_codec_feature_from_string+0x11c>)
 80093aa:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 80093ae:	428b      	cmp	r3, r1
 80093b0:	bf08      	it	eq
 80093b2:	4282      	cmpeq	r2, r0
 80093b4:	d013      	beq.n	80093de <sail_codec_feature_from_string+0xc6>
 80093b6:	4920      	ldr	r1, [pc, #128]	; (8009438 <sail_codec_feature_from_string+0x120>)
 80093b8:	428a      	cmp	r2, r1
 80093ba:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 80093be:	eb73 0101 	sbcs.w	r1, r3, r1
 80093c2:	d21a      	bcs.n	80093fa <sail_codec_feature_from_string+0xe2>
 80093c4:	491d      	ldr	r1, [pc, #116]	; (800943c <sail_codec_feature_from_string+0x124>)
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	bf08      	it	eq
 80093ca:	428a      	cmpeq	r2, r1
 80093cc:	d013      	beq.n	80093f6 <sail_codec_feature_from_string+0xde>
 80093ce:	481c      	ldr	r0, [pc, #112]	; (8009440 <sail_codec_feature_from_string+0x128>)
 80093d0:	f240 6152 	movw	r1, #1618	; 0x652
 80093d4:	428b      	cmp	r3, r1
 80093d6:	bf08      	it	eq
 80093d8:	4282      	cmpeq	r2, r0
 80093da:	d002      	beq.n	80093e2 <sail_codec_feature_from_string+0xca>
 80093dc:	e00d      	b.n	80093fa <sail_codec_feature_from_string+0xe2>
        case UINT64_C(229442760833397):      return SAIL_CODEC_FEATURE_UNKNOWN;
 80093de:	2301      	movs	r3, #1
 80093e0:	e00c      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
        case UINT64_C(6952739426029):        return SAIL_CODEC_FEATURE_STATIC;
 80093e2:	2302      	movs	r3, #2
 80093e4:	e00a      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
        case UINT64_C(7570758658679240):     return SAIL_CODEC_FEATURE_ANIMATED;
 80093e6:	2304      	movs	r3, #4
 80093e8:	e008      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
        case UINT64_C(13834645239609548286): return SAIL_CODEC_FEATURE_MULTI_PAGED;
 80093ea:	2308      	movs	r3, #8
 80093ec:	e006      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
        case UINT64_C(249851542786072787):   return SAIL_CODEC_FEATURE_META_DATA;
 80093ee:	2310      	movs	r3, #16
 80093f0:	e004      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
        case UINT64_C(8244927930303708800):  return SAIL_CODEC_FEATURE_INTERLACED;
 80093f2:	2320      	movs	r3, #32
 80093f4:	e002      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
        case UINT64_C(6384139556):           return SAIL_CODEC_FEATURE_ICCP;
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	e000      	b.n	80093fc <sail_codec_feature_from_string+0xe4>
    }

    return SAIL_CODEC_FEATURE_UNKNOWN;
 80093fa:	2301      	movs	r3, #1
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	dc79ddfe 	.word	0xdc79ddfe
 8009408:	bffe888b 	.word	0xbffe888b
 800940c:	dc79ddff 	.word	0xdc79ddff
 8009410:	e472fe80 	.word	0xe472fe80
 8009414:	726bde44 	.word	0x726bde44
 8009418:	e472fe81 	.word	0xe472fe81
 800941c:	8658e0d3 	.word	0x8658e0d3
 8009420:	0377a6a7 	.word	0x0377a6a7
 8009424:	8658e0d4 	.word	0x8658e0d4
 8009428:	9c87e1c8 	.word	0x9c87e1c8
 800942c:	001ae590 	.word	0x001ae590
 8009430:	9c87e1c9 	.word	0x9c87e1c9
 8009434:	4e417975 	.word	0x4e417975
 8009438:	4e417976 	.word	0x4e417976
 800943c:	7c863d24 	.word	0x7c863d24
 8009440:	cf904eed 	.word	0xcf904eed

08009444 <sail_alloc_compression_level>:
    SOFTWARE.
*/

#include "sail-common.h"

sail_status_t sail_alloc_compression_level(struct sail_compression_level **compression_level) {
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af02      	add	r7, sp, #8
 800944a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(compression_level);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bf0c      	ite	eq
 8009452:	2301      	moveq	r3, #1
 8009454:	2300      	movne	r3, #0
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d011      	beq.n	8009480 <sail_alloc_compression_level+0x3c>
 800945c:	4b25      	ldr	r3, [pc, #148]	; (80094f4 <sail_alloc_compression_level+0xb0>)
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	4b25      	ldr	r3, [pc, #148]	; (80094f8 <sail_alloc_compression_level+0xb4>)
 8009462:	221e      	movs	r2, #30
 8009464:	4925      	ldr	r1, [pc, #148]	; (80094fc <sail_alloc_compression_level+0xb8>)
 8009466:	2001      	movs	r0, #1
 8009468:	f002 f9bc 	bl	800b7e4 <sail_log>
 800946c:	4b24      	ldr	r3, [pc, #144]	; (8009500 <sail_alloc_compression_level+0xbc>)
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4b24      	ldr	r3, [pc, #144]	; (8009504 <sail_alloc_compression_level+0xc0>)
 8009472:	221e      	movs	r2, #30
 8009474:	4921      	ldr	r1, [pc, #132]	; (80094fc <sail_alloc_compression_level+0xb8>)
 8009476:	2001      	movs	r0, #1
 8009478:	f002 f9b4 	bl	800b7e4 <sail_log>
 800947c:	2301      	movs	r3, #1
 800947e:	e035      	b.n	80094ec <sail_alloc_compression_level+0xa8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_compression_level), &ptr));
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4619      	mov	r1, r3
 8009486:	2020      	movs	r0, #32
 8009488:	f002 faa4 	bl	800b9d4 <sail_malloc>
 800948c:	4603      	mov	r3, r0
 800948e:	81fb      	strh	r3, [r7, #14]
 8009490:	89fb      	ldrh	r3, [r7, #14]
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf14      	ite	ne
 8009496:	2301      	movne	r3, #1
 8009498:	2300      	moveq	r3, #0
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <sail_alloc_compression_level+0x60>
 80094a0:	89fb      	ldrh	r3, [r7, #14]
 80094a2:	e023      	b.n	80094ec <sail_alloc_compression_level+0xa8>
    *compression_level = ptr;
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]

    (*compression_level)->min_level     = 0;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6819      	ldr	r1, [r3, #0]
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	e9c1 2300 	strd	r2, r3, [r1]
    (*compression_level)->max_level     = 0;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6819      	ldr	r1, [r3, #0]
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*compression_level)->default_level = 0;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6819      	ldr	r1, [r3, #0]
 80094ce:	f04f 0200 	mov.w	r2, #0
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    (*compression_level)->step          = 0;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6819      	ldr	r1, [r3, #0]
 80094de:	f04f 0200 	mov.w	r2, #0
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return SAIL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	08014cb0 	.word	0x08014cb0
 80094f8:	08014c3c 	.word	0x08014c3c
 80094fc:	08014c54 	.word	0x08014c54
 8009500:	08014cc8 	.word	0x08014cc8
 8009504:	08014cc4 	.word	0x08014cc4

08009508 <sail_destroy_compression_level>:

void sail_destroy_compression_level(struct sail_compression_level *compression_level) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]

    if (compression_level == NULL) {
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <sail_destroy_compression_level+0x16>
        return;
    }

    sail_free(compression_level);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f002 fae4 	bl	800bae4 <sail_free>
 800951c:	e000      	b.n	8009520 <sail_destroy_compression_level+0x18>
        return;
 800951e:	bf00      	nop
}
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <alloc_context>:

    return SAIL_OK;
}
#endif

static sail_status_t alloc_context(struct sail_context **context) {
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af02      	add	r7, sp, #8
 800952e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	bf0c      	ite	eq
 8009536:	2301      	moveq	r3, #1
 8009538:	2300      	movne	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d011      	beq.n	8009564 <alloc_context+0x3c>
 8009540:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <alloc_context+0x80>)
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4b19      	ldr	r3, [pc, #100]	; (80095ac <alloc_context+0x84>)
 8009546:	22be      	movs	r2, #190	; 0xbe
 8009548:	4919      	ldr	r1, [pc, #100]	; (80095b0 <alloc_context+0x88>)
 800954a:	2001      	movs	r0, #1
 800954c:	f002 f94a 	bl	800b7e4 <sail_log>
 8009550:	4b18      	ldr	r3, [pc, #96]	; (80095b4 <alloc_context+0x8c>)
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4b18      	ldr	r3, [pc, #96]	; (80095b8 <alloc_context+0x90>)
 8009556:	22be      	movs	r2, #190	; 0xbe
 8009558:	4915      	ldr	r1, [pc, #84]	; (80095b0 <alloc_context+0x88>)
 800955a:	2001      	movs	r0, #1
 800955c:	f002 f942 	bl	800b7e4 <sail_log>
 8009560:	2301      	movs	r3, #1
 8009562:	e01d      	b.n	80095a0 <alloc_context+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_context), &ptr));
 8009564:	f107 0308 	add.w	r3, r7, #8
 8009568:	4619      	mov	r1, r3
 800956a:	2008      	movs	r0, #8
 800956c:	f002 fa32 	bl	800b9d4 <sail_malloc>
 8009570:	4603      	mov	r3, r0
 8009572:	81fb      	strh	r3, [r7, #14]
 8009574:	89fb      	ldrh	r3, [r7, #14]
 8009576:	2b00      	cmp	r3, #0
 8009578:	bf14      	ite	ne
 800957a:	2301      	movne	r3, #1
 800957c:	2300      	moveq	r3, #0
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <alloc_context+0x60>
 8009584:	89fb      	ldrh	r3, [r7, #14]
 8009586:	e00b      	b.n	80095a0 <alloc_context+0x78>
    *context = ptr;
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	601a      	str	r2, [r3, #0]

    (*context)->initialized     = false;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]
    (*context)->codec_bundle_node = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	08014d48 	.word	0x08014d48
 80095ac:	08014cdc 	.word	0x08014cdc
 80095b0:	08014cf4 	.word	0x08014cf4
 80095b4:	08014d54 	.word	0x08014d54
 80095b8:	08014d50 	.word	0x08014d50

080095bc <allocate_global_context>:

static sail_status_t allocate_global_context(struct sail_context **context) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bf0c      	ite	eq
 80095ca:	2301      	moveq	r3, #1
 80095cc:	2300      	movne	r3, #0
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d011      	beq.n	80095f8 <allocate_global_context+0x3c>
 80095d4:	4b1b      	ldr	r3, [pc, #108]	; (8009644 <allocate_global_context+0x88>)
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4b1b      	ldr	r3, [pc, #108]	; (8009648 <allocate_global_context+0x8c>)
 80095da:	22cc      	movs	r2, #204	; 0xcc
 80095dc:	491b      	ldr	r1, [pc, #108]	; (800964c <allocate_global_context+0x90>)
 80095de:	2001      	movs	r0, #1
 80095e0:	f002 f900 	bl	800b7e4 <sail_log>
 80095e4:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <allocate_global_context+0x94>)
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <allocate_global_context+0x98>)
 80095ea:	22cc      	movs	r2, #204	; 0xcc
 80095ec:	4917      	ldr	r1, [pc, #92]	; (800964c <allocate_global_context+0x90>)
 80095ee:	2001      	movs	r0, #1
 80095f0:	f002 f8f8 	bl	800b7e4 <sail_log>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e020      	b.n	800963a <allocate_global_context+0x7e>

    if (global_context == NULL) {
 80095f8:	4b17      	ldr	r3, [pc, #92]	; (8009658 <allocate_global_context+0x9c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d117      	bne.n	8009630 <allocate_global_context+0x74>
        SAIL_TRY(alloc_context(&global_context));
 8009600:	4815      	ldr	r0, [pc, #84]	; (8009658 <allocate_global_context+0x9c>)
 8009602:	f7ff ff91 	bl	8009528 <alloc_context>
 8009606:	4603      	mov	r3, r0
 8009608:	81fb      	strh	r3, [r7, #14]
 800960a:	89fb      	ldrh	r3, [r7, #14]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf14      	ite	ne
 8009610:	2301      	movne	r3, #1
 8009612:	2300      	moveq	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <allocate_global_context+0x62>
 800961a:	89fb      	ldrh	r3, [r7, #14]
 800961c:	e00d      	b.n	800963a <allocate_global_context+0x7e>
        SAIL_LOG_DEBUG("Allocated new context %p", global_context);
 800961e:	4b0e      	ldr	r3, [pc, #56]	; (8009658 <allocate_global_context+0x9c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	4b0d      	ldr	r3, [pc, #52]	; (800965c <allocate_global_context+0xa0>)
 8009626:	22d0      	movs	r2, #208	; 0xd0
 8009628:	4908      	ldr	r1, [pc, #32]	; (800964c <allocate_global_context+0x90>)
 800962a:	2005      	movs	r0, #5
 800962c:	f002 f8da 	bl	800b7e4 <sail_log>
    }

    *context = global_context;
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <allocate_global_context+0x9c>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	08014d48 	.word	0x08014d48
 8009648:	08014cdc 	.word	0x08014cdc
 800964c:	08014cf4 	.word	0x08014cf4
 8009650:	08014d54 	.word	0x08014d54
 8009654:	08014d50 	.word	0x08014d50
 8009658:	20003588 	.word	0x20003588
 800965c:	08014d68 	.word	0x08014d68

08009660 <preload_codecs>:
    sail_free(context);

    return SAIL_OK;
}

static sail_status_t preload_codecs(struct sail_context *context) {
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af02      	add	r7, sp, #8
 8009666:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	bf0c      	ite	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	2300      	movne	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d011      	beq.n	800969c <preload_codecs+0x3c>
 8009678:	4b25      	ldr	r3, [pc, #148]	; (8009710 <preload_codecs+0xb0>)
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	4b25      	ldr	r3, [pc, #148]	; (8009714 <preload_codecs+0xb4>)
 800967e:	22e6      	movs	r2, #230	; 0xe6
 8009680:	4925      	ldr	r1, [pc, #148]	; (8009718 <preload_codecs+0xb8>)
 8009682:	2001      	movs	r0, #1
 8009684:	f002 f8ae 	bl	800b7e4 <sail_log>
 8009688:	4b24      	ldr	r3, [pc, #144]	; (800971c <preload_codecs+0xbc>)
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	4b24      	ldr	r3, [pc, #144]	; (8009720 <preload_codecs+0xc0>)
 800968e:	22e6      	movs	r2, #230	; 0xe6
 8009690:	4921      	ldr	r1, [pc, #132]	; (8009718 <preload_codecs+0xb8>)
 8009692:	2001      	movs	r0, #1
 8009694:	f002 f8a6 	bl	800b7e4 <sail_log>
 8009698:	2301      	movs	r3, #1
 800969a:	e035      	b.n	8009708 <preload_codecs+0xa8>

    SAIL_TRY(lock_context());
 800969c:	f000 fb9a 	bl	8009dd4 <lock_context>
 80096a0:	4603      	mov	r3, r0
 80096a2:	827b      	strh	r3, [r7, #18]
 80096a4:	8a7b      	ldrh	r3, [r7, #18]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bf14      	ite	ne
 80096aa:	2301      	movne	r3, #1
 80096ac:	2300      	moveq	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <preload_codecs+0x58>
 80096b4:	8a7b      	ldrh	r3, [r7, #18]
 80096b6:	e027      	b.n	8009708 <preload_codecs+0xa8>

    SAIL_LOG_DEBUG("Preloading codecs");
 80096b8:	4b1a      	ldr	r3, [pc, #104]	; (8009724 <preload_codecs+0xc4>)
 80096ba:	22ea      	movs	r2, #234	; 0xea
 80096bc:	4916      	ldr	r1, [pc, #88]	; (8009718 <preload_codecs+0xb8>)
 80096be:	2005      	movs	r0, #5
 80096c0:	f002 f890 	bl	800b7e4 <sail_log>

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	e00b      	b.n	80096e4 <preload_codecs+0x84>
        const struct sail_codec *codec;

        /* Ignore loading errors on purpose. */
        (void)load_codec_by_codec_info(codec_bundle_node->codec_bundle->codec_info, &codec);
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f107 020c 	add.w	r2, r7, #12
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f002 ff53 	bl	800c584 <load_codec_by_codec_info>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f0      	bne.n	80096cc <preload_codecs+0x6c>
    }

    SAIL_TRY(unlock_context());
 80096ea:	f000 fb7b 	bl	8009de4 <unlock_context>
 80096ee:	4603      	mov	r3, r0
 80096f0:	823b      	strh	r3, [r7, #16]
 80096f2:	8a3b      	ldrh	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bf14      	ite	ne
 80096f8:	2301      	movne	r3, #1
 80096fa:	2300      	moveq	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <preload_codecs+0xa6>
 8009702:	8a3b      	ldrh	r3, [r7, #16]
 8009704:	e000      	b.n	8009708 <preload_codecs+0xa8>

    return SAIL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	08014d48 	.word	0x08014d48
 8009714:	08014cdc 	.word	0x08014cdc
 8009718:	08014cf4 	.word	0x08014cf4
 800971c:	08014d54 	.word	0x08014d54
 8009720:	08014d50 	.word	0x08014d50
 8009724:	08014d84 	.word	0x08014d84

08009728 <codec_bundle_priority_comparator>:

static int codec_bundle_priority_comparator(const void *elem1, const void *elem2) {
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]

    const int priority1 = (*(struct sail_codec_bundle_node **)elem1)->codec_bundle->codec_info->priority;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	7a1b      	ldrb	r3, [r3, #8]
 800973c:	60fb      	str	r3, [r7, #12]
    const int priority2 = (*(struct sail_codec_bundle_node **)elem2)->codec_bundle->codec_info->priority;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	7a1b      	ldrb	r3, [r3, #8]
 8009748:	60bb      	str	r3, [r7, #8]

    return priority1 - priority2;
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	1ad3      	subs	r3, r2, r3
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <sort_enumerated_codecs>:

/*
 * Space complexity: O(n)
 * Time complexity: O(n * log(n))
 */
static sail_status_t sort_enumerated_codecs(struct sail_context *context) {
 800975c:	b580      	push	{r7, lr}
 800975e:	b08c      	sub	sp, #48	; 0x30
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]

    /* 0 or 1 elements - nothing to sort. */
    if (context->codec_bundle_node == NULL || context->codec_bundle_node->next == NULL) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <sort_enumerated_codecs+0x1a>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <sort_enumerated_codecs+0x1e>
        return SAIL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e061      	b.n	800983e <sort_enumerated_codecs+0xe2>
    }

    /* Count the number of codecs. */
    unsigned codecs_num = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	62bb      	str	r3, [r7, #40]	; 0x28
 8009784:	e005      	b.n	8009792 <sort_enumerated_codecs+0x36>
        codecs_num++;
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	3301      	adds	r3, #1
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1f6      	bne.n	8009786 <sort_enumerated_codecs+0x2a>
    }

    /* Copy codecs to an array. */
    struct sail_codec_bundle_node **codec_bundle_array;
    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_bundle_node *) * codecs_num, &ptr));
 8009798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	f107 0208 	add.w	r2, r7, #8
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f002 f916 	bl	800b9d4 <sail_malloc>
 80097a8:	4603      	mov	r3, r0
 80097aa:	82fb      	strh	r3, [r7, #22]
 80097ac:	8afb      	ldrh	r3, [r7, #22]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bf14      	ite	ne
 80097b2:	2301      	movne	r3, #1
 80097b4:	2300      	moveq	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <sort_enumerated_codecs+0x64>
 80097bc:	8afb      	ldrh	r3, [r7, #22]
 80097be:	e03e      	b.n	800983e <sort_enumerated_codecs+0xe2>
    codec_bundle_array = ptr;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	613b      	str	r3, [r7, #16]

    {
        unsigned i = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
        for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	623b      	str	r3, [r7, #32]
 80097ce:	e00a      	b.n	80097e6 <sort_enumerated_codecs+0x8a>
            codec_bundle_array[i++] = codec_bundle_node;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	627a      	str	r2, [r7, #36]	; 0x24
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4413      	add	r3, r2
 80097dc:	6a3a      	ldr	r2, [r7, #32]
 80097de:	601a      	str	r2, [r3, #0]
        for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	623b      	str	r3, [r7, #32]
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f1      	bne.n	80097d0 <sort_enumerated_codecs+0x74>
        }
    }

    /* Sort the array. */
    qsort(codec_bundle_array, codecs_num, sizeof(struct sail_codec_bundle_node *), codec_bundle_priority_comparator);
 80097ec:	4b16      	ldr	r3, [pc, #88]	; (8009848 <sort_enumerated_codecs+0xec>)
 80097ee:	2204      	movs	r2, #4
 80097f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f2:	6938      	ldr	r0, [r7, #16]
 80097f4:	f006 fe0a 	bl	801040c <qsort>

    /* Reconstruct the linked list. */
    struct sail_codec_bundle_node *codec_bundle_node_sorted_it = codec_bundle_array[0];
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	61fb      	str	r3, [r7, #28]
    struct sail_codec_bundle_node *codec_bundle_node_sorted = codec_bundle_node_sorted_it;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	60fb      	str	r3, [r7, #12]

    for (unsigned i = 1; i < codecs_num; i++) {
 8009802:	2301      	movs	r3, #1
 8009804:	61bb      	str	r3, [r7, #24]
 8009806:	e00c      	b.n	8009822 <sort_enumerated_codecs+0xc6>
        codec_bundle_node_sorted_it->next = codec_bundle_array[i];
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	4413      	add	r3, r2
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	605a      	str	r2, [r3, #4]
        codec_bundle_node_sorted_it = codec_bundle_node_sorted_it->next;
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 1; i < codecs_num; i++) {
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	3301      	adds	r3, #1
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	429a      	cmp	r2, r3
 8009828:	d3ee      	bcc.n	8009808 <sort_enumerated_codecs+0xac>
    }

    codec_bundle_node_sorted_it->next = NULL;
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	2200      	movs	r2, #0
 800982e:	605a      	str	r2, [r3, #4]

    context->codec_bundle_node = codec_bundle_node_sorted;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	605a      	str	r2, [r3, #4]

    /* Cleanup */
    sail_free(codec_bundle_array);
 8009836:	6938      	ldr	r0, [r7, #16]
 8009838:	f002 f954 	bl	800bae4 <sail_free>

    return SAIL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3730      	adds	r7, #48	; 0x30
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	08009729 	.word	0x08009729

0800984c <print_enumerated_codecs>:

static sail_status_t print_enumerated_codecs(struct sail_context *context) {
 800984c:	b580      	push	{r7, lr}
 800984e:	b08c      	sub	sp, #48	; 0x30
 8009850:	af06      	add	r7, sp, #24
 8009852:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	bf0c      	ite	eq
 800985a:	2301      	moveq	r3, #1
 800985c:	2300      	movne	r3, #0
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d013      	beq.n	800988c <print_enumerated_codecs+0x40>
 8009864:	4b26      	ldr	r3, [pc, #152]	; (8009900 <print_enumerated_codecs+0xb4>)
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4b26      	ldr	r3, [pc, #152]	; (8009904 <print_enumerated_codecs+0xb8>)
 800986a:	f240 1237 	movw	r2, #311	; 0x137
 800986e:	4926      	ldr	r1, [pc, #152]	; (8009908 <print_enumerated_codecs+0xbc>)
 8009870:	2001      	movs	r0, #1
 8009872:	f001 ffb7 	bl	800b7e4 <sail_log>
 8009876:	4b25      	ldr	r3, [pc, #148]	; (800990c <print_enumerated_codecs+0xc0>)
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	4b25      	ldr	r3, [pc, #148]	; (8009910 <print_enumerated_codecs+0xc4>)
 800987c:	f240 1237 	movw	r2, #311	; 0x137
 8009880:	4921      	ldr	r1, [pc, #132]	; (8009908 <print_enumerated_codecs+0xbc>)
 8009882:	2001      	movs	r0, #1
 8009884:	f001 ffae 	bl	800b7e4 <sail_log>
 8009888:	2301      	movs	r3, #1
 800988a:	e035      	b.n	80098f8 <print_enumerated_codecs+0xac>

    const struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	617b      	str	r3, [r7, #20]

    if (codec_bundle_node == NULL) {
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <print_enumerated_codecs+0x50>
        return SAIL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	e02d      	b.n	80098f8 <print_enumerated_codecs+0xac>
    }

    /* Print the found codec infos. */
    SAIL_LOG_DEBUG("Enumerated codecs:");
 800989c:	4b1d      	ldr	r3, [pc, #116]	; (8009914 <print_enumerated_codecs+0xc8>)
 800989e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80098a2:	4919      	ldr	r1, [pc, #100]	; (8009908 <print_enumerated_codecs+0xbc>)
 80098a4:	2005      	movs	r0, #5
 80098a6:	f001 ff9d 	bl	800b7e4 <sail_log>

    for (int counter = 1; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next, counter++) {
 80098aa:	2301      	movs	r3, #1
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	e01f      	b.n	80098f0 <print_enumerated_codecs+0xa4>
        const struct sail_codec_info *codec_info = codec_bundle_node->codec_bundle->codec_info;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

        SAIL_LOG_DEBUG("%d. [p%d] %s [%s] %s", counter, codec_info->priority, codec_info->name, codec_info->description, codec_info->version);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	7a1b      	ldrb	r3, [r3, #8]
 80098bc:	4618      	mov	r0, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	6952      	ldr	r2, [r2, #20]
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	68c9      	ldr	r1, [r1, #12]
 80098ca:	9104      	str	r1, [sp, #16]
 80098cc:	9203      	str	r2, [sp, #12]
 80098ce:	9302      	str	r3, [sp, #8]
 80098d0:	9001      	str	r0, [sp, #4]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	4b10      	ldr	r3, [pc, #64]	; (8009918 <print_enumerated_codecs+0xcc>)
 80098d8:	f240 1245 	movw	r2, #325	; 0x145
 80098dc:	490a      	ldr	r1, [pc, #40]	; (8009908 <print_enumerated_codecs+0xbc>)
 80098de:	2005      	movs	r0, #5
 80098e0:	f001 ff80 	bl	800b7e4 <sail_log>
    for (int counter = 1; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next, counter++) {
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3301      	adds	r3, #1
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1dc      	bne.n	80098b0 <print_enumerated_codecs+0x64>
    }

    return SAIL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	08014d48 	.word	0x08014d48
 8009904:	08014cdc 	.word	0x08014cdc
 8009908:	08014cf4 	.word	0x08014cf4
 800990c:	08014d54 	.word	0x08014d54
 8009910:	08014d50 	.word	0x08014d50
 8009914:	08014d98 	.word	0x08014d98
 8009918:	08014dac 	.word	0x08014dac

0800991c <init_context_impl>:
}
#endif

/* Initializes the context and loads all the codec info files. */
#ifdef SAIL_COMBINE_CODECS
static sail_status_t init_context_impl(struct sail_context *context) {
 800991c:	b580      	push	{r7, lr}
 800991e:	b08a      	sub	sp, #40	; 0x28
 8009920:	af02      	add	r7, sp, #8
 8009922:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bf0c      	ite	eq
 800992a:	2301      	moveq	r3, #1
 800992c:	2300      	movne	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d013      	beq.n	800995c <init_context_impl+0x40>
 8009934:	4b35      	ldr	r3, [pc, #212]	; (8009a0c <init_context_impl+0xf0>)
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	4b35      	ldr	r3, [pc, #212]	; (8009a10 <init_context_impl+0xf4>)
 800993a:	f240 2233 	movw	r2, #563	; 0x233
 800993e:	4935      	ldr	r1, [pc, #212]	; (8009a14 <init_context_impl+0xf8>)
 8009940:	2001      	movs	r0, #1
 8009942:	f001 ff4f 	bl	800b7e4 <sail_log>
 8009946:	4b34      	ldr	r3, [pc, #208]	; (8009a18 <init_context_impl+0xfc>)
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	4b34      	ldr	r3, [pc, #208]	; (8009a1c <init_context_impl+0x100>)
 800994c:	f240 2233 	movw	r2, #563	; 0x233
 8009950:	4930      	ldr	r1, [pc, #192]	; (8009a14 <init_context_impl+0xf8>)
 8009952:	2001      	movs	r0, #1
 8009954:	f001 ff46 	bl	800b7e4 <sail_log>
 8009958:	2301      	movs	r3, #1
 800995a:	e053      	b.n	8009a04 <init_context_impl+0xe8>
    SAIL_IMPORT extern const char * const sail_enabled_codecs[];
    SAIL_IMPORT extern const char * const sail_enabled_codecs_info[];
#endif

    /* Load codec info objects. */
    struct sail_codec_bundle_node **last_codec_bundle_node = &context->codec_bundle_node;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3304      	adds	r3, #4
 8009960:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8009962:	2300      	movs	r3, #0
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	e046      	b.n	80099f6 <init_context_impl+0xda>
        const char *sail_codec_info = sail_enabled_codecs_info[i];
 8009968:	4a2d      	ldr	r2, [pc, #180]	; (8009a20 <init_context_impl+0x104>)
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009970:	617b      	str	r3, [r7, #20]

        /* Parse codec info. */
        struct sail_codec_bundle_node *codec_bundle_node;
        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle_node(&codec_bundle_node),
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd f816 	bl	80069a8 <alloc_codec_bundle_node>
 800997c:	4603      	mov	r3, r0
 800997e:	827b      	strh	r3, [r7, #18]
 8009980:	8a7b      	ldrh	r3, [r7, #18]
 8009982:	2b00      	cmp	r3, #0
 8009984:	bf14      	ite	ne
 8009986:	2301      	movne	r3, #1
 8009988:	2300      	moveq	r3, #0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d12e      	bne.n	80099ee <init_context_impl+0xd2>
                            /* on error */ continue);

        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle(&codec_bundle_node->codec_bundle),
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4618      	mov	r0, r3
 8009994:	f7fd f82e 	bl	80069f4 <alloc_codec_bundle>
 8009998:	4603      	mov	r3, r0
 800999a:	823b      	strh	r3, [r7, #16]
 800999c:	8a3b      	ldrh	r3, [r7, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bf14      	ite	ne
 80099a2:	2301      	movne	r3, #1
 80099a4:	2300      	moveq	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <init_context_impl+0x9a>
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fd f812 	bl	80069d8 <destroy_codec_bundle_node>
 80099b4:	e01c      	b.n	80099f0 <init_context_impl+0xd4>
                            /* on error */ destroy_codec_bundle_node(codec_bundle_node);
                                           continue);

        SAIL_TRY_OR_EXECUTE(codec_read_info_from_string(sail_codec_info, &codec_bundle_node->codec_bundle->codec_info),
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6978      	ldr	r0, [r7, #20]
 80099be:	f7fe fb53 	bl	8008068 <codec_read_info_from_string>
 80099c2:	4603      	mov	r3, r0
 80099c4:	81fb      	strh	r3, [r7, #14]
 80099c6:	89fb      	ldrh	r3, [r7, #14]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bf14      	ite	ne
 80099cc:	2301      	movne	r3, #1
 80099ce:	2300      	moveq	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d004      	beq.n	80099e0 <init_context_impl+0xc4>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fc fffd 	bl	80069d8 <destroy_codec_bundle_node>
 80099de:	e007      	b.n	80099f0 <init_context_impl+0xd4>
                            /* on error */ destroy_codec_bundle_node(codec_bundle_node);
                                           continue);

        *last_codec_bundle_node = codec_bundle_node;
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	601a      	str	r2, [r3, #0]
        last_codec_bundle_node = &codec_bundle_node->next;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	3304      	adds	r3, #4
 80099ea:	61fb      	str	r3, [r7, #28]
 80099ec:	e000      	b.n	80099f0 <init_context_impl+0xd4>
        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle_node(&codec_bundle_node),
 80099ee:	bf00      	nop
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	3301      	adds	r3, #1
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	4a0b      	ldr	r2, [pc, #44]	; (8009a24 <init_context_impl+0x108>)
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1b2      	bne.n	8009968 <init_context_impl+0x4c>
                        /* cleanup */ sail_destroy_string_node_chain(client_codecs_paths));

    sail_destroy_string_node_chain(client_codecs_paths);
#endif

    return SAIL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	08014d48 	.word	0x08014d48
 8009a10:	08014cdc 	.word	0x08014cdc
 8009a14:	08014cf4 	.word	0x08014cf4
 8009a18:	08014d54 	.word	0x08014d54
 8009a1c:	08014d50 	.word	0x08014d50
 8009a20:	0801647c 	.word	0x0801647c
 8009a24:	08016478 	.word	0x08016478

08009a28 <print_no_codecs_found>:

    return SAIL_OK;
}
#endif

static void print_no_codecs_found(void) {
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af02      	add	r7, sp, #8

    const char *message = "\n"
 8009a2e:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <print_no_codecs_found+0x24>)
 8009a30:	607b      	str	r3, [r7, #4]
#else
        "\n*** - Check the installation directory.                                      ***"
#endif
        "\n";

    SAIL_LOG_ERROR("%s", message);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <print_no_codecs_found+0x28>)
 8009a38:	f240 22c2 	movw	r2, #706	; 0x2c2
 8009a3c:	4905      	ldr	r1, [pc, #20]	; (8009a54 <print_no_codecs_found+0x2c>)
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f001 fed0 	bl	800b7e4 <sail_log>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	08014dc4 	.word	0x08014dc4
 8009a50:	08014d50 	.word	0x08014d50
 8009a54:	08014cf4 	.word	0x08014cf4

08009a58 <print_build_statistics>:

static void print_build_statistics(void) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af02      	add	r7, sp, #8

    SAIL_LOG_INFO("Version: %s", SAIL_VERSION_STRING);
 8009a5e:	4b17      	ldr	r3, [pc, #92]	; (8009abc <print_build_statistics+0x64>)
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	4b17      	ldr	r3, [pc, #92]	; (8009ac0 <print_build_statistics+0x68>)
 8009a64:	f240 22c7 	movw	r2, #711	; 0x2c7
 8009a68:	4916      	ldr	r1, [pc, #88]	; (8009ac4 <print_build_statistics+0x6c>)
 8009a6a:	2003      	movs	r0, #3
 8009a6c:	f001 feba 	bl	800b7e4 <sail_log>

#ifdef SAIL_VCPKG
    SAIL_LOG_INFO("Build type: VCPKG");
#else
    SAIL_LOG_INFO("Build type: Standalone");
 8009a70:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <print_build_statistics+0x70>)
 8009a72:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 8009a76:	4913      	ldr	r1, [pc, #76]	; (8009ac4 <print_build_statistics+0x6c>)
 8009a78:	2003      	movs	r0, #3
 8009a7a:	f001 feb3 	bl	800b7e4 <sail_log>
#endif

#ifdef SAIL_STATIC
    SAIL_LOG_INFO("Static build: yes");
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <print_build_statistics+0x74>)
 8009a80:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8009a84:	490f      	ldr	r1, [pc, #60]	; (8009ac4 <print_build_statistics+0x6c>)
 8009a86:	2003      	movs	r0, #3
 8009a88:	f001 feac 	bl	800b7e4 <sail_log>
#else
    SAIL_LOG_INFO("Static build: no");
#endif

#ifdef SAIL_COMBINE_CODECS
    SAIL_LOG_INFO("Combine codecs: yes");
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <print_build_statistics+0x78>)
 8009a8e:	f240 22d6 	movw	r2, #726	; 0x2d6
 8009a92:	490c      	ldr	r1, [pc, #48]	; (8009ac4 <print_build_statistics+0x6c>)
 8009a94:	2003      	movs	r0, #3
 8009a96:	f001 fea5 	bl	800b7e4 <sail_log>
#endif

#ifdef SAIL_THREAD_SAFE
    SAIL_LOG_INFO("Thread-safe: yes");
#else
    SAIL_LOG_INFO("Thread-safe: no");
 8009a9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ad4 <print_build_statistics+0x7c>)
 8009a9c:	f240 22de 	movw	r2, #734	; 0x2de
 8009aa0:	4908      	ldr	r1, [pc, #32]	; (8009ac4 <print_build_statistics+0x6c>)
 8009aa2:	2003      	movs	r0, #3
 8009aa4:	f001 fe9e 	bl	800b7e4 <sail_log>
#endif

#ifdef SAIL_THIRD_PARTY_CODECS_PATH
    SAIL_LOG_INFO("SAIL_THIRD_PARTY_CODECS_PATH: enabled");
#else
    SAIL_LOG_INFO("SAIL_THIRD_PARTY_CODECS_PATH: disabled");
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <print_build_statistics+0x80>)
 8009aaa:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009aae:	4905      	ldr	r1, [pc, #20]	; (8009ac4 <print_build_statistics+0x6c>)
 8009ab0:	2003      	movs	r0, #3
 8009ab2:	f001 fe97 	bl	800b7e4 <sail_log>
#endif
}
 8009ab6:	bf00      	nop
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	08014f18 	.word	0x08014f18
 8009ac0:	08014f0c 	.word	0x08014f0c
 8009ac4:	08014cf4 	.word	0x08014cf4
 8009ac8:	08014f20 	.word	0x08014f20
 8009acc:	08014f38 	.word	0x08014f38
 8009ad0:	08014f4c 	.word	0x08014f4c
 8009ad4:	08014f60 	.word	0x08014f60
 8009ad8:	08014f70 	.word	0x08014f70

08009adc <init_context>:

/* Initializes the context and loads all the codec info files if the context is not initialized. */
static sail_status_t init_context(struct sail_context *context, int flags) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af02      	add	r7, sp, #8
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bf0c      	ite	eq
 8009aec:	2301      	moveq	r3, #1
 8009aee:	2300      	movne	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d013      	beq.n	8009b1e <init_context+0x42>
 8009af6:	4b3e      	ldr	r3, [pc, #248]	; (8009bf0 <init_context+0x114>)
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4b3e      	ldr	r3, [pc, #248]	; (8009bf4 <init_context+0x118>)
 8009afc:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009b00:	493d      	ldr	r1, [pc, #244]	; (8009bf8 <init_context+0x11c>)
 8009b02:	2001      	movs	r0, #1
 8009b04:	f001 fe6e 	bl	800b7e4 <sail_log>
 8009b08:	4b3c      	ldr	r3, [pc, #240]	; (8009bfc <init_context+0x120>)
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4b3c      	ldr	r3, [pc, #240]	; (8009c00 <init_context+0x124>)
 8009b0e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009b12:	4939      	ldr	r1, [pc, #228]	; (8009bf8 <init_context+0x11c>)
 8009b14:	2001      	movs	r0, #1
 8009b16:	f001 fe65 	bl	800b7e4 <sail_log>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e064      	b.n	8009be8 <init_context+0x10c>

    if (context->initialized) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <init_context+0x4e>
        return SAIL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e05e      	b.n	8009be8 <init_context+0x10c>
    }

    context->initialized = true;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]

    /* Time counter. */
    uint64_t start_time = sail_now();
 8009b30:	f003 fd2a 	bl	800d588 <sail_now>
 8009b34:	e9c7 0104 	strd	r0, r1, [r7, #16]

    print_build_statistics();
 8009b38:	f7ff ff8e 	bl	8009a58 <print_build_statistics>
    if (get_sail_dll_path(dll_path, sizeof(dll_path)) == SAIL_OK) {
        SAIL_TRY_OR_SUPPRESS(add_dll_directory(dll_path));
    }
#endif

    SAIL_TRY(init_context_impl(context));
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff feed 	bl	800991c <init_context_impl>
 8009b42:	4603      	mov	r3, r0
 8009b44:	81fb      	strh	r3, [r7, #14]
 8009b46:	89fb      	ldrh	r3, [r7, #14]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bf14      	ite	ne
 8009b4c:	2301      	movne	r3, #1
 8009b4e:	2300      	moveq	r3, #0
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <init_context+0x7e>
 8009b56:	89fb      	ldrh	r3, [r7, #14]
 8009b58:	e046      	b.n	8009be8 <init_context+0x10c>

    if (context->codec_bundle_node == NULL) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <init_context+0x8a>
        print_no_codecs_found();
 8009b62:	f7ff ff61 	bl	8009a28 <print_no_codecs_found>
    }

    SAIL_TRY(sort_enumerated_codecs(context));
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff fdf8 	bl	800975c <sort_enumerated_codecs>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	81bb      	strh	r3, [r7, #12]
 8009b70:	89bb      	ldrh	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bf14      	ite	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <init_context+0xa8>
 8009b80:	89bb      	ldrh	r3, [r7, #12]
 8009b82:	e031      	b.n	8009be8 <init_context+0x10c>

    SAIL_TRY(print_enumerated_codecs(context));
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fe61 	bl	800984c <print_enumerated_codecs>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	817b      	strh	r3, [r7, #10]
 8009b8e:	897b      	ldrh	r3, [r7, #10]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bf14      	ite	ne
 8009b94:	2301      	movne	r3, #1
 8009b96:	2300      	moveq	r3, #0
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <init_context+0xc6>
 8009b9e:	897b      	ldrh	r3, [r7, #10]
 8009ba0:	e022      	b.n	8009be8 <init_context+0x10c>

    if (flags & SAIL_FLAG_PRELOAD_CODECS) {
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <init_context+0xee>
        SAIL_TRY(preload_codecs(context));
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff fd57 	bl	8009660 <preload_codecs>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	813b      	strh	r3, [r7, #8]
 8009bb6:	893b      	ldrh	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bf14      	ite	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	2300      	moveq	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <init_context+0xee>
 8009bc6:	893b      	ldrh	r3, [r7, #8]
 8009bc8:	e00e      	b.n	8009be8 <init_context+0x10c>
    }

    SAIL_LOG_DEBUG("Initialized in %lu ms.", (unsigned long)(sail_now() - start_time));
 8009bca:	f003 fcdd 	bl	800d588 <sail_now>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <init_context+0x128>)
 8009bda:	f240 320e 	movw	r2, #782	; 0x30e
 8009bde:	4906      	ldr	r1, [pc, #24]	; (8009bf8 <init_context+0x11c>)
 8009be0:	2005      	movs	r0, #5
 8009be2:	f001 fdff 	bl	800b7e4 <sail_log>

    return SAIL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	08014d48 	.word	0x08014d48
 8009bf4:	08014cdc 	.word	0x08014cdc
 8009bf8:	08014cf4 	.word	0x08014cf4
 8009bfc:	08014d54 	.word	0x08014d54
 8009c00:	08014d50 	.word	0x08014d50
 8009c04:	08014f98 	.word	0x08014f98

08009c08 <fetch_global_context_guarded>:
    SAIL_TRY(unlock_context());

    return SAIL_OK;
}

sail_status_t fetch_global_context_guarded(struct sail_context **context) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]

    SAIL_TRY(fetch_global_context_guarded_with_flags(context, /* flags */ 0));
 8009c10:	2100      	movs	r1, #0
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f82a 	bl	8009c6c <fetch_global_context_guarded_with_flags>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	81fb      	strh	r3, [r7, #14]
 8009c1c:	89fb      	ldrh	r3, [r7, #14]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bf14      	ite	ne
 8009c22:	2301      	movne	r3, #1
 8009c24:	2300      	moveq	r3, #0
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <fetch_global_context_guarded+0x28>
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	e000      	b.n	8009c32 <fetch_global_context_guarded+0x2a>

    return SAIL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <fetch_global_context_unsafe>:

sail_status_t fetch_global_context_unsafe(struct sail_context **context) {
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]

    SAIL_TRY(fetch_global_context_unsafe_with_flags(context, /* flags */ 0));
 8009c42:	2100      	movs	r1, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f86f 	bl	8009d28 <fetch_global_context_unsafe_with_flags>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	81fb      	strh	r3, [r7, #14]
 8009c4e:	89fb      	ldrh	r3, [r7, #14]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf14      	ite	ne
 8009c54:	2301      	movne	r3, #1
 8009c56:	2300      	moveq	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <fetch_global_context_unsafe+0x28>
 8009c5e:	89fb      	ldrh	r3, [r7, #14]
 8009c60:	e000      	b.n	8009c64 <fetch_global_context_unsafe+0x2a>

    return SAIL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <fetch_global_context_guarded_with_flags>:

sail_status_t fetch_global_context_guarded_with_flags(struct sail_context **context, int flags) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2301      	moveq	r3, #1
 8009c7e:	2300      	movne	r3, #0
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d013      	beq.n	8009cae <fetch_global_context_guarded_with_flags+0x42>
 8009c86:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <fetch_global_context_guarded_with_flags+0xa8>)
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4b23      	ldr	r3, [pc, #140]	; (8009d18 <fetch_global_context_guarded_with_flags+0xac>)
 8009c8c:	f44f 724d 	mov.w	r2, #820	; 0x334
 8009c90:	4922      	ldr	r1, [pc, #136]	; (8009d1c <fetch_global_context_guarded_with_flags+0xb0>)
 8009c92:	2001      	movs	r0, #1
 8009c94:	f001 fda6 	bl	800b7e4 <sail_log>
 8009c98:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <fetch_global_context_guarded_with_flags+0xb4>)
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4b21      	ldr	r3, [pc, #132]	; (8009d24 <fetch_global_context_guarded_with_flags+0xb8>)
 8009c9e:	f44f 724d 	mov.w	r2, #820	; 0x334
 8009ca2:	491e      	ldr	r1, [pc, #120]	; (8009d1c <fetch_global_context_guarded_with_flags+0xb0>)
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	f001 fd9d 	bl	800b7e4 <sail_log>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e02e      	b.n	8009d0c <fetch_global_context_guarded_with_flags+0xa0>

    SAIL_TRY(lock_context());
 8009cae:	f000 f891 	bl	8009dd4 <lock_context>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	81fb      	strh	r3, [r7, #14]
 8009cb6:	89fb      	ldrh	r3, [r7, #14]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	bf14      	ite	ne
 8009cbc:	2301      	movne	r3, #1
 8009cbe:	2300      	moveq	r3, #0
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <fetch_global_context_guarded_with_flags+0x5e>
 8009cc6:	89fb      	ldrh	r3, [r7, #14]
 8009cc8:	e020      	b.n	8009d0c <fetch_global_context_guarded_with_flags+0xa0>

    SAIL_TRY_OR_CLEANUP(fetch_global_context_unsafe_with_flags(context, flags),
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f82b 	bl	8009d28 <fetch_global_context_unsafe_with_flags>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	81bb      	strh	r3, [r7, #12]
 8009cd6:	89bb      	ldrh	r3, [r7, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bf14      	ite	ne
 8009cdc:	2301      	movne	r3, #1
 8009cde:	2300      	moveq	r3, #0
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <fetch_global_context_guarded_with_flags+0x82>
 8009ce6:	f000 f87d 	bl	8009de4 <unlock_context>
 8009cea:	89bb      	ldrh	r3, [r7, #12]
 8009cec:	e00e      	b.n	8009d0c <fetch_global_context_guarded_with_flags+0xa0>
                        /* cleanup */ unlock_context());

    SAIL_TRY(unlock_context());
 8009cee:	f000 f879 	bl	8009de4 <unlock_context>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	817b      	strh	r3, [r7, #10]
 8009cf6:	897b      	ldrh	r3, [r7, #10]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bf14      	ite	ne
 8009cfc:	2301      	movne	r3, #1
 8009cfe:	2300      	moveq	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <fetch_global_context_guarded_with_flags+0x9e>
 8009d06:	897b      	ldrh	r3, [r7, #10]
 8009d08:	e000      	b.n	8009d0c <fetch_global_context_guarded_with_flags+0xa0>

    return SAIL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	08014d48 	.word	0x08014d48
 8009d18:	08014cdc 	.word	0x08014cdc
 8009d1c:	08014cf4 	.word	0x08014cf4
 8009d20:	08014d54 	.word	0x08014d54
 8009d24:	08014d50 	.word	0x08014d50

08009d28 <fetch_global_context_unsafe_with_flags>:

sail_status_t fetch_global_context_unsafe_with_flags(struct sail_context **context, int flags) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d013      	beq.n	8009d6a <fetch_global_context_unsafe_with_flags+0x42>
 8009d42:	4b1f      	ldr	r3, [pc, #124]	; (8009dc0 <fetch_global_context_unsafe_with_flags+0x98>)
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	4b1f      	ldr	r3, [pc, #124]	; (8009dc4 <fetch_global_context_unsafe_with_flags+0x9c>)
 8009d48:	f240 3242 	movw	r2, #834	; 0x342
 8009d4c:	491e      	ldr	r1, [pc, #120]	; (8009dc8 <fetch_global_context_unsafe_with_flags+0xa0>)
 8009d4e:	2001      	movs	r0, #1
 8009d50:	f001 fd48 	bl	800b7e4 <sail_log>
 8009d54:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <fetch_global_context_unsafe_with_flags+0xa4>)
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <fetch_global_context_unsafe_with_flags+0xa8>)
 8009d5a:	f240 3242 	movw	r2, #834	; 0x342
 8009d5e:	491a      	ldr	r1, [pc, #104]	; (8009dc8 <fetch_global_context_unsafe_with_flags+0xa0>)
 8009d60:	2001      	movs	r0, #1
 8009d62:	f001 fd3f 	bl	800b7e4 <sail_log>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e025      	b.n	8009db6 <fetch_global_context_unsafe_with_flags+0x8e>

    struct sail_context *local_context;

    SAIL_TRY(allocate_global_context(&local_context));
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fc24 	bl	80095bc <allocate_global_context>
 8009d74:	4603      	mov	r3, r0
 8009d76:	81fb      	strh	r3, [r7, #14]
 8009d78:	89fb      	ldrh	r3, [r7, #14]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bf14      	ite	ne
 8009d7e:	2301      	movne	r3, #1
 8009d80:	2300      	moveq	r3, #0
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <fetch_global_context_unsafe_with_flags+0x64>
 8009d88:	89fb      	ldrh	r3, [r7, #14]
 8009d8a:	e014      	b.n	8009db6 <fetch_global_context_unsafe_with_flags+0x8e>
    SAIL_TRY(init_context(local_context, flags));
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fea3 	bl	8009adc <init_context>
 8009d96:	4603      	mov	r3, r0
 8009d98:	81bb      	strh	r3, [r7, #12]
 8009d9a:	89bb      	ldrh	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bf14      	ite	ne
 8009da0:	2301      	movne	r3, #1
 8009da2:	2300      	moveq	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <fetch_global_context_unsafe_with_flags+0x86>
 8009daa:	89bb      	ldrh	r3, [r7, #12]
 8009dac:	e003      	b.n	8009db6 <fetch_global_context_unsafe_with_flags+0x8e>

    *context = local_context;
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08014d48 	.word	0x08014d48
 8009dc4:	08014cdc 	.word	0x08014cdc
 8009dc8:	08014cf4 	.word	0x08014cf4
 8009dcc:	08014d54 	.word	0x08014d54
 8009dd0:	08014d50 	.word	0x08014d50

08009dd4 <lock_context>:
    SAIL_LOG_DEBUG("Unloaded codecs number: %d", counter);

    return SAIL_OK;
}

sail_status_t lock_context(void) {
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
    SAIL_TRY(initialize_global_context_guard_mutex());

    SAIL_TRY(threading_lock_mutex(&global_context_guard_mutex));
#endif

    return SAIL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <unlock_context>:

sail_status_t unlock_context(void) {
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0

#ifdef SAIL_THREAD_SAFE
    SAIL_TRY(threading_unlock_mutex(&global_context_guard_mutex));
#endif

    return SAIL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <sail_alloc_hash_map>:
}

/*
 * Public functions.
 */
sail_status_t sail_alloc_hash_map(struct sail_hash_map **hash_map) {
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(hash_map);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf0c      	ite	eq
 8009e02:	2301      	moveq	r3, #1
 8009e04:	2300      	movne	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d011      	beq.n	8009e30 <sail_alloc_hash_map+0x3c>
 8009e0c:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <sail_alloc_hash_map+0x90>)
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <sail_alloc_hash_map+0x94>)
 8009e12:	2232      	movs	r2, #50	; 0x32
 8009e14:	491d      	ldr	r1, [pc, #116]	; (8009e8c <sail_alloc_hash_map+0x98>)
 8009e16:	2001      	movs	r0, #1
 8009e18:	f001 fce4 	bl	800b7e4 <sail_log>
 8009e1c:	4b1c      	ldr	r3, [pc, #112]	; (8009e90 <sail_alloc_hash_map+0x9c>)
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <sail_alloc_hash_map+0xa0>)
 8009e22:	2232      	movs	r2, #50	; 0x32
 8009e24:	4919      	ldr	r1, [pc, #100]	; (8009e8c <sail_alloc_hash_map+0x98>)
 8009e26:	2001      	movs	r0, #1
 8009e28:	f001 fcdc 	bl	800b7e4 <sail_log>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e024      	b.n	8009e7a <sail_alloc_hash_map+0x86>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_hash_map), &ptr));
 8009e30:	f107 030c 	add.w	r3, r7, #12
 8009e34:	4619      	mov	r1, r3
 8009e36:	2080      	movs	r0, #128	; 0x80
 8009e38:	f001 fdcc 	bl	800b9d4 <sail_malloc>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	827b      	strh	r3, [r7, #18]
 8009e40:	8a7b      	ldrh	r3, [r7, #18]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	bf14      	ite	ne
 8009e46:	2301      	movne	r3, #1
 8009e48:	2300      	moveq	r3, #0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <sail_alloc_hash_map+0x60>
 8009e50:	8a7b      	ldrh	r3, [r7, #18]
 8009e52:	e012      	b.n	8009e7a <sail_alloc_hash_map+0x86>
    *hash_map = ptr;
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	601a      	str	r2, [r3, #0]

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e008      	b.n	8009e72 <sail_alloc_hash_map+0x7e>
        (*hash_map)->buckets[i] = NULL;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	2100      	movs	r1, #0
 8009e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b1f      	cmp	r3, #31
 8009e76:	d9f3      	bls.n	8009e60 <sail_alloc_hash_map+0x6c>
    }

    return SAIL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	08015088 	.word	0x08015088
 8009e88:	0801501c 	.word	0x0801501c
 8009e8c:	08015034 	.word	0x08015034
 8009e90:	08015098 	.word	0x08015098
 8009e94:	08015094 	.word	0x08015094

08009e98 <sail_destroy_hash_map>:

void sail_destroy_hash_map(struct sail_hash_map *hash_map) {
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]

    if (hash_map == NULL) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d006      	beq.n	8009eb4 <sail_destroy_hash_map+0x1c>
        return;
    }

    sail_clear_hash_map(hash_map);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f808 	bl	8009ebc <sail_clear_hash_map>

    sail_free(hash_map);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 fe19 	bl	800bae4 <sail_free>
 8009eb2:	e000      	b.n	8009eb6 <sail_destroy_hash_map+0x1e>
        return;
 8009eb4:	bf00      	nop
}
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <sail_clear_hash_map>:
            return;
        }
    }
}

void sail_clear_hash_map(struct sail_hash_map *hash_map) {
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e00e      	b.n	8009ee8 <sail_clear_hash_map+0x2c>
        sail_destroy_variant_node_chain(hash_map->buckets[i]);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f003 fd32 	bl	800d93c <sail_destroy_variant_node_chain>
        hash_map->buckets[i] = NULL;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	2100      	movs	r1, #0
 8009ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b1f      	cmp	r3, #31
 8009eec:	d9ed      	bls.n	8009eca <sail_clear_hash_map+0xe>
    }
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <sail_copy_hash_map>:

sail_status_t sail_copy_hash_map(const struct sail_hash_map *source_hash_map, struct sail_hash_map **target_hash_map) {
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source_hash_map);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bf0c      	ite	eq
 8009f08:	2301      	moveq	r3, #1
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d011      	beq.n	8009f36 <sail_copy_hash_map+0x3e>
 8009f12:	4b34      	ldr	r3, [pc, #208]	; (8009fe4 <sail_copy_hash_map+0xec>)
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <sail_copy_hash_map+0xf0>)
 8009f18:	22e3      	movs	r2, #227	; 0xe3
 8009f1a:	4934      	ldr	r1, [pc, #208]	; (8009fec <sail_copy_hash_map+0xf4>)
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	f001 fc61 	bl	800b7e4 <sail_log>
 8009f22:	4b33      	ldr	r3, [pc, #204]	; (8009ff0 <sail_copy_hash_map+0xf8>)
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	4b33      	ldr	r3, [pc, #204]	; (8009ff4 <sail_copy_hash_map+0xfc>)
 8009f28:	22e3      	movs	r2, #227	; 0xe3
 8009f2a:	4930      	ldr	r1, [pc, #192]	; (8009fec <sail_copy_hash_map+0xf4>)
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f001 fc59 	bl	800b7e4 <sail_log>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e052      	b.n	8009fdc <sail_copy_hash_map+0xe4>
    SAIL_CHECK_PTR(target_hash_map);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bf0c      	ite	eq
 8009f3c:	2301      	moveq	r3, #1
 8009f3e:	2300      	movne	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d011      	beq.n	8009f6a <sail_copy_hash_map+0x72>
 8009f46:	4b2c      	ldr	r3, [pc, #176]	; (8009ff8 <sail_copy_hash_map+0x100>)
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	4b27      	ldr	r3, [pc, #156]	; (8009fe8 <sail_copy_hash_map+0xf0>)
 8009f4c:	22e4      	movs	r2, #228	; 0xe4
 8009f4e:	4927      	ldr	r1, [pc, #156]	; (8009fec <sail_copy_hash_map+0xf4>)
 8009f50:	2001      	movs	r0, #1
 8009f52:	f001 fc47 	bl	800b7e4 <sail_log>
 8009f56:	4b26      	ldr	r3, [pc, #152]	; (8009ff0 <sail_copy_hash_map+0xf8>)
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	4b26      	ldr	r3, [pc, #152]	; (8009ff4 <sail_copy_hash_map+0xfc>)
 8009f5c:	22e4      	movs	r2, #228	; 0xe4
 8009f5e:	4923      	ldr	r1, [pc, #140]	; (8009fec <sail_copy_hash_map+0xf4>)
 8009f60:	2001      	movs	r0, #1
 8009f62:	f001 fc3f 	bl	800b7e4 <sail_log>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e038      	b.n	8009fdc <sail_copy_hash_map+0xe4>

    struct sail_hash_map *hash_map_local;
    SAIL_TRY(sail_alloc_hash_map(&hash_map_local));
 8009f6a:	f107 030c 	add.w	r3, r7, #12
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ff40 	bl	8009df4 <sail_alloc_hash_map>
 8009f74:	4603      	mov	r3, r0
 8009f76:	827b      	strh	r3, [r7, #18]
 8009f78:	8a7b      	ldrh	r3, [r7, #18]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	bf14      	ite	ne
 8009f7e:	2301      	movne	r3, #1
 8009f80:	2300      	moveq	r3, #0
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <sail_copy_hash_map+0x94>
 8009f88:	8a7b      	ldrh	r3, [r7, #18]
 8009f8a:	e027      	b.n	8009fdc <sail_copy_hash_map+0xe4>

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e01d      	b.n	8009fce <sail_copy_hash_map+0xd6>
        SAIL_TRY_OR_CLEANUP(sail_copy_variant_node_chain(source_hash_map->buckets[i], &hash_map_local->buckets[i]),
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	f003 fcd8 	bl	800d958 <sail_copy_variant_node_chain>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	823b      	strh	r3, [r7, #16]
 8009fac:	8a3b      	ldrh	r3, [r7, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bf14      	ite	ne
 8009fb2:	2301      	movne	r3, #1
 8009fb4:	2300      	moveq	r3, #0
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <sail_copy_hash_map+0xd0>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff ff6a 	bl	8009e98 <sail_destroy_hash_map>
 8009fc4:	8a3b      	ldrh	r3, [r7, #16]
 8009fc6:	e009      	b.n	8009fdc <sail_copy_hash_map+0xe4>
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	617b      	str	r3, [r7, #20]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2b1f      	cmp	r3, #31
 8009fd2:	d9de      	bls.n	8009f92 <sail_copy_hash_map+0x9a>
                            /* cleanup */ sail_destroy_hash_map(hash_map_local));
    }

    *target_hash_map = hash_map_local;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	080150b8 	.word	0x080150b8
 8009fe8:	0801501c 	.word	0x0801501c
 8009fec:	08015034 	.word	0x08015034
 8009ff0:	08015098 	.word	0x08015098
 8009ff4:	08015094 	.word	0x08015094
 8009ff8:	080150c8 	.word	0x080150c8

08009ffc <sail_alloc_iccp>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_iccp(struct sail_iccp **iccp) {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(iccp);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	bf0c      	ite	eq
 800a00a:	2301      	moveq	r3, #1
 800a00c:	2300      	movne	r3, #0
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d011      	beq.n	800a038 <sail_alloc_iccp+0x3c>
 800a014:	4b19      	ldr	r3, [pc, #100]	; (800a07c <sail_alloc_iccp+0x80>)
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	4b19      	ldr	r3, [pc, #100]	; (800a080 <sail_alloc_iccp+0x84>)
 800a01a:	2222      	movs	r2, #34	; 0x22
 800a01c:	4919      	ldr	r1, [pc, #100]	; (800a084 <sail_alloc_iccp+0x88>)
 800a01e:	2001      	movs	r0, #1
 800a020:	f001 fbe0 	bl	800b7e4 <sail_log>
 800a024:	4b18      	ldr	r3, [pc, #96]	; (800a088 <sail_alloc_iccp+0x8c>)
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	4b18      	ldr	r3, [pc, #96]	; (800a08c <sail_alloc_iccp+0x90>)
 800a02a:	2222      	movs	r2, #34	; 0x22
 800a02c:	4915      	ldr	r1, [pc, #84]	; (800a084 <sail_alloc_iccp+0x88>)
 800a02e:	2001      	movs	r0, #1
 800a030:	f001 fbd8 	bl	800b7e4 <sail_log>
 800a034:	2301      	movs	r3, #1
 800a036:	e01d      	b.n	800a074 <sail_alloc_iccp+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_iccp), &ptr));
 800a038:	f107 0308 	add.w	r3, r7, #8
 800a03c:	4619      	mov	r1, r3
 800a03e:	2008      	movs	r0, #8
 800a040:	f001 fcc8 	bl	800b9d4 <sail_malloc>
 800a044:	4603      	mov	r3, r0
 800a046:	81fb      	strh	r3, [r7, #14]
 800a048:	89fb      	ldrh	r3, [r7, #14]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bf14      	ite	ne
 800a04e:	2301      	movne	r3, #1
 800a050:	2300      	moveq	r3, #0
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <sail_alloc_iccp+0x60>
 800a058:	89fb      	ldrh	r3, [r7, #14]
 800a05a:	e00b      	b.n	800a074 <sail_alloc_iccp+0x78>
    *iccp = ptr;
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	601a      	str	r2, [r3, #0]

    (*iccp)->data        = NULL;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
    (*iccp)->data_length = 0;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2200      	movs	r2, #0
 800a070:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08015140 	.word	0x08015140
 800a080:	080150d8 	.word	0x080150d8
 800a084:	080150f0 	.word	0x080150f0
 800a088:	0801514c 	.word	0x0801514c
 800a08c:	08015148 	.word	0x08015148

0800a090 <sail_alloc_iccp_move_data>:
    *iccp = iccp_local;

    return SAIL_OK;
}

sail_status_t sail_alloc_iccp_move_data(void *data, unsigned data_length, struct sail_iccp **iccp) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af02      	add	r7, sp, #8
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(data);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bf0c      	ite	eq
 800a0a2:	2301      	moveq	r3, #1
 800a0a4:	2300      	movne	r3, #0
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d011      	beq.n	800a0d0 <sail_alloc_iccp_move_data+0x40>
 800a0ac:	4b23      	ldr	r3, [pc, #140]	; (800a13c <sail_alloc_iccp_move_data+0xac>)
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	4b23      	ldr	r3, [pc, #140]	; (800a140 <sail_alloc_iccp_move_data+0xb0>)
 800a0b2:	2243      	movs	r2, #67	; 0x43
 800a0b4:	4923      	ldr	r1, [pc, #140]	; (800a144 <sail_alloc_iccp_move_data+0xb4>)
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	f001 fb94 	bl	800b7e4 <sail_log>
 800a0bc:	4b22      	ldr	r3, [pc, #136]	; (800a148 <sail_alloc_iccp_move_data+0xb8>)
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4b22      	ldr	r3, [pc, #136]	; (800a14c <sail_alloc_iccp_move_data+0xbc>)
 800a0c2:	2243      	movs	r2, #67	; 0x43
 800a0c4:	491f      	ldr	r1, [pc, #124]	; (800a144 <sail_alloc_iccp_move_data+0xb4>)
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	f001 fb8c 	bl	800b7e4 <sail_log>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e031      	b.n	800a134 <sail_alloc_iccp_move_data+0xa4>
    SAIL_CHECK_PTR(iccp);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bf0c      	ite	eq
 800a0d6:	2301      	moveq	r3, #1
 800a0d8:	2300      	movne	r3, #0
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d011      	beq.n	800a104 <sail_alloc_iccp_move_data+0x74>
 800a0e0:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <sail_alloc_iccp_move_data+0xc0>)
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	4b16      	ldr	r3, [pc, #88]	; (800a140 <sail_alloc_iccp_move_data+0xb0>)
 800a0e6:	2244      	movs	r2, #68	; 0x44
 800a0e8:	4916      	ldr	r1, [pc, #88]	; (800a144 <sail_alloc_iccp_move_data+0xb4>)
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	f001 fb7a 	bl	800b7e4 <sail_log>
 800a0f0:	4b15      	ldr	r3, [pc, #84]	; (800a148 <sail_alloc_iccp_move_data+0xb8>)
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	4b15      	ldr	r3, [pc, #84]	; (800a14c <sail_alloc_iccp_move_data+0xbc>)
 800a0f6:	2244      	movs	r2, #68	; 0x44
 800a0f8:	4912      	ldr	r1, [pc, #72]	; (800a144 <sail_alloc_iccp_move_data+0xb4>)
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f001 fb72 	bl	800b7e4 <sail_log>
 800a100:	2301      	movs	r3, #1
 800a102:	e017      	b.n	800a134 <sail_alloc_iccp_move_data+0xa4>

    SAIL_TRY(sail_alloc_iccp(iccp));
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff ff79 	bl	8009ffc <sail_alloc_iccp>
 800a10a:	4603      	mov	r3, r0
 800a10c:	82fb      	strh	r3, [r7, #22]
 800a10e:	8afb      	ldrh	r3, [r7, #22]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bf14      	ite	ne
 800a114:	2301      	movne	r3, #1
 800a116:	2300      	moveq	r3, #0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <sail_alloc_iccp_move_data+0x92>
 800a11e:	8afb      	ldrh	r3, [r7, #22]
 800a120:	e008      	b.n	800a134 <sail_alloc_iccp_move_data+0xa4>

    (*iccp)->data        = data;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	601a      	str	r2, [r3, #0]
    (*iccp)->data_length = data_length;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	08015160 	.word	0x08015160
 800a140:	080150d8 	.word	0x080150d8
 800a144:	080150f0 	.word	0x080150f0
 800a148:	0801514c 	.word	0x0801514c
 800a14c:	08015148 	.word	0x08015148
 800a150:	08015140 	.word	0x08015140

0800a154 <sail_destroy_iccp>:

void sail_destroy_iccp(struct sail_iccp *iccp) {
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]

    if (iccp == NULL) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d008      	beq.n	800a174 <sail_destroy_iccp+0x20>
        return;
    }

    sail_free(iccp->data);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f001 fcbc 	bl	800bae4 <sail_free>
    sail_free(iccp);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 fcb9 	bl	800bae4 <sail_free>
 800a172:	e000      	b.n	800a176 <sail_destroy_iccp+0x22>
        return;
 800a174:	bf00      	nop
}
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <sail_alloc_image>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_image(struct sail_image **image) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af02      	add	r7, sp, #8
 800a182:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(image);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	bf0c      	ite	eq
 800a18a:	2301      	moveq	r3, #1
 800a18c:	2300      	movne	r3, #0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d011      	beq.n	800a1b8 <sail_alloc_image+0x3c>
 800a194:	4b31      	ldr	r3, [pc, #196]	; (800a25c <sail_alloc_image+0xe0>)
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	4b31      	ldr	r3, [pc, #196]	; (800a260 <sail_alloc_image+0xe4>)
 800a19a:	2222      	movs	r2, #34	; 0x22
 800a19c:	4931      	ldr	r1, [pc, #196]	; (800a264 <sail_alloc_image+0xe8>)
 800a19e:	2001      	movs	r0, #1
 800a1a0:	f001 fb20 	bl	800b7e4 <sail_log>
 800a1a4:	4b30      	ldr	r3, [pc, #192]	; (800a268 <sail_alloc_image+0xec>)
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	4b30      	ldr	r3, [pc, #192]	; (800a26c <sail_alloc_image+0xf0>)
 800a1aa:	2222      	movs	r2, #34	; 0x22
 800a1ac:	492d      	ldr	r1, [pc, #180]	; (800a264 <sail_alloc_image+0xe8>)
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	f001 fb18 	bl	800b7e4 <sail_log>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e04d      	b.n	800a254 <sail_alloc_image+0xd8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_image), &ptr));
 800a1b8:	f107 0308 	add.w	r3, r7, #8
 800a1bc:	4619      	mov	r1, r3
 800a1be:	2038      	movs	r0, #56	; 0x38
 800a1c0:	f001 fc08 	bl	800b9d4 <sail_malloc>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	81fb      	strh	r3, [r7, #14]
 800a1c8:	89fb      	ldrh	r3, [r7, #14]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bf14      	ite	ne
 800a1ce:	2301      	movne	r3, #1
 800a1d0:	2300      	moveq	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <sail_alloc_image+0x60>
 800a1d8:	89fb      	ldrh	r3, [r7, #14]
 800a1da:	e03b      	b.n	800a254 <sail_alloc_image+0xd8>
    *image = ptr;
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	601a      	str	r2, [r3, #0]

    (*image)->pixels                  = NULL;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
    (*image)->width                   = 0;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	605a      	str	r2, [r3, #4]
    (*image)->height                  = 0;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	609a      	str	r2, [r3, #8]
    (*image)->bytes_per_line          = 0;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2200      	movs	r2, #0
 800a200:	60da      	str	r2, [r3, #12]
    (*image)->resolution              = NULL;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2200      	movs	r2, #0
 800a208:	611a      	str	r2, [r3, #16]
    (*image)->pixel_format            = SAIL_PIXEL_FORMAT_UNKNOWN;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2200      	movs	r2, #0
 800a210:	751a      	strb	r2, [r3, #20]
    (*image)->gamma                   = 1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6819      	ldr	r1, [r3, #0]
 800a216:	f04f 0200 	mov.w	r2, #0
 800a21a:	4b15      	ldr	r3, [pc, #84]	; (800a270 <sail_alloc_image+0xf4>)
 800a21c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    (*image)->delay                   = -1;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a228:	621a      	str	r2, [r3, #32]
    (*image)->palette                 = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2200      	movs	r2, #0
 800a230:	625a      	str	r2, [r3, #36]	; 0x24
    (*image)->meta_data_node          = NULL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2200      	movs	r2, #0
 800a238:	629a      	str	r2, [r3, #40]	; 0x28
    (*image)->iccp                    = NULL;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2200      	movs	r2, #0
 800a240:	62da      	str	r2, [r3, #44]	; 0x2c
    (*image)->properties              = 0;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	631a      	str	r2, [r3, #48]	; 0x30
    (*image)->source_image            = NULL;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2200      	movs	r2, #0
 800a250:	635a      	str	r2, [r3, #52]	; 0x34

    return SAIL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	080151e8 	.word	0x080151e8
 800a260:	08015180 	.word	0x08015180
 800a264:	08015198 	.word	0x08015198
 800a268:	080151f4 	.word	0x080151f4
 800a26c:	080151f0 	.word	0x080151f0
 800a270:	3ff00000 	.word	0x3ff00000

0800a274 <sail_destroy_image>:

void sail_destroy_image(struct sail_image *image) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]

    if (image == NULL) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d021      	beq.n	800a2c6 <sail_destroy_image+0x52>
        return;
    }

    sail_free(image->pixels);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f001 fc2c 	bl	800bae4 <sail_free>

    sail_destroy_resolution(image->resolution);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fe61 	bl	800bf58 <sail_destroy_resolution>
    sail_destroy_palette(image->palette);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 fca2 	bl	800bbe4 <sail_destroy_palette>
    sail_destroy_meta_data_node_chain(image->meta_data_node);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fc41 	bl	800bb2c <sail_destroy_meta_data_node_chain>
    sail_destroy_iccp(image->iccp);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff ff50 	bl	800a154 <sail_destroy_iccp>
    sail_destroy_source_image(image->source_image);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f002 fc2b 	bl	800cb14 <sail_destroy_source_image>

    sail_free(image);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 fc10 	bl	800bae4 <sail_free>
 800a2c4:	e000      	b.n	800a2c8 <sail_destroy_image+0x54>
        return;
 800a2c6:	bf00      	nop
}
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <sail_check_image_skeleton_valid>:

    return SAIL_OK;
}

sail_status_t sail_check_image_skeleton_valid(const struct sail_image *image)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(image);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bf0c      	ite	eq
 800a2de:	2301      	moveq	r3, #1
 800a2e0:	2300      	movne	r3, #0
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <sail_check_image_skeleton_valid+0x3c>
 800a2e8:	4b22      	ldr	r3, [pc, #136]	; (800a374 <sail_check_image_skeleton_valid+0xa4>)
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4b22      	ldr	r3, [pc, #136]	; (800a378 <sail_check_image_skeleton_valid+0xa8>)
 800a2ee:	2294      	movs	r2, #148	; 0x94
 800a2f0:	4922      	ldr	r1, [pc, #136]	; (800a37c <sail_check_image_skeleton_valid+0xac>)
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	f001 fa76 	bl	800b7e4 <sail_log>
 800a2f8:	4b21      	ldr	r3, [pc, #132]	; (800a380 <sail_check_image_skeleton_valid+0xb0>)
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	4b21      	ldr	r3, [pc, #132]	; (800a384 <sail_check_image_skeleton_valid+0xb4>)
 800a2fe:	2294      	movs	r2, #148	; 0x94
 800a300:	491e      	ldr	r1, [pc, #120]	; (800a37c <sail_check_image_skeleton_valid+0xac>)
 800a302:	2001      	movs	r0, #1
 800a304:	f001 fa6e 	bl	800b7e4 <sail_log>
 800a308:	2301      	movs	r3, #1
 800a30a:	e02e      	b.n	800a36a <sail_check_image_skeleton_valid+0x9a>

    if (image->pixel_format == SAIL_PIXEL_FORMAT_UNKNOWN) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7d1b      	ldrb	r3, [r3, #20]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d109      	bne.n	800a328 <sail_check_image_skeleton_valid+0x58>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_PIXEL_FORMAT);
 800a314:	4b1c      	ldr	r3, [pc, #112]	; (800a388 <sail_check_image_skeleton_valid+0xb8>)
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	4b1a      	ldr	r3, [pc, #104]	; (800a384 <sail_check_image_skeleton_valid+0xb4>)
 800a31a:	2297      	movs	r2, #151	; 0x97
 800a31c:	4917      	ldr	r1, [pc, #92]	; (800a37c <sail_check_image_skeleton_valid+0xac>)
 800a31e:	2001      	movs	r0, #1
 800a320:	f001 fa60 	bl	800b7e4 <sail_log>
 800a324:	23ca      	movs	r3, #202	; 0xca
 800a326:	e020      	b.n	800a36a <sail_check_image_skeleton_valid+0x9a>
    }
    if (image->width == 0 || image->height == 0) {
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <sail_check_image_skeleton_valid+0x68>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <sail_check_image_skeleton_valid+0x7c>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCORRECT_IMAGE_DIMENSIONS);
 800a338:	4b14      	ldr	r3, [pc, #80]	; (800a38c <sail_check_image_skeleton_valid+0xbc>)
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4b11      	ldr	r3, [pc, #68]	; (800a384 <sail_check_image_skeleton_valid+0xb4>)
 800a33e:	229a      	movs	r2, #154	; 0x9a
 800a340:	490e      	ldr	r1, [pc, #56]	; (800a37c <sail_check_image_skeleton_valid+0xac>)
 800a342:	2001      	movs	r0, #1
 800a344:	f001 fa4e 	bl	800b7e4 <sail_log>
 800a348:	23c8      	movs	r3, #200	; 0xc8
 800a34a:	e00e      	b.n	800a36a <sail_check_image_skeleton_valid+0x9a>
    }
    if (image->bytes_per_line == 0) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d109      	bne.n	800a368 <sail_check_image_skeleton_valid+0x98>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCORRECT_BYTES_PER_LINE);
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <sail_check_image_skeleton_valid+0xc0>)
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <sail_check_image_skeleton_valid+0xb4>)
 800a35a:	229d      	movs	r2, #157	; 0x9d
 800a35c:	4907      	ldr	r1, [pc, #28]	; (800a37c <sail_check_image_skeleton_valid+0xac>)
 800a35e:	2001      	movs	r0, #1
 800a360:	f001 fa40 	bl	800b7e4 <sail_log>
 800a364:	23d0      	movs	r3, #208	; 0xd0
 800a366:	e000      	b.n	800a36a <sail_check_image_skeleton_valid+0x9a>
    }

    return SAIL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	080151e8 	.word	0x080151e8
 800a378:	08015180 	.word	0x08015180
 800a37c:	08015198 	.word	0x08015198
 800a380:	080151f4 	.word	0x080151f4
 800a384:	080151f0 	.word	0x080151f0
 800a388:	08015218 	.word	0x08015218
 800a38c:	08015238 	.word	0x08015238
 800a390:	08015260 	.word	0x08015260

0800a394 <sail_check_image_valid>:

sail_status_t sail_check_image_valid(const struct sail_image *image)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af02      	add	r7, sp, #8
 800a39a:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(image);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bf0c      	ite	eq
 800a3a2:	2301      	moveq	r3, #1
 800a3a4:	2300      	movne	r3, #0
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d011      	beq.n	800a3d0 <sail_check_image_valid+0x3c>
 800a3ac:	4b31      	ldr	r3, [pc, #196]	; (800a474 <sail_check_image_valid+0xe0>)
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4b31      	ldr	r3, [pc, #196]	; (800a478 <sail_check_image_valid+0xe4>)
 800a3b2:	22a5      	movs	r2, #165	; 0xa5
 800a3b4:	4931      	ldr	r1, [pc, #196]	; (800a47c <sail_check_image_valid+0xe8>)
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	f001 fa14 	bl	800b7e4 <sail_log>
 800a3bc:	4b30      	ldr	r3, [pc, #192]	; (800a480 <sail_check_image_valid+0xec>)
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	4b30      	ldr	r3, [pc, #192]	; (800a484 <sail_check_image_valid+0xf0>)
 800a3c2:	22a5      	movs	r2, #165	; 0xa5
 800a3c4:	492d      	ldr	r1, [pc, #180]	; (800a47c <sail_check_image_valid+0xe8>)
 800a3c6:	2001      	movs	r0, #1
 800a3c8:	f001 fa0c 	bl	800b7e4 <sail_log>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e04d      	b.n	800a46c <sail_check_image_valid+0xd8>

    SAIL_TRY(sail_check_image_skeleton_valid(image));
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff ff7d 	bl	800a2d0 <sail_check_image_skeleton_valid>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	81fb      	strh	r3, [r7, #14]
 800a3da:	89fb      	ldrh	r3, [r7, #14]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bf14      	ite	ne
 800a3e0:	2301      	movne	r3, #1
 800a3e2:	2300      	moveq	r3, #0
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <sail_check_image_valid+0x5a>
 800a3ea:	89fb      	ldrh	r3, [r7, #14]
 800a3ec:	e03e      	b.n	800a46c <sail_check_image_valid+0xd8>

    if (sail_is_indexed(image->pixel_format)) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	7d1b      	ldrb	r3, [r3, #20]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f003 f85a 	bl	800d4ac <sail_is_indexed>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d01a      	beq.n	800a434 <sail_check_image_valid+0xa0>
        SAIL_CHECK_PTR(image->palette);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	2b00      	cmp	r3, #0
 800a404:	bf0c      	ite	eq
 800a406:	2301      	moveq	r3, #1
 800a408:	2300      	movne	r3, #0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d011      	beq.n	800a434 <sail_check_image_valid+0xa0>
 800a410:	4b1d      	ldr	r3, [pc, #116]	; (800a488 <sail_check_image_valid+0xf4>)
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4b18      	ldr	r3, [pc, #96]	; (800a478 <sail_check_image_valid+0xe4>)
 800a416:	22aa      	movs	r2, #170	; 0xaa
 800a418:	4918      	ldr	r1, [pc, #96]	; (800a47c <sail_check_image_valid+0xe8>)
 800a41a:	2001      	movs	r0, #1
 800a41c:	f001 f9e2 	bl	800b7e4 <sail_log>
 800a420:	4b17      	ldr	r3, [pc, #92]	; (800a480 <sail_check_image_valid+0xec>)
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	4b17      	ldr	r3, [pc, #92]	; (800a484 <sail_check_image_valid+0xf0>)
 800a426:	22aa      	movs	r2, #170	; 0xaa
 800a428:	4914      	ldr	r1, [pc, #80]	; (800a47c <sail_check_image_valid+0xe8>)
 800a42a:	2001      	movs	r0, #1
 800a42c:	f001 f9da 	bl	800b7e4 <sail_log>
 800a430:	2301      	movs	r3, #1
 800a432:	e01b      	b.n	800a46c <sail_check_image_valid+0xd8>
    }

    SAIL_CHECK_PTR(image->pixels);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bf0c      	ite	eq
 800a43c:	2301      	moveq	r3, #1
 800a43e:	2300      	movne	r3, #0
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d011      	beq.n	800a46a <sail_check_image_valid+0xd6>
 800a446:	4b11      	ldr	r3, [pc, #68]	; (800a48c <sail_check_image_valid+0xf8>)
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <sail_check_image_valid+0xe4>)
 800a44c:	22ad      	movs	r2, #173	; 0xad
 800a44e:	490b      	ldr	r1, [pc, #44]	; (800a47c <sail_check_image_valid+0xe8>)
 800a450:	2001      	movs	r0, #1
 800a452:	f001 f9c7 	bl	800b7e4 <sail_log>
 800a456:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <sail_check_image_valid+0xec>)
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <sail_check_image_valid+0xf0>)
 800a45c:	22ad      	movs	r2, #173	; 0xad
 800a45e:	4907      	ldr	r1, [pc, #28]	; (800a47c <sail_check_image_valid+0xe8>)
 800a460:	2001      	movs	r0, #1
 800a462:	f001 f9bf 	bl	800b7e4 <sail_log>
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <sail_check_image_valid+0xd8>

    return SAIL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	080151e8 	.word	0x080151e8
 800a478:	08015180 	.word	0x08015180
 800a47c:	08015198 	.word	0x08015198
 800a480:	080151f4 	.word	0x080151f4
 800a484:	080151f0 	.word	0x080151f0
 800a488:	08015284 	.word	0x08015284
 800a48c:	08015294 	.word	0x08015294

0800a490 <rstrip>:
    size_t num_left;
} ini_parse_string_ctx;

/* Strip whitespace chars off end of given string, in place. Return s. */
static char* rstrip(char* s)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    char* p = s + strlen(s);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7f6 f82b 	bl	80004f4 <strlen>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]
    while (p > s && isspace((unsigned char)(*--p)))
 800a4a6:	e002      	b.n	800a4ae <rstrip+0x1e>
        *p = '\0';
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
    while (p > s && isspace((unsigned char)(*--p)))
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d90c      	bls.n	800a4d0 <rstrip+0x40>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	4a06      	ldr	r2, [pc, #24]	; (800a4dc <rstrip+0x4c>)
 800a4c4:	4413      	add	r3, r2
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1eb      	bne.n	800a4a8 <rstrip+0x18>
    return s;
 800a4d0:	687b      	ldr	r3, [r7, #4]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	080172a6 	.word	0x080172a6

0800a4e0 <lskip>:

/* Return pointer to first non-whitespace char in given string. */
static char* lskip(const char* s)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800a4e8:	e002      	b.n	800a4f0 <lskip+0x10>
        s++;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	607b      	str	r3, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d009      	beq.n	800a50c <lskip+0x2c>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	4a07      	ldr	r2, [pc, #28]	; (800a51c <lskip+0x3c>)
 800a500:	4413      	add	r3, r2
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1ee      	bne.n	800a4ea <lskip+0xa>
    return (char*)s;
 800a50c:	687b      	ldr	r3, [r7, #4]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	080172a6 	.word	0x080172a6

0800a520 <find_chars_or_comment>:

/* Return pointer to first char (of chars) or inline comment in given string,
   or pointer to NUL at end of string if neither found. Inline comment must
   be prefixed by a whitespace character to register as a comment. */
static char* find_chars_or_comment(const char* s, const char* chars)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
#if INI_ALLOW_INLINE_COMMENTS
    int was_space = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800a52e:	e00b      	b.n	800a548 <find_chars_or_comment+0x28>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
        was_space = isspace((unsigned char)(*s));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	4a15      	ldr	r2, [pc, #84]	; (800a58c <find_chars_or_comment+0x6c>)
 800a538:	4413      	add	r3, r2
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	60fb      	str	r3, [r7, #12]
        s++;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3301      	adds	r3, #1
 800a546:	607b      	str	r3, [r7, #4]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d017      	beq.n	800a580 <find_chars_or_comment+0x60>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d008      	beq.n	800a568 <find_chars_or_comment+0x48>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	4619      	mov	r1, r3
 800a55c:	6838      	ldr	r0, [r7, #0]
 800a55e:	f006 f94e 	bl	80107fe <strchr>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <find_chars_or_comment+0x60>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0e0      	beq.n	800a530 <find_chars_or_comment+0x10>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	4619      	mov	r1, r3
 800a574:	4806      	ldr	r0, [pc, #24]	; (800a590 <find_chars_or_comment+0x70>)
 800a576:	f006 f942 	bl	80107fe <strchr>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0d7      	beq.n	800a530 <find_chars_or_comment+0x10>
#else
    while (*s && (!chars || !strchr(chars, *s))) {
        s++;
    }
#endif
    return (char*)s;
 800a580:	687b      	ldr	r3, [r7, #4]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	080172a6 	.word	0x080172a6
 800a590:	080152a4 	.word	0x080152a4

0800a594 <strncpy0>:

/* Similar to strncpy, but ensures dest (size bytes) is
   NUL-terminated, and doesn't pad with NULs. */
static char* strncpy0(char* dest, const char* src, size_t size)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
    strncpy(dest, src, size - 1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f006 fb37 	bl	8010c1c <strncpy>
    dest[size - 1] = '\0';
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]

    return dest;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <ini_parse_stream>:

/* See documentation in header file. */
int ini_parse_stream(ini_reader reader, void* stream, ini_handler handler,
                     void* user)
{
 800a5c4:	b590      	push	{r4, r7, lr}
 800a5c6:	b0d9      	sub	sp, #356	; 0x164
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 800a5ce:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 800a5d2:	6020      	str	r0, [r4, #0]
 800a5d4:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800a5d8:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 800a5dc:	6001      	str	r1, [r0, #0]
 800a5de:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800a5e2:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 800a5e6:	600a      	str	r2, [r1, #0]
 800a5e8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800a5ec:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800a5f0:	6013      	str	r3, [r2, #0]
    /* Uses a fair bit of stack (use heap instead if you need to) */
#if INI_USE_STACK
    char line[INI_MAX_LINE];
    int max_line = INI_MAX_LINE;
 800a5f2:	23c8      	movs	r3, #200	; 0xc8
 800a5f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
#endif
#if INI_ALLOW_REALLOC && !INI_USE_STACK
    char* new_line;
    size_t offset;
#endif
    char section[MAX_SECTION] = "";
 800a5f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a5fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	3304      	adds	r3, #4
 800a606:	222e      	movs	r2, #46	; 0x2e
 800a608:	2100      	movs	r1, #0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f005 fa88 	bl	800fb20 <memset>
    char prev_name[MAX_NAME] = "";
 800a610:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a614:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	3304      	adds	r3, #4
 800a61e:	222e      	movs	r2, #46	; 0x2e
 800a620:	2100      	movs	r1, #0
 800a622:	4618      	mov	r0, r3
 800a624:	f005 fa7c 	bl	800fb20 <memset>

    char* start;
    char* end;
    char* name;
    char* value;
    int lineno = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    int error = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#else
#define HANDLER(u, s, n, v) handler(u, s, n, v)
#endif

    /* Scan through stream line by line */
    while (reader(line, (int)max_line, stream) != NULL) {
 800a634:	e104      	b.n	800a840 <ini_parse_stream+0x27c>
                break;
            offset += strlen(line + offset);
        }
#endif

        lineno++;
 800a636:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a63a:	3301      	adds	r3, #1
 800a63c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        start = line;
 800a640:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a644:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#if INI_ALLOW_BOM
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800a648:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d115      	bne.n	800a67c <ini_parse_stream+0xb8>
 800a650:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2bef      	cmp	r3, #239	; 0xef
 800a658:	d110      	bne.n	800a67c <ini_parse_stream+0xb8>
                           (unsigned char)start[1] == 0xBB &&
 800a65a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a65e:	3301      	adds	r3, #1
 800a660:	781b      	ldrb	r3, [r3, #0]
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800a662:	2bbb      	cmp	r3, #187	; 0xbb
 800a664:	d10a      	bne.n	800a67c <ini_parse_stream+0xb8>
                           (unsigned char)start[2] == 0xBF) {
 800a666:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a66a:	3302      	adds	r3, #2
 800a66c:	781b      	ldrb	r3, [r3, #0]
                           (unsigned char)start[1] == 0xBB &&
 800a66e:	2bbf      	cmp	r3, #191	; 0xbf
 800a670:	d104      	bne.n	800a67c <ini_parse_stream+0xb8>
            start += 3;
 800a672:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a676:	3303      	adds	r3, #3
 800a678:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        }
#endif
        start = lskip(rstrip(start));
 800a67c:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800a680:	f7ff ff06 	bl	800a490 <rstrip>
 800a684:	4603      	mov	r3, r0
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff ff2a 	bl	800a4e0 <lskip>
 800a68c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

        if (strchr(INI_START_COMMENT_PREFIXES, *start)) {
 800a690:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	4619      	mov	r1, r3
 800a698:	4876      	ldr	r0, [pc, #472]	; (800a874 <ini_parse_stream+0x2b0>)
 800a69a:	f006 f8b0 	bl	80107fe <strchr>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f040 80cd 	bne.w	800a840 <ini_parse_stream+0x27c>
            /* Start-of-line comment */
        }
#if INI_ALLOW_MULTILINE
        else if (*prev_name && *start && start > line) {
 800a6a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a6aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d029      	beq.n	800a708 <ini_parse_stream+0x144>
 800a6b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d024      	beq.n	800a708 <ini_parse_stream+0x144>
 800a6be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a6c2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d91e      	bls.n	800a708 <ini_parse_stream+0x144>
            /* Non-blank line with leading whitespace, treat as continuation
               of previous name's value (as per Python configparser). */
            if (!HANDLER(user, section, prev_name, start) && !error)
 800a6ca:	f107 0214 	add.w	r2, r7, #20
 800a6ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a6d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a6d6:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800a6da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a6de:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800a6e2:	681c      	ldr	r4, [r3, #0]
 800a6e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a6e8:	6800      	ldr	r0, [r0, #0]
 800a6ea:	47a0      	blx	r4
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f040 80a6 	bne.w	800a840 <ini_parse_stream+0x27c>
 800a6f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f040 80a1 	bne.w	800a840 <ini_parse_stream+0x27c>
                error = lineno;
 800a6fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a702:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if (!HANDLER(user, section, prev_name, start) && !error)
 800a706:	e09b      	b.n	800a840 <ini_parse_stream+0x27c>
        }
#endif
        else if (*start == '[') {
 800a708:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b5b      	cmp	r3, #91	; 0x5b
 800a710:	d12a      	bne.n	800a768 <ini_parse_stream+0x1a4>
            /* A "[section]" line */
            end = find_chars_or_comment(start + 1, "]");
 800a712:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a716:	3301      	adds	r3, #1
 800a718:	4957      	ldr	r1, [pc, #348]	; (800a878 <ini_parse_stream+0x2b4>)
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff ff00 	bl	800a520 <find_chars_or_comment>
 800a720:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == ']') {
 800a724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b5d      	cmp	r3, #93	; 0x5d
 800a72c:	d113      	bne.n	800a756 <ini_parse_stream+0x192>
                *end = '\0';
 800a72e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
                strncpy0(section, start + 1, sizeof(section));
 800a736:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a73a:	1c59      	adds	r1, r3, #1
 800a73c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a740:	2232      	movs	r2, #50	; 0x32
 800a742:	4618      	mov	r0, r3
 800a744:	f7ff ff26 	bl	800a594 <strncpy0>
                *prev_name = '\0';
 800a748:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a74c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800a750:	2200      	movs	r2, #0
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	e074      	b.n	800a840 <ini_parse_stream+0x27c>
#if INI_CALL_HANDLER_ON_NEW_SECTION
                if (!HANDLER(user, section, NULL, NULL) && !error)
                    error = lineno;
#endif
            }
            else if (!error) {
 800a756:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d170      	bne.n	800a840 <ini_parse_stream+0x27c>
                /* No ']' found on section line */
                error = lineno;
 800a75e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a762:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800a766:	e06b      	b.n	800a840 <ini_parse_stream+0x27c>
            }
        }
        else if (*start) {
 800a768:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d066      	beq.n	800a840 <ini_parse_stream+0x27c>
            /* Not a comment, must be a name[=:]value pair */
            end = find_chars_or_comment(start, "=:");
 800a772:	4942      	ldr	r1, [pc, #264]	; (800a87c <ini_parse_stream+0x2b8>)
 800a774:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800a778:	f7ff fed2 	bl	800a520 <find_chars_or_comment>
 800a77c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == '=' || *end == ':') {
 800a780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b3d      	cmp	r3, #61	; 0x3d
 800a788:	d004      	beq.n	800a794 <ini_parse_stream+0x1d0>
 800a78a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b3a      	cmp	r3, #58	; 0x3a
 800a792:	d14d      	bne.n	800a830 <ini_parse_stream+0x26c>
                *end = '\0';
 800a794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
                name = rstrip(start);
 800a79c:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800a7a0:	f7ff fe76 	bl	800a490 <rstrip>
 800a7a4:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
                value = end + 1;
 800a7a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
#if INI_ALLOW_INLINE_COMMENTS
                end = find_chars_or_comment(value, NULL);
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800a7b8:	f7ff feb2 	bl	800a520 <find_chars_or_comment>
 800a7bc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                if (*end)
 800a7c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <ini_parse_stream+0x20e>
                    *end = '\0';
 800a7ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	701a      	strb	r2, [r3, #0]
#endif
                value = lskip(value);
 800a7d2:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800a7d6:	f7ff fe83 	bl	800a4e0 <lskip>
 800a7da:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
                rstrip(value);
 800a7de:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800a7e2:	f7ff fe55 	bl	800a490 <rstrip>

                /* Valid name[=:]value pair found, call handler */
                strncpy0(prev_name, name, sizeof(prev_name));
 800a7e6:	f107 0314 	add.w	r3, r7, #20
 800a7ea:	2232      	movs	r2, #50	; 0x32
 800a7ec:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fecf 	bl	800a594 <strncpy0>
                if (!HANDLER(user, section, name, value) && !error)
 800a7f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a7fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a7fe:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800a802:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a806:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800a80a:	681c      	ldr	r4, [r3, #0]
 800a80c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a810:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800a814:	6800      	ldr	r0, [r0, #0]
 800a816:	47a0      	blx	r4
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d110      	bne.n	800a840 <ini_parse_stream+0x27c>
 800a81e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10c      	bne.n	800a840 <ini_parse_stream+0x27c>
                    error = lineno;
 800a826:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a82a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                if (!HANDLER(user, section, name, value) && !error)
 800a82e:	e007      	b.n	800a840 <ini_parse_stream+0x27c>
            }
            else if (!error) {
 800a830:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a834:	2b00      	cmp	r3, #0
 800a836:	d103      	bne.n	800a840 <ini_parse_stream+0x27c>
                *end = '\0';
                name = rstrip(start);
                if (!HANDLER(user, section, name, NULL) && !error)
                    error = lineno;
#else
                error = lineno;
 800a838:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a83c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    while (reader(line, (int)max_line, stream) != NULL) {
 800a840:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a844:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800a848:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800a84c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a850:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6812      	ldr	r2, [r2, #0]
 800a858:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a85c:	4798      	blx	r3
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	f47f aee8 	bne.w	800a636 <ini_parse_stream+0x72>

#if !INI_USE_STACK
    sail_free(line);
#endif

    return error;
 800a866:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800a870:	46bd      	mov	sp, r7
 800a872:	bd90      	pop	{r4, r7, pc}
 800a874:	080152a8 	.word	0x080152a8
 800a878:	080152ac 	.word	0x080152ac
 800a87c:	080152b0 	.word	0x080152b0

0800a880 <ini_reader_string>:
    return error;
}

/* An ini_reader function to read the next line from a string buffer. This
   is the fgets() equivalent used by ini_parse_string(). */
static char* ini_reader_string(char* str, int num, void* stream) {
 800a880:	b480      	push	{r7}
 800a882:	b08b      	sub	sp, #44	; 0x2c
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
    ini_parse_string_ctx* ctx = (ini_parse_string_ctx*)stream;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	61bb      	str	r3, [r7, #24]
    const char* ctx_ptr = ctx->ptr;
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ctx_num_left = ctx->num_left;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	623b      	str	r3, [r7, #32]
    char* strp = str;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	61fb      	str	r3, [r7, #28]
    char c;

    if (ctx_num_left == 0 || num < 2)
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <ini_reader_string+0x2c>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	dc14      	bgt.n	800a8d6 <ini_reader_string+0x56>
        return NULL;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e024      	b.n	800a8fa <ini_reader_string+0x7a>

    while (num > 1 && ctx_num_left != 0) {
        c = *ctx_ptr++;
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	627a      	str	r2, [r7, #36]	; 0x24
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	75fb      	strb	r3, [r7, #23]
        ctx_num_left--;
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	623b      	str	r3, [r7, #32]
        *strp++ = c;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	61fa      	str	r2, [r7, #28]
 800a8c6:	7dfa      	ldrb	r2, [r7, #23]
 800a8c8:	701a      	strb	r2, [r3, #0]
        if (c == '\n')
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	2b0a      	cmp	r3, #10
 800a8ce:	d009      	beq.n	800a8e4 <ini_reader_string+0x64>
            break;
        num--;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	60bb      	str	r3, [r7, #8]
    while (num > 1 && ctx_num_left != 0) {
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	dd04      	ble.n	800a8e6 <ini_reader_string+0x66>
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e6      	bne.n	800a8b0 <ini_reader_string+0x30>
 800a8e2:	e000      	b.n	800a8e6 <ini_reader_string+0x66>
            break;
 800a8e4:	bf00      	nop
    }

    *strp = '\0';
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]
    ctx->ptr = ctx_ptr;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f0:	601a      	str	r2, [r3, #0]
    ctx->num_left = ctx_num_left;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	6a3a      	ldr	r2, [r7, #32]
 800a8f6:	605a      	str	r2, [r3, #4]
    return str;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	372c      	adds	r7, #44	; 0x2c
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
	...

0800a908 <ini_parse_string>:

/* See documentation in header file. */
int ini_parse_string(const char* string, ini_handler handler, void* user) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
    ini_parse_string_ctx ctx;

    ctx.ptr = string;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	613b      	str	r3, [r7, #16]
    ctx.num_left = strlen(string);
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7f5 fdeb 	bl	80004f4 <strlen>
 800a91e:	4603      	mov	r3, r0
 800a920:	617b      	str	r3, [r7, #20]
    return ini_parse_stream((ini_reader)ini_reader_string, &ctx, handler,
 800a922:	f107 0110 	add.w	r1, r7, #16
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	4804      	ldr	r0, [pc, #16]	; (800a93c <ini_parse_string+0x34>)
 800a92c:	f7ff fe4a 	bl	800a5c4 <ini_parse_stream>
 800a930:	4603      	mov	r3, r0
                            user);
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0800a881 	.word	0x0800a881

0800a940 <sail_alloc_io>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_io(struct sail_io **io) {
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af02      	add	r7, sp, #8
 800a946:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(io);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	bf0c      	ite	eq
 800a94e:	2301      	moveq	r3, #1
 800a950:	2300      	movne	r3, #0
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d011      	beq.n	800a97c <sail_alloc_io+0x3c>
 800a958:	4b2f      	ldr	r3, [pc, #188]	; (800aa18 <sail_alloc_io+0xd8>)
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4b2f      	ldr	r3, [pc, #188]	; (800aa1c <sail_alloc_io+0xdc>)
 800a95e:	2223      	movs	r2, #35	; 0x23
 800a960:	492f      	ldr	r1, [pc, #188]	; (800aa20 <sail_alloc_io+0xe0>)
 800a962:	2001      	movs	r0, #1
 800a964:	f000 ff3e 	bl	800b7e4 <sail_log>
 800a968:	4b2e      	ldr	r3, [pc, #184]	; (800aa24 <sail_alloc_io+0xe4>)
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <sail_alloc_io+0xe8>)
 800a96e:	2223      	movs	r2, #35	; 0x23
 800a970:	492b      	ldr	r1, [pc, #172]	; (800aa20 <sail_alloc_io+0xe0>)
 800a972:	2001      	movs	r0, #1
 800a974:	f000 ff36 	bl	800b7e4 <sail_log>
 800a978:	2301      	movs	r3, #1
 800a97a:	e049      	b.n	800aa10 <sail_alloc_io+0xd0>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_io), &ptr));
 800a97c:	f107 0308 	add.w	r3, r7, #8
 800a980:	4619      	mov	r1, r3
 800a982:	2038      	movs	r0, #56	; 0x38
 800a984:	f001 f826 	bl	800b9d4 <sail_malloc>
 800a988:	4603      	mov	r3, r0
 800a98a:	81fb      	strh	r3, [r7, #14]
 800a98c:	89fb      	ldrh	r3, [r7, #14]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bf14      	ite	ne
 800a992:	2301      	movne	r3, #1
 800a994:	2300      	moveq	r3, #0
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <sail_alloc_io+0x60>
 800a99c:	89fb      	ldrh	r3, [r7, #14]
 800a99e:	e037      	b.n	800aa10 <sail_alloc_io+0xd0>
    *io = ptr;
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	601a      	str	r2, [r3, #0]

    (*io)->id             = 0;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6819      	ldr	r1, [r3, #0]
 800a9aa:	f04f 0200 	mov.w	r2, #0
 800a9ae:	f04f 0300 	mov.w	r3, #0
 800a9b2:	e9c1 2300 	strd	r2, r3, [r1]
    (*io)->features       = 0;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	609a      	str	r2, [r3, #8]
    (*io)->stream         = NULL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	60da      	str	r2, [r3, #12]
    (*io)->tolerant_read  = NULL;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	611a      	str	r2, [r3, #16]
    (*io)->strict_read    = NULL;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	615a      	str	r2, [r3, #20]
    (*io)->tolerant_write = NULL;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	619a      	str	r2, [r3, #24]
    (*io)->strict_write   = NULL;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	61da      	str	r2, [r3, #28]
    (*io)->seek           = NULL;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	621a      	str	r2, [r3, #32]
    (*io)->tell           = NULL;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	625a      	str	r2, [r3, #36]	; 0x24
    (*io)->flush          = NULL;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	629a      	str	r2, [r3, #40]	; 0x28
    (*io)->close          = NULL;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2200      	movs	r2, #0
 800aa04:	62da      	str	r2, [r3, #44]	; 0x2c
    (*io)->eof            = NULL;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	631a      	str	r2, [r3, #48]	; 0x30

    return SAIL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	08015324 	.word	0x08015324
 800aa1c:	080152b8 	.word	0x080152b8
 800aa20:	080152d0 	.word	0x080152d0
 800aa24:	0801532c 	.word	0x0801532c
 800aa28:	08015328 	.word	0x08015328

0800aa2c <sail_destroy_io>:

void sail_destroy_io(struct sail_io *io) {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

    if (io == NULL) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d01e      	beq.n	800aa78 <sail_destroy_io+0x4c>
        return;
    }

    if (io->close != NULL && io->stream != NULL) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d016      	beq.n	800aa70 <sail_destroy_io+0x44>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d012      	beq.n	800aa70 <sail_destroy_io+0x44>
        SAIL_TRY_OR_EXECUTE(io->close(io->stream),
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	68d2      	ldr	r2, [r2, #12]
 800aa52:	4610      	mov	r0, r2
 800aa54:	4798      	blx	r3
 800aa56:	4603      	mov	r3, r0
 800aa58:	81fb      	strh	r3, [r7, #14]
 800aa5a:	89fb      	ldrh	r3, [r7, #14]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf14      	ite	ne
 800aa60:	2301      	movne	r3, #1
 800aa62:	2300      	moveq	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <sail_destroy_io+0x44>
 800aa6a:	4805      	ldr	r0, [pc, #20]	; (800aa80 <sail_destroy_io+0x54>)
 800aa6c:	f002 fd30 	bl	800d4d0 <sail_print_errno>
                            /* on error */ sail_print_errno("Failed to close the I/O stream: %s"));
    }

    sail_free(io);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f837 	bl	800bae4 <sail_free>
 800aa76:	e000      	b.n	800aa7a <sail_destroy_io+0x4e>
        return;
 800aa78:	bf00      	nop
}
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	08015340 	.word	0x08015340

0800aa84 <sail_check_io_valid>:

sail_status_t sail_check_io_valid(const struct sail_io *io)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(io);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bf0c      	ite	eq
 800aa92:	2301      	moveq	r3, #1
 800aa94:	2300      	movne	r3, #0
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d011      	beq.n	800aac0 <sail_check_io_valid+0x3c>
 800aa9c:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <sail_check_io_valid+0xac>)
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4b24      	ldr	r3, [pc, #144]	; (800ab34 <sail_check_io_valid+0xb0>)
 800aaa2:	2249      	movs	r2, #73	; 0x49
 800aaa4:	4924      	ldr	r1, [pc, #144]	; (800ab38 <sail_check_io_valid+0xb4>)
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	f000 fe9c 	bl	800b7e4 <sail_log>
 800aaac:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <sail_check_io_valid+0xb8>)
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	4b23      	ldr	r3, [pc, #140]	; (800ab40 <sail_check_io_valid+0xbc>)
 800aab2:	2249      	movs	r2, #73	; 0x49
 800aab4:	4920      	ldr	r1, [pc, #128]	; (800ab38 <sail_check_io_valid+0xb4>)
 800aab6:	2001      	movs	r0, #1
 800aab8:	f000 fe94 	bl	800b7e4 <sail_log>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e033      	b.n	800ab28 <sail_check_io_valid+0xa4>

    if (io->id == 0U                   ||
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	d023      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->tolerant_read  == NULL ||
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
    if (io->id == 0U                   ||
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01f      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->strict_read    == NULL ||
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695b      	ldr	r3, [r3, #20]
            io->tolerant_read  == NULL ||
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d01b      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->tolerant_write == NULL ||
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	699b      	ldr	r3, [r3, #24]
            io->strict_read    == NULL ||
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d017      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->strict_write   == NULL ||
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69db      	ldr	r3, [r3, #28]
            io->tolerant_write == NULL ||
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d013      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->seek           == NULL ||
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
            io->strict_write   == NULL ||
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->tell           == NULL ||
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            io->seek           == NULL ||
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00b      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->flush          == NULL ||
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            io->tell           == NULL ||
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->close          == NULL ||
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            io->flush          == NULL ||
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <sail_check_io_valid+0x8e>
            io->eof            == NULL) {
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            io->close          == NULL ||
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <sail_check_io_valid+0xa2>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_IO);
 800ab12:	4b0c      	ldr	r3, [pc, #48]	; (800ab44 <sail_check_io_valid+0xc0>)
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <sail_check_io_valid+0xbc>)
 800ab18:	2255      	movs	r2, #85	; 0x55
 800ab1a:	4907      	ldr	r1, [pc, #28]	; (800ab38 <sail_check_io_valid+0xb4>)
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	f000 fe61 	bl	800b7e4 <sail_log>
 800ab22:	2364      	movs	r3, #100	; 0x64
 800ab24:	e000      	b.n	800ab28 <sail_check_io_valid+0xa4>
    }

    return SAIL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	08015324 	.word	0x08015324
 800ab34:	080152b8 	.word	0x080152b8
 800ab38:	080152d0 	.word	0x080152d0
 800ab3c:	0801532c 	.word	0x0801532c
 800ab40:	08015328 	.word	0x08015328
 800ab44:	08015364 	.word	0x08015364

0800ab48 <io_memory_tolerant_read>:

/*
 * Private functions.
 */

static sail_status_t io_memory_tolerant_read(void *stream, void *buf, size_t size_to_read, size_t *read_size) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2301      	moveq	r3, #1
 800ab5e:	2300      	movne	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <io_memory_tolerant_read+0x42>
 800ab66:	4b42      	ldr	r3, [pc, #264]	; (800ac70 <io_memory_tolerant_read+0x128>)
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4b42      	ldr	r3, [pc, #264]	; (800ac74 <io_memory_tolerant_read+0x12c>)
 800ab6c:	224c      	movs	r2, #76	; 0x4c
 800ab6e:	4942      	ldr	r1, [pc, #264]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800ab70:	2001      	movs	r0, #1
 800ab72:	f000 fe37 	bl	800b7e4 <sail_log>
 800ab76:	4b41      	ldr	r3, [pc, #260]	; (800ac7c <io_memory_tolerant_read+0x134>)
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4b41      	ldr	r3, [pc, #260]	; (800ac80 <io_memory_tolerant_read+0x138>)
 800ab7c:	224c      	movs	r2, #76	; 0x4c
 800ab7e:	493e      	ldr	r1, [pc, #248]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800ab80:	2001      	movs	r0, #1
 800ab82:	f000 fe2f 	bl	800b7e4 <sail_log>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e06e      	b.n	800ac68 <io_memory_tolerant_read+0x120>
    SAIL_CHECK_PTR(buf);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf0c      	ite	eq
 800ab90:	2301      	moveq	r3, #1
 800ab92:	2300      	movne	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d011      	beq.n	800abbe <io_memory_tolerant_read+0x76>
 800ab9a:	4b3a      	ldr	r3, [pc, #232]	; (800ac84 <io_memory_tolerant_read+0x13c>)
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	4b35      	ldr	r3, [pc, #212]	; (800ac74 <io_memory_tolerant_read+0x12c>)
 800aba0:	224d      	movs	r2, #77	; 0x4d
 800aba2:	4935      	ldr	r1, [pc, #212]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800aba4:	2001      	movs	r0, #1
 800aba6:	f000 fe1d 	bl	800b7e4 <sail_log>
 800abaa:	4b34      	ldr	r3, [pc, #208]	; (800ac7c <io_memory_tolerant_read+0x134>)
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	4b34      	ldr	r3, [pc, #208]	; (800ac80 <io_memory_tolerant_read+0x138>)
 800abb0:	224d      	movs	r2, #77	; 0x4d
 800abb2:	4931      	ldr	r1, [pc, #196]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800abb4:	2001      	movs	r0, #1
 800abb6:	f000 fe15 	bl	800b7e4 <sail_log>
 800abba:	2301      	movs	r3, #1
 800abbc:	e054      	b.n	800ac68 <io_memory_tolerant_read+0x120>
    SAIL_CHECK_PTR(read_size);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bf0c      	ite	eq
 800abc4:	2301      	moveq	r3, #1
 800abc6:	2300      	movne	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d011      	beq.n	800abf2 <io_memory_tolerant_read+0xaa>
 800abce:	4b2e      	ldr	r3, [pc, #184]	; (800ac88 <io_memory_tolerant_read+0x140>)
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	4b28      	ldr	r3, [pc, #160]	; (800ac74 <io_memory_tolerant_read+0x12c>)
 800abd4:	224e      	movs	r2, #78	; 0x4e
 800abd6:	4928      	ldr	r1, [pc, #160]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800abd8:	2001      	movs	r0, #1
 800abda:	f000 fe03 	bl	800b7e4 <sail_log>
 800abde:	4b27      	ldr	r3, [pc, #156]	; (800ac7c <io_memory_tolerant_read+0x134>)
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	4b27      	ldr	r3, [pc, #156]	; (800ac80 <io_memory_tolerant_read+0x138>)
 800abe4:	224e      	movs	r2, #78	; 0x4e
 800abe6:	4924      	ldr	r1, [pc, #144]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800abe8:	2001      	movs	r0, #1
 800abea:	f000 fdfb 	bl	800b7e4 <sail_log>
 800abee:	2301      	movs	r3, #1
 800abf0:	e03a      	b.n	800ac68 <io_memory_tolerant_read+0x120>

    struct mem_io_read_stream *mem_io_read_stream = (struct mem_io_read_stream *)stream;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	61fb      	str	r3, [r7, #28]
    struct mem_io_buffer_info *mem_io_buffer_info = &mem_io_read_stream->mem_io_buffer_info;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	61bb      	str	r3, [r7, #24]

    *read_size = 0;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]

    if (mem_io_buffer_info->pos >= mem_io_buffer_info->accessible_length) {
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d309      	bcc.n	800ac20 <io_memory_tolerant_read+0xd8>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_EOF);
 800ac0c:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <io_memory_tolerant_read+0x144>)
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <io_memory_tolerant_read+0x138>)
 800ac12:	2256      	movs	r2, #86	; 0x56
 800ac14:	4918      	ldr	r1, [pc, #96]	; (800ac78 <io_memory_tolerant_read+0x130>)
 800ac16:	2001      	movs	r0, #1
 800ac18:	f000 fde4 	bl	800b7e4 <sail_log>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	e023      	b.n	800ac68 <io_memory_tolerant_read+0x120>
    }

    size_t actual_size_to_read = (mem_io_buffer_info->pos + size_to_read > mem_io_buffer_info->accessible_length)
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	441a      	add	r2, r3
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	685b      	ldr	r3, [r3, #4]
                                 ? mem_io_buffer_info->accessible_length - mem_io_buffer_info->pos
                                 : size_to_read;
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d905      	bls.n	800ac3c <io_memory_tolerant_read+0xf4>
                                 ? mem_io_buffer_info->accessible_length - mem_io_buffer_info->pos
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	689b      	ldr	r3, [r3, #8]
                                 : size_to_read;
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	e000      	b.n	800ac3e <io_memory_tolerant_read+0xf6>
 800ac3c:	687b      	ldr	r3, [r7, #4]
    size_t actual_size_to_read = (mem_io_buffer_info->pos + size_to_read > mem_io_buffer_info->accessible_length)
 800ac3e:	617b      	str	r3, [r7, #20]

    memcpy(buf, (const char *)mem_io_read_stream->buffer + mem_io_buffer_info->pos, actual_size_to_read);
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	68da      	ldr	r2, [r3, #12]
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	4413      	add	r3, r2
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	68b8      	ldr	r0, [r7, #8]
 800ac50:	f004 ff58 	bl	800fb04 <memcpy>
    mem_io_buffer_info->pos += actual_size_to_read;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	441a      	add	r2, r3
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	609a      	str	r2, [r3, #8]

    *read_size = actual_size_to_read;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3720      	adds	r7, #32
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	08015460 	.word	0x08015460
 800ac74:	080153fc 	.word	0x080153fc
 800ac78:	08015414 	.word	0x08015414
 800ac7c:	0801546c 	.word	0x0801546c
 800ac80:	08015468 	.word	0x08015468
 800ac84:	08015480 	.word	0x08015480
 800ac88:	08015484 	.word	0x08015484
 800ac8c:	08015490 	.word	0x08015490

0800ac90 <io_memory_strict_read>:

static sail_status_t io_memory_strict_read(void *stream, void *buf, size_t size_to_read) {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]

    size_t read_size;

    SAIL_TRY(io_memory_tolerant_read(stream, buf, size_to_read, &read_size));
 800ac9c:	f107 0310 	add.w	r3, r7, #16
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff ff4f 	bl	800ab48 <io_memory_tolerant_read>
 800acaa:	4603      	mov	r3, r0
 800acac:	82fb      	strh	r3, [r7, #22]
 800acae:	8afb      	ldrh	r3, [r7, #22]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bf14      	ite	ne
 800acb4:	2301      	movne	r3, #1
 800acb6:	2300      	moveq	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <io_memory_strict_read+0x32>
 800acbe:	8afb      	ldrh	r3, [r7, #22]
 800acc0:	e00e      	b.n	800ace0 <io_memory_strict_read+0x50>

    if (read_size != size_to_read) {
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d009      	beq.n	800acde <io_memory_strict_read+0x4e>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_READ_IO);
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <io_memory_strict_read+0x58>)
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	4b07      	ldr	r3, [pc, #28]	; (800acec <io_memory_strict_read+0x5c>)
 800acd0:	226c      	movs	r2, #108	; 0x6c
 800acd2:	4907      	ldr	r1, [pc, #28]	; (800acf0 <io_memory_strict_read+0x60>)
 800acd4:	2001      	movs	r0, #1
 800acd6:	f000 fd85 	bl	800b7e4 <sail_log>
 800acda:	230a      	movs	r3, #10
 800acdc:	e000      	b.n	800ace0 <io_memory_strict_read+0x50>
    }

    return SAIL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	080154a0 	.word	0x080154a0
 800acec:	08015468 	.word	0x08015468
 800acf0:	08015414 	.word	0x08015414

0800acf4 <io_memory_seek>:
    }

    return SAIL_OK;
}

static sail_status_t io_memory_seek(void *stream, long offset, int whence) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af02      	add	r7, sp, #8
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(stream);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bf0c      	ite	eq
 800ad06:	2301      	moveq	r3, #1
 800ad08:	2300      	movne	r3, #0
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d011      	beq.n	800ad34 <io_memory_seek+0x40>
 800ad10:	4b2b      	ldr	r3, [pc, #172]	; (800adc0 <io_memory_seek+0xcc>)
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	4b2b      	ldr	r3, [pc, #172]	; (800adc4 <io_memory_seek+0xd0>)
 800ad16:	22a1      	movs	r2, #161	; 0xa1
 800ad18:	492b      	ldr	r1, [pc, #172]	; (800adc8 <io_memory_seek+0xd4>)
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	f000 fd62 	bl	800b7e4 <sail_log>
 800ad20:	4b2a      	ldr	r3, [pc, #168]	; (800adcc <io_memory_seek+0xd8>)
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	4b2a      	ldr	r3, [pc, #168]	; (800add0 <io_memory_seek+0xdc>)
 800ad26:	22a1      	movs	r2, #161	; 0xa1
 800ad28:	4927      	ldr	r1, [pc, #156]	; (800adc8 <io_memory_seek+0xd4>)
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f000 fd5a 	bl	800b7e4 <sail_log>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e041      	b.n	800adb8 <io_memory_seek+0xc4>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	613b      	str	r3, [r7, #16]

    size_t new_pos;

    switch (whence) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d012      	beq.n	800ad64 <io_memory_seek+0x70>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	dc15      	bgt.n	800ad70 <io_memory_seek+0x7c>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <io_memory_seek+0x5e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d003      	beq.n	800ad58 <io_memory_seek+0x64>
 800ad50:	e00e      	b.n	800ad70 <io_memory_seek+0x7c>
        case SEEK_SET: {
            new_pos = offset;
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	617b      	str	r3, [r7, #20]
            break;
 800ad56:	e015      	b.n	800ad84 <io_memory_seek+0x90>
        }

        case SEEK_CUR: {
            new_pos = mem_io_buffer_info->pos + offset;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	4413      	add	r3, r2
 800ad60:	617b      	str	r3, [r7, #20]
            break;
 800ad62:	e00f      	b.n	800ad84 <io_memory_seek+0x90>
        }

        case SEEK_END: {
            new_pos = mem_io_buffer_info->accessible_length + offset;
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	617b      	str	r3, [r7, #20]
            break;
 800ad6e:	e009      	b.n	800ad84 <io_memory_seek+0x90>
        }

        default: {
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_SEEK_WHENCE);
 800ad70:	4b18      	ldr	r3, [pc, #96]	; (800add4 <io_memory_seek+0xe0>)
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	4b16      	ldr	r3, [pc, #88]	; (800add0 <io_memory_seek+0xdc>)
 800ad76:	22b8      	movs	r2, #184	; 0xb8
 800ad78:	4913      	ldr	r1, [pc, #76]	; (800adc8 <io_memory_seek+0xd4>)
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	f000 fd32 	bl	800b7e4 <sail_log>
 800ad80:	2312      	movs	r3, #18
 800ad82:	e019      	b.n	800adb8 <io_memory_seek+0xc4>
        }
    }

    /* Correct the value. */
    if (new_pos >= mem_io_buffer_info->length) {
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d307      	bcc.n	800ad9e <io_memory_seek+0xaa>
        new_pos = mem_io_buffer_info->length;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	617b      	str	r3, [r7, #20]
        mem_io_buffer_info->accessible_length = mem_io_buffer_info->length;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	605a      	str	r2, [r3, #4]
 800ad9c:	e008      	b.n	800adb0 <io_memory_seek+0xbc>
    } else if (new_pos >= mem_io_buffer_info->accessible_length) {
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d303      	bcc.n	800adb0 <io_memory_seek+0xbc>
        mem_io_buffer_info->accessible_length = new_pos + 1;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	605a      	str	r2, [r3, #4]
    }

    mem_io_buffer_info->pos = new_pos;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	08015460 	.word	0x08015460
 800adc4:	080153fc 	.word	0x080153fc
 800adc8:	08015414 	.word	0x08015414
 800adcc:	0801546c 	.word	0x0801546c
 800add0:	08015468 	.word	0x08015468
 800add4:	080154d8 	.word	0x080154d8

0800add8 <io_memory_tell>:

static sail_status_t io_memory_tell(void *stream, size_t *offset) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af02      	add	r7, sp, #8
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bf0c      	ite	eq
 800ade8:	2301      	moveq	r3, #1
 800adea:	2300      	movne	r3, #0
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d011      	beq.n	800ae16 <io_memory_tell+0x3e>
 800adf2:	4b1b      	ldr	r3, [pc, #108]	; (800ae60 <io_memory_tell+0x88>)
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	4b1b      	ldr	r3, [pc, #108]	; (800ae64 <io_memory_tell+0x8c>)
 800adf8:	22cb      	movs	r2, #203	; 0xcb
 800adfa:	491b      	ldr	r1, [pc, #108]	; (800ae68 <io_memory_tell+0x90>)
 800adfc:	2001      	movs	r0, #1
 800adfe:	f000 fcf1 	bl	800b7e4 <sail_log>
 800ae02:	4b1a      	ldr	r3, [pc, #104]	; (800ae6c <io_memory_tell+0x94>)
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <io_memory_tell+0x98>)
 800ae08:	22cb      	movs	r2, #203	; 0xcb
 800ae0a:	4917      	ldr	r1, [pc, #92]	; (800ae68 <io_memory_tell+0x90>)
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	f000 fce9 	bl	800b7e4 <sail_log>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e020      	b.n	800ae58 <io_memory_tell+0x80>
    SAIL_CHECK_PTR(offset);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	2300      	movne	r3, #0
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d011      	beq.n	800ae4a <io_memory_tell+0x72>
 800ae26:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <io_memory_tell+0x9c>)
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	; (800ae64 <io_memory_tell+0x8c>)
 800ae2c:	22cc      	movs	r2, #204	; 0xcc
 800ae2e:	490e      	ldr	r1, [pc, #56]	; (800ae68 <io_memory_tell+0x90>)
 800ae30:	2001      	movs	r0, #1
 800ae32:	f000 fcd7 	bl	800b7e4 <sail_log>
 800ae36:	4b0d      	ldr	r3, [pc, #52]	; (800ae6c <io_memory_tell+0x94>)
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <io_memory_tell+0x98>)
 800ae3c:	22cc      	movs	r2, #204	; 0xcc
 800ae3e:	490a      	ldr	r1, [pc, #40]	; (800ae68 <io_memory_tell+0x90>)
 800ae40:	2001      	movs	r0, #1
 800ae42:	f000 fccf 	bl	800b7e4 <sail_log>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e006      	b.n	800ae58 <io_memory_tell+0x80>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60fb      	str	r3, [r7, #12]

    *offset = mem_io_buffer_info->pos;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	689a      	ldr	r2, [r3, #8]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	08015460 	.word	0x08015460
 800ae64:	080153fc 	.word	0x080153fc
 800ae68:	08015414 	.word	0x08015414
 800ae6c:	0801546c 	.word	0x0801546c
 800ae70:	08015468 	.word	0x08015468
 800ae74:	080154fc 	.word	0x080154fc

0800ae78 <io_memory_close>:
    SAIL_CHECK_PTR(stream);

    return SAIL_OK;
}

static sail_status_t io_memory_close(void *stream) {
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af02      	add	r7, sp, #8
 800ae7e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(stream);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bf0c      	ite	eq
 800ae86:	2301      	moveq	r3, #1
 800ae88:	2300      	movne	r3, #0
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d011      	beq.n	800aeb4 <io_memory_close+0x3c>
 800ae90:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <io_memory_close+0x4c>)
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	4b0c      	ldr	r3, [pc, #48]	; (800aec8 <io_memory_close+0x50>)
 800ae96:	22de      	movs	r2, #222	; 0xde
 800ae98:	490c      	ldr	r1, [pc, #48]	; (800aecc <io_memory_close+0x54>)
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	f000 fca2 	bl	800b7e4 <sail_log>
 800aea0:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <io_memory_close+0x58>)
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <io_memory_close+0x5c>)
 800aea6:	22de      	movs	r2, #222	; 0xde
 800aea8:	4908      	ldr	r1, [pc, #32]	; (800aecc <io_memory_close+0x54>)
 800aeaa:	2001      	movs	r0, #1
 800aeac:	f000 fc9a 	bl	800b7e4 <sail_log>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e003      	b.n	800aebc <io_memory_close+0x44>

    sail_free(stream);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fe15 	bl	800bae4 <sail_free>

    return SAIL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	08015460 	.word	0x08015460
 800aec8:	080153fc 	.word	0x080153fc
 800aecc:	08015414 	.word	0x08015414
 800aed0:	0801546c 	.word	0x0801546c
 800aed4:	08015468 	.word	0x08015468

0800aed8 <io_memory_eof>:

static sail_status_t io_memory_eof(void *stream, bool *result) {
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af02      	add	r7, sp, #8
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bf0c      	ite	eq
 800aee8:	2301      	moveq	r3, #1
 800aeea:	2300      	movne	r3, #0
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d011      	beq.n	800af16 <io_memory_eof+0x3e>
 800aef2:	4b1f      	ldr	r3, [pc, #124]	; (800af70 <io_memory_eof+0x98>)
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	4b1f      	ldr	r3, [pc, #124]	; (800af74 <io_memory_eof+0x9c>)
 800aef8:	22e7      	movs	r2, #231	; 0xe7
 800aefa:	491f      	ldr	r1, [pc, #124]	; (800af78 <io_memory_eof+0xa0>)
 800aefc:	2001      	movs	r0, #1
 800aefe:	f000 fc71 	bl	800b7e4 <sail_log>
 800af02:	4b1e      	ldr	r3, [pc, #120]	; (800af7c <io_memory_eof+0xa4>)
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	4b1e      	ldr	r3, [pc, #120]	; (800af80 <io_memory_eof+0xa8>)
 800af08:	22e7      	movs	r2, #231	; 0xe7
 800af0a:	491b      	ldr	r1, [pc, #108]	; (800af78 <io_memory_eof+0xa0>)
 800af0c:	2001      	movs	r0, #1
 800af0e:	f000 fc69 	bl	800b7e4 <sail_log>
 800af12:	2301      	movs	r3, #1
 800af14:	e027      	b.n	800af66 <io_memory_eof+0x8e>
    SAIL_CHECK_PTR(result);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bf0c      	ite	eq
 800af1c:	2301      	moveq	r3, #1
 800af1e:	2300      	movne	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d011      	beq.n	800af4a <io_memory_eof+0x72>
 800af26:	4b17      	ldr	r3, [pc, #92]	; (800af84 <io_memory_eof+0xac>)
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	4b12      	ldr	r3, [pc, #72]	; (800af74 <io_memory_eof+0x9c>)
 800af2c:	22e8      	movs	r2, #232	; 0xe8
 800af2e:	4912      	ldr	r1, [pc, #72]	; (800af78 <io_memory_eof+0xa0>)
 800af30:	2001      	movs	r0, #1
 800af32:	f000 fc57 	bl	800b7e4 <sail_log>
 800af36:	4b11      	ldr	r3, [pc, #68]	; (800af7c <io_memory_eof+0xa4>)
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	4b11      	ldr	r3, [pc, #68]	; (800af80 <io_memory_eof+0xa8>)
 800af3c:	22e8      	movs	r2, #232	; 0xe8
 800af3e:	490e      	ldr	r1, [pc, #56]	; (800af78 <io_memory_eof+0xa0>)
 800af40:	2001      	movs	r0, #1
 800af42:	f000 fc4f 	bl	800b7e4 <sail_log>
 800af46:	2301      	movs	r3, #1
 800af48:	e00d      	b.n	800af66 <io_memory_eof+0x8e>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	60fb      	str	r3, [r7, #12]

    *result = mem_io_buffer_info->pos >= mem_io_buffer_info->accessible_length;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	bf2c      	ite	cs
 800af5a:	2301      	movcs	r3, #1
 800af5c:	2300      	movcc	r3, #0
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	701a      	strb	r2, [r3, #0]

    return SAIL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	08015460 	.word	0x08015460
 800af74:	080153fc 	.word	0x080153fc
 800af78:	08015414 	.word	0x08015414
 800af7c:	0801546c 	.word	0x0801546c
 800af80:	08015468 	.word	0x08015468
 800af84:	08015504 	.word	0x08015504

0800af88 <sail_alloc_io_read_memory>:

/*
 * Public functions.
 */

sail_status_t sail_alloc_io_read_memory(const void *buffer, size_t length, struct sail_io **io) {
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(buffer);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	bf0c      	ite	eq
 800af9a:	2301      	moveq	r3, #1
 800af9c:	2300      	movne	r3, #0
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d011      	beq.n	800afc8 <sail_alloc_io_read_memory+0x40>
 800afa4:	4b4c      	ldr	r3, [pc, #304]	; (800b0d8 <sail_alloc_io_read_memory+0x150>)
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4b4c      	ldr	r3, [pc, #304]	; (800b0dc <sail_alloc_io_read_memory+0x154>)
 800afaa:	22f7      	movs	r2, #247	; 0xf7
 800afac:	494c      	ldr	r1, [pc, #304]	; (800b0e0 <sail_alloc_io_read_memory+0x158>)
 800afae:	2001      	movs	r0, #1
 800afb0:	f000 fc18 	bl	800b7e4 <sail_log>
 800afb4:	4b4b      	ldr	r3, [pc, #300]	; (800b0e4 <sail_alloc_io_read_memory+0x15c>)
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4b4b      	ldr	r3, [pc, #300]	; (800b0e8 <sail_alloc_io_read_memory+0x160>)
 800afba:	22f7      	movs	r2, #247	; 0xf7
 800afbc:	4948      	ldr	r1, [pc, #288]	; (800b0e0 <sail_alloc_io_read_memory+0x158>)
 800afbe:	2001      	movs	r0, #1
 800afc0:	f000 fc10 	bl	800b7e4 <sail_log>
 800afc4:	2301      	movs	r3, #1
 800afc6:	e07e      	b.n	800b0c6 <sail_alloc_io_read_memory+0x13e>
    SAIL_CHECK_PTR(io);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bf0c      	ite	eq
 800afce:	2301      	moveq	r3, #1
 800afd0:	2300      	movne	r3, #0
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d011      	beq.n	800affc <sail_alloc_io_read_memory+0x74>
 800afd8:	4b44      	ldr	r3, [pc, #272]	; (800b0ec <sail_alloc_io_read_memory+0x164>)
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4b3f      	ldr	r3, [pc, #252]	; (800b0dc <sail_alloc_io_read_memory+0x154>)
 800afde:	22f8      	movs	r2, #248	; 0xf8
 800afe0:	493f      	ldr	r1, [pc, #252]	; (800b0e0 <sail_alloc_io_read_memory+0x158>)
 800afe2:	2001      	movs	r0, #1
 800afe4:	f000 fbfe 	bl	800b7e4 <sail_log>
 800afe8:	4b3e      	ldr	r3, [pc, #248]	; (800b0e4 <sail_alloc_io_read_memory+0x15c>)
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	4b3e      	ldr	r3, [pc, #248]	; (800b0e8 <sail_alloc_io_read_memory+0x160>)
 800afee:	22f8      	movs	r2, #248	; 0xf8
 800aff0:	493b      	ldr	r1, [pc, #236]	; (800b0e0 <sail_alloc_io_read_memory+0x158>)
 800aff2:	2001      	movs	r0, #1
 800aff4:	f000 fbf6 	bl	800b7e4 <sail_log>
 800aff8:	2301      	movs	r3, #1
 800affa:	e064      	b.n	800b0c6 <sail_alloc_io_read_memory+0x13e>

    SAIL_LOG_DEBUG("Opening memory buffer of size %lu for reading", length);
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	4b3b      	ldr	r3, [pc, #236]	; (800b0f0 <sail_alloc_io_read_memory+0x168>)
 800b002:	22fa      	movs	r2, #250	; 0xfa
 800b004:	4936      	ldr	r1, [pc, #216]	; (800b0e0 <sail_alloc_io_read_memory+0x158>)
 800b006:	2005      	movs	r0, #5
 800b008:	f000 fbec 	bl	800b7e4 <sail_log>

    struct sail_io *io_local;
    SAIL_TRY(sail_alloc_io(&io_local));
 800b00c:	f107 0314 	add.w	r3, r7, #20
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fc95 	bl	800a940 <sail_alloc_io>
 800b016:	4603      	mov	r3, r0
 800b018:	83fb      	strh	r3, [r7, #30]
 800b01a:	8bfb      	ldrh	r3, [r7, #30]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bf14      	ite	ne
 800b020:	2301      	movne	r3, #1
 800b022:	2300      	moveq	r3, #0
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <sail_alloc_io_read_memory+0xa6>
 800b02a:	8bfb      	ldrh	r3, [r7, #30]
 800b02c:	e04b      	b.n	800b0c6 <sail_alloc_io_read_memory+0x13e>

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct mem_io_read_stream), &ptr),
 800b02e:	f107 0310 	add.w	r3, r7, #16
 800b032:	4619      	mov	r1, r3
 800b034:	2010      	movs	r0, #16
 800b036:	f000 fccd 	bl	800b9d4 <sail_malloc>
 800b03a:	4603      	mov	r3, r0
 800b03c:	83bb      	strh	r3, [r7, #28]
 800b03e:	8bbb      	ldrh	r3, [r7, #28]
 800b040:	2b00      	cmp	r3, #0
 800b042:	bf14      	ite	ne
 800b044:	2301      	movne	r3, #1
 800b046:	2300      	moveq	r3, #0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <sail_alloc_io_read_memory+0xd2>
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fceb 	bl	800aa2c <sail_destroy_io>
 800b056:	8bbb      	ldrh	r3, [r7, #28]
 800b058:	e035      	b.n	800b0c6 <sail_alloc_io_read_memory+0x13e>
                        /* cleanup */ sail_destroy_io(io_local));
    struct mem_io_read_stream *mem_io_read_stream = ptr;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	61bb      	str	r3, [r7, #24]

    mem_io_read_stream->mem_io_buffer_info.length            = length;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	601a      	str	r2, [r3, #0]
    mem_io_read_stream->mem_io_buffer_info.accessible_length = length;
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	605a      	str	r2, [r3, #4]
    mem_io_read_stream->mem_io_buffer_info.pos               = 0;
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	2200      	movs	r2, #0
 800b06e:	609a      	str	r2, [r3, #8]
    mem_io_read_stream->buffer                               = buffer;
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	60da      	str	r2, [r3, #12]

    io_local->id             = SAIL_MEMORY_IO_ID;
 800b076:	6979      	ldr	r1, [r7, #20]
 800b078:	a315      	add	r3, pc, #84	; (adr r3, 800b0d0 <sail_alloc_io_read_memory+0x148>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	e9c1 2300 	strd	r2, r3, [r1]
    io_local->stream         = mem_io_read_stream;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	60da      	str	r2, [r3, #12]
    io_local->tolerant_read  = io_memory_tolerant_read;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <sail_alloc_io_read_memory+0x16c>)
 800b08c:	611a      	str	r2, [r3, #16]
    io_local->strict_read    = io_memory_strict_read;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	4a19      	ldr	r2, [pc, #100]	; (800b0f8 <sail_alloc_io_read_memory+0x170>)
 800b092:	615a      	str	r2, [r3, #20]
    io_local->tolerant_write = sail_io_noop_tolerant_write;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	4a19      	ldr	r2, [pc, #100]	; (800b0fc <sail_alloc_io_read_memory+0x174>)
 800b098:	619a      	str	r2, [r3, #24]
    io_local->strict_write   = sail_io_noop_strict_write;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	4a18      	ldr	r2, [pc, #96]	; (800b100 <sail_alloc_io_read_memory+0x178>)
 800b09e:	61da      	str	r2, [r3, #28]
    io_local->seek           = io_memory_seek;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	4a18      	ldr	r2, [pc, #96]	; (800b104 <sail_alloc_io_read_memory+0x17c>)
 800b0a4:	621a      	str	r2, [r3, #32]
    io_local->tell           = io_memory_tell;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	4a17      	ldr	r2, [pc, #92]	; (800b108 <sail_alloc_io_read_memory+0x180>)
 800b0aa:	625a      	str	r2, [r3, #36]	; 0x24
    io_local->flush          = sail_io_noop_flush;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	4a17      	ldr	r2, [pc, #92]	; (800b10c <sail_alloc_io_read_memory+0x184>)
 800b0b0:	629a      	str	r2, [r3, #40]	; 0x28
    io_local->close          = io_memory_close;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	4a16      	ldr	r2, [pc, #88]	; (800b110 <sail_alloc_io_read_memory+0x188>)
 800b0b6:	62da      	str	r2, [r3, #44]	; 0x2c
    io_local->eof            = io_memory_eof;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	4a16      	ldr	r2, [pc, #88]	; (800b114 <sail_alloc_io_read_memory+0x18c>)
 800b0bc:	631a      	str	r2, [r3, #48]	; 0x30

    *io = io_local;
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	b238af93 	.word	0xb238af93
 800b0d4:	a5ea23d2 	.word	0xa5ea23d2
 800b0d8:	0801550c 	.word	0x0801550c
 800b0dc:	080153fc 	.word	0x080153fc
 800b0e0:	08015414 	.word	0x08015414
 800b0e4:	0801546c 	.word	0x0801546c
 800b0e8:	08015468 	.word	0x08015468
 800b0ec:	08015514 	.word	0x08015514
 800b0f0:	08015518 	.word	0x08015518
 800b0f4:	0800ab49 	.word	0x0800ab49
 800b0f8:	0800ac91 	.word	0x0800ac91
 800b0fc:	0800b119 	.word	0x0800b119
 800b100:	0800b14d 	.word	0x0800b14d
 800b104:	0800acf5 	.word	0x0800acf5
 800b108:	0800add9 	.word	0x0800add9
 800b10c:	0800b181 	.word	0x0800b181
 800b110:	0800ae79 	.word	0x0800ae79
 800b114:	0800aed9 	.word	0x0800aed9

0800b118 <sail_io_noop_tolerant_write>:
    (void)offset;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
}

sail_status_t sail_io_noop_tolerant_write(void *stream, const void *buf, size_t size_to_write, size_t *written_size) {
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af02      	add	r7, sp, #8
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)size_to_write;
    (void)written_size;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800b126:	4b06      	ldr	r3, [pc, #24]	; (800b140 <sail_io_noop_tolerant_write+0x28>)
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <sail_io_noop_tolerant_write+0x2c>)
 800b12c:	2249      	movs	r2, #73	; 0x49
 800b12e:	4906      	ldr	r1, [pc, #24]	; (800b148 <sail_io_noop_tolerant_write+0x30>)
 800b130:	2001      	movs	r0, #1
 800b132:	f000 fb57 	bl	800b7e4 <sail_log>
 800b136:	2311      	movs	r3, #17
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	080155c8 	.word	0x080155c8
 800b144:	08015578 	.word	0x08015578
 800b148:	0801557c 	.word	0x0801557c

0800b14c <sail_io_noop_strict_write>:

sail_status_t sail_io_noop_strict_write(void *stream, const void *buf, size_t size_to_write) {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]

    (void)stream;
    (void)buf;
    (void)size_to_write;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800b158:	4b06      	ldr	r3, [pc, #24]	; (800b174 <sail_io_noop_strict_write+0x28>)
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	4b06      	ldr	r3, [pc, #24]	; (800b178 <sail_io_noop_strict_write+0x2c>)
 800b15e:	2252      	movs	r2, #82	; 0x52
 800b160:	4906      	ldr	r1, [pc, #24]	; (800b17c <sail_io_noop_strict_write+0x30>)
 800b162:	2001      	movs	r0, #1
 800b164:	f000 fb3e 	bl	800b7e4 <sail_log>
 800b168:	2311      	movs	r3, #17
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	080155c8 	.word	0x080155c8
 800b178:	08015578 	.word	0x08015578
 800b17c:	0801557c 	.word	0x0801557c

0800b180 <sail_io_noop_flush>:

sail_status_t sail_io_noop_flush(void *stream) {
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af02      	add	r7, sp, #8
 800b186:	6078      	str	r0, [r7, #4]

    (void)stream;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800b188:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <sail_io_noop_flush+0x24>)
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <sail_io_noop_flush+0x28>)
 800b18e:	2259      	movs	r2, #89	; 0x59
 800b190:	4906      	ldr	r1, [pc, #24]	; (800b1ac <sail_io_noop_flush+0x2c>)
 800b192:	2001      	movs	r0, #1
 800b194:	f000 fb26 	bl	800b7e4 <sail_log>
 800b198:	2311      	movs	r3, #17
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	080155c8 	.word	0x080155c8
 800b1a8:	08015578 	.word	0x08015578
 800b1ac:	0801557c 	.word	0x0801557c

0800b1b0 <sail_private_alloc_linked_list_node>:
    SOFTWARE.
*/

#include "sail-common.h"

sail_status_t sail_private_alloc_linked_list_node(struct linked_list_node **node) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af02      	add	r7, sp, #8
 800b1b6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(node);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bf0c      	ite	eq
 800b1be:	2301      	moveq	r3, #1
 800b1c0:	2300      	movne	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d011      	beq.n	800b1ec <sail_private_alloc_linked_list_node+0x3c>
 800b1c8:	4b19      	ldr	r3, [pc, #100]	; (800b230 <sail_private_alloc_linked_list_node+0x80>)
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	4b19      	ldr	r3, [pc, #100]	; (800b234 <sail_private_alloc_linked_list_node+0x84>)
 800b1ce:	221e      	movs	r2, #30
 800b1d0:	4919      	ldr	r1, [pc, #100]	; (800b238 <sail_private_alloc_linked_list_node+0x88>)
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	f000 fb06 	bl	800b7e4 <sail_log>
 800b1d8:	4b18      	ldr	r3, [pc, #96]	; (800b23c <sail_private_alloc_linked_list_node+0x8c>)
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	4b18      	ldr	r3, [pc, #96]	; (800b240 <sail_private_alloc_linked_list_node+0x90>)
 800b1de:	221e      	movs	r2, #30
 800b1e0:	4915      	ldr	r1, [pc, #84]	; (800b238 <sail_private_alloc_linked_list_node+0x88>)
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	f000 fafe 	bl	800b7e4 <sail_log>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e01d      	b.n	800b228 <sail_private_alloc_linked_list_node+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct linked_list_node), &ptr));
 800b1ec:	f107 0308 	add.w	r3, r7, #8
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	2008      	movs	r0, #8
 800b1f4:	f000 fbee 	bl	800b9d4 <sail_malloc>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	81fb      	strh	r3, [r7, #14]
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bf14      	ite	ne
 800b202:	2301      	movne	r3, #1
 800b204:	2300      	moveq	r3, #0
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <sail_private_alloc_linked_list_node+0x60>
 800b20c:	89fb      	ldrh	r3, [r7, #14]
 800b20e:	e00b      	b.n	800b228 <sail_private_alloc_linked_list_node+0x78>
    *node = ptr;
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	601a      	str	r2, [r3, #0]

    (*node)->value = NULL;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
    (*node)->next  = NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2200      	movs	r2, #0
 800b224:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	08015658 	.word	0x08015658
 800b234:	080155e4 	.word	0x080155e4
 800b238:	080155fc 	.word	0x080155fc
 800b23c:	08015664 	.word	0x08015664
 800b240:	08015660 	.word	0x08015660

0800b244 <sail_private_destroy_linked_list_node>:

    return SAIL_OK;
}

void sail_private_destroy_linked_list_node(struct linked_list_node *node,
                                           linked_list_value_deallocator_t value_deallocator) {
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]

    if (node == NULL) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d008      	beq.n	800b266 <sail_private_destroy_linked_list_node+0x22>
        return;
    }

    value_deallocator(node->value);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	4610      	mov	r0, r2
 800b25c:	4798      	blx	r3
    sail_free(node);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fc40 	bl	800bae4 <sail_free>
 800b264:	e000      	b.n	800b268 <sail_private_destroy_linked_list_node+0x24>
        return;
 800b266:	bf00      	nop
}
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <sail_private_copy_linked_list_node>:

sail_status_t sail_private_copy_linked_list_node(const struct linked_list_node *source,
                                                 struct linked_list_node **target,
                                                 linked_list_value_copier_t value_copier,
                                                 linked_list_value_deallocator_t value_deallocator) {
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	; 0x28
 800b274:	af02      	add	r7, sp, #8
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(source);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	bf0c      	ite	eq
 800b284:	2301      	moveq	r3, #1
 800b286:	2300      	movne	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d011      	beq.n	800b2b2 <sail_private_copy_linked_list_node+0x42>
 800b28e:	4b30      	ldr	r3, [pc, #192]	; (800b350 <sail_private_copy_linked_list_node+0xe0>)
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4b30      	ldr	r3, [pc, #192]	; (800b354 <sail_private_copy_linked_list_node+0xe4>)
 800b294:	224b      	movs	r2, #75	; 0x4b
 800b296:	4930      	ldr	r1, [pc, #192]	; (800b358 <sail_private_copy_linked_list_node+0xe8>)
 800b298:	2001      	movs	r0, #1
 800b29a:	f000 faa3 	bl	800b7e4 <sail_log>
 800b29e:	4b2f      	ldr	r3, [pc, #188]	; (800b35c <sail_private_copy_linked_list_node+0xec>)
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	4b2f      	ldr	r3, [pc, #188]	; (800b360 <sail_private_copy_linked_list_node+0xf0>)
 800b2a4:	224b      	movs	r2, #75	; 0x4b
 800b2a6:	492c      	ldr	r1, [pc, #176]	; (800b358 <sail_private_copy_linked_list_node+0xe8>)
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	f000 fa9b 	bl	800b7e4 <sail_log>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e049      	b.n	800b346 <sail_private_copy_linked_list_node+0xd6>
    SAIL_CHECK_PTR(target);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bf0c      	ite	eq
 800b2b8:	2301      	moveq	r3, #1
 800b2ba:	2300      	movne	r3, #0
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d011      	beq.n	800b2e6 <sail_private_copy_linked_list_node+0x76>
 800b2c2:	4b28      	ldr	r3, [pc, #160]	; (800b364 <sail_private_copy_linked_list_node+0xf4>)
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	4b23      	ldr	r3, [pc, #140]	; (800b354 <sail_private_copy_linked_list_node+0xe4>)
 800b2c8:	224c      	movs	r2, #76	; 0x4c
 800b2ca:	4923      	ldr	r1, [pc, #140]	; (800b358 <sail_private_copy_linked_list_node+0xe8>)
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f000 fa89 	bl	800b7e4 <sail_log>
 800b2d2:	4b22      	ldr	r3, [pc, #136]	; (800b35c <sail_private_copy_linked_list_node+0xec>)
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	4b22      	ldr	r3, [pc, #136]	; (800b360 <sail_private_copy_linked_list_node+0xf0>)
 800b2d8:	224c      	movs	r2, #76	; 0x4c
 800b2da:	491f      	ldr	r1, [pc, #124]	; (800b358 <sail_private_copy_linked_list_node+0xe8>)
 800b2dc:	2001      	movs	r0, #1
 800b2de:	f000 fa81 	bl	800b7e4 <sail_log>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e02f      	b.n	800b346 <sail_private_copy_linked_list_node+0xd6>

    struct linked_list_node *node_local;
    SAIL_TRY(sail_private_alloc_linked_list_node(&node_local));
 800b2e6:	f107 0318 	add.w	r3, r7, #24
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff ff60 	bl	800b1b0 <sail_private_alloc_linked_list_node>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	83fb      	strh	r3, [r7, #30]
 800b2f4:	8bfb      	ldrh	r3, [r7, #30]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2301      	movne	r3, #1
 800b2fc:	2300      	moveq	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <sail_private_copy_linked_list_node+0x98>
 800b304:	8bfb      	ldrh	r3, [r7, #30]
 800b306:	e01e      	b.n	800b346 <sail_private_copy_linked_list_node+0xd6>

    void *ptr;
    SAIL_TRY_OR_CLEANUP(value_copier(source->value, &ptr),
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	f107 0114 	add.w	r1, r7, #20
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4610      	mov	r0, r2
 800b314:	4798      	blx	r3
 800b316:	4603      	mov	r3, r0
 800b318:	83bb      	strh	r3, [r7, #28]
 800b31a:	8bbb      	ldrh	r3, [r7, #28]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bf14      	ite	ne
 800b320:	2301      	movne	r3, #1
 800b322:	2300      	moveq	r3, #0
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d006      	beq.n	800b338 <sail_private_copy_linked_list_node+0xc8>
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff ff88 	bl	800b244 <sail_private_destroy_linked_list_node>
 800b334:	8bbb      	ldrh	r3, [r7, #28]
 800b336:	e006      	b.n	800b346 <sail_private_copy_linked_list_node+0xd6>
                        /* cleanup */ sail_private_destroy_linked_list_node(node_local, value_deallocator));
    node_local->value = ptr;
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	601a      	str	r2, [r3, #0]

    *target = node_local;
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	08015678 	.word	0x08015678
 800b354:	080155e4 	.word	0x080155e4
 800b358:	080155fc 	.word	0x080155fc
 800b35c:	08015664 	.word	0x08015664
 800b360:	08015660 	.word	0x08015660
 800b364:	08015680 	.word	0x08015680

0800b368 <sail_private_destroy_linked_list_node_chain>:

void sail_private_destroy_linked_list_node_chain(struct linked_list_node *node,
                                                 linked_list_value_deallocator_t value_deallocator) {
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]

    while (node != NULL) {
 800b372:	e008      	b.n	800b386 <sail_private_destroy_linked_list_node_chain+0x1e>
        struct linked_list_node *node_next = node->next;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	60fb      	str	r3, [r7, #12]

        sail_private_destroy_linked_list_node(node, value_deallocator);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff ff61 	bl	800b244 <sail_private_destroy_linked_list_node>

        node = node_next;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	607b      	str	r3, [r7, #4]
    while (node != NULL) {
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f3      	bne.n	800b374 <sail_private_destroy_linked_list_node_chain+0xc>
    }
}
 800b38c:	bf00      	nop
 800b38e:	bf00      	nop
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <sail_private_copy_linked_list_node_chain>:

sail_status_t sail_private_copy_linked_list_node_chain(const struct linked_list_node *source,
                                                       struct linked_list_node **target,
                                                       linked_list_value_copier_t value_copier,
                                                       linked_list_value_deallocator_t value_deallocator) {
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	; 0x28
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(target);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bf0c      	ite	eq
 800b3ac:	2301      	moveq	r3, #1
 800b3ae:	2300      	movne	r3, #0
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d011      	beq.n	800b3da <sail_private_copy_linked_list_node_chain+0x42>
 800b3b6:	4b2a      	ldr	r3, [pc, #168]	; (800b460 <sail_private_copy_linked_list_node_chain+0xc8>)
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	4b2a      	ldr	r3, [pc, #168]	; (800b464 <sail_private_copy_linked_list_node_chain+0xcc>)
 800b3bc:	226c      	movs	r2, #108	; 0x6c
 800b3be:	492a      	ldr	r1, [pc, #168]	; (800b468 <sail_private_copy_linked_list_node_chain+0xd0>)
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	f000 fa0f 	bl	800b7e4 <sail_log>
 800b3c6:	4b29      	ldr	r3, [pc, #164]	; (800b46c <sail_private_copy_linked_list_node_chain+0xd4>)
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4b29      	ldr	r3, [pc, #164]	; (800b470 <sail_private_copy_linked_list_node_chain+0xd8>)
 800b3cc:	226c      	movs	r2, #108	; 0x6c
 800b3ce:	4926      	ldr	r1, [pc, #152]	; (800b468 <sail_private_copy_linked_list_node_chain+0xd0>)
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	f000 fa07 	bl	800b7e4 <sail_log>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e03d      	b.n	800b456 <sail_private_copy_linked_list_node_chain+0xbe>

    if (source == NULL) {
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <sail_private_copy_linked_list_node_chain+0x52>
        *target = NULL;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e035      	b.n	800b456 <sail_private_copy_linked_list_node_chain+0xbe>
    }

    struct linked_list_node *node_local = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	61fb      	str	r3, [r7, #28]
    struct linked_list_node *linked_list_node_current = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	61bb      	str	r3, [r7, #24]

    while (source != NULL) {
 800b3f2:	e029      	b.n	800b448 <sail_private_copy_linked_list_node_chain+0xb0>
        struct linked_list_node *linked_list_node = NULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	613b      	str	r3, [r7, #16]

        SAIL_TRY_OR_CLEANUP(sail_private_copy_linked_list_node(source, &linked_list_node, value_copier, value_deallocator),
 800b3f8:	f107 0110 	add.w	r1, r7, #16
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7ff ff35 	bl	800b270 <sail_private_copy_linked_list_node>
 800b406:	4603      	mov	r3, r0
 800b408:	82fb      	strh	r3, [r7, #22]
 800b40a:	8afb      	ldrh	r3, [r7, #22]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bf14      	ite	ne
 800b410:	2301      	movne	r3, #1
 800b412:	2300      	moveq	r3, #0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <sail_private_copy_linked_list_node_chain+0x8e>
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	69f8      	ldr	r0, [r7, #28]
 800b41e:	f7ff ffa3 	bl	800b368 <sail_private_destroy_linked_list_node_chain>
 800b422:	8afb      	ldrh	r3, [r7, #22]
 800b424:	e017      	b.n	800b456 <sail_private_copy_linked_list_node_chain+0xbe>
                            /* cleanup */ sail_private_destroy_linked_list_node_chain(node_local, value_deallocator));

        if (node_local == NULL) {
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <sail_private_copy_linked_list_node_chain+0x9e>
            node_local = linked_list_node;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	61fb      	str	r3, [r7, #28]
            linked_list_node_current = node_local;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	61bb      	str	r3, [r7, #24]
 800b434:	e005      	b.n	800b442 <sail_private_copy_linked_list_node_chain+0xaa>
        } else {
            linked_list_node_current->next = linked_list_node;
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	605a      	str	r2, [r3, #4]
            linked_list_node_current = linked_list_node_current->next;
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	61bb      	str	r3, [r7, #24]
        }

        source = source->next;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	60fb      	str	r3, [r7, #12]
    while (source != NULL) {
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1d2      	bne.n	800b3f4 <sail_private_copy_linked_list_node_chain+0x5c>
    }

    *target = node_local;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	69fa      	ldr	r2, [r7, #28]
 800b452:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	08015680 	.word	0x08015680
 800b464:	080155e4 	.word	0x080155e4
 800b468:	080155fc 	.word	0x080155fc
 800b46c:	08015664 	.word	0x08015664
 800b470:	08015660 	.word	0x08015660

0800b474 <sail_alloc_load_features>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_load_features(struct sail_load_features **load_features) {
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af02      	add	r7, sp, #8
 800b47a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(load_features);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bf0c      	ite	eq
 800b482:	2301      	moveq	r3, #1
 800b484:	2300      	movne	r3, #0
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d011      	beq.n	800b4b0 <sail_alloc_load_features+0x3c>
 800b48c:	4b19      	ldr	r3, [pc, #100]	; (800b4f4 <sail_alloc_load_features+0x80>)
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4b19      	ldr	r3, [pc, #100]	; (800b4f8 <sail_alloc_load_features+0x84>)
 800b492:	2221      	movs	r2, #33	; 0x21
 800b494:	4919      	ldr	r1, [pc, #100]	; (800b4fc <sail_alloc_load_features+0x88>)
 800b496:	2001      	movs	r0, #1
 800b498:	f000 f9a4 	bl	800b7e4 <sail_log>
 800b49c:	4b18      	ldr	r3, [pc, #96]	; (800b500 <sail_alloc_load_features+0x8c>)
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	4b18      	ldr	r3, [pc, #96]	; (800b504 <sail_alloc_load_features+0x90>)
 800b4a2:	2221      	movs	r2, #33	; 0x21
 800b4a4:	4915      	ldr	r1, [pc, #84]	; (800b4fc <sail_alloc_load_features+0x88>)
 800b4a6:	2001      	movs	r0, #1
 800b4a8:	f000 f99c 	bl	800b7e4 <sail_log>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e01d      	b.n	800b4ec <sail_alloc_load_features+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_load_features), &ptr));
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	2008      	movs	r0, #8
 800b4b8:	f000 fa8c 	bl	800b9d4 <sail_malloc>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	81fb      	strh	r3, [r7, #14]
 800b4c0:	89fb      	ldrh	r3, [r7, #14]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	bf14      	ite	ne
 800b4c6:	2301      	movne	r3, #1
 800b4c8:	2300      	moveq	r3, #0
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <sail_alloc_load_features+0x60>
 800b4d0:	89fb      	ldrh	r3, [r7, #14]
 800b4d2:	e00b      	b.n	800b4ec <sail_alloc_load_features+0x78>
    *load_features = ptr;
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]

    (*load_features)->features = 0;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
    (*load_features)->tuning   = NULL;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	080156f8 	.word	0x080156f8
 800b4f8:	08015688 	.word	0x08015688
 800b4fc:	080156a0 	.word	0x080156a0
 800b500:	0801570c 	.word	0x0801570c
 800b504:	08015708 	.word	0x08015708

0800b508 <sail_destroy_load_features>:

void sail_destroy_load_features(struct sail_load_features *load_features) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]

    if (load_features == NULL) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d008      	beq.n	800b528 <sail_destroy_load_features+0x20>
        return;
    }

    sail_destroy_string_node_chain(load_features->tuning);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fb34 	bl	800cb88 <sail_destroy_string_node_chain>
    sail_free(load_features);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fadf 	bl	800bae4 <sail_free>
 800b526:	e000      	b.n	800b52a <sail_destroy_load_features+0x22>
        return;
 800b528:	bf00      	nop
}
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <sail_alloc_load_options>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_load_options(struct sail_load_options **load_options) {
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af02      	add	r7, sp, #8
 800b536:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(load_options);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bf0c      	ite	eq
 800b53e:	2301      	moveq	r3, #1
 800b540:	2300      	movne	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d011      	beq.n	800b56c <sail_alloc_load_options+0x3c>
 800b548:	4b19      	ldr	r3, [pc, #100]	; (800b5b0 <sail_alloc_load_options+0x80>)
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	4b19      	ldr	r3, [pc, #100]	; (800b5b4 <sail_alloc_load_options+0x84>)
 800b54e:	2221      	movs	r2, #33	; 0x21
 800b550:	4919      	ldr	r1, [pc, #100]	; (800b5b8 <sail_alloc_load_options+0x88>)
 800b552:	2001      	movs	r0, #1
 800b554:	f000 f946 	bl	800b7e4 <sail_log>
 800b558:	4b18      	ldr	r3, [pc, #96]	; (800b5bc <sail_alloc_load_options+0x8c>)
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <sail_alloc_load_options+0x90>)
 800b55e:	2221      	movs	r2, #33	; 0x21
 800b560:	4915      	ldr	r1, [pc, #84]	; (800b5b8 <sail_alloc_load_options+0x88>)
 800b562:	2001      	movs	r0, #1
 800b564:	f000 f93e 	bl	800b7e4 <sail_log>
 800b568:	2301      	movs	r3, #1
 800b56a:	e01d      	b.n	800b5a8 <sail_alloc_load_options+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_load_options), &ptr));
 800b56c:	f107 0308 	add.w	r3, r7, #8
 800b570:	4619      	mov	r1, r3
 800b572:	2008      	movs	r0, #8
 800b574:	f000 fa2e 	bl	800b9d4 <sail_malloc>
 800b578:	4603      	mov	r3, r0
 800b57a:	81fb      	strh	r3, [r7, #14]
 800b57c:	89fb      	ldrh	r3, [r7, #14]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	bf14      	ite	ne
 800b582:	2301      	movne	r3, #1
 800b584:	2300      	moveq	r3, #0
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <sail_alloc_load_options+0x60>
 800b58c:	89fb      	ldrh	r3, [r7, #14]
 800b58e:	e00b      	b.n	800b5a8 <sail_alloc_load_options+0x78>
    *load_options = ptr;
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	601a      	str	r2, [r3, #0]

    (*load_options)->options = 0;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
    (*load_options)->tuning  = NULL;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	08015790 	.word	0x08015790
 800b5b4:	08015720 	.word	0x08015720
 800b5b8:	08015738 	.word	0x08015738
 800b5bc:	080157a4 	.word	0x080157a4
 800b5c0:	080157a0 	.word	0x080157a0

0800b5c4 <sail_destroy_load_options>:

void sail_destroy_load_options(struct sail_load_options *load_options) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]

    if (load_options == NULL) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d008      	beq.n	800b5e4 <sail_destroy_load_options+0x20>
        return;
    }

    sail_destroy_hash_map(load_options->tuning);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fc5e 	bl	8009e98 <sail_destroy_hash_map>
    sail_free(load_options);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa81 	bl	800bae4 <sail_free>
 800b5e2:	e000      	b.n	800b5e6 <sail_destroy_load_options+0x22>
        return;
 800b5e4:	bf00      	nop
}
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <sail_alloc_load_options_from_features>:

sail_status_t sail_alloc_load_options_from_features(const struct sail_load_features *load_features, struct sail_load_options **load_options) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(load_options);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	bf0c      	ite	eq
 800b5fc:	2301      	moveq	r3, #1
 800b5fe:	2300      	movne	r3, #0
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d011      	beq.n	800b62a <sail_alloc_load_options_from_features+0x3e>
 800b606:	4b23      	ldr	r3, [pc, #140]	; (800b694 <sail_alloc_load_options_from_features+0xa8>)
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	4b23      	ldr	r3, [pc, #140]	; (800b698 <sail_alloc_load_options_from_features+0xac>)
 800b60c:	2239      	movs	r2, #57	; 0x39
 800b60e:	4923      	ldr	r1, [pc, #140]	; (800b69c <sail_alloc_load_options_from_features+0xb0>)
 800b610:	2001      	movs	r0, #1
 800b612:	f000 f8e7 	bl	800b7e4 <sail_log>
 800b616:	4b22      	ldr	r3, [pc, #136]	; (800b6a0 <sail_alloc_load_options_from_features+0xb4>)
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	4b22      	ldr	r3, [pc, #136]	; (800b6a4 <sail_alloc_load_options_from_features+0xb8>)
 800b61c:	2239      	movs	r2, #57	; 0x39
 800b61e:	491f      	ldr	r1, [pc, #124]	; (800b69c <sail_alloc_load_options_from_features+0xb0>)
 800b620:	2001      	movs	r0, #1
 800b622:	f000 f8df 	bl	800b7e4 <sail_log>
 800b626:	2301      	movs	r3, #1
 800b628:	e02f      	b.n	800b68a <sail_alloc_load_options_from_features+0x9e>

    struct sail_load_options *load_options_local;
    SAIL_TRY(sail_alloc_load_options(&load_options_local));
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff ff7e 	bl	800b530 <sail_alloc_load_options>
 800b634:	4603      	mov	r3, r0
 800b636:	81fb      	strh	r3, [r7, #14]
 800b638:	89fb      	ldrh	r3, [r7, #14]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bf14      	ite	ne
 800b63e:	2301      	movne	r3, #1
 800b640:	2300      	moveq	r3, #0
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <sail_alloc_load_options_from_features+0x60>
 800b648:	89fb      	ldrh	r3, [r7, #14]
 800b64a:	e01e      	b.n	800b68a <sail_alloc_load_options_from_features+0x9e>

    load_options_local->options = 0;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]

    if (load_features->features & SAIL_CODEC_FEATURE_META_DATA) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <sail_alloc_load_options_from_features+0x7e>
        load_options_local->options |= SAIL_OPTION_META_DATA;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f042 0201 	orr.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]
    }

    if (load_features->features & SAIL_CODEC_FEATURE_ICCP) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b672:	2b00      	cmp	r3, #0
 800b674:	d005      	beq.n	800b682 <sail_alloc_load_options_from_features+0x96>
        load_options_local->options |= SAIL_OPTION_ICCP;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f042 0204 	orr.w	r2, r2, #4
 800b680:	601a      	str	r2, [r3, #0]
    }

    *load_options = load_options_local;
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	08015790 	.word	0x08015790
 800b698:	08015720 	.word	0x08015720
 800b69c:	08015738 	.word	0x08015738
 800b6a0:	080157a4 	.word	0x080157a4
 800b6a4:	080157a0 	.word	0x080157a0

0800b6a8 <sail_copy_load_options>:

sail_status_t sail_copy_load_options(const struct sail_load_options *source, struct sail_load_options **target) {
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af02      	add	r7, sp, #8
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bf0c      	ite	eq
 800b6b8:	2301      	moveq	r3, #1
 800b6ba:	2300      	movne	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d011      	beq.n	800b6e6 <sail_copy_load_options+0x3e>
 800b6c2:	4b32      	ldr	r3, [pc, #200]	; (800b78c <sail_copy_load_options+0xe4>)
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4b32      	ldr	r3, [pc, #200]	; (800b790 <sail_copy_load_options+0xe8>)
 800b6c8:	224f      	movs	r2, #79	; 0x4f
 800b6ca:	4932      	ldr	r1, [pc, #200]	; (800b794 <sail_copy_load_options+0xec>)
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	f000 f889 	bl	800b7e4 <sail_log>
 800b6d2:	4b31      	ldr	r3, [pc, #196]	; (800b798 <sail_copy_load_options+0xf0>)
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	4b31      	ldr	r3, [pc, #196]	; (800b79c <sail_copy_load_options+0xf4>)
 800b6d8:	224f      	movs	r2, #79	; 0x4f
 800b6da:	492e      	ldr	r1, [pc, #184]	; (800b794 <sail_copy_load_options+0xec>)
 800b6dc:	2001      	movs	r0, #1
 800b6de:	f000 f881 	bl	800b7e4 <sail_log>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e04e      	b.n	800b784 <sail_copy_load_options+0xdc>
    SAIL_CHECK_PTR(target);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bf0c      	ite	eq
 800b6ec:	2301      	moveq	r3, #1
 800b6ee:	2300      	movne	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d011      	beq.n	800b71a <sail_copy_load_options+0x72>
 800b6f6:	4b2a      	ldr	r3, [pc, #168]	; (800b7a0 <sail_copy_load_options+0xf8>)
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	4b25      	ldr	r3, [pc, #148]	; (800b790 <sail_copy_load_options+0xe8>)
 800b6fc:	2250      	movs	r2, #80	; 0x50
 800b6fe:	4925      	ldr	r1, [pc, #148]	; (800b794 <sail_copy_load_options+0xec>)
 800b700:	2001      	movs	r0, #1
 800b702:	f000 f86f 	bl	800b7e4 <sail_log>
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <sail_copy_load_options+0xf0>)
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4b24      	ldr	r3, [pc, #144]	; (800b79c <sail_copy_load_options+0xf4>)
 800b70c:	2250      	movs	r2, #80	; 0x50
 800b70e:	4921      	ldr	r1, [pc, #132]	; (800b794 <sail_copy_load_options+0xec>)
 800b710:	2001      	movs	r0, #1
 800b712:	f000 f867 	bl	800b7e4 <sail_log>
 800b716:	2301      	movs	r3, #1
 800b718:	e034      	b.n	800b784 <sail_copy_load_options+0xdc>

    struct sail_load_options *target_local;
    SAIL_TRY(sail_alloc_load_options(&target_local));
 800b71a:	f107 0308 	add.w	r3, r7, #8
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff ff06 	bl	800b530 <sail_alloc_load_options>
 800b724:	4603      	mov	r3, r0
 800b726:	81fb      	strh	r3, [r7, #14]
 800b728:	89fb      	ldrh	r3, [r7, #14]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	bf14      	ite	ne
 800b72e:	2301      	movne	r3, #1
 800b730:	2300      	moveq	r3, #0
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <sail_copy_load_options+0x94>
 800b738:	89fb      	ldrh	r3, [r7, #14]
 800b73a:	e023      	b.n	800b784 <sail_copy_load_options+0xdc>

    target_local->options = source->options;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	601a      	str	r2, [r3, #0]

    if (source->tuning != NULL) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d017      	beq.n	800b77c <sail_copy_load_options+0xd4>
        SAIL_TRY_OR_CLEANUP(sail_copy_hash_map(source->tuning, &target_local->tuning),
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	3304      	adds	r3, #4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fe fbce 	bl	8009ef8 <sail_copy_hash_map>
 800b75c:	4603      	mov	r3, r0
 800b75e:	81bb      	strh	r3, [r7, #12]
 800b760:	89bb      	ldrh	r3, [r7, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bf14      	ite	ne
 800b766:	2301      	movne	r3, #1
 800b768:	2300      	moveq	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <sail_copy_load_options+0xd4>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff ff26 	bl	800b5c4 <sail_destroy_load_options>
 800b778:	89bb      	ldrh	r3, [r7, #12]
 800b77a:	e003      	b.n	800b784 <sail_copy_load_options+0xdc>
                            /* cleanup */ sail_destroy_load_options(target_local));
    }

    *target = target_local;
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	080157b8 	.word	0x080157b8
 800b790:	08015720 	.word	0x08015720
 800b794:	08015738 	.word	0x08015738
 800b798:	080157a4 	.word	0x080157a4
 800b79c:	080157a0 	.word	0x080157a0
 800b7a0:	080157c0 	.word	0x080157c0

0800b7a4 <check_ansi_colors_supported>:

static enum SailLogLevel sail_max_log_level = SAIL_LOG_LEVEL_DEBUG;

static sail_logger sail_external_logger = NULL;

static bool check_ansi_colors_supported(void) {
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0

    static SAIL_THREAD_LOCAL bool ansi_colors_supported_called = false;
    static SAIL_THREAD_LOCAL bool ansi_colors_supported = false;

    if (ansi_colors_supported_called) {
 800b7a8:	480c      	ldr	r0, [pc, #48]	; (800b7dc <check_ansi_colors_supported+0x38>)
 800b7aa:	f7f5 fd07 	bl	80011bc <__emutls_get_address>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d005      	beq.n	800b7c2 <check_ansi_colors_supported+0x1e>
        return ansi_colors_supported;
 800b7b6:	480a      	ldr	r0, [pc, #40]	; (800b7e0 <check_ansi_colors_supported+0x3c>)
 800b7b8:	f7f5 fd00 	bl	80011bc <__emutls_get_address>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	e00a      	b.n	800b7d8 <check_ansi_colors_supported+0x34>
    }

    ansi_colors_supported_called = true;
 800b7c2:	4806      	ldr	r0, [pc, #24]	; (800b7dc <check_ansi_colors_supported+0x38>)
 800b7c4:	f7f5 fcfa 	bl	80011bc <__emutls_get_address>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
            ansi_colors_supported = true;
        #endif
    }
#endif

    return ansi_colors_supported;
 800b7ce:	4804      	ldr	r0, [pc, #16]	; (800b7e0 <check_ansi_colors_supported+0x3c>)
 800b7d0:	f7f5 fcf4 	bl	80011bc <__emutls_get_address>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	781b      	ldrb	r3, [r3, #0]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20000060 	.word	0x20000060
 800b7e0:	20000050 	.word	0x20000050

0800b7e4 <sail_log>:

void sail_log(enum SailLogLevel level, const char *file, int line, const char *format, ...) {
 800b7e4:	b408      	push	{r3}
 800b7e6:	b590      	push	{r4, r7, lr}
 800b7e8:	b08c      	sub	sp, #48	; 0x30
 800b7ea:	af02      	add	r7, sp, #8
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	607a      	str	r2, [r7, #4]
 800b7f2:	73fb      	strb	r3, [r7, #15]

    /* Filter out. */
    if (level > sail_max_log_level) {
 800b7f4:	4b66      	ldr	r3, [pc, #408]	; (800b990 <sail_log+0x1ac>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	7bfa      	ldrb	r2, [r7, #15]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	f200 80c0 	bhi.w	800b980 <sail_log+0x19c>
        return;
    }

    if (sail_external_logger != NULL) {
 800b800:	4b64      	ldr	r3, [pc, #400]	; (800b994 <sail_log+0x1b0>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00c      	beq.n	800b822 <sail_log+0x3e>
        va_list args;
        va_start(args, format);
 800b808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b80c:	617b      	str	r3, [r7, #20]

        sail_external_logger(level, file, line, format, args);
 800b80e:	4b61      	ldr	r3, [pc, #388]	; (800b994 <sail_log+0x1b0>)
 800b810:	681c      	ldr	r4, [r3, #0]
 800b812:	7bf8      	ldrb	r0, [r7, #15]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	47a0      	blx	r4
 800b820:	e0af      	b.n	800b982 <sail_log+0x19e>

        va_end(args);
        return;
    }

    const char *level_string = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	627b      	str	r3, [r7, #36]	; 0x24

    switch (level) {
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	2b06      	cmp	r3, #6
 800b82a:	d823      	bhi.n	800b874 <sail_log+0x90>
 800b82c:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <sail_log+0x50>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b875 	.word	0x0800b875
 800b838:	0800b851 	.word	0x0800b851
 800b83c:	0800b857 	.word	0x0800b857
 800b840:	0800b85d 	.word	0x0800b85d
 800b844:	0800b863 	.word	0x0800b863
 800b848:	0800b869 	.word	0x0800b869
 800b84c:	0800b86f 	.word	0x0800b86f
        /* Something weird. */
        case SAIL_LOG_LEVEL_SILENCE: break;

        /* Normal log levels. */
        case SAIL_LOG_LEVEL_ERROR:   level_string = "E"; break;
 800b850:	4b51      	ldr	r3, [pc, #324]	; (800b998 <sail_log+0x1b4>)
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
 800b854:	e00e      	b.n	800b874 <sail_log+0x90>
        case SAIL_LOG_LEVEL_WARNING: level_string = "W"; break;
 800b856:	4b51      	ldr	r3, [pc, #324]	; (800b99c <sail_log+0x1b8>)
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
 800b85a:	e00b      	b.n	800b874 <sail_log+0x90>
        case SAIL_LOG_LEVEL_INFO:    level_string = "I"; break;
 800b85c:	4b50      	ldr	r3, [pc, #320]	; (800b9a0 <sail_log+0x1bc>)
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
 800b860:	e008      	b.n	800b874 <sail_log+0x90>
        case SAIL_LOG_LEVEL_MESSAGE: level_string = "M"; break;
 800b862:	4b50      	ldr	r3, [pc, #320]	; (800b9a4 <sail_log+0x1c0>)
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
 800b866:	e005      	b.n	800b874 <sail_log+0x90>
        case SAIL_LOG_LEVEL_DEBUG:   level_string = "D"; break;
 800b868:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <sail_log+0x1c4>)
 800b86a:	627b      	str	r3, [r7, #36]	; 0x24
 800b86c:	e002      	b.n	800b874 <sail_log+0x90>
        case SAIL_LOG_LEVEL_TRACE:   level_string = "T"; break;
 800b86e:	4b4f      	ldr	r3, [pc, #316]	; (800b9ac <sail_log+0x1c8>)
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
 800b872:	bf00      	nop
    }

    const bool ansi_colors_supported = check_ansi_colors_supported();
 800b874:	f7ff ff96 	bl	800b7a4 <check_ansi_colors_supported>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (ansi_colors_supported) {
 800b87e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b882:	2b00      	cmp	r3, #0
 800b884:	d041      	beq.n	800b90a <sail_log+0x126>
        switch (level) {
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	2b06      	cmp	r3, #6
 800b88a:	d83f      	bhi.n	800b90c <sail_log+0x128>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <sail_log+0xb0>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b90d 	.word	0x0800b90d
 800b898:	0800b8b1 	.word	0x0800b8b1
 800b89c:	0800b8c3 	.word	0x0800b8c3
 800b8a0:	0800b8d5 	.word	0x0800b8d5
 800b8a4:	0800b90d 	.word	0x0800b90d
 800b8a8:	0800b8e7 	.word	0x0800b8e7
 800b8ac:	0800b8f9 	.word	0x0800b8f9
            case SAIL_LOG_LEVEL_SILENCE: break;

            case SAIL_LOG_LEVEL_ERROR:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_RED);    break;
 800b8b0:	4b3f      	ldr	r3, [pc, #252]	; (800b9b0 <sail_log+0x1cc>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	2207      	movs	r2, #7
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	483e      	ldr	r0, [pc, #248]	; (800b9b4 <sail_log+0x1d0>)
 800b8bc:	f004 f868 	bl	800f990 <fwrite>
 800b8c0:	e024      	b.n	800b90c <sail_log+0x128>
            case SAIL_LOG_LEVEL_WARNING: fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_YELLOW); break;
 800b8c2:	4b3b      	ldr	r3, [pc, #236]	; (800b9b0 <sail_log+0x1cc>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	2207      	movs	r2, #7
 800b8ca:	2101      	movs	r1, #1
 800b8cc:	483a      	ldr	r0, [pc, #232]	; (800b9b8 <sail_log+0x1d4>)
 800b8ce:	f004 f85f 	bl	800f990 <fwrite>
 800b8d2:	e01b      	b.n	800b90c <sail_log+0x128>
            case SAIL_LOG_LEVEL_INFO:    fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_CYAN);   break;
 800b8d4:	4b36      	ldr	r3, [pc, #216]	; (800b9b0 <sail_log+0x1cc>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2207      	movs	r2, #7
 800b8dc:	2101      	movs	r1, #1
 800b8de:	4837      	ldr	r0, [pc, #220]	; (800b9bc <sail_log+0x1d8>)
 800b8e0:	f004 f856 	bl	800f990 <fwrite>
 800b8e4:	e012      	b.n	800b90c <sail_log+0x128>
            case SAIL_LOG_LEVEL_MESSAGE:                                                       break;
            case SAIL_LOG_LEVEL_DEBUG:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_BLUE);   break;
 800b8e6:	4b32      	ldr	r3, [pc, #200]	; (800b9b0 <sail_log+0x1cc>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	2207      	movs	r2, #7
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	4833      	ldr	r0, [pc, #204]	; (800b9c0 <sail_log+0x1dc>)
 800b8f2:	f004 f84d 	bl	800f990 <fwrite>
 800b8f6:	e009      	b.n	800b90c <sail_log+0x128>
            case SAIL_LOG_LEVEL_TRACE:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_WHITE);  break;
 800b8f8:	4b2d      	ldr	r3, [pc, #180]	; (800b9b0 <sail_log+0x1cc>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	2207      	movs	r2, #7
 800b900:	2101      	movs	r1, #1
 800b902:	4830      	ldr	r0, [pc, #192]	; (800b9c4 <sail_log+0x1e0>)
 800b904:	f004 f844 	bl	800f990 <fwrite>
 800b908:	e000      	b.n	800b90c <sail_log+0x128>
        }
    }
 800b90a:	bf00      	nop

    /* Print log level. */
    va_list args;
    va_start(args, format);
 800b90c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b910:	61bb      	str	r3, [r7, #24]

    fprintf(SAIL_LOG_FPTR, "SAIL: [%s] ", level_string);
 800b912:	4b27      	ldr	r3, [pc, #156]	; (800b9b0 <sail_log+0x1cc>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91a:	492b      	ldr	r1, [pc, #172]	; (800b9c8 <sail_log+0x1e4>)
 800b91c:	4618      	mov	r0, r3
 800b91e:	f003 ff65 	bl	800f7ec <fiprintf>

    /* Print file and line. */
#ifdef SAIL_WIN32
    const char *name = strrchr(file, '\\');
#else
    const char *name = strrchr(file, '/');
 800b922:	212f      	movs	r1, #47	; 0x2f
 800b924:	68b8      	ldr	r0, [r7, #8]
 800b926:	f005 f98c 	bl	8010c42 <strrchr>
 800b92a:	61f8      	str	r0, [r7, #28]
#endif

    fprintf(SAIL_LOG_FPTR, "[%s:%d] ", name == NULL ? file : name+1, line);
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <sail_log+0x1cc>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68d8      	ldr	r0, [r3, #12]
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <sail_log+0x15a>
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	e000      	b.n	800b940 <sail_log+0x15c>
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4922      	ldr	r1, [pc, #136]	; (800b9cc <sail_log+0x1e8>)
 800b944:	f003 ff52 	bl	800f7ec <fiprintf>

    /* Print the rest of arguments. */
    vfprintf(SAIL_LOG_FPTR, format, args);
 800b948:	4b19      	ldr	r3, [pc, #100]	; (800b9b0 <sail_log+0x1cc>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b952:	4618      	mov	r0, r3
 800b954:	f004 fb3c 	bl	800ffd0 <vfiprintf>

    if (ansi_colors_supported) {
 800b958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d007      	beq.n	800b970 <sail_log+0x18c>
        fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_RESET);
 800b960:	4b13      	ldr	r3, [pc, #76]	; (800b9b0 <sail_log+0x1cc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	2204      	movs	r2, #4
 800b968:	2101      	movs	r1, #1
 800b96a:	4819      	ldr	r0, [pc, #100]	; (800b9d0 <sail_log+0x1ec>)
 800b96c:	f004 f810 	bl	800f990 <fwrite>
    }

    fprintf(SAIL_LOG_FPTR, "\n");
 800b970:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <sail_log+0x1cc>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	4619      	mov	r1, r3
 800b978:	200a      	movs	r0, #10
 800b97a:	f003 ff81 	bl	800f880 <fputc>
 800b97e:	e000      	b.n	800b982 <sail_log+0x19e>
        return;
 800b980:	bf00      	nop

    va_end(args);
}
 800b982:	3728      	adds	r7, #40	; 0x28
 800b984:	46bd      	mov	sp, r7
 800b986:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b98a:	b001      	add	sp, #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	2000004d 	.word	0x2000004d
 800b994:	2000358c 	.word	0x2000358c
 800b998:	080157c8 	.word	0x080157c8
 800b99c:	080157cc 	.word	0x080157cc
 800b9a0:	080157d0 	.word	0x080157d0
 800b9a4:	080157d4 	.word	0x080157d4
 800b9a8:	080157d8 	.word	0x080157d8
 800b9ac:	080157dc 	.word	0x080157dc
 800b9b0:	20000074 	.word	0x20000074
 800b9b4:	080157e0 	.word	0x080157e0
 800b9b8:	080157e8 	.word	0x080157e8
 800b9bc:	080157f0 	.word	0x080157f0
 800b9c0:	080157f8 	.word	0x080157f8
 800b9c4:	08015800 	.word	0x08015800
 800b9c8:	08015808 	.word	0x08015808
 800b9cc:	08015814 	.word	0x08015814
 800b9d0:	08015820 	.word	0x08015820

0800b9d4 <sail_malloc>:
#include "tx_api.h"
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_malloc(size_t size, void **ptr) {
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]

	UINT ret = TX_SUCCESS;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
	TX_BYTE_POOL *sail_pool = (TX_BYTE_POOL*)ptr;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	60bb      	str	r3, [r7, #8]
    SAIL_CHECK_PTR(ptr);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf0c      	ite	eq
 800b9ec:	2301      	moveq	r3, #1
 800b9ee:	2300      	movne	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d011      	beq.n	800ba1a <sail_malloc+0x46>
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <sail_malloc+0x6c>)
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <sail_malloc+0x70>)
 800b9fc:	2224      	movs	r2, #36	; 0x24
 800b9fe:	4912      	ldr	r1, [pc, #72]	; (800ba48 <sail_malloc+0x74>)
 800ba00:	2001      	movs	r0, #1
 800ba02:	f7ff feef 	bl	800b7e4 <sail_log>
 800ba06:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <sail_malloc+0x78>)
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <sail_malloc+0x7c>)
 800ba0c:	2224      	movs	r2, #36	; 0x24
 800ba0e:	490e      	ldr	r1, [pc, #56]	; (800ba48 <sail_malloc+0x74>)
 800ba10:	2001      	movs	r0, #1
 800ba12:	f7ff fee7 	bl	800b7e4 <sail_log>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e00e      	b.n	800ba38 <sail_malloc+0x64>

    //tx_byte_allocate(byte_pool, (VOID **) &pointer, APP_STACK_SIZE, TX_NO_WAIT)
    //void *ptr_local = tx_byte_allocate(&sail_pool , ptr, size, TX_NO_WAIT);

    if (tx_byte_allocate(sail_pool, (VOID **) &ptr, size, TX_NO_WAIT) != TX_SUCCESS)
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	68b8      	ldr	r0, [r7, #8]
 800ba22:	f003 fb19 	bl	800f058 <_txe_byte_allocate>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <sail_malloc+0x5c>
    {
      ret = TX_POOL_ERROR;
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	60fb      	str	r3, [r7, #12]

   /* if (ptr_local == NULL) {
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
    }*/

    *ptr = (void *)ret;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	08015890 	.word	0x08015890
 800ba44:	08015828 	.word	0x08015828
 800ba48:	08015840 	.word	0x08015840
 800ba4c:	08015898 	.word	0x08015898
 800ba50:	08015894 	.word	0x08015894

0800ba54 <sail_realloc>:

sail_status_t sail_realloc(size_t size, void **ptr) {
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(ptr);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bf0c      	ite	eq
 800ba64:	2301      	moveq	r3, #1
 800ba66:	2300      	movne	r3, #0
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d011      	beq.n	800ba92 <sail_realloc+0x3e>
 800ba6e:	4b17      	ldr	r3, [pc, #92]	; (800bacc <sail_realloc+0x78>)
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	4b17      	ldr	r3, [pc, #92]	; (800bad0 <sail_realloc+0x7c>)
 800ba74:	2239      	movs	r2, #57	; 0x39
 800ba76:	4917      	ldr	r1, [pc, #92]	; (800bad4 <sail_realloc+0x80>)
 800ba78:	2001      	movs	r0, #1
 800ba7a:	f7ff feb3 	bl	800b7e4 <sail_log>
 800ba7e:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <sail_realloc+0x84>)
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	4b16      	ldr	r3, [pc, #88]	; (800badc <sail_realloc+0x88>)
 800ba84:	2239      	movs	r2, #57	; 0x39
 800ba86:	4913      	ldr	r1, [pc, #76]	; (800bad4 <sail_realloc+0x80>)
 800ba88:	2001      	movs	r0, #1
 800ba8a:	f7ff feab 	bl	800b7e4 <sail_log>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e017      	b.n	800bac2 <sail_realloc+0x6e>

    void *ptr_local = realloc(*ptr, size);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f004 fe07 	bl	80106ac <realloc>
 800ba9e:	60f8      	str	r0, [r7, #12]

    if (ptr_local == NULL) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <sail_realloc+0x66>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 800baa6:	4b0e      	ldr	r3, [pc, #56]	; (800bae0 <sail_realloc+0x8c>)
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	4b0c      	ldr	r3, [pc, #48]	; (800badc <sail_realloc+0x88>)
 800baac:	223e      	movs	r2, #62	; 0x3e
 800baae:	4909      	ldr	r1, [pc, #36]	; (800bad4 <sail_realloc+0x80>)
 800bab0:	2001      	movs	r0, #1
 800bab2:	f7ff fe97 	bl	800b7e4 <sail_log>
 800bab6:	2302      	movs	r3, #2
 800bab8:	e003      	b.n	800bac2 <sail_realloc+0x6e>
    }

    *ptr = ptr_local;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	08015890 	.word	0x08015890
 800bad0:	08015828 	.word	0x08015828
 800bad4:	08015840 	.word	0x08015840
 800bad8:	08015898 	.word	0x08015898
 800badc:	08015894 	.word	0x08015894
 800bae0:	080158ac 	.word	0x080158ac

0800bae4 <sail_free>:
    *ptr = ptr_local;

    return SAIL_OK;
}

void sail_free(void *ptr) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]

    free(ptr);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f003 fff1 	bl	800fad4 <free>
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <sail_destroy_meta_data>:
    *meta_data = meta_data_local;

    return SAIL_OK;
}

void sail_destroy_meta_data(struct sail_meta_data *meta_data) {
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]

    if (meta_data == NULL) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00d      	beq.n	800bb24 <sail_destroy_meta_data+0x2a>
        return;
    }

    sail_free(meta_data->key_unknown);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff ffe9 	bl	800bae4 <sail_free>
    sail_destroy_variant(meta_data->value);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 fe98 	bl	800d84c <sail_destroy_variant>
    sail_free(meta_data);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ffe1 	bl	800bae4 <sail_free>
 800bb22:	e000      	b.n	800bb26 <sail_destroy_meta_data+0x2c>
        return;
 800bb24:	bf00      	nop
}
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <sail_destroy_meta_data_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_destroy_meta_data));

    return SAIL_OK;
}

void sail_destroy_meta_data_node_chain(struct sail_meta_data_node *node) {
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 800bb34:	4903      	ldr	r1, [pc, #12]	; (800bb44 <sail_destroy_meta_data_node_chain+0x18>)
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fc16 	bl	800b368 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_destroy_meta_data);
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	0800bafb 	.word	0x0800bafb

0800bb48 <sail_alloc_palette>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_palette(struct sail_palette **palette) {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(palette);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2300      	movne	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d011      	beq.n	800bb84 <sail_alloc_palette+0x3c>
 800bb60:	4b1b      	ldr	r3, [pc, #108]	; (800bbd0 <sail_alloc_palette+0x88>)
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	4b1b      	ldr	r3, [pc, #108]	; (800bbd4 <sail_alloc_palette+0x8c>)
 800bb66:	2222      	movs	r2, #34	; 0x22
 800bb68:	491b      	ldr	r1, [pc, #108]	; (800bbd8 <sail_alloc_palette+0x90>)
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	f7ff fe3a 	bl	800b7e4 <sail_log>
 800bb70:	4b1a      	ldr	r3, [pc, #104]	; (800bbdc <sail_alloc_palette+0x94>)
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	4b1a      	ldr	r3, [pc, #104]	; (800bbe0 <sail_alloc_palette+0x98>)
 800bb76:	2222      	movs	r2, #34	; 0x22
 800bb78:	4917      	ldr	r1, [pc, #92]	; (800bbd8 <sail_alloc_palette+0x90>)
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	f7ff fe32 	bl	800b7e4 <sail_log>
 800bb80:	2301      	movs	r3, #1
 800bb82:	e021      	b.n	800bbc8 <sail_alloc_palette+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_palette), &ptr));
 800bb84:	f107 0308 	add.w	r3, r7, #8
 800bb88:	4619      	mov	r1, r3
 800bb8a:	200c      	movs	r0, #12
 800bb8c:	f7ff ff22 	bl	800b9d4 <sail_malloc>
 800bb90:	4603      	mov	r3, r0
 800bb92:	81fb      	strh	r3, [r7, #14]
 800bb94:	89fb      	ldrh	r3, [r7, #14]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bf14      	ite	ne
 800bb9a:	2301      	movne	r3, #1
 800bb9c:	2300      	moveq	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <sail_alloc_palette+0x60>
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	e00f      	b.n	800bbc8 <sail_alloc_palette+0x80>
    *palette = ptr;
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	601a      	str	r2, [r3, #0]

    (*palette)->pixel_format = SAIL_PIXEL_FORMAT_UNKNOWN;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	701a      	strb	r2, [r3, #0]
    (*palette)->data         = NULL;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
    (*palette)->color_count  = 0;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	08015938 	.word	0x08015938
 800bbd4:	080158cc 	.word	0x080158cc
 800bbd8:	080158e4 	.word	0x080158e4
 800bbdc:	08015944 	.word	0x08015944
 800bbe0:	08015940 	.word	0x08015940

0800bbe4 <sail_destroy_palette>:

void sail_destroy_palette(struct sail_palette *palette) {
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]

    if (palette == NULL) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d008      	beq.n	800bc04 <sail_destroy_palette+0x20>
        return;
    }

    sail_free(palette->data);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff ff74 	bl	800bae4 <sail_free>
    sail_free(palette);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff ff71 	bl	800bae4 <sail_free>
 800bc02:	e000      	b.n	800bc06 <sail_destroy_palette+0x22>
        return;
 800bc04:	bf00      	nop
}
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <sail_alloc_palette_for_data>:
    *target_palette = palette_local;

    return SAIL_OK;
}

sail_status_t sail_alloc_palette_for_data(enum SailPixelFormat pixel_format, unsigned color_count, struct sail_palette **palette) {
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08c      	sub	sp, #48	; 0x30
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	4603      	mov	r3, r0
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	73fb      	strb	r3, [r7, #15]

    SAIL_CHECK_PTR(palette);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	bf0c      	ite	eq
 800bc20:	2301      	moveq	r3, #1
 800bc22:	2300      	movne	r3, #0
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d011      	beq.n	800bc4e <sail_alloc_palette_for_data+0x42>
 800bc2a:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <sail_alloc_palette_for_data+0xe4>)
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	4b31      	ldr	r3, [pc, #196]	; (800bcf4 <sail_alloc_palette_for_data+0xe8>)
 800bc30:	2256      	movs	r2, #86	; 0x56
 800bc32:	4931      	ldr	r1, [pc, #196]	; (800bcf8 <sail_alloc_palette_for_data+0xec>)
 800bc34:	2001      	movs	r0, #1
 800bc36:	f7ff fdd5 	bl	800b7e4 <sail_log>
 800bc3a:	4b30      	ldr	r3, [pc, #192]	; (800bcfc <sail_alloc_palette_for_data+0xf0>)
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	4b30      	ldr	r3, [pc, #192]	; (800bd00 <sail_alloc_palette_for_data+0xf4>)
 800bc40:	2256      	movs	r2, #86	; 0x56
 800bc42:	492d      	ldr	r1, [pc, #180]	; (800bcf8 <sail_alloc_palette_for_data+0xec>)
 800bc44:	2001      	movs	r0, #1
 800bc46:	f7ff fdcd 	bl	800b7e4 <sail_log>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e04b      	b.n	800bce6 <sail_alloc_palette_for_data+0xda>

    struct sail_palette *palette_local;
    SAIL_TRY(sail_alloc_palette(&palette_local));
 800bc4e:	f107 031c 	add.w	r3, r7, #28
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff ff78 	bl	800bb48 <sail_alloc_palette>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bc5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	bf14      	ite	ne
 800bc62:	2301      	movne	r3, #1
 800bc64:	2300      	moveq	r3, #0
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <sail_alloc_palette_for_data+0x64>
 800bc6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc6e:	e03a      	b.n	800bce6 <sail_alloc_palette_for_data+0xda>

    palette_local->pixel_format = pixel_format;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	7bfa      	ldrb	r2, [r7, #15]
 800bc74:	701a      	strb	r2, [r3, #0]
    palette_local->color_count = color_count;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	609a      	str	r2, [r3, #8]

    unsigned palette_size;
    SAIL_TRY_OR_CLEANUP(sail_bytes_per_line(color_count, pixel_format, &palette_size),
 800bc7c:	f107 0218 	add.w	r2, r7, #24
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	4619      	mov	r1, r3
 800bc84:	68b8      	ldr	r0, [r7, #8]
 800bc86:	f001 fb85 	bl	800d394 <sail_bytes_per_line>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bc8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bf14      	ite	ne
 800bc94:	2301      	movne	r3, #1
 800bc96:	2300      	moveq	r3, #0
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d005      	beq.n	800bcaa <sail_alloc_palette_for_data+0x9e>
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff ff9f 	bl	800bbe4 <sail_destroy_palette>
 800bca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bca8:	e01d      	b.n	800bce6 <sail_alloc_palette_for_data+0xda>
                        /* cleanup */ sail_destroy_palette(palette_local));

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(palette_size, &ptr),
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	f107 0214 	add.w	r2, r7, #20
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7ff fe8e 	bl	800b9d4 <sail_malloc>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	847b      	strh	r3, [r7, #34]	; 0x22
 800bcbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bf14      	ite	ne
 800bcc2:	2301      	movne	r3, #1
 800bcc4:	2300      	moveq	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <sail_alloc_palette_for_data+0xcc>
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7ff ff88 	bl	800bbe4 <sail_destroy_palette>
 800bcd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcd6:	e006      	b.n	800bce6 <sail_alloc_palette_for_data+0xda>
                        /* cleanup */ sail_destroy_palette(palette_local));
    palette_local->data = ptr;
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	605a      	str	r2, [r3, #4]

    *palette = palette_local;
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3728      	adds	r7, #40	; 0x28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	08015938 	.word	0x08015938
 800bcf4:	080158cc 	.word	0x080158cc
 800bcf8:	080158e4 	.word	0x080158e4
 800bcfc:	08015944 	.word	0x08015944
 800bd00:	08015940 	.word	0x08015940

0800bd04 <sail_read_pixel3_uint8>:

#include <string.h>

#include "sail-common.h"

sail_status_t sail_read_pixel3_uint8(struct sail_io *io, struct sail_pixel3_uint8 *pixel) {
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bf0c      	ite	eq
 800bd14:	2301      	moveq	r3, #1
 800bd16:	2300      	movne	r3, #0
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d011      	beq.n	800bd42 <sail_read_pixel3_uint8+0x3e>
 800bd1e:	4b27      	ldr	r3, [pc, #156]	; (800bdbc <sail_read_pixel3_uint8+0xb8>)
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4b27      	ldr	r3, [pc, #156]	; (800bdc0 <sail_read_pixel3_uint8+0xbc>)
 800bd24:	2220      	movs	r2, #32
 800bd26:	4927      	ldr	r1, [pc, #156]	; (800bdc4 <sail_read_pixel3_uint8+0xc0>)
 800bd28:	2001      	movs	r0, #1
 800bd2a:	f7ff fd5b 	bl	800b7e4 <sail_log>
 800bd2e:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <sail_read_pixel3_uint8+0xc4>)
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <sail_read_pixel3_uint8+0xc8>)
 800bd34:	2220      	movs	r2, #32
 800bd36:	4923      	ldr	r1, [pc, #140]	; (800bdc4 <sail_read_pixel3_uint8+0xc0>)
 800bd38:	2001      	movs	r0, #1
 800bd3a:	f7ff fd53 	bl	800b7e4 <sail_log>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e037      	b.n	800bdb2 <sail_read_pixel3_uint8+0xae>
    SAIL_CHECK_PTR(pixel);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	bf0c      	ite	eq
 800bd48:	2301      	moveq	r3, #1
 800bd4a:	2300      	movne	r3, #0
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d011      	beq.n	800bd76 <sail_read_pixel3_uint8+0x72>
 800bd52:	4b1f      	ldr	r3, [pc, #124]	; (800bdd0 <sail_read_pixel3_uint8+0xcc>)
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <sail_read_pixel3_uint8+0xbc>)
 800bd58:	2221      	movs	r2, #33	; 0x21
 800bd5a:	491a      	ldr	r1, [pc, #104]	; (800bdc4 <sail_read_pixel3_uint8+0xc0>)
 800bd5c:	2001      	movs	r0, #1
 800bd5e:	f7ff fd41 	bl	800b7e4 <sail_log>
 800bd62:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <sail_read_pixel3_uint8+0xc4>)
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	4b19      	ldr	r3, [pc, #100]	; (800bdcc <sail_read_pixel3_uint8+0xc8>)
 800bd68:	2221      	movs	r2, #33	; 0x21
 800bd6a:	4916      	ldr	r1, [pc, #88]	; (800bdc4 <sail_read_pixel3_uint8+0xc0>)
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	f7ff fd39 	bl	800b7e4 <sail_log>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e01d      	b.n	800bdb2 <sail_read_pixel3_uint8+0xae>

    uint8_t a[3];

    SAIL_TRY(io->strict_read(io->stream, a, sizeof(a)));
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	68d0      	ldr	r0, [r2, #12]
 800bd7e:	f107 0108 	add.w	r1, r7, #8
 800bd82:	2203      	movs	r2, #3
 800bd84:	4798      	blx	r3
 800bd86:	4603      	mov	r3, r0
 800bd88:	81fb      	strh	r3, [r7, #14]
 800bd8a:	89fb      	ldrh	r3, [r7, #14]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bf14      	ite	ne
 800bd90:	2301      	movne	r3, #1
 800bd92:	2300      	moveq	r3, #0
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <sail_read_pixel3_uint8+0x9a>
 800bd9a:	89fb      	ldrh	r3, [r7, #14]
 800bd9c:	e009      	b.n	800bdb2 <sail_read_pixel3_uint8+0xae>

    pixel->component1 = a[0];
 800bd9e:	7a3a      	ldrb	r2, [r7, #8]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	701a      	strb	r2, [r3, #0]
    pixel->component2 = a[1];
 800bda4:	7a7a      	ldrb	r2, [r7, #9]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	705a      	strb	r2, [r3, #1]
    pixel->component3 = a[2];
 800bdaa:	7aba      	ldrb	r2, [r7, #10]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	709a      	strb	r2, [r3, #2]

    return SAIL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	080159e0 	.word	0x080159e0
 800bdc0:	08015978 	.word	0x08015978
 800bdc4:	08015990 	.word	0x08015990
 800bdc8:	080159e8 	.word	0x080159e8
 800bdcc:	080159e4 	.word	0x080159e4
 800bdd0:	080159fc 	.word	0x080159fc

0800bdd4 <sail_read_pixel4_uint8>:

sail_status_t sail_read_pixel4_uint8(struct sail_io *io, struct sail_pixel4_uint8 *pixel) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bf0c      	ite	eq
 800bde4:	2301      	moveq	r3, #1
 800bde6:	2300      	movne	r3, #0
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d011      	beq.n	800be12 <sail_read_pixel4_uint8+0x3e>
 800bdee:	4b28      	ldr	r3, [pc, #160]	; (800be90 <sail_read_pixel4_uint8+0xbc>)
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	4b28      	ldr	r3, [pc, #160]	; (800be94 <sail_read_pixel4_uint8+0xc0>)
 800bdf4:	2230      	movs	r2, #48	; 0x30
 800bdf6:	4928      	ldr	r1, [pc, #160]	; (800be98 <sail_read_pixel4_uint8+0xc4>)
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	f7ff fcf3 	bl	800b7e4 <sail_log>
 800bdfe:	4b27      	ldr	r3, [pc, #156]	; (800be9c <sail_read_pixel4_uint8+0xc8>)
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	4b27      	ldr	r3, [pc, #156]	; (800bea0 <sail_read_pixel4_uint8+0xcc>)
 800be04:	2230      	movs	r2, #48	; 0x30
 800be06:	4924      	ldr	r1, [pc, #144]	; (800be98 <sail_read_pixel4_uint8+0xc4>)
 800be08:	2001      	movs	r0, #1
 800be0a:	f7ff fceb 	bl	800b7e4 <sail_log>
 800be0e:	2301      	movs	r3, #1
 800be10:	e03a      	b.n	800be88 <sail_read_pixel4_uint8+0xb4>
    SAIL_CHECK_PTR(pixel);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	bf0c      	ite	eq
 800be18:	2301      	moveq	r3, #1
 800be1a:	2300      	movne	r3, #0
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d011      	beq.n	800be46 <sail_read_pixel4_uint8+0x72>
 800be22:	4b20      	ldr	r3, [pc, #128]	; (800bea4 <sail_read_pixel4_uint8+0xd0>)
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4b1b      	ldr	r3, [pc, #108]	; (800be94 <sail_read_pixel4_uint8+0xc0>)
 800be28:	2231      	movs	r2, #49	; 0x31
 800be2a:	491b      	ldr	r1, [pc, #108]	; (800be98 <sail_read_pixel4_uint8+0xc4>)
 800be2c:	2001      	movs	r0, #1
 800be2e:	f7ff fcd9 	bl	800b7e4 <sail_log>
 800be32:	4b1a      	ldr	r3, [pc, #104]	; (800be9c <sail_read_pixel4_uint8+0xc8>)
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <sail_read_pixel4_uint8+0xcc>)
 800be38:	2231      	movs	r2, #49	; 0x31
 800be3a:	4917      	ldr	r1, [pc, #92]	; (800be98 <sail_read_pixel4_uint8+0xc4>)
 800be3c:	2001      	movs	r0, #1
 800be3e:	f7ff fcd1 	bl	800b7e4 <sail_log>
 800be42:	2301      	movs	r3, #1
 800be44:	e020      	b.n	800be88 <sail_read_pixel4_uint8+0xb4>

    uint8_t a[4];

    SAIL_TRY(io->strict_read(io->stream, a, sizeof(a)));
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	68d0      	ldr	r0, [r2, #12]
 800be4e:	f107 0108 	add.w	r1, r7, #8
 800be52:	2204      	movs	r2, #4
 800be54:	4798      	blx	r3
 800be56:	4603      	mov	r3, r0
 800be58:	81fb      	strh	r3, [r7, #14]
 800be5a:	89fb      	ldrh	r3, [r7, #14]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bf14      	ite	ne
 800be60:	2301      	movne	r3, #1
 800be62:	2300      	moveq	r3, #0
 800be64:	b2db      	uxtb	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <sail_read_pixel4_uint8+0x9a>
 800be6a:	89fb      	ldrh	r3, [r7, #14]
 800be6c:	e00c      	b.n	800be88 <sail_read_pixel4_uint8+0xb4>

    pixel->component1 = a[0];
 800be6e:	7a3a      	ldrb	r2, [r7, #8]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	701a      	strb	r2, [r3, #0]
    pixel->component2 = a[1];
 800be74:	7a7a      	ldrb	r2, [r7, #9]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	705a      	strb	r2, [r3, #1]
    pixel->component3 = a[2];
 800be7a:	7aba      	ldrb	r2, [r7, #10]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	709a      	strb	r2, [r3, #2]
    pixel->component4 = a[3];
 800be80:	7afa      	ldrb	r2, [r7, #11]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	70da      	strb	r2, [r3, #3]

    return SAIL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	080159e0 	.word	0x080159e0
 800be94:	08015978 	.word	0x08015978
 800be98:	08015990 	.word	0x08015990
 800be9c:	080159e8 	.word	0x080159e8
 800bea0:	080159e4 	.word	0x080159e4
 800bea4:	080159fc 	.word	0x080159fc

0800bea8 <sail_alloc_resolution_from_data>:
    SAIL_TRY(sail_alloc_resolution_from_data(SAIL_RESOLUTION_UNIT_UNKNOWN, 0, 0, resolution));

    return SAIL_OK;
}

sail_status_t sail_alloc_resolution_from_data(enum SailResolutionUnit unit, double x, double y, struct sail_resolution **resolution) {
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af02      	add	r7, sp, #8
 800beae:	4603      	mov	r3, r0
 800beb0:	ed87 0b02 	vstr	d0, [r7, #8]
 800beb4:	ed87 1b00 	vstr	d1, [r7]
 800beb8:	6139      	str	r1, [r7, #16]
 800beba:	75fb      	strb	r3, [r7, #23]

    SAIL_CHECK_PTR(resolution);
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	bf0c      	ite	eq
 800bec2:	2301      	moveq	r3, #1
 800bec4:	2300      	movne	r3, #0
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d011      	beq.n	800bef0 <sail_alloc_resolution_from_data+0x48>
 800becc:	4b1d      	ldr	r3, [pc, #116]	; (800bf44 <sail_alloc_resolution_from_data+0x9c>)
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	4b1d      	ldr	r3, [pc, #116]	; (800bf48 <sail_alloc_resolution_from_data+0xa0>)
 800bed2:	2228      	movs	r2, #40	; 0x28
 800bed4:	491d      	ldr	r1, [pc, #116]	; (800bf4c <sail_alloc_resolution_from_data+0xa4>)
 800bed6:	2001      	movs	r0, #1
 800bed8:	f7ff fc84 	bl	800b7e4 <sail_log>
 800bedc:	4b1c      	ldr	r3, [pc, #112]	; (800bf50 <sail_alloc_resolution_from_data+0xa8>)
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	4b1c      	ldr	r3, [pc, #112]	; (800bf54 <sail_alloc_resolution_from_data+0xac>)
 800bee2:	2228      	movs	r2, #40	; 0x28
 800bee4:	4919      	ldr	r1, [pc, #100]	; (800bf4c <sail_alloc_resolution_from_data+0xa4>)
 800bee6:	2001      	movs	r0, #1
 800bee8:	f7ff fc7c 	bl	800b7e4 <sail_log>
 800beec:	2301      	movs	r3, #1
 800beee:	e025      	b.n	800bf3c <sail_alloc_resolution_from_data+0x94>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_resolution), &ptr));
 800bef0:	f107 0318 	add.w	r3, r7, #24
 800bef4:	4619      	mov	r1, r3
 800bef6:	2018      	movs	r0, #24
 800bef8:	f7ff fd6c 	bl	800b9d4 <sail_malloc>
 800befc:	4603      	mov	r3, r0
 800befe:	83fb      	strh	r3, [r7, #30]
 800bf00:	8bfb      	ldrh	r3, [r7, #30]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	bf14      	ite	ne
 800bf06:	2301      	movne	r3, #1
 800bf08:	2300      	moveq	r3, #0
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d001      	beq.n	800bf14 <sail_alloc_resolution_from_data+0x6c>
 800bf10:	8bfb      	ldrh	r3, [r7, #30]
 800bf12:	e013      	b.n	800bf3c <sail_alloc_resolution_from_data+0x94>
    *resolution = ptr;
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	601a      	str	r2, [r3, #0]

    (*resolution)->unit = unit;
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	7dfa      	ldrb	r2, [r7, #23]
 800bf20:	701a      	strb	r2, [r3, #0]
    (*resolution)->x    = x;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	6819      	ldr	r1, [r3, #0]
 800bf26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*resolution)->y    = y;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	6819      	ldr	r1, [r3, #0]
 800bf32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf36:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return SAIL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3720      	adds	r7, #32
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	08015a70 	.word	0x08015a70
 800bf48:	08015a04 	.word	0x08015a04
 800bf4c:	08015a1c 	.word	0x08015a1c
 800bf50:	08015a80 	.word	0x08015a80
 800bf54:	08015a7c 	.word	0x08015a7c

0800bf58 <sail_destroy_resolution>:

void sail_destroy_resolution(struct sail_resolution *resolution) {
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]

    if (resolution == NULL) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <sail_destroy_resolution+0x16>
        return;
    }

    sail_free(resolution);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff fdbc 	bl	800bae4 <sail_free>
 800bf6c:	e000      	b.n	800bf70 <sail_destroy_resolution+0x18>
        return;
 800bf6e:	bf00      	nop
}
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <sail_start_loading_memory>:
    SAIL_TRY(sail_start_loading_file_with_options(path, codec_info, NULL, state));

    return SAIL_OK;
}

sail_status_t sail_start_loading_memory(const void *buffer, size_t buffer_length, const struct sail_codec_info *codec_info, void **state) {
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b088      	sub	sp, #32
 800bf7a:	af02      	add	r7, sp, #8
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	603b      	str	r3, [r7, #0]

    SAIL_TRY(sail_start_loading_memory_with_options(buffer, buffer_length, codec_info, NULL, state));
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	68b9      	ldr	r1, [r7, #8]
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 f950 	bl	800c234 <sail_start_loading_memory_with_options>
 800bf94:	4603      	mov	r3, r0
 800bf96:	82fb      	strh	r3, [r7, #22]
 800bf98:	8afb      	ldrh	r3, [r7, #22]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bf14      	ite	ne
 800bf9e:	2301      	movne	r3, #1
 800bfa0:	2300      	moveq	r3, #0
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <sail_start_loading_memory+0x36>
 800bfa8:	8afb      	ldrh	r3, [r7, #22]
 800bfaa:	e000      	b.n	800bfae <sail_start_loading_memory+0x38>

    return SAIL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <sail_load_next_frame>:

sail_status_t sail_load_next_frame(void *state, struct sail_image **image) {
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	; 0x28
 800bfbc:	af02      	add	r7, sp, #8
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bf0c      	ite	eq
 800bfc8:	2301      	moveq	r3, #1
 800bfca:	2300      	movne	r3, #0
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d011      	beq.n	800bff6 <sail_load_next_frame+0x3e>
 800bfd2:	4b73      	ldr	r3, [pc, #460]	; (800c1a0 <sail_load_next_frame+0x1e8>)
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4b73      	ldr	r3, [pc, #460]	; (800c1a4 <sail_load_next_frame+0x1ec>)
 800bfd8:	2263      	movs	r2, #99	; 0x63
 800bfda:	4973      	ldr	r1, [pc, #460]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800bfdc:	2001      	movs	r0, #1
 800bfde:	f7ff fc01 	bl	800b7e4 <sail_log>
 800bfe2:	4b72      	ldr	r3, [pc, #456]	; (800c1ac <sail_load_next_frame+0x1f4>)
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	4b72      	ldr	r3, [pc, #456]	; (800c1b0 <sail_load_next_frame+0x1f8>)
 800bfe8:	2263      	movs	r2, #99	; 0x63
 800bfea:	496f      	ldr	r1, [pc, #444]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800bfec:	2001      	movs	r0, #1
 800bfee:	f7ff fbf9 	bl	800b7e4 <sail_log>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e0d0      	b.n	800c198 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(image);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bf0c      	ite	eq
 800bffc:	2301      	moveq	r3, #1
 800bffe:	2300      	movne	r3, #0
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	d011      	beq.n	800c02a <sail_load_next_frame+0x72>
 800c006:	4b6b      	ldr	r3, [pc, #428]	; (800c1b4 <sail_load_next_frame+0x1fc>)
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	4b66      	ldr	r3, [pc, #408]	; (800c1a4 <sail_load_next_frame+0x1ec>)
 800c00c:	2264      	movs	r2, #100	; 0x64
 800c00e:	4966      	ldr	r1, [pc, #408]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c010:	2001      	movs	r0, #1
 800c012:	f7ff fbe7 	bl	800b7e4 <sail_log>
 800c016:	4b65      	ldr	r3, [pc, #404]	; (800c1ac <sail_load_next_frame+0x1f4>)
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	4b65      	ldr	r3, [pc, #404]	; (800c1b0 <sail_load_next_frame+0x1f8>)
 800c01c:	2264      	movs	r2, #100	; 0x64
 800c01e:	4962      	ldr	r1, [pc, #392]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c020:	2001      	movs	r0, #1
 800c022:	f7ff fbdf 	bl	800b7e4 <sail_log>
 800c026:	2301      	movs	r3, #1
 800c028:	e0b6      	b.n	800c198 <sail_load_next_frame+0x1e0>

    struct hidden_state *state_of_mind = (struct hidden_state *)state;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	61fb      	str	r3, [r7, #28]

    SAIL_TRY(sail_check_io_valid(state_of_mind->io));
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fd26 	bl	800aa84 <sail_check_io_valid>
 800c038:	4603      	mov	r3, r0
 800c03a:	837b      	strh	r3, [r7, #26]
 800c03c:	8b7b      	ldrh	r3, [r7, #26]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	bf14      	ite	ne
 800c042:	2301      	movne	r3, #1
 800c044:	2300      	moveq	r3, #0
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <sail_load_next_frame+0x98>
 800c04c:	8b7b      	ldrh	r3, [r7, #26]
 800c04e:	e0a3      	b.n	800c198 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(state_of_mind->state);
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	bf0c      	ite	eq
 800c058:	2301      	moveq	r3, #1
 800c05a:	2300      	movne	r3, #0
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d011      	beq.n	800c086 <sail_load_next_frame+0xce>
 800c062:	4b55      	ldr	r3, [pc, #340]	; (800c1b8 <sail_load_next_frame+0x200>)
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	4b4f      	ldr	r3, [pc, #316]	; (800c1a4 <sail_load_next_frame+0x1ec>)
 800c068:	2269      	movs	r2, #105	; 0x69
 800c06a:	494f      	ldr	r1, [pc, #316]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c06c:	2001      	movs	r0, #1
 800c06e:	f7ff fbb9 	bl	800b7e4 <sail_log>
 800c072:	4b4e      	ldr	r3, [pc, #312]	; (800c1ac <sail_load_next_frame+0x1f4>)
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	4b4e      	ldr	r3, [pc, #312]	; (800c1b0 <sail_load_next_frame+0x1f8>)
 800c078:	2269      	movs	r2, #105	; 0x69
 800c07a:	494b      	ldr	r1, [pc, #300]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c07c:	2001      	movs	r0, #1
 800c07e:	f7ff fbb1 	bl	800b7e4 <sail_log>
 800c082:	2301      	movs	r3, #1
 800c084:	e088      	b.n	800c198 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(state_of_mind->codec);
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bf0c      	ite	eq
 800c08e:	2301      	moveq	r3, #1
 800c090:	2300      	movne	r3, #0
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d011      	beq.n	800c0bc <sail_load_next_frame+0x104>
 800c098:	4b48      	ldr	r3, [pc, #288]	; (800c1bc <sail_load_next_frame+0x204>)
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	4b41      	ldr	r3, [pc, #260]	; (800c1a4 <sail_load_next_frame+0x1ec>)
 800c09e:	226a      	movs	r2, #106	; 0x6a
 800c0a0:	4941      	ldr	r1, [pc, #260]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c0a2:	2001      	movs	r0, #1
 800c0a4:	f7ff fb9e 	bl	800b7e4 <sail_log>
 800c0a8:	4b40      	ldr	r3, [pc, #256]	; (800c1ac <sail_load_next_frame+0x1f4>)
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4b40      	ldr	r3, [pc, #256]	; (800c1b0 <sail_load_next_frame+0x1f8>)
 800c0ae:	226a      	movs	r2, #106	; 0x6a
 800c0b0:	493d      	ldr	r1, [pc, #244]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c0b2:	2001      	movs	r0, #1
 800c0b4:	f7ff fb96 	bl	800b7e4 <sail_log>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e06d      	b.n	800c198 <sail_load_next_frame+0x1e0>

    struct sail_image *image_local;
    SAIL_TRY(state_of_mind->codec->v7->load_seek_next_frame(state_of_mind->state, state_of_mind->io, &image_local));
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	695b      	ldr	r3, [r3, #20]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	68d0      	ldr	r0, [r2, #12]
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	6811      	ldr	r1, [r2, #0]
 800c0cc:	f107 020c 	add.w	r2, r7, #12
 800c0d0:	4798      	blx	r3
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	833b      	strh	r3, [r7, #24]
 800c0d6:	8b3b      	ldrh	r3, [r7, #24]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bf14      	ite	ne
 800c0dc:	2301      	movne	r3, #1
 800c0de:	2300      	moveq	r3, #0
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <sail_load_next_frame+0x132>
 800c0e6:	8b3b      	ldrh	r3, [r7, #24]
 800c0e8:	e056      	b.n	800c198 <sail_load_next_frame+0x1e0>

    if (image_local->pixels != NULL) {
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d018      	beq.n	800c124 <sail_load_next_frame+0x16c>
        SAIL_LOG_ERROR("Internal error in %s codec: codecs must not allocate pixels", state_of_mind->codec_info->name);
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	4b31      	ldr	r3, [pc, #196]	; (800c1c0 <sail_load_next_frame+0x208>)
 800c0fc:	2270      	movs	r2, #112	; 0x70
 800c0fe:	492a      	ldr	r1, [pc, #168]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c100:	2001      	movs	r0, #1
 800c102:	f7ff fb6f 	bl	800b7e4 <sail_log>
        sail_destroy_image(image_local);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe f8b3 	bl	800a274 <sail_destroy_image>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CONFLICTING_OPERATION);
 800c10e:	4b2d      	ldr	r3, [pc, #180]	; (800c1c4 <sail_load_next_frame+0x20c>)
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	4b27      	ldr	r3, [pc, #156]	; (800c1b0 <sail_load_next_frame+0x1f8>)
 800c114:	2272      	movs	r2, #114	; 0x72
 800c116:	4924      	ldr	r1, [pc, #144]	; (800c1a8 <sail_load_next_frame+0x1f0>)
 800c118:	2001      	movs	r0, #1
 800c11a:	f7ff fb63 	bl	800b7e4 <sail_log>
 800c11e:	f240 1393 	movw	r3, #403	; 0x193
 800c122:	e039      	b.n	800c198 <sail_load_next_frame+0x1e0>
    }

    /* Allocate pixels. */
    const size_t pixels_size = (size_t)image_local->height * image_local->bytes_per_line;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	68d2      	ldr	r2, [r2, #12]
 800c12c:	fb02 f303 	mul.w	r3, r2, r3
 800c130:	617b      	str	r3, [r7, #20]
    SAIL_TRY_OR_CLEANUP(sail_malloc(pixels_size, &image_local->pixels),
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4619      	mov	r1, r3
 800c136:	6978      	ldr	r0, [r7, #20]
 800c138:	f7ff fc4c 	bl	800b9d4 <sail_malloc>
 800c13c:	4603      	mov	r3, r0
 800c13e:	827b      	strh	r3, [r7, #18]
 800c140:	8a7b      	ldrh	r3, [r7, #18]
 800c142:	2b00      	cmp	r3, #0
 800c144:	bf14      	ite	ne
 800c146:	2301      	movne	r3, #1
 800c148:	2300      	moveq	r3, #0
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d005      	beq.n	800c15c <sail_load_next_frame+0x1a4>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe f88e 	bl	800a274 <sail_destroy_image>
 800c158:	8a7b      	ldrh	r3, [r7, #18]
 800c15a:	e01d      	b.n	800c198 <sail_load_next_frame+0x1e0>
                        /* cleanup */ sail_destroy_image(image_local));

    SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_frame(state_of_mind->state, state_of_mind->io, image_local),
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	69fa      	ldr	r2, [r7, #28]
 800c166:	68d0      	ldr	r0, [r2, #12]
 800c168:	69fa      	ldr	r2, [r7, #28]
 800c16a:	6811      	ldr	r1, [r2, #0]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4798      	blx	r3
 800c170:	4603      	mov	r3, r0
 800c172:	823b      	strh	r3, [r7, #16]
 800c174:	8a3b      	ldrh	r3, [r7, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	bf14      	ite	ne
 800c17a:	2301      	movne	r3, #1
 800c17c:	2300      	moveq	r3, #0
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <sail_load_next_frame+0x1d8>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe f874 	bl	800a274 <sail_destroy_image>
 800c18c:	8a3b      	ldrh	r3, [r7, #16]
 800c18e:	e003      	b.n	800c198 <sail_load_next_frame+0x1e0>
                        /* cleanup */ sail_destroy_image(image_local));

    *image = image_local;
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3720      	adds	r7, #32
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	08015b30 	.word	0x08015b30
 800c1a4:	08015aa4 	.word	0x08015aa4
 800c1a8:	08015abc 	.word	0x08015abc
 800c1ac:	08015b14 	.word	0x08015b14
 800c1b0:	08015b10 	.word	0x08015b10
 800c1b4:	08015b38 	.word	0x08015b38
 800c1b8:	08015b40 	.word	0x08015b40
 800c1bc:	08015b58 	.word	0x08015b58
 800c1c0:	08015b70 	.word	0x08015b70
 800c1c4:	08015bac 	.word	0x08015bac

0800c1c8 <sail_stop_loading>:

sail_status_t sail_stop_loading(void *state) {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]

    /* Not an error. */
    if (state == NULL) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <sail_stop_loading+0x12>
        return SAIL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e028      	b.n	800c22c <sail_stop_loading+0x64>
    }

    struct hidden_state *state_of_mind = (struct hidden_state *)state;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	60fb      	str	r3, [r7, #12]

    /* Not an error. */
    if (state_of_mind->codec == NULL) {
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	695b      	ldr	r3, [r3, #20]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d104      	bne.n	800c1f0 <sail_stop_loading+0x28>
        destroy_hidden_state(state_of_mind);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 fa44 	bl	800c674 <destroy_hidden_state>
        return SAIL_OK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e01d      	b.n	800c22c <sail_stop_loading+0x64>
    }

    SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	f102 000c 	add.w	r0, r2, #12
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	6812      	ldr	r2, [r2, #0]
 800c202:	4611      	mov	r1, r2
 800c204:	4798      	blx	r3
 800c206:	4603      	mov	r3, r0
 800c208:	817b      	strh	r3, [r7, #10]
 800c20a:	897b      	ldrh	r3, [r7, #10]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bf14      	ite	ne
 800c210:	2301      	movne	r3, #1
 800c212:	2300      	moveq	r3, #0
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <sail_stop_loading+0x5c>
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f000 fa2a 	bl	800c674 <destroy_hidden_state>
 800c220:	897b      	ldrh	r3, [r7, #10]
 800c222:	e003      	b.n	800c22c <sail_stop_loading+0x64>
                        /* cleanup */ destroy_hidden_state(state_of_mind));

    destroy_hidden_state(state_of_mind);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 fa25 	bl	800c674 <destroy_hidden_state>

    return SAIL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <sail_start_loading_memory_with_options>:
    return SAIL_OK;
}

sail_status_t sail_start_loading_memory_with_options(const void *buffer, size_t buffer_length,
                                                     const struct sail_codec_info *codec_info,
                                                     const struct sail_load_options *load_options, void **state) {
 800c234:	b580      	push	{r7, lr}
 800c236:	b08a      	sub	sp, #40	; 0x28
 800c238:	af02      	add	r7, sp, #8
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(buffer);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	bf0c      	ite	eq
 800c248:	2301      	moveq	r3, #1
 800c24a:	2300      	movne	r3, #0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d011      	beq.n	800c276 <sail_start_loading_memory_with_options+0x42>
 800c252:	4b2b      	ldr	r3, [pc, #172]	; (800c300 <sail_start_loading_memory_with_options+0xcc>)
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	4b2b      	ldr	r3, [pc, #172]	; (800c304 <sail_start_loading_memory_with_options+0xd0>)
 800c258:	223a      	movs	r2, #58	; 0x3a
 800c25a:	492b      	ldr	r1, [pc, #172]	; (800c308 <sail_start_loading_memory_with_options+0xd4>)
 800c25c:	2001      	movs	r0, #1
 800c25e:	f7ff fac1 	bl	800b7e4 <sail_log>
 800c262:	4b2a      	ldr	r3, [pc, #168]	; (800c30c <sail_start_loading_memory_with_options+0xd8>)
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	4b2a      	ldr	r3, [pc, #168]	; (800c310 <sail_start_loading_memory_with_options+0xdc>)
 800c268:	223a      	movs	r2, #58	; 0x3a
 800c26a:	4927      	ldr	r1, [pc, #156]	; (800c308 <sail_start_loading_memory_with_options+0xd4>)
 800c26c:	2001      	movs	r0, #1
 800c26e:	f7ff fab9 	bl	800b7e4 <sail_log>
 800c272:	2301      	movs	r3, #1
 800c274:	e03f      	b.n	800c2f6 <sail_start_loading_memory_with_options+0xc2>

    const struct sail_codec_info *codec_info_local;

    if (codec_info == NULL) {
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d112      	bne.n	800c2a2 <sail_start_loading_memory_with_options+0x6e>
        SAIL_TRY(sail_codec_info_by_magic_number_from_memory(buffer, buffer_length, &codec_info_local));
 800c27c:	f107 0314 	add.w	r3, r7, #20
 800c280:	461a      	mov	r2, r3
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7fa fc19 	bl	8006abc <sail_codec_info_by_magic_number_from_memory>
 800c28a:	4603      	mov	r3, r0
 800c28c:	83fb      	strh	r3, [r7, #30]
 800c28e:	8bfb      	ldrh	r3, [r7, #30]
 800c290:	2b00      	cmp	r3, #0
 800c292:	bf14      	ite	ne
 800c294:	2301      	movne	r3, #1
 800c296:	2300      	moveq	r3, #0
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <sail_start_loading_memory_with_options+0x72>
 800c29e:	8bfb      	ldrh	r3, [r7, #30]
 800c2a0:	e029      	b.n	800c2f6 <sail_start_loading_memory_with_options+0xc2>
    } else {
        codec_info_local = codec_info;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	617b      	str	r3, [r7, #20]
    }

    struct sail_io *io;
    SAIL_TRY(sail_alloc_io_read_memory(buffer, buffer_length, &io));
 800c2a6:	f107 0310 	add.w	r3, r7, #16
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f7fe fe6a 	bl	800af88 <sail_alloc_io_read_memory>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	83bb      	strh	r3, [r7, #28]
 800c2b8:	8bbb      	ldrh	r3, [r7, #28]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bf14      	ite	ne
 800c2be:	2301      	movne	r3, #1
 800c2c0:	2300      	moveq	r3, #0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <sail_start_loading_memory_with_options+0x98>
 800c2c8:	8bbb      	ldrh	r3, [r7, #28]
 800c2ca:	e014      	b.n	800c2f6 <sail_start_loading_memory_with_options+0xc2>

    SAIL_TRY(start_loading_io_with_options(io, true, codec_info_local, load_options, state));
 800c2cc:	6938      	ldr	r0, [r7, #16]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	f000 fa56 	bl	800c788 <start_loading_io_with_options>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	837b      	strh	r3, [r7, #26]
 800c2e0:	8b7b      	ldrh	r3, [r7, #26]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bf14      	ite	ne
 800c2e6:	2301      	movne	r3, #1
 800c2e8:	2300      	moveq	r3, #0
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <sail_start_loading_memory_with_options+0xc0>
 800c2f0:	8b7b      	ldrh	r3, [r7, #26]
 800c2f2:	e000      	b.n	800c2f6 <sail_start_loading_memory_with_options+0xc2>

    return SAIL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3720      	adds	r7, #32
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08015c78 	.word	0x08015c78
 800c304:	08015bec 	.word	0x08015bec
 800c308:	08015c04 	.word	0x08015c04
 800c30c:	08015c64 	.word	0x08015c64
 800c310:	08015c60 	.word	0x08015c60

0800c314 <sail_load_image_from_memory>:
    *image = image_local;

    return SAIL_OK;
}

sail_status_t sail_load_image_from_memory(const void *buffer, size_t buffer_length, struct sail_image **image) {
 800c314:	b580      	push	{r7, lr}
 800c316:	b08a      	sub	sp, #40	; 0x28
 800c318:	af02      	add	r7, sp, #8
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(buffer);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	bf0c      	ite	eq
 800c326:	2301      	moveq	r3, #1
 800c328:	2300      	movne	r3, #0
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d011      	beq.n	800c354 <sail_load_image_from_memory+0x40>
 800c330:	4b39      	ldr	r3, [pc, #228]	; (800c418 <sail_load_image_from_memory+0x104>)
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	4b39      	ldr	r3, [pc, #228]	; (800c41c <sail_load_image_from_memory+0x108>)
 800c336:	227c      	movs	r2, #124	; 0x7c
 800c338:	4939      	ldr	r1, [pc, #228]	; (800c420 <sail_load_image_from_memory+0x10c>)
 800c33a:	2001      	movs	r0, #1
 800c33c:	f7ff fa52 	bl	800b7e4 <sail_log>
 800c340:	4b38      	ldr	r3, [pc, #224]	; (800c424 <sail_load_image_from_memory+0x110>)
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	4b38      	ldr	r3, [pc, #224]	; (800c428 <sail_load_image_from_memory+0x114>)
 800c346:	227c      	movs	r2, #124	; 0x7c
 800c348:	4935      	ldr	r1, [pc, #212]	; (800c420 <sail_load_image_from_memory+0x10c>)
 800c34a:	2001      	movs	r0, #1
 800c34c:	f7ff fa4a 	bl	800b7e4 <sail_log>
 800c350:	2301      	movs	r3, #1
 800c352:	e05d      	b.n	800c410 <sail_load_image_from_memory+0xfc>
    SAIL_CHECK_PTR(image);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	bf0c      	ite	eq
 800c35a:	2301      	moveq	r3, #1
 800c35c:	2300      	movne	r3, #0
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b00      	cmp	r3, #0
 800c362:	d011      	beq.n	800c388 <sail_load_image_from_memory+0x74>
 800c364:	4b31      	ldr	r3, [pc, #196]	; (800c42c <sail_load_image_from_memory+0x118>)
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	4b2c      	ldr	r3, [pc, #176]	; (800c41c <sail_load_image_from_memory+0x108>)
 800c36a:	227d      	movs	r2, #125	; 0x7d
 800c36c:	492c      	ldr	r1, [pc, #176]	; (800c420 <sail_load_image_from_memory+0x10c>)
 800c36e:	2001      	movs	r0, #1
 800c370:	f7ff fa38 	bl	800b7e4 <sail_log>
 800c374:	4b2b      	ldr	r3, [pc, #172]	; (800c424 <sail_load_image_from_memory+0x110>)
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	4b2b      	ldr	r3, [pc, #172]	; (800c428 <sail_load_image_from_memory+0x114>)
 800c37a:	227d      	movs	r2, #125	; 0x7d
 800c37c:	4928      	ldr	r1, [pc, #160]	; (800c420 <sail_load_image_from_memory+0x10c>)
 800c37e:	2001      	movs	r0, #1
 800c380:	f7ff fa30 	bl	800b7e4 <sail_log>
 800c384:	2301      	movs	r3, #1
 800c386:	e043      	b.n	800c410 <sail_load_image_from_memory+0xfc>

    void *state = NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]

    SAIL_TRY_OR_CLEANUP(sail_start_loading_memory(buffer, buffer_length, NULL /* codec info */, &state),
 800c38c:	f107 0314 	add.w	r3, r7, #20
 800c390:	2200      	movs	r2, #0
 800c392:	68b9      	ldr	r1, [r7, #8]
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f7ff fdee 	bl	800bf76 <sail_start_loading_memory>
 800c39a:	4603      	mov	r3, r0
 800c39c:	83fb      	strh	r3, [r7, #30]
 800c39e:	8bfb      	ldrh	r3, [r7, #30]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	bf14      	ite	ne
 800c3a4:	2301      	movne	r3, #1
 800c3a6:	2300      	moveq	r3, #0
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d005      	beq.n	800c3ba <sail_load_image_from_memory+0xa6>
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7ff ff09 	bl	800c1c8 <sail_stop_loading>
 800c3b6:	8bfb      	ldrh	r3, [r7, #30]
 800c3b8:	e02a      	b.n	800c410 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_stop_loading(state));

    SAIL_TRY_OR_CLEANUP(sail_load_next_frame(state, image),
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	6879      	ldr	r1, [r7, #4]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fdfa 	bl	800bfb8 <sail_load_next_frame>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	83bb      	strh	r3, [r7, #28]
 800c3c8:	8bbb      	ldrh	r3, [r7, #28]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bf14      	ite	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	2300      	moveq	r3, #0
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <sail_load_image_from_memory+0xd0>
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff fef4 	bl	800c1c8 <sail_stop_loading>
 800c3e0:	8bbb      	ldrh	r3, [r7, #28]
 800c3e2:	e015      	b.n	800c410 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_stop_loading(state));

    SAIL_TRY_OR_CLEANUP(sail_stop_loading(state),
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff feee 	bl	800c1c8 <sail_stop_loading>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	837b      	strh	r3, [r7, #26]
 800c3f0:	8b7b      	ldrh	r3, [r7, #26]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bf14      	ite	ne
 800c3f6:	2301      	movne	r3, #1
 800c3f8:	2300      	moveq	r3, #0
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d006      	beq.n	800c40e <sail_load_image_from_memory+0xfa>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4618      	mov	r0, r3
 800c406:	f7fd ff35 	bl	800a274 <sail_destroy_image>
 800c40a:	8b7b      	ldrh	r3, [r7, #26]
 800c40c:	e000      	b.n	800c410 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_destroy_image(*image));

    return SAIL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3720      	adds	r7, #32
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	08015d1c 	.word	0x08015d1c
 800c41c:	08015c8c 	.word	0x08015c8c
 800c420:	08015ca4 	.word	0x08015ca4
 800c424:	08015d00 	.word	0x08015d00
 800c428:	08015cfc 	.word	0x08015cfc
 800c42c:	08015d14 	.word	0x08015d14

0800c430 <load_codec_by_codec_info_unsafe>:

    SAIL_LOG_ERROR("This codec cannot save %s pixels. Use its save features to get the list of supported pixel formats for saving",
                    sail_pixel_format_to_string(pixel_format));
}

static sail_status_t load_codec_by_codec_info_unsafe(const struct sail_codec_info *codec_info, const struct sail_codec **codec) {
 800c430:	b580      	push	{r7, lr}
 800c432:	b08a      	sub	sp, #40	; 0x28
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bf0c      	ite	eq
 800c440:	2301      	moveq	r3, #1
 800c442:	2300      	movne	r3, #0
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d011      	beq.n	800c46e <load_codec_by_codec_info_unsafe+0x3e>
 800c44a:	4b47      	ldr	r3, [pc, #284]	; (800c568 <load_codec_by_codec_info_unsafe+0x138>)
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4b47      	ldr	r3, [pc, #284]	; (800c56c <load_codec_by_codec_info_unsafe+0x13c>)
 800c450:	2228      	movs	r2, #40	; 0x28
 800c452:	4947      	ldr	r1, [pc, #284]	; (800c570 <load_codec_by_codec_info_unsafe+0x140>)
 800c454:	2001      	movs	r0, #1
 800c456:	f7ff f9c5 	bl	800b7e4 <sail_log>
 800c45a:	4b46      	ldr	r3, [pc, #280]	; (800c574 <load_codec_by_codec_info_unsafe+0x144>)
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	4b46      	ldr	r3, [pc, #280]	; (800c578 <load_codec_by_codec_info_unsafe+0x148>)
 800c460:	2228      	movs	r2, #40	; 0x28
 800c462:	4943      	ldr	r1, [pc, #268]	; (800c570 <load_codec_by_codec_info_unsafe+0x140>)
 800c464:	2001      	movs	r0, #1
 800c466:	f7ff f9bd 	bl	800b7e4 <sail_log>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e077      	b.n	800c55e <load_codec_by_codec_info_unsafe+0x12e>
    SAIL_CHECK_PTR(codec);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	bf0c      	ite	eq
 800c474:	2301      	moveq	r3, #1
 800c476:	2300      	movne	r3, #0
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d011      	beq.n	800c4a2 <load_codec_by_codec_info_unsafe+0x72>
 800c47e:	4b3f      	ldr	r3, [pc, #252]	; (800c57c <load_codec_by_codec_info_unsafe+0x14c>)
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	4b3a      	ldr	r3, [pc, #232]	; (800c56c <load_codec_by_codec_info_unsafe+0x13c>)
 800c484:	2229      	movs	r2, #41	; 0x29
 800c486:	493a      	ldr	r1, [pc, #232]	; (800c570 <load_codec_by_codec_info_unsafe+0x140>)
 800c488:	2001      	movs	r0, #1
 800c48a:	f7ff f9ab 	bl	800b7e4 <sail_log>
 800c48e:	4b39      	ldr	r3, [pc, #228]	; (800c574 <load_codec_by_codec_info_unsafe+0x144>)
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	4b39      	ldr	r3, [pc, #228]	; (800c578 <load_codec_by_codec_info_unsafe+0x148>)
 800c494:	2229      	movs	r2, #41	; 0x29
 800c496:	4936      	ldr	r1, [pc, #216]	; (800c570 <load_codec_by_codec_info_unsafe+0x140>)
 800c498:	2001      	movs	r0, #1
 800c49a:	f7ff f9a3 	bl	800b7e4 <sail_log>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e05d      	b.n	800c55e <load_codec_by_codec_info_unsafe+0x12e>

    struct sail_context *context;
    SAIL_TRY(fetch_global_context_unsafe(&context));
 800c4a2:	f107 0308 	add.w	r3, r7, #8
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fd fbc7 	bl	8009c3a <fetch_global_context_unsafe>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	82fb      	strh	r3, [r7, #22]
 800c4b0:	8afb      	ldrh	r3, [r7, #22]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	bf14      	ite	ne
 800c4b6:	2301      	movne	r3, #1
 800c4b8:	2300      	moveq	r3, #0
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <load_codec_by_codec_info_unsafe+0x94>
 800c4c0:	8afb      	ldrh	r3, [r7, #22]
 800c4c2:	e04c      	b.n	800c55e <load_codec_by_codec_info_unsafe+0x12e>

    /* Find the codec in the cache. */
    struct sail_codec_bundle *found_codec_bundle = NULL;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	61fb      	str	r3, [r7, #28]

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	e018      	b.n	800c502 <load_codec_by_codec_info_unsafe+0xd2>
        struct sail_codec_bundle *codec_bundle = codec_bundle_node->codec_bundle;
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	613b      	str	r3, [r7, #16]

        if (codec_bundle->codec_info == codec_info) {
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d10d      	bne.n	800c4fc <load_codec_by_codec_info_unsafe+0xcc>
            if (codec_bundle->codec != NULL) {
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <load_codec_by_codec_info_unsafe+0xc4>
                *codec = codec_bundle->codec;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	601a      	str	r2, [r3, #0]
                return SAIL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e034      	b.n	800c55e <load_codec_by_codec_info_unsafe+0x12e>
            }

            found_codec_bundle = codec_bundle_node->codec_bundle;
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	61fb      	str	r3, [r7, #28]
            break;
 800c4fa:	e005      	b.n	800c508 <load_codec_by_codec_info_unsafe+0xd8>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	61bb      	str	r3, [r7, #24]
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e3      	bne.n	800c4d0 <load_codec_by_codec_info_unsafe+0xa0>
        }
    }

    /* Something weird. The pointer to the codec info is not found in the cache. */
    if (found_codec_bundle == NULL) {
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <load_codec_by_codec_info_unsafe+0xf4>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 800c50e:	4b1c      	ldr	r3, [pc, #112]	; (800c580 <load_codec_by_codec_info_unsafe+0x150>)
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	4b19      	ldr	r3, [pc, #100]	; (800c578 <load_codec_by_codec_info_unsafe+0x148>)
 800c514:	2241      	movs	r2, #65	; 0x41
 800c516:	4916      	ldr	r1, [pc, #88]	; (800c570 <load_codec_by_codec_info_unsafe+0x140>)
 800c518:	2001      	movs	r0, #1
 800c51a:	f7ff f963 	bl	800b7e4 <sail_log>
 800c51e:	f240 132d 	movw	r3, #301	; 0x12d
 800c522:	e01c      	b.n	800c55e <load_codec_by_codec_info_unsafe+0x12e>
    }

    if (found_codec_bundle->codec == NULL) {
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d113      	bne.n	800c554 <load_codec_by_codec_info_unsafe+0x124>
        SAIL_TRY(alloc_and_load_codec(found_codec_bundle->codec_info, &found_codec_bundle->codec));
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	3304      	adds	r3, #4
 800c534:	4619      	mov	r1, r3
 800c536:	4610      	mov	r0, r2
 800c538:	f7fa f93c 	bl	80067b4 <alloc_and_load_codec>
 800c53c:	4603      	mov	r3, r0
 800c53e:	81fb      	strh	r3, [r7, #14]
 800c540:	89fb      	ldrh	r3, [r7, #14]
 800c542:	2b00      	cmp	r3, #0
 800c544:	bf14      	ite	ne
 800c546:	2301      	movne	r3, #1
 800c548:	2300      	moveq	r3, #0
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <load_codec_by_codec_info_unsafe+0x124>
 800c550:	89fb      	ldrh	r3, [r7, #14]
 800c552:	e004      	b.n	800c55e <load_codec_by_codec_info_unsafe+0x12e>
    }

    *codec = found_codec_bundle->codec;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	685a      	ldr	r2, [r3, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3720      	adds	r7, #32
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	08015dfc 	.word	0x08015dfc
 800c56c:	08015de4 	.word	0x08015de4
 800c570:	08015d94 	.word	0x08015d94
 800c574:	08015e0c 	.word	0x08015e0c
 800c578:	08015e08 	.word	0x08015e08
 800c57c:	08015e20 	.word	0x08015e20
 800c580:	08015e28 	.word	0x08015e28

0800c584 <load_codec_by_codec_info>:

/*
 * Public functions.
 */

sail_status_t load_codec_by_codec_info(const struct sail_codec_info *codec_info, const struct sail_codec **codec) {
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af02      	add	r7, sp, #8
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	bf0c      	ite	eq
 800c594:	2301      	moveq	r3, #1
 800c596:	2300      	movne	r3, #0
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d011      	beq.n	800c5c2 <load_codec_by_codec_info+0x3e>
 800c59e:	4b2f      	ldr	r3, [pc, #188]	; (800c65c <load_codec_by_codec_info+0xd8>)
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	4b2f      	ldr	r3, [pc, #188]	; (800c660 <load_codec_by_codec_info+0xdc>)
 800c5a4:	2253      	movs	r2, #83	; 0x53
 800c5a6:	492f      	ldr	r1, [pc, #188]	; (800c664 <load_codec_by_codec_info+0xe0>)
 800c5a8:	2001      	movs	r0, #1
 800c5aa:	f7ff f91b 	bl	800b7e4 <sail_log>
 800c5ae:	4b2e      	ldr	r3, [pc, #184]	; (800c668 <load_codec_by_codec_info+0xe4>)
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	4b2e      	ldr	r3, [pc, #184]	; (800c66c <load_codec_by_codec_info+0xe8>)
 800c5b4:	2253      	movs	r2, #83	; 0x53
 800c5b6:	492b      	ldr	r1, [pc, #172]	; (800c664 <load_codec_by_codec_info+0xe0>)
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7ff f913 	bl	800b7e4 <sail_log>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e048      	b.n	800c654 <load_codec_by_codec_info+0xd0>
    SAIL_CHECK_PTR(codec);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bf0c      	ite	eq
 800c5c8:	2301      	moveq	r3, #1
 800c5ca:	2300      	movne	r3, #0
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d011      	beq.n	800c5f6 <load_codec_by_codec_info+0x72>
 800c5d2:	4b27      	ldr	r3, [pc, #156]	; (800c670 <load_codec_by_codec_info+0xec>)
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	4b22      	ldr	r3, [pc, #136]	; (800c660 <load_codec_by_codec_info+0xdc>)
 800c5d8:	2254      	movs	r2, #84	; 0x54
 800c5da:	4922      	ldr	r1, [pc, #136]	; (800c664 <load_codec_by_codec_info+0xe0>)
 800c5dc:	2001      	movs	r0, #1
 800c5de:	f7ff f901 	bl	800b7e4 <sail_log>
 800c5e2:	4b21      	ldr	r3, [pc, #132]	; (800c668 <load_codec_by_codec_info+0xe4>)
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	4b21      	ldr	r3, [pc, #132]	; (800c66c <load_codec_by_codec_info+0xe8>)
 800c5e8:	2254      	movs	r2, #84	; 0x54
 800c5ea:	491e      	ldr	r1, [pc, #120]	; (800c664 <load_codec_by_codec_info+0xe0>)
 800c5ec:	2001      	movs	r0, #1
 800c5ee:	f7ff f8f9 	bl	800b7e4 <sail_log>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e02e      	b.n	800c654 <load_codec_by_codec_info+0xd0>

    SAIL_TRY(lock_context());
 800c5f6:	f7fd fbed 	bl	8009dd4 <lock_context>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	81fb      	strh	r3, [r7, #14]
 800c5fe:	89fb      	ldrh	r3, [r7, #14]
 800c600:	2b00      	cmp	r3, #0
 800c602:	bf14      	ite	ne
 800c604:	2301      	movne	r3, #1
 800c606:	2300      	moveq	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <load_codec_by_codec_info+0x8e>
 800c60e:	89fb      	ldrh	r3, [r7, #14]
 800c610:	e020      	b.n	800c654 <load_codec_by_codec_info+0xd0>

    SAIL_TRY_OR_CLEANUP(load_codec_by_codec_info_unsafe(codec_info, codec),
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff ff0b 	bl	800c430 <load_codec_by_codec_info_unsafe>
 800c61a:	4603      	mov	r3, r0
 800c61c:	81bb      	strh	r3, [r7, #12]
 800c61e:	89bb      	ldrh	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	bf14      	ite	ne
 800c624:	2301      	movne	r3, #1
 800c626:	2300      	moveq	r3, #0
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <load_codec_by_codec_info+0xb2>
 800c62e:	f7fd fbd9 	bl	8009de4 <unlock_context>
 800c632:	89bb      	ldrh	r3, [r7, #12]
 800c634:	e00e      	b.n	800c654 <load_codec_by_codec_info+0xd0>
                        /* cleanup */ unlock_context());

    SAIL_TRY(unlock_context());
 800c636:	f7fd fbd5 	bl	8009de4 <unlock_context>
 800c63a:	4603      	mov	r3, r0
 800c63c:	817b      	strh	r3, [r7, #10]
 800c63e:	897b      	ldrh	r3, [r7, #10]
 800c640:	2b00      	cmp	r3, #0
 800c642:	bf14      	ite	ne
 800c644:	2301      	movne	r3, #1
 800c646:	2300      	moveq	r3, #0
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <load_codec_by_codec_info+0xce>
 800c64e:	897b      	ldrh	r3, [r7, #10]
 800c650:	e000      	b.n	800c654 <load_codec_by_codec_info+0xd0>

    return SAIL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	08015dfc 	.word	0x08015dfc
 800c660:	08015de4 	.word	0x08015de4
 800c664:	08015d94 	.word	0x08015d94
 800c668:	08015e0c 	.word	0x08015e0c
 800c66c:	08015e08 	.word	0x08015e08
 800c670:	08015e20 	.word	0x08015e20

0800c674 <destroy_hidden_state>:

void destroy_hidden_state(struct hidden_state *state) {
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]

    if (state == NULL) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d016      	beq.n	800c6b0 <destroy_hidden_state+0x3c>
        return;
    }

    if (state->own_io) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	791b      	ldrb	r3, [r3, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d004      	beq.n	800c694 <destroy_hidden_state+0x20>
        sail_destroy_io(state->io);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe f9cc 	bl	800aa2c <sail_destroy_io>
    }

    sail_destroy_save_options(state->save_options);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 f9d6 	bl	800ca4a <sail_destroy_save_options>

    /* This state must be freed and zeroed by codecs. We free it just in case to avoid memory leaks. */
    sail_free(state->state);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff fa1e 	bl	800bae4 <sail_free>

    sail_free(state);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff fa1b 	bl	800bae4 <sail_free>
 800c6ae:	e000      	b.n	800c6b2 <destroy_hidden_state+0x3e>
        return;
 800c6b0:	bf00      	nop
}
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <check_io_arguments>:
 * Private functions.
 */

static sail_status_t check_io_arguments(struct sail_io *io,
                                        const struct sail_codec_info *codec_info,
                                        void **state) {
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af02      	add	r7, sp, #8
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(io);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bf0c      	ite	eq
 800c6ca:	2301      	moveq	r3, #1
 800c6cc:	2300      	movne	r3, #0
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d011      	beq.n	800c6f8 <check_io_arguments+0x40>
 800c6d4:	4b25      	ldr	r3, [pc, #148]	; (800c76c <check_io_arguments+0xb4>)
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	4b25      	ldr	r3, [pc, #148]	; (800c770 <check_io_arguments+0xb8>)
 800c6da:	2229      	movs	r2, #41	; 0x29
 800c6dc:	4925      	ldr	r1, [pc, #148]	; (800c774 <check_io_arguments+0xbc>)
 800c6de:	2001      	movs	r0, #1
 800c6e0:	f7ff f880 	bl	800b7e4 <sail_log>
 800c6e4:	4b24      	ldr	r3, [pc, #144]	; (800c778 <check_io_arguments+0xc0>)
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	4b24      	ldr	r3, [pc, #144]	; (800c77c <check_io_arguments+0xc4>)
 800c6ea:	2229      	movs	r2, #41	; 0x29
 800c6ec:	4921      	ldr	r1, [pc, #132]	; (800c774 <check_io_arguments+0xbc>)
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	f7ff f878 	bl	800b7e4 <sail_log>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e034      	b.n	800c762 <check_io_arguments+0xaa>
    SAIL_CHECK_PTR(codec_info);
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	bf0c      	ite	eq
 800c6fe:	2301      	moveq	r3, #1
 800c700:	2300      	movne	r3, #0
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b00      	cmp	r3, #0
 800c706:	d011      	beq.n	800c72c <check_io_arguments+0x74>
 800c708:	4b1d      	ldr	r3, [pc, #116]	; (800c780 <check_io_arguments+0xc8>)
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	4b18      	ldr	r3, [pc, #96]	; (800c770 <check_io_arguments+0xb8>)
 800c70e:	222a      	movs	r2, #42	; 0x2a
 800c710:	4918      	ldr	r1, [pc, #96]	; (800c774 <check_io_arguments+0xbc>)
 800c712:	2001      	movs	r0, #1
 800c714:	f7ff f866 	bl	800b7e4 <sail_log>
 800c718:	4b17      	ldr	r3, [pc, #92]	; (800c778 <check_io_arguments+0xc0>)
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	4b17      	ldr	r3, [pc, #92]	; (800c77c <check_io_arguments+0xc4>)
 800c71e:	222a      	movs	r2, #42	; 0x2a
 800c720:	4914      	ldr	r1, [pc, #80]	; (800c774 <check_io_arguments+0xbc>)
 800c722:	2001      	movs	r0, #1
 800c724:	f7ff f85e 	bl	800b7e4 <sail_log>
 800c728:	2301      	movs	r3, #1
 800c72a:	e01a      	b.n	800c762 <check_io_arguments+0xaa>
    SAIL_CHECK_PTR(state);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bf0c      	ite	eq
 800c732:	2301      	moveq	r3, #1
 800c734:	2300      	movne	r3, #0
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d011      	beq.n	800c760 <check_io_arguments+0xa8>
 800c73c:	4b11      	ldr	r3, [pc, #68]	; (800c784 <check_io_arguments+0xcc>)
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <check_io_arguments+0xb8>)
 800c742:	222b      	movs	r2, #43	; 0x2b
 800c744:	490b      	ldr	r1, [pc, #44]	; (800c774 <check_io_arguments+0xbc>)
 800c746:	2001      	movs	r0, #1
 800c748:	f7ff f84c 	bl	800b7e4 <sail_log>
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <check_io_arguments+0xc0>)
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <check_io_arguments+0xc4>)
 800c752:	222b      	movs	r2, #43	; 0x2b
 800c754:	4907      	ldr	r1, [pc, #28]	; (800c774 <check_io_arguments+0xbc>)
 800c756:	2001      	movs	r0, #1
 800c758:	f7ff f844 	bl	800b7e4 <sail_log>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <check_io_arguments+0xaa>

    return SAIL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	08015ef0 	.word	0x08015ef0
 800c770:	08015e78 	.word	0x08015e78
 800c774:	08015e90 	.word	0x08015e90
 800c778:	08015ef8 	.word	0x08015ef8
 800c77c:	08015ef4 	.word	0x08015ef4
 800c780:	08015f0c 	.word	0x08015f0c
 800c784:	08015f18 	.word	0x08015f18

0800c788 <start_loading_io_with_options>:
 * Public functions.
 */

sail_status_t start_loading_io_with_options(struct sail_io *io, bool own_io,
                                            const struct sail_codec_info *codec_info,
                                            const struct sail_load_options *load_options, void **state) {
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08a      	sub	sp, #40	; 0x28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	607a      	str	r2, [r7, #4]
 800c792:	603b      	str	r3, [r7, #0]
 800c794:	460b      	mov	r3, r1
 800c796:	72fb      	strb	r3, [r7, #11]

    SAIL_TRY_OR_CLEANUP(check_io_arguments(io, codec_info, state),
 800c798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c79a:	6879      	ldr	r1, [r7, #4]
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff ff8b 	bl	800c6b8 <check_io_arguments>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bf14      	ite	ne
 800c7ac:	2301      	movne	r3, #1
 800c7ae:	2300      	moveq	r3, #0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d007      	beq.n	800c7c6 <start_loading_io_with_options+0x3e>
 800c7b6:	7afb      	ldrb	r3, [r7, #11]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <start_loading_io_with_options+0x3a>
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7fe f935 	bl	800aa2c <sail_destroy_io>
 800c7c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7c4:	e0b7      	b.n	800c936 <start_loading_io_with_options+0x1ae>
                        /* cleanup */ if (own_io) sail_destroy_io(io));

    *state = NULL;
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	601a      	str	r2, [r3, #0]

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct hidden_state), &ptr),
 800c7cc:	f107 0314 	add.w	r3, r7, #20
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	2018      	movs	r0, #24
 800c7d4:	f7ff f8fe 	bl	800b9d4 <sail_malloc>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c7dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bf14      	ite	ne
 800c7e2:	2301      	movne	r3, #1
 800c7e4:	2300      	moveq	r3, #0
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d007      	beq.n	800c7fc <start_loading_io_with_options+0x74>
 800c7ec:	7afb      	ldrb	r3, [r7, #11]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <start_loading_io_with_options+0x70>
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7fe f91a 	bl	800aa2c <sail_destroy_io>
 800c7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7fa:	e09c      	b.n	800c936 <start_loading_io_with_options+0x1ae>
                        /* cleanup */ if (own_io) sail_destroy_io(io));
    struct hidden_state *state_of_mind = ptr;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	623b      	str	r3, [r7, #32]

    state_of_mind->io           = io;
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	601a      	str	r2, [r3, #0]
    state_of_mind->own_io       = own_io;
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	7afa      	ldrb	r2, [r7, #11]
 800c80a:	711a      	strb	r2, [r3, #4]
    state_of_mind->save_options = NULL;
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	2200      	movs	r2, #0
 800c810:	609a      	str	r2, [r3, #8]
    state_of_mind->state        = NULL;
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	2200      	movs	r2, #0
 800c816:	60da      	str	r2, [r3, #12]
    state_of_mind->codec_info   = codec_info;
 800c818:	6a3b      	ldr	r3, [r7, #32]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	611a      	str	r2, [r3, #16]
    state_of_mind->codec        = NULL;
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	2200      	movs	r2, #0
 800c822:	615a      	str	r2, [r3, #20]

    SAIL_TRY_OR_CLEANUP(load_codec_by_codec_info(state_of_mind->codec_info, &state_of_mind->codec),
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	691a      	ldr	r2, [r3, #16]
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	3314      	adds	r3, #20
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f7ff fea8 	bl	800c584 <load_codec_by_codec_info>
 800c834:	4603      	mov	r3, r0
 800c836:	83fb      	strh	r3, [r7, #30]
 800c838:	8bfb      	ldrh	r3, [r7, #30]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bf14      	ite	ne
 800c83e:	2301      	movne	r3, #1
 800c840:	2300      	moveq	r3, #0
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d004      	beq.n	800c852 <start_loading_io_with_options+0xca>
 800c848:	6a38      	ldr	r0, [r7, #32]
 800c84a:	f7ff ff13 	bl	800c674 <destroy_hidden_state>
 800c84e:	8bfb      	ldrh	r3, [r7, #30]
 800c850:	e071      	b.n	800c936 <start_loading_io_with_options+0x1ae>
                        /* cleanup */ destroy_hidden_state(state_of_mind));

    if (load_options == NULL) {
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d146      	bne.n	800c8e6 <start_loading_io_with_options+0x15e>
        struct sail_load_options *load_options_local = NULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	613b      	str	r3, [r7, #16]

        SAIL_TRY_OR_CLEANUP(sail_alloc_load_options_from_features(state_of_mind->codec_info->load_features, &load_options_local),
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c862:	f107 0210 	add.w	r2, r7, #16
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe febf 	bl	800b5ec <sail_alloc_load_options_from_features>
 800c86e:	4603      	mov	r3, r0
 800c870:	837b      	strh	r3, [r7, #26]
 800c872:	8b7b      	ldrh	r3, [r7, #26]
 800c874:	2b00      	cmp	r3, #0
 800c876:	bf14      	ite	ne
 800c878:	2301      	movne	r3, #1
 800c87a:	2300      	moveq	r3, #0
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d004      	beq.n	800c88c <start_loading_io_with_options+0x104>
 800c882:	6a38      	ldr	r0, [r7, #32]
 800c884:	f7ff fef6 	bl	800c674 <destroy_hidden_state>
 800c888:	8b7b      	ldrh	r3, [r7, #26]
 800c88a:	e054      	b.n	800c936 <start_loading_io_with_options+0x1ae>
                            /* cleanup */ destroy_hidden_state(state_of_mind));
        SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_init(state_of_mind->io, load_options_local, &state_of_mind->state),
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6a3a      	ldr	r2, [r7, #32]
 800c896:	6810      	ldr	r0, [r2, #0]
 800c898:	6939      	ldr	r1, [r7, #16]
 800c89a:	6a3a      	ldr	r2, [r7, #32]
 800c89c:	320c      	adds	r2, #12
 800c89e:	4798      	blx	r3
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	833b      	strh	r3, [r7, #24]
 800c8a4:	8b3b      	ldrh	r3, [r7, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bf14      	ite	ne
 800c8aa:	2301      	movne	r3, #1
 800c8ac:	2300      	moveq	r3, #0
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d013      	beq.n	800c8dc <start_loading_io_with_options+0x154>
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe fe84 	bl	800b5c4 <sail_destroy_load_options>
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	6a3a      	ldr	r2, [r7, #32]
 800c8c6:	f102 000c 	add.w	r0, r2, #12
 800c8ca:	6a3a      	ldr	r2, [r7, #32]
 800c8cc:	6812      	ldr	r2, [r2, #0]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	4798      	blx	r3
 800c8d2:	6a38      	ldr	r0, [r7, #32]
 800c8d4:	f7ff fece 	bl	800c674 <destroy_hidden_state>
 800c8d8:	8b3b      	ldrh	r3, [r7, #24]
 800c8da:	e02c      	b.n	800c936 <start_loading_io_with_options+0x1ae>
                            /* cleanup */ sail_destroy_load_options(load_options_local),
                                          state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
                                          destroy_hidden_state(state_of_mind));
        sail_destroy_load_options(load_options_local);
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fe70 	bl	800b5c4 <sail_destroy_load_options>
 800c8e4:	e023      	b.n	800c92e <start_loading_io_with_options+0x1a6>
    } else {
        SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_init(state_of_mind->io, load_options, &state_of_mind->state),
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6a3a      	ldr	r2, [r7, #32]
 800c8f0:	6810      	ldr	r0, [r2, #0]
 800c8f2:	6a3a      	ldr	r2, [r7, #32]
 800c8f4:	320c      	adds	r2, #12
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	4798      	blx	r3
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	83bb      	strh	r3, [r7, #28]
 800c8fe:	8bbb      	ldrh	r3, [r7, #28]
 800c900:	2b00      	cmp	r3, #0
 800c902:	bf14      	ite	ne
 800c904:	2301      	movne	r3, #1
 800c906:	2300      	moveq	r3, #0
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00f      	beq.n	800c92e <start_loading_io_with_options+0x1a6>
 800c90e:	6a3b      	ldr	r3, [r7, #32]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	6a3a      	ldr	r2, [r7, #32]
 800c918:	f102 000c 	add.w	r0, r2, #12
 800c91c:	6a3a      	ldr	r2, [r7, #32]
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	4611      	mov	r1, r2
 800c922:	4798      	blx	r3
 800c924:	6a38      	ldr	r0, [r7, #32]
 800c926:	f7ff fea5 	bl	800c674 <destroy_hidden_state>
 800c92a:	8bbb      	ldrh	r3, [r7, #28]
 800c92c:	e003      	b.n	800c936 <start_loading_io_with_options+0x1ae>
                            /* cleanup */ state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
                                          destroy_hidden_state(state_of_mind));
    }

    *state = state_of_mind;
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	6a3a      	ldr	r2, [r7, #32]
 800c932:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3728      	adds	r7, #40	; 0x28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
	...

0800c940 <sail_alloc_save_features>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_save_features(struct sail_save_features **save_features) {
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af02      	add	r7, sp, #8
 800c946:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(save_features);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	bf0c      	ite	eq
 800c94e:	2301      	moveq	r3, #1
 800c950:	2300      	movne	r3, #0
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	d011      	beq.n	800c97c <sail_alloc_save_features+0x3c>
 800c958:	4b25      	ldr	r3, [pc, #148]	; (800c9f0 <sail_alloc_save_features+0xb0>)
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	4b25      	ldr	r3, [pc, #148]	; (800c9f4 <sail_alloc_save_features+0xb4>)
 800c95e:	2221      	movs	r2, #33	; 0x21
 800c960:	4925      	ldr	r1, [pc, #148]	; (800c9f8 <sail_alloc_save_features+0xb8>)
 800c962:	2001      	movs	r0, #1
 800c964:	f7fe ff3e 	bl	800b7e4 <sail_log>
 800c968:	4b24      	ldr	r3, [pc, #144]	; (800c9fc <sail_alloc_save_features+0xbc>)
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	4b24      	ldr	r3, [pc, #144]	; (800ca00 <sail_alloc_save_features+0xc0>)
 800c96e:	2221      	movs	r2, #33	; 0x21
 800c970:	4921      	ldr	r1, [pc, #132]	; (800c9f8 <sail_alloc_save_features+0xb8>)
 800c972:	2001      	movs	r0, #1
 800c974:	f7fe ff36 	bl	800b7e4 <sail_log>
 800c978:	2301      	movs	r3, #1
 800c97a:	e035      	b.n	800c9e8 <sail_alloc_save_features+0xa8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_save_features), &ptr));
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	4619      	mov	r1, r3
 800c982:	2020      	movs	r0, #32
 800c984:	f7ff f826 	bl	800b9d4 <sail_malloc>
 800c988:	4603      	mov	r3, r0
 800c98a:	81fb      	strh	r3, [r7, #14]
 800c98c:	89fb      	ldrh	r3, [r7, #14]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	bf14      	ite	ne
 800c992:	2301      	movne	r3, #1
 800c994:	2300      	moveq	r3, #0
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <sail_alloc_save_features+0x60>
 800c99c:	89fb      	ldrh	r3, [r7, #14]
 800c99e:	e023      	b.n	800c9e8 <sail_alloc_save_features+0xa8>
    *save_features = ptr;
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	601a      	str	r2, [r3, #0]

    (*save_features)->pixel_formats        = NULL;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	601a      	str	r2, [r3, #0]
    (*save_features)->pixel_formats_length = 0;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	605a      	str	r2, [r3, #4]
    (*save_features)->features             = 0;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	609a      	str	r2, [r3, #8]
    (*save_features)->compressions         = NULL;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	60da      	str	r2, [r3, #12]
    (*save_features)->compressions_length  = 0;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	611a      	str	r2, [r3, #16]
    (*save_features)->default_compression  = SAIL_COMPRESSION_UNKNOWN;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	751a      	strb	r2, [r3, #20]
    (*save_features)->compression_level    = NULL;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	619a      	str	r2, [r3, #24]
    (*save_features)->tuning               = NULL;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	61da      	str	r2, [r3, #28]

    return SAIL_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	08015fc4 	.word	0x08015fc4
 800c9f4:	08015f54 	.word	0x08015f54
 800c9f8:	08015f6c 	.word	0x08015f6c
 800c9fc:	08015fd8 	.word	0x08015fd8
 800ca00:	08015fd4 	.word	0x08015fd4

0800ca04 <sail_destroy_save_features>:

void sail_destroy_save_features(struct sail_save_features *save_features) {
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]

    if (save_features == NULL) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d017      	beq.n	800ca42 <sail_destroy_save_features+0x3e>
        return;
    }

    sail_free(save_features->pixel_formats);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff f864 	bl	800bae4 <sail_free>
    sail_free(save_features->compressions);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff f85f 	bl	800bae4 <sail_free>
    sail_destroy_compression_level(save_features->compression_level);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fc fd6c 	bl	8009508 <sail_destroy_compression_level>
    sail_destroy_string_node_chain(save_features->tuning);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 f8a7 	bl	800cb88 <sail_destroy_string_node_chain>
    sail_free(save_features);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff f852 	bl	800bae4 <sail_free>
 800ca40:	e000      	b.n	800ca44 <sail_destroy_save_features+0x40>
        return;
 800ca42:	bf00      	nop
}
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <sail_destroy_save_options>:
    (*save_options)->tuning            = NULL;

    return SAIL_OK;
}

void sail_destroy_save_options(struct sail_save_options *save_options) {
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b082      	sub	sp, #8
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]

    if (save_options == NULL) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d003      	beq.n	800ca60 <sail_destroy_save_options+0x16>
        return;
    }

    sail_free(save_options);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff f843 	bl	800bae4 <sail_free>
 800ca5e:	e000      	b.n	800ca62 <sail_destroy_save_options+0x18>
        return;
 800ca60:	bf00      	nop
}
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <sail_alloc_source_image>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_source_image(struct sail_source_image **source_image) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af02      	add	r7, sp, #8
 800ca6e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(source_image);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	bf0c      	ite	eq
 800ca76:	2301      	moveq	r3, #1
 800ca78:	2300      	movne	r3, #0
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d011      	beq.n	800caa4 <sail_alloc_source_image+0x3c>
 800ca80:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <sail_alloc_source_image+0x98>)
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	4b1f      	ldr	r3, [pc, #124]	; (800cb04 <sail_alloc_source_image+0x9c>)
 800ca86:	2222      	movs	r2, #34	; 0x22
 800ca88:	491f      	ldr	r1, [pc, #124]	; (800cb08 <sail_alloc_source_image+0xa0>)
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	f7fe feaa 	bl	800b7e4 <sail_log>
 800ca90:	4b1e      	ldr	r3, [pc, #120]	; (800cb0c <sail_alloc_source_image+0xa4>)
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	4b1e      	ldr	r3, [pc, #120]	; (800cb10 <sail_alloc_source_image+0xa8>)
 800ca96:	2222      	movs	r2, #34	; 0x22
 800ca98:	491b      	ldr	r1, [pc, #108]	; (800cb08 <sail_alloc_source_image+0xa0>)
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	f7fe fea2 	bl	800b7e4 <sail_log>
 800caa0:	2301      	movs	r3, #1
 800caa2:	e029      	b.n	800caf8 <sail_alloc_source_image+0x90>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_source_image), &ptr));
 800caa4:	f107 0308 	add.w	r3, r7, #8
 800caa8:	4619      	mov	r1, r3
 800caaa:	2010      	movs	r0, #16
 800caac:	f7fe ff92 	bl	800b9d4 <sail_malloc>
 800cab0:	4603      	mov	r3, r0
 800cab2:	81fb      	strh	r3, [r7, #14]
 800cab4:	89fb      	ldrh	r3, [r7, #14]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	bf14      	ite	ne
 800caba:	2301      	movne	r3, #1
 800cabc:	2300      	moveq	r3, #0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <sail_alloc_source_image+0x60>
 800cac4:	89fb      	ldrh	r3, [r7, #14]
 800cac6:	e017      	b.n	800caf8 <sail_alloc_source_image+0x90>
    *source_image = ptr;
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	601a      	str	r2, [r3, #0]

    (*source_image)->pixel_format       = SAIL_PIXEL_FORMAT_UNKNOWN;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
    (*source_image)->chroma_subsampling = SAIL_CHROMA_SUBSAMPLING_UNKNOWN;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2200      	movs	r2, #0
 800cadc:	705a      	strb	r2, [r3, #1]
    (*source_image)->properties         = 0;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	605a      	str	r2, [r3, #4]
    (*source_image)->compression        = SAIL_COMPRESSION_UNKNOWN;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2200      	movs	r2, #0
 800caec:	721a      	strb	r2, [r3, #8]
    (*source_image)->special_properties = NULL;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	60da      	str	r2, [r3, #12]

    return SAIL_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	0801605c 	.word	0x0801605c
 800cb04:	08015fec 	.word	0x08015fec
 800cb08:	08016004 	.word	0x08016004
 800cb0c:	08016070 	.word	0x08016070
 800cb10:	0801606c 	.word	0x0801606c

0800cb14 <sail_destroy_source_image>:

void sail_destroy_source_image(struct sail_source_image *source_image) {
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]

    if (source_image == NULL) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d008      	beq.n	800cb34 <sail_destroy_source_image+0x20>
        return;
    }

    sail_destroy_hash_map(source_image->special_properties);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fd f9b6 	bl	8009e98 <sail_destroy_hash_map>
    sail_free(source_image);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7fe ffd9 	bl	800bae4 <sail_free>
 800cb32:	e000      	b.n	800cb36 <sail_destroy_source_image+0x22>
        return;
 800cb34:	bf00      	nop
}
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <sail_alloc_string_node>:

#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_string_node(struct sail_string_node **node) {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]

    SAIL_TRY(sail_private_alloc_linked_list_node((struct linked_list_node **)node));
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7fe fb33 	bl	800b1b0 <sail_private_alloc_linked_list_node>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	81fb      	strh	r3, [r7, #14]
 800cb4e:	89fb      	ldrh	r3, [r7, #14]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bf14      	ite	ne
 800cb54:	2301      	movne	r3, #1
 800cb56:	2300      	moveq	r3, #0
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <sail_alloc_string_node+0x26>
 800cb5e:	89fb      	ldrh	r3, [r7, #14]
 800cb60:	e000      	b.n	800cb64 <sail_alloc_string_node+0x28>

    return SAIL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <sail_destroy_string_node>:

void sail_destroy_string_node(struct sail_string_node *node) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node((struct linked_list_node *)node,
 800cb74:	4903      	ldr	r1, [pc, #12]	; (800cb84 <sail_destroy_string_node+0x18>)
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7fe fb64 	bl	800b244 <sail_private_destroy_linked_list_node>
                                          (linked_list_value_deallocator_t)&sail_free);
}
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	0800bae5 	.word	0x0800bae5

0800cb88 <sail_destroy_string_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_free));

    return SAIL_OK;
}

void sail_destroy_string_node_chain(struct sail_string_node *node) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 800cb90:	4903      	ldr	r1, [pc, #12]	; (800cba0 <sail_destroy_string_node_chain+0x18>)
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7fe fbe8 	bl	800b368 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_free);
}
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	0800bae5 	.word	0x0800bae5

0800cba4 <sail_split_into_string_node_chain>:
                                                      (linked_list_value_deallocator_t)&sail_free));

    return SAIL_OK;
}

sail_status_t sail_split_into_string_node_chain(const char *value, struct sail_string_node **target_string_node) {
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08a      	sub	sp, #40	; 0x28
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(value);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	bf0c      	ite	eq
 800cbb4:	2301      	moveq	r3, #1
 800cbb6:	2300      	movne	r3, #0
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d011      	beq.n	800cbe2 <sail_split_into_string_node_chain+0x3e>
 800cbbe:	4b41      	ldr	r3, [pc, #260]	; (800ccc4 <sail_split_into_string_node_chain+0x120>)
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	4b41      	ldr	r3, [pc, #260]	; (800ccc8 <sail_split_into_string_node_chain+0x124>)
 800cbc4:	2247      	movs	r2, #71	; 0x47
 800cbc6:	4941      	ldr	r1, [pc, #260]	; (800cccc <sail_split_into_string_node_chain+0x128>)
 800cbc8:	2001      	movs	r0, #1
 800cbca:	f7fe fe0b 	bl	800b7e4 <sail_log>
 800cbce:	4b40      	ldr	r3, [pc, #256]	; (800ccd0 <sail_split_into_string_node_chain+0x12c>)
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	4b40      	ldr	r3, [pc, #256]	; (800ccd4 <sail_split_into_string_node_chain+0x130>)
 800cbd4:	2247      	movs	r2, #71	; 0x47
 800cbd6:	493d      	ldr	r1, [pc, #244]	; (800cccc <sail_split_into_string_node_chain+0x128>)
 800cbd8:	2001      	movs	r0, #1
 800cbda:	f7fe fe03 	bl	800b7e4 <sail_log>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e06b      	b.n	800ccba <sail_split_into_string_node_chain+0x116>
    SAIL_CHECK_PTR(target_string_node);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bf0c      	ite	eq
 800cbe8:	2301      	moveq	r3, #1
 800cbea:	2300      	movne	r3, #0
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d011      	beq.n	800cc16 <sail_split_into_string_node_chain+0x72>
 800cbf2:	4b39      	ldr	r3, [pc, #228]	; (800ccd8 <sail_split_into_string_node_chain+0x134>)
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4b34      	ldr	r3, [pc, #208]	; (800ccc8 <sail_split_into_string_node_chain+0x124>)
 800cbf8:	2248      	movs	r2, #72	; 0x48
 800cbfa:	4934      	ldr	r1, [pc, #208]	; (800cccc <sail_split_into_string_node_chain+0x128>)
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	f7fe fdf1 	bl	800b7e4 <sail_log>
 800cc02:	4b33      	ldr	r3, [pc, #204]	; (800ccd0 <sail_split_into_string_node_chain+0x12c>)
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	4b33      	ldr	r3, [pc, #204]	; (800ccd4 <sail_split_into_string_node_chain+0x130>)
 800cc08:	2248      	movs	r2, #72	; 0x48
 800cc0a:	4930      	ldr	r1, [pc, #192]	; (800cccc <sail_split_into_string_node_chain+0x128>)
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	f7fe fde9 	bl	800b7e4 <sail_log>
 800cc12:	2301      	movs	r3, #1
 800cc14:	e051      	b.n	800ccba <sail_split_into_string_node_chain+0x116>

    struct sail_string_node *result_string_node = NULL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	60fb      	str	r3, [r7, #12]
    struct sail_string_node **last_string_node = &result_string_node;
 800cc1a:	f107 030c 	add.w	r3, r7, #12
 800cc1e:	61fb      	str	r3, [r7, #28]

    const char *separator = ";";
 800cc20:	4b2e      	ldr	r3, [pc, #184]	; (800ccdc <sail_split_into_string_node_chain+0x138>)
 800cc22:	61bb      	str	r3, [r7, #24]

    while (*(value += strspn(value, separator)) != '\0') {
 800cc24:	e039      	b.n	800cc9a <sail_split_into_string_node_chain+0xf6>
        size_t length = strcspn(value, separator);
 800cc26:	69b9      	ldr	r1, [r7, #24]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f003 fdf5 	bl	8010818 <strcspn>
 800cc2e:	6178      	str	r0, [r7, #20]

        struct sail_string_node *string_node;
        SAIL_TRY(sail_alloc_string_node(&string_node));
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff ff81 	bl	800cb3c <sail_alloc_string_node>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	827b      	strh	r3, [r7, #18]
 800cc3e:	8a7b      	ldrh	r3, [r7, #18]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	bf14      	ite	ne
 800cc44:	2301      	movne	r3, #1
 800cc46:	2300      	moveq	r3, #0
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <sail_split_into_string_node_chain+0xae>
 800cc4e:	8a7b      	ldrh	r3, [r7, #18]
 800cc50:	e033      	b.n	800ccba <sail_split_into_string_node_chain+0x116>

        SAIL_TRY_OR_CLEANUP(sail_strdup_length(value, length, &string_node->string),
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	461a      	mov	r2, r3
 800cc56:	6979      	ldr	r1, [r7, #20]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f8b3 	bl	800cdc4 <sail_strdup_length>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	823b      	strh	r3, [r7, #16]
 800cc62:	8a3b      	ldrh	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	bf14      	ite	ne
 800cc68:	2301      	movne	r3, #1
 800cc6a:	2300      	moveq	r3, #0
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d009      	beq.n	800cc86 <sail_split_into_string_node_chain+0xe2>
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7ff ff87 	bl	800cb88 <sail_destroy_string_node_chain>
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff ff75 	bl	800cb6c <sail_destroy_string_node>
 800cc82:	8a3b      	ldrh	r3, [r7, #16]
 800cc84:	e019      	b.n	800ccba <sail_split_into_string_node_chain+0x116>
                            /* cleanup */ sail_destroy_string_node_chain(result_string_node),
                                          sail_destroy_string_node(string_node));

        *last_string_node = string_node;
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	601a      	str	r2, [r3, #0]
        last_string_node = &string_node->next;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	61fb      	str	r3, [r7, #28]

        value += length;
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	4413      	add	r3, r2
 800cc98:	607b      	str	r3, [r7, #4]
    while (*(value += strspn(value, separator)) != '\0') {
 800cc9a:	69b9      	ldr	r1, [r7, #24]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f003 ffe4 	bl	8010c6a <strspn>
 800cca2:	4602      	mov	r2, r0
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4413      	add	r3, r2
 800cca8:	607b      	str	r3, [r7, #4]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1b9      	bne.n	800cc26 <sail_split_into_string_node_chain+0x82>
    }

    *target_string_node = result_string_node;
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3720      	adds	r7, #32
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	08016104 	.word	0x08016104
 800ccc8:	08016094 	.word	0x08016094
 800cccc:	080160ac 	.word	0x080160ac
 800ccd0:	08016110 	.word	0x08016110
 800ccd4:	0801610c 	.word	0x0801610c
 800ccd8:	08016124 	.word	0x08016124
 800ccdc:	08016138 	.word	0x08016138

0800cce0 <sail_memdup>:

/*
 * Public functions.
 */

sail_status_t sail_memdup(const void *input, size_t input_size, void **output) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]

    if (input == NULL) {
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d104      	bne.n	800ccfc <sail_memdup+0x1c>
        *output = NULL;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e02a      	b.n	800cd52 <sail_memdup+0x72>
    }

    if (input_size == 0) {
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d10f      	bne.n	800cd22 <sail_memdup+0x42>
        SAIL_LOG_ERROR("Cannot duplicate 0 bytes");
 800cd02:	4b16      	ldr	r3, [pc, #88]	; (800cd5c <sail_memdup+0x7c>)
 800cd04:	2254      	movs	r2, #84	; 0x54
 800cd06:	4916      	ldr	r1, [pc, #88]	; (800cd60 <sail_memdup+0x80>)
 800cd08:	2001      	movs	r0, #1
 800cd0a:	f7fe fd6b 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 800cd0e:	4b15      	ldr	r3, [pc, #84]	; (800cd64 <sail_memdup+0x84>)
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	4b15      	ldr	r3, [pc, #84]	; (800cd68 <sail_memdup+0x88>)
 800cd14:	2255      	movs	r2, #85	; 0x55
 800cd16:	4912      	ldr	r1, [pc, #72]	; (800cd60 <sail_memdup+0x80>)
 800cd18:	2001      	movs	r0, #1
 800cd1a:	f7fe fd63 	bl	800b7e4 <sail_log>
 800cd1e:	2309      	movs	r3, #9
 800cd20:	e017      	b.n	800cd52 <sail_memdup+0x72>
    }

    SAIL_TRY(sail_malloc(input_size, output));
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	68b8      	ldr	r0, [r7, #8]
 800cd26:	f7fe fe55 	bl	800b9d4 <sail_malloc>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	82fb      	strh	r3, [r7, #22]
 800cd2e:	8afb      	ldrh	r3, [r7, #22]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bf14      	ite	ne
 800cd34:	2301      	movne	r3, #1
 800cd36:	2300      	moveq	r3, #0
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d001      	beq.n	800cd42 <sail_memdup+0x62>
 800cd3e:	8afb      	ldrh	r3, [r7, #22]
 800cd40:	e007      	b.n	800cd52 <sail_memdup+0x72>

    memcpy(*output, input, input_size);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	68f9      	ldr	r1, [r7, #12]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f002 feda 	bl	800fb04 <memcpy>

    return SAIL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	08016144 	.word	0x08016144
 800cd60:	08016160 	.word	0x08016160
 800cd64:	080161b4 	.word	0x080161b4
 800cd68:	080161b0 	.word	0x080161b0

0800cd6c <sail_strdup>:

sail_status_t sail_strdup(const char *input, char **output) {
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]

    if (input == NULL) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d104      	bne.n	800cd86 <sail_strdup+0x1a>
        *output = NULL;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e01a      	b.n	800cdbc <sail_strdup+0x50>
    }

    void *ptr;
    SAIL_TRY(sail_memdup(input, strlen(input) + 1, &ptr));
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7f3 fbb4 	bl	80004f4 <strlen>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	3301      	adds	r3, #1
 800cd90:	f107 0208 	add.w	r2, r7, #8
 800cd94:	4619      	mov	r1, r3
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff ffa2 	bl	800cce0 <sail_memdup>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	81fb      	strh	r3, [r7, #14]
 800cda0:	89fb      	ldrh	r3, [r7, #14]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bf14      	ite	ne
 800cda6:	2301      	movne	r3, #1
 800cda8:	2300      	moveq	r3, #0
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <sail_strdup+0x48>
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	e003      	b.n	800cdbc <sail_strdup+0x50>
    *output = ptr;
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <sail_strdup_length>:

sail_status_t sail_strdup_length(const char *input, size_t length, char **output) {
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b088      	sub	sp, #32
 800cdc8:	af02      	add	r7, sp, #8
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]

    if (input == NULL) {
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d104      	bne.n	800cde0 <sail_strdup_length+0x1c>
        *output = NULL;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	e037      	b.n	800ce50 <sail_strdup_length+0x8c>
    }

    if (length == 0) {
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10f      	bne.n	800ce06 <sail_strdup_length+0x42>
        SAIL_LOG_ERROR("Cannot duplicate 0 characters");
 800cde6:	4b1c      	ldr	r3, [pc, #112]	; (800ce58 <sail_strdup_length+0x94>)
 800cde8:	2275      	movs	r2, #117	; 0x75
 800cdea:	491c      	ldr	r1, [pc, #112]	; (800ce5c <sail_strdup_length+0x98>)
 800cdec:	2001      	movs	r0, #1
 800cdee:	f7fe fcf9 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 800cdf2:	4b1b      	ldr	r3, [pc, #108]	; (800ce60 <sail_strdup_length+0x9c>)
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	4b1b      	ldr	r3, [pc, #108]	; (800ce64 <sail_strdup_length+0xa0>)
 800cdf8:	2276      	movs	r2, #118	; 0x76
 800cdfa:	4918      	ldr	r1, [pc, #96]	; (800ce5c <sail_strdup_length+0x98>)
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	f7fe fcf1 	bl	800b7e4 <sail_log>
 800ce02:	2309      	movs	r3, #9
 800ce04:	e024      	b.n	800ce50 <sail_strdup_length+0x8c>
    }

    void *ptr;
    SAIL_TRY(sail_malloc(length+1, &ptr));
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	f107 0210 	add.w	r2, r7, #16
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe fddf 	bl	800b9d4 <sail_malloc>
 800ce16:	4603      	mov	r3, r0
 800ce18:	82fb      	strh	r3, [r7, #22]
 800ce1a:	8afb      	ldrh	r3, [r7, #22]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bf14      	ite	ne
 800ce20:	2301      	movne	r3, #1
 800ce22:	2300      	moveq	r3, #0
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <sail_strdup_length+0x6a>
 800ce2a:	8afb      	ldrh	r3, [r7, #22]
 800ce2c:	e010      	b.n	800ce50 <sail_strdup_length+0x8c>
    *output = ptr;
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	601a      	str	r2, [r3, #0]

    memcpy(*output, input, length);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	68f9      	ldr	r1, [r7, #12]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f002 fe61 	bl	800fb04 <memcpy>
    (*output)[length] = '\0';
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	4413      	add	r3, r2
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	701a      	strb	r2, [r3, #0]

    return SAIL_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	080161d0 	.word	0x080161d0
 800ce5c:	08016160 	.word	0x08016160
 800ce60:	080161b4 	.word	0x080161b4
 800ce64:	080161b0 	.word	0x080161b0

0800ce68 <sail_to_lower>:
    va_end(args);

    return SAIL_OK;
}

void sail_to_lower(char *str) {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

    if (str == NULL) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d025      	beq.n	800cec2 <sail_to_lower+0x5a>
        return;
    }

    size_t length = strlen(str);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7f3 fb3c 	bl	80004f4 <strlen>
 800ce7c:	6138      	str	r0, [r7, #16]

    for (size_t i = 0; i < length; i++) {
 800ce7e:	2300      	movs	r3, #0
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e019      	b.n	800ceb8 <sail_to_lower+0x50>
        str[i] = (char)tolower(str[i]);
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	4413      	add	r3, r2
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	73fb      	strb	r3, [r7, #15]
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	3301      	adds	r3, #1
 800ce92:	4a0e      	ldr	r2, [pc, #56]	; (800cecc <sail_to_lower+0x64>)
 800ce94:	4413      	add	r3, r2
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	f003 0303 	and.w	r3, r3, #3
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d102      	bne.n	800cea6 <sail_to_lower+0x3e>
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
 800cea2:	3320      	adds	r3, #32
 800cea4:	e000      	b.n	800cea8 <sail_to_lower+0x40>
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	440a      	add	r2, r1
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	7013      	strb	r3, [r2, #0]
    for (size_t i = 0; i < length; i++) {
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d3e1      	bcc.n	800ce84 <sail_to_lower+0x1c>
 800cec0:	e000      	b.n	800cec4 <sail_to_lower+0x5c>
        return;
 800cec2:	bf00      	nop
    }
}
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	080172a6 	.word	0x080172a6

0800ced0 <sail_string_hash>:
    *output = output_local;

    return SAIL_OK;
}

sail_status_t sail_string_hash(const char *str, uint64_t *hash) {
 800ced0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ced4:	b086      	sub	sp, #24
 800ced6:	af02      	add	r7, sp, #8
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(str);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	bf0c      	ite	eq
 800cee2:	2301      	moveq	r3, #1
 800cee4:	2300      	movne	r3, #0
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d011      	beq.n	800cf10 <sail_string_hash+0x40>
 800ceec:	4b36      	ldr	r3, [pc, #216]	; (800cfc8 <sail_string_hash+0xf8>)
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4b36      	ldr	r3, [pc, #216]	; (800cfcc <sail_string_hash+0xfc>)
 800cef2:	22e2      	movs	r2, #226	; 0xe2
 800cef4:	4936      	ldr	r1, [pc, #216]	; (800cfd0 <sail_string_hash+0x100>)
 800cef6:	2001      	movs	r0, #1
 800cef8:	f7fe fc74 	bl	800b7e4 <sail_log>
 800cefc:	4b35      	ldr	r3, [pc, #212]	; (800cfd4 <sail_string_hash+0x104>)
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	4b35      	ldr	r3, [pc, #212]	; (800cfd8 <sail_string_hash+0x108>)
 800cf02:	22e2      	movs	r2, #226	; 0xe2
 800cf04:	4932      	ldr	r1, [pc, #200]	; (800cfd0 <sail_string_hash+0x100>)
 800cf06:	2001      	movs	r0, #1
 800cf08:	f7fe fc6c 	bl	800b7e4 <sail_log>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e056      	b.n	800cfbe <sail_string_hash+0xee>
    SAIL_CHECK_PTR(hash);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bf0c      	ite	eq
 800cf16:	2301      	moveq	r3, #1
 800cf18:	2300      	movne	r3, #0
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d011      	beq.n	800cf44 <sail_string_hash+0x74>
 800cf20:	4b2e      	ldr	r3, [pc, #184]	; (800cfdc <sail_string_hash+0x10c>)
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	4b29      	ldr	r3, [pc, #164]	; (800cfcc <sail_string_hash+0xfc>)
 800cf26:	22e3      	movs	r2, #227	; 0xe3
 800cf28:	4929      	ldr	r1, [pc, #164]	; (800cfd0 <sail_string_hash+0x100>)
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	f7fe fc5a 	bl	800b7e4 <sail_log>
 800cf30:	4b28      	ldr	r3, [pc, #160]	; (800cfd4 <sail_string_hash+0x104>)
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	4b28      	ldr	r3, [pc, #160]	; (800cfd8 <sail_string_hash+0x108>)
 800cf36:	22e3      	movs	r2, #227	; 0xe3
 800cf38:	4925      	ldr	r1, [pc, #148]	; (800cfd0 <sail_string_hash+0x100>)
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	f7fe fc52 	bl	800b7e4 <sail_log>
 800cf40:	2301      	movs	r3, #1
 800cf42:	e03c      	b.n	800cfbe <sail_string_hash+0xee>

    const unsigned char *ustr = (const unsigned char *)str;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	60fb      	str	r3, [r7, #12]

    if (*ustr == '\0') {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d109      	bne.n	800cf64 <sail_string_hash+0x94>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_EMPTY_STRING);
 800cf50:	4b23      	ldr	r3, [pc, #140]	; (800cfe0 <sail_string_hash+0x110>)
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	4b20      	ldr	r3, [pc, #128]	; (800cfd8 <sail_string_hash+0x108>)
 800cf56:	22e8      	movs	r2, #232	; 0xe8
 800cf58:	491d      	ldr	r1, [pc, #116]	; (800cfd0 <sail_string_hash+0x100>)
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	f7fe fc42 	bl	800b7e4 <sail_log>
 800cf60:	2313      	movs	r3, #19
 800cf62:	e02c      	b.n	800cfbe <sail_string_hash+0xee>
    }

    *hash = 5381; /* Magic number, never explained. */
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	f241 5205 	movw	r2, #5381	; 0x1505
 800cf6a:	f04f 0300 	mov.w	r3, #0
 800cf6e:	e9c1 2300 	strd	r2, r3, [r1]
    unsigned c;

    while ((c = *ustr++) != 0) {
 800cf72:	e01b      	b.n	800cfac <sail_string_hash+0xdc>
        *hash = ((*hash << 5) + *hash) + c; /* hash * 33 + c */
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	f04f 0300 	mov.w	r3, #0
 800cf82:	014b      	lsls	r3, r1, #5
 800cf84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cf88:	0142      	lsls	r2, r0, #5
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf90:	1814      	adds	r4, r2, r0
 800cf92:	eb43 0501 	adc.w	r5, r3, r1
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4698      	mov	r8, r3
 800cf9c:	4691      	mov	r9, r2
 800cf9e:	eb14 0a08 	adds.w	sl, r4, r8
 800cfa2:	eb45 0b09 	adc.w	fp, r5, r9
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	e9c3 ab00 	strd	sl, fp, [r3]
    while ((c = *ustr++) != 0) {
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	1c5a      	adds	r2, r3, #1
 800cfb0:	60fa      	str	r2, [r7, #12]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	60bb      	str	r3, [r7, #8]
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1db      	bne.n	800cf74 <sail_string_hash+0xa4>
    }

    return SAIL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfc8:	08016274 	.word	0x08016274
 800cfcc:	0801621c 	.word	0x0801621c
 800cfd0:	08016160 	.word	0x08016160
 800cfd4:	0801623c 	.word	0x0801623c
 800cfd8:	080161b0 	.word	0x080161b0
 800cfdc:	08016278 	.word	0x08016278
 800cfe0:	08016280 	.word	0x08016280

0800cfe4 <sail_bits_per_pixel>:

sail_status_t sail_bits_per_pixel(enum SailPixelFormat pixel_format, unsigned *result) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	4603      	mov	r3, r0
 800cfec:	6039      	str	r1, [r7, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]

    SAIL_CHECK_PTR(result);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bf0c      	ite	eq
 800cff6:	2301      	moveq	r3, #1
 800cff8:	2300      	movne	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d011      	beq.n	800d024 <sail_bits_per_pixel+0x40>
 800d000:	4bbb      	ldr	r3, [pc, #748]	; (800d2f0 <sail_bits_per_pixel+0x30c>)
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	4bbb      	ldr	r3, [pc, #748]	; (800d2f4 <sail_bits_per_pixel+0x310>)
 800d006:	22f7      	movs	r2, #247	; 0xf7
 800d008:	49bb      	ldr	r1, [pc, #748]	; (800d2f8 <sail_bits_per_pixel+0x314>)
 800d00a:	2001      	movs	r0, #1
 800d00c:	f7fe fbea 	bl	800b7e4 <sail_log>
 800d010:	4bba      	ldr	r3, [pc, #744]	; (800d2fc <sail_bits_per_pixel+0x318>)
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	4bba      	ldr	r3, [pc, #744]	; (800d300 <sail_bits_per_pixel+0x31c>)
 800d016:	22f7      	movs	r2, #247	; 0xf7
 800d018:	49b7      	ldr	r1, [pc, #732]	; (800d2f8 <sail_bits_per_pixel+0x314>)
 800d01a:	2001      	movs	r0, #1
 800d01c:	f7fe fbe2 	bl	800b7e4 <sail_log>
 800d020:	2301      	movs	r3, #1
 800d022:	e1ad      	b.n	800d380 <sail_bits_per_pixel+0x39c>

    switch (pixel_format) {
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b4a      	cmp	r3, #74	; 0x4a
 800d028:	f200 81a0 	bhi.w	800d36c <sail_bits_per_pixel+0x388>
 800d02c:	a201      	add	r2, pc, #4	; (adr r2, 800d034 <sail_bits_per_pixel+0x50>)
 800d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d032:	bf00      	nop
 800d034:	0800d161 	.word	0x0800d161
 800d038:	0800d175 	.word	0x0800d175
 800d03c:	0800d17f 	.word	0x0800d17f
 800d040:	0800d189 	.word	0x0800d189
 800d044:	0800d193 	.word	0x0800d193
 800d048:	0800d19d 	.word	0x0800d19d
 800d04c:	0800d1a7 	.word	0x0800d1a7
 800d050:	0800d1b1 	.word	0x0800d1b1
 800d054:	0800d1bb 	.word	0x0800d1bb
 800d058:	0800d1c5 	.word	0x0800d1c5
 800d05c:	0800d1cf 	.word	0x0800d1cf
 800d060:	0800d1d9 	.word	0x0800d1d9
 800d064:	0800d1e3 	.word	0x0800d1e3
 800d068:	0800d1ed 	.word	0x0800d1ed
 800d06c:	0800d1f7 	.word	0x0800d1f7
 800d070:	0800d201 	.word	0x0800d201
 800d074:	0800d20b 	.word	0x0800d20b
 800d078:	0800d215 	.word	0x0800d215
 800d07c:	0800d21f 	.word	0x0800d21f
 800d080:	0800d229 	.word	0x0800d229
 800d084:	0800d233 	.word	0x0800d233
 800d088:	0800d23d 	.word	0x0800d23d
 800d08c:	0800d247 	.word	0x0800d247
 800d090:	0800d251 	.word	0x0800d251
 800d094:	0800d25b 	.word	0x0800d25b
 800d098:	0800d265 	.word	0x0800d265
 800d09c:	0800d26f 	.word	0x0800d26f
 800d0a0:	0800d279 	.word	0x0800d279
 800d0a4:	0800d279 	.word	0x0800d279
 800d0a8:	0800d279 	.word	0x0800d279
 800d0ac:	0800d279 	.word	0x0800d279
 800d0b0:	0800d283 	.word	0x0800d283
 800d0b4:	0800d283 	.word	0x0800d283
 800d0b8:	0800d28d 	.word	0x0800d28d
 800d0bc:	0800d28d 	.word	0x0800d28d
 800d0c0:	0800d297 	.word	0x0800d297
 800d0c4:	0800d297 	.word	0x0800d297
 800d0c8:	0800d297 	.word	0x0800d297
 800d0cc:	0800d297 	.word	0x0800d297
 800d0d0:	0800d297 	.word	0x0800d297
 800d0d4:	0800d297 	.word	0x0800d297
 800d0d8:	0800d297 	.word	0x0800d297
 800d0dc:	0800d297 	.word	0x0800d297
 800d0e0:	0800d2a1 	.word	0x0800d2a1
 800d0e4:	0800d2a1 	.word	0x0800d2a1
 800d0e8:	0800d2a1 	.word	0x0800d2a1
 800d0ec:	0800d2a1 	.word	0x0800d2a1
 800d0f0:	0800d2a1 	.word	0x0800d2a1
 800d0f4:	0800d2a1 	.word	0x0800d2a1
 800d0f8:	0800d2a1 	.word	0x0800d2a1
 800d0fc:	0800d2a1 	.word	0x0800d2a1
 800d100:	0800d2ab 	.word	0x0800d2ab
 800d104:	0800d2ab 	.word	0x0800d2ab
 800d108:	0800d2ab 	.word	0x0800d2ab
 800d10c:	0800d2ab 	.word	0x0800d2ab
 800d110:	0800d2ab 	.word	0x0800d2ab
 800d114:	0800d2ab 	.word	0x0800d2ab
 800d118:	0800d2ab 	.word	0x0800d2ab
 800d11c:	0800d2ab 	.word	0x0800d2ab
 800d120:	0800d2b5 	.word	0x0800d2b5
 800d124:	0800d2bf 	.word	0x0800d2bf
 800d128:	0800d2c9 	.word	0x0800d2c9
 800d12c:	0800d2d3 	.word	0x0800d2d3
 800d130:	0800d2dd 	.word	0x0800d2dd
 800d134:	0800d2e7 	.word	0x0800d2e7
 800d138:	0800d309 	.word	0x0800d309
 800d13c:	0800d313 	.word	0x0800d313
 800d140:	0800d31d 	.word	0x0800d31d
 800d144:	0800d327 	.word	0x0800d327
 800d148:	0800d331 	.word	0x0800d331
 800d14c:	0800d33b 	.word	0x0800d33b
 800d150:	0800d345 	.word	0x0800d345
 800d154:	0800d34f 	.word	0x0800d34f
 800d158:	0800d359 	.word	0x0800d359
 800d15c:	0800d363 	.word	0x0800d363
        case SAIL_PIXEL_FORMAT_UNKNOWN: SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_PIXEL_FORMAT);
 800d160:	4b68      	ldr	r3, [pc, #416]	; (800d304 <sail_bits_per_pixel+0x320>)
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	4b66      	ldr	r3, [pc, #408]	; (800d300 <sail_bits_per_pixel+0x31c>)
 800d166:	22fa      	movs	r2, #250	; 0xfa
 800d168:	4963      	ldr	r1, [pc, #396]	; (800d2f8 <sail_bits_per_pixel+0x314>)
 800d16a:	2001      	movs	r0, #1
 800d16c:	f7fe fb3a 	bl	800b7e4 <sail_log>
 800d170:	23c9      	movs	r3, #201	; 0xc9
 800d172:	e105      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1:   *result = 1;   return SAIL_OK;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	2201      	movs	r2, #1
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	2300      	movs	r3, #0
 800d17c:	e100      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2:   *result = 2;   return SAIL_OK;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2202      	movs	r2, #2
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	2300      	movs	r3, #0
 800d186:	e0fb      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4:   *result = 4;   return SAIL_OK;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2204      	movs	r2, #4
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	2300      	movs	r3, #0
 800d190:	e0f6      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8:   *result = 8;   return SAIL_OK;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2208      	movs	r2, #8
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	2300      	movs	r3, #0
 800d19a:	e0f1      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16:  *result = 16;  return SAIL_OK;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2210      	movs	r2, #16
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e0ec      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP24:  *result = 24;  return SAIL_OK;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2218      	movs	r2, #24
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e0e7      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32:  *result = 32;  return SAIL_OK;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2220      	movs	r2, #32
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e0e2      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48:  *result = 48;  return SAIL_OK;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2230      	movs	r2, #48	; 0x30
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e0dd      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64:  *result = 64;  return SAIL_OK;
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2240      	movs	r2, #64	; 0x40
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e0d8      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP72:  *result = 72;  return SAIL_OK;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	2248      	movs	r2, #72	; 0x48
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e0d3      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP96:  *result = 96;  return SAIL_OK;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	2260      	movs	r2, #96	; 0x60
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e0ce      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP128: *result = 128; return SAIL_OK;
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2280      	movs	r2, #128	; 0x80
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e0c9      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:  *result = 1; return SAIL_OK;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	e0c4      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:  *result = 2; return SAIL_OK;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e0bf      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:  *result = 4; return SAIL_OK;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2204      	movs	r2, #4
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	2300      	movs	r3, #0
 800d208:	e0ba      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:  *result = 8; return SAIL_OK;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2208      	movs	r2, #8
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	2300      	movs	r3, #0
 800d212:	e0b5      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED: *result = 16; return SAIL_OK;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2210      	movs	r2, #16
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	2300      	movs	r3, #0
 800d21c:	e0b0      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE:  *result = 1; return SAIL_OK;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2201      	movs	r2, #1
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	2300      	movs	r3, #0
 800d226:	e0ab      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE:  *result = 2; return SAIL_OK;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	2202      	movs	r2, #2
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	2300      	movs	r3, #0
 800d230:	e0a6      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE:  *result = 4; return SAIL_OK;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2204      	movs	r2, #4
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	2300      	movs	r3, #0
 800d23a:	e0a1      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE:  *result = 8; return SAIL_OK;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	2208      	movs	r2, #8
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	2300      	movs	r3, #0
 800d244:	e09c      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE: *result = 16; return SAIL_OK;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2210      	movs	r2, #16
 800d24a:	601a      	str	r2, [r3, #0]
 800d24c:	2300      	movs	r3, #0
 800d24e:	e097      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA:  *result = 4; return SAIL_OK;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2204      	movs	r2, #4
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	2300      	movs	r3, #0
 800d258:	e092      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA:  *result = 8; return SAIL_OK;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2208      	movs	r2, #8
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	2300      	movs	r3, #0
 800d262:	e08d      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA: *result = 16; return SAIL_OK;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2210      	movs	r2, #16
 800d268:	601a      	str	r2, [r3, #0]
 800d26a:	2300      	movs	r3, #0
 800d26c:	e088      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA: *result = 32; return SAIL_OK;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2220      	movs	r2, #32
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	2300      	movs	r3, #0
 800d276:	e083      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP16_RGB555:
        case SAIL_PIXEL_FORMAT_BPP16_BGR555:
        case SAIL_PIXEL_FORMAT_BPP16_RGB565:
        case SAIL_PIXEL_FORMAT_BPP16_BGR565: *result = 16; return SAIL_OK;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	2210      	movs	r2, #16
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	2300      	movs	r3, #0
 800d280:	e07e      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_RGB:
        case SAIL_PIXEL_FORMAT_BPP24_BGR: *result = 24; return SAIL_OK;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2218      	movs	r2, #24
 800d286:	601a      	str	r2, [r3, #0]
 800d288:	2300      	movs	r3, #0
 800d28a:	e079      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP48_RGB:
        case SAIL_PIXEL_FORMAT_BPP48_BGR: *result = 48; return SAIL_OK;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	2230      	movs	r2, #48	; 0x30
 800d290:	601a      	str	r2, [r3, #0]
 800d292:	2300      	movs	r3, #0
 800d294:	e074      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_XRGB:
        case SAIL_PIXEL_FORMAT_BPP16_XBGR:
        case SAIL_PIXEL_FORMAT_BPP16_RGBA:
        case SAIL_PIXEL_FORMAT_BPP16_BGRA:
        case SAIL_PIXEL_FORMAT_BPP16_ARGB:
        case SAIL_PIXEL_FORMAT_BPP16_ABGR: *result = 16; return SAIL_OK;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2210      	movs	r2, #16
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	2300      	movs	r3, #0
 800d29e:	e06f      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32_XRGB:
        case SAIL_PIXEL_FORMAT_BPP32_XBGR:
        case SAIL_PIXEL_FORMAT_BPP32_RGBA:
        case SAIL_PIXEL_FORMAT_BPP32_BGRA:
        case SAIL_PIXEL_FORMAT_BPP32_ARGB:
        case SAIL_PIXEL_FORMAT_BPP32_ABGR: *result = 32; return SAIL_OK;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2220      	movs	r2, #32
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e06a      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_XRGB:
        case SAIL_PIXEL_FORMAT_BPP64_XBGR:
        case SAIL_PIXEL_FORMAT_BPP64_RGBA:
        case SAIL_PIXEL_FORMAT_BPP64_BGRA:
        case SAIL_PIXEL_FORMAT_BPP64_ARGB:
        case SAIL_PIXEL_FORMAT_BPP64_ABGR: *result = 64; return SAIL_OK;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2240      	movs	r2, #64	; 0x40
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	e065      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_CMYK: *result = 32; return SAIL_OK;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2220      	movs	r2, #32
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e060      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_CMYK: *result = 64; return SAIL_OK;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	2240      	movs	r2, #64	; 0x40
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e05b      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_YCBCR: *result = 24; return SAIL_OK;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	2218      	movs	r2, #24
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	e056      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_YCCK: *result = 32; return SAIL_OK;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e051      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LAB: *result = 24; return SAIL_OK;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	2218      	movs	r2, #24
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	e04c      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LAB: *result = 40; return SAIL_OK;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2228      	movs	r2, #40	; 0x28
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	e047      	b.n	800d380 <sail_bits_per_pixel+0x39c>
 800d2f0:	08016298 	.word	0x08016298
 800d2f4:	0801621c 	.word	0x0801621c
 800d2f8:	08016160 	.word	0x08016160
 800d2fc:	0801623c 	.word	0x0801623c
 800d300:	080161b0 	.word	0x080161b0
 800d304:	080162a0 	.word	0x080162a0

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LUV: *result = 24; return SAIL_OK;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	2218      	movs	r2, #24
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	2300      	movs	r3, #0
 800d310:	e036      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LUV: *result = 40; return SAIL_OK;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2228      	movs	r2, #40	; 0x28
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	2300      	movs	r3, #0
 800d31a:	e031      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_YUV: *result = 24; return SAIL_OK;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2218      	movs	r2, #24
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	2300      	movs	r3, #0
 800d324:	e02c      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP30_YUV: *result = 30; return SAIL_OK;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	221e      	movs	r2, #30
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	2300      	movs	r3, #0
 800d32e:	e027      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP36_YUV: *result = 36; return SAIL_OK;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2224      	movs	r2, #36	; 0x24
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	2300      	movs	r3, #0
 800d338:	e022      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48_YUV: *result = 48; return SAIL_OK;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2230      	movs	r2, #48	; 0x30
 800d33e:	601a      	str	r2, [r3, #0]
 800d340:	2300      	movs	r3, #0
 800d342:	e01d      	b.n	800d380 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_YUVA: *result = 32; return SAIL_OK;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	2220      	movs	r2, #32
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	2300      	movs	r3, #0
 800d34c:	e018      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_YUVA: *result = 40; return SAIL_OK;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	2228      	movs	r2, #40	; 0x28
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	2300      	movs	r3, #0
 800d356:	e013      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48_YUVA: *result = 48; return SAIL_OK;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2230      	movs	r2, #48	; 0x30
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	2300      	movs	r3, #0
 800d360:	e00e      	b.n	800d380 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_YUVA: *result = 64; return SAIL_OK;
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2240      	movs	r2, #64	; 0x40
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	2300      	movs	r3, #0
 800d36a:	e009      	b.n	800d380 <sail_bits_per_pixel+0x39c>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_PIXEL_FORMAT);
 800d36c:	4b06      	ldr	r3, [pc, #24]	; (800d388 <sail_bits_per_pixel+0x3a4>)
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4b06      	ldr	r3, [pc, #24]	; (800d38c <sail_bits_per_pixel+0x3a8>)
 800d372:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800d376:	4906      	ldr	r1, [pc, #24]	; (800d390 <sail_bits_per_pixel+0x3ac>)
 800d378:	2001      	movs	r0, #1
 800d37a:	f7fe fa33 	bl	800b7e4 <sail_log>
 800d37e:	23c9      	movs	r3, #201	; 0xc9
}
 800d380:	4618      	mov	r0, r3
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	080162a0 	.word	0x080162a0
 800d38c:	080161b0 	.word	0x080161b0
 800d390:	08016160 	.word	0x08016160

0800d394 <sail_bytes_per_line>:
    SAIL_TRY(sail_compare_bits_per_pixel(pixel_format1, pixel_format2, SAIL_PIXEL_FORMAT_COMPARISON_PRIVATE_GREATER, result));

    return SAIL_OK;
}

sail_status_t sail_bytes_per_line(unsigned width, enum SailPixelFormat pixel_format, unsigned *result) {
 800d394:	b5b0      	push	{r4, r5, r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af02      	add	r7, sp, #8
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	460b      	mov	r3, r1
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	72fb      	strb	r3, [r7, #11]

    if (width == 0) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d111      	bne.n	800d3cc <sail_bytes_per_line+0x38>
        SAIL_LOG_ERROR("Line width is 0");
 800d3a8:	4b37      	ldr	r3, [pc, #220]	; (800d488 <sail_bytes_per_line+0xf4>)
 800d3aa:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d3ae:	4937      	ldr	r1, [pc, #220]	; (800d48c <sail_bytes_per_line+0xf8>)
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	f7fe fa17 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 800d3b6:	4b36      	ldr	r3, [pc, #216]	; (800d490 <sail_bytes_per_line+0xfc>)
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4b36      	ldr	r3, [pc, #216]	; (800d494 <sail_bytes_per_line+0x100>)
 800d3bc:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800d3c0:	4932      	ldr	r1, [pc, #200]	; (800d48c <sail_bytes_per_line+0xf8>)
 800d3c2:	2001      	movs	r0, #1
 800d3c4:	f7fe fa0e 	bl	800b7e4 <sail_log>
 800d3c8:	2309      	movs	r3, #9
 800d3ca:	e059      	b.n	800d480 <sail_bytes_per_line+0xec>
    }

    SAIL_CHECK_PTR(result);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf0c      	ite	eq
 800d3d2:	2301      	moveq	r3, #1
 800d3d4:	2300      	movne	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d013      	beq.n	800d404 <sail_bytes_per_line+0x70>
 800d3dc:	4b2e      	ldr	r3, [pc, #184]	; (800d498 <sail_bytes_per_line+0x104>)
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	4b2e      	ldr	r3, [pc, #184]	; (800d49c <sail_bytes_per_line+0x108>)
 800d3e2:	f240 12b1 	movw	r2, #433	; 0x1b1
 800d3e6:	4929      	ldr	r1, [pc, #164]	; (800d48c <sail_bytes_per_line+0xf8>)
 800d3e8:	2001      	movs	r0, #1
 800d3ea:	f7fe f9fb 	bl	800b7e4 <sail_log>
 800d3ee:	4b2c      	ldr	r3, [pc, #176]	; (800d4a0 <sail_bytes_per_line+0x10c>)
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	4b28      	ldr	r3, [pc, #160]	; (800d494 <sail_bytes_per_line+0x100>)
 800d3f4:	f240 12b1 	movw	r2, #433	; 0x1b1
 800d3f8:	4924      	ldr	r1, [pc, #144]	; (800d48c <sail_bytes_per_line+0xf8>)
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	f7fe f9f2 	bl	800b7e4 <sail_log>
 800d400:	2301      	movs	r3, #1
 800d402:	e03d      	b.n	800d480 <sail_bytes_per_line+0xec>

    unsigned bits_per_pixel;
    SAIL_TRY(sail_bits_per_pixel(pixel_format, &bits_per_pixel));
 800d404:	f107 0210 	add.w	r2, r7, #16
 800d408:	7afb      	ldrb	r3, [r7, #11]
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fde9 	bl	800cfe4 <sail_bits_per_pixel>
 800d412:	4603      	mov	r3, r0
 800d414:	82fb      	strh	r3, [r7, #22]
 800d416:	8afb      	ldrh	r3, [r7, #22]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	bf14      	ite	ne
 800d41c:	2301      	movne	r3, #1
 800d41e:	2300      	moveq	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <sail_bytes_per_line+0x96>
 800d426:	8afb      	ldrh	r3, [r7, #22]
 800d428:	e02a      	b.n	800d480 <sail_bytes_per_line+0xec>

    *result = (unsigned)(((double)width * bits_per_pixel + 7) / 8);
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7f3 f9ac 	bl	8000788 <__aeabi_ui2d>
 800d430:	4604      	mov	r4, r0
 800d432:	460d      	mov	r5, r1
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	4618      	mov	r0, r3
 800d438:	f7f3 f9a6 	bl	8000788 <__aeabi_ui2d>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4620      	mov	r0, r4
 800d442:	4629      	mov	r1, r5
 800d444:	f7f3 fa1a 	bl	800087c <__aeabi_dmul>
 800d448:	4602      	mov	r2, r0
 800d44a:	460b      	mov	r3, r1
 800d44c:	4610      	mov	r0, r2
 800d44e:	4619      	mov	r1, r3
 800d450:	f04f 0200 	mov.w	r2, #0
 800d454:	4b13      	ldr	r3, [pc, #76]	; (800d4a4 <sail_bytes_per_line+0x110>)
 800d456:	f7f3 f85b 	bl	8000510 <__adddf3>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4610      	mov	r0, r2
 800d460:	4619      	mov	r1, r3
 800d462:	f04f 0200 	mov.w	r2, #0
 800d466:	4b10      	ldr	r3, [pc, #64]	; (800d4a8 <sail_bytes_per_line+0x114>)
 800d468:	f7f3 fb32 	bl	8000ad0 <__aeabi_ddiv>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4610      	mov	r0, r2
 800d472:	4619      	mov	r1, r3
 800d474:	f7f3 fc9c 	bl	8000db0 <__aeabi_d2uiz>
 800d478:	4602      	mov	r2, r0
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bdb0      	pop	{r4, r5, r7, pc}
 800d488:	080162c4 	.word	0x080162c4
 800d48c:	08016160 	.word	0x08016160
 800d490:	080161b4 	.word	0x080161b4
 800d494:	080161b0 	.word	0x080161b0
 800d498:	08016298 	.word	0x08016298
 800d49c:	0801621c 	.word	0x0801621c
 800d4a0:	0801623c 	.word	0x0801623c
 800d4a4:	401c0000 	.word	0x401c0000
 800d4a8:	40200000 	.word	0x40200000

0800d4ac <sail_is_indexed>:

bool sail_is_indexed(enum SailPixelFormat pixel_format) {
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	71fb      	strb	r3, [r7, #7]

    switch (pixel_format) {
 800d4b6:	79fb      	ldrb	r3, [r7, #7]
 800d4b8:	3b0d      	subs	r3, #13
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d801      	bhi.n	800d4c2 <sail_is_indexed+0x16>
        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED: {
            return true;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <sail_is_indexed+0x18>
        }
        default: {
            return false;
 800d4c2:	2300      	movs	r3, #0
        }
    }
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <sail_print_errno>:
            return false;
        }
    }
}

sail_status_t sail_print_errno(const char *format) {
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af02      	add	r7, sp, #8
 800d4d6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(format);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	bf0c      	ite	eq
 800d4de:	2301      	moveq	r3, #1
 800d4e0:	2300      	movne	r3, #0
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d013      	beq.n	800d510 <sail_print_errno+0x40>
 800d4e8:	4b20      	ldr	r3, [pc, #128]	; (800d56c <sail_print_errno+0x9c>)
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	4b20      	ldr	r3, [pc, #128]	; (800d570 <sail_print_errno+0xa0>)
 800d4ee:	f44f 7202 	mov.w	r2, #520	; 0x208
 800d4f2:	4920      	ldr	r1, [pc, #128]	; (800d574 <sail_print_errno+0xa4>)
 800d4f4:	2001      	movs	r0, #1
 800d4f6:	f7fe f975 	bl	800b7e4 <sail_log>
 800d4fa:	4b1f      	ldr	r3, [pc, #124]	; (800d578 <sail_print_errno+0xa8>)
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	4b1f      	ldr	r3, [pc, #124]	; (800d57c <sail_print_errno+0xac>)
 800d500:	f44f 7202 	mov.w	r2, #520	; 0x208
 800d504:	491b      	ldr	r1, [pc, #108]	; (800d574 <sail_print_errno+0xa4>)
 800d506:	2001      	movs	r0, #1
 800d508:	f7fe f96c 	bl	800b7e4 <sail_log>
 800d50c:	2301      	movs	r3, #1
 800d50e:	e029      	b.n	800d564 <sail_print_errno+0x94>

    if (strstr(format, "%s") == NULL) {
 800d510:	491a      	ldr	r1, [pc, #104]	; (800d57c <sail_print_errno+0xac>)
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f003 fbb9 	bl	8010c8a <strstr>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d111      	bne.n	800d542 <sail_print_errno+0x72>
        SAIL_LOG_ERROR("Format argument must contain %%s");
 800d51e:	4b18      	ldr	r3, [pc, #96]	; (800d580 <sail_print_errno+0xb0>)
 800d520:	f240 220b 	movw	r2, #523	; 0x20b
 800d524:	4913      	ldr	r1, [pc, #76]	; (800d574 <sail_print_errno+0xa4>)
 800d526:	2001      	movs	r0, #1
 800d528:	f7fe f95c 	bl	800b7e4 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 800d52c:	4b15      	ldr	r3, [pc, #84]	; (800d584 <sail_print_errno+0xb4>)
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	4b12      	ldr	r3, [pc, #72]	; (800d57c <sail_print_errno+0xac>)
 800d532:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d536:	490f      	ldr	r1, [pc, #60]	; (800d574 <sail_print_errno+0xa4>)
 800d538:	2001      	movs	r0, #1
 800d53a:	f7fe f953 	bl	800b7e4 <sail_log>
 800d53e:	2309      	movs	r3, #9
 800d540:	e010      	b.n	800d564 <sail_print_errno+0x94>
#ifdef _MSC_VER
    char buffer[80];
    strerror_s(buffer, sizeof(buffer), errno);
    SAIL_LOG_ERROR(format, buffer);
#else
    SAIL_LOG_ERROR(format, strerror(errno));
 800d542:	f001 ffb5 	bl	800f4b0 <__errno>
 800d546:	4603      	mov	r3, r0
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f003 fb5c 	bl	8010c08 <strerror>
 800d550:	4603      	mov	r3, r0
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f44f 7205 	mov.w	r2, #532	; 0x214
 800d55a:	4906      	ldr	r1, [pc, #24]	; (800d574 <sail_print_errno+0xa4>)
 800d55c:	2001      	movs	r0, #1
 800d55e:	f7fe f941 	bl	800b7e4 <sail_log>
#endif

    return SAIL_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	080162d4 	.word	0x080162d4
 800d570:	0801621c 	.word	0x0801621c
 800d574:	08016160 	.word	0x08016160
 800d578:	0801623c 	.word	0x0801623c
 800d57c:	080161b0 	.word	0x080161b0
 800d580:	080162dc 	.word	0x080162dc
 800d584:	080161b4 	.word	0x080161b4

0800d588 <sail_now>:

uint64_t sail_now(void) {
 800d588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d58c:	b088      	sub	sp, #32
 800d58e:	af00      	add	r7, sp, #0

    return (uint64_t)((double)li.QuadPart / frequency);
#else
    struct timeval tv;

    if (gettimeofday(&tv, NULL) != 0) {
 800d590:	f107 0310 	add.w	r3, r7, #16
 800d594:	2100      	movs	r1, #0
 800d596:	4618      	mov	r0, r3
 800d598:	f004 fa4a 	bl	8011a30 <gettimeofday>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d009      	beq.n	800d5b6 <sail_now+0x2e>
        sail_print_errno("Failed to get the current time: %s");
 800d5a2:	482b      	ldr	r0, [pc, #172]	; (800d650 <sail_now+0xc8>)
 800d5a4:	f7ff ff94 	bl	800d4d0 <sail_print_errno>
        return 0;
 800d5a8:	f04f 0300 	mov.w	r3, #0
 800d5ac:	f04f 0400 	mov.w	r4, #0
 800d5b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800d5b4:	e043      	b.n	800d63e <sail_now+0xb6>
    }

    return (uint64_t)tv.tv_sec * 1000 + (uint64_t)tv.tv_usec / 1000;
 800d5b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	f04f 0a00 	mov.w	sl, #0
 800d5c6:	f04f 0b00 	mov.w	fp, #0
 800d5ca:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800d5ce:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800d5d2:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800d5d6:	4652      	mov	r2, sl
 800d5d8:	465b      	mov	r3, fp
 800d5da:	1a14      	subs	r4, r2, r0
 800d5dc:	eb63 0501 	sbc.w	r5, r3, r1
 800d5e0:	f04f 0200 	mov.w	r2, #0
 800d5e4:	f04f 0300 	mov.w	r3, #0
 800d5e8:	00ab      	lsls	r3, r5, #2
 800d5ea:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d5ee:	00a2      	lsls	r2, r4, #2
 800d5f0:	4614      	mov	r4, r2
 800d5f2:	461d      	mov	r5, r3
 800d5f4:	eb14 0800 	adds.w	r8, r4, r0
 800d5f8:	eb45 0901 	adc.w	r9, r5, r1
 800d5fc:	f04f 0200 	mov.w	r2, #0
 800d600:	f04f 0300 	mov.w	r3, #0
 800d604:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d608:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d60c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d610:	4690      	mov	r8, r2
 800d612:	4699      	mov	r9, r3
 800d614:	4644      	mov	r4, r8
 800d616:	464d      	mov	r5, r9
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	17da      	asrs	r2, r3, #31
 800d61c:	603b      	str	r3, [r7, #0]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d624:	f04f 0300 	mov.w	r3, #0
 800d628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d62c:	f7f3 fbe0 	bl	8000df0 <__aeabi_uldivmod>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	18a1      	adds	r1, r4, r2
 800d636:	60b9      	str	r1, [r7, #8]
 800d638:	eb45 0303 	adc.w	r3, r5, r3
 800d63c:	60fb      	str	r3, [r7, #12]
#endif
}
 800d63e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d642:	4610      	mov	r0, r2
 800d644:	4619      	mov	r1, r3
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d64e:	bf00      	nop
 800d650:	08016300 	.word	0x08016300

0800d654 <set_variant_value>:
#include "sail-common.h"

/*
 * Private functions.
 */
static sail_status_t set_variant_value(struct sail_variant *variant, enum SailVariantType type, const void *value, const size_t size) {
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af02      	add	r7, sp, #8
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	607a      	str	r2, [r7, #4]
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	460b      	mov	r3, r1
 800d662:	72fb      	strb	r3, [r7, #11]

    SAIL_CHECK_PTR(variant);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	bf0c      	ite	eq
 800d66a:	2301      	moveq	r3, #1
 800d66c:	2300      	movne	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d011      	beq.n	800d698 <set_variant_value+0x44>
 800d674:	4b1b      	ldr	r3, [pc, #108]	; (800d6e4 <set_variant_value+0x90>)
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	4b1b      	ldr	r3, [pc, #108]	; (800d6e8 <set_variant_value+0x94>)
 800d67a:	2223      	movs	r2, #35	; 0x23
 800d67c:	491b      	ldr	r1, [pc, #108]	; (800d6ec <set_variant_value+0x98>)
 800d67e:	2001      	movs	r0, #1
 800d680:	f7fe f8b0 	bl	800b7e4 <sail_log>
 800d684:	4b1a      	ldr	r3, [pc, #104]	; (800d6f0 <set_variant_value+0x9c>)
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	4b1a      	ldr	r3, [pc, #104]	; (800d6f4 <set_variant_value+0xa0>)
 800d68a:	2223      	movs	r2, #35	; 0x23
 800d68c:	4917      	ldr	r1, [pc, #92]	; (800d6ec <set_variant_value+0x98>)
 800d68e:	2001      	movs	r0, #1
 800d690:	f7fe f8a8 	bl	800b7e4 <sail_log>
 800d694:	2301      	movs	r3, #1
 800d696:	e020      	b.n	800d6da <set_variant_value+0x86>

    void **ptr = &variant->value;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3304      	adds	r3, #4
 800d69c:	617b      	str	r3, [r7, #20]
    SAIL_TRY(sail_realloc(size, ptr));
 800d69e:	6979      	ldr	r1, [r7, #20]
 800d6a0:	6838      	ldr	r0, [r7, #0]
 800d6a2:	f7fe f9d7 	bl	800ba54 <sail_realloc>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	827b      	strh	r3, [r7, #18]
 800d6aa:	8a7b      	ldrh	r3, [r7, #18]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bf14      	ite	ne
 800d6b0:	2301      	movne	r3, #1
 800d6b2:	2300      	moveq	r3, #0
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <set_variant_value+0x6a>
 800d6ba:	8a7b      	ldrh	r3, [r7, #18]
 800d6bc:	e00d      	b.n	800d6da <set_variant_value+0x86>
    memcpy(variant->value, value, size);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f002 fa1c 	bl	800fb04 <memcpy>

    variant->type = type;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	7afa      	ldrb	r2, [r7, #11]
 800d6d0:	701a      	strb	r2, [r3, #0]
    variant->size = size;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	683a      	ldr	r2, [r7, #0]
 800d6d6:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3718      	adds	r7, #24
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	0801640c 	.word	0x0801640c
 800d6e8:	080163a0 	.word	0x080163a0
 800d6ec:	080163b8 	.word	0x080163b8
 800d6f0:	08016418 	.word	0x08016418
 800d6f4:	08016414 	.word	0x08016414

0800d6f8 <alloc_variant>:

static sail_status_t alloc_variant(enum SailVariantType type, const void *value, const size_t size, struct sail_variant **variant) {
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]
 800d702:	603b      	str	r3, [r7, #0]
 800d704:	4603      	mov	r3, r0
 800d706:	73fb      	strb	r3, [r7, #15]

    SAIL_CHECK_PTR(variant);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	bf0c      	ite	eq
 800d70e:	2301      	moveq	r3, #1
 800d710:	2300      	movne	r3, #0
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b00      	cmp	r3, #0
 800d716:	d011      	beq.n	800d73c <alloc_variant+0x44>
 800d718:	4b20      	ldr	r3, [pc, #128]	; (800d79c <alloc_variant+0xa4>)
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4b20      	ldr	r3, [pc, #128]	; (800d7a0 <alloc_variant+0xa8>)
 800d71e:	2231      	movs	r2, #49	; 0x31
 800d720:	4920      	ldr	r1, [pc, #128]	; (800d7a4 <alloc_variant+0xac>)
 800d722:	2001      	movs	r0, #1
 800d724:	f7fe f85e 	bl	800b7e4 <sail_log>
 800d728:	4b1f      	ldr	r3, [pc, #124]	; (800d7a8 <alloc_variant+0xb0>)
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	4b1f      	ldr	r3, [pc, #124]	; (800d7ac <alloc_variant+0xb4>)
 800d72e:	2231      	movs	r2, #49	; 0x31
 800d730:	491c      	ldr	r1, [pc, #112]	; (800d7a4 <alloc_variant+0xac>)
 800d732:	2001      	movs	r0, #1
 800d734:	f7fe f856 	bl	800b7e4 <sail_log>
 800d738:	2301      	movs	r3, #1
 800d73a:	e02a      	b.n	800d792 <alloc_variant+0x9a>

    struct sail_variant *variant_local;
    SAIL_TRY(sail_alloc_variant(&variant_local));
 800d73c:	f107 0310 	add.w	r3, r7, #16
 800d740:	4618      	mov	r0, r3
 800d742:	f000 f835 	bl	800d7b0 <sail_alloc_variant>
 800d746:	4603      	mov	r3, r0
 800d748:	82fb      	strh	r3, [r7, #22]
 800d74a:	8afb      	ldrh	r3, [r7, #22]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	bf14      	ite	ne
 800d750:	2301      	movne	r3, #1
 800d752:	2300      	moveq	r3, #0
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <alloc_variant+0x66>
 800d75a:	8afb      	ldrh	r3, [r7, #22]
 800d75c:	e019      	b.n	800d792 <alloc_variant+0x9a>

    SAIL_TRY_OR_CLEANUP(set_variant_value(variant_local, type, value, size),
 800d75e:	6938      	ldr	r0, [r7, #16]
 800d760:	7bf9      	ldrb	r1, [r7, #15]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	f7ff ff75 	bl	800d654 <set_variant_value>
 800d76a:	4603      	mov	r3, r0
 800d76c:	82bb      	strh	r3, [r7, #20]
 800d76e:	8abb      	ldrh	r3, [r7, #20]
 800d770:	2b00      	cmp	r3, #0
 800d772:	bf14      	ite	ne
 800d774:	2301      	movne	r3, #1
 800d776:	2300      	moveq	r3, #0
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <alloc_variant+0x92>
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	4618      	mov	r0, r3
 800d782:	f000 f863 	bl	800d84c <sail_destroy_variant>
 800d786:	8abb      	ldrh	r3, [r7, #20]
 800d788:	e003      	b.n	800d792 <alloc_variant+0x9a>
                        /* on error */ sail_destroy_variant(variant_local));

    *variant = variant_local;
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	0801640c 	.word	0x0801640c
 800d7a0:	080163a0 	.word	0x080163a0
 800d7a4:	080163b8 	.word	0x080163b8
 800d7a8:	08016418 	.word	0x08016418
 800d7ac:	08016414 	.word	0x08016414

0800d7b0 <sail_alloc_variant>:

/*
 * Public functions.
 */
sail_status_t sail_alloc_variant(struct sail_variant **variant) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(variant);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	bf0c      	ite	eq
 800d7be:	2301      	moveq	r3, #1
 800d7c0:	2300      	movne	r3, #0
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d011      	beq.n	800d7ec <sail_alloc_variant+0x3c>
 800d7c8:	4b1b      	ldr	r3, [pc, #108]	; (800d838 <sail_alloc_variant+0x88>)
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	4b1b      	ldr	r3, [pc, #108]	; (800d83c <sail_alloc_variant+0x8c>)
 800d7ce:	2243      	movs	r2, #67	; 0x43
 800d7d0:	491b      	ldr	r1, [pc, #108]	; (800d840 <sail_alloc_variant+0x90>)
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	f7fe f806 	bl	800b7e4 <sail_log>
 800d7d8:	4b1a      	ldr	r3, [pc, #104]	; (800d844 <sail_alloc_variant+0x94>)
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	4b1a      	ldr	r3, [pc, #104]	; (800d848 <sail_alloc_variant+0x98>)
 800d7de:	2243      	movs	r2, #67	; 0x43
 800d7e0:	4917      	ldr	r1, [pc, #92]	; (800d840 <sail_alloc_variant+0x90>)
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	f7fd fffe 	bl	800b7e4 <sail_log>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e021      	b.n	800d830 <sail_alloc_variant+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_variant), &ptr));
 800d7ec:	f107 0308 	add.w	r3, r7, #8
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	200c      	movs	r0, #12
 800d7f4:	f7fe f8ee 	bl	800b9d4 <sail_malloc>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	81fb      	strh	r3, [r7, #14]
 800d7fc:	89fb      	ldrh	r3, [r7, #14]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bf14      	ite	ne
 800d802:	2301      	movne	r3, #1
 800d804:	2300      	moveq	r3, #0
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <sail_alloc_variant+0x60>
 800d80c:	89fb      	ldrh	r3, [r7, #14]
 800d80e:	e00f      	b.n	800d830 <sail_alloc_variant+0x80>
    *variant = ptr;
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	601a      	str	r2, [r3, #0]

    (*variant)->type  = SAIL_VARIANT_TYPE_INVALID;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	220d      	movs	r2, #13
 800d81c:	701a      	strb	r2, [r3, #0]
    (*variant)->value = NULL;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2200      	movs	r2, #0
 800d824:	605a      	str	r2, [r3, #4]
    (*variant)->size  = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2200      	movs	r2, #0
 800d82c:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0801640c 	.word	0x0801640c
 800d83c:	080163a0 	.word	0x080163a0
 800d840:	080163b8 	.word	0x080163b8
 800d844:	08016418 	.word	0x08016418
 800d848:	08016414 	.word	0x08016414

0800d84c <sail_destroy_variant>:

void sail_destroy_variant(struct sail_variant *variant) {
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]

    if (variant == NULL) {
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d008      	beq.n	800d86c <sail_destroy_variant+0x20>
        return;
    }

    sail_free(variant->value);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe f940 	bl	800bae4 <sail_free>
    sail_free(variant);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7fe f93d 	bl	800bae4 <sail_free>
 800d86a:	e000      	b.n	800d86e <sail_destroy_variant+0x22>
        return;
 800d86c:	bf00      	nop
}
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <sail_copy_variant>:
    }

    return SAIL_OK;
}

sail_status_t sail_copy_variant(const struct sail_variant *source, struct sail_variant **target) {
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af02      	add	r7, sp, #8
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	bf0c      	ite	eq
 800d884:	2301      	moveq	r3, #1
 800d886:	2300      	movne	r3, #0
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d013      	beq.n	800d8b6 <sail_copy_variant+0x42>
 800d88e:	4b25      	ldr	r3, [pc, #148]	; (800d924 <sail_copy_variant+0xb0>)
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	4b25      	ldr	r3, [pc, #148]	; (800d928 <sail_copy_variant+0xb4>)
 800d894:	f240 1227 	movw	r2, #295	; 0x127
 800d898:	4924      	ldr	r1, [pc, #144]	; (800d92c <sail_copy_variant+0xb8>)
 800d89a:	2001      	movs	r0, #1
 800d89c:	f7fd ffa2 	bl	800b7e4 <sail_log>
 800d8a0:	4b23      	ldr	r3, [pc, #140]	; (800d930 <sail_copy_variant+0xbc>)
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	4b23      	ldr	r3, [pc, #140]	; (800d934 <sail_copy_variant+0xc0>)
 800d8a6:	f240 1227 	movw	r2, #295	; 0x127
 800d8aa:	4920      	ldr	r1, [pc, #128]	; (800d92c <sail_copy_variant+0xb8>)
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	f7fd ff99 	bl	800b7e4 <sail_log>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e031      	b.n	800d91a <sail_copy_variant+0xa6>
    SAIL_CHECK_PTR(target);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bf0c      	ite	eq
 800d8bc:	2301      	moveq	r3, #1
 800d8be:	2300      	movne	r3, #0
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d013      	beq.n	800d8ee <sail_copy_variant+0x7a>
 800d8c6:	4b1c      	ldr	r3, [pc, #112]	; (800d938 <sail_copy_variant+0xc4>)
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	4b17      	ldr	r3, [pc, #92]	; (800d928 <sail_copy_variant+0xb4>)
 800d8cc:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d8d0:	4916      	ldr	r1, [pc, #88]	; (800d92c <sail_copy_variant+0xb8>)
 800d8d2:	2001      	movs	r0, #1
 800d8d4:	f7fd ff86 	bl	800b7e4 <sail_log>
 800d8d8:	4b15      	ldr	r3, [pc, #84]	; (800d930 <sail_copy_variant+0xbc>)
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	4b15      	ldr	r3, [pc, #84]	; (800d934 <sail_copy_variant+0xc0>)
 800d8de:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d8e2:	4912      	ldr	r1, [pc, #72]	; (800d92c <sail_copy_variant+0xb8>)
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f7fd ff7d 	bl	800b7e4 <sail_log>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e015      	b.n	800d91a <sail_copy_variant+0xa6>

    SAIL_TRY(alloc_variant(source->type, source->value, source->size, target));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	7818      	ldrb	r0, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6859      	ldr	r1, [r3, #4]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	689a      	ldr	r2, [r3, #8]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	f7ff fefc 	bl	800d6f8 <alloc_variant>
 800d900:	4603      	mov	r3, r0
 800d902:	81fb      	strh	r3, [r7, #14]
 800d904:	89fb      	ldrh	r3, [r7, #14]
 800d906:	2b00      	cmp	r3, #0
 800d908:	bf14      	ite	ne
 800d90a:	2301      	movne	r3, #1
 800d90c:	2300      	moveq	r3, #0
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <sail_copy_variant+0xa4>
 800d914:	89fb      	ldrh	r3, [r7, #14]
 800d916:	e000      	b.n	800d91a <sail_copy_variant+0xa6>

    return SAIL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	08016448 	.word	0x08016448
 800d928:	080163a0 	.word	0x080163a0
 800d92c:	080163b8 	.word	0x080163b8
 800d930:	08016418 	.word	0x08016418
 800d934:	08016414 	.word	0x08016414
 800d938:	08016450 	.word	0x08016450

0800d93c <sail_destroy_variant_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_destroy_variant));

    return SAIL_OK;
}

void sail_destroy_variant_node_chain(struct sail_variant_node *node) {
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 800d944:	4903      	ldr	r1, [pc, #12]	; (800d954 <sail_destroy_variant_node_chain+0x18>)
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7fd fd0e 	bl	800b368 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_destroy_variant);
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	0800d84d 	.word	0x0800d84d

0800d958 <sail_copy_variant_node_chain>:

sail_status_t sail_copy_variant_node_chain(const struct sail_variant_node *source, struct sail_variant_node **target) {
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]

    SAIL_TRY(sail_private_copy_linked_list_node_chain((const struct linked_list_node *)source,
 800d962:	4b0b      	ldr	r3, [pc, #44]	; (800d990 <sail_copy_variant_node_chain+0x38>)
 800d964:	4a0b      	ldr	r2, [pc, #44]	; (800d994 <sail_copy_variant_node_chain+0x3c>)
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7fd fd15 	bl	800b398 <sail_private_copy_linked_list_node_chain>
 800d96e:	4603      	mov	r3, r0
 800d970:	81fb      	strh	r3, [r7, #14]
 800d972:	89fb      	ldrh	r3, [r7, #14]
 800d974:	2b00      	cmp	r3, #0
 800d976:	bf14      	ite	ne
 800d978:	2301      	movne	r3, #1
 800d97a:	2300      	moveq	r3, #0
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <sail_copy_variant_node_chain+0x2e>
 800d982:	89fb      	ldrh	r3, [r7, #14]
 800d984:	e000      	b.n	800d988 <sail_copy_variant_node_chain+0x30>
                                                      (struct linked_list_node **)target,
                                                      (linked_list_value_copier_t)sail_copy_variant,
                                                      (linked_list_value_deallocator_t)&sail_destroy_variant));

    return SAIL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	0800d84d 	.word	0x0800d84d
 800d994:	0800d875 	.word	0x0800d875

0800d998 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b096      	sub	sp, #88	; 0x58
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3303      	adds	r3, #3
 800d9aa:	f023 0303 	bic.w	r3, r3, #3
 800d9ae:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b4:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800d9b8:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9ba:	b672      	cpsid	i
#endif
    return(int_posture);
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800d9be:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d9c0:	4b55      	ldr	r3, [pc, #340]	; (800db18 <_tx_byte_allocate+0x180>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9ce:	621a      	str	r2, [r3, #32]
 800d9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	f383 8810 	msr	PRIMASK, r3
}
 800d9da:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800d9dc:	6879      	ldr	r1, [r7, #4]
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f000 f9b2 	bl	800dd48 <_tx_byte_pool_search>
 800d9e4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d9ee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9f0:	b672      	cpsid	i
    return(int_posture);
 800d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800d9f4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800d9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da00:	e006      	b.n	800da10 <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da08:	429a      	cmp	r2, r3
 800da0a:	d101      	bne.n	800da10 <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800da0c:	2301      	movs	r3, #1
 800da0e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800da10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0d9      	beq.n	800d9ca <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da1a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800da1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d008      	beq.n	800da34 <_tx_byte_allocate+0x9c>
 800da22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da24:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	f383 8810 	msr	PRIMASK, r3
}
 800da2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800da2e:	2300      	movs	r3, #0
 800da30:	653b      	str	r3, [r7, #80]	; 0x50
 800da32:	e06c      	b.n	800db0e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d061      	beq.n	800dafe <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800da3a:	4b38      	ldr	r3, [pc, #224]	; (800db1c <_tx_byte_allocate+0x184>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d007      	beq.n	800da52 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800da42:	2310      	movs	r3, #16
 800da44:	653b      	str	r3, [r7, #80]	; 0x50
 800da46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	f383 8810 	msr	PRIMASK, r3
}
 800da50:	e05d      	b.n	800db0e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800da52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da54:	4a32      	ldr	r2, [pc, #200]	; (800db20 <_tx_byte_allocate+0x188>)
 800da56:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800da58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800da5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800da64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800da6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da70:	1c5a      	adds	r2, r3, #1
 800da72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da7c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800da88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da92:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800da94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da98:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800da9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da9e:	675a      	str	r2, [r3, #116]	; 0x74
 800daa0:	e011      	b.n	800dac6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800daa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daac:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800daae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dab2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800dab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dab8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800daba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dabe:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800dac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dac4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800dac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dac8:	2209      	movs	r2, #9
 800daca:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dacc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dace:	2201      	movs	r2, #1
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800dad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad4:	683a      	ldr	r2, [r7, #0]
 800dad6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800dad8:	4b10      	ldr	r3, [pc, #64]	; (800db1c <_tx_byte_allocate+0x184>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	3301      	adds	r3, #1
 800dade:	4a0f      	ldr	r2, [pc, #60]	; (800db1c <_tx_byte_allocate+0x184>)
 800dae0:	6013      	str	r3, [r2, #0]
 800dae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	f383 8810 	msr	PRIMASK, r3
}
 800daec:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800daee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800daf0:	f000 fdfa 	bl	800e6e8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800daf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dafa:	653b      	str	r3, [r7, #80]	; 0x50
 800dafc:	e007      	b.n	800db0e <_tx_byte_allocate+0x176>
 800dafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	f383 8810 	msr	PRIMASK, r3
}
 800db08:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800db0a:	2310      	movs	r3, #16
 800db0c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800db0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800db10:	4618      	mov	r0, r3
 800db12:	3758      	adds	r7, #88	; 0x58
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200035c8 	.word	0x200035c8
 800db1c:	20003664 	.word	0x20003664
 800db20:	0800db25 	.word	0x0800db25

0800db24 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08e      	sub	sp, #56	; 0x38
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db2e:	f3ef 8310 	mrs	r3, PRIMASK
 800db32:	623b      	str	r3, [r7, #32]
    return(posture);
 800db34:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800db36:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db38:	b672      	cpsid	i
    return(int_posture);
 800db3a:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800db3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db42:	4a33      	ldr	r2, [pc, #204]	; (800dc10 <_tx_byte_pool_cleanup+0xec>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d158      	bne.n	800dbfa <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	d152      	bne.n	800dbfa <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db58:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d04c      	beq.n	800dbfa <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800db60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a2b      	ldr	r2, [pc, #172]	; (800dc14 <_tx_byte_pool_cleanup+0xf0>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d147      	bne.n	800dbfa <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d043      	beq.n	800dbfa <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800db78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7c:	1e5a      	subs	r2, r3, #1
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db86:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800db88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d103      	bne.n	800db96 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	2200      	movs	r2, #0
 800db92:	625a      	str	r2, [r3, #36]	; 0x24
 800db94:	e013      	b.n	800dbbe <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbac:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d102      	bne.n	800dbbe <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbbc:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc2:	2b09      	cmp	r3, #9
 800dbc4:	d119      	bne.n	800dbfa <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2210      	movs	r2, #16
 800dbca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800dbce:	4b12      	ldr	r3, [pc, #72]	; (800dc18 <_tx_byte_pool_cleanup+0xf4>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	4a10      	ldr	r2, [pc, #64]	; (800dc18 <_tx_byte_pool_cleanup+0xf4>)
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbda:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	f383 8810 	msr	PRIMASK, r3
}
 800dbe2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fc6b 	bl	800e4c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbea:	f3ef 8310 	mrs	r3, PRIMASK
 800dbee:	61bb      	str	r3, [r7, #24]
    return(posture);
 800dbf0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800dbf2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dbf4:	b672      	cpsid	i
    return(int_posture);
 800dbf6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800dbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800dbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f383 8810 	msr	PRIMASK, r3
}
 800dc04:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800dc06:	bf00      	nop
 800dc08:	3738      	adds	r7, #56	; 0x38
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	0800db25 	.word	0x0800db25
 800dc14:	42595445 	.word	0x42595445
 800dc18:	20003664 	.word	0x20003664

0800dc1c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08e      	sub	sp, #56	; 0x38
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800dc2a:	2234      	movs	r2, #52	; 0x34
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f001 ff76 	bl	800fb20 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	f023 0303 	bic.w	r3, r3, #3
 800dc3a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	f1a3 0208 	sub.w	r2, r3, #8
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2202      	movs	r2, #2
 800dc68:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800dc6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	4413      	add	r3, r2
 800dc74:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800dc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc78:	3b04      	subs	r3, #4
 800dc7a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800dc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc88:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	3b04      	subs	r3, #4
 800dc8e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800dc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dca6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800dcac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcae:	3304      	adds	r3, #4
 800dcb0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800dcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	4a1f      	ldr	r2, [pc, #124]	; (800dd38 <_tx_byte_pool_create+0x11c>)
 800dcba:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcc2:	f3ef 8310 	mrs	r3, PRIMASK
 800dcc6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800dcc8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800dcca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dccc:	b672      	cpsid	i
    return(int_posture);
 800dcce:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800dcd0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	4a19      	ldr	r2, [pc, #100]	; (800dd3c <_tx_byte_pool_create+0x120>)
 800dcd6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800dcd8:	4b19      	ldr	r3, [pc, #100]	; (800dd40 <_tx_byte_pool_create+0x124>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d109      	bne.n	800dcf4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800dce0:	4a18      	ldr	r2, [pc, #96]	; (800dd44 <_tx_byte_pool_create+0x128>)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	631a      	str	r2, [r3, #48]	; 0x30
 800dcf2:	e011      	b.n	800dd18 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800dcf4:	4b13      	ldr	r3, [pc, #76]	; (800dd44 <_tx_byte_pool_create+0x128>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfe:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	69fa      	ldr	r2, [r7, #28]
 800dd10:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6a3a      	ldr	r2, [r7, #32]
 800dd16:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800dd18:	4b09      	ldr	r3, [pc, #36]	; (800dd40 <_tx_byte_pool_create+0x124>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	4a08      	ldr	r2, [pc, #32]	; (800dd40 <_tx_byte_pool_create+0x124>)
 800dd20:	6013      	str	r3, [r2, #0]
 800dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd24:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	f383 8810 	msr	PRIMASK, r3
}
 800dd2c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3738      	adds	r7, #56	; 0x38
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	ffffeeee 	.word	0xffffeeee
 800dd3c:	42595445 	.word	0x42595445
 800dd40:	200035bc 	.word	0x200035bc
 800dd44:	200035b8 	.word	0x200035b8

0800dd48 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b097      	sub	sp, #92	; 0x5c
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800dd52:	2300      	movs	r3, #0
 800dd54:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd56:	f3ef 8310 	mrs	r3, PRIMASK
 800dd5a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800dd5e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd60:	b672      	cpsid	i
    return(int_posture);
 800dd62:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800dd64:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	689a      	ldr	r2, [r3, #8]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	3b02      	subs	r3, #2
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	4413      	add	r3, r2
 800dd74:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d308      	bcc.n	800dd90 <_tx_byte_pool_search+0x48>
 800dd7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	f383 8810 	msr	PRIMASK, r3
}
 800dd88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	653b      	str	r3, [r7, #80]	; 0x50
 800dd8e:	e0dd      	b.n	800df4c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800dd90:	4b72      	ldr	r3, [pc, #456]	; (800df5c <_tx_byte_pool_search+0x214>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd9a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	695b      	ldr	r3, [r3, #20]
 800dda0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	3301      	adds	r3, #1
 800dda8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800ddaa:	2300      	movs	r3, #0
 800ddac:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ddae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ddb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a68      	ldr	r2, [pc, #416]	; (800df60 <_tx_byte_pool_search+0x218>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d143      	bne.n	800de4a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ddc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d104      	bne.n	800ddd2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddcc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ddd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddd4:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800dddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800dde4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dde6:	3b08      	subs	r3, #8
 800dde8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800ddea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d257      	bcs.n	800dea2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800de00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a56      	ldr	r2, [pc, #344]	; (800df60 <_tx_byte_pool_search+0x218>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d113      	bne.n	800de32 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de14:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	1e5a      	subs	r2, r3, #1
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	695b      	ldr	r3, [r3, #20]
 800de24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de26:	429a      	cmp	r2, r3
 800de28:	d114      	bne.n	800de54 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de2e:	615a      	str	r2, [r3, #20]
 800de30:	e010      	b.n	800de54 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800de3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d008      	beq.n	800de54 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800de42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de44:	3b01      	subs	r3, #1
 800de46:	64bb      	str	r3, [r7, #72]	; 0x48
 800de48:	e004      	b.n	800de54 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800de4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800de54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800de5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de5c:	3b01      	subs	r3, #1
 800de5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800de60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	f383 8810 	msr	PRIMASK, r3
}
 800de6a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de6c:	f3ef 8310 	mrs	r3, PRIMASK
 800de70:	61bb      	str	r3, [r7, #24]
    return(posture);
 800de72:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800de74:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de76:	b672      	cpsid	i
    return(int_posture);
 800de78:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800de7a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a1b      	ldr	r3, [r3, #32]
 800de80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de82:	429a      	cmp	r2, r3
 800de84:	d009      	beq.n	800de9a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	3301      	adds	r3, #1
 800de92:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de98:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800de9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d186      	bne.n	800ddae <_tx_byte_pool_search+0x66>
 800dea0:	e000      	b.n	800dea4 <_tx_byte_pool_search+0x15c>
                    break;
 800dea2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800dea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d048      	beq.n	800df3c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800deaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	2b13      	cmp	r3, #19
 800deb2:	d91e      	bls.n	800def2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	3308      	adds	r3, #8
 800deb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deba:	4413      	add	r3, r2
 800debc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800dec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec4:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800dec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800decc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	3304      	adds	r3, #4
 800ded2:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ded8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deda:	4a21      	ldr	r2, [pc, #132]	; (800df60 <_tx_byte_pool_search+0x218>)
 800dedc:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deec:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800def2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800def4:	3304      	adds	r3, #4
 800def6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800defc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	689a      	ldr	r2, [r3, #8]
 800df06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	f1a3 0208 	sub.w	r2, r3, #8
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df18:	429a      	cmp	r2, r3
 800df1a:	d105      	bne.n	800df28 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800df1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df1e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800df20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	615a      	str	r2, [r3, #20]
 800df28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f383 8810 	msr	PRIMASK, r3
}
 800df32:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800df34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df36:	3308      	adds	r3, #8
 800df38:	653b      	str	r3, [r7, #80]	; 0x50
 800df3a:	e007      	b.n	800df4c <_tx_byte_pool_search+0x204>
 800df3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df3e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	f383 8810 	msr	PRIMASK, r3
}
 800df46:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800df48:	2300      	movs	r3, #0
 800df4a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800df4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800df4e:	4618      	mov	r0, r3
 800df50:	375c      	adds	r7, #92	; 0x5c
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	200035c8 	.word	0x200035c8
 800df60:	ffffeeee 	.word	0xffffeeee

0800df64 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800df68:	f000 f9c0 	bl	800e2ec <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800df6c:	f000 fe60 	bl	800ec30 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800df70:	4b12      	ldr	r3, [pc, #72]	; (800dfbc <_tx_initialize_high_level+0x58>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
 800df76:	4b12      	ldr	r3, [pc, #72]	; (800dfc0 <_tx_initialize_high_level+0x5c>)
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800df7c:	4b11      	ldr	r3, [pc, #68]	; (800dfc4 <_tx_initialize_high_level+0x60>)
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	4b11      	ldr	r3, [pc, #68]	; (800dfc8 <_tx_initialize_high_level+0x64>)
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800df88:	4b10      	ldr	r3, [pc, #64]	; (800dfcc <_tx_initialize_high_level+0x68>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	4b10      	ldr	r3, [pc, #64]	; (800dfd0 <_tx_initialize_high_level+0x6c>)
 800df90:	2200      	movs	r2, #0
 800df92:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800df94:	4b0f      	ldr	r3, [pc, #60]	; (800dfd4 <_tx_initialize_high_level+0x70>)
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <_tx_initialize_high_level+0x74>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800dfa0:	4b0e      	ldr	r3, [pc, #56]	; (800dfdc <_tx_initialize_high_level+0x78>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	4b0e      	ldr	r3, [pc, #56]	; (800dfe0 <_tx_initialize_high_level+0x7c>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800dfac:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <_tx_initialize_high_level+0x80>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	601a      	str	r2, [r3, #0]
 800dfb2:	4b0d      	ldr	r3, [pc, #52]	; (800dfe8 <_tx_initialize_high_level+0x84>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	601a      	str	r2, [r3, #0]
#endif
}
 800dfb8:	bf00      	nop
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20003590 	.word	0x20003590
 800dfc0:	20003594 	.word	0x20003594
 800dfc4:	20003598 	.word	0x20003598
 800dfc8:	2000359c 	.word	0x2000359c
 800dfcc:	200035a0 	.word	0x200035a0
 800dfd0:	200035a4 	.word	0x200035a4
 800dfd4:	200035b0 	.word	0x200035b0
 800dfd8:	200035b4 	.word	0x200035b4
 800dfdc:	200035b8 	.word	0x200035b8
 800dfe0:	200035bc 	.word	0x200035bc
 800dfe4:	200035a8 	.word	0x200035a8
 800dfe8:	200035ac 	.word	0x200035ac

0800dfec <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800dff0:	4b10      	ldr	r3, [pc, #64]	; (800e034 <_tx_initialize_kernel_enter+0x48>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800dff8:	d00c      	beq.n	800e014 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800dffa:	4b0e      	ldr	r3, [pc, #56]	; (800e034 <_tx_initialize_kernel_enter+0x48>)
 800dffc:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800e000:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800e002:	f7f2 f8fd 	bl	8000200 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 800e006:	f7ff ffad 	bl	800df64 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800e00a:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <_tx_initialize_kernel_enter+0x4c>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	3301      	adds	r3, #1
 800e010:	4a09      	ldr	r2, [pc, #36]	; (800e038 <_tx_initialize_kernel_enter+0x4c>)
 800e012:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800e014:	4b07      	ldr	r3, [pc, #28]	; (800e034 <_tx_initialize_kernel_enter+0x48>)
 800e016:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800e01a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800e01c:	4b07      	ldr	r3, [pc, #28]	; (800e03c <_tx_initialize_kernel_enter+0x50>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4618      	mov	r0, r3
 800e022:	f7f3 f8f1 	bl	8001208 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800e026:	4b03      	ldr	r3, [pc, #12]	; (800e034 <_tx_initialize_kernel_enter+0x48>)
 800e028:	2200      	movs	r2, #0
 800e02a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800e02c:	f7f2 f928 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800e030:	bf00      	nop
 800e032:	bd80      	pop	{r7, pc}
 800e034:	20000070 	.word	0x20000070
 800e038:	20003664 	.word	0x20003664
 800e03c:	200035c0 	.word	0x200035c0

0800e040 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b08c      	sub	sp, #48	; 0x30
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e048:	f3ef 8310 	mrs	r3, PRIMASK
 800e04c:	617b      	str	r3, [r7, #20]
    return(posture);
 800e04e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e050:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e052:	b672      	cpsid	i
    return(int_posture);
 800e054:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800e056:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	2b00      	cmp	r3, #0
 800e062:	d114      	bne.n	800e08e <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	1c5a      	adds	r2, r3, #1
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	61bb      	str	r3, [r7, #24]
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f383 8810 	msr	PRIMASK, r3
}
 800e07e:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d040      	beq.n	800e108 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	4798      	blx	r3
 800e08c:	e03c      	b.n	800e108 <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	3b01      	subs	r3, #1
 800e098:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d103      	bne.n	800e0a8 <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	60da      	str	r2, [r3, #12]
 800e0a6:	e00e      	b.n	800e0c6 <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ac:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a3a      	ldr	r2, [r7, #32]
 800e0b2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	6a3a      	ldr	r2, [r7, #32]
 800e0c4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ca:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800e0e0:	4b0c      	ldr	r3, [pc, #48]	; (800e114 <_tx_semaphore_put+0xd4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	4a0b      	ldr	r2, [pc, #44]	; (800e114 <_tx_semaphore_put+0xd4>)
 800e0e8:	6013      	str	r3, [r2, #0]
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	f383 8810 	msr	PRIMASK, r3
}
 800e0f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800e0f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f8:	f000 f9e2 	bl	800e4c0 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3730      	adds	r7, #48	; 0x30
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	20003664 	.word	0x20003664

0800e118 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b092      	sub	sp, #72	; 0x48
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
 800e124:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800e126:	2300      	movs	r3, #0
 800e128:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800e12a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e12c:	21ef      	movs	r1, #239	; 0xef
 800e12e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e130:	f001 fcf6 	bl	800fb20 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800e134:	22b4      	movs	r2, #180	; 0xb4
 800e136:	2100      	movs	r1, #0
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f001 fcf1 	bl	800fb20 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e154:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e15a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e160:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e166:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e16e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e174:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2220      	movs	r2, #32
 800e17a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e180:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800e182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e184:	3b01      	subs	r3, #1
 800e186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e188:	4413      	add	r3, r2
 800e18a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e190:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e196:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e19c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2203      	movs	r2, #3
 800e1a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4a48      	ldr	r2, [pc, #288]	; (800e2cc <_tx_thread_create+0x1b4>)
 800e1aa:	655a      	str	r2, [r3, #84]	; 0x54
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800e1b2:	4947      	ldr	r1, [pc, #284]	; (800e2d0 <_tx_thread_create+0x1b8>)
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f7f2 f8c3 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e1be:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e1c2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1c4:	b672      	cpsid	i
    return(int_posture);
 800e1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800e1c8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	4a41      	ldr	r2, [pc, #260]	; (800e2d4 <_tx_thread_create+0x1bc>)
 800e1ce:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800e1d0:	4b41      	ldr	r3, [pc, #260]	; (800e2d8 <_tx_thread_create+0x1c0>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10b      	bne.n	800e1f0 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800e1d8:	4a40      	ldr	r2, [pc, #256]	; (800e2dc <_tx_thread_create+0x1c4>)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e1ee:	e016      	b.n	800e21e <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800e1f0:	4b3a      	ldr	r3, [pc, #232]	; (800e2dc <_tx_thread_create+0x1c4>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800e1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1fc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800e1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800e21e:	4b2e      	ldr	r3, [pc, #184]	; (800e2d8 <_tx_thread_create+0x1c0>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3301      	adds	r3, #1
 800e224:	4a2c      	ldr	r2, [pc, #176]	; (800e2d8 <_tx_thread_create+0x1c0>)
 800e226:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800e228:	4b2d      	ldr	r3, [pc, #180]	; (800e2e0 <_tx_thread_create+0x1c8>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3301      	adds	r3, #1
 800e22e:	4a2c      	ldr	r2, [pc, #176]	; (800e2e0 <_tx_thread_create+0x1c8>)
 800e230:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800e232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e234:	2b01      	cmp	r3, #1
 800e236:	d129      	bne.n	800e28c <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e238:	f3ef 8305 	mrs	r3, IPSR
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800e23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800e240:	4b28      	ldr	r3, [pc, #160]	; (800e2e4 <_tx_thread_create+0x1cc>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4313      	orrs	r3, r2
 800e246:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e24a:	d30d      	bcc.n	800e268 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800e24c:	4b26      	ldr	r3, [pc, #152]	; (800e2e8 <_tx_thread_create+0x1d0>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800e252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e254:	2b00      	cmp	r3, #0
 800e256:	d009      	beq.n	800e26c <_tx_thread_create+0x154>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800e258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800e25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e264:	63da      	str	r2, [r3, #60]	; 0x3c
 800e266:	e001      	b.n	800e26c <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	647b      	str	r3, [r7, #68]	; 0x44
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e270:	6a3b      	ldr	r3, [r7, #32]
 800e272:	f383 8810 	msr	PRIMASK, r3
}
 800e276:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f921 	bl	800e4c0 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800e27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e280:	2b00      	cmp	r3, #0
 800e282:	d01e      	beq.n	800e2c2 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800e284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e288:	63da      	str	r2, [r3, #60]	; 0x3c
 800e28a:	e01a      	b.n	800e2c2 <_tx_thread_create+0x1aa>
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	f383 8810 	msr	PRIMASK, r3
}
 800e296:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e298:	f3ef 8310 	mrs	r3, PRIMASK
 800e29c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e29e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e2a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2a2:	b672      	cpsid	i
    return(int_posture);
 800e2a4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800e2a6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800e2a8:	4b0d      	ldr	r3, [pc, #52]	; (800e2e0 <_tx_thread_create+0x1c8>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	4a0c      	ldr	r2, [pc, #48]	; (800e2e0 <_tx_thread_create+0x1c8>)
 800e2b0:	6013      	str	r3, [r2, #0]
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	f383 8810 	msr	PRIMASK, r3
}
 800e2bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e2be:	f000 f8c5 	bl	800e44c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3748      	adds	r7, #72	; 0x48
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	0800eaad 	.word	0x0800eaad
 800e2d0:	0800e36d 	.word	0x0800e36d
 800e2d4:	54485244 	.word	0x54485244
 800e2d8:	200035d4 	.word	0x200035d4
 800e2dc:	200035d0 	.word	0x200035d0
 800e2e0:	20003664 	.word	0x20003664
 800e2e4:	20000070 	.word	0x20000070
 800e2e8:	200035cc 	.word	0x200035cc

0800e2ec <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800e2f0:	4b13      	ldr	r3, [pc, #76]	; (800e340 <_tx_thread_initialize+0x54>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800e2f6:	4b13      	ldr	r3, [pc, #76]	; (800e344 <_tx_thread_initialize+0x58>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	4b12      	ldr	r3, [pc, #72]	; (800e348 <_tx_thread_initialize+0x5c>)
 800e2fe:	2200      	movs	r2, #0
 800e300:	601a      	str	r2, [r3, #0]
 800e302:	4b12      	ldr	r3, [pc, #72]	; (800e34c <_tx_thread_initialize+0x60>)
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800e308:	4b11      	ldr	r3, [pc, #68]	; (800e350 <_tx_thread_initialize+0x64>)
 800e30a:	2220      	movs	r2, #32
 800e30c:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800e30e:	2280      	movs	r2, #128	; 0x80
 800e310:	2100      	movs	r1, #0
 800e312:	4810      	ldr	r0, [pc, #64]	; (800e354 <_tx_thread_initialize+0x68>)
 800e314:	f001 fc04 	bl	800fb20 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <_tx_thread_initialize+0x6c>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <_tx_thread_initialize+0x70>)
 800e320:	2200      	movs	r2, #0
 800e322:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800e324:	4b0e      	ldr	r3, [pc, #56]	; (800e360 <_tx_thread_initialize+0x74>)
 800e326:	2200      	movs	r2, #0
 800e328:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800e32a:	4b0e      	ldr	r3, [pc, #56]	; (800e364 <_tx_thread_initialize+0x78>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 800e330:	4b0d      	ldr	r3, [pc, #52]	; (800e368 <_tx_thread_initialize+0x7c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 800e338:	4a0b      	ldr	r2, [pc, #44]	; (800e368 <_tx_thread_initialize+0x7c>)
 800e33a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800e33c:	bf00      	nop
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	200035c8 	.word	0x200035c8
 800e344:	200035cc 	.word	0x200035cc
 800e348:	200035d8 	.word	0x200035d8
 800e34c:	200035dc 	.word	0x200035dc
 800e350:	200035e0 	.word	0x200035e0
 800e354:	200035e4 	.word	0x200035e4
 800e358:	200035d0 	.word	0x200035d0
 800e35c:	200035d4 	.word	0x200035d4
 800e360:	20003664 	.word	0x20003664
 800e364:	20003668 	.word	0x20003668
 800e368:	2000366c 	.word	0x2000366c

0800e36c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08c      	sub	sp, #48	; 0x30
 800e370:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e372:	4b33      	ldr	r3, [pc, #204]	; (800e440 <_tx_thread_shell_entry+0xd4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e378:	f3ef 8310 	mrs	r3, PRIMASK
 800e37c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e37e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e380:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e382:	b672      	cpsid	i
    return(int_posture);
 800e384:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 800e386:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	f383 8810 	msr	PRIMASK, r3
}
 800e39a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d003      	beq.n	800e3aa <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3a8:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800e3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800e3b6:	4b23      	ldr	r3, [pc, #140]	; (800e444 <_tx_thread_shell_entry+0xd8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800e3be:	4b21      	ldr	r3, [pc, #132]	; (800e444 <_tx_thread_shell_entry+0xd8>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3c4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e3ca:	607b      	str	r3, [r7, #4]
    return(posture);
 800e3cc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800e3ce:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3d0:	b672      	cpsid	i
    return(int_posture);
 800e3d2:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800e3d4:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800e3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e3dc:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800e3f0:	4b15      	ldr	r3, [pc, #84]	; (800e448 <_tx_thread_shell_entry+0xdc>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	4a14      	ldr	r2, [pc, #80]	; (800e448 <_tx_thread_shell_entry+0xdc>)
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	f383 8810 	msr	PRIMASK, r3
}
 800e404:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800e406:	f3ef 8314 	mrs	r3, CONTROL
 800e40a:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800e40c:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800e40e:	623b      	str	r3, [r7, #32]
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	f023 0304 	bic.w	r3, r3, #4
 800e416:	623b      	str	r3, [r7, #32]
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f383 8814 	msr	CONTROL, r3
}
 800e422:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800e424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e426:	2b00      	cmp	r3, #0
 800e428:	d003      	beq.n	800e432 <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	2101      	movs	r1, #1
 800e42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e430:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800e432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e434:	f000 f958 	bl	800e6e8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800e438:	bf00      	nop
 800e43a:	3730      	adds	r7, #48	; 0x30
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	200035c8 	.word	0x200035c8
 800e444:	20003668 	.word	0x20003668
 800e448:	20003664 	.word	0x20003664

0800e44c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b089      	sub	sp, #36	; 0x24
 800e450:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e452:	4b17      	ldr	r3, [pc, #92]	; (800e4b0 <_tx_thread_system_preempt_check+0x64>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d121      	bne.n	800e4a2 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800e45e:	4b15      	ldr	r3, [pc, #84]	; (800e4b4 <_tx_thread_system_preempt_check+0x68>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800e464:	4b14      	ldr	r3, [pc, #80]	; (800e4b8 <_tx_thread_system_preempt_check+0x6c>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800e46a:	69ba      	ldr	r2, [r7, #24]
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d017      	beq.n	800e4a2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e472:	4b12      	ldr	r3, [pc, #72]	; (800e4bc <_tx_thread_system_preempt_check+0x70>)
 800e474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e478:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e47a:	f3ef 8305 	mrs	r3, IPSR
 800e47e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e480:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10c      	bne.n	800e4a0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e486:	f3ef 8310 	mrs	r3, PRIMASK
 800e48a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e48c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800e48e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e490:	b662      	cpsie	i
}
 800e492:	bf00      	nop
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f383 8810 	msr	PRIMASK, r3
}
 800e49e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800e4a0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800e4a2:	bf00      	nop
 800e4a4:	3724      	adds	r7, #36	; 0x24
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	20003664 	.word	0x20003664
 800e4b4:	200035c8 	.word	0x200035c8
 800e4b8:	200035cc 	.word	0x200035cc
 800e4bc:	e000ed04 	.word	0xe000ed04

0800e4c0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b096      	sub	sp, #88	; 0x58
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e4cc:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800e4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800e4d0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800e4d2:	b672      	cpsid	i
    return(int_posture);
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800e4d6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d005      	beq.n	800e4ec <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	334c      	adds	r3, #76	; 0x4c
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f000 fc81 	bl	800edec <_tx_timer_system_deactivate>
 800e4ea:	e002      	b.n	800e4f2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800e4f2:	4b75      	ldr	r3, [pc, #468]	; (800e6c8 <_tx_thread_system_resume+0x208>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	4a73      	ldr	r2, [pc, #460]	; (800e6c8 <_tx_thread_system_resume+0x208>)
 800e4fa:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 8096 	bne.w	800e632 <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 80aa 	beq.w	800e664 <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e514:	2b00      	cmp	r3, #0
 800e516:	f040 8085 	bne.w	800e624 <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e524:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800e526:	4a69      	ldr	r2, [pc, #420]	; (800e6cc <_tx_thread_system_resume+0x20c>)
 800e528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e52e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800e530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d166      	bne.n	800e604 <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800e536:	4965      	ldr	r1, [pc, #404]	; (800e6cc <_tx_thread_system_resume+0x20c>)
 800e538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e54c:	2201      	movs	r2, #1
 800e54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e550:	fa02 f303 	lsl.w	r3, r2, r3
 800e554:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800e556:	4b5e      	ldr	r3, [pc, #376]	; (800e6d0 <_tx_thread_system_resume+0x210>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e55c:	4313      	orrs	r3, r2
 800e55e:	4a5c      	ldr	r2, [pc, #368]	; (800e6d0 <_tx_thread_system_resume+0x210>)
 800e560:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800e562:	4b5c      	ldr	r3, [pc, #368]	; (800e6d4 <_tx_thread_system_resume+0x214>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e568:	429a      	cmp	r2, r3
 800e56a:	d27b      	bcs.n	800e664 <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800e56c:	4a59      	ldr	r2, [pc, #356]	; (800e6d4 <_tx_thread_system_resume+0x214>)
 800e56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e570:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800e572:	4b59      	ldr	r3, [pc, #356]	; (800e6d8 <_tx_thread_system_resume+0x218>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800e578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d103      	bne.n	800e586 <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800e57e:	4a56      	ldr	r2, [pc, #344]	; (800e6d8 <_tx_thread_system_resume+0x218>)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	e06e      	b.n	800e664 <_tx_thread_system_resume+0x1a4>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800e586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d269      	bcs.n	800e664 <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 800e590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e598:	429a      	cmp	r2, r3
 800e59a:	d00b      	beq.n	800e5b4 <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 800e59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a6:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800e5a8:	4b4c      	ldr	r3, [pc, #304]	; (800e6dc <_tx_thread_system_resume+0x21c>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	4a4a      	ldr	r2, [pc, #296]	; (800e6dc <_tx_thread_system_resume+0x21c>)
 800e5b2:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800e5b4:	4a48      	ldr	r2, [pc, #288]	; (800e6d8 <_tx_thread_system_resume+0x218>)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	f383 8810 	msr	PRIMASK, r3
}
 800e5c4:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e5c6:	4b40      	ldr	r3, [pc, #256]	; (800e6c8 <_tx_thread_system_resume+0x208>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d174      	bne.n	800e6bc <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e5d2:	4b43      	ldr	r3, [pc, #268]	; (800e6e0 <_tx_thread_system_resume+0x220>)
 800e5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5d8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5da:	f3ef 8305 	mrs	r3, IPSR
 800e5de:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10c      	bne.n	800e600 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e5ea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800e5ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e5f0:	b662      	cpsie	i
}
 800e5f2:	bf00      	nop
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	f383 8810 	msr	PRIMASK, r3
}
 800e5fe:	bf00      	nop
}
 800e600:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800e602:	e05b      	b.n	800e6bc <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800e604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e608:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800e60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800e610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e61a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e620:	621a      	str	r2, [r3, #32]
 800e622:	e01f      	b.n	800e664 <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2203      	movs	r2, #3
 800e62e:	631a      	str	r2, [r3, #48]	; 0x30
 800e630:	e018      	b.n	800e664 <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e636:	2b01      	cmp	r3, #1
 800e638:	d014      	beq.n	800e664 <_tx_thread_system_resume+0x1a4>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d010      	beq.n	800e664 <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	631a      	str	r2, [r3, #48]	; 0x30
 800e656:	e005      	b.n	800e664 <_tx_thread_system_resume+0x1a4>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2203      	movs	r2, #3
 800e662:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e664:	4b1f      	ldr	r3, [pc, #124]	; (800e6e4 <_tx_thread_system_resume+0x224>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	63bb      	str	r3, [r7, #56]	; 0x38
 800e66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e66c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	f383 8810 	msr	PRIMASK, r3
}
 800e674:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e676:	4b18      	ldr	r3, [pc, #96]	; (800e6d8 <_tx_thread_system_resume+0x218>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d020      	beq.n	800e6c2 <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e680:	4b11      	ldr	r3, [pc, #68]	; (800e6c8 <_tx_thread_system_resume+0x208>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800e686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d11a      	bne.n	800e6c2 <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e68c:	4b14      	ldr	r3, [pc, #80]	; (800e6e0 <_tx_thread_system_resume+0x220>)
 800e68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e692:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e694:	f3ef 8305 	mrs	r3, IPSR
 800e698:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e69a:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d10f      	bne.n	800e6c0 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a4:	613b      	str	r3, [r7, #16]
    return(posture);
 800e6a6:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800e6a8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e6aa:	b662      	cpsie	i
}
 800e6ac:	bf00      	nop
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	f383 8810 	msr	PRIMASK, r3
}
 800e6b8:	bf00      	nop
}
 800e6ba:	e001      	b.n	800e6c0 <_tx_thread_system_resume+0x200>
                                return;
 800e6bc:	bf00      	nop
 800e6be:	e000      	b.n	800e6c2 <_tx_thread_system_resume+0x202>
 800e6c0:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800e6c2:	3758      	adds	r7, #88	; 0x58
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	20003664 	.word	0x20003664
 800e6cc:	200035e4 	.word	0x200035e4
 800e6d0:	200035d8 	.word	0x200035d8
 800e6d4:	200035e0 	.word	0x200035e0
 800e6d8:	200035cc 	.word	0x200035cc
 800e6dc:	200035dc 	.word	0x200035dc
 800e6e0:	e000ed04 	.word	0xe000ed04
 800e6e4:	200035c8 	.word	0x200035c8

0800e6e8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b0a0      	sub	sp, #128	; 0x80
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e6f0:	4b5a      	ldr	r3, [pc, #360]	; (800e85c <_tx_thread_system_suspend+0x174>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6f6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6fa:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 800e6fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 800e6fe:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 800e700:	b672      	cpsid	i
    return(int_posture);
 800e702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800e704:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d112      	bne.n	800e734 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e712:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800e714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e716:	2b00      	cmp	r3, #0
 800e718:	d008      	beq.n	800e72c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800e71a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e71c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e720:	d004      	beq.n	800e72c <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	334c      	adds	r3, #76	; 0x4c
 800e726:	4618      	mov	r0, r3
 800e728:	f000 fafe 	bl	800ed28 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	69db      	ldr	r3, [r3, #28]
 800e730:	4a4b      	ldr	r2, [pc, #300]	; (800e860 <_tx_thread_system_suspend+0x178>)
 800e732:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800e734:	4b4b      	ldr	r3, [pc, #300]	; (800e864 <_tx_thread_system_suspend+0x17c>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3b01      	subs	r3, #1
 800e73a:	4a4a      	ldr	r2, [pc, #296]	; (800e864 <_tx_thread_system_suspend+0x17c>)
 800e73c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e742:	2b01      	cmp	r3, #1
 800e744:	f040 8122 	bne.w	800e98c <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e752:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a1b      	ldr	r3, [r3, #32]
 800e758:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800e75a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d027      	beq.n	800e7b2 <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e766:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800e768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e76a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e76c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800e76e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e772:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800e774:	4a3c      	ldr	r2, [pc, #240]	; (800e868 <_tx_thread_system_suspend+0x180>)
 800e776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	429a      	cmp	r2, r3
 800e780:	f040 808b 	bne.w	800e89a <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800e784:	4938      	ldr	r1, [pc, #224]	; (800e868 <_tx_thread_system_suspend+0x180>)
 800e786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e78a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800e78e:	4b37      	ldr	r3, [pc, #220]	; (800e86c <_tx_thread_system_suspend+0x184>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 8081 	beq.w	800e89a <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e798:	2201      	movs	r2, #1
 800e79a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e79c:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a0:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e7a2:	4b32      	ldr	r3, [pc, #200]	; (800e86c <_tx_thread_system_suspend+0x184>)
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7a8:	43db      	mvns	r3, r3
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	4a2f      	ldr	r2, [pc, #188]	; (800e86c <_tx_thread_system_suspend+0x184>)
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	e073      	b.n	800e89a <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800e7b2:	4a2d      	ldr	r2, [pc, #180]	; (800e868 <_tx_thread_system_suspend+0x180>)
 800e7b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800e7bc:	2201      	movs	r2, #1
 800e7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7c4:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800e7c6:	4b2a      	ldr	r3, [pc, #168]	; (800e870 <_tx_thread_system_suspend+0x188>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7cc:	43db      	mvns	r3, r3
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	4a27      	ldr	r2, [pc, #156]	; (800e870 <_tx_thread_system_suspend+0x188>)
 800e7d2:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800e7d4:	4b25      	ldr	r3, [pc, #148]	; (800e86c <_tx_thread_system_suspend+0x184>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00b      	beq.n	800e7f4 <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 800e7dc:	2201      	movs	r2, #1
 800e7de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e4:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e7e6:	4b21      	ldr	r3, [pc, #132]	; (800e86c <_tx_thread_system_suspend+0x184>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ec:	43db      	mvns	r3, r3
 800e7ee:	4013      	ands	r3, r2
 800e7f0:	4a1e      	ldr	r2, [pc, #120]	; (800e86c <_tx_thread_system_suspend+0x184>)
 800e7f2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800e7f8:	4b1d      	ldr	r3, [pc, #116]	; (800e870 <_tx_thread_system_suspend+0x188>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800e7fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e800:	2b00      	cmp	r3, #0
 800e802:	d13d      	bne.n	800e880 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800e804:	4b1b      	ldr	r3, [pc, #108]	; (800e874 <_tx_thread_system_suspend+0x18c>)
 800e806:	2220      	movs	r2, #32
 800e808:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800e80a:	4b1b      	ldr	r3, [pc, #108]	; (800e878 <_tx_thread_system_suspend+0x190>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	601a      	str	r2, [r3, #0]
 800e810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e812:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e816:	f383 8810 	msr	PRIMASK, r3
}
 800e81a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e81c:	4b11      	ldr	r3, [pc, #68]	; (800e864 <_tx_thread_system_suspend+0x17c>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 800e822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e824:	2b00      	cmp	r3, #0
 800e826:	f040 80db 	bne.w	800e9e0 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e82a:	4b14      	ldr	r3, [pc, #80]	; (800e87c <_tx_thread_system_suspend+0x194>)
 800e82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e830:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e832:	f3ef 8305 	mrs	r3, IPSR
 800e836:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800e838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10c      	bne.n	800e858 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e83e:	f3ef 8310 	mrs	r3, PRIMASK
 800e842:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800e844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 800e846:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e848:	b662      	cpsie	i
}
 800e84a:	bf00      	nop
 800e84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e84e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e852:	f383 8810 	msr	PRIMASK, r3
}
 800e856:	bf00      	nop
}
 800e858:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800e85a:	e0c1      	b.n	800e9e0 <_tx_thread_system_suspend+0x2f8>
 800e85c:	200035c8 	.word	0x200035c8
 800e860:	20003bd4 	.word	0x20003bd4
 800e864:	20003664 	.word	0x20003664
 800e868:	200035e4 	.word	0x200035e4
 800e86c:	200035dc 	.word	0x200035dc
 800e870:	200035d8 	.word	0x200035d8
 800e874:	200035e0 	.word	0x200035e0
 800e878:	200035cc 	.word	0x200035cc
 800e87c:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800e880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e882:	fa93 f3a3 	rbit	r3, r3
 800e886:	663b      	str	r3, [r7, #96]	; 0x60
 800e888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e88a:	fab3 f383 	clz	r3, r3
 800e88e:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800e890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e894:	4413      	add	r3, r2
 800e896:	4a56      	ldr	r2, [pc, #344]	; (800e9f0 <_tx_thread_system_suspend+0x308>)
 800e898:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800e89a:	4b56      	ldr	r3, [pc, #344]	; (800e9f4 <_tx_thread_system_suspend+0x30c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d173      	bne.n	800e98c <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800e8a4:	4b52      	ldr	r3, [pc, #328]	; (800e9f0 <_tx_thread_system_suspend+0x308>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a53      	ldr	r2, [pc, #332]	; (800e9f8 <_tx_thread_system_suspend+0x310>)
 800e8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ae:	4a51      	ldr	r2, [pc, #324]	; (800e9f4 <_tx_thread_system_suspend+0x30c>)
 800e8b0:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800e8b2:	4b52      	ldr	r3, [pc, #328]	; (800e9fc <_tx_thread_system_suspend+0x314>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d043      	beq.n	800e942 <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800e8ba:	4b51      	ldr	r3, [pc, #324]	; (800ea00 <_tx_thread_system_suspend+0x318>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	4a4f      	ldr	r2, [pc, #316]	; (800ea00 <_tx_thread_system_suspend+0x318>)
 800e8c2:	6013      	str	r3, [r2, #0]
 800e8c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8c6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ca:	f383 8810 	msr	PRIMASK, r3
}
 800e8ce:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8d0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8d4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e8d8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8da:	b672      	cpsid	i
    return(int_posture);
 800e8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 800e8de:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800e8e0:	4b47      	ldr	r3, [pc, #284]	; (800ea00 <_tx_thread_system_suspend+0x318>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	4a46      	ldr	r2, [pc, #280]	; (800ea00 <_tx_thread_system_suspend+0x318>)
 800e8e8:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 800e8ee:	4b43      	ldr	r3, [pc, #268]	; (800e9fc <_tx_thread_system_suspend+0x314>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800e8f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8f6:	fa93 f3a3 	rbit	r3, r3
 800e8fa:	663b      	str	r3, [r7, #96]	; 0x60
 800e8fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8fe:	fab3 f383 	clz	r3, r3
 800e902:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 800e904:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e908:	4413      	add	r3, r2
 800e90a:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 800e90c:	4a3a      	ldr	r2, [pc, #232]	; (800e9f8 <_tx_thread_system_suspend+0x310>)
 800e90e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e916:	4b36      	ldr	r3, [pc, #216]	; (800e9f0 <_tx_thread_system_suspend+0x308>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d811      	bhi.n	800e942 <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its 
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 800e91e:	4a36      	ldr	r2, [pc, #216]	; (800e9f8 <_tx_thread_system_suspend+0x310>)
 800e920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e926:	4a33      	ldr	r2, [pc, #204]	; (800e9f4 <_tx_thread_system_suspend+0x30c>)
 800e928:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e92a:	2201      	movs	r2, #1
 800e92c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e92e:	fa02 f303 	lsl.w	r3, r2, r3
 800e932:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800e934:	4b31      	ldr	r3, [pc, #196]	; (800e9fc <_tx_thread_system_suspend+0x314>)
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e93a:	43db      	mvns	r3, r3
 800e93c:	4013      	ands	r3, r2
 800e93e:	4a2f      	ldr	r2, [pc, #188]	; (800e9fc <_tx_thread_system_suspend+0x314>)
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e944:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	f383 8810 	msr	PRIMASK, r3
}
 800e94c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e94e:	4b2c      	ldr	r3, [pc, #176]	; (800ea00 <_tx_thread_system_suspend+0x318>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 800e954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e956:	2b00      	cmp	r3, #0
 800e958:	d144      	bne.n	800e9e4 <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e95a:	4b2a      	ldr	r3, [pc, #168]	; (800ea04 <_tx_thread_system_suspend+0x31c>)
 800e95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e960:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e962:	f3ef 8305 	mrs	r3, IPSR
 800e966:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10c      	bne.n	800e988 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e96e:	f3ef 8310 	mrs	r3, PRIMASK
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800e976:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e978:	b662      	cpsie	i
}
 800e97a:	bf00      	nop
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	f383 8810 	msr	PRIMASK, r3
}
 800e986:	bf00      	nop
}
 800e988:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800e98a:	e02b      	b.n	800e9e4 <_tx_thread_system_suspend+0x2fc>
 800e98c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e98e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	f383 8810 	msr	PRIMASK, r3
}
 800e996:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e998:	4b16      	ldr	r3, [pc, #88]	; (800e9f4 <_tx_thread_system_suspend+0x30c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d022      	beq.n	800e9e8 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e9a2:	4b17      	ldr	r3, [pc, #92]	; (800ea00 <_tx_thread_system_suspend+0x318>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 800e9a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d11c      	bne.n	800e9e8 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e9ae:	4b15      	ldr	r3, [pc, #84]	; (800ea04 <_tx_thread_system_suspend+0x31c>)
 800e9b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e9b6:	f3ef 8305 	mrs	r3, IPSR
 800e9ba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e9bc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10c      	bne.n	800e9dc <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e9c6:	613b      	str	r3, [r7, #16]
    return(posture);
 800e9c8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800e9ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e9cc:	b662      	cpsie	i
}
 800e9ce:	bf00      	nop
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f383 8810 	msr	PRIMASK, r3
}
 800e9da:	bf00      	nop
}
 800e9dc:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800e9de:	e003      	b.n	800e9e8 <_tx_thread_system_suspend+0x300>
                return;
 800e9e0:	bf00      	nop
 800e9e2:	e002      	b.n	800e9ea <_tx_thread_system_suspend+0x302>
            return;
 800e9e4:	bf00      	nop
 800e9e6:	e000      	b.n	800e9ea <_tx_thread_system_suspend+0x302>
    return;
 800e9e8:	bf00      	nop
}
 800e9ea:	3780      	adds	r7, #128	; 0x80
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	200035e0 	.word	0x200035e0
 800e9f4:	200035cc 	.word	0x200035cc
 800e9f8:	200035e4 	.word	0x200035e4
 800e9fc:	200035dc 	.word	0x200035dc
 800ea00:	20003664 	.word	0x20003664
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ea0e:	4b21      	ldr	r3, [pc, #132]	; (800ea94 <_tx_thread_time_slice+0x8c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea14:	f3ef 8310 	mrs	r3, PRIMASK
 800ea18:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800ea1c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea1e:	b672      	cpsid	i
    return(int_posture);
 800ea20:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800ea22:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ea24:	4b1c      	ldr	r3, [pc, #112]	; (800ea98 <_tx_thread_time_slice+0x90>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d024      	beq.n	800ea7a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d120      	bne.n	800ea7a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	69da      	ldr	r2, [r3, #28]
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	4a15      	ldr	r2, [pc, #84]	; (800ea9c <_tx_thread_time_slice+0x94>)
 800ea46:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	6a1b      	ldr	r3, [r3, #32]
 800ea4c:	697a      	ldr	r2, [r7, #20]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d013      	beq.n	800ea7a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d10d      	bne.n	800ea7a <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	6a12      	ldr	r2, [r2, #32]
 800ea66:	490e      	ldr	r1, [pc, #56]	; (800eaa0 <_tx_thread_time_slice+0x98>)
 800ea68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ea6c:	4b0d      	ldr	r3, [pc, #52]	; (800eaa4 <_tx_thread_time_slice+0x9c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a0b      	ldr	r2, [pc, #44]	; (800eaa0 <_tx_thread_time_slice+0x98>)
 800ea72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea76:	4a0c      	ldr	r2, [pc, #48]	; (800eaa8 <_tx_thread_time_slice+0xa0>)
 800ea78:	6013      	str	r3, [r2, #0]
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f383 8810 	msr	PRIMASK, r3
}
 800ea84:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800ea86:	bf00      	nop
 800ea88:	371c      	adds	r7, #28
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	200035c8 	.word	0x200035c8
 800ea98:	20003674 	.word	0x20003674
 800ea9c:	20003bd4 	.word	0x20003bd4
 800eaa0:	200035e4 	.word	0x200035e4
 800eaa4:	200035e0 	.word	0x200035e0
 800eaa8:	200035cc 	.word	0x200035cc

0800eaac <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b08a      	sub	sp, #40	; 0x28
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eab8:	f3ef 8310 	mrs	r3, PRIMASK
 800eabc:	617b      	str	r3, [r7, #20]
    return(posture);
 800eabe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800eac0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eac2:	b672      	cpsid	i
    return(int_posture);
 800eac4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800eac6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eacc:	2b04      	cmp	r3, #4
 800eace:	d10e      	bne.n	800eaee <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800ead0:	4b13      	ldr	r3, [pc, #76]	; (800eb20 <_tx_thread_timeout+0x74>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3301      	adds	r3, #1
 800ead6:	4a12      	ldr	r2, [pc, #72]	; (800eb20 <_tx_thread_timeout+0x74>)
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f383 8810 	msr	PRIMASK, r3
}
 800eae4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800eae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eae8:	f7ff fcea 	bl	800e4c0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800eaec:	e013      	b.n	800eb16 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaf2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eafa:	61bb      	str	r3, [r7, #24]
 800eafc:	6a3b      	ldr	r3, [r7, #32]
 800eafe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	f383 8810 	msr	PRIMASK, r3
}
 800eb06:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	69b9      	ldr	r1, [r7, #24]
 800eb12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb14:	4798      	blx	r3
}
 800eb16:	bf00      	nop
 800eb18:	3728      	adds	r7, #40	; 0x28
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	20003664 	.word	0x20003664

0800eb24 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08a      	sub	sp, #40	; 0x28
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800eb32:	222c      	movs	r2, #44	; 0x2c
 800eb34:	2100      	movs	r1, #0
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f000 fff2 	bl	800fb20 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb46:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb4c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb5a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb5e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800eb60:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800eb62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb64:	b672      	cpsid	i
    return(int_posture);
 800eb66:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	4a1c      	ldr	r2, [pc, #112]	; (800ebe0 <_tx_timer_create+0xbc>)
 800eb6e:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800eb70:	4b1c      	ldr	r3, [pc, #112]	; (800ebe4 <_tx_timer_create+0xc0>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d109      	bne.n	800eb8c <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800eb78:	4a1b      	ldr	r2, [pc, #108]	; (800ebe8 <_tx_timer_create+0xc4>)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	629a      	str	r2, [r3, #40]	; 0x28
 800eb8a:	e011      	b.n	800ebb0 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800eb8c:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <_tx_timer_create+0xc4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800eb92:	6a3b      	ldr	r3, [r7, #32]
 800eb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb96:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800eb98:	6a3b      	ldr	r3, [r7, #32]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	69fa      	ldr	r2, [r7, #28]
 800eba8:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6a3a      	ldr	r2, [r7, #32]
 800ebae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <_tx_timer_create+0xc0>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	4a0b      	ldr	r2, [pc, #44]	; (800ebe4 <_tx_timer_create+0xc0>)
 800ebb8:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d104      	bne.n	800ebca <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 f8af 	bl	800ed28 <_tx_timer_system_activate>
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	f383 8810 	msr	PRIMASK, r3
}
 800ebd4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3728      	adds	r7, #40	; 0x28
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	4154494d 	.word	0x4154494d
 800ebe4:	2000370c 	.word	0x2000370c
 800ebe8:	20003708 	.word	0x20003708

0800ebec <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ebf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf6:	607b      	str	r3, [r7, #4]
    return(posture);
 800ebf8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ebfa:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ebfc:	b672      	cpsid	i
    return(int_posture);
 800ebfe:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800ec00:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800ec02:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <_tx_timer_expiration_process+0x3c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3301      	adds	r3, #1
 800ec08:	4a07      	ldr	r2, [pc, #28]	; (800ec28 <_tx_timer_expiration_process+0x3c>)
 800ec0a:	6013      	str	r3, [r2, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	f383 8810 	msr	PRIMASK, r3
}
 800ec16:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800ec18:	4804      	ldr	r0, [pc, #16]	; (800ec2c <_tx_timer_expiration_process+0x40>)
 800ec1a:	f7ff fc51 	bl	800e4c0 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ec1e:	bf00      	nop
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20003664 	.word	0x20003664
 800ec2c:	20003714 	.word	0x20003714

0800ec30 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800ec30:	b590      	push	{r4, r7, lr}
 800ec32:	b089      	sub	sp, #36	; 0x24
 800ec34:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800ec36:	4b28      	ldr	r3, [pc, #160]	; (800ecd8 <_tx_timer_initialize+0xa8>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800ec3c:	4b27      	ldr	r3, [pc, #156]	; (800ecdc <_tx_timer_initialize+0xac>)
 800ec3e:	2200      	movs	r2, #0
 800ec40:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ec42:	4b27      	ldr	r3, [pc, #156]	; (800ece0 <_tx_timer_initialize+0xb0>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800ec48:	4b26      	ldr	r3, [pc, #152]	; (800ece4 <_tx_timer_initialize+0xb4>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800ec4e:	4b26      	ldr	r3, [pc, #152]	; (800ece8 <_tx_timer_initialize+0xb8>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800ec54:	2280      	movs	r2, #128	; 0x80
 800ec56:	2100      	movs	r1, #0
 800ec58:	4824      	ldr	r0, [pc, #144]	; (800ecec <_tx_timer_initialize+0xbc>)
 800ec5a:	f000 ff61 	bl	800fb20 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800ec5e:	4b24      	ldr	r3, [pc, #144]	; (800ecf0 <_tx_timer_initialize+0xc0>)
 800ec60:	4a22      	ldr	r2, [pc, #136]	; (800ecec <_tx_timer_initialize+0xbc>)
 800ec62:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800ec64:	4b23      	ldr	r3, [pc, #140]	; (800ecf4 <_tx_timer_initialize+0xc4>)
 800ec66:	4a21      	ldr	r2, [pc, #132]	; (800ecec <_tx_timer_initialize+0xbc>)
 800ec68:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800ec6a:	4b23      	ldr	r3, [pc, #140]	; (800ecf8 <_tx_timer_initialize+0xc8>)
 800ec6c:	4a23      	ldr	r2, [pc, #140]	; (800ecfc <_tx_timer_initialize+0xcc>)
 800ec6e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800ec70:	4b21      	ldr	r3, [pc, #132]	; (800ecf8 <_tx_timer_initialize+0xc8>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4a20      	ldr	r2, [pc, #128]	; (800ecf8 <_tx_timer_initialize+0xc8>)
 800ec78:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800ec7a:	4b21      	ldr	r3, [pc, #132]	; (800ed00 <_tx_timer_initialize+0xd0>)
 800ec7c:	4a21      	ldr	r2, [pc, #132]	; (800ed04 <_tx_timer_initialize+0xd4>)
 800ec7e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800ec80:	4b21      	ldr	r3, [pc, #132]	; (800ed08 <_tx_timer_initialize+0xd8>)
 800ec82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ec86:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800ec88:	4b20      	ldr	r3, [pc, #128]	; (800ed0c <_tx_timer_initialize+0xdc>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 800ec8e:	4b1c      	ldr	r3, [pc, #112]	; (800ed00 <_tx_timer_initialize+0xd0>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4a1d      	ldr	r2, [pc, #116]	; (800ed08 <_tx_timer_initialize+0xd8>)
 800ec94:	6812      	ldr	r2, [r2, #0]
 800ec96:	491d      	ldr	r1, [pc, #116]	; (800ed0c <_tx_timer_initialize+0xdc>)
 800ec98:	6809      	ldr	r1, [r1, #0]
 800ec9a:	481c      	ldr	r0, [pc, #112]	; (800ed0c <_tx_timer_initialize+0xdc>)
 800ec9c:	6800      	ldr	r0, [r0, #0]
 800ec9e:	2400      	movs	r4, #0
 800eca0:	9405      	str	r4, [sp, #20]
 800eca2:	2400      	movs	r4, #0
 800eca4:	9404      	str	r4, [sp, #16]
 800eca6:	9003      	str	r0, [sp, #12]
 800eca8:	9102      	str	r1, [sp, #8]
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	4b18      	ldr	r3, [pc, #96]	; (800ed10 <_tx_timer_initialize+0xe0>)
 800ecb0:	4a18      	ldr	r2, [pc, #96]	; (800ed14 <_tx_timer_initialize+0xe4>)
 800ecb2:	4919      	ldr	r1, [pc, #100]	; (800ed18 <_tx_timer_initialize+0xe8>)
 800ecb4:	4819      	ldr	r0, [pc, #100]	; (800ed1c <_tx_timer_initialize+0xec>)
 800ecb6:	f7ff fa2f 	bl	800e118 <_tx_thread_create>
 800ecba:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1e5      	bne.n	800ec8e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800ecc2:	4b17      	ldr	r3, [pc, #92]	; (800ed20 <_tx_timer_initialize+0xf0>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800ecc8:	4b16      	ldr	r3, [pc, #88]	; (800ed24 <_tx_timer_initialize+0xf4>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800ecce:	bf00      	nop
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd90      	pop	{r4, r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20003670 	.word	0x20003670
 800ecdc:	20003bd4 	.word	0x20003bd4
 800ece0:	20003674 	.word	0x20003674
 800ece4:	20003704 	.word	0x20003704
 800ece8:	20003710 	.word	0x20003710
 800ecec:	20003678 	.word	0x20003678
 800ecf0:	200036f8 	.word	0x200036f8
 800ecf4:	20003700 	.word	0x20003700
 800ecf8:	200036fc 	.word	0x200036fc
 800ecfc:	200036f4 	.word	0x200036f4
 800ed00:	200037c8 	.word	0x200037c8
 800ed04:	200037d4 	.word	0x200037d4
 800ed08:	200037cc 	.word	0x200037cc
 800ed0c:	200037d0 	.word	0x200037d0
 800ed10:	4154494d 	.word	0x4154494d
 800ed14:	0800ee5d 	.word	0x0800ee5d
 800ed18:	08016458 	.word	0x08016458
 800ed1c:	20003714 	.word	0x20003714
 800ed20:	20003708 	.word	0x20003708
 800ed24:	2000370c 	.word	0x2000370c

0800ed28 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b089      	sub	sp, #36	; 0x24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d04a      	beq.n	800edd2 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed42:	d046      	beq.n	800edd2 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	699b      	ldr	r3, [r3, #24]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d142      	bne.n	800edd2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	d902      	bls.n	800ed58 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800ed52:	231f      	movs	r3, #31
 800ed54:	61bb      	str	r3, [r7, #24]
 800ed56:	e002      	b.n	800ed5e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800ed5e:	4b20      	ldr	r3, [pc, #128]	; (800ede0 <_tx_timer_system_activate+0xb8>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	4413      	add	r3, r2
 800ed68:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800ed6a:	4b1e      	ldr	r3, [pc, #120]	; (800ede4 <_tx_timer_system_activate+0xbc>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	69fa      	ldr	r2, [r7, #28]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d30b      	bcc.n	800ed8c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800ed74:	4b1b      	ldr	r3, [pc, #108]	; (800ede4 <_tx_timer_system_activate+0xbc>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	69fa      	ldr	r2, [r7, #28]
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	109b      	asrs	r3, r3, #2
 800ed7e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800ed80:	4b19      	ldr	r3, [pc, #100]	; (800ede8 <_tx_timer_system_activate+0xc0>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4413      	add	r3, r2
 800ed8a:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d109      	bne.n	800eda8 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	e011      	b.n	800edcc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	695b      	ldr	r3, [r3, #20]
 800edb2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	69fa      	ldr	r2, [r7, #28]
 800edd0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800edd2:	bf00      	nop
 800edd4:	3724      	adds	r7, #36	; 0x24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20003700 	.word	0x20003700
 800ede4:	200036fc 	.word	0x200036fc
 800ede8:	200036f8 	.word	0x200036f8

0800edec <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800edec:	b480      	push	{r7}
 800edee:	b087      	sub	sp, #28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d026      	beq.n	800ee4e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d108      	bne.n	800ee20 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d117      	bne.n	800ee48 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	e013      	b.n	800ee48 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	695b      	ldr	r3, [r3, #20]
 800ee24:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d105      	bne.n	800ee48 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	697a      	ldr	r2, [r7, #20]
 800ee40:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	693a      	ldr	r2, [r7, #16]
 800ee46:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	619a      	str	r2, [r3, #24]
    }
}
 800ee4e:	bf00      	nop
 800ee50:	371c      	adds	r7, #28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
	...

0800ee5c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b098      	sub	sp, #96	; 0x60
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800ee64:	2300      	movs	r3, #0
 800ee66:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a73      	ldr	r2, [pc, #460]	; (800f038 <_tx_timer_thread_entry+0x1dc>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	f040 80de 	bne.w	800f02e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee72:	f3ef 8310 	mrs	r3, PRIMASK
 800ee76:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ee78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ee7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee7c:	b672      	cpsid	i
    return(int_posture);
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800ee80:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800ee82:	4b6e      	ldr	r3, [pc, #440]	; (800f03c <_tx_timer_thread_entry+0x1e0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d003      	beq.n	800ee98 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f107 020c 	add.w	r2, r7, #12
 800ee96:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800ee98:	4b68      	ldr	r3, [pc, #416]	; (800f03c <_tx_timer_thread_entry+0x1e0>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800eea0:	4b66      	ldr	r3, [pc, #408]	; (800f03c <_tx_timer_thread_entry+0x1e0>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	3304      	adds	r3, #4
 800eea6:	4a65      	ldr	r2, [pc, #404]	; (800f03c <_tx_timer_thread_entry+0x1e0>)
 800eea8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800eeaa:	4b64      	ldr	r3, [pc, #400]	; (800f03c <_tx_timer_thread_entry+0x1e0>)
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	4b64      	ldr	r3, [pc, #400]	; (800f040 <_tx_timer_thread_entry+0x1e4>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d103      	bne.n	800eebe <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 800eeb6:	4b63      	ldr	r3, [pc, #396]	; (800f044 <_tx_timer_thread_entry+0x1e8>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a60      	ldr	r2, [pc, #384]	; (800f03c <_tx_timer_thread_entry+0x1e0>)
 800eebc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800eebe:	4b62      	ldr	r3, [pc, #392]	; (800f048 <_tx_timer_thread_entry+0x1ec>)
 800eec0:	2200      	movs	r2, #0
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eec6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeca:	f383 8810 	msr	PRIMASK, r3
}
 800eece:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eed0:	f3ef 8310 	mrs	r3, PRIMASK
 800eed4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800eed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800eed8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800eeda:	b672      	cpsid	i
    return(int_posture);
 800eedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800eede:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800eee0:	e07f      	b.n	800efe2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	691b      	ldr	r3, [r3, #16]
 800eeea:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800eeec:	2300      	movs	r3, #0
 800eeee:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800eef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d102      	bne.n	800eefe <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800eef8:	2300      	movs	r3, #0
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	e00e      	b.n	800ef1c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800eefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ef04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef08:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ef0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef0e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ef10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef12:	f107 020c 	add.w	r2, r7, #12
 800ef16:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ef18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef1a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ef1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b20      	cmp	r3, #32
 800ef22:	d911      	bls.n	800ef48 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800ef24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800ef2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef2e:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ef30:	2300      	movs	r3, #0
 800ef32:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ef34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef36:	f107 0208 	add.w	r2, r7, #8
 800ef3a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800ef3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef40:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ef42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef44:	60bb      	str	r3, [r7, #8]
 800ef46:	e01a      	b.n	800ef7e <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ef48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ef4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ef54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef56:	685a      	ldr	r2, [r3, #4]
 800ef58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef5a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ef5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d009      	beq.n	800ef78 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ef64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef66:	f107 0208 	add.w	r2, r7, #8
 800ef6a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ef6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef70:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ef72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef74:	60bb      	str	r3, [r7, #8]
 800ef76:	e002      	b.n	800ef7e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ef78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ef7e:	4a33      	ldr	r2, [pc, #204]	; (800f04c <_tx_timer_thread_entry+0x1f0>)
 800ef80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef82:	6013      	str	r3, [r2, #0]
 800ef84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef86:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	f383 8810 	msr	PRIMASK, r3
}
 800ef8e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800ef90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d002      	beq.n	800ef9c <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 800ef96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ef9a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef9c:	f3ef 8310 	mrs	r3, PRIMASK
 800efa0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800efa4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800efa6:	b672      	cpsid	i
    return(int_posture);
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800efaa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800efac:	4b27      	ldr	r3, [pc, #156]	; (800f04c <_tx_timer_thread_entry+0x1f0>)
 800efae:	2200      	movs	r2, #0
 800efb0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d105      	bne.n	800efc6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800efba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efbc:	2200      	movs	r2, #0
 800efbe:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800efc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800efc2:	f7ff feb1 	bl	800ed28 <_tx_timer_system_activate>
 800efc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efc8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	f383 8810 	msr	PRIMASK, r3
}
 800efd0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efd2:	f3ef 8310 	mrs	r3, PRIMASK
 800efd6:	623b      	str	r3, [r7, #32]
    return(posture);
 800efd8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800efda:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800efdc:	b672      	cpsid	i
    return(int_posture);
 800efde:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800efe0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f47f af7c 	bne.w	800eee2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800efea:	4b17      	ldr	r3, [pc, #92]	; (800f048 <_tx_timer_thread_entry+0x1ec>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d116      	bne.n	800f020 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800eff2:	4b17      	ldr	r3, [pc, #92]	; (800f050 <_tx_timer_thread_entry+0x1f4>)
 800eff4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800eff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff8:	2203      	movs	r2, #3
 800effa:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800effc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effe:	2201      	movs	r2, #1
 800f000:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800f002:	4b14      	ldr	r3, [pc, #80]	; (800f054 <_tx_timer_thread_entry+0x1f8>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	4a12      	ldr	r2, [pc, #72]	; (800f054 <_tx_timer_thread_entry+0x1f8>)
 800f00a:	6013      	str	r3, [r2, #0]
 800f00c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f00e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	f383 8810 	msr	PRIMASK, r3
}
 800f016:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f018:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f01a:	f7ff fb65 	bl	800e6e8 <_tx_thread_system_suspend>
 800f01e:	e728      	b.n	800ee72 <_tx_timer_thread_entry+0x16>
 800f020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f022:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	f383 8810 	msr	PRIMASK, r3
}
 800f02a:	bf00      	nop
            TX_DISABLE
 800f02c:	e721      	b.n	800ee72 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800f02e:	bf00      	nop
 800f030:	3760      	adds	r7, #96	; 0x60
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	4154494d 	.word	0x4154494d
 800f03c:	20003700 	.word	0x20003700
 800f040:	200036fc 	.word	0x200036fc
 800f044:	200036f8 	.word	0x200036f8
 800f048:	20003704 	.word	0x20003704
 800f04c:	20003710 	.word	0x20003710
 800f050:	20003714 	.word	0x20003714
 800f054:	20003664 	.word	0x20003664

0800f058 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b08a      	sub	sp, #40	; 0x28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
 800f064:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f066:	2300      	movs	r3, #0
 800f068:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d102      	bne.n	800f076 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800f070:	2302      	movs	r3, #2
 800f072:	627b      	str	r3, [r7, #36]	; 0x24
 800f074:	e029      	b.n	800f0ca <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a2d      	ldr	r2, [pc, #180]	; (800f130 <_txe_byte_allocate+0xd8>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d002      	beq.n	800f086 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800f080:	2302      	movs	r3, #2
 800f082:	627b      	str	r3, [r7, #36]	; 0x24
 800f084:	e021      	b.n	800f0ca <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d102      	bne.n	800f092 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800f08c:	2303      	movs	r3, #3
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
 800f090:	e01b      	b.n	800f0ca <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800f098:	2305      	movs	r3, #5
 800f09a:	627b      	str	r3, [r7, #36]	; 0x24
 800f09c:	e015      	b.n	800f0ca <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d902      	bls.n	800f0ae <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800f0a8:	2305      	movs	r3, #5
 800f0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ac:	e00d      	b.n	800f0ca <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00a      	beq.n	800f0ca <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f0b4:	f3ef 8305 	mrs	r3, IPSR
 800f0b8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800f0ba:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f0bc:	4b1d      	ldr	r3, [pc, #116]	; (800f134 <_txe_byte_allocate+0xdc>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800f0c6:	2304      	movs	r3, #4
 800f0c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d108      	bne.n	800f0e2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800f0d0:	4b19      	ldr	r3, [pc, #100]	; (800f138 <_txe_byte_allocate+0xe0>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	4a18      	ldr	r2, [pc, #96]	; (800f13c <_txe_byte_allocate+0xe4>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d101      	bne.n	800f0e2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800f0de:	2313      	movs	r3, #19
 800f0e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d114      	bne.n	800f112 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f0e8:	f3ef 8305 	mrs	r3, IPSR
 800f0ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f0ee:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f0f0:	4b10      	ldr	r3, [pc, #64]	; (800f134 <_txe_byte_allocate+0xdc>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00b      	beq.n	800f112 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f0fa:	f3ef 8305 	mrs	r3, IPSR
 800f0fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f100:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f102:	4b0c      	ldr	r3, [pc, #48]	; (800f134 <_txe_byte_allocate+0xdc>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4313      	orrs	r3, r2
 800f108:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f10c:	d201      	bcs.n	800f112 <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f10e:	2313      	movs	r3, #19
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	d106      	bne.n	800f126 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	68b9      	ldr	r1, [r7, #8]
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7fe fc3a 	bl	800d998 <_tx_byte_allocate>
 800f124:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800f126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3728      	adds	r7, #40	; 0x28
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	42595445 	.word	0x42595445
 800f134:	20000070 	.word	0x20000070
 800f138:	200035c8 	.word	0x200035c8
 800f13c:	20003714 	.word	0x20003714

0800f140 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b092      	sub	sp, #72	; 0x48
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f14e:	2300      	movs	r3, #0
 800f150:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d102      	bne.n	800f15e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800f158:	2302      	movs	r3, #2
 800f15a:	647b      	str	r3, [r7, #68]	; 0x44
 800f15c:	e075      	b.n	800f24a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800f15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f160:	2b34      	cmp	r3, #52	; 0x34
 800f162:	d002      	beq.n	800f16a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800f164:	2302      	movs	r3, #2
 800f166:	647b      	str	r3, [r7, #68]	; 0x44
 800f168:	e06f      	b.n	800f24a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f16a:	f3ef 8310 	mrs	r3, PRIMASK
 800f16e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800f172:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800f174:	b672      	cpsid	i
    return(int_posture);
 800f176:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 800f178:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f17a:	4b3b      	ldr	r3, [pc, #236]	; (800f268 <_txe_byte_pool_create+0x128>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3301      	adds	r3, #1
 800f180:	4a39      	ldr	r2, [pc, #228]	; (800f268 <_txe_byte_pool_create+0x128>)
 800f182:	6013      	str	r3, [r2, #0]
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18a:	f383 8810 	msr	PRIMASK, r3
}
 800f18e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800f190:	4b36      	ldr	r3, [pc, #216]	; (800f26c <_txe_byte_pool_create+0x12c>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800f196:	2300      	movs	r3, #0
 800f198:	643b      	str	r3, [r7, #64]	; 0x40
 800f19a:	e009      	b.n	800f1b0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d00b      	beq.n	800f1bc <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800f1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800f1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	643b      	str	r3, [r7, #64]	; 0x40
 800f1b0:	4b2f      	ldr	r3, [pc, #188]	; (800f270 <_txe_byte_pool_create+0x130>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d3f0      	bcc.n	800f19c <_txe_byte_pool_create+0x5c>
 800f1ba:	e000      	b.n	800f1be <_txe_byte_pool_create+0x7e>
                break;
 800f1bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f1be:	f3ef 8310 	mrs	r3, PRIMASK
 800f1c2:	623b      	str	r3, [r7, #32]
    return(posture);
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f1c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f1c8:	b672      	cpsid	i
    return(int_posture);
 800f1ca:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f1cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f1ce:	4b26      	ldr	r3, [pc, #152]	; (800f268 <_txe_byte_pool_create+0x128>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	4a24      	ldr	r2, [pc, #144]	; (800f268 <_txe_byte_pool_create+0x128>)
 800f1d6:	6013      	str	r3, [r2, #0]
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	f383 8810 	msr	PRIMASK, r3
}
 800f1e2:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f1e4:	f7ff f932 	bl	800e44c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d102      	bne.n	800f1f6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	647b      	str	r3, [r7, #68]	; 0x44
 800f1f4:	e029      	b.n	800f24a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d102      	bne.n	800f202 <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800f1fc:	2303      	movs	r3, #3
 800f1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800f200:	e023      	b.n	800f24a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b63      	cmp	r3, #99	; 0x63
 800f206:	d802      	bhi.n	800f20e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800f208:	2305      	movs	r3, #5
 800f20a:	647b      	str	r3, [r7, #68]	; 0x44
 800f20c:	e01d      	b.n	800f24a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800f20e:	4b19      	ldr	r3, [pc, #100]	; (800f274 <_txe_byte_pool_create+0x134>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800f214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f216:	4a18      	ldr	r2, [pc, #96]	; (800f278 <_txe_byte_pool_create+0x138>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d101      	bne.n	800f220 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f21c:	2313      	movs	r3, #19
 800f21e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f220:	f3ef 8305 	mrs	r3, IPSR
 800f224:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f226:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f228:	4b14      	ldr	r3, [pc, #80]	; (800f27c <_txe_byte_pool_create+0x13c>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00b      	beq.n	800f24a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f232:	f3ef 8305 	mrs	r3, IPSR
 800f236:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f238:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f23a:	4b10      	ldr	r3, [pc, #64]	; (800f27c <_txe_byte_pool_create+0x13c>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4313      	orrs	r3, r2
 800f240:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f244:	d201      	bcs.n	800f24a <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f246:	2313      	movs	r3, #19
 800f248:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d106      	bne.n	800f25e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	68b9      	ldr	r1, [r7, #8]
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7fe fce0 	bl	800dc1c <_tx_byte_pool_create>
 800f25c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800f25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f260:	4618      	mov	r0, r3
 800f262:	3748      	adds	r7, #72	; 0x48
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	20003664 	.word	0x20003664
 800f26c:	200035b8 	.word	0x200035b8
 800f270:	200035bc 	.word	0x200035bc
 800f274:	200035c8 	.word	0x200035c8
 800f278:	20003714 	.word	0x20003714
 800f27c:	20000070 	.word	0x20000070

0800f280 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d102      	bne.n	800f294 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800f28e:	230c      	movs	r3, #12
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	e00b      	b.n	800f2ac <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a07      	ldr	r2, [pc, #28]	; (800f2b8 <_txe_semaphore_put+0x38>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d002      	beq.n	800f2a4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800f29e:	230c      	movs	r3, #12
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	e003      	b.n	800f2ac <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7fe fecb 	bl	800e040 <_tx_semaphore_put>
 800f2aa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	53454d41 	.word	0x53454d41

0800f2bc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b09a      	sub	sp, #104	; 0x68
 800f2c0:	af06      	add	r7, sp, #24
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d102      	bne.n	800f2da <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f2d4:	230e      	movs	r3, #14
 800f2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2d8:	e0bb      	b.n	800f452 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800f2da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2dc:	2bb4      	cmp	r3, #180	; 0xb4
 800f2de:	d002      	beq.n	800f2e6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f2e0:	230e      	movs	r3, #14
 800f2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2e4:	e0b5      	b.n	800f452 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f2e6:	f3ef 8310 	mrs	r3, PRIMASK
 800f2ea:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800f2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800f2ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800f2f0:	b672      	cpsid	i
    return(int_posture);
 800f2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f2f4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f2f6:	4b64      	ldr	r3, [pc, #400]	; (800f488 <_txe_thread_create+0x1cc>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	4a62      	ldr	r2, [pc, #392]	; (800f488 <_txe_thread_create+0x1cc>)
 800f2fe:	6013      	str	r3, [r2, #0]
 800f300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f302:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	f383 8810 	msr	PRIMASK, r3
}
 800f30a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800f30c:	2300      	movs	r3, #0
 800f30e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800f310:	4b5e      	ldr	r3, [pc, #376]	; (800f48c <_txe_thread_create+0x1d0>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800f316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f318:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800f31a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f31c:	3b01      	subs	r3, #1
 800f31e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f320:	4413      	add	r3, r2
 800f322:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f328:	2300      	movs	r3, #0
 800f32a:	647b      	str	r3, [r7, #68]	; 0x44
 800f32c:	e02b      	b.n	800f386 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f332:	429a      	cmp	r2, r3
 800f334:	d101      	bne.n	800f33a <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800f336:	2301      	movs	r3, #1
 800f338:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800f33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d028      	beq.n	800f392 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800f340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f346:	429a      	cmp	r2, r3
 800f348:	d308      	bcc.n	800f35c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800f34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f350:	429a      	cmp	r2, r3
 800f352:	d203      	bcs.n	800f35c <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f354:	2300      	movs	r3, #0
 800f356:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f358:	2301      	movs	r3, #1
 800f35a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800f35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f362:	429a      	cmp	r2, r3
 800f364:	d308      	bcc.n	800f378 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800f366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f368:	691b      	ldr	r3, [r3, #16]
 800f36a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d203      	bcs.n	800f378 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f370:	2300      	movs	r3, #0
 800f372:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f374:	2301      	movs	r3, #1
 800f376:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800f378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f37e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f382:	3301      	adds	r3, #1
 800f384:	647b      	str	r3, [r7, #68]	; 0x44
 800f386:	4b42      	ldr	r3, [pc, #264]	; (800f490 <_txe_thread_create+0x1d4>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d3ce      	bcc.n	800f32e <_txe_thread_create+0x72>
 800f390:	e000      	b.n	800f394 <_txe_thread_create+0xd8>
                break;
 800f392:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f394:	f3ef 8310 	mrs	r3, PRIMASK
 800f398:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f39a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f39c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f39e:	b672      	cpsid	i
    return(int_posture);
 800f3a0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f3a2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f3a4:	4b38      	ldr	r3, [pc, #224]	; (800f488 <_txe_thread_create+0x1cc>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	4a37      	ldr	r2, [pc, #220]	; (800f488 <_txe_thread_create+0x1cc>)
 800f3ac:	6013      	str	r3, [r2, #0]
 800f3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f3b2:	6a3b      	ldr	r3, [r7, #32]
 800f3b4:	f383 8810 	msr	PRIMASK, r3
}
 800f3b8:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f3ba:	f7ff f847 	bl	800e44c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d102      	bne.n	800f3cc <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800f3c6:	230e      	movs	r3, #14
 800f3c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ca:	e042      	b.n	800f452 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800f3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d102      	bne.n	800f3d8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3d6:	e03c      	b.n	800f452 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d102      	bne.n	800f3e4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3e2:	e036      	b.n	800f452 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800f3e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3e6:	2bc7      	cmp	r3, #199	; 0xc7
 800f3e8:	d802      	bhi.n	800f3f0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800f3ea:	2305      	movs	r3, #5
 800f3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ee:	e030      	b.n	800f452 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800f3f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3f2:	2b1f      	cmp	r3, #31
 800f3f4:	d902      	bls.n	800f3fc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800f3f6:	230f      	movs	r3, #15
 800f3f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3fa:	e02a      	b.n	800f452 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800f3fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f3fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f400:	429a      	cmp	r2, r3
 800f402:	d902      	bls.n	800f40a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800f404:	2318      	movs	r3, #24
 800f406:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f408:	e023      	b.n	800f452 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800f40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d902      	bls.n	800f416 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800f410:	2310      	movs	r3, #16
 800f412:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f414:	e01d      	b.n	800f452 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800f416:	4b1f      	ldr	r3, [pc, #124]	; (800f494 <_txe_thread_create+0x1d8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800f41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41e:	4a1e      	ldr	r2, [pc, #120]	; (800f498 <_txe_thread_create+0x1dc>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d101      	bne.n	800f428 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f424:	2313      	movs	r3, #19
 800f426:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f428:	f3ef 8305 	mrs	r3, IPSR
 800f42c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f42e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f430:	4b1a      	ldr	r3, [pc, #104]	; (800f49c <_txe_thread_create+0x1e0>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4313      	orrs	r3, r2
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00b      	beq.n	800f452 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f43a:	f3ef 8305 	mrs	r3, IPSR
 800f43e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f440:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f442:	4b16      	ldr	r3, [pc, #88]	; (800f49c <_txe_thread_create+0x1e0>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4313      	orrs	r3, r2
 800f448:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800f44c:	d201      	bcs.n	800f452 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f44e:	2313      	movs	r3, #19
 800f450:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f454:	2b00      	cmp	r3, #0
 800f456:	d112      	bne.n	800f47e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800f458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f45a:	9305      	str	r3, [sp, #20]
 800f45c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f45e:	9304      	str	r3, [sp, #16]
 800f460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f462:	9303      	str	r3, [sp, #12]
 800f464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f466:	9302      	str	r3, [sp, #8]
 800f468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f46a:	9301      	str	r3, [sp, #4]
 800f46c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	68b9      	ldr	r1, [r7, #8]
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7fe fe4e 	bl	800e118 <_tx_thread_create>
 800f47c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800f47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f480:	4618      	mov	r0, r3
 800f482:	3750      	adds	r7, #80	; 0x50
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20003664 	.word	0x20003664
 800f48c:	200035d0 	.word	0x200035d0
 800f490:	200035d4 	.word	0x200035d4
 800f494:	200035c8 	.word	0x200035c8
 800f498:	20003714 	.word	0x20003714
 800f49c:	20000070 	.word	0x20000070

0800f4a0 <atof>:
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f002 ba2b 	b.w	80118fc <strtod>

0800f4a6 <atoi>:
 800f4a6:	220a      	movs	r2, #10
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	f002 bab7 	b.w	8011a1c <strtol>
	...

0800f4b0 <__errno>:
 800f4b0:	4b01      	ldr	r3, [pc, #4]	; (800f4b8 <__errno+0x8>)
 800f4b2:	6818      	ldr	r0, [r3, #0]
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	20000074 	.word	0x20000074

0800f4bc <__sflush_r>:
 800f4bc:	898a      	ldrh	r2, [r1, #12]
 800f4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c2:	4605      	mov	r5, r0
 800f4c4:	0710      	lsls	r0, r2, #28
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	d458      	bmi.n	800f57c <__sflush_r+0xc0>
 800f4ca:	684b      	ldr	r3, [r1, #4]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	dc05      	bgt.n	800f4dc <__sflush_r+0x20>
 800f4d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	dc02      	bgt.n	800f4dc <__sflush_r+0x20>
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4de:	2e00      	cmp	r6, #0
 800f4e0:	d0f9      	beq.n	800f4d6 <__sflush_r+0x1a>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4e8:	682f      	ldr	r7, [r5, #0]
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	d032      	beq.n	800f554 <__sflush_r+0x98>
 800f4ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	075a      	lsls	r2, r3, #29
 800f4f4:	d505      	bpl.n	800f502 <__sflush_r+0x46>
 800f4f6:	6863      	ldr	r3, [r4, #4]
 800f4f8:	1ac0      	subs	r0, r0, r3
 800f4fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4fc:	b10b      	cbz	r3, 800f502 <__sflush_r+0x46>
 800f4fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f500:	1ac0      	subs	r0, r0, r3
 800f502:	2300      	movs	r3, #0
 800f504:	4602      	mov	r2, r0
 800f506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f508:	6a21      	ldr	r1, [r4, #32]
 800f50a:	4628      	mov	r0, r5
 800f50c:	47b0      	blx	r6
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	89a3      	ldrh	r3, [r4, #12]
 800f512:	d106      	bne.n	800f522 <__sflush_r+0x66>
 800f514:	6829      	ldr	r1, [r5, #0]
 800f516:	291d      	cmp	r1, #29
 800f518:	d82c      	bhi.n	800f574 <__sflush_r+0xb8>
 800f51a:	4a2a      	ldr	r2, [pc, #168]	; (800f5c4 <__sflush_r+0x108>)
 800f51c:	40ca      	lsrs	r2, r1
 800f51e:	07d6      	lsls	r6, r2, #31
 800f520:	d528      	bpl.n	800f574 <__sflush_r+0xb8>
 800f522:	2200      	movs	r2, #0
 800f524:	6062      	str	r2, [r4, #4]
 800f526:	04d9      	lsls	r1, r3, #19
 800f528:	6922      	ldr	r2, [r4, #16]
 800f52a:	6022      	str	r2, [r4, #0]
 800f52c:	d504      	bpl.n	800f538 <__sflush_r+0x7c>
 800f52e:	1c42      	adds	r2, r0, #1
 800f530:	d101      	bne.n	800f536 <__sflush_r+0x7a>
 800f532:	682b      	ldr	r3, [r5, #0]
 800f534:	b903      	cbnz	r3, 800f538 <__sflush_r+0x7c>
 800f536:	6560      	str	r0, [r4, #84]	; 0x54
 800f538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f53a:	602f      	str	r7, [r5, #0]
 800f53c:	2900      	cmp	r1, #0
 800f53e:	d0ca      	beq.n	800f4d6 <__sflush_r+0x1a>
 800f540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f544:	4299      	cmp	r1, r3
 800f546:	d002      	beq.n	800f54e <__sflush_r+0x92>
 800f548:	4628      	mov	r0, r5
 800f54a:	f000 fb07 	bl	800fb5c <_free_r>
 800f54e:	2000      	movs	r0, #0
 800f550:	6360      	str	r0, [r4, #52]	; 0x34
 800f552:	e7c1      	b.n	800f4d8 <__sflush_r+0x1c>
 800f554:	6a21      	ldr	r1, [r4, #32]
 800f556:	2301      	movs	r3, #1
 800f558:	4628      	mov	r0, r5
 800f55a:	47b0      	blx	r6
 800f55c:	1c41      	adds	r1, r0, #1
 800f55e:	d1c7      	bne.n	800f4f0 <__sflush_r+0x34>
 800f560:	682b      	ldr	r3, [r5, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d0c4      	beq.n	800f4f0 <__sflush_r+0x34>
 800f566:	2b1d      	cmp	r3, #29
 800f568:	d001      	beq.n	800f56e <__sflush_r+0xb2>
 800f56a:	2b16      	cmp	r3, #22
 800f56c:	d101      	bne.n	800f572 <__sflush_r+0xb6>
 800f56e:	602f      	str	r7, [r5, #0]
 800f570:	e7b1      	b.n	800f4d6 <__sflush_r+0x1a>
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f578:	81a3      	strh	r3, [r4, #12]
 800f57a:	e7ad      	b.n	800f4d8 <__sflush_r+0x1c>
 800f57c:	690f      	ldr	r7, [r1, #16]
 800f57e:	2f00      	cmp	r7, #0
 800f580:	d0a9      	beq.n	800f4d6 <__sflush_r+0x1a>
 800f582:	0793      	lsls	r3, r2, #30
 800f584:	680e      	ldr	r6, [r1, #0]
 800f586:	bf08      	it	eq
 800f588:	694b      	ldreq	r3, [r1, #20]
 800f58a:	600f      	str	r7, [r1, #0]
 800f58c:	bf18      	it	ne
 800f58e:	2300      	movne	r3, #0
 800f590:	eba6 0807 	sub.w	r8, r6, r7
 800f594:	608b      	str	r3, [r1, #8]
 800f596:	f1b8 0f00 	cmp.w	r8, #0
 800f59a:	dd9c      	ble.n	800f4d6 <__sflush_r+0x1a>
 800f59c:	6a21      	ldr	r1, [r4, #32]
 800f59e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5a0:	4643      	mov	r3, r8
 800f5a2:	463a      	mov	r2, r7
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b0      	blx	r6
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	dc06      	bgt.n	800f5ba <__sflush_r+0xfe>
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5b2:	81a3      	strh	r3, [r4, #12]
 800f5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5b8:	e78e      	b.n	800f4d8 <__sflush_r+0x1c>
 800f5ba:	4407      	add	r7, r0
 800f5bc:	eba8 0800 	sub.w	r8, r8, r0
 800f5c0:	e7e9      	b.n	800f596 <__sflush_r+0xda>
 800f5c2:	bf00      	nop
 800f5c4:	20400001 	.word	0x20400001

0800f5c8 <_fflush_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	690b      	ldr	r3, [r1, #16]
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	b913      	cbnz	r3, 800f5d8 <_fflush_r+0x10>
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	bd38      	pop	{r3, r4, r5, pc}
 800f5d8:	b118      	cbz	r0, 800f5e2 <_fflush_r+0x1a>
 800f5da:	6983      	ldr	r3, [r0, #24]
 800f5dc:	b90b      	cbnz	r3, 800f5e2 <_fflush_r+0x1a>
 800f5de:	f000 f887 	bl	800f6f0 <__sinit>
 800f5e2:	4b14      	ldr	r3, [pc, #80]	; (800f634 <_fflush_r+0x6c>)
 800f5e4:	429c      	cmp	r4, r3
 800f5e6:	d11b      	bne.n	800f620 <_fflush_r+0x58>
 800f5e8:	686c      	ldr	r4, [r5, #4]
 800f5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d0ef      	beq.n	800f5d2 <_fflush_r+0xa>
 800f5f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5f4:	07d0      	lsls	r0, r2, #31
 800f5f6:	d404      	bmi.n	800f602 <_fflush_r+0x3a>
 800f5f8:	0599      	lsls	r1, r3, #22
 800f5fa:	d402      	bmi.n	800f602 <_fflush_r+0x3a>
 800f5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5fe:	f000 f9fa 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 800f602:	4628      	mov	r0, r5
 800f604:	4621      	mov	r1, r4
 800f606:	f7ff ff59 	bl	800f4bc <__sflush_r>
 800f60a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f60c:	07da      	lsls	r2, r3, #31
 800f60e:	4605      	mov	r5, r0
 800f610:	d4e0      	bmi.n	800f5d4 <_fflush_r+0xc>
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	059b      	lsls	r3, r3, #22
 800f616:	d4dd      	bmi.n	800f5d4 <_fflush_r+0xc>
 800f618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f61a:	f000 f9ed 	bl	800f9f8 <__retarget_lock_release_recursive>
 800f61e:	e7d9      	b.n	800f5d4 <_fflush_r+0xc>
 800f620:	4b05      	ldr	r3, [pc, #20]	; (800f638 <_fflush_r+0x70>)
 800f622:	429c      	cmp	r4, r3
 800f624:	d101      	bne.n	800f62a <_fflush_r+0x62>
 800f626:	68ac      	ldr	r4, [r5, #8]
 800f628:	e7df      	b.n	800f5ea <_fflush_r+0x22>
 800f62a:	4b04      	ldr	r3, [pc, #16]	; (800f63c <_fflush_r+0x74>)
 800f62c:	429c      	cmp	r4, r3
 800f62e:	bf08      	it	eq
 800f630:	68ec      	ldreq	r4, [r5, #12]
 800f632:	e7da      	b.n	800f5ea <_fflush_r+0x22>
 800f634:	080173c8 	.word	0x080173c8
 800f638:	080173e8 	.word	0x080173e8
 800f63c:	080173a8 	.word	0x080173a8

0800f640 <std>:
 800f640:	2300      	movs	r3, #0
 800f642:	b510      	push	{r4, lr}
 800f644:	4604      	mov	r4, r0
 800f646:	e9c0 3300 	strd	r3, r3, [r0]
 800f64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f64e:	6083      	str	r3, [r0, #8]
 800f650:	8181      	strh	r1, [r0, #12]
 800f652:	6643      	str	r3, [r0, #100]	; 0x64
 800f654:	81c2      	strh	r2, [r0, #14]
 800f656:	6183      	str	r3, [r0, #24]
 800f658:	4619      	mov	r1, r3
 800f65a:	2208      	movs	r2, #8
 800f65c:	305c      	adds	r0, #92	; 0x5c
 800f65e:	f000 fa5f 	bl	800fb20 <memset>
 800f662:	4b05      	ldr	r3, [pc, #20]	; (800f678 <std+0x38>)
 800f664:	6263      	str	r3, [r4, #36]	; 0x24
 800f666:	4b05      	ldr	r3, [pc, #20]	; (800f67c <std+0x3c>)
 800f668:	62a3      	str	r3, [r4, #40]	; 0x28
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <std+0x40>)
 800f66c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f66e:	4b05      	ldr	r3, [pc, #20]	; (800f684 <std+0x44>)
 800f670:	6224      	str	r4, [r4, #32]
 800f672:	6323      	str	r3, [r4, #48]	; 0x30
 800f674:	bd10      	pop	{r4, pc}
 800f676:	bf00      	nop
 800f678:	08010775 	.word	0x08010775
 800f67c:	0801079b 	.word	0x0801079b
 800f680:	080107d3 	.word	0x080107d3
 800f684:	080107f7 	.word	0x080107f7

0800f688 <_cleanup_r>:
 800f688:	4901      	ldr	r1, [pc, #4]	; (800f690 <_cleanup_r+0x8>)
 800f68a:	f000 b901 	b.w	800f890 <_fwalk_reent>
 800f68e:	bf00      	nop
 800f690:	0800f5c9 	.word	0x0800f5c9

0800f694 <__sfmoreglue>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	2268      	movs	r2, #104	; 0x68
 800f698:	1e4d      	subs	r5, r1, #1
 800f69a:	4355      	muls	r5, r2
 800f69c:	460e      	mov	r6, r1
 800f69e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6a2:	f000 fac7 	bl	800fc34 <_malloc_r>
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	b140      	cbz	r0, 800f6bc <__sfmoreglue+0x28>
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	e9c0 1600 	strd	r1, r6, [r0]
 800f6b0:	300c      	adds	r0, #12
 800f6b2:	60a0      	str	r0, [r4, #8]
 800f6b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6b8:	f000 fa32 	bl	800fb20 <memset>
 800f6bc:	4620      	mov	r0, r4
 800f6be:	bd70      	pop	{r4, r5, r6, pc}

0800f6c0 <__sfp_lock_acquire>:
 800f6c0:	4801      	ldr	r0, [pc, #4]	; (800f6c8 <__sfp_lock_acquire+0x8>)
 800f6c2:	f000 b998 	b.w	800f9f6 <__retarget_lock_acquire_recursive>
 800f6c6:	bf00      	nop
 800f6c8:	20003bd9 	.word	0x20003bd9

0800f6cc <__sfp_lock_release>:
 800f6cc:	4801      	ldr	r0, [pc, #4]	; (800f6d4 <__sfp_lock_release+0x8>)
 800f6ce:	f000 b993 	b.w	800f9f8 <__retarget_lock_release_recursive>
 800f6d2:	bf00      	nop
 800f6d4:	20003bd9 	.word	0x20003bd9

0800f6d8 <__sinit_lock_acquire>:
 800f6d8:	4801      	ldr	r0, [pc, #4]	; (800f6e0 <__sinit_lock_acquire+0x8>)
 800f6da:	f000 b98c 	b.w	800f9f6 <__retarget_lock_acquire_recursive>
 800f6de:	bf00      	nop
 800f6e0:	20003bda 	.word	0x20003bda

0800f6e4 <__sinit_lock_release>:
 800f6e4:	4801      	ldr	r0, [pc, #4]	; (800f6ec <__sinit_lock_release+0x8>)
 800f6e6:	f000 b987 	b.w	800f9f8 <__retarget_lock_release_recursive>
 800f6ea:	bf00      	nop
 800f6ec:	20003bda 	.word	0x20003bda

0800f6f0 <__sinit>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	f7ff fff0 	bl	800f6d8 <__sinit_lock_acquire>
 800f6f8:	69a3      	ldr	r3, [r4, #24]
 800f6fa:	b11b      	cbz	r3, 800f704 <__sinit+0x14>
 800f6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f700:	f7ff bff0 	b.w	800f6e4 <__sinit_lock_release>
 800f704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f708:	6523      	str	r3, [r4, #80]	; 0x50
 800f70a:	4b13      	ldr	r3, [pc, #76]	; (800f758 <__sinit+0x68>)
 800f70c:	4a13      	ldr	r2, [pc, #76]	; (800f75c <__sinit+0x6c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	62a2      	str	r2, [r4, #40]	; 0x28
 800f712:	42a3      	cmp	r3, r4
 800f714:	bf04      	itt	eq
 800f716:	2301      	moveq	r3, #1
 800f718:	61a3      	streq	r3, [r4, #24]
 800f71a:	4620      	mov	r0, r4
 800f71c:	f000 f820 	bl	800f760 <__sfp>
 800f720:	6060      	str	r0, [r4, #4]
 800f722:	4620      	mov	r0, r4
 800f724:	f000 f81c 	bl	800f760 <__sfp>
 800f728:	60a0      	str	r0, [r4, #8]
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 f818 	bl	800f760 <__sfp>
 800f730:	2200      	movs	r2, #0
 800f732:	60e0      	str	r0, [r4, #12]
 800f734:	2104      	movs	r1, #4
 800f736:	6860      	ldr	r0, [r4, #4]
 800f738:	f7ff ff82 	bl	800f640 <std>
 800f73c:	68a0      	ldr	r0, [r4, #8]
 800f73e:	2201      	movs	r2, #1
 800f740:	2109      	movs	r1, #9
 800f742:	f7ff ff7d 	bl	800f640 <std>
 800f746:	68e0      	ldr	r0, [r4, #12]
 800f748:	2202      	movs	r2, #2
 800f74a:	2112      	movs	r1, #18
 800f74c:	f7ff ff78 	bl	800f640 <std>
 800f750:	2301      	movs	r3, #1
 800f752:	61a3      	str	r3, [r4, #24]
 800f754:	e7d2      	b.n	800f6fc <__sinit+0xc>
 800f756:	bf00      	nop
 800f758:	08017408 	.word	0x08017408
 800f75c:	0800f689 	.word	0x0800f689

0800f760 <__sfp>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	4607      	mov	r7, r0
 800f764:	f7ff ffac 	bl	800f6c0 <__sfp_lock_acquire>
 800f768:	4b1e      	ldr	r3, [pc, #120]	; (800f7e4 <__sfp+0x84>)
 800f76a:	681e      	ldr	r6, [r3, #0]
 800f76c:	69b3      	ldr	r3, [r6, #24]
 800f76e:	b913      	cbnz	r3, 800f776 <__sfp+0x16>
 800f770:	4630      	mov	r0, r6
 800f772:	f7ff ffbd 	bl	800f6f0 <__sinit>
 800f776:	3648      	adds	r6, #72	; 0x48
 800f778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f77c:	3b01      	subs	r3, #1
 800f77e:	d503      	bpl.n	800f788 <__sfp+0x28>
 800f780:	6833      	ldr	r3, [r6, #0]
 800f782:	b30b      	cbz	r3, 800f7c8 <__sfp+0x68>
 800f784:	6836      	ldr	r6, [r6, #0]
 800f786:	e7f7      	b.n	800f778 <__sfp+0x18>
 800f788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f78c:	b9d5      	cbnz	r5, 800f7c4 <__sfp+0x64>
 800f78e:	4b16      	ldr	r3, [pc, #88]	; (800f7e8 <__sfp+0x88>)
 800f790:	60e3      	str	r3, [r4, #12]
 800f792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f796:	6665      	str	r5, [r4, #100]	; 0x64
 800f798:	f000 f92c 	bl	800f9f4 <__retarget_lock_init_recursive>
 800f79c:	f7ff ff96 	bl	800f6cc <__sfp_lock_release>
 800f7a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f7a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f7a8:	6025      	str	r5, [r4, #0]
 800f7aa:	61a5      	str	r5, [r4, #24]
 800f7ac:	2208      	movs	r2, #8
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7b4:	f000 f9b4 	bl	800fb20 <memset>
 800f7b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	3468      	adds	r4, #104	; 0x68
 800f7c6:	e7d9      	b.n	800f77c <__sfp+0x1c>
 800f7c8:	2104      	movs	r1, #4
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	f7ff ff62 	bl	800f694 <__sfmoreglue>
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	6030      	str	r0, [r6, #0]
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d1d5      	bne.n	800f784 <__sfp+0x24>
 800f7d8:	f7ff ff78 	bl	800f6cc <__sfp_lock_release>
 800f7dc:	230c      	movs	r3, #12
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	e7ee      	b.n	800f7c0 <__sfp+0x60>
 800f7e2:	bf00      	nop
 800f7e4:	08017408 	.word	0x08017408
 800f7e8:	ffff0001 	.word	0xffff0001

0800f7ec <fiprintf>:
 800f7ec:	b40e      	push	{r1, r2, r3}
 800f7ee:	b503      	push	{r0, r1, lr}
 800f7f0:	4601      	mov	r1, r0
 800f7f2:	ab03      	add	r3, sp, #12
 800f7f4:	4805      	ldr	r0, [pc, #20]	; (800f80c <fiprintf+0x20>)
 800f7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7fa:	6800      	ldr	r0, [r0, #0]
 800f7fc:	9301      	str	r3, [sp, #4]
 800f7fe:	f000 fab7 	bl	800fd70 <_vfiprintf_r>
 800f802:	b002      	add	sp, #8
 800f804:	f85d eb04 	ldr.w	lr, [sp], #4
 800f808:	b003      	add	sp, #12
 800f80a:	4770      	bx	lr
 800f80c:	20000074 	.word	0x20000074

0800f810 <_fputc_r>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	460e      	mov	r6, r1
 800f814:	4614      	mov	r4, r2
 800f816:	4605      	mov	r5, r0
 800f818:	b118      	cbz	r0, 800f822 <_fputc_r+0x12>
 800f81a:	6983      	ldr	r3, [r0, #24]
 800f81c:	b90b      	cbnz	r3, 800f822 <_fputc_r+0x12>
 800f81e:	f7ff ff67 	bl	800f6f0 <__sinit>
 800f822:	4b14      	ldr	r3, [pc, #80]	; (800f874 <_fputc_r+0x64>)
 800f824:	429c      	cmp	r4, r3
 800f826:	d11a      	bne.n	800f85e <_fputc_r+0x4e>
 800f828:	686c      	ldr	r4, [r5, #4]
 800f82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f82c:	07d8      	lsls	r0, r3, #31
 800f82e:	d405      	bmi.n	800f83c <_fputc_r+0x2c>
 800f830:	89a3      	ldrh	r3, [r4, #12]
 800f832:	0599      	lsls	r1, r3, #22
 800f834:	d402      	bmi.n	800f83c <_fputc_r+0x2c>
 800f836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f838:	f000 f8dd 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 800f83c:	4622      	mov	r2, r4
 800f83e:	4628      	mov	r0, r5
 800f840:	4631      	mov	r1, r6
 800f842:	f000 fd63 	bl	801030c <_putc_r>
 800f846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f848:	07da      	lsls	r2, r3, #31
 800f84a:	4605      	mov	r5, r0
 800f84c:	d405      	bmi.n	800f85a <_fputc_r+0x4a>
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	059b      	lsls	r3, r3, #22
 800f852:	d402      	bmi.n	800f85a <_fputc_r+0x4a>
 800f854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f856:	f000 f8cf 	bl	800f9f8 <__retarget_lock_release_recursive>
 800f85a:	4628      	mov	r0, r5
 800f85c:	bd70      	pop	{r4, r5, r6, pc}
 800f85e:	4b06      	ldr	r3, [pc, #24]	; (800f878 <_fputc_r+0x68>)
 800f860:	429c      	cmp	r4, r3
 800f862:	d101      	bne.n	800f868 <_fputc_r+0x58>
 800f864:	68ac      	ldr	r4, [r5, #8]
 800f866:	e7e0      	b.n	800f82a <_fputc_r+0x1a>
 800f868:	4b04      	ldr	r3, [pc, #16]	; (800f87c <_fputc_r+0x6c>)
 800f86a:	429c      	cmp	r4, r3
 800f86c:	bf08      	it	eq
 800f86e:	68ec      	ldreq	r4, [r5, #12]
 800f870:	e7db      	b.n	800f82a <_fputc_r+0x1a>
 800f872:	bf00      	nop
 800f874:	080173c8 	.word	0x080173c8
 800f878:	080173e8 	.word	0x080173e8
 800f87c:	080173a8 	.word	0x080173a8

0800f880 <fputc>:
 800f880:	4b02      	ldr	r3, [pc, #8]	; (800f88c <fputc+0xc>)
 800f882:	460a      	mov	r2, r1
 800f884:	4601      	mov	r1, r0
 800f886:	6818      	ldr	r0, [r3, #0]
 800f888:	f7ff bfc2 	b.w	800f810 <_fputc_r>
 800f88c:	20000074 	.word	0x20000074

0800f890 <_fwalk_reent>:
 800f890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f894:	4606      	mov	r6, r0
 800f896:	4688      	mov	r8, r1
 800f898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f89c:	2700      	movs	r7, #0
 800f89e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8a2:	f1b9 0901 	subs.w	r9, r9, #1
 800f8a6:	d505      	bpl.n	800f8b4 <_fwalk_reent+0x24>
 800f8a8:	6824      	ldr	r4, [r4, #0]
 800f8aa:	2c00      	cmp	r4, #0
 800f8ac:	d1f7      	bne.n	800f89e <_fwalk_reent+0xe>
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b4:	89ab      	ldrh	r3, [r5, #12]
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d907      	bls.n	800f8ca <_fwalk_reent+0x3a>
 800f8ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	d003      	beq.n	800f8ca <_fwalk_reent+0x3a>
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	47c0      	blx	r8
 800f8c8:	4307      	orrs	r7, r0
 800f8ca:	3568      	adds	r5, #104	; 0x68
 800f8cc:	e7e9      	b.n	800f8a2 <_fwalk_reent+0x12>
	...

0800f8d0 <_fwrite_r>:
 800f8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8d4:	9c08      	ldr	r4, [sp, #32]
 800f8d6:	468a      	mov	sl, r1
 800f8d8:	4690      	mov	r8, r2
 800f8da:	fb02 f903 	mul.w	r9, r2, r3
 800f8de:	4605      	mov	r5, r0
 800f8e0:	b118      	cbz	r0, 800f8ea <_fwrite_r+0x1a>
 800f8e2:	6983      	ldr	r3, [r0, #24]
 800f8e4:	b90b      	cbnz	r3, 800f8ea <_fwrite_r+0x1a>
 800f8e6:	f7ff ff03 	bl	800f6f0 <__sinit>
 800f8ea:	4b26      	ldr	r3, [pc, #152]	; (800f984 <_fwrite_r+0xb4>)
 800f8ec:	429c      	cmp	r4, r3
 800f8ee:	d123      	bne.n	800f938 <_fwrite_r+0x68>
 800f8f0:	686c      	ldr	r4, [r5, #4]
 800f8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8f4:	07de      	lsls	r6, r3, #31
 800f8f6:	d405      	bmi.n	800f904 <_fwrite_r+0x34>
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	0598      	lsls	r0, r3, #22
 800f8fc:	d402      	bmi.n	800f904 <_fwrite_r+0x34>
 800f8fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f900:	f000 f879 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	0719      	lsls	r1, r3, #28
 800f908:	d520      	bpl.n	800f94c <_fwrite_r+0x7c>
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	b1f3      	cbz	r3, 800f94c <_fwrite_r+0x7c>
 800f90e:	2600      	movs	r6, #0
 800f910:	454e      	cmp	r6, r9
 800f912:	d029      	beq.n	800f968 <_fwrite_r+0x98>
 800f914:	68a7      	ldr	r7, [r4, #8]
 800f916:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800f91a:	3f01      	subs	r7, #1
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	60a7      	str	r7, [r4, #8]
 800f920:	da04      	bge.n	800f92c <_fwrite_r+0x5c>
 800f922:	69a3      	ldr	r3, [r4, #24]
 800f924:	429f      	cmp	r7, r3
 800f926:	db19      	blt.n	800f95c <_fwrite_r+0x8c>
 800f928:	290a      	cmp	r1, #10
 800f92a:	d017      	beq.n	800f95c <_fwrite_r+0x8c>
 800f92c:	6823      	ldr	r3, [r4, #0]
 800f92e:	1c5a      	adds	r2, r3, #1
 800f930:	6022      	str	r2, [r4, #0]
 800f932:	7019      	strb	r1, [r3, #0]
 800f934:	3601      	adds	r6, #1
 800f936:	e7eb      	b.n	800f910 <_fwrite_r+0x40>
 800f938:	4b13      	ldr	r3, [pc, #76]	; (800f988 <_fwrite_r+0xb8>)
 800f93a:	429c      	cmp	r4, r3
 800f93c:	d101      	bne.n	800f942 <_fwrite_r+0x72>
 800f93e:	68ac      	ldr	r4, [r5, #8]
 800f940:	e7d7      	b.n	800f8f2 <_fwrite_r+0x22>
 800f942:	4b12      	ldr	r3, [pc, #72]	; (800f98c <_fwrite_r+0xbc>)
 800f944:	429c      	cmp	r4, r3
 800f946:	bf08      	it	eq
 800f948:	68ec      	ldreq	r4, [r5, #12]
 800f94a:	e7d2      	b.n	800f8f2 <_fwrite_r+0x22>
 800f94c:	4621      	mov	r1, r4
 800f94e:	4628      	mov	r0, r5
 800f950:	f002 f8dc 	bl	8011b0c <__swsetup_r>
 800f954:	2800      	cmp	r0, #0
 800f956:	d0da      	beq.n	800f90e <_fwrite_r+0x3e>
 800f958:	2600      	movs	r6, #0
 800f95a:	e005      	b.n	800f968 <_fwrite_r+0x98>
 800f95c:	4622      	mov	r2, r4
 800f95e:	4628      	mov	r0, r5
 800f960:	f002 f870 	bl	8011a44 <__swbuf_r>
 800f964:	3001      	adds	r0, #1
 800f966:	d1e5      	bne.n	800f934 <_fwrite_r+0x64>
 800f968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f96a:	07da      	lsls	r2, r3, #31
 800f96c:	d405      	bmi.n	800f97a <_fwrite_r+0xaa>
 800f96e:	89a3      	ldrh	r3, [r4, #12]
 800f970:	059b      	lsls	r3, r3, #22
 800f972:	d402      	bmi.n	800f97a <_fwrite_r+0xaa>
 800f974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f976:	f000 f83f 	bl	800f9f8 <__retarget_lock_release_recursive>
 800f97a:	fbb6 f0f8 	udiv	r0, r6, r8
 800f97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f982:	bf00      	nop
 800f984:	080173c8 	.word	0x080173c8
 800f988:	080173e8 	.word	0x080173e8
 800f98c:	080173a8 	.word	0x080173a8

0800f990 <fwrite>:
 800f990:	b507      	push	{r0, r1, r2, lr}
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	4613      	mov	r3, r2
 800f996:	460a      	mov	r2, r1
 800f998:	4601      	mov	r1, r0
 800f99a:	4803      	ldr	r0, [pc, #12]	; (800f9a8 <fwrite+0x18>)
 800f99c:	6800      	ldr	r0, [r0, #0]
 800f99e:	f7ff ff97 	bl	800f8d0 <_fwrite_r>
 800f9a2:	b003      	add	sp, #12
 800f9a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9a8:	20000074 	.word	0x20000074

0800f9ac <__libc_init_array>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	4d0d      	ldr	r5, [pc, #52]	; (800f9e4 <__libc_init_array+0x38>)
 800f9b0:	4c0d      	ldr	r4, [pc, #52]	; (800f9e8 <__libc_init_array+0x3c>)
 800f9b2:	1b64      	subs	r4, r4, r5
 800f9b4:	10a4      	asrs	r4, r4, #2
 800f9b6:	2600      	movs	r6, #0
 800f9b8:	42a6      	cmp	r6, r4
 800f9ba:	d109      	bne.n	800f9d0 <__libc_init_array+0x24>
 800f9bc:	4d0b      	ldr	r5, [pc, #44]	; (800f9ec <__libc_init_array+0x40>)
 800f9be:	4c0c      	ldr	r4, [pc, #48]	; (800f9f0 <__libc_init_array+0x44>)
 800f9c0:	f004 f81c 	bl	80139fc <_init>
 800f9c4:	1b64      	subs	r4, r4, r5
 800f9c6:	10a4      	asrs	r4, r4, #2
 800f9c8:	2600      	movs	r6, #0
 800f9ca:	42a6      	cmp	r6, r4
 800f9cc:	d105      	bne.n	800f9da <__libc_init_array+0x2e>
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}
 800f9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9d4:	4798      	blx	r3
 800f9d6:	3601      	adds	r6, #1
 800f9d8:	e7ee      	b.n	800f9b8 <__libc_init_array+0xc>
 800f9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9de:	4798      	blx	r3
 800f9e0:	3601      	adds	r6, #1
 800f9e2:	e7f2      	b.n	800f9ca <__libc_init_array+0x1e>
 800f9e4:	08017d94 	.word	0x08017d94
 800f9e8:	08017d94 	.word	0x08017d94
 800f9ec:	08017d94 	.word	0x08017d94
 800f9f0:	08017d98 	.word	0x08017d98

0800f9f4 <__retarget_lock_init_recursive>:
 800f9f4:	4770      	bx	lr

0800f9f6 <__retarget_lock_acquire_recursive>:
 800f9f6:	4770      	bx	lr

0800f9f8 <__retarget_lock_release_recursive>:
 800f9f8:	4770      	bx	lr

0800f9fa <__swhatbuf_r>:
 800f9fa:	b570      	push	{r4, r5, r6, lr}
 800f9fc:	460e      	mov	r6, r1
 800f9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa02:	2900      	cmp	r1, #0
 800fa04:	b096      	sub	sp, #88	; 0x58
 800fa06:	4614      	mov	r4, r2
 800fa08:	461d      	mov	r5, r3
 800fa0a:	da08      	bge.n	800fa1e <__swhatbuf_r+0x24>
 800fa0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	602a      	str	r2, [r5, #0]
 800fa14:	061a      	lsls	r2, r3, #24
 800fa16:	d410      	bmi.n	800fa3a <__swhatbuf_r+0x40>
 800fa18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa1c:	e00e      	b.n	800fa3c <__swhatbuf_r+0x42>
 800fa1e:	466a      	mov	r2, sp
 800fa20:	f002 f8f2 	bl	8011c08 <_fstat_r>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	dbf1      	blt.n	800fa0c <__swhatbuf_r+0x12>
 800fa28:	9a01      	ldr	r2, [sp, #4]
 800fa2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa32:	425a      	negs	r2, r3
 800fa34:	415a      	adcs	r2, r3
 800fa36:	602a      	str	r2, [r5, #0]
 800fa38:	e7ee      	b.n	800fa18 <__swhatbuf_r+0x1e>
 800fa3a:	2340      	movs	r3, #64	; 0x40
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	b016      	add	sp, #88	; 0x58
 800fa42:	bd70      	pop	{r4, r5, r6, pc}

0800fa44 <__smakebuf_r>:
 800fa44:	898b      	ldrh	r3, [r1, #12]
 800fa46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa48:	079d      	lsls	r5, r3, #30
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	d507      	bpl.n	800fa60 <__smakebuf_r+0x1c>
 800fa50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	6123      	str	r3, [r4, #16]
 800fa58:	2301      	movs	r3, #1
 800fa5a:	6163      	str	r3, [r4, #20]
 800fa5c:	b002      	add	sp, #8
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}
 800fa60:	ab01      	add	r3, sp, #4
 800fa62:	466a      	mov	r2, sp
 800fa64:	f7ff ffc9 	bl	800f9fa <__swhatbuf_r>
 800fa68:	9900      	ldr	r1, [sp, #0]
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	f000 f8e1 	bl	800fc34 <_malloc_r>
 800fa72:	b948      	cbnz	r0, 800fa88 <__smakebuf_r+0x44>
 800fa74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa78:	059a      	lsls	r2, r3, #22
 800fa7a:	d4ef      	bmi.n	800fa5c <__smakebuf_r+0x18>
 800fa7c:	f023 0303 	bic.w	r3, r3, #3
 800fa80:	f043 0302 	orr.w	r3, r3, #2
 800fa84:	81a3      	strh	r3, [r4, #12]
 800fa86:	e7e3      	b.n	800fa50 <__smakebuf_r+0xc>
 800fa88:	4b0d      	ldr	r3, [pc, #52]	; (800fac0 <__smakebuf_r+0x7c>)
 800fa8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa8c:	89a3      	ldrh	r3, [r4, #12]
 800fa8e:	6020      	str	r0, [r4, #0]
 800fa90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa94:	81a3      	strh	r3, [r4, #12]
 800fa96:	9b00      	ldr	r3, [sp, #0]
 800fa98:	6163      	str	r3, [r4, #20]
 800fa9a:	9b01      	ldr	r3, [sp, #4]
 800fa9c:	6120      	str	r0, [r4, #16]
 800fa9e:	b15b      	cbz	r3, 800fab8 <__smakebuf_r+0x74>
 800faa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faa4:	4630      	mov	r0, r6
 800faa6:	f002 fc43 	bl	8012330 <_isatty_r>
 800faaa:	b128      	cbz	r0, 800fab8 <__smakebuf_r+0x74>
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	f023 0303 	bic.w	r3, r3, #3
 800fab2:	f043 0301 	orr.w	r3, r3, #1
 800fab6:	81a3      	strh	r3, [r4, #12]
 800fab8:	89a0      	ldrh	r0, [r4, #12]
 800faba:	4305      	orrs	r5, r0
 800fabc:	81a5      	strh	r5, [r4, #12]
 800fabe:	e7cd      	b.n	800fa5c <__smakebuf_r+0x18>
 800fac0:	0800f689 	.word	0x0800f689

0800fac4 <malloc>:
 800fac4:	4b02      	ldr	r3, [pc, #8]	; (800fad0 <malloc+0xc>)
 800fac6:	4601      	mov	r1, r0
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	f000 b8b3 	b.w	800fc34 <_malloc_r>
 800face:	bf00      	nop
 800fad0:	20000074 	.word	0x20000074

0800fad4 <free>:
 800fad4:	4b02      	ldr	r3, [pc, #8]	; (800fae0 <free+0xc>)
 800fad6:	4601      	mov	r1, r0
 800fad8:	6818      	ldr	r0, [r3, #0]
 800fada:	f000 b83f 	b.w	800fb5c <_free_r>
 800fade:	bf00      	nop
 800fae0:	20000074 	.word	0x20000074

0800fae4 <memcmp>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	3901      	subs	r1, #1
 800fae8:	4402      	add	r2, r0
 800faea:	4290      	cmp	r0, r2
 800faec:	d101      	bne.n	800faf2 <memcmp+0xe>
 800faee:	2000      	movs	r0, #0
 800faf0:	e005      	b.n	800fafe <memcmp+0x1a>
 800faf2:	7803      	ldrb	r3, [r0, #0]
 800faf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	d001      	beq.n	800fb00 <memcmp+0x1c>
 800fafc:	1b18      	subs	r0, r3, r4
 800fafe:	bd10      	pop	{r4, pc}
 800fb00:	3001      	adds	r0, #1
 800fb02:	e7f2      	b.n	800faea <memcmp+0x6>

0800fb04 <memcpy>:
 800fb04:	440a      	add	r2, r1
 800fb06:	4291      	cmp	r1, r2
 800fb08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fb0c:	d100      	bne.n	800fb10 <memcpy+0xc>
 800fb0e:	4770      	bx	lr
 800fb10:	b510      	push	{r4, lr}
 800fb12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb1a:	4291      	cmp	r1, r2
 800fb1c:	d1f9      	bne.n	800fb12 <memcpy+0xe>
 800fb1e:	bd10      	pop	{r4, pc}

0800fb20 <memset>:
 800fb20:	4402      	add	r2, r0
 800fb22:	4603      	mov	r3, r0
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d100      	bne.n	800fb2a <memset+0xa>
 800fb28:	4770      	bx	lr
 800fb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800fb2e:	e7f9      	b.n	800fb24 <memset+0x4>

0800fb30 <_calloc_r>:
 800fb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb32:	fba1 2402 	umull	r2, r4, r1, r2
 800fb36:	b94c      	cbnz	r4, 800fb4c <_calloc_r+0x1c>
 800fb38:	4611      	mov	r1, r2
 800fb3a:	9201      	str	r2, [sp, #4]
 800fb3c:	f000 f87a 	bl	800fc34 <_malloc_r>
 800fb40:	9a01      	ldr	r2, [sp, #4]
 800fb42:	4605      	mov	r5, r0
 800fb44:	b930      	cbnz	r0, 800fb54 <_calloc_r+0x24>
 800fb46:	4628      	mov	r0, r5
 800fb48:	b003      	add	sp, #12
 800fb4a:	bd30      	pop	{r4, r5, pc}
 800fb4c:	220c      	movs	r2, #12
 800fb4e:	6002      	str	r2, [r0, #0]
 800fb50:	2500      	movs	r5, #0
 800fb52:	e7f8      	b.n	800fb46 <_calloc_r+0x16>
 800fb54:	4621      	mov	r1, r4
 800fb56:	f7ff ffe3 	bl	800fb20 <memset>
 800fb5a:	e7f4      	b.n	800fb46 <_calloc_r+0x16>

0800fb5c <_free_r>:
 800fb5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb5e:	2900      	cmp	r1, #0
 800fb60:	d044      	beq.n	800fbec <_free_r+0x90>
 800fb62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb66:	9001      	str	r0, [sp, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f1a1 0404 	sub.w	r4, r1, #4
 800fb6e:	bfb8      	it	lt
 800fb70:	18e4      	addlt	r4, r4, r3
 800fb72:	f002 fc2b 	bl	80123cc <__malloc_lock>
 800fb76:	4a1e      	ldr	r2, [pc, #120]	; (800fbf0 <_free_r+0x94>)
 800fb78:	9801      	ldr	r0, [sp, #4]
 800fb7a:	6813      	ldr	r3, [r2, #0]
 800fb7c:	b933      	cbnz	r3, 800fb8c <_free_r+0x30>
 800fb7e:	6063      	str	r3, [r4, #4]
 800fb80:	6014      	str	r4, [r2, #0]
 800fb82:	b003      	add	sp, #12
 800fb84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb88:	f002 bc26 	b.w	80123d8 <__malloc_unlock>
 800fb8c:	42a3      	cmp	r3, r4
 800fb8e:	d908      	bls.n	800fba2 <_free_r+0x46>
 800fb90:	6825      	ldr	r5, [r4, #0]
 800fb92:	1961      	adds	r1, r4, r5
 800fb94:	428b      	cmp	r3, r1
 800fb96:	bf01      	itttt	eq
 800fb98:	6819      	ldreq	r1, [r3, #0]
 800fb9a:	685b      	ldreq	r3, [r3, #4]
 800fb9c:	1949      	addeq	r1, r1, r5
 800fb9e:	6021      	streq	r1, [r4, #0]
 800fba0:	e7ed      	b.n	800fb7e <_free_r+0x22>
 800fba2:	461a      	mov	r2, r3
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	b10b      	cbz	r3, 800fbac <_free_r+0x50>
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	d9fa      	bls.n	800fba2 <_free_r+0x46>
 800fbac:	6811      	ldr	r1, [r2, #0]
 800fbae:	1855      	adds	r5, r2, r1
 800fbb0:	42a5      	cmp	r5, r4
 800fbb2:	d10b      	bne.n	800fbcc <_free_r+0x70>
 800fbb4:	6824      	ldr	r4, [r4, #0]
 800fbb6:	4421      	add	r1, r4
 800fbb8:	1854      	adds	r4, r2, r1
 800fbba:	42a3      	cmp	r3, r4
 800fbbc:	6011      	str	r1, [r2, #0]
 800fbbe:	d1e0      	bne.n	800fb82 <_free_r+0x26>
 800fbc0:	681c      	ldr	r4, [r3, #0]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	6053      	str	r3, [r2, #4]
 800fbc6:	4421      	add	r1, r4
 800fbc8:	6011      	str	r1, [r2, #0]
 800fbca:	e7da      	b.n	800fb82 <_free_r+0x26>
 800fbcc:	d902      	bls.n	800fbd4 <_free_r+0x78>
 800fbce:	230c      	movs	r3, #12
 800fbd0:	6003      	str	r3, [r0, #0]
 800fbd2:	e7d6      	b.n	800fb82 <_free_r+0x26>
 800fbd4:	6825      	ldr	r5, [r4, #0]
 800fbd6:	1961      	adds	r1, r4, r5
 800fbd8:	428b      	cmp	r3, r1
 800fbda:	bf04      	itt	eq
 800fbdc:	6819      	ldreq	r1, [r3, #0]
 800fbde:	685b      	ldreq	r3, [r3, #4]
 800fbe0:	6063      	str	r3, [r4, #4]
 800fbe2:	bf04      	itt	eq
 800fbe4:	1949      	addeq	r1, r1, r5
 800fbe6:	6021      	streq	r1, [r4, #0]
 800fbe8:	6054      	str	r4, [r2, #4]
 800fbea:	e7ca      	b.n	800fb82 <_free_r+0x26>
 800fbec:	b003      	add	sp, #12
 800fbee:	bd30      	pop	{r4, r5, pc}
 800fbf0:	20003bdc 	.word	0x20003bdc

0800fbf4 <sbrk_aligned>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	4e0e      	ldr	r6, [pc, #56]	; (800fc30 <sbrk_aligned+0x3c>)
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	6831      	ldr	r1, [r6, #0]
 800fbfc:	4605      	mov	r5, r0
 800fbfe:	b911      	cbnz	r1, 800fc06 <sbrk_aligned+0x12>
 800fc00:	f000 fd5c 	bl	80106bc <_sbrk_r>
 800fc04:	6030      	str	r0, [r6, #0]
 800fc06:	4621      	mov	r1, r4
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f000 fd57 	bl	80106bc <_sbrk_r>
 800fc0e:	1c43      	adds	r3, r0, #1
 800fc10:	d00a      	beq.n	800fc28 <sbrk_aligned+0x34>
 800fc12:	1cc4      	adds	r4, r0, #3
 800fc14:	f024 0403 	bic.w	r4, r4, #3
 800fc18:	42a0      	cmp	r0, r4
 800fc1a:	d007      	beq.n	800fc2c <sbrk_aligned+0x38>
 800fc1c:	1a21      	subs	r1, r4, r0
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f000 fd4c 	bl	80106bc <_sbrk_r>
 800fc24:	3001      	adds	r0, #1
 800fc26:	d101      	bne.n	800fc2c <sbrk_aligned+0x38>
 800fc28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	bd70      	pop	{r4, r5, r6, pc}
 800fc30:	20003be0 	.word	0x20003be0

0800fc34 <_malloc_r>:
 800fc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc38:	1ccd      	adds	r5, r1, #3
 800fc3a:	f025 0503 	bic.w	r5, r5, #3
 800fc3e:	3508      	adds	r5, #8
 800fc40:	2d0c      	cmp	r5, #12
 800fc42:	bf38      	it	cc
 800fc44:	250c      	movcc	r5, #12
 800fc46:	2d00      	cmp	r5, #0
 800fc48:	4607      	mov	r7, r0
 800fc4a:	db01      	blt.n	800fc50 <_malloc_r+0x1c>
 800fc4c:	42a9      	cmp	r1, r5
 800fc4e:	d905      	bls.n	800fc5c <_malloc_r+0x28>
 800fc50:	230c      	movs	r3, #12
 800fc52:	603b      	str	r3, [r7, #0]
 800fc54:	2600      	movs	r6, #0
 800fc56:	4630      	mov	r0, r6
 800fc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc5c:	4e2e      	ldr	r6, [pc, #184]	; (800fd18 <_malloc_r+0xe4>)
 800fc5e:	f002 fbb5 	bl	80123cc <__malloc_lock>
 800fc62:	6833      	ldr	r3, [r6, #0]
 800fc64:	461c      	mov	r4, r3
 800fc66:	bb34      	cbnz	r4, 800fcb6 <_malloc_r+0x82>
 800fc68:	4629      	mov	r1, r5
 800fc6a:	4638      	mov	r0, r7
 800fc6c:	f7ff ffc2 	bl	800fbf4 <sbrk_aligned>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	4604      	mov	r4, r0
 800fc74:	d14d      	bne.n	800fd12 <_malloc_r+0xde>
 800fc76:	6834      	ldr	r4, [r6, #0]
 800fc78:	4626      	mov	r6, r4
 800fc7a:	2e00      	cmp	r6, #0
 800fc7c:	d140      	bne.n	800fd00 <_malloc_r+0xcc>
 800fc7e:	6823      	ldr	r3, [r4, #0]
 800fc80:	4631      	mov	r1, r6
 800fc82:	4638      	mov	r0, r7
 800fc84:	eb04 0803 	add.w	r8, r4, r3
 800fc88:	f000 fd18 	bl	80106bc <_sbrk_r>
 800fc8c:	4580      	cmp	r8, r0
 800fc8e:	d13a      	bne.n	800fd06 <_malloc_r+0xd2>
 800fc90:	6821      	ldr	r1, [r4, #0]
 800fc92:	3503      	adds	r5, #3
 800fc94:	1a6d      	subs	r5, r5, r1
 800fc96:	f025 0503 	bic.w	r5, r5, #3
 800fc9a:	3508      	adds	r5, #8
 800fc9c:	2d0c      	cmp	r5, #12
 800fc9e:	bf38      	it	cc
 800fca0:	250c      	movcc	r5, #12
 800fca2:	4629      	mov	r1, r5
 800fca4:	4638      	mov	r0, r7
 800fca6:	f7ff ffa5 	bl	800fbf4 <sbrk_aligned>
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d02b      	beq.n	800fd06 <_malloc_r+0xd2>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	442b      	add	r3, r5
 800fcb2:	6023      	str	r3, [r4, #0]
 800fcb4:	e00e      	b.n	800fcd4 <_malloc_r+0xa0>
 800fcb6:	6822      	ldr	r2, [r4, #0]
 800fcb8:	1b52      	subs	r2, r2, r5
 800fcba:	d41e      	bmi.n	800fcfa <_malloc_r+0xc6>
 800fcbc:	2a0b      	cmp	r2, #11
 800fcbe:	d916      	bls.n	800fcee <_malloc_r+0xba>
 800fcc0:	1961      	adds	r1, r4, r5
 800fcc2:	42a3      	cmp	r3, r4
 800fcc4:	6025      	str	r5, [r4, #0]
 800fcc6:	bf18      	it	ne
 800fcc8:	6059      	strne	r1, [r3, #4]
 800fcca:	6863      	ldr	r3, [r4, #4]
 800fccc:	bf08      	it	eq
 800fcce:	6031      	streq	r1, [r6, #0]
 800fcd0:	5162      	str	r2, [r4, r5]
 800fcd2:	604b      	str	r3, [r1, #4]
 800fcd4:	4638      	mov	r0, r7
 800fcd6:	f104 060b 	add.w	r6, r4, #11
 800fcda:	f002 fb7d 	bl	80123d8 <__malloc_unlock>
 800fcde:	f026 0607 	bic.w	r6, r6, #7
 800fce2:	1d23      	adds	r3, r4, #4
 800fce4:	1af2      	subs	r2, r6, r3
 800fce6:	d0b6      	beq.n	800fc56 <_malloc_r+0x22>
 800fce8:	1b9b      	subs	r3, r3, r6
 800fcea:	50a3      	str	r3, [r4, r2]
 800fcec:	e7b3      	b.n	800fc56 <_malloc_r+0x22>
 800fcee:	6862      	ldr	r2, [r4, #4]
 800fcf0:	42a3      	cmp	r3, r4
 800fcf2:	bf0c      	ite	eq
 800fcf4:	6032      	streq	r2, [r6, #0]
 800fcf6:	605a      	strne	r2, [r3, #4]
 800fcf8:	e7ec      	b.n	800fcd4 <_malloc_r+0xa0>
 800fcfa:	4623      	mov	r3, r4
 800fcfc:	6864      	ldr	r4, [r4, #4]
 800fcfe:	e7b2      	b.n	800fc66 <_malloc_r+0x32>
 800fd00:	4634      	mov	r4, r6
 800fd02:	6876      	ldr	r6, [r6, #4]
 800fd04:	e7b9      	b.n	800fc7a <_malloc_r+0x46>
 800fd06:	230c      	movs	r3, #12
 800fd08:	603b      	str	r3, [r7, #0]
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	f002 fb64 	bl	80123d8 <__malloc_unlock>
 800fd10:	e7a1      	b.n	800fc56 <_malloc_r+0x22>
 800fd12:	6025      	str	r5, [r4, #0]
 800fd14:	e7de      	b.n	800fcd4 <_malloc_r+0xa0>
 800fd16:	bf00      	nop
 800fd18:	20003bdc 	.word	0x20003bdc

0800fd1c <__sfputc_r>:
 800fd1c:	6893      	ldr	r3, [r2, #8]
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	b410      	push	{r4}
 800fd24:	6093      	str	r3, [r2, #8]
 800fd26:	da08      	bge.n	800fd3a <__sfputc_r+0x1e>
 800fd28:	6994      	ldr	r4, [r2, #24]
 800fd2a:	42a3      	cmp	r3, r4
 800fd2c:	db01      	blt.n	800fd32 <__sfputc_r+0x16>
 800fd2e:	290a      	cmp	r1, #10
 800fd30:	d103      	bne.n	800fd3a <__sfputc_r+0x1e>
 800fd32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd36:	f001 be85 	b.w	8011a44 <__swbuf_r>
 800fd3a:	6813      	ldr	r3, [r2, #0]
 800fd3c:	1c58      	adds	r0, r3, #1
 800fd3e:	6010      	str	r0, [r2, #0]
 800fd40:	7019      	strb	r1, [r3, #0]
 800fd42:	4608      	mov	r0, r1
 800fd44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd48:	4770      	bx	lr

0800fd4a <__sfputs_r>:
 800fd4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	460f      	mov	r7, r1
 800fd50:	4614      	mov	r4, r2
 800fd52:	18d5      	adds	r5, r2, r3
 800fd54:	42ac      	cmp	r4, r5
 800fd56:	d101      	bne.n	800fd5c <__sfputs_r+0x12>
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e007      	b.n	800fd6c <__sfputs_r+0x22>
 800fd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd60:	463a      	mov	r2, r7
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7ff ffda 	bl	800fd1c <__sfputc_r>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d1f3      	bne.n	800fd54 <__sfputs_r+0xa>
 800fd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd70 <_vfiprintf_r>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	460d      	mov	r5, r1
 800fd76:	b09d      	sub	sp, #116	; 0x74
 800fd78:	4614      	mov	r4, r2
 800fd7a:	4698      	mov	r8, r3
 800fd7c:	4606      	mov	r6, r0
 800fd7e:	b118      	cbz	r0, 800fd88 <_vfiprintf_r+0x18>
 800fd80:	6983      	ldr	r3, [r0, #24]
 800fd82:	b90b      	cbnz	r3, 800fd88 <_vfiprintf_r+0x18>
 800fd84:	f7ff fcb4 	bl	800f6f0 <__sinit>
 800fd88:	4b89      	ldr	r3, [pc, #548]	; (800ffb0 <_vfiprintf_r+0x240>)
 800fd8a:	429d      	cmp	r5, r3
 800fd8c:	d11b      	bne.n	800fdc6 <_vfiprintf_r+0x56>
 800fd8e:	6875      	ldr	r5, [r6, #4]
 800fd90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd92:	07d9      	lsls	r1, r3, #31
 800fd94:	d405      	bmi.n	800fda2 <_vfiprintf_r+0x32>
 800fd96:	89ab      	ldrh	r3, [r5, #12]
 800fd98:	059a      	lsls	r2, r3, #22
 800fd9a:	d402      	bmi.n	800fda2 <_vfiprintf_r+0x32>
 800fd9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd9e:	f7ff fe2a 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 800fda2:	89ab      	ldrh	r3, [r5, #12]
 800fda4:	071b      	lsls	r3, r3, #28
 800fda6:	d501      	bpl.n	800fdac <_vfiprintf_r+0x3c>
 800fda8:	692b      	ldr	r3, [r5, #16]
 800fdaa:	b9eb      	cbnz	r3, 800fde8 <_vfiprintf_r+0x78>
 800fdac:	4629      	mov	r1, r5
 800fdae:	4630      	mov	r0, r6
 800fdb0:	f001 feac 	bl	8011b0c <__swsetup_r>
 800fdb4:	b1c0      	cbz	r0, 800fde8 <_vfiprintf_r+0x78>
 800fdb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdb8:	07dc      	lsls	r4, r3, #31
 800fdba:	d50e      	bpl.n	800fdda <_vfiprintf_r+0x6a>
 800fdbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdc0:	b01d      	add	sp, #116	; 0x74
 800fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc6:	4b7b      	ldr	r3, [pc, #492]	; (800ffb4 <_vfiprintf_r+0x244>)
 800fdc8:	429d      	cmp	r5, r3
 800fdca:	d101      	bne.n	800fdd0 <_vfiprintf_r+0x60>
 800fdcc:	68b5      	ldr	r5, [r6, #8]
 800fdce:	e7df      	b.n	800fd90 <_vfiprintf_r+0x20>
 800fdd0:	4b79      	ldr	r3, [pc, #484]	; (800ffb8 <_vfiprintf_r+0x248>)
 800fdd2:	429d      	cmp	r5, r3
 800fdd4:	bf08      	it	eq
 800fdd6:	68f5      	ldreq	r5, [r6, #12]
 800fdd8:	e7da      	b.n	800fd90 <_vfiprintf_r+0x20>
 800fdda:	89ab      	ldrh	r3, [r5, #12]
 800fddc:	0598      	lsls	r0, r3, #22
 800fdde:	d4ed      	bmi.n	800fdbc <_vfiprintf_r+0x4c>
 800fde0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fde2:	f7ff fe09 	bl	800f9f8 <__retarget_lock_release_recursive>
 800fde6:	e7e9      	b.n	800fdbc <_vfiprintf_r+0x4c>
 800fde8:	2300      	movs	r3, #0
 800fdea:	9309      	str	r3, [sp, #36]	; 0x24
 800fdec:	2320      	movs	r3, #32
 800fdee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdf6:	2330      	movs	r3, #48	; 0x30
 800fdf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffbc <_vfiprintf_r+0x24c>
 800fdfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe00:	f04f 0901 	mov.w	r9, #1
 800fe04:	4623      	mov	r3, r4
 800fe06:	469a      	mov	sl, r3
 800fe08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe0c:	b10a      	cbz	r2, 800fe12 <_vfiprintf_r+0xa2>
 800fe0e:	2a25      	cmp	r2, #37	; 0x25
 800fe10:	d1f9      	bne.n	800fe06 <_vfiprintf_r+0x96>
 800fe12:	ebba 0b04 	subs.w	fp, sl, r4
 800fe16:	d00b      	beq.n	800fe30 <_vfiprintf_r+0xc0>
 800fe18:	465b      	mov	r3, fp
 800fe1a:	4622      	mov	r2, r4
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	4630      	mov	r0, r6
 800fe20:	f7ff ff93 	bl	800fd4a <__sfputs_r>
 800fe24:	3001      	adds	r0, #1
 800fe26:	f000 80aa 	beq.w	800ff7e <_vfiprintf_r+0x20e>
 800fe2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe2c:	445a      	add	r2, fp
 800fe2e:	9209      	str	r2, [sp, #36]	; 0x24
 800fe30:	f89a 3000 	ldrb.w	r3, [sl]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 80a2 	beq.w	800ff7e <_vfiprintf_r+0x20e>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe44:	f10a 0a01 	add.w	sl, sl, #1
 800fe48:	9304      	str	r3, [sp, #16]
 800fe4a:	9307      	str	r3, [sp, #28]
 800fe4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe50:	931a      	str	r3, [sp, #104]	; 0x68
 800fe52:	4654      	mov	r4, sl
 800fe54:	2205      	movs	r2, #5
 800fe56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5a:	4858      	ldr	r0, [pc, #352]	; (800ffbc <_vfiprintf_r+0x24c>)
 800fe5c:	f7f0 faf0 	bl	8000440 <memchr>
 800fe60:	9a04      	ldr	r2, [sp, #16]
 800fe62:	b9d8      	cbnz	r0, 800fe9c <_vfiprintf_r+0x12c>
 800fe64:	06d1      	lsls	r1, r2, #27
 800fe66:	bf44      	itt	mi
 800fe68:	2320      	movmi	r3, #32
 800fe6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe6e:	0713      	lsls	r3, r2, #28
 800fe70:	bf44      	itt	mi
 800fe72:	232b      	movmi	r3, #43	; 0x2b
 800fe74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe78:	f89a 3000 	ldrb.w	r3, [sl]
 800fe7c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe7e:	d015      	beq.n	800feac <_vfiprintf_r+0x13c>
 800fe80:	9a07      	ldr	r2, [sp, #28]
 800fe82:	4654      	mov	r4, sl
 800fe84:	2000      	movs	r0, #0
 800fe86:	f04f 0c0a 	mov.w	ip, #10
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe90:	3b30      	subs	r3, #48	; 0x30
 800fe92:	2b09      	cmp	r3, #9
 800fe94:	d94e      	bls.n	800ff34 <_vfiprintf_r+0x1c4>
 800fe96:	b1b0      	cbz	r0, 800fec6 <_vfiprintf_r+0x156>
 800fe98:	9207      	str	r2, [sp, #28]
 800fe9a:	e014      	b.n	800fec6 <_vfiprintf_r+0x156>
 800fe9c:	eba0 0308 	sub.w	r3, r0, r8
 800fea0:	fa09 f303 	lsl.w	r3, r9, r3
 800fea4:	4313      	orrs	r3, r2
 800fea6:	9304      	str	r3, [sp, #16]
 800fea8:	46a2      	mov	sl, r4
 800feaa:	e7d2      	b.n	800fe52 <_vfiprintf_r+0xe2>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	1d19      	adds	r1, r3, #4
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	9103      	str	r1, [sp, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	bfbb      	ittet	lt
 800feb8:	425b      	neglt	r3, r3
 800feba:	f042 0202 	orrlt.w	r2, r2, #2
 800febe:	9307      	strge	r3, [sp, #28]
 800fec0:	9307      	strlt	r3, [sp, #28]
 800fec2:	bfb8      	it	lt
 800fec4:	9204      	strlt	r2, [sp, #16]
 800fec6:	7823      	ldrb	r3, [r4, #0]
 800fec8:	2b2e      	cmp	r3, #46	; 0x2e
 800feca:	d10c      	bne.n	800fee6 <_vfiprintf_r+0x176>
 800fecc:	7863      	ldrb	r3, [r4, #1]
 800fece:	2b2a      	cmp	r3, #42	; 0x2a
 800fed0:	d135      	bne.n	800ff3e <_vfiprintf_r+0x1ce>
 800fed2:	9b03      	ldr	r3, [sp, #12]
 800fed4:	1d1a      	adds	r2, r3, #4
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	9203      	str	r2, [sp, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	bfb8      	it	lt
 800fede:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fee2:	3402      	adds	r4, #2
 800fee4:	9305      	str	r3, [sp, #20]
 800fee6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffcc <_vfiprintf_r+0x25c>
 800feea:	7821      	ldrb	r1, [r4, #0]
 800feec:	2203      	movs	r2, #3
 800feee:	4650      	mov	r0, sl
 800fef0:	f7f0 faa6 	bl	8000440 <memchr>
 800fef4:	b140      	cbz	r0, 800ff08 <_vfiprintf_r+0x198>
 800fef6:	2340      	movs	r3, #64	; 0x40
 800fef8:	eba0 000a 	sub.w	r0, r0, sl
 800fefc:	fa03 f000 	lsl.w	r0, r3, r0
 800ff00:	9b04      	ldr	r3, [sp, #16]
 800ff02:	4303      	orrs	r3, r0
 800ff04:	3401      	adds	r4, #1
 800ff06:	9304      	str	r3, [sp, #16]
 800ff08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff0c:	482c      	ldr	r0, [pc, #176]	; (800ffc0 <_vfiprintf_r+0x250>)
 800ff0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff12:	2206      	movs	r2, #6
 800ff14:	f7f0 fa94 	bl	8000440 <memchr>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d03f      	beq.n	800ff9c <_vfiprintf_r+0x22c>
 800ff1c:	4b29      	ldr	r3, [pc, #164]	; (800ffc4 <_vfiprintf_r+0x254>)
 800ff1e:	bb1b      	cbnz	r3, 800ff68 <_vfiprintf_r+0x1f8>
 800ff20:	9b03      	ldr	r3, [sp, #12]
 800ff22:	3307      	adds	r3, #7
 800ff24:	f023 0307 	bic.w	r3, r3, #7
 800ff28:	3308      	adds	r3, #8
 800ff2a:	9303      	str	r3, [sp, #12]
 800ff2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff2e:	443b      	add	r3, r7
 800ff30:	9309      	str	r3, [sp, #36]	; 0x24
 800ff32:	e767      	b.n	800fe04 <_vfiprintf_r+0x94>
 800ff34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff38:	460c      	mov	r4, r1
 800ff3a:	2001      	movs	r0, #1
 800ff3c:	e7a5      	b.n	800fe8a <_vfiprintf_r+0x11a>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	3401      	adds	r4, #1
 800ff42:	9305      	str	r3, [sp, #20]
 800ff44:	4619      	mov	r1, r3
 800ff46:	f04f 0c0a 	mov.w	ip, #10
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff50:	3a30      	subs	r2, #48	; 0x30
 800ff52:	2a09      	cmp	r2, #9
 800ff54:	d903      	bls.n	800ff5e <_vfiprintf_r+0x1ee>
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d0c5      	beq.n	800fee6 <_vfiprintf_r+0x176>
 800ff5a:	9105      	str	r1, [sp, #20]
 800ff5c:	e7c3      	b.n	800fee6 <_vfiprintf_r+0x176>
 800ff5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff62:	4604      	mov	r4, r0
 800ff64:	2301      	movs	r3, #1
 800ff66:	e7f0      	b.n	800ff4a <_vfiprintf_r+0x1da>
 800ff68:	ab03      	add	r3, sp, #12
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	462a      	mov	r2, r5
 800ff6e:	4b16      	ldr	r3, [pc, #88]	; (800ffc8 <_vfiprintf_r+0x258>)
 800ff70:	a904      	add	r1, sp, #16
 800ff72:	4630      	mov	r0, r6
 800ff74:	f3af 8000 	nop.w
 800ff78:	4607      	mov	r7, r0
 800ff7a:	1c78      	adds	r0, r7, #1
 800ff7c:	d1d6      	bne.n	800ff2c <_vfiprintf_r+0x1bc>
 800ff7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff80:	07d9      	lsls	r1, r3, #31
 800ff82:	d405      	bmi.n	800ff90 <_vfiprintf_r+0x220>
 800ff84:	89ab      	ldrh	r3, [r5, #12]
 800ff86:	059a      	lsls	r2, r3, #22
 800ff88:	d402      	bmi.n	800ff90 <_vfiprintf_r+0x220>
 800ff8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff8c:	f7ff fd34 	bl	800f9f8 <__retarget_lock_release_recursive>
 800ff90:	89ab      	ldrh	r3, [r5, #12]
 800ff92:	065b      	lsls	r3, r3, #25
 800ff94:	f53f af12 	bmi.w	800fdbc <_vfiprintf_r+0x4c>
 800ff98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff9a:	e711      	b.n	800fdc0 <_vfiprintf_r+0x50>
 800ff9c:	ab03      	add	r3, sp, #12
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	462a      	mov	r2, r5
 800ffa2:	4b09      	ldr	r3, [pc, #36]	; (800ffc8 <_vfiprintf_r+0x258>)
 800ffa4:	a904      	add	r1, sp, #16
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	f000 f88a 	bl	80100c0 <_printf_i>
 800ffac:	e7e4      	b.n	800ff78 <_vfiprintf_r+0x208>
 800ffae:	bf00      	nop
 800ffb0:	080173c8 	.word	0x080173c8
 800ffb4:	080173e8 	.word	0x080173e8
 800ffb8:	080173a8 	.word	0x080173a8
 800ffbc:	0801740c 	.word	0x0801740c
 800ffc0:	08017416 	.word	0x08017416
 800ffc4:	00000000 	.word	0x00000000
 800ffc8:	0800fd4b 	.word	0x0800fd4b
 800ffcc:	08017412 	.word	0x08017412

0800ffd0 <vfiprintf>:
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	460a      	mov	r2, r1
 800ffd4:	4601      	mov	r1, r0
 800ffd6:	4802      	ldr	r0, [pc, #8]	; (800ffe0 <vfiprintf+0x10>)
 800ffd8:	6800      	ldr	r0, [r0, #0]
 800ffda:	f7ff bec9 	b.w	800fd70 <_vfiprintf_r>
 800ffde:	bf00      	nop
 800ffe0:	20000074 	.word	0x20000074

0800ffe4 <_printf_common>:
 800ffe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe8:	4616      	mov	r6, r2
 800ffea:	4699      	mov	r9, r3
 800ffec:	688a      	ldr	r2, [r1, #8]
 800ffee:	690b      	ldr	r3, [r1, #16]
 800fff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fff4:	4293      	cmp	r3, r2
 800fff6:	bfb8      	it	lt
 800fff8:	4613      	movlt	r3, r2
 800fffa:	6033      	str	r3, [r6, #0]
 800fffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010000:	4607      	mov	r7, r0
 8010002:	460c      	mov	r4, r1
 8010004:	b10a      	cbz	r2, 801000a <_printf_common+0x26>
 8010006:	3301      	adds	r3, #1
 8010008:	6033      	str	r3, [r6, #0]
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	0699      	lsls	r1, r3, #26
 801000e:	bf42      	ittt	mi
 8010010:	6833      	ldrmi	r3, [r6, #0]
 8010012:	3302      	addmi	r3, #2
 8010014:	6033      	strmi	r3, [r6, #0]
 8010016:	6825      	ldr	r5, [r4, #0]
 8010018:	f015 0506 	ands.w	r5, r5, #6
 801001c:	d106      	bne.n	801002c <_printf_common+0x48>
 801001e:	f104 0a19 	add.w	sl, r4, #25
 8010022:	68e3      	ldr	r3, [r4, #12]
 8010024:	6832      	ldr	r2, [r6, #0]
 8010026:	1a9b      	subs	r3, r3, r2
 8010028:	42ab      	cmp	r3, r5
 801002a:	dc26      	bgt.n	801007a <_printf_common+0x96>
 801002c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010030:	1e13      	subs	r3, r2, #0
 8010032:	6822      	ldr	r2, [r4, #0]
 8010034:	bf18      	it	ne
 8010036:	2301      	movne	r3, #1
 8010038:	0692      	lsls	r2, r2, #26
 801003a:	d42b      	bmi.n	8010094 <_printf_common+0xb0>
 801003c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010040:	4649      	mov	r1, r9
 8010042:	4638      	mov	r0, r7
 8010044:	47c0      	blx	r8
 8010046:	3001      	adds	r0, #1
 8010048:	d01e      	beq.n	8010088 <_printf_common+0xa4>
 801004a:	6823      	ldr	r3, [r4, #0]
 801004c:	68e5      	ldr	r5, [r4, #12]
 801004e:	6832      	ldr	r2, [r6, #0]
 8010050:	f003 0306 	and.w	r3, r3, #6
 8010054:	2b04      	cmp	r3, #4
 8010056:	bf08      	it	eq
 8010058:	1aad      	subeq	r5, r5, r2
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	6922      	ldr	r2, [r4, #16]
 801005e:	bf0c      	ite	eq
 8010060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010064:	2500      	movne	r5, #0
 8010066:	4293      	cmp	r3, r2
 8010068:	bfc4      	itt	gt
 801006a:	1a9b      	subgt	r3, r3, r2
 801006c:	18ed      	addgt	r5, r5, r3
 801006e:	2600      	movs	r6, #0
 8010070:	341a      	adds	r4, #26
 8010072:	42b5      	cmp	r5, r6
 8010074:	d11a      	bne.n	80100ac <_printf_common+0xc8>
 8010076:	2000      	movs	r0, #0
 8010078:	e008      	b.n	801008c <_printf_common+0xa8>
 801007a:	2301      	movs	r3, #1
 801007c:	4652      	mov	r2, sl
 801007e:	4649      	mov	r1, r9
 8010080:	4638      	mov	r0, r7
 8010082:	47c0      	blx	r8
 8010084:	3001      	adds	r0, #1
 8010086:	d103      	bne.n	8010090 <_printf_common+0xac>
 8010088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801008c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010090:	3501      	adds	r5, #1
 8010092:	e7c6      	b.n	8010022 <_printf_common+0x3e>
 8010094:	18e1      	adds	r1, r4, r3
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	2030      	movs	r0, #48	; 0x30
 801009a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801009e:	4422      	add	r2, r4
 80100a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80100a8:	3302      	adds	r3, #2
 80100aa:	e7c7      	b.n	801003c <_printf_common+0x58>
 80100ac:	2301      	movs	r3, #1
 80100ae:	4622      	mov	r2, r4
 80100b0:	4649      	mov	r1, r9
 80100b2:	4638      	mov	r0, r7
 80100b4:	47c0      	blx	r8
 80100b6:	3001      	adds	r0, #1
 80100b8:	d0e6      	beq.n	8010088 <_printf_common+0xa4>
 80100ba:	3601      	adds	r6, #1
 80100bc:	e7d9      	b.n	8010072 <_printf_common+0x8e>
	...

080100c0 <_printf_i>:
 80100c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100c4:	7e0f      	ldrb	r7, [r1, #24]
 80100c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80100c8:	2f78      	cmp	r7, #120	; 0x78
 80100ca:	4691      	mov	r9, r2
 80100cc:	4680      	mov	r8, r0
 80100ce:	460c      	mov	r4, r1
 80100d0:	469a      	mov	sl, r3
 80100d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80100d6:	d807      	bhi.n	80100e8 <_printf_i+0x28>
 80100d8:	2f62      	cmp	r7, #98	; 0x62
 80100da:	d80a      	bhi.n	80100f2 <_printf_i+0x32>
 80100dc:	2f00      	cmp	r7, #0
 80100de:	f000 80d8 	beq.w	8010292 <_printf_i+0x1d2>
 80100e2:	2f58      	cmp	r7, #88	; 0x58
 80100e4:	f000 80a3 	beq.w	801022e <_printf_i+0x16e>
 80100e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80100f0:	e03a      	b.n	8010168 <_printf_i+0xa8>
 80100f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100f6:	2b15      	cmp	r3, #21
 80100f8:	d8f6      	bhi.n	80100e8 <_printf_i+0x28>
 80100fa:	a101      	add	r1, pc, #4	; (adr r1, 8010100 <_printf_i+0x40>)
 80100fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010100:	08010159 	.word	0x08010159
 8010104:	0801016d 	.word	0x0801016d
 8010108:	080100e9 	.word	0x080100e9
 801010c:	080100e9 	.word	0x080100e9
 8010110:	080100e9 	.word	0x080100e9
 8010114:	080100e9 	.word	0x080100e9
 8010118:	0801016d 	.word	0x0801016d
 801011c:	080100e9 	.word	0x080100e9
 8010120:	080100e9 	.word	0x080100e9
 8010124:	080100e9 	.word	0x080100e9
 8010128:	080100e9 	.word	0x080100e9
 801012c:	08010279 	.word	0x08010279
 8010130:	0801019d 	.word	0x0801019d
 8010134:	0801025b 	.word	0x0801025b
 8010138:	080100e9 	.word	0x080100e9
 801013c:	080100e9 	.word	0x080100e9
 8010140:	0801029b 	.word	0x0801029b
 8010144:	080100e9 	.word	0x080100e9
 8010148:	0801019d 	.word	0x0801019d
 801014c:	080100e9 	.word	0x080100e9
 8010150:	080100e9 	.word	0x080100e9
 8010154:	08010263 	.word	0x08010263
 8010158:	682b      	ldr	r3, [r5, #0]
 801015a:	1d1a      	adds	r2, r3, #4
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	602a      	str	r2, [r5, #0]
 8010160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010168:	2301      	movs	r3, #1
 801016a:	e0a3      	b.n	80102b4 <_printf_i+0x1f4>
 801016c:	6820      	ldr	r0, [r4, #0]
 801016e:	6829      	ldr	r1, [r5, #0]
 8010170:	0606      	lsls	r6, r0, #24
 8010172:	f101 0304 	add.w	r3, r1, #4
 8010176:	d50a      	bpl.n	801018e <_printf_i+0xce>
 8010178:	680e      	ldr	r6, [r1, #0]
 801017a:	602b      	str	r3, [r5, #0]
 801017c:	2e00      	cmp	r6, #0
 801017e:	da03      	bge.n	8010188 <_printf_i+0xc8>
 8010180:	232d      	movs	r3, #45	; 0x2d
 8010182:	4276      	negs	r6, r6
 8010184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010188:	485e      	ldr	r0, [pc, #376]	; (8010304 <_printf_i+0x244>)
 801018a:	230a      	movs	r3, #10
 801018c:	e019      	b.n	80101c2 <_printf_i+0x102>
 801018e:	680e      	ldr	r6, [r1, #0]
 8010190:	602b      	str	r3, [r5, #0]
 8010192:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010196:	bf18      	it	ne
 8010198:	b236      	sxthne	r6, r6
 801019a:	e7ef      	b.n	801017c <_printf_i+0xbc>
 801019c:	682b      	ldr	r3, [r5, #0]
 801019e:	6820      	ldr	r0, [r4, #0]
 80101a0:	1d19      	adds	r1, r3, #4
 80101a2:	6029      	str	r1, [r5, #0]
 80101a4:	0601      	lsls	r1, r0, #24
 80101a6:	d501      	bpl.n	80101ac <_printf_i+0xec>
 80101a8:	681e      	ldr	r6, [r3, #0]
 80101aa:	e002      	b.n	80101b2 <_printf_i+0xf2>
 80101ac:	0646      	lsls	r6, r0, #25
 80101ae:	d5fb      	bpl.n	80101a8 <_printf_i+0xe8>
 80101b0:	881e      	ldrh	r6, [r3, #0]
 80101b2:	4854      	ldr	r0, [pc, #336]	; (8010304 <_printf_i+0x244>)
 80101b4:	2f6f      	cmp	r7, #111	; 0x6f
 80101b6:	bf0c      	ite	eq
 80101b8:	2308      	moveq	r3, #8
 80101ba:	230a      	movne	r3, #10
 80101bc:	2100      	movs	r1, #0
 80101be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101c2:	6865      	ldr	r5, [r4, #4]
 80101c4:	60a5      	str	r5, [r4, #8]
 80101c6:	2d00      	cmp	r5, #0
 80101c8:	bfa2      	ittt	ge
 80101ca:	6821      	ldrge	r1, [r4, #0]
 80101cc:	f021 0104 	bicge.w	r1, r1, #4
 80101d0:	6021      	strge	r1, [r4, #0]
 80101d2:	b90e      	cbnz	r6, 80101d8 <_printf_i+0x118>
 80101d4:	2d00      	cmp	r5, #0
 80101d6:	d04d      	beq.n	8010274 <_printf_i+0x1b4>
 80101d8:	4615      	mov	r5, r2
 80101da:	fbb6 f1f3 	udiv	r1, r6, r3
 80101de:	fb03 6711 	mls	r7, r3, r1, r6
 80101e2:	5dc7      	ldrb	r7, [r0, r7]
 80101e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80101e8:	4637      	mov	r7, r6
 80101ea:	42bb      	cmp	r3, r7
 80101ec:	460e      	mov	r6, r1
 80101ee:	d9f4      	bls.n	80101da <_printf_i+0x11a>
 80101f0:	2b08      	cmp	r3, #8
 80101f2:	d10b      	bne.n	801020c <_printf_i+0x14c>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	07de      	lsls	r6, r3, #31
 80101f8:	d508      	bpl.n	801020c <_printf_i+0x14c>
 80101fa:	6923      	ldr	r3, [r4, #16]
 80101fc:	6861      	ldr	r1, [r4, #4]
 80101fe:	4299      	cmp	r1, r3
 8010200:	bfde      	ittt	le
 8010202:	2330      	movle	r3, #48	; 0x30
 8010204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010208:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801020c:	1b52      	subs	r2, r2, r5
 801020e:	6122      	str	r2, [r4, #16]
 8010210:	f8cd a000 	str.w	sl, [sp]
 8010214:	464b      	mov	r3, r9
 8010216:	aa03      	add	r2, sp, #12
 8010218:	4621      	mov	r1, r4
 801021a:	4640      	mov	r0, r8
 801021c:	f7ff fee2 	bl	800ffe4 <_printf_common>
 8010220:	3001      	adds	r0, #1
 8010222:	d14c      	bne.n	80102be <_printf_i+0x1fe>
 8010224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010228:	b004      	add	sp, #16
 801022a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801022e:	4835      	ldr	r0, [pc, #212]	; (8010304 <_printf_i+0x244>)
 8010230:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010234:	6829      	ldr	r1, [r5, #0]
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	f851 6b04 	ldr.w	r6, [r1], #4
 801023c:	6029      	str	r1, [r5, #0]
 801023e:	061d      	lsls	r5, r3, #24
 8010240:	d514      	bpl.n	801026c <_printf_i+0x1ac>
 8010242:	07df      	lsls	r7, r3, #31
 8010244:	bf44      	itt	mi
 8010246:	f043 0320 	orrmi.w	r3, r3, #32
 801024a:	6023      	strmi	r3, [r4, #0]
 801024c:	b91e      	cbnz	r6, 8010256 <_printf_i+0x196>
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	f023 0320 	bic.w	r3, r3, #32
 8010254:	6023      	str	r3, [r4, #0]
 8010256:	2310      	movs	r3, #16
 8010258:	e7b0      	b.n	80101bc <_printf_i+0xfc>
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	f043 0320 	orr.w	r3, r3, #32
 8010260:	6023      	str	r3, [r4, #0]
 8010262:	2378      	movs	r3, #120	; 0x78
 8010264:	4828      	ldr	r0, [pc, #160]	; (8010308 <_printf_i+0x248>)
 8010266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801026a:	e7e3      	b.n	8010234 <_printf_i+0x174>
 801026c:	0659      	lsls	r1, r3, #25
 801026e:	bf48      	it	mi
 8010270:	b2b6      	uxthmi	r6, r6
 8010272:	e7e6      	b.n	8010242 <_printf_i+0x182>
 8010274:	4615      	mov	r5, r2
 8010276:	e7bb      	b.n	80101f0 <_printf_i+0x130>
 8010278:	682b      	ldr	r3, [r5, #0]
 801027a:	6826      	ldr	r6, [r4, #0]
 801027c:	6961      	ldr	r1, [r4, #20]
 801027e:	1d18      	adds	r0, r3, #4
 8010280:	6028      	str	r0, [r5, #0]
 8010282:	0635      	lsls	r5, r6, #24
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	d501      	bpl.n	801028c <_printf_i+0x1cc>
 8010288:	6019      	str	r1, [r3, #0]
 801028a:	e002      	b.n	8010292 <_printf_i+0x1d2>
 801028c:	0670      	lsls	r0, r6, #25
 801028e:	d5fb      	bpl.n	8010288 <_printf_i+0x1c8>
 8010290:	8019      	strh	r1, [r3, #0]
 8010292:	2300      	movs	r3, #0
 8010294:	6123      	str	r3, [r4, #16]
 8010296:	4615      	mov	r5, r2
 8010298:	e7ba      	b.n	8010210 <_printf_i+0x150>
 801029a:	682b      	ldr	r3, [r5, #0]
 801029c:	1d1a      	adds	r2, r3, #4
 801029e:	602a      	str	r2, [r5, #0]
 80102a0:	681d      	ldr	r5, [r3, #0]
 80102a2:	6862      	ldr	r2, [r4, #4]
 80102a4:	2100      	movs	r1, #0
 80102a6:	4628      	mov	r0, r5
 80102a8:	f7f0 f8ca 	bl	8000440 <memchr>
 80102ac:	b108      	cbz	r0, 80102b2 <_printf_i+0x1f2>
 80102ae:	1b40      	subs	r0, r0, r5
 80102b0:	6060      	str	r0, [r4, #4]
 80102b2:	6863      	ldr	r3, [r4, #4]
 80102b4:	6123      	str	r3, [r4, #16]
 80102b6:	2300      	movs	r3, #0
 80102b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102bc:	e7a8      	b.n	8010210 <_printf_i+0x150>
 80102be:	6923      	ldr	r3, [r4, #16]
 80102c0:	462a      	mov	r2, r5
 80102c2:	4649      	mov	r1, r9
 80102c4:	4640      	mov	r0, r8
 80102c6:	47d0      	blx	sl
 80102c8:	3001      	adds	r0, #1
 80102ca:	d0ab      	beq.n	8010224 <_printf_i+0x164>
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	079b      	lsls	r3, r3, #30
 80102d0:	d413      	bmi.n	80102fa <_printf_i+0x23a>
 80102d2:	68e0      	ldr	r0, [r4, #12]
 80102d4:	9b03      	ldr	r3, [sp, #12]
 80102d6:	4298      	cmp	r0, r3
 80102d8:	bfb8      	it	lt
 80102da:	4618      	movlt	r0, r3
 80102dc:	e7a4      	b.n	8010228 <_printf_i+0x168>
 80102de:	2301      	movs	r3, #1
 80102e0:	4632      	mov	r2, r6
 80102e2:	4649      	mov	r1, r9
 80102e4:	4640      	mov	r0, r8
 80102e6:	47d0      	blx	sl
 80102e8:	3001      	adds	r0, #1
 80102ea:	d09b      	beq.n	8010224 <_printf_i+0x164>
 80102ec:	3501      	adds	r5, #1
 80102ee:	68e3      	ldr	r3, [r4, #12]
 80102f0:	9903      	ldr	r1, [sp, #12]
 80102f2:	1a5b      	subs	r3, r3, r1
 80102f4:	42ab      	cmp	r3, r5
 80102f6:	dcf2      	bgt.n	80102de <_printf_i+0x21e>
 80102f8:	e7eb      	b.n	80102d2 <_printf_i+0x212>
 80102fa:	2500      	movs	r5, #0
 80102fc:	f104 0619 	add.w	r6, r4, #25
 8010300:	e7f5      	b.n	80102ee <_printf_i+0x22e>
 8010302:	bf00      	nop
 8010304:	0801741d 	.word	0x0801741d
 8010308:	0801742e 	.word	0x0801742e

0801030c <_putc_r>:
 801030c:	b570      	push	{r4, r5, r6, lr}
 801030e:	460d      	mov	r5, r1
 8010310:	4614      	mov	r4, r2
 8010312:	4606      	mov	r6, r0
 8010314:	b118      	cbz	r0, 801031e <_putc_r+0x12>
 8010316:	6983      	ldr	r3, [r0, #24]
 8010318:	b90b      	cbnz	r3, 801031e <_putc_r+0x12>
 801031a:	f7ff f9e9 	bl	800f6f0 <__sinit>
 801031e:	4b1c      	ldr	r3, [pc, #112]	; (8010390 <_putc_r+0x84>)
 8010320:	429c      	cmp	r4, r3
 8010322:	d124      	bne.n	801036e <_putc_r+0x62>
 8010324:	6874      	ldr	r4, [r6, #4]
 8010326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010328:	07d8      	lsls	r0, r3, #31
 801032a:	d405      	bmi.n	8010338 <_putc_r+0x2c>
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	0599      	lsls	r1, r3, #22
 8010330:	d402      	bmi.n	8010338 <_putc_r+0x2c>
 8010332:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010334:	f7ff fb5f 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 8010338:	68a3      	ldr	r3, [r4, #8]
 801033a:	3b01      	subs	r3, #1
 801033c:	2b00      	cmp	r3, #0
 801033e:	60a3      	str	r3, [r4, #8]
 8010340:	da05      	bge.n	801034e <_putc_r+0x42>
 8010342:	69a2      	ldr	r2, [r4, #24]
 8010344:	4293      	cmp	r3, r2
 8010346:	db1c      	blt.n	8010382 <_putc_r+0x76>
 8010348:	b2eb      	uxtb	r3, r5
 801034a:	2b0a      	cmp	r3, #10
 801034c:	d019      	beq.n	8010382 <_putc_r+0x76>
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	1c5a      	adds	r2, r3, #1
 8010352:	6022      	str	r2, [r4, #0]
 8010354:	701d      	strb	r5, [r3, #0]
 8010356:	b2ed      	uxtb	r5, r5
 8010358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801035a:	07da      	lsls	r2, r3, #31
 801035c:	d405      	bmi.n	801036a <_putc_r+0x5e>
 801035e:	89a3      	ldrh	r3, [r4, #12]
 8010360:	059b      	lsls	r3, r3, #22
 8010362:	d402      	bmi.n	801036a <_putc_r+0x5e>
 8010364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010366:	f7ff fb47 	bl	800f9f8 <__retarget_lock_release_recursive>
 801036a:	4628      	mov	r0, r5
 801036c:	bd70      	pop	{r4, r5, r6, pc}
 801036e:	4b09      	ldr	r3, [pc, #36]	; (8010394 <_putc_r+0x88>)
 8010370:	429c      	cmp	r4, r3
 8010372:	d101      	bne.n	8010378 <_putc_r+0x6c>
 8010374:	68b4      	ldr	r4, [r6, #8]
 8010376:	e7d6      	b.n	8010326 <_putc_r+0x1a>
 8010378:	4b07      	ldr	r3, [pc, #28]	; (8010398 <_putc_r+0x8c>)
 801037a:	429c      	cmp	r4, r3
 801037c:	bf08      	it	eq
 801037e:	68f4      	ldreq	r4, [r6, #12]
 8010380:	e7d1      	b.n	8010326 <_putc_r+0x1a>
 8010382:	4629      	mov	r1, r5
 8010384:	4622      	mov	r2, r4
 8010386:	4630      	mov	r0, r6
 8010388:	f001 fb5c 	bl	8011a44 <__swbuf_r>
 801038c:	4605      	mov	r5, r0
 801038e:	e7e3      	b.n	8010358 <_putc_r+0x4c>
 8010390:	080173c8 	.word	0x080173c8
 8010394:	080173e8 	.word	0x080173e8
 8010398:	080173a8 	.word	0x080173a8

0801039c <swapfunc>:
 801039c:	2b02      	cmp	r3, #2
 801039e:	b510      	push	{r4, lr}
 80103a0:	d00a      	beq.n	80103b8 <swapfunc+0x1c>
 80103a2:	0892      	lsrs	r2, r2, #2
 80103a4:	3a01      	subs	r2, #1
 80103a6:	6803      	ldr	r3, [r0, #0]
 80103a8:	680c      	ldr	r4, [r1, #0]
 80103aa:	f840 4b04 	str.w	r4, [r0], #4
 80103ae:	2a00      	cmp	r2, #0
 80103b0:	f841 3b04 	str.w	r3, [r1], #4
 80103b4:	dcf6      	bgt.n	80103a4 <swapfunc+0x8>
 80103b6:	bd10      	pop	{r4, pc}
 80103b8:	4402      	add	r2, r0
 80103ba:	780c      	ldrb	r4, [r1, #0]
 80103bc:	7803      	ldrb	r3, [r0, #0]
 80103be:	f800 4b01 	strb.w	r4, [r0], #1
 80103c2:	f801 3b01 	strb.w	r3, [r1], #1
 80103c6:	1a13      	subs	r3, r2, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	dcf6      	bgt.n	80103ba <swapfunc+0x1e>
 80103cc:	e7f3      	b.n	80103b6 <swapfunc+0x1a>

080103ce <med3.constprop.0>:
 80103ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d0:	460c      	mov	r4, r1
 80103d2:	4615      	mov	r5, r2
 80103d4:	4607      	mov	r7, r0
 80103d6:	461e      	mov	r6, r3
 80103d8:	4798      	blx	r3
 80103da:	2800      	cmp	r0, #0
 80103dc:	4629      	mov	r1, r5
 80103de:	4620      	mov	r0, r4
 80103e0:	da0a      	bge.n	80103f8 <med3.constprop.0+0x2a>
 80103e2:	47b0      	blx	r6
 80103e4:	2800      	cmp	r0, #0
 80103e6:	db05      	blt.n	80103f4 <med3.constprop.0+0x26>
 80103e8:	4629      	mov	r1, r5
 80103ea:	4638      	mov	r0, r7
 80103ec:	47b0      	blx	r6
 80103ee:	2800      	cmp	r0, #0
 80103f0:	db0a      	blt.n	8010408 <med3.constprop.0+0x3a>
 80103f2:	463c      	mov	r4, r7
 80103f4:	4620      	mov	r0, r4
 80103f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f8:	47b0      	blx	r6
 80103fa:	2800      	cmp	r0, #0
 80103fc:	dcfa      	bgt.n	80103f4 <med3.constprop.0+0x26>
 80103fe:	4629      	mov	r1, r5
 8010400:	4638      	mov	r0, r7
 8010402:	47b0      	blx	r6
 8010404:	2800      	cmp	r0, #0
 8010406:	dbf4      	blt.n	80103f2 <med3.constprop.0+0x24>
 8010408:	462c      	mov	r4, r5
 801040a:	e7f3      	b.n	80103f4 <med3.constprop.0+0x26>

0801040c <qsort>:
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	469a      	mov	sl, r3
 8010412:	ea40 0302 	orr.w	r3, r0, r2
 8010416:	079b      	lsls	r3, r3, #30
 8010418:	b097      	sub	sp, #92	; 0x5c
 801041a:	4606      	mov	r6, r0
 801041c:	4614      	mov	r4, r2
 801041e:	d11a      	bne.n	8010456 <qsort+0x4a>
 8010420:	f1b2 0804 	subs.w	r8, r2, #4
 8010424:	bf18      	it	ne
 8010426:	f04f 0801 	movne.w	r8, #1
 801042a:	2300      	movs	r3, #0
 801042c:	9302      	str	r3, [sp, #8]
 801042e:	1933      	adds	r3, r6, r4
 8010430:	fb04 f701 	mul.w	r7, r4, r1
 8010434:	9301      	str	r3, [sp, #4]
 8010436:	2906      	cmp	r1, #6
 8010438:	eb06 0307 	add.w	r3, r6, r7
 801043c:	9303      	str	r3, [sp, #12]
 801043e:	d82a      	bhi.n	8010496 <qsort+0x8a>
 8010440:	9b01      	ldr	r3, [sp, #4]
 8010442:	9a03      	ldr	r2, [sp, #12]
 8010444:	4293      	cmp	r3, r2
 8010446:	d310      	bcc.n	801046a <qsort+0x5e>
 8010448:	9b02      	ldr	r3, [sp, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f040 811e 	bne.w	801068c <qsort+0x280>
 8010450:	b017      	add	sp, #92	; 0x5c
 8010452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010456:	f04f 0802 	mov.w	r8, #2
 801045a:	e7e6      	b.n	801042a <qsort+0x1e>
 801045c:	4643      	mov	r3, r8
 801045e:	4622      	mov	r2, r4
 8010460:	4639      	mov	r1, r7
 8010462:	4628      	mov	r0, r5
 8010464:	f7ff ff9a 	bl	801039c <swapfunc>
 8010468:	e00e      	b.n	8010488 <qsort+0x7c>
 801046a:	9d01      	ldr	r5, [sp, #4]
 801046c:	e00d      	b.n	801048a <qsort+0x7e>
 801046e:	1b2f      	subs	r7, r5, r4
 8010470:	4629      	mov	r1, r5
 8010472:	4638      	mov	r0, r7
 8010474:	47d0      	blx	sl
 8010476:	2800      	cmp	r0, #0
 8010478:	dd09      	ble.n	801048e <qsort+0x82>
 801047a:	f1b8 0f00 	cmp.w	r8, #0
 801047e:	d1ed      	bne.n	801045c <qsort+0x50>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	683a      	ldr	r2, [r7, #0]
 8010484:	602a      	str	r2, [r5, #0]
 8010486:	603b      	str	r3, [r7, #0]
 8010488:	463d      	mov	r5, r7
 801048a:	42ae      	cmp	r6, r5
 801048c:	d3ef      	bcc.n	801046e <qsort+0x62>
 801048e:	9b01      	ldr	r3, [sp, #4]
 8010490:	4423      	add	r3, r4
 8010492:	9301      	str	r3, [sp, #4]
 8010494:	e7d4      	b.n	8010440 <qsort+0x34>
 8010496:	ea4f 0951 	mov.w	r9, r1, lsr #1
 801049a:	1b3f      	subs	r7, r7, r4
 801049c:	2907      	cmp	r1, #7
 801049e:	fb04 6909 	mla	r9, r4, r9, r6
 80104a2:	4437      	add	r7, r6
 80104a4:	d022      	beq.n	80104ec <qsort+0xe0>
 80104a6:	2928      	cmp	r1, #40	; 0x28
 80104a8:	d945      	bls.n	8010536 <qsort+0x12a>
 80104aa:	08c9      	lsrs	r1, r1, #3
 80104ac:	fb04 f501 	mul.w	r5, r4, r1
 80104b0:	4653      	mov	r3, sl
 80104b2:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80104b6:	1971      	adds	r1, r6, r5
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7ff ff88 	bl	80103ce <med3.constprop.0>
 80104be:	4649      	mov	r1, r9
 80104c0:	eb09 0205 	add.w	r2, r9, r5
 80104c4:	4653      	mov	r3, sl
 80104c6:	4683      	mov	fp, r0
 80104c8:	1b48      	subs	r0, r1, r5
 80104ca:	f7ff ff80 	bl	80103ce <med3.constprop.0>
 80104ce:	463a      	mov	r2, r7
 80104d0:	4681      	mov	r9, r0
 80104d2:	4653      	mov	r3, sl
 80104d4:	1b79      	subs	r1, r7, r5
 80104d6:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80104da:	f7ff ff78 	bl	80103ce <med3.constprop.0>
 80104de:	4602      	mov	r2, r0
 80104e0:	4649      	mov	r1, r9
 80104e2:	4653      	mov	r3, sl
 80104e4:	4658      	mov	r0, fp
 80104e6:	f7ff ff72 	bl	80103ce <med3.constprop.0>
 80104ea:	4681      	mov	r9, r0
 80104ec:	f1b8 0f00 	cmp.w	r8, #0
 80104f0:	d124      	bne.n	801053c <qsort+0x130>
 80104f2:	6833      	ldr	r3, [r6, #0]
 80104f4:	f8d9 2000 	ldr.w	r2, [r9]
 80104f8:	6032      	str	r2, [r6, #0]
 80104fa:	f8c9 3000 	str.w	r3, [r9]
 80104fe:	eb06 0b04 	add.w	fp, r6, r4
 8010502:	46b9      	mov	r9, r7
 8010504:	465d      	mov	r5, fp
 8010506:	2300      	movs	r3, #0
 8010508:	45bb      	cmp	fp, r7
 801050a:	d835      	bhi.n	8010578 <qsort+0x16c>
 801050c:	4631      	mov	r1, r6
 801050e:	4658      	mov	r0, fp
 8010510:	9304      	str	r3, [sp, #16]
 8010512:	47d0      	blx	sl
 8010514:	2800      	cmp	r0, #0
 8010516:	9b04      	ldr	r3, [sp, #16]
 8010518:	dc3e      	bgt.n	8010598 <qsort+0x18c>
 801051a:	d10a      	bne.n	8010532 <qsort+0x126>
 801051c:	f1b8 0f00 	cmp.w	r8, #0
 8010520:	d113      	bne.n	801054a <qsort+0x13e>
 8010522:	682b      	ldr	r3, [r5, #0]
 8010524:	f8db 2000 	ldr.w	r2, [fp]
 8010528:	602a      	str	r2, [r5, #0]
 801052a:	f8cb 3000 	str.w	r3, [fp]
 801052e:	4425      	add	r5, r4
 8010530:	2301      	movs	r3, #1
 8010532:	44a3      	add	fp, r4
 8010534:	e7e8      	b.n	8010508 <qsort+0xfc>
 8010536:	463a      	mov	r2, r7
 8010538:	46b3      	mov	fp, r6
 801053a:	e7d1      	b.n	80104e0 <qsort+0xd4>
 801053c:	4643      	mov	r3, r8
 801053e:	4622      	mov	r2, r4
 8010540:	4649      	mov	r1, r9
 8010542:	4630      	mov	r0, r6
 8010544:	f7ff ff2a 	bl	801039c <swapfunc>
 8010548:	e7d9      	b.n	80104fe <qsort+0xf2>
 801054a:	4643      	mov	r3, r8
 801054c:	4622      	mov	r2, r4
 801054e:	4659      	mov	r1, fp
 8010550:	4628      	mov	r0, r5
 8010552:	f7ff ff23 	bl	801039c <swapfunc>
 8010556:	e7ea      	b.n	801052e <qsort+0x122>
 8010558:	d10b      	bne.n	8010572 <qsort+0x166>
 801055a:	f1b8 0f00 	cmp.w	r8, #0
 801055e:	d114      	bne.n	801058a <qsort+0x17e>
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	f8d9 2000 	ldr.w	r2, [r9]
 8010566:	603a      	str	r2, [r7, #0]
 8010568:	f8c9 3000 	str.w	r3, [r9]
 801056c:	eba9 0904 	sub.w	r9, r9, r4
 8010570:	2301      	movs	r3, #1
 8010572:	9f04      	ldr	r7, [sp, #16]
 8010574:	45bb      	cmp	fp, r7
 8010576:	d90f      	bls.n	8010598 <qsort+0x18c>
 8010578:	2b00      	cmp	r3, #0
 801057a:	d143      	bne.n	8010604 <qsort+0x1f8>
 801057c:	9b01      	ldr	r3, [sp, #4]
 801057e:	9a03      	ldr	r2, [sp, #12]
 8010580:	4293      	cmp	r3, r2
 8010582:	f4bf af61 	bcs.w	8010448 <qsort+0x3c>
 8010586:	9d01      	ldr	r5, [sp, #4]
 8010588:	e036      	b.n	80105f8 <qsort+0x1ec>
 801058a:	4643      	mov	r3, r8
 801058c:	4622      	mov	r2, r4
 801058e:	4649      	mov	r1, r9
 8010590:	4638      	mov	r0, r7
 8010592:	f7ff ff03 	bl	801039c <swapfunc>
 8010596:	e7e9      	b.n	801056c <qsort+0x160>
 8010598:	4631      	mov	r1, r6
 801059a:	4638      	mov	r0, r7
 801059c:	9305      	str	r3, [sp, #20]
 801059e:	47d0      	blx	sl
 80105a0:	1b3b      	subs	r3, r7, r4
 80105a2:	2800      	cmp	r0, #0
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	9b05      	ldr	r3, [sp, #20]
 80105a8:	dad6      	bge.n	8010558 <qsort+0x14c>
 80105aa:	f1b8 0f00 	cmp.w	r8, #0
 80105ae:	d006      	beq.n	80105be <qsort+0x1b2>
 80105b0:	4643      	mov	r3, r8
 80105b2:	4622      	mov	r2, r4
 80105b4:	4639      	mov	r1, r7
 80105b6:	4658      	mov	r0, fp
 80105b8:	f7ff fef0 	bl	801039c <swapfunc>
 80105bc:	e005      	b.n	80105ca <qsort+0x1be>
 80105be:	f8db 3000 	ldr.w	r3, [fp]
 80105c2:	683a      	ldr	r2, [r7, #0]
 80105c4:	f8cb 2000 	str.w	r2, [fp]
 80105c8:	603b      	str	r3, [r7, #0]
 80105ca:	9f04      	ldr	r7, [sp, #16]
 80105cc:	e7b0      	b.n	8010530 <qsort+0x124>
 80105ce:	4643      	mov	r3, r8
 80105d0:	4622      	mov	r2, r4
 80105d2:	4639      	mov	r1, r7
 80105d4:	4628      	mov	r0, r5
 80105d6:	f7ff fee1 	bl	801039c <swapfunc>
 80105da:	e00c      	b.n	80105f6 <qsort+0x1ea>
 80105dc:	1b2f      	subs	r7, r5, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	4638      	mov	r0, r7
 80105e2:	47d0      	blx	sl
 80105e4:	2800      	cmp	r0, #0
 80105e6:	dd09      	ble.n	80105fc <qsort+0x1f0>
 80105e8:	f1b8 0f00 	cmp.w	r8, #0
 80105ec:	d1ef      	bne.n	80105ce <qsort+0x1c2>
 80105ee:	682b      	ldr	r3, [r5, #0]
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	602a      	str	r2, [r5, #0]
 80105f4:	603b      	str	r3, [r7, #0]
 80105f6:	463d      	mov	r5, r7
 80105f8:	42ae      	cmp	r6, r5
 80105fa:	d3ef      	bcc.n	80105dc <qsort+0x1d0>
 80105fc:	9b01      	ldr	r3, [sp, #4]
 80105fe:	4423      	add	r3, r4
 8010600:	9301      	str	r3, [sp, #4]
 8010602:	e7bb      	b.n	801057c <qsort+0x170>
 8010604:	ebab 0305 	sub.w	r3, fp, r5
 8010608:	1baa      	subs	r2, r5, r6
 801060a:	429a      	cmp	r2, r3
 801060c:	bfa8      	it	ge
 801060e:	461a      	movge	r2, r3
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	b12a      	cbz	r2, 8010620 <qsort+0x214>
 8010614:	4643      	mov	r3, r8
 8010616:	ebab 0102 	sub.w	r1, fp, r2
 801061a:	4630      	mov	r0, r6
 801061c:	f7ff febe 	bl	801039c <swapfunc>
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	eba3 0209 	sub.w	r2, r3, r9
 8010626:	eba9 0707 	sub.w	r7, r9, r7
 801062a:	1b12      	subs	r2, r2, r4
 801062c:	42ba      	cmp	r2, r7
 801062e:	bf28      	it	cs
 8010630:	463a      	movcs	r2, r7
 8010632:	b12a      	cbz	r2, 8010640 <qsort+0x234>
 8010634:	9903      	ldr	r1, [sp, #12]
 8010636:	4643      	mov	r3, r8
 8010638:	1a89      	subs	r1, r1, r2
 801063a:	4658      	mov	r0, fp
 801063c:	f7ff feae 	bl	801039c <swapfunc>
 8010640:	9d01      	ldr	r5, [sp, #4]
 8010642:	9b03      	ldr	r3, [sp, #12]
 8010644:	42af      	cmp	r7, r5
 8010646:	eba3 0007 	sub.w	r0, r3, r7
 801064a:	d904      	bls.n	8010656 <qsort+0x24a>
 801064c:	4633      	mov	r3, r6
 801064e:	463d      	mov	r5, r7
 8010650:	9f01      	ldr	r7, [sp, #4]
 8010652:	4606      	mov	r6, r0
 8010654:	4618      	mov	r0, r3
 8010656:	42a7      	cmp	r7, r4
 8010658:	d921      	bls.n	801069e <qsort+0x292>
 801065a:	fbb7 f1f4 	udiv	r1, r7, r4
 801065e:	9b02      	ldr	r3, [sp, #8]
 8010660:	2b07      	cmp	r3, #7
 8010662:	d80d      	bhi.n	8010680 <qsort+0x274>
 8010664:	fbb5 f5f4 	udiv	r5, r5, r4
 8010668:	aa16      	add	r2, sp, #88	; 0x58
 801066a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801066e:	f843 6c40 	str.w	r6, [r3, #-64]
 8010672:	f843 5c3c 	str.w	r5, [r3, #-60]
 8010676:	9b02      	ldr	r3, [sp, #8]
 8010678:	3301      	adds	r3, #1
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	4606      	mov	r6, r0
 801067e:	e6d6      	b.n	801042e <qsort+0x22>
 8010680:	4653      	mov	r3, sl
 8010682:	4622      	mov	r2, r4
 8010684:	f7ff fec2 	bl	801040c <qsort>
 8010688:	42a5      	cmp	r5, r4
 801068a:	d80b      	bhi.n	80106a4 <qsort+0x298>
 801068c:	9b02      	ldr	r3, [sp, #8]
 801068e:	aa16      	add	r2, sp, #88	; 0x58
 8010690:	3b01      	subs	r3, #1
 8010692:	9302      	str	r3, [sp, #8]
 8010694:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010698:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 801069c:	e7ee      	b.n	801067c <qsort+0x270>
 801069e:	42a5      	cmp	r5, r4
 80106a0:	f67f aed2 	bls.w	8010448 <qsort+0x3c>
 80106a4:	fbb5 f1f4 	udiv	r1, r5, r4
 80106a8:	4630      	mov	r0, r6
 80106aa:	e7e7      	b.n	801067c <qsort+0x270>

080106ac <realloc>:
 80106ac:	4b02      	ldr	r3, [pc, #8]	; (80106b8 <realloc+0xc>)
 80106ae:	460a      	mov	r2, r1
 80106b0:	4601      	mov	r1, r0
 80106b2:	6818      	ldr	r0, [r3, #0]
 80106b4:	f002 bb57 	b.w	8012d66 <_realloc_r>
 80106b8:	20000074 	.word	0x20000074

080106bc <_sbrk_r>:
 80106bc:	b538      	push	{r3, r4, r5, lr}
 80106be:	4d06      	ldr	r5, [pc, #24]	; (80106d8 <_sbrk_r+0x1c>)
 80106c0:	2300      	movs	r3, #0
 80106c2:	4604      	mov	r4, r0
 80106c4:	4608      	mov	r0, r1
 80106c6:	602b      	str	r3, [r5, #0]
 80106c8:	f7f1 f85a 	bl	8001780 <_sbrk>
 80106cc:	1c43      	adds	r3, r0, #1
 80106ce:	d102      	bne.n	80106d6 <_sbrk_r+0x1a>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	b103      	cbz	r3, 80106d6 <_sbrk_r+0x1a>
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	20003be4 	.word	0x20003be4

080106dc <siprintf>:
 80106dc:	b40e      	push	{r1, r2, r3}
 80106de:	b500      	push	{lr}
 80106e0:	b09c      	sub	sp, #112	; 0x70
 80106e2:	ab1d      	add	r3, sp, #116	; 0x74
 80106e4:	9002      	str	r0, [sp, #8]
 80106e6:	9006      	str	r0, [sp, #24]
 80106e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106ec:	4809      	ldr	r0, [pc, #36]	; (8010714 <siprintf+0x38>)
 80106ee:	9107      	str	r1, [sp, #28]
 80106f0:	9104      	str	r1, [sp, #16]
 80106f2:	4909      	ldr	r1, [pc, #36]	; (8010718 <siprintf+0x3c>)
 80106f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80106f8:	9105      	str	r1, [sp, #20]
 80106fa:	6800      	ldr	r0, [r0, #0]
 80106fc:	9301      	str	r3, [sp, #4]
 80106fe:	a902      	add	r1, sp, #8
 8010700:	f002 fbbc 	bl	8012e7c <_svfiprintf_r>
 8010704:	9b02      	ldr	r3, [sp, #8]
 8010706:	2200      	movs	r2, #0
 8010708:	701a      	strb	r2, [r3, #0]
 801070a:	b01c      	add	sp, #112	; 0x70
 801070c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010710:	b003      	add	sp, #12
 8010712:	4770      	bx	lr
 8010714:	20000074 	.word	0x20000074
 8010718:	ffff0208 	.word	0xffff0208

0801071c <siscanf>:
 801071c:	b40e      	push	{r1, r2, r3}
 801071e:	b510      	push	{r4, lr}
 8010720:	b09f      	sub	sp, #124	; 0x7c
 8010722:	ac21      	add	r4, sp, #132	; 0x84
 8010724:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010728:	f854 2b04 	ldr.w	r2, [r4], #4
 801072c:	9201      	str	r2, [sp, #4]
 801072e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010732:	9004      	str	r0, [sp, #16]
 8010734:	9008      	str	r0, [sp, #32]
 8010736:	f7ef fedd 	bl	80004f4 <strlen>
 801073a:	4b0c      	ldr	r3, [pc, #48]	; (801076c <siscanf+0x50>)
 801073c:	9005      	str	r0, [sp, #20]
 801073e:	9009      	str	r0, [sp, #36]	; 0x24
 8010740:	930d      	str	r3, [sp, #52]	; 0x34
 8010742:	480b      	ldr	r0, [pc, #44]	; (8010770 <siscanf+0x54>)
 8010744:	9a01      	ldr	r2, [sp, #4]
 8010746:	6800      	ldr	r0, [r0, #0]
 8010748:	9403      	str	r4, [sp, #12]
 801074a:	2300      	movs	r3, #0
 801074c:	9311      	str	r3, [sp, #68]	; 0x44
 801074e:	9316      	str	r3, [sp, #88]	; 0x58
 8010750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010754:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010758:	a904      	add	r1, sp, #16
 801075a:	4623      	mov	r3, r4
 801075c:	f002 fce8 	bl	8013130 <__ssvfiscanf_r>
 8010760:	b01f      	add	sp, #124	; 0x7c
 8010762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010766:	b003      	add	sp, #12
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	08010797 	.word	0x08010797
 8010770:	20000074 	.word	0x20000074

08010774 <__sread>:
 8010774:	b510      	push	{r4, lr}
 8010776:	460c      	mov	r4, r1
 8010778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801077c:	f002 ffa2 	bl	80136c4 <_read_r>
 8010780:	2800      	cmp	r0, #0
 8010782:	bfab      	itete	ge
 8010784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010786:	89a3      	ldrhlt	r3, [r4, #12]
 8010788:	181b      	addge	r3, r3, r0
 801078a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801078e:	bfac      	ite	ge
 8010790:	6563      	strge	r3, [r4, #84]	; 0x54
 8010792:	81a3      	strhlt	r3, [r4, #12]
 8010794:	bd10      	pop	{r4, pc}

08010796 <__seofread>:
 8010796:	2000      	movs	r0, #0
 8010798:	4770      	bx	lr

0801079a <__swrite>:
 801079a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079e:	461f      	mov	r7, r3
 80107a0:	898b      	ldrh	r3, [r1, #12]
 80107a2:	05db      	lsls	r3, r3, #23
 80107a4:	4605      	mov	r5, r0
 80107a6:	460c      	mov	r4, r1
 80107a8:	4616      	mov	r6, r2
 80107aa:	d505      	bpl.n	80107b8 <__swrite+0x1e>
 80107ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b0:	2302      	movs	r3, #2
 80107b2:	2200      	movs	r2, #0
 80107b4:	f001 fdcc 	bl	8012350 <_lseek_r>
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	4632      	mov	r2, r6
 80107c6:	463b      	mov	r3, r7
 80107c8:	4628      	mov	r0, r5
 80107ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ce:	f001 b98b 	b.w	8011ae8 <_write_r>

080107d2 <__sseek>:
 80107d2:	b510      	push	{r4, lr}
 80107d4:	460c      	mov	r4, r1
 80107d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107da:	f001 fdb9 	bl	8012350 <_lseek_r>
 80107de:	1c43      	adds	r3, r0, #1
 80107e0:	89a3      	ldrh	r3, [r4, #12]
 80107e2:	bf15      	itete	ne
 80107e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80107e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107ee:	81a3      	strheq	r3, [r4, #12]
 80107f0:	bf18      	it	ne
 80107f2:	81a3      	strhne	r3, [r4, #12]
 80107f4:	bd10      	pop	{r4, pc}

080107f6 <__sclose>:
 80107f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107fa:	f001 b9f5 	b.w	8011be8 <_close_r>

080107fe <strchr>:
 80107fe:	b2c9      	uxtb	r1, r1
 8010800:	4603      	mov	r3, r0
 8010802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010806:	b11a      	cbz	r2, 8010810 <strchr+0x12>
 8010808:	428a      	cmp	r2, r1
 801080a:	d1f9      	bne.n	8010800 <strchr+0x2>
 801080c:	4618      	mov	r0, r3
 801080e:	4770      	bx	lr
 8010810:	2900      	cmp	r1, #0
 8010812:	bf18      	it	ne
 8010814:	2300      	movne	r3, #0
 8010816:	e7f9      	b.n	801080c <strchr+0xe>

08010818 <strcspn>:
 8010818:	b570      	push	{r4, r5, r6, lr}
 801081a:	4603      	mov	r3, r0
 801081c:	461e      	mov	r6, r3
 801081e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010822:	b144      	cbz	r4, 8010836 <strcspn+0x1e>
 8010824:	1e4a      	subs	r2, r1, #1
 8010826:	e001      	b.n	801082c <strcspn+0x14>
 8010828:	42a5      	cmp	r5, r4
 801082a:	d004      	beq.n	8010836 <strcspn+0x1e>
 801082c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010830:	2d00      	cmp	r5, #0
 8010832:	d1f9      	bne.n	8010828 <strcspn+0x10>
 8010834:	e7f2      	b.n	801081c <strcspn+0x4>
 8010836:	1a30      	subs	r0, r6, r0
 8010838:	bd70      	pop	{r4, r5, r6, pc}
	...

0801083c <_strerror_r>:
 801083c:	b510      	push	{r4, lr}
 801083e:	4604      	mov	r4, r0
 8010840:	4608      	mov	r0, r1
 8010842:	4611      	mov	r1, r2
 8010844:	288e      	cmp	r0, #142	; 0x8e
 8010846:	f200 8130 	bhi.w	8010aaa <_strerror_r+0x26e>
 801084a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801084e:	0139      	.short	0x0139
 8010850:	0092008f 	.word	0x0092008f
 8010854:	00960094 	.word	0x00960094
 8010858:	009a0098 	.word	0x009a0098
 801085c:	009e009c 	.word	0x009e009c
 8010860:	00a400a2 	.word	0x00a400a2
 8010864:	00aa00a8 	.word	0x00aa00a8
 8010868:	00ae00ac 	.word	0x00ae00ac
 801086c:	00b0012e 	.word	0x00b0012e
 8010870:	00b400b2 	.word	0x00b400b2
 8010874:	00b800b6 	.word	0x00b800b6
 8010878:	00c000be 	.word	0x00c000be
 801087c:	00c800c6 	.word	0x00c800c6
 8010880:	00cc00ca 	.word	0x00cc00ca
 8010884:	00d200ce 	.word	0x00d200ce
 8010888:	00d800d6 	.word	0x00d800d6
 801088c:	00dc00da 	.word	0x00dc00da
 8010890:	00e000de 	.word	0x00e000de
 8010894:	00e400e2 	.word	0x00e400e2
 8010898:	012e012e 	.word	0x012e012e
 801089c:	012e012e 	.word	0x012e012e
 80108a0:	012e012e 	.word	0x012e012e
 80108a4:	012e012e 	.word	0x012e012e
 80108a8:	00ec00e8 	.word	0x00ec00e8
 80108ac:	012e012e 	.word	0x012e012e
 80108b0:	012e012e 	.word	0x012e012e
 80108b4:	012e012e 	.word	0x012e012e
 80108b8:	012e012e 	.word	0x012e012e
 80108bc:	012e012e 	.word	0x012e012e
 80108c0:	012e012e 	.word	0x012e012e
 80108c4:	00ee012e 	.word	0x00ee012e
 80108c8:	00f00108 	.word	0x00f00108
 80108cc:	012e00f2 	.word	0x012e00f2
 80108d0:	012e012e 	.word	0x012e012e
 80108d4:	012e00f4 	.word	0x012e00f4
 80108d8:	012e012e 	.word	0x012e012e
 80108dc:	012e00f6 	.word	0x012e00f6
 80108e0:	00fa012e 	.word	0x00fa012e
 80108e4:	012e012e 	.word	0x012e012e
 80108e8:	012e00fc 	.word	0x012e00fc
 80108ec:	012e012e 	.word	0x012e012e
 80108f0:	012e012e 	.word	0x012e012e
 80108f4:	012e012e 	.word	0x012e012e
 80108f8:	012e012e 	.word	0x012e012e
 80108fc:	00fe012e 	.word	0x00fe012e
 8010900:	0100012e 	.word	0x0100012e
 8010904:	01040102 	.word	0x01040102
 8010908:	012e012e 	.word	0x012e012e
 801090c:	012e0126 	.word	0x012e0126
 8010910:	012e012e 	.word	0x012e012e
 8010914:	012e012e 	.word	0x012e012e
 8010918:	012e012e 	.word	0x012e012e
 801091c:	0114012e 	.word	0x0114012e
 8010920:	010a0106 	.word	0x010a0106
 8010924:	010e010c 	.word	0x010e010c
 8010928:	012e0110 	.word	0x012e0110
 801092c:	01160112 	.word	0x01160112
 8010930:	00ea011a 	.word	0x00ea011a
 8010934:	012c00c2 	.word	0x012c00c2
 8010938:	00d000ba 	.word	0x00d000ba
 801093c:	00a000bc 	.word	0x00a000bc
 8010940:	012a00a6 	.word	0x012a00a6
 8010944:	012e00f8 	.word	0x012e00f8
 8010948:	00c40118 	.word	0x00c40118
 801094c:	011c011e 	.word	0x011c011e
 8010950:	012e012e 	.word	0x012e012e
 8010954:	012e012e 	.word	0x012e012e
 8010958:	00d4012e 	.word	0x00d4012e
 801095c:	012e012e 	.word	0x012e012e
 8010960:	00e6012e 	.word	0x00e6012e
 8010964:	01200128 	.word	0x01200128
 8010968:	01240122 	.word	0x01240122
 801096c:	4b55      	ldr	r3, [pc, #340]	; (8010ac4 <_strerror_r+0x288>)
 801096e:	4618      	mov	r0, r3
 8010970:	bd10      	pop	{r4, pc}
 8010972:	4b55      	ldr	r3, [pc, #340]	; (8010ac8 <_strerror_r+0x28c>)
 8010974:	e7fb      	b.n	801096e <_strerror_r+0x132>
 8010976:	4b55      	ldr	r3, [pc, #340]	; (8010acc <_strerror_r+0x290>)
 8010978:	e7f9      	b.n	801096e <_strerror_r+0x132>
 801097a:	4b55      	ldr	r3, [pc, #340]	; (8010ad0 <_strerror_r+0x294>)
 801097c:	e7f7      	b.n	801096e <_strerror_r+0x132>
 801097e:	4b55      	ldr	r3, [pc, #340]	; (8010ad4 <_strerror_r+0x298>)
 8010980:	e7f5      	b.n	801096e <_strerror_r+0x132>
 8010982:	4b55      	ldr	r3, [pc, #340]	; (8010ad8 <_strerror_r+0x29c>)
 8010984:	e7f3      	b.n	801096e <_strerror_r+0x132>
 8010986:	4b55      	ldr	r3, [pc, #340]	; (8010adc <_strerror_r+0x2a0>)
 8010988:	e7f1      	b.n	801096e <_strerror_r+0x132>
 801098a:	4b55      	ldr	r3, [pc, #340]	; (8010ae0 <_strerror_r+0x2a4>)
 801098c:	e7ef      	b.n	801096e <_strerror_r+0x132>
 801098e:	4b55      	ldr	r3, [pc, #340]	; (8010ae4 <_strerror_r+0x2a8>)
 8010990:	e7ed      	b.n	801096e <_strerror_r+0x132>
 8010992:	4b55      	ldr	r3, [pc, #340]	; (8010ae8 <_strerror_r+0x2ac>)
 8010994:	e7eb      	b.n	801096e <_strerror_r+0x132>
 8010996:	4b55      	ldr	r3, [pc, #340]	; (8010aec <_strerror_r+0x2b0>)
 8010998:	e7e9      	b.n	801096e <_strerror_r+0x132>
 801099a:	4b55      	ldr	r3, [pc, #340]	; (8010af0 <_strerror_r+0x2b4>)
 801099c:	e7e7      	b.n	801096e <_strerror_r+0x132>
 801099e:	4b55      	ldr	r3, [pc, #340]	; (8010af4 <_strerror_r+0x2b8>)
 80109a0:	e7e5      	b.n	801096e <_strerror_r+0x132>
 80109a2:	4b55      	ldr	r3, [pc, #340]	; (8010af8 <_strerror_r+0x2bc>)
 80109a4:	e7e3      	b.n	801096e <_strerror_r+0x132>
 80109a6:	4b55      	ldr	r3, [pc, #340]	; (8010afc <_strerror_r+0x2c0>)
 80109a8:	e7e1      	b.n	801096e <_strerror_r+0x132>
 80109aa:	4b55      	ldr	r3, [pc, #340]	; (8010b00 <_strerror_r+0x2c4>)
 80109ac:	e7df      	b.n	801096e <_strerror_r+0x132>
 80109ae:	4b55      	ldr	r3, [pc, #340]	; (8010b04 <_strerror_r+0x2c8>)
 80109b0:	e7dd      	b.n	801096e <_strerror_r+0x132>
 80109b2:	4b55      	ldr	r3, [pc, #340]	; (8010b08 <_strerror_r+0x2cc>)
 80109b4:	e7db      	b.n	801096e <_strerror_r+0x132>
 80109b6:	4b55      	ldr	r3, [pc, #340]	; (8010b0c <_strerror_r+0x2d0>)
 80109b8:	e7d9      	b.n	801096e <_strerror_r+0x132>
 80109ba:	4b55      	ldr	r3, [pc, #340]	; (8010b10 <_strerror_r+0x2d4>)
 80109bc:	e7d7      	b.n	801096e <_strerror_r+0x132>
 80109be:	4b55      	ldr	r3, [pc, #340]	; (8010b14 <_strerror_r+0x2d8>)
 80109c0:	e7d5      	b.n	801096e <_strerror_r+0x132>
 80109c2:	4b55      	ldr	r3, [pc, #340]	; (8010b18 <_strerror_r+0x2dc>)
 80109c4:	e7d3      	b.n	801096e <_strerror_r+0x132>
 80109c6:	4b55      	ldr	r3, [pc, #340]	; (8010b1c <_strerror_r+0x2e0>)
 80109c8:	e7d1      	b.n	801096e <_strerror_r+0x132>
 80109ca:	4b55      	ldr	r3, [pc, #340]	; (8010b20 <_strerror_r+0x2e4>)
 80109cc:	e7cf      	b.n	801096e <_strerror_r+0x132>
 80109ce:	4b55      	ldr	r3, [pc, #340]	; (8010b24 <_strerror_r+0x2e8>)
 80109d0:	e7cd      	b.n	801096e <_strerror_r+0x132>
 80109d2:	4b55      	ldr	r3, [pc, #340]	; (8010b28 <_strerror_r+0x2ec>)
 80109d4:	e7cb      	b.n	801096e <_strerror_r+0x132>
 80109d6:	4b55      	ldr	r3, [pc, #340]	; (8010b2c <_strerror_r+0x2f0>)
 80109d8:	e7c9      	b.n	801096e <_strerror_r+0x132>
 80109da:	4b55      	ldr	r3, [pc, #340]	; (8010b30 <_strerror_r+0x2f4>)
 80109dc:	e7c7      	b.n	801096e <_strerror_r+0x132>
 80109de:	4b55      	ldr	r3, [pc, #340]	; (8010b34 <_strerror_r+0x2f8>)
 80109e0:	e7c5      	b.n	801096e <_strerror_r+0x132>
 80109e2:	4b55      	ldr	r3, [pc, #340]	; (8010b38 <_strerror_r+0x2fc>)
 80109e4:	e7c3      	b.n	801096e <_strerror_r+0x132>
 80109e6:	4b55      	ldr	r3, [pc, #340]	; (8010b3c <_strerror_r+0x300>)
 80109e8:	e7c1      	b.n	801096e <_strerror_r+0x132>
 80109ea:	4b55      	ldr	r3, [pc, #340]	; (8010b40 <_strerror_r+0x304>)
 80109ec:	e7bf      	b.n	801096e <_strerror_r+0x132>
 80109ee:	4b55      	ldr	r3, [pc, #340]	; (8010b44 <_strerror_r+0x308>)
 80109f0:	e7bd      	b.n	801096e <_strerror_r+0x132>
 80109f2:	4b55      	ldr	r3, [pc, #340]	; (8010b48 <_strerror_r+0x30c>)
 80109f4:	e7bb      	b.n	801096e <_strerror_r+0x132>
 80109f6:	4b55      	ldr	r3, [pc, #340]	; (8010b4c <_strerror_r+0x310>)
 80109f8:	e7b9      	b.n	801096e <_strerror_r+0x132>
 80109fa:	4b55      	ldr	r3, [pc, #340]	; (8010b50 <_strerror_r+0x314>)
 80109fc:	e7b7      	b.n	801096e <_strerror_r+0x132>
 80109fe:	4b55      	ldr	r3, [pc, #340]	; (8010b54 <_strerror_r+0x318>)
 8010a00:	e7b5      	b.n	801096e <_strerror_r+0x132>
 8010a02:	4b55      	ldr	r3, [pc, #340]	; (8010b58 <_strerror_r+0x31c>)
 8010a04:	e7b3      	b.n	801096e <_strerror_r+0x132>
 8010a06:	4b55      	ldr	r3, [pc, #340]	; (8010b5c <_strerror_r+0x320>)
 8010a08:	e7b1      	b.n	801096e <_strerror_r+0x132>
 8010a0a:	4b55      	ldr	r3, [pc, #340]	; (8010b60 <_strerror_r+0x324>)
 8010a0c:	e7af      	b.n	801096e <_strerror_r+0x132>
 8010a0e:	4b55      	ldr	r3, [pc, #340]	; (8010b64 <_strerror_r+0x328>)
 8010a10:	e7ad      	b.n	801096e <_strerror_r+0x132>
 8010a12:	4b55      	ldr	r3, [pc, #340]	; (8010b68 <_strerror_r+0x32c>)
 8010a14:	e7ab      	b.n	801096e <_strerror_r+0x132>
 8010a16:	4b55      	ldr	r3, [pc, #340]	; (8010b6c <_strerror_r+0x330>)
 8010a18:	e7a9      	b.n	801096e <_strerror_r+0x132>
 8010a1a:	4b55      	ldr	r3, [pc, #340]	; (8010b70 <_strerror_r+0x334>)
 8010a1c:	e7a7      	b.n	801096e <_strerror_r+0x132>
 8010a1e:	4b55      	ldr	r3, [pc, #340]	; (8010b74 <_strerror_r+0x338>)
 8010a20:	e7a5      	b.n	801096e <_strerror_r+0x132>
 8010a22:	4b55      	ldr	r3, [pc, #340]	; (8010b78 <_strerror_r+0x33c>)
 8010a24:	e7a3      	b.n	801096e <_strerror_r+0x132>
 8010a26:	4b55      	ldr	r3, [pc, #340]	; (8010b7c <_strerror_r+0x340>)
 8010a28:	e7a1      	b.n	801096e <_strerror_r+0x132>
 8010a2a:	4b55      	ldr	r3, [pc, #340]	; (8010b80 <_strerror_r+0x344>)
 8010a2c:	e79f      	b.n	801096e <_strerror_r+0x132>
 8010a2e:	4b55      	ldr	r3, [pc, #340]	; (8010b84 <_strerror_r+0x348>)
 8010a30:	e79d      	b.n	801096e <_strerror_r+0x132>
 8010a32:	4b55      	ldr	r3, [pc, #340]	; (8010b88 <_strerror_r+0x34c>)
 8010a34:	e79b      	b.n	801096e <_strerror_r+0x132>
 8010a36:	4b55      	ldr	r3, [pc, #340]	; (8010b8c <_strerror_r+0x350>)
 8010a38:	e799      	b.n	801096e <_strerror_r+0x132>
 8010a3a:	4b55      	ldr	r3, [pc, #340]	; (8010b90 <_strerror_r+0x354>)
 8010a3c:	e797      	b.n	801096e <_strerror_r+0x132>
 8010a3e:	4b55      	ldr	r3, [pc, #340]	; (8010b94 <_strerror_r+0x358>)
 8010a40:	e795      	b.n	801096e <_strerror_r+0x132>
 8010a42:	4b55      	ldr	r3, [pc, #340]	; (8010b98 <_strerror_r+0x35c>)
 8010a44:	e793      	b.n	801096e <_strerror_r+0x132>
 8010a46:	4b55      	ldr	r3, [pc, #340]	; (8010b9c <_strerror_r+0x360>)
 8010a48:	e791      	b.n	801096e <_strerror_r+0x132>
 8010a4a:	4b55      	ldr	r3, [pc, #340]	; (8010ba0 <_strerror_r+0x364>)
 8010a4c:	e78f      	b.n	801096e <_strerror_r+0x132>
 8010a4e:	4b55      	ldr	r3, [pc, #340]	; (8010ba4 <_strerror_r+0x368>)
 8010a50:	e78d      	b.n	801096e <_strerror_r+0x132>
 8010a52:	4b55      	ldr	r3, [pc, #340]	; (8010ba8 <_strerror_r+0x36c>)
 8010a54:	e78b      	b.n	801096e <_strerror_r+0x132>
 8010a56:	4b55      	ldr	r3, [pc, #340]	; (8010bac <_strerror_r+0x370>)
 8010a58:	e789      	b.n	801096e <_strerror_r+0x132>
 8010a5a:	4b55      	ldr	r3, [pc, #340]	; (8010bb0 <_strerror_r+0x374>)
 8010a5c:	e787      	b.n	801096e <_strerror_r+0x132>
 8010a5e:	4b55      	ldr	r3, [pc, #340]	; (8010bb4 <_strerror_r+0x378>)
 8010a60:	e785      	b.n	801096e <_strerror_r+0x132>
 8010a62:	4b55      	ldr	r3, [pc, #340]	; (8010bb8 <_strerror_r+0x37c>)
 8010a64:	e783      	b.n	801096e <_strerror_r+0x132>
 8010a66:	4b55      	ldr	r3, [pc, #340]	; (8010bbc <_strerror_r+0x380>)
 8010a68:	e781      	b.n	801096e <_strerror_r+0x132>
 8010a6a:	4b55      	ldr	r3, [pc, #340]	; (8010bc0 <_strerror_r+0x384>)
 8010a6c:	e77f      	b.n	801096e <_strerror_r+0x132>
 8010a6e:	4b55      	ldr	r3, [pc, #340]	; (8010bc4 <_strerror_r+0x388>)
 8010a70:	e77d      	b.n	801096e <_strerror_r+0x132>
 8010a72:	4b55      	ldr	r3, [pc, #340]	; (8010bc8 <_strerror_r+0x38c>)
 8010a74:	e77b      	b.n	801096e <_strerror_r+0x132>
 8010a76:	4b55      	ldr	r3, [pc, #340]	; (8010bcc <_strerror_r+0x390>)
 8010a78:	e779      	b.n	801096e <_strerror_r+0x132>
 8010a7a:	4b55      	ldr	r3, [pc, #340]	; (8010bd0 <_strerror_r+0x394>)
 8010a7c:	e777      	b.n	801096e <_strerror_r+0x132>
 8010a7e:	4b55      	ldr	r3, [pc, #340]	; (8010bd4 <_strerror_r+0x398>)
 8010a80:	e775      	b.n	801096e <_strerror_r+0x132>
 8010a82:	4b55      	ldr	r3, [pc, #340]	; (8010bd8 <_strerror_r+0x39c>)
 8010a84:	e773      	b.n	801096e <_strerror_r+0x132>
 8010a86:	4b55      	ldr	r3, [pc, #340]	; (8010bdc <_strerror_r+0x3a0>)
 8010a88:	e771      	b.n	801096e <_strerror_r+0x132>
 8010a8a:	4b55      	ldr	r3, [pc, #340]	; (8010be0 <_strerror_r+0x3a4>)
 8010a8c:	e76f      	b.n	801096e <_strerror_r+0x132>
 8010a8e:	4b55      	ldr	r3, [pc, #340]	; (8010be4 <_strerror_r+0x3a8>)
 8010a90:	e76d      	b.n	801096e <_strerror_r+0x132>
 8010a92:	4b55      	ldr	r3, [pc, #340]	; (8010be8 <_strerror_r+0x3ac>)
 8010a94:	e76b      	b.n	801096e <_strerror_r+0x132>
 8010a96:	4b55      	ldr	r3, [pc, #340]	; (8010bec <_strerror_r+0x3b0>)
 8010a98:	e769      	b.n	801096e <_strerror_r+0x132>
 8010a9a:	4b55      	ldr	r3, [pc, #340]	; (8010bf0 <_strerror_r+0x3b4>)
 8010a9c:	e767      	b.n	801096e <_strerror_r+0x132>
 8010a9e:	4b55      	ldr	r3, [pc, #340]	; (8010bf4 <_strerror_r+0x3b8>)
 8010aa0:	e765      	b.n	801096e <_strerror_r+0x132>
 8010aa2:	4b55      	ldr	r3, [pc, #340]	; (8010bf8 <_strerror_r+0x3bc>)
 8010aa4:	e763      	b.n	801096e <_strerror_r+0x132>
 8010aa6:	4b55      	ldr	r3, [pc, #340]	; (8010bfc <_strerror_r+0x3c0>)
 8010aa8:	e761      	b.n	801096e <_strerror_r+0x132>
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	bf14      	ite	ne
 8010aae:	461a      	movne	r2, r3
 8010ab0:	4622      	moveq	r2, r4
 8010ab2:	f000 ffc5 	bl	8011a40 <_user_strerror>
 8010ab6:	4b52      	ldr	r3, [pc, #328]	; (8010c00 <_strerror_r+0x3c4>)
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	bf18      	it	ne
 8010abc:	4603      	movne	r3, r0
 8010abe:	e756      	b.n	801096e <_strerror_r+0x132>
 8010ac0:	4b50      	ldr	r3, [pc, #320]	; (8010c04 <_strerror_r+0x3c8>)
 8010ac2:	e754      	b.n	801096e <_strerror_r+0x132>
 8010ac4:	0801743f 	.word	0x0801743f
 8010ac8:	08017449 	.word	0x08017449
 8010acc:	08017463 	.word	0x08017463
 8010ad0:	08017473 	.word	0x08017473
 8010ad4:	0801748b 	.word	0x0801748b
 8010ad8:	08017495 	.word	0x08017495
 8010adc:	080174af 	.word	0x080174af
 8010ae0:	080174c1 	.word	0x080174c1
 8010ae4:	080174d3 	.word	0x080174d3
 8010ae8:	080174ec 	.word	0x080174ec
 8010aec:	080174fc 	.word	0x080174fc
 8010af0:	08017508 	.word	0x08017508
 8010af4:	08017525 	.word	0x08017525
 8010af8:	08017537 	.word	0x08017537
 8010afc:	08017548 	.word	0x08017548
 8010b00:	0801755a 	.word	0x0801755a
 8010b04:	08017566 	.word	0x08017566
 8010b08:	0801757e 	.word	0x0801757e
 8010b0c:	0801758a 	.word	0x0801758a
 8010b10:	0801759c 	.word	0x0801759c
 8010b14:	080175ab 	.word	0x080175ab
 8010b18:	080175bb 	.word	0x080175bb
 8010b1c:	080175c8 	.word	0x080175c8
 8010b20:	080175e7 	.word	0x080175e7
 8010b24:	080175f6 	.word	0x080175f6
 8010b28:	08017607 	.word	0x08017607
 8010b2c:	0801762b 	.word	0x0801762b
 8010b30:	08017649 	.word	0x08017649
 8010b34:	08017667 	.word	0x08017667
 8010b38:	08017687 	.word	0x08017687
 8010b3c:	0801769e 	.word	0x0801769e
 8010b40:	080176ad 	.word	0x080176ad
 8010b44:	080176bc 	.word	0x080176bc
 8010b48:	080176d0 	.word	0x080176d0
 8010b4c:	080176e8 	.word	0x080176e8
 8010b50:	080176f6 	.word	0x080176f6
 8010b54:	08017703 	.word	0x08017703
 8010b58:	08017719 	.word	0x08017719
 8010b5c:	08017728 	.word	0x08017728
 8010b60:	08017734 	.word	0x08017734
 8010b64:	08017763 	.word	0x08017763
 8010b68:	08017774 	.word	0x08017774
 8010b6c:	0801778f 	.word	0x0801778f
 8010b70:	080177a2 	.word	0x080177a2
 8010b74:	080177b8 	.word	0x080177b8
 8010b78:	080177c1 	.word	0x080177c1
 8010b7c:	080177d8 	.word	0x080177d8
 8010b80:	080177e0 	.word	0x080177e0
 8010b84:	080177ed 	.word	0x080177ed
 8010b88:	08017802 	.word	0x08017802
 8010b8c:	08017816 	.word	0x08017816
 8010b90:	0801782e 	.word	0x0801782e
 8010b94:	0801783d 	.word	0x0801783d
 8010b98:	0801784e 	.word	0x0801784e
 8010b9c:	08017861 	.word	0x08017861
 8010ba0:	0801786d 	.word	0x0801786d
 8010ba4:	08017886 	.word	0x08017886
 8010ba8:	0801789a 	.word	0x0801789a
 8010bac:	080178b5 	.word	0x080178b5
 8010bb0:	080178cd 	.word	0x080178cd
 8010bb4:	080178e7 	.word	0x080178e7
 8010bb8:	080178ef 	.word	0x080178ef
 8010bbc:	0801791f 	.word	0x0801791f
 8010bc0:	0801793e 	.word	0x0801793e
 8010bc4:	0801795d 	.word	0x0801795d
 8010bc8:	08017974 	.word	0x08017974
 8010bcc:	08017987 	.word	0x08017987
 8010bd0:	080179a0 	.word	0x080179a0
 8010bd4:	080179b7 	.word	0x080179b7
 8010bd8:	080179cd 	.word	0x080179cd
 8010bdc:	080179ee 	.word	0x080179ee
 8010be0:	08017a06 	.word	0x08017a06
 8010be4:	08017a22 	.word	0x08017a22
 8010be8:	08017a35 	.word	0x08017a35
 8010bec:	08017a4b 	.word	0x08017a4b
 8010bf0:	08017a5f 	.word	0x08017a5f
 8010bf4:	08017a81 	.word	0x08017a81
 8010bf8:	08017aa7 	.word	0x08017aa7
 8010bfc:	08017ab8 	.word	0x08017ab8
 8010c00:	08017d8a 	.word	0x08017d8a
 8010c04:	08017acd 	.word	0x08017acd

08010c08 <strerror>:
 8010c08:	4601      	mov	r1, r0
 8010c0a:	4803      	ldr	r0, [pc, #12]	; (8010c18 <strerror+0x10>)
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6800      	ldr	r0, [r0, #0]
 8010c10:	461a      	mov	r2, r3
 8010c12:	f7ff be13 	b.w	801083c <_strerror_r>
 8010c16:	bf00      	nop
 8010c18:	20000074 	.word	0x20000074

08010c1c <strncpy>:
 8010c1c:	b510      	push	{r4, lr}
 8010c1e:	3901      	subs	r1, #1
 8010c20:	4603      	mov	r3, r0
 8010c22:	b132      	cbz	r2, 8010c32 <strncpy+0x16>
 8010c24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010c28:	f803 4b01 	strb.w	r4, [r3], #1
 8010c2c:	3a01      	subs	r2, #1
 8010c2e:	2c00      	cmp	r4, #0
 8010c30:	d1f7      	bne.n	8010c22 <strncpy+0x6>
 8010c32:	441a      	add	r2, r3
 8010c34:	2100      	movs	r1, #0
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d100      	bne.n	8010c3c <strncpy+0x20>
 8010c3a:	bd10      	pop	{r4, pc}
 8010c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8010c40:	e7f9      	b.n	8010c36 <strncpy+0x1a>

08010c42 <strrchr>:
 8010c42:	b538      	push	{r3, r4, r5, lr}
 8010c44:	4603      	mov	r3, r0
 8010c46:	460c      	mov	r4, r1
 8010c48:	b969      	cbnz	r1, 8010c66 <strrchr+0x24>
 8010c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c4e:	f7ff bdd6 	b.w	80107fe <strchr>
 8010c52:	1c43      	adds	r3, r0, #1
 8010c54:	4605      	mov	r5, r0
 8010c56:	4621      	mov	r1, r4
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7ff fdd0 	bl	80107fe <strchr>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d1f7      	bne.n	8010c52 <strrchr+0x10>
 8010c62:	4628      	mov	r0, r5
 8010c64:	bd38      	pop	{r3, r4, r5, pc}
 8010c66:	2500      	movs	r5, #0
 8010c68:	e7f5      	b.n	8010c56 <strrchr+0x14>

08010c6a <strspn>:
 8010c6a:	b570      	push	{r4, r5, r6, lr}
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	461e      	mov	r6, r3
 8010c70:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010c74:	b13c      	cbz	r4, 8010c86 <strspn+0x1c>
 8010c76:	1e4a      	subs	r2, r1, #1
 8010c78:	e001      	b.n	8010c7e <strspn+0x14>
 8010c7a:	42a5      	cmp	r5, r4
 8010c7c:	d0f7      	beq.n	8010c6e <strspn+0x4>
 8010c7e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010c82:	2d00      	cmp	r5, #0
 8010c84:	d1f9      	bne.n	8010c7a <strspn+0x10>
 8010c86:	1a30      	subs	r0, r6, r0
 8010c88:	bd70      	pop	{r4, r5, r6, pc}

08010c8a <strstr>:
 8010c8a:	780a      	ldrb	r2, [r1, #0]
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	b96a      	cbnz	r2, 8010cac <strstr+0x22>
 8010c90:	bd70      	pop	{r4, r5, r6, pc}
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d109      	bne.n	8010caa <strstr+0x20>
 8010c96:	460c      	mov	r4, r1
 8010c98:	4605      	mov	r5, r0
 8010c9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d0f6      	beq.n	8010c90 <strstr+0x6>
 8010ca2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010ca6:	429e      	cmp	r6, r3
 8010ca8:	d0f7      	beq.n	8010c9a <strstr+0x10>
 8010caa:	3001      	adds	r0, #1
 8010cac:	7803      	ldrb	r3, [r0, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1ef      	bne.n	8010c92 <strstr+0x8>
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	e7ec      	b.n	8010c90 <strstr+0x6>

08010cb6 <sulp>:
 8010cb6:	b570      	push	{r4, r5, r6, lr}
 8010cb8:	4604      	mov	r4, r0
 8010cba:	460d      	mov	r5, r1
 8010cbc:	ec45 4b10 	vmov	d0, r4, r5
 8010cc0:	4616      	mov	r6, r2
 8010cc2:	f001 ff01 	bl	8012ac8 <__ulp>
 8010cc6:	ec51 0b10 	vmov	r0, r1, d0
 8010cca:	b17e      	cbz	r6, 8010cec <sulp+0x36>
 8010ccc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010cd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	dd09      	ble.n	8010cec <sulp+0x36>
 8010cd8:	051b      	lsls	r3, r3, #20
 8010cda:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010cde:	2400      	movs	r4, #0
 8010ce0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	462b      	mov	r3, r5
 8010ce8:	f7ef fdc8 	bl	800087c <__aeabi_dmul>
 8010cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08010cf0 <_strtod_l>:
 8010cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf4:	ed2d 8b02 	vpush	{d8}
 8010cf8:	b09d      	sub	sp, #116	; 0x74
 8010cfa:	461f      	mov	r7, r3
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	9318      	str	r3, [sp, #96]	; 0x60
 8010d00:	4ba2      	ldr	r3, [pc, #648]	; (8010f8c <_strtod_l+0x29c>)
 8010d02:	9213      	str	r2, [sp, #76]	; 0x4c
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	9305      	str	r3, [sp, #20]
 8010d08:	4604      	mov	r4, r0
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	4688      	mov	r8, r1
 8010d0e:	f7ef fbf1 	bl	80004f4 <strlen>
 8010d12:	f04f 0a00 	mov.w	sl, #0
 8010d16:	4605      	mov	r5, r0
 8010d18:	f04f 0b00 	mov.w	fp, #0
 8010d1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d22:	781a      	ldrb	r2, [r3, #0]
 8010d24:	2a2b      	cmp	r2, #43	; 0x2b
 8010d26:	d04e      	beq.n	8010dc6 <_strtod_l+0xd6>
 8010d28:	d83b      	bhi.n	8010da2 <_strtod_l+0xb2>
 8010d2a:	2a0d      	cmp	r2, #13
 8010d2c:	d834      	bhi.n	8010d98 <_strtod_l+0xa8>
 8010d2e:	2a08      	cmp	r2, #8
 8010d30:	d834      	bhi.n	8010d9c <_strtod_l+0xac>
 8010d32:	2a00      	cmp	r2, #0
 8010d34:	d03e      	beq.n	8010db4 <_strtod_l+0xc4>
 8010d36:	2300      	movs	r3, #0
 8010d38:	930a      	str	r3, [sp, #40]	; 0x28
 8010d3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010d3c:	7833      	ldrb	r3, [r6, #0]
 8010d3e:	2b30      	cmp	r3, #48	; 0x30
 8010d40:	f040 80b0 	bne.w	8010ea4 <_strtod_l+0x1b4>
 8010d44:	7873      	ldrb	r3, [r6, #1]
 8010d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010d4a:	2b58      	cmp	r3, #88	; 0x58
 8010d4c:	d168      	bne.n	8010e20 <_strtod_l+0x130>
 8010d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d50:	9301      	str	r3, [sp, #4]
 8010d52:	ab18      	add	r3, sp, #96	; 0x60
 8010d54:	9702      	str	r7, [sp, #8]
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	4a8d      	ldr	r2, [pc, #564]	; (8010f90 <_strtod_l+0x2a0>)
 8010d5a:	ab19      	add	r3, sp, #100	; 0x64
 8010d5c:	a917      	add	r1, sp, #92	; 0x5c
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f000 ffcc 	bl	8011cfc <__gethex>
 8010d64:	f010 0707 	ands.w	r7, r0, #7
 8010d68:	4605      	mov	r5, r0
 8010d6a:	d005      	beq.n	8010d78 <_strtod_l+0x88>
 8010d6c:	2f06      	cmp	r7, #6
 8010d6e:	d12c      	bne.n	8010dca <_strtod_l+0xda>
 8010d70:	3601      	adds	r6, #1
 8010d72:	2300      	movs	r3, #0
 8010d74:	9617      	str	r6, [sp, #92]	; 0x5c
 8010d76:	930a      	str	r3, [sp, #40]	; 0x28
 8010d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f040 8590 	bne.w	80118a0 <_strtod_l+0xbb0>
 8010d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d82:	b1eb      	cbz	r3, 8010dc0 <_strtod_l+0xd0>
 8010d84:	4652      	mov	r2, sl
 8010d86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d8a:	ec43 2b10 	vmov	d0, r2, r3
 8010d8e:	b01d      	add	sp, #116	; 0x74
 8010d90:	ecbd 8b02 	vpop	{d8}
 8010d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d98:	2a20      	cmp	r2, #32
 8010d9a:	d1cc      	bne.n	8010d36 <_strtod_l+0x46>
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010da0:	e7be      	b.n	8010d20 <_strtod_l+0x30>
 8010da2:	2a2d      	cmp	r2, #45	; 0x2d
 8010da4:	d1c7      	bne.n	8010d36 <_strtod_l+0x46>
 8010da6:	2201      	movs	r2, #1
 8010da8:	920a      	str	r2, [sp, #40]	; 0x28
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8010dae:	785b      	ldrb	r3, [r3, #1]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1c2      	bne.n	8010d3a <_strtod_l+0x4a>
 8010db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010db6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f040 856e 	bne.w	801189c <_strtod_l+0xbac>
 8010dc0:	4652      	mov	r2, sl
 8010dc2:	465b      	mov	r3, fp
 8010dc4:	e7e1      	b.n	8010d8a <_strtod_l+0x9a>
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	e7ee      	b.n	8010da8 <_strtod_l+0xb8>
 8010dca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dcc:	b13a      	cbz	r2, 8010dde <_strtod_l+0xee>
 8010dce:	2135      	movs	r1, #53	; 0x35
 8010dd0:	a81a      	add	r0, sp, #104	; 0x68
 8010dd2:	f001 ff84 	bl	8012cde <__copybits>
 8010dd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f001 fb43 	bl	8012464 <_Bfree>
 8010dde:	3f01      	subs	r7, #1
 8010de0:	2f04      	cmp	r7, #4
 8010de2:	d806      	bhi.n	8010df2 <_strtod_l+0x102>
 8010de4:	e8df f007 	tbb	[pc, r7]
 8010de8:	1714030a 	.word	0x1714030a
 8010dec:	0a          	.byte	0x0a
 8010ded:	00          	.byte	0x00
 8010dee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010df2:	0728      	lsls	r0, r5, #28
 8010df4:	d5c0      	bpl.n	8010d78 <_strtod_l+0x88>
 8010df6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010dfa:	e7bd      	b.n	8010d78 <_strtod_l+0x88>
 8010dfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010e00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010e0e:	e7f0      	b.n	8010df2 <_strtod_l+0x102>
 8010e10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010f94 <_strtod_l+0x2a4>
 8010e14:	e7ed      	b.n	8010df2 <_strtod_l+0x102>
 8010e16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010e1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010e1e:	e7e8      	b.n	8010df2 <_strtod_l+0x102>
 8010e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e22:	1c5a      	adds	r2, r3, #1
 8010e24:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e26:	785b      	ldrb	r3, [r3, #1]
 8010e28:	2b30      	cmp	r3, #48	; 0x30
 8010e2a:	d0f9      	beq.n	8010e20 <_strtod_l+0x130>
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d0a3      	beq.n	8010d78 <_strtod_l+0x88>
 8010e30:	2301      	movs	r3, #1
 8010e32:	f04f 0900 	mov.w	r9, #0
 8010e36:	9304      	str	r3, [sp, #16]
 8010e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e3a:	9308      	str	r3, [sp, #32]
 8010e3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8010e40:	464f      	mov	r7, r9
 8010e42:	220a      	movs	r2, #10
 8010e44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010e46:	7806      	ldrb	r6, [r0, #0]
 8010e48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010e4c:	b2d9      	uxtb	r1, r3
 8010e4e:	2909      	cmp	r1, #9
 8010e50:	d92a      	bls.n	8010ea8 <_strtod_l+0x1b8>
 8010e52:	9905      	ldr	r1, [sp, #20]
 8010e54:	462a      	mov	r2, r5
 8010e56:	f002 fc87 	bl	8013768 <strncmp>
 8010e5a:	b398      	cbz	r0, 8010ec4 <_strtod_l+0x1d4>
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	4632      	mov	r2, r6
 8010e60:	463d      	mov	r5, r7
 8010e62:	9005      	str	r0, [sp, #20]
 8010e64:	4603      	mov	r3, r0
 8010e66:	2a65      	cmp	r2, #101	; 0x65
 8010e68:	d001      	beq.n	8010e6e <_strtod_l+0x17e>
 8010e6a:	2a45      	cmp	r2, #69	; 0x45
 8010e6c:	d118      	bne.n	8010ea0 <_strtod_l+0x1b0>
 8010e6e:	b91d      	cbnz	r5, 8010e78 <_strtod_l+0x188>
 8010e70:	9a04      	ldr	r2, [sp, #16]
 8010e72:	4302      	orrs	r2, r0
 8010e74:	d09e      	beq.n	8010db4 <_strtod_l+0xc4>
 8010e76:	2500      	movs	r5, #0
 8010e78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010e7c:	f108 0201 	add.w	r2, r8, #1
 8010e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010e86:	2a2b      	cmp	r2, #43	; 0x2b
 8010e88:	d075      	beq.n	8010f76 <_strtod_l+0x286>
 8010e8a:	2a2d      	cmp	r2, #45	; 0x2d
 8010e8c:	d07b      	beq.n	8010f86 <_strtod_l+0x296>
 8010e8e:	f04f 0c00 	mov.w	ip, #0
 8010e92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010e96:	2909      	cmp	r1, #9
 8010e98:	f240 8082 	bls.w	8010fa0 <_strtod_l+0x2b0>
 8010e9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010ea0:	2600      	movs	r6, #0
 8010ea2:	e09d      	b.n	8010fe0 <_strtod_l+0x2f0>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e7c4      	b.n	8010e32 <_strtod_l+0x142>
 8010ea8:	2f08      	cmp	r7, #8
 8010eaa:	bfd8      	it	le
 8010eac:	9907      	ldrle	r1, [sp, #28]
 8010eae:	f100 0001 	add.w	r0, r0, #1
 8010eb2:	bfda      	itte	le
 8010eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8010eb8:	9307      	strle	r3, [sp, #28]
 8010eba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010ebe:	3701      	adds	r7, #1
 8010ec0:	9017      	str	r0, [sp, #92]	; 0x5c
 8010ec2:	e7bf      	b.n	8010e44 <_strtod_l+0x154>
 8010ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ec6:	195a      	adds	r2, r3, r5
 8010ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8010eca:	5d5a      	ldrb	r2, [r3, r5]
 8010ecc:	2f00      	cmp	r7, #0
 8010ece:	d037      	beq.n	8010f40 <_strtod_l+0x250>
 8010ed0:	9005      	str	r0, [sp, #20]
 8010ed2:	463d      	mov	r5, r7
 8010ed4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010ed8:	2b09      	cmp	r3, #9
 8010eda:	d912      	bls.n	8010f02 <_strtod_l+0x212>
 8010edc:	2301      	movs	r3, #1
 8010ede:	e7c2      	b.n	8010e66 <_strtod_l+0x176>
 8010ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ee2:	1c5a      	adds	r2, r3, #1
 8010ee4:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ee6:	785a      	ldrb	r2, [r3, #1]
 8010ee8:	3001      	adds	r0, #1
 8010eea:	2a30      	cmp	r2, #48	; 0x30
 8010eec:	d0f8      	beq.n	8010ee0 <_strtod_l+0x1f0>
 8010eee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010ef2:	2b08      	cmp	r3, #8
 8010ef4:	f200 84d9 	bhi.w	80118aa <_strtod_l+0xbba>
 8010ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010efa:	9005      	str	r0, [sp, #20]
 8010efc:	2000      	movs	r0, #0
 8010efe:	9308      	str	r3, [sp, #32]
 8010f00:	4605      	mov	r5, r0
 8010f02:	3a30      	subs	r2, #48	; 0x30
 8010f04:	f100 0301 	add.w	r3, r0, #1
 8010f08:	d014      	beq.n	8010f34 <_strtod_l+0x244>
 8010f0a:	9905      	ldr	r1, [sp, #20]
 8010f0c:	4419      	add	r1, r3
 8010f0e:	9105      	str	r1, [sp, #20]
 8010f10:	462b      	mov	r3, r5
 8010f12:	eb00 0e05 	add.w	lr, r0, r5
 8010f16:	210a      	movs	r1, #10
 8010f18:	4573      	cmp	r3, lr
 8010f1a:	d113      	bne.n	8010f44 <_strtod_l+0x254>
 8010f1c:	182b      	adds	r3, r5, r0
 8010f1e:	2b08      	cmp	r3, #8
 8010f20:	f105 0501 	add.w	r5, r5, #1
 8010f24:	4405      	add	r5, r0
 8010f26:	dc1c      	bgt.n	8010f62 <_strtod_l+0x272>
 8010f28:	9907      	ldr	r1, [sp, #28]
 8010f2a:	230a      	movs	r3, #10
 8010f2c:	fb03 2301 	mla	r3, r3, r1, r2
 8010f30:	9307      	str	r3, [sp, #28]
 8010f32:	2300      	movs	r3, #0
 8010f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f36:	1c51      	adds	r1, r2, #1
 8010f38:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f3a:	7852      	ldrb	r2, [r2, #1]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	e7c9      	b.n	8010ed4 <_strtod_l+0x1e4>
 8010f40:	4638      	mov	r0, r7
 8010f42:	e7d2      	b.n	8010eea <_strtod_l+0x1fa>
 8010f44:	2b08      	cmp	r3, #8
 8010f46:	dc04      	bgt.n	8010f52 <_strtod_l+0x262>
 8010f48:	9e07      	ldr	r6, [sp, #28]
 8010f4a:	434e      	muls	r6, r1
 8010f4c:	9607      	str	r6, [sp, #28]
 8010f4e:	3301      	adds	r3, #1
 8010f50:	e7e2      	b.n	8010f18 <_strtod_l+0x228>
 8010f52:	f103 0c01 	add.w	ip, r3, #1
 8010f56:	f1bc 0f10 	cmp.w	ip, #16
 8010f5a:	bfd8      	it	le
 8010f5c:	fb01 f909 	mulle.w	r9, r1, r9
 8010f60:	e7f5      	b.n	8010f4e <_strtod_l+0x25e>
 8010f62:	2d10      	cmp	r5, #16
 8010f64:	bfdc      	itt	le
 8010f66:	230a      	movle	r3, #10
 8010f68:	fb03 2909 	mlale	r9, r3, r9, r2
 8010f6c:	e7e1      	b.n	8010f32 <_strtod_l+0x242>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	9305      	str	r3, [sp, #20]
 8010f72:	2301      	movs	r3, #1
 8010f74:	e77c      	b.n	8010e70 <_strtod_l+0x180>
 8010f76:	f04f 0c00 	mov.w	ip, #0
 8010f7a:	f108 0202 	add.w	r2, r8, #2
 8010f7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010f84:	e785      	b.n	8010e92 <_strtod_l+0x1a2>
 8010f86:	f04f 0c01 	mov.w	ip, #1
 8010f8a:	e7f6      	b.n	8010f7a <_strtod_l+0x28a>
 8010f8c:	08017bb0 	.word	0x08017bb0
 8010f90:	08017ae4 	.word	0x08017ae4
 8010f94:	7ff00000 	.word	0x7ff00000
 8010f98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f9a:	1c51      	adds	r1, r2, #1
 8010f9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f9e:	7852      	ldrb	r2, [r2, #1]
 8010fa0:	2a30      	cmp	r2, #48	; 0x30
 8010fa2:	d0f9      	beq.n	8010f98 <_strtod_l+0x2a8>
 8010fa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010fa8:	2908      	cmp	r1, #8
 8010faa:	f63f af79 	bhi.w	8010ea0 <_strtod_l+0x1b0>
 8010fae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010fb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010fb4:	9206      	str	r2, [sp, #24]
 8010fb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010fb8:	1c51      	adds	r1, r2, #1
 8010fba:	9117      	str	r1, [sp, #92]	; 0x5c
 8010fbc:	7852      	ldrb	r2, [r2, #1]
 8010fbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010fc2:	2e09      	cmp	r6, #9
 8010fc4:	d937      	bls.n	8011036 <_strtod_l+0x346>
 8010fc6:	9e06      	ldr	r6, [sp, #24]
 8010fc8:	1b89      	subs	r1, r1, r6
 8010fca:	2908      	cmp	r1, #8
 8010fcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010fd0:	dc02      	bgt.n	8010fd8 <_strtod_l+0x2e8>
 8010fd2:	4576      	cmp	r6, lr
 8010fd4:	bfa8      	it	ge
 8010fd6:	4676      	movge	r6, lr
 8010fd8:	f1bc 0f00 	cmp.w	ip, #0
 8010fdc:	d000      	beq.n	8010fe0 <_strtod_l+0x2f0>
 8010fde:	4276      	negs	r6, r6
 8010fe0:	2d00      	cmp	r5, #0
 8010fe2:	d14d      	bne.n	8011080 <_strtod_l+0x390>
 8010fe4:	9904      	ldr	r1, [sp, #16]
 8010fe6:	4301      	orrs	r1, r0
 8010fe8:	f47f aec6 	bne.w	8010d78 <_strtod_l+0x88>
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f47f aee1 	bne.w	8010db4 <_strtod_l+0xc4>
 8010ff2:	2a69      	cmp	r2, #105	; 0x69
 8010ff4:	d027      	beq.n	8011046 <_strtod_l+0x356>
 8010ff6:	dc24      	bgt.n	8011042 <_strtod_l+0x352>
 8010ff8:	2a49      	cmp	r2, #73	; 0x49
 8010ffa:	d024      	beq.n	8011046 <_strtod_l+0x356>
 8010ffc:	2a4e      	cmp	r2, #78	; 0x4e
 8010ffe:	f47f aed9 	bne.w	8010db4 <_strtod_l+0xc4>
 8011002:	499f      	ldr	r1, [pc, #636]	; (8011280 <_strtod_l+0x590>)
 8011004:	a817      	add	r0, sp, #92	; 0x5c
 8011006:	f001 f8d1 	bl	80121ac <__match>
 801100a:	2800      	cmp	r0, #0
 801100c:	f43f aed2 	beq.w	8010db4 <_strtod_l+0xc4>
 8011010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	2b28      	cmp	r3, #40	; 0x28
 8011016:	d12d      	bne.n	8011074 <_strtod_l+0x384>
 8011018:	499a      	ldr	r1, [pc, #616]	; (8011284 <_strtod_l+0x594>)
 801101a:	aa1a      	add	r2, sp, #104	; 0x68
 801101c:	a817      	add	r0, sp, #92	; 0x5c
 801101e:	f001 f8d9 	bl	80121d4 <__hexnan>
 8011022:	2805      	cmp	r0, #5
 8011024:	d126      	bne.n	8011074 <_strtod_l+0x384>
 8011026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011028:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801102c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011030:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011034:	e6a0      	b.n	8010d78 <_strtod_l+0x88>
 8011036:	210a      	movs	r1, #10
 8011038:	fb01 2e0e 	mla	lr, r1, lr, r2
 801103c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011040:	e7b9      	b.n	8010fb6 <_strtod_l+0x2c6>
 8011042:	2a6e      	cmp	r2, #110	; 0x6e
 8011044:	e7db      	b.n	8010ffe <_strtod_l+0x30e>
 8011046:	4990      	ldr	r1, [pc, #576]	; (8011288 <_strtod_l+0x598>)
 8011048:	a817      	add	r0, sp, #92	; 0x5c
 801104a:	f001 f8af 	bl	80121ac <__match>
 801104e:	2800      	cmp	r0, #0
 8011050:	f43f aeb0 	beq.w	8010db4 <_strtod_l+0xc4>
 8011054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011056:	498d      	ldr	r1, [pc, #564]	; (801128c <_strtod_l+0x59c>)
 8011058:	3b01      	subs	r3, #1
 801105a:	a817      	add	r0, sp, #92	; 0x5c
 801105c:	9317      	str	r3, [sp, #92]	; 0x5c
 801105e:	f001 f8a5 	bl	80121ac <__match>
 8011062:	b910      	cbnz	r0, 801106a <_strtod_l+0x37a>
 8011064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011066:	3301      	adds	r3, #1
 8011068:	9317      	str	r3, [sp, #92]	; 0x5c
 801106a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801129c <_strtod_l+0x5ac>
 801106e:	f04f 0a00 	mov.w	sl, #0
 8011072:	e681      	b.n	8010d78 <_strtod_l+0x88>
 8011074:	4886      	ldr	r0, [pc, #536]	; (8011290 <_strtod_l+0x5a0>)
 8011076:	f002 fb37 	bl	80136e8 <nan>
 801107a:	ec5b ab10 	vmov	sl, fp, d0
 801107e:	e67b      	b.n	8010d78 <_strtod_l+0x88>
 8011080:	9b05      	ldr	r3, [sp, #20]
 8011082:	9807      	ldr	r0, [sp, #28]
 8011084:	1af3      	subs	r3, r6, r3
 8011086:	2f00      	cmp	r7, #0
 8011088:	bf08      	it	eq
 801108a:	462f      	moveq	r7, r5
 801108c:	2d10      	cmp	r5, #16
 801108e:	9306      	str	r3, [sp, #24]
 8011090:	46a8      	mov	r8, r5
 8011092:	bfa8      	it	ge
 8011094:	f04f 0810 	movge.w	r8, #16
 8011098:	f7ef fb76 	bl	8000788 <__aeabi_ui2d>
 801109c:	2d09      	cmp	r5, #9
 801109e:	4682      	mov	sl, r0
 80110a0:	468b      	mov	fp, r1
 80110a2:	dd13      	ble.n	80110cc <_strtod_l+0x3dc>
 80110a4:	4b7b      	ldr	r3, [pc, #492]	; (8011294 <_strtod_l+0x5a4>)
 80110a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80110aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80110ae:	f7ef fbe5 	bl	800087c <__aeabi_dmul>
 80110b2:	4682      	mov	sl, r0
 80110b4:	4648      	mov	r0, r9
 80110b6:	468b      	mov	fp, r1
 80110b8:	f7ef fb66 	bl	8000788 <__aeabi_ui2d>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4650      	mov	r0, sl
 80110c2:	4659      	mov	r1, fp
 80110c4:	f7ef fa24 	bl	8000510 <__adddf3>
 80110c8:	4682      	mov	sl, r0
 80110ca:	468b      	mov	fp, r1
 80110cc:	2d0f      	cmp	r5, #15
 80110ce:	dc38      	bgt.n	8011142 <_strtod_l+0x452>
 80110d0:	9b06      	ldr	r3, [sp, #24]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f43f ae50 	beq.w	8010d78 <_strtod_l+0x88>
 80110d8:	dd24      	ble.n	8011124 <_strtod_l+0x434>
 80110da:	2b16      	cmp	r3, #22
 80110dc:	dc0b      	bgt.n	80110f6 <_strtod_l+0x406>
 80110de:	496d      	ldr	r1, [pc, #436]	; (8011294 <_strtod_l+0x5a4>)
 80110e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110e8:	4652      	mov	r2, sl
 80110ea:	465b      	mov	r3, fp
 80110ec:	f7ef fbc6 	bl	800087c <__aeabi_dmul>
 80110f0:	4682      	mov	sl, r0
 80110f2:	468b      	mov	fp, r1
 80110f4:	e640      	b.n	8010d78 <_strtod_l+0x88>
 80110f6:	9a06      	ldr	r2, [sp, #24]
 80110f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80110fc:	4293      	cmp	r3, r2
 80110fe:	db20      	blt.n	8011142 <_strtod_l+0x452>
 8011100:	4c64      	ldr	r4, [pc, #400]	; (8011294 <_strtod_l+0x5a4>)
 8011102:	f1c5 050f 	rsb	r5, r5, #15
 8011106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801110a:	4652      	mov	r2, sl
 801110c:	465b      	mov	r3, fp
 801110e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011112:	f7ef fbb3 	bl	800087c <__aeabi_dmul>
 8011116:	9b06      	ldr	r3, [sp, #24]
 8011118:	1b5d      	subs	r5, r3, r5
 801111a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801111e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011122:	e7e3      	b.n	80110ec <_strtod_l+0x3fc>
 8011124:	9b06      	ldr	r3, [sp, #24]
 8011126:	3316      	adds	r3, #22
 8011128:	db0b      	blt.n	8011142 <_strtod_l+0x452>
 801112a:	9b05      	ldr	r3, [sp, #20]
 801112c:	1b9e      	subs	r6, r3, r6
 801112e:	4b59      	ldr	r3, [pc, #356]	; (8011294 <_strtod_l+0x5a4>)
 8011130:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011138:	4650      	mov	r0, sl
 801113a:	4659      	mov	r1, fp
 801113c:	f7ef fcc8 	bl	8000ad0 <__aeabi_ddiv>
 8011140:	e7d6      	b.n	80110f0 <_strtod_l+0x400>
 8011142:	9b06      	ldr	r3, [sp, #24]
 8011144:	eba5 0808 	sub.w	r8, r5, r8
 8011148:	4498      	add	r8, r3
 801114a:	f1b8 0f00 	cmp.w	r8, #0
 801114e:	dd74      	ble.n	801123a <_strtod_l+0x54a>
 8011150:	f018 030f 	ands.w	r3, r8, #15
 8011154:	d00a      	beq.n	801116c <_strtod_l+0x47c>
 8011156:	494f      	ldr	r1, [pc, #316]	; (8011294 <_strtod_l+0x5a4>)
 8011158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801115c:	4652      	mov	r2, sl
 801115e:	465b      	mov	r3, fp
 8011160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011164:	f7ef fb8a 	bl	800087c <__aeabi_dmul>
 8011168:	4682      	mov	sl, r0
 801116a:	468b      	mov	fp, r1
 801116c:	f038 080f 	bics.w	r8, r8, #15
 8011170:	d04f      	beq.n	8011212 <_strtod_l+0x522>
 8011172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011176:	dd22      	ble.n	80111be <_strtod_l+0x4ce>
 8011178:	2500      	movs	r5, #0
 801117a:	462e      	mov	r6, r5
 801117c:	9507      	str	r5, [sp, #28]
 801117e:	9505      	str	r5, [sp, #20]
 8011180:	2322      	movs	r3, #34	; 0x22
 8011182:	f8df b118 	ldr.w	fp, [pc, #280]	; 801129c <_strtod_l+0x5ac>
 8011186:	6023      	str	r3, [r4, #0]
 8011188:	f04f 0a00 	mov.w	sl, #0
 801118c:	9b07      	ldr	r3, [sp, #28]
 801118e:	2b00      	cmp	r3, #0
 8011190:	f43f adf2 	beq.w	8010d78 <_strtod_l+0x88>
 8011194:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011196:	4620      	mov	r0, r4
 8011198:	f001 f964 	bl	8012464 <_Bfree>
 801119c:	9905      	ldr	r1, [sp, #20]
 801119e:	4620      	mov	r0, r4
 80111a0:	f001 f960 	bl	8012464 <_Bfree>
 80111a4:	4631      	mov	r1, r6
 80111a6:	4620      	mov	r0, r4
 80111a8:	f001 f95c 	bl	8012464 <_Bfree>
 80111ac:	9907      	ldr	r1, [sp, #28]
 80111ae:	4620      	mov	r0, r4
 80111b0:	f001 f958 	bl	8012464 <_Bfree>
 80111b4:	4629      	mov	r1, r5
 80111b6:	4620      	mov	r0, r4
 80111b8:	f001 f954 	bl	8012464 <_Bfree>
 80111bc:	e5dc      	b.n	8010d78 <_strtod_l+0x88>
 80111be:	4b36      	ldr	r3, [pc, #216]	; (8011298 <_strtod_l+0x5a8>)
 80111c0:	9304      	str	r3, [sp, #16]
 80111c2:	2300      	movs	r3, #0
 80111c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80111c8:	4650      	mov	r0, sl
 80111ca:	4659      	mov	r1, fp
 80111cc:	4699      	mov	r9, r3
 80111ce:	f1b8 0f01 	cmp.w	r8, #1
 80111d2:	dc21      	bgt.n	8011218 <_strtod_l+0x528>
 80111d4:	b10b      	cbz	r3, 80111da <_strtod_l+0x4ea>
 80111d6:	4682      	mov	sl, r0
 80111d8:	468b      	mov	fp, r1
 80111da:	4b2f      	ldr	r3, [pc, #188]	; (8011298 <_strtod_l+0x5a8>)
 80111dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80111e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80111e4:	4652      	mov	r2, sl
 80111e6:	465b      	mov	r3, fp
 80111e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80111ec:	f7ef fb46 	bl	800087c <__aeabi_dmul>
 80111f0:	4b2a      	ldr	r3, [pc, #168]	; (801129c <_strtod_l+0x5ac>)
 80111f2:	460a      	mov	r2, r1
 80111f4:	400b      	ands	r3, r1
 80111f6:	492a      	ldr	r1, [pc, #168]	; (80112a0 <_strtod_l+0x5b0>)
 80111f8:	428b      	cmp	r3, r1
 80111fa:	4682      	mov	sl, r0
 80111fc:	d8bc      	bhi.n	8011178 <_strtod_l+0x488>
 80111fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011202:	428b      	cmp	r3, r1
 8011204:	bf86      	itte	hi
 8011206:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80112a4 <_strtod_l+0x5b4>
 801120a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801120e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011212:	2300      	movs	r3, #0
 8011214:	9304      	str	r3, [sp, #16]
 8011216:	e084      	b.n	8011322 <_strtod_l+0x632>
 8011218:	f018 0f01 	tst.w	r8, #1
 801121c:	d005      	beq.n	801122a <_strtod_l+0x53a>
 801121e:	9b04      	ldr	r3, [sp, #16]
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	f7ef fb2a 	bl	800087c <__aeabi_dmul>
 8011228:	2301      	movs	r3, #1
 801122a:	9a04      	ldr	r2, [sp, #16]
 801122c:	3208      	adds	r2, #8
 801122e:	f109 0901 	add.w	r9, r9, #1
 8011232:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011236:	9204      	str	r2, [sp, #16]
 8011238:	e7c9      	b.n	80111ce <_strtod_l+0x4de>
 801123a:	d0ea      	beq.n	8011212 <_strtod_l+0x522>
 801123c:	f1c8 0800 	rsb	r8, r8, #0
 8011240:	f018 020f 	ands.w	r2, r8, #15
 8011244:	d00a      	beq.n	801125c <_strtod_l+0x56c>
 8011246:	4b13      	ldr	r3, [pc, #76]	; (8011294 <_strtod_l+0x5a4>)
 8011248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801124c:	4650      	mov	r0, sl
 801124e:	4659      	mov	r1, fp
 8011250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011254:	f7ef fc3c 	bl	8000ad0 <__aeabi_ddiv>
 8011258:	4682      	mov	sl, r0
 801125a:	468b      	mov	fp, r1
 801125c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011260:	d0d7      	beq.n	8011212 <_strtod_l+0x522>
 8011262:	f1b8 0f1f 	cmp.w	r8, #31
 8011266:	dd1f      	ble.n	80112a8 <_strtod_l+0x5b8>
 8011268:	2500      	movs	r5, #0
 801126a:	462e      	mov	r6, r5
 801126c:	9507      	str	r5, [sp, #28]
 801126e:	9505      	str	r5, [sp, #20]
 8011270:	2322      	movs	r3, #34	; 0x22
 8011272:	f04f 0a00 	mov.w	sl, #0
 8011276:	f04f 0b00 	mov.w	fp, #0
 801127a:	6023      	str	r3, [r4, #0]
 801127c:	e786      	b.n	801118c <_strtod_l+0x49c>
 801127e:	bf00      	nop
 8011280:	08017ade 	.word	0x08017ade
 8011284:	08017af8 	.word	0x08017af8
 8011288:	08017ad5 	.word	0x08017ad5
 801128c:	08017ad8 	.word	0x08017ad8
 8011290:	08017d8a 	.word	0x08017d8a
 8011294:	08017c60 	.word	0x08017c60
 8011298:	08017c38 	.word	0x08017c38
 801129c:	7ff00000 	.word	0x7ff00000
 80112a0:	7ca00000 	.word	0x7ca00000
 80112a4:	7fefffff 	.word	0x7fefffff
 80112a8:	f018 0310 	ands.w	r3, r8, #16
 80112ac:	bf18      	it	ne
 80112ae:	236a      	movne	r3, #106	; 0x6a
 80112b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011660 <_strtod_l+0x970>
 80112b4:	9304      	str	r3, [sp, #16]
 80112b6:	4650      	mov	r0, sl
 80112b8:	4659      	mov	r1, fp
 80112ba:	2300      	movs	r3, #0
 80112bc:	f018 0f01 	tst.w	r8, #1
 80112c0:	d004      	beq.n	80112cc <_strtod_l+0x5dc>
 80112c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80112c6:	f7ef fad9 	bl	800087c <__aeabi_dmul>
 80112ca:	2301      	movs	r3, #1
 80112cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80112d0:	f109 0908 	add.w	r9, r9, #8
 80112d4:	d1f2      	bne.n	80112bc <_strtod_l+0x5cc>
 80112d6:	b10b      	cbz	r3, 80112dc <_strtod_l+0x5ec>
 80112d8:	4682      	mov	sl, r0
 80112da:	468b      	mov	fp, r1
 80112dc:	9b04      	ldr	r3, [sp, #16]
 80112de:	b1c3      	cbz	r3, 8011312 <_strtod_l+0x622>
 80112e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80112e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	4659      	mov	r1, fp
 80112ec:	dd11      	ble.n	8011312 <_strtod_l+0x622>
 80112ee:	2b1f      	cmp	r3, #31
 80112f0:	f340 8124 	ble.w	801153c <_strtod_l+0x84c>
 80112f4:	2b34      	cmp	r3, #52	; 0x34
 80112f6:	bfde      	ittt	le
 80112f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80112fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8011300:	fa03 f202 	lslle.w	r2, r3, r2
 8011304:	f04f 0a00 	mov.w	sl, #0
 8011308:	bfcc      	ite	gt
 801130a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801130e:	ea02 0b01 	andle.w	fp, r2, r1
 8011312:	2200      	movs	r2, #0
 8011314:	2300      	movs	r3, #0
 8011316:	4650      	mov	r0, sl
 8011318:	4659      	mov	r1, fp
 801131a:	f7ef fd17 	bl	8000d4c <__aeabi_dcmpeq>
 801131e:	2800      	cmp	r0, #0
 8011320:	d1a2      	bne.n	8011268 <_strtod_l+0x578>
 8011322:	9b07      	ldr	r3, [sp, #28]
 8011324:	9300      	str	r3, [sp, #0]
 8011326:	9908      	ldr	r1, [sp, #32]
 8011328:	462b      	mov	r3, r5
 801132a:	463a      	mov	r2, r7
 801132c:	4620      	mov	r0, r4
 801132e:	f001 f901 	bl	8012534 <__s2b>
 8011332:	9007      	str	r0, [sp, #28]
 8011334:	2800      	cmp	r0, #0
 8011336:	f43f af1f 	beq.w	8011178 <_strtod_l+0x488>
 801133a:	9b05      	ldr	r3, [sp, #20]
 801133c:	1b9e      	subs	r6, r3, r6
 801133e:	9b06      	ldr	r3, [sp, #24]
 8011340:	2b00      	cmp	r3, #0
 8011342:	bfb4      	ite	lt
 8011344:	4633      	movlt	r3, r6
 8011346:	2300      	movge	r3, #0
 8011348:	930c      	str	r3, [sp, #48]	; 0x30
 801134a:	9b06      	ldr	r3, [sp, #24]
 801134c:	2500      	movs	r5, #0
 801134e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011352:	9312      	str	r3, [sp, #72]	; 0x48
 8011354:	462e      	mov	r6, r5
 8011356:	9b07      	ldr	r3, [sp, #28]
 8011358:	4620      	mov	r0, r4
 801135a:	6859      	ldr	r1, [r3, #4]
 801135c:	f001 f842 	bl	80123e4 <_Balloc>
 8011360:	9005      	str	r0, [sp, #20]
 8011362:	2800      	cmp	r0, #0
 8011364:	f43f af0c 	beq.w	8011180 <_strtod_l+0x490>
 8011368:	9b07      	ldr	r3, [sp, #28]
 801136a:	691a      	ldr	r2, [r3, #16]
 801136c:	3202      	adds	r2, #2
 801136e:	f103 010c 	add.w	r1, r3, #12
 8011372:	0092      	lsls	r2, r2, #2
 8011374:	300c      	adds	r0, #12
 8011376:	f7fe fbc5 	bl	800fb04 <memcpy>
 801137a:	ec4b ab10 	vmov	d0, sl, fp
 801137e:	aa1a      	add	r2, sp, #104	; 0x68
 8011380:	a919      	add	r1, sp, #100	; 0x64
 8011382:	4620      	mov	r0, r4
 8011384:	f001 fc1c 	bl	8012bc0 <__d2b>
 8011388:	ec4b ab18 	vmov	d8, sl, fp
 801138c:	9018      	str	r0, [sp, #96]	; 0x60
 801138e:	2800      	cmp	r0, #0
 8011390:	f43f aef6 	beq.w	8011180 <_strtod_l+0x490>
 8011394:	2101      	movs	r1, #1
 8011396:	4620      	mov	r0, r4
 8011398:	f001 f966 	bl	8012668 <__i2b>
 801139c:	4606      	mov	r6, r0
 801139e:	2800      	cmp	r0, #0
 80113a0:	f43f aeee 	beq.w	8011180 <_strtod_l+0x490>
 80113a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113a6:	9904      	ldr	r1, [sp, #16]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	bfab      	itete	ge
 80113ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80113ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80113b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80113b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80113b6:	bfac      	ite	ge
 80113b8:	eb03 0902 	addge.w	r9, r3, r2
 80113bc:	1ad7      	sublt	r7, r2, r3
 80113be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80113c0:	eba3 0801 	sub.w	r8, r3, r1
 80113c4:	4490      	add	r8, r2
 80113c6:	4ba1      	ldr	r3, [pc, #644]	; (801164c <_strtod_l+0x95c>)
 80113c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80113cc:	4598      	cmp	r8, r3
 80113ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80113d2:	f280 80c7 	bge.w	8011564 <_strtod_l+0x874>
 80113d6:	eba3 0308 	sub.w	r3, r3, r8
 80113da:	2b1f      	cmp	r3, #31
 80113dc:	eba2 0203 	sub.w	r2, r2, r3
 80113e0:	f04f 0101 	mov.w	r1, #1
 80113e4:	f300 80b1 	bgt.w	801154a <_strtod_l+0x85a>
 80113e8:	fa01 f303 	lsl.w	r3, r1, r3
 80113ec:	930d      	str	r3, [sp, #52]	; 0x34
 80113ee:	2300      	movs	r3, #0
 80113f0:	9308      	str	r3, [sp, #32]
 80113f2:	eb09 0802 	add.w	r8, r9, r2
 80113f6:	9b04      	ldr	r3, [sp, #16]
 80113f8:	45c1      	cmp	r9, r8
 80113fa:	4417      	add	r7, r2
 80113fc:	441f      	add	r7, r3
 80113fe:	464b      	mov	r3, r9
 8011400:	bfa8      	it	ge
 8011402:	4643      	movge	r3, r8
 8011404:	42bb      	cmp	r3, r7
 8011406:	bfa8      	it	ge
 8011408:	463b      	movge	r3, r7
 801140a:	2b00      	cmp	r3, #0
 801140c:	bfc2      	ittt	gt
 801140e:	eba8 0803 	subgt.w	r8, r8, r3
 8011412:	1aff      	subgt	r7, r7, r3
 8011414:	eba9 0903 	subgt.w	r9, r9, r3
 8011418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801141a:	2b00      	cmp	r3, #0
 801141c:	dd17      	ble.n	801144e <_strtod_l+0x75e>
 801141e:	4631      	mov	r1, r6
 8011420:	461a      	mov	r2, r3
 8011422:	4620      	mov	r0, r4
 8011424:	f001 f9e0 	bl	80127e8 <__pow5mult>
 8011428:	4606      	mov	r6, r0
 801142a:	2800      	cmp	r0, #0
 801142c:	f43f aea8 	beq.w	8011180 <_strtod_l+0x490>
 8011430:	4601      	mov	r1, r0
 8011432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011434:	4620      	mov	r0, r4
 8011436:	f001 f92d 	bl	8012694 <__multiply>
 801143a:	900b      	str	r0, [sp, #44]	; 0x2c
 801143c:	2800      	cmp	r0, #0
 801143e:	f43f ae9f 	beq.w	8011180 <_strtod_l+0x490>
 8011442:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011444:	4620      	mov	r0, r4
 8011446:	f001 f80d 	bl	8012464 <_Bfree>
 801144a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801144c:	9318      	str	r3, [sp, #96]	; 0x60
 801144e:	f1b8 0f00 	cmp.w	r8, #0
 8011452:	f300 808c 	bgt.w	801156e <_strtod_l+0x87e>
 8011456:	9b06      	ldr	r3, [sp, #24]
 8011458:	2b00      	cmp	r3, #0
 801145a:	dd08      	ble.n	801146e <_strtod_l+0x77e>
 801145c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801145e:	9905      	ldr	r1, [sp, #20]
 8011460:	4620      	mov	r0, r4
 8011462:	f001 f9c1 	bl	80127e8 <__pow5mult>
 8011466:	9005      	str	r0, [sp, #20]
 8011468:	2800      	cmp	r0, #0
 801146a:	f43f ae89 	beq.w	8011180 <_strtod_l+0x490>
 801146e:	2f00      	cmp	r7, #0
 8011470:	dd08      	ble.n	8011484 <_strtod_l+0x794>
 8011472:	9905      	ldr	r1, [sp, #20]
 8011474:	463a      	mov	r2, r7
 8011476:	4620      	mov	r0, r4
 8011478:	f001 fa10 	bl	801289c <__lshift>
 801147c:	9005      	str	r0, [sp, #20]
 801147e:	2800      	cmp	r0, #0
 8011480:	f43f ae7e 	beq.w	8011180 <_strtod_l+0x490>
 8011484:	f1b9 0f00 	cmp.w	r9, #0
 8011488:	dd08      	ble.n	801149c <_strtod_l+0x7ac>
 801148a:	4631      	mov	r1, r6
 801148c:	464a      	mov	r2, r9
 801148e:	4620      	mov	r0, r4
 8011490:	f001 fa04 	bl	801289c <__lshift>
 8011494:	4606      	mov	r6, r0
 8011496:	2800      	cmp	r0, #0
 8011498:	f43f ae72 	beq.w	8011180 <_strtod_l+0x490>
 801149c:	9a05      	ldr	r2, [sp, #20]
 801149e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80114a0:	4620      	mov	r0, r4
 80114a2:	f001 fa87 	bl	80129b4 <__mdiff>
 80114a6:	4605      	mov	r5, r0
 80114a8:	2800      	cmp	r0, #0
 80114aa:	f43f ae69 	beq.w	8011180 <_strtod_l+0x490>
 80114ae:	68c3      	ldr	r3, [r0, #12]
 80114b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80114b2:	2300      	movs	r3, #0
 80114b4:	60c3      	str	r3, [r0, #12]
 80114b6:	4631      	mov	r1, r6
 80114b8:	f001 fa60 	bl	801297c <__mcmp>
 80114bc:	2800      	cmp	r0, #0
 80114be:	da60      	bge.n	8011582 <_strtod_l+0x892>
 80114c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c2:	ea53 030a 	orrs.w	r3, r3, sl
 80114c6:	f040 8082 	bne.w	80115ce <_strtod_l+0x8de>
 80114ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d17d      	bne.n	80115ce <_strtod_l+0x8de>
 80114d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114d6:	0d1b      	lsrs	r3, r3, #20
 80114d8:	051b      	lsls	r3, r3, #20
 80114da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114de:	d976      	bls.n	80115ce <_strtod_l+0x8de>
 80114e0:	696b      	ldr	r3, [r5, #20]
 80114e2:	b913      	cbnz	r3, 80114ea <_strtod_l+0x7fa>
 80114e4:	692b      	ldr	r3, [r5, #16]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	dd71      	ble.n	80115ce <_strtod_l+0x8de>
 80114ea:	4629      	mov	r1, r5
 80114ec:	2201      	movs	r2, #1
 80114ee:	4620      	mov	r0, r4
 80114f0:	f001 f9d4 	bl	801289c <__lshift>
 80114f4:	4631      	mov	r1, r6
 80114f6:	4605      	mov	r5, r0
 80114f8:	f001 fa40 	bl	801297c <__mcmp>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	dd66      	ble.n	80115ce <_strtod_l+0x8de>
 8011500:	9904      	ldr	r1, [sp, #16]
 8011502:	4a53      	ldr	r2, [pc, #332]	; (8011650 <_strtod_l+0x960>)
 8011504:	465b      	mov	r3, fp
 8011506:	2900      	cmp	r1, #0
 8011508:	f000 8081 	beq.w	801160e <_strtod_l+0x91e>
 801150c:	ea02 010b 	and.w	r1, r2, fp
 8011510:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011514:	dc7b      	bgt.n	801160e <_strtod_l+0x91e>
 8011516:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801151a:	f77f aea9 	ble.w	8011270 <_strtod_l+0x580>
 801151e:	4b4d      	ldr	r3, [pc, #308]	; (8011654 <_strtod_l+0x964>)
 8011520:	4650      	mov	r0, sl
 8011522:	4659      	mov	r1, fp
 8011524:	2200      	movs	r2, #0
 8011526:	f7ef f9a9 	bl	800087c <__aeabi_dmul>
 801152a:	460b      	mov	r3, r1
 801152c:	4303      	orrs	r3, r0
 801152e:	bf08      	it	eq
 8011530:	2322      	moveq	r3, #34	; 0x22
 8011532:	4682      	mov	sl, r0
 8011534:	468b      	mov	fp, r1
 8011536:	bf08      	it	eq
 8011538:	6023      	streq	r3, [r4, #0]
 801153a:	e62b      	b.n	8011194 <_strtod_l+0x4a4>
 801153c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011540:	fa02 f303 	lsl.w	r3, r2, r3
 8011544:	ea03 0a0a 	and.w	sl, r3, sl
 8011548:	e6e3      	b.n	8011312 <_strtod_l+0x622>
 801154a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801154e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801155a:	fa01 f308 	lsl.w	r3, r1, r8
 801155e:	9308      	str	r3, [sp, #32]
 8011560:	910d      	str	r1, [sp, #52]	; 0x34
 8011562:	e746      	b.n	80113f2 <_strtod_l+0x702>
 8011564:	2300      	movs	r3, #0
 8011566:	9308      	str	r3, [sp, #32]
 8011568:	2301      	movs	r3, #1
 801156a:	930d      	str	r3, [sp, #52]	; 0x34
 801156c:	e741      	b.n	80113f2 <_strtod_l+0x702>
 801156e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011570:	4642      	mov	r2, r8
 8011572:	4620      	mov	r0, r4
 8011574:	f001 f992 	bl	801289c <__lshift>
 8011578:	9018      	str	r0, [sp, #96]	; 0x60
 801157a:	2800      	cmp	r0, #0
 801157c:	f47f af6b 	bne.w	8011456 <_strtod_l+0x766>
 8011580:	e5fe      	b.n	8011180 <_strtod_l+0x490>
 8011582:	465f      	mov	r7, fp
 8011584:	d16e      	bne.n	8011664 <_strtod_l+0x974>
 8011586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801158c:	b342      	cbz	r2, 80115e0 <_strtod_l+0x8f0>
 801158e:	4a32      	ldr	r2, [pc, #200]	; (8011658 <_strtod_l+0x968>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d128      	bne.n	80115e6 <_strtod_l+0x8f6>
 8011594:	9b04      	ldr	r3, [sp, #16]
 8011596:	4651      	mov	r1, sl
 8011598:	b1eb      	cbz	r3, 80115d6 <_strtod_l+0x8e6>
 801159a:	4b2d      	ldr	r3, [pc, #180]	; (8011650 <_strtod_l+0x960>)
 801159c:	403b      	ands	r3, r7
 801159e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115a6:	d819      	bhi.n	80115dc <_strtod_l+0x8ec>
 80115a8:	0d1b      	lsrs	r3, r3, #20
 80115aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80115ae:	fa02 f303 	lsl.w	r3, r2, r3
 80115b2:	4299      	cmp	r1, r3
 80115b4:	d117      	bne.n	80115e6 <_strtod_l+0x8f6>
 80115b6:	4b29      	ldr	r3, [pc, #164]	; (801165c <_strtod_l+0x96c>)
 80115b8:	429f      	cmp	r7, r3
 80115ba:	d102      	bne.n	80115c2 <_strtod_l+0x8d2>
 80115bc:	3101      	adds	r1, #1
 80115be:	f43f addf 	beq.w	8011180 <_strtod_l+0x490>
 80115c2:	4b23      	ldr	r3, [pc, #140]	; (8011650 <_strtod_l+0x960>)
 80115c4:	403b      	ands	r3, r7
 80115c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80115ca:	f04f 0a00 	mov.w	sl, #0
 80115ce:	9b04      	ldr	r3, [sp, #16]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d1a4      	bne.n	801151e <_strtod_l+0x82e>
 80115d4:	e5de      	b.n	8011194 <_strtod_l+0x4a4>
 80115d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115da:	e7ea      	b.n	80115b2 <_strtod_l+0x8c2>
 80115dc:	4613      	mov	r3, r2
 80115de:	e7e8      	b.n	80115b2 <_strtod_l+0x8c2>
 80115e0:	ea53 030a 	orrs.w	r3, r3, sl
 80115e4:	d08c      	beq.n	8011500 <_strtod_l+0x810>
 80115e6:	9b08      	ldr	r3, [sp, #32]
 80115e8:	b1db      	cbz	r3, 8011622 <_strtod_l+0x932>
 80115ea:	423b      	tst	r3, r7
 80115ec:	d0ef      	beq.n	80115ce <_strtod_l+0x8de>
 80115ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115f0:	9a04      	ldr	r2, [sp, #16]
 80115f2:	4650      	mov	r0, sl
 80115f4:	4659      	mov	r1, fp
 80115f6:	b1c3      	cbz	r3, 801162a <_strtod_l+0x93a>
 80115f8:	f7ff fb5d 	bl	8010cb6 <sulp>
 80115fc:	4602      	mov	r2, r0
 80115fe:	460b      	mov	r3, r1
 8011600:	ec51 0b18 	vmov	r0, r1, d8
 8011604:	f7ee ff84 	bl	8000510 <__adddf3>
 8011608:	4682      	mov	sl, r0
 801160a:	468b      	mov	fp, r1
 801160c:	e7df      	b.n	80115ce <_strtod_l+0x8de>
 801160e:	4013      	ands	r3, r2
 8011610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801161c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011620:	e7d5      	b.n	80115ce <_strtod_l+0x8de>
 8011622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011624:	ea13 0f0a 	tst.w	r3, sl
 8011628:	e7e0      	b.n	80115ec <_strtod_l+0x8fc>
 801162a:	f7ff fb44 	bl	8010cb6 <sulp>
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	ec51 0b18 	vmov	r0, r1, d8
 8011636:	f7ee ff69 	bl	800050c <__aeabi_dsub>
 801163a:	2200      	movs	r2, #0
 801163c:	2300      	movs	r3, #0
 801163e:	4682      	mov	sl, r0
 8011640:	468b      	mov	fp, r1
 8011642:	f7ef fb83 	bl	8000d4c <__aeabi_dcmpeq>
 8011646:	2800      	cmp	r0, #0
 8011648:	d0c1      	beq.n	80115ce <_strtod_l+0x8de>
 801164a:	e611      	b.n	8011270 <_strtod_l+0x580>
 801164c:	fffffc02 	.word	0xfffffc02
 8011650:	7ff00000 	.word	0x7ff00000
 8011654:	39500000 	.word	0x39500000
 8011658:	000fffff 	.word	0x000fffff
 801165c:	7fefffff 	.word	0x7fefffff
 8011660:	08017b10 	.word	0x08017b10
 8011664:	4631      	mov	r1, r6
 8011666:	4628      	mov	r0, r5
 8011668:	f001 fb06 	bl	8012c78 <__ratio>
 801166c:	ec59 8b10 	vmov	r8, r9, d0
 8011670:	ee10 0a10 	vmov	r0, s0
 8011674:	2200      	movs	r2, #0
 8011676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801167a:	4649      	mov	r1, r9
 801167c:	f7ef fb7a 	bl	8000d74 <__aeabi_dcmple>
 8011680:	2800      	cmp	r0, #0
 8011682:	d07a      	beq.n	801177a <_strtod_l+0xa8a>
 8011684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011686:	2b00      	cmp	r3, #0
 8011688:	d04a      	beq.n	8011720 <_strtod_l+0xa30>
 801168a:	4b95      	ldr	r3, [pc, #596]	; (80118e0 <_strtod_l+0xbf0>)
 801168c:	2200      	movs	r2, #0
 801168e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80118e0 <_strtod_l+0xbf0>
 8011696:	f04f 0800 	mov.w	r8, #0
 801169a:	4b92      	ldr	r3, [pc, #584]	; (80118e4 <_strtod_l+0xbf4>)
 801169c:	403b      	ands	r3, r7
 801169e:	930d      	str	r3, [sp, #52]	; 0x34
 80116a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116a2:	4b91      	ldr	r3, [pc, #580]	; (80118e8 <_strtod_l+0xbf8>)
 80116a4:	429a      	cmp	r2, r3
 80116a6:	f040 80b0 	bne.w	801180a <_strtod_l+0xb1a>
 80116aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80116ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80116b2:	ec4b ab10 	vmov	d0, sl, fp
 80116b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80116ba:	f001 fa05 	bl	8012ac8 <__ulp>
 80116be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80116c2:	ec53 2b10 	vmov	r2, r3, d0
 80116c6:	f7ef f8d9 	bl	800087c <__aeabi_dmul>
 80116ca:	4652      	mov	r2, sl
 80116cc:	465b      	mov	r3, fp
 80116ce:	f7ee ff1f 	bl	8000510 <__adddf3>
 80116d2:	460b      	mov	r3, r1
 80116d4:	4983      	ldr	r1, [pc, #524]	; (80118e4 <_strtod_l+0xbf4>)
 80116d6:	4a85      	ldr	r2, [pc, #532]	; (80118ec <_strtod_l+0xbfc>)
 80116d8:	4019      	ands	r1, r3
 80116da:	4291      	cmp	r1, r2
 80116dc:	4682      	mov	sl, r0
 80116de:	d960      	bls.n	80117a2 <_strtod_l+0xab2>
 80116e0:	ee18 3a90 	vmov	r3, s17
 80116e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d104      	bne.n	80116f6 <_strtod_l+0xa06>
 80116ec:	ee18 3a10 	vmov	r3, s16
 80116f0:	3301      	adds	r3, #1
 80116f2:	f43f ad45 	beq.w	8011180 <_strtod_l+0x490>
 80116f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80118f8 <_strtod_l+0xc08>
 80116fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80116fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011700:	4620      	mov	r0, r4
 8011702:	f000 feaf 	bl	8012464 <_Bfree>
 8011706:	9905      	ldr	r1, [sp, #20]
 8011708:	4620      	mov	r0, r4
 801170a:	f000 feab 	bl	8012464 <_Bfree>
 801170e:	4631      	mov	r1, r6
 8011710:	4620      	mov	r0, r4
 8011712:	f000 fea7 	bl	8012464 <_Bfree>
 8011716:	4629      	mov	r1, r5
 8011718:	4620      	mov	r0, r4
 801171a:	f000 fea3 	bl	8012464 <_Bfree>
 801171e:	e61a      	b.n	8011356 <_strtod_l+0x666>
 8011720:	f1ba 0f00 	cmp.w	sl, #0
 8011724:	d11b      	bne.n	801175e <_strtod_l+0xa6e>
 8011726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801172a:	b9f3      	cbnz	r3, 801176a <_strtod_l+0xa7a>
 801172c:	4b6c      	ldr	r3, [pc, #432]	; (80118e0 <_strtod_l+0xbf0>)
 801172e:	2200      	movs	r2, #0
 8011730:	4640      	mov	r0, r8
 8011732:	4649      	mov	r1, r9
 8011734:	f7ef fb14 	bl	8000d60 <__aeabi_dcmplt>
 8011738:	b9d0      	cbnz	r0, 8011770 <_strtod_l+0xa80>
 801173a:	4640      	mov	r0, r8
 801173c:	4649      	mov	r1, r9
 801173e:	4b6c      	ldr	r3, [pc, #432]	; (80118f0 <_strtod_l+0xc00>)
 8011740:	2200      	movs	r2, #0
 8011742:	f7ef f89b 	bl	800087c <__aeabi_dmul>
 8011746:	4680      	mov	r8, r0
 8011748:	4689      	mov	r9, r1
 801174a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801174e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011752:	9315      	str	r3, [sp, #84]	; 0x54
 8011754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801175c:	e79d      	b.n	801169a <_strtod_l+0x9aa>
 801175e:	f1ba 0f01 	cmp.w	sl, #1
 8011762:	d102      	bne.n	801176a <_strtod_l+0xa7a>
 8011764:	2f00      	cmp	r7, #0
 8011766:	f43f ad83 	beq.w	8011270 <_strtod_l+0x580>
 801176a:	4b62      	ldr	r3, [pc, #392]	; (80118f4 <_strtod_l+0xc04>)
 801176c:	2200      	movs	r2, #0
 801176e:	e78e      	b.n	801168e <_strtod_l+0x99e>
 8011770:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80118f0 <_strtod_l+0xc00>
 8011774:	f04f 0800 	mov.w	r8, #0
 8011778:	e7e7      	b.n	801174a <_strtod_l+0xa5a>
 801177a:	4b5d      	ldr	r3, [pc, #372]	; (80118f0 <_strtod_l+0xc00>)
 801177c:	4640      	mov	r0, r8
 801177e:	4649      	mov	r1, r9
 8011780:	2200      	movs	r2, #0
 8011782:	f7ef f87b 	bl	800087c <__aeabi_dmul>
 8011786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011788:	4680      	mov	r8, r0
 801178a:	4689      	mov	r9, r1
 801178c:	b933      	cbnz	r3, 801179c <_strtod_l+0xaac>
 801178e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011792:	900e      	str	r0, [sp, #56]	; 0x38
 8011794:	930f      	str	r3, [sp, #60]	; 0x3c
 8011796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801179a:	e7dd      	b.n	8011758 <_strtod_l+0xa68>
 801179c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80117a0:	e7f9      	b.n	8011796 <_strtod_l+0xaa6>
 80117a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80117a6:	9b04      	ldr	r3, [sp, #16]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1a8      	bne.n	80116fe <_strtod_l+0xa0e>
 80117ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80117b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117b2:	0d1b      	lsrs	r3, r3, #20
 80117b4:	051b      	lsls	r3, r3, #20
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d1a1      	bne.n	80116fe <_strtod_l+0xa0e>
 80117ba:	4640      	mov	r0, r8
 80117bc:	4649      	mov	r1, r9
 80117be:	f7ef fb2f 	bl	8000e20 <__aeabi_d2lz>
 80117c2:	f7ef f82d 	bl	8000820 <__aeabi_l2d>
 80117c6:	4602      	mov	r2, r0
 80117c8:	460b      	mov	r3, r1
 80117ca:	4640      	mov	r0, r8
 80117cc:	4649      	mov	r1, r9
 80117ce:	f7ee fe9d 	bl	800050c <__aeabi_dsub>
 80117d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117d8:	ea43 030a 	orr.w	r3, r3, sl
 80117dc:	4313      	orrs	r3, r2
 80117de:	4680      	mov	r8, r0
 80117e0:	4689      	mov	r9, r1
 80117e2:	d055      	beq.n	8011890 <_strtod_l+0xba0>
 80117e4:	a336      	add	r3, pc, #216	; (adr r3, 80118c0 <_strtod_l+0xbd0>)
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	f7ef fab9 	bl	8000d60 <__aeabi_dcmplt>
 80117ee:	2800      	cmp	r0, #0
 80117f0:	f47f acd0 	bne.w	8011194 <_strtod_l+0x4a4>
 80117f4:	a334      	add	r3, pc, #208	; (adr r3, 80118c8 <_strtod_l+0xbd8>)
 80117f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fa:	4640      	mov	r0, r8
 80117fc:	4649      	mov	r1, r9
 80117fe:	f7ef facd 	bl	8000d9c <__aeabi_dcmpgt>
 8011802:	2800      	cmp	r0, #0
 8011804:	f43f af7b 	beq.w	80116fe <_strtod_l+0xa0e>
 8011808:	e4c4      	b.n	8011194 <_strtod_l+0x4a4>
 801180a:	9b04      	ldr	r3, [sp, #16]
 801180c:	b333      	cbz	r3, 801185c <_strtod_l+0xb6c>
 801180e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011810:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011814:	d822      	bhi.n	801185c <_strtod_l+0xb6c>
 8011816:	a32e      	add	r3, pc, #184	; (adr r3, 80118d0 <_strtod_l+0xbe0>)
 8011818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181c:	4640      	mov	r0, r8
 801181e:	4649      	mov	r1, r9
 8011820:	f7ef faa8 	bl	8000d74 <__aeabi_dcmple>
 8011824:	b1a0      	cbz	r0, 8011850 <_strtod_l+0xb60>
 8011826:	4649      	mov	r1, r9
 8011828:	4640      	mov	r0, r8
 801182a:	f7ef fac1 	bl	8000db0 <__aeabi_d2uiz>
 801182e:	2801      	cmp	r0, #1
 8011830:	bf38      	it	cc
 8011832:	2001      	movcc	r0, #1
 8011834:	f7ee ffa8 	bl	8000788 <__aeabi_ui2d>
 8011838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801183a:	4680      	mov	r8, r0
 801183c:	4689      	mov	r9, r1
 801183e:	bb23      	cbnz	r3, 801188a <_strtod_l+0xb9a>
 8011840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011844:	9010      	str	r0, [sp, #64]	; 0x40
 8011846:	9311      	str	r3, [sp, #68]	; 0x44
 8011848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801184c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011854:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011858:	1a9b      	subs	r3, r3, r2
 801185a:	9309      	str	r3, [sp, #36]	; 0x24
 801185c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011860:	eeb0 0a48 	vmov.f32	s0, s16
 8011864:	eef0 0a68 	vmov.f32	s1, s17
 8011868:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801186c:	f001 f92c 	bl	8012ac8 <__ulp>
 8011870:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011874:	ec53 2b10 	vmov	r2, r3, d0
 8011878:	f7ef f800 	bl	800087c <__aeabi_dmul>
 801187c:	ec53 2b18 	vmov	r2, r3, d8
 8011880:	f7ee fe46 	bl	8000510 <__adddf3>
 8011884:	4682      	mov	sl, r0
 8011886:	468b      	mov	fp, r1
 8011888:	e78d      	b.n	80117a6 <_strtod_l+0xab6>
 801188a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801188e:	e7db      	b.n	8011848 <_strtod_l+0xb58>
 8011890:	a311      	add	r3, pc, #68	; (adr r3, 80118d8 <_strtod_l+0xbe8>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ef fa63 	bl	8000d60 <__aeabi_dcmplt>
 801189a:	e7b2      	b.n	8011802 <_strtod_l+0xb12>
 801189c:	2300      	movs	r3, #0
 801189e:	930a      	str	r3, [sp, #40]	; 0x28
 80118a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80118a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118a4:	6013      	str	r3, [r2, #0]
 80118a6:	f7ff ba6b 	b.w	8010d80 <_strtod_l+0x90>
 80118aa:	2a65      	cmp	r2, #101	; 0x65
 80118ac:	f43f ab5f 	beq.w	8010f6e <_strtod_l+0x27e>
 80118b0:	2a45      	cmp	r2, #69	; 0x45
 80118b2:	f43f ab5c 	beq.w	8010f6e <_strtod_l+0x27e>
 80118b6:	2301      	movs	r3, #1
 80118b8:	f7ff bb94 	b.w	8010fe4 <_strtod_l+0x2f4>
 80118bc:	f3af 8000 	nop.w
 80118c0:	94a03595 	.word	0x94a03595
 80118c4:	3fdfffff 	.word	0x3fdfffff
 80118c8:	35afe535 	.word	0x35afe535
 80118cc:	3fe00000 	.word	0x3fe00000
 80118d0:	ffc00000 	.word	0xffc00000
 80118d4:	41dfffff 	.word	0x41dfffff
 80118d8:	94a03595 	.word	0x94a03595
 80118dc:	3fcfffff 	.word	0x3fcfffff
 80118e0:	3ff00000 	.word	0x3ff00000
 80118e4:	7ff00000 	.word	0x7ff00000
 80118e8:	7fe00000 	.word	0x7fe00000
 80118ec:	7c9fffff 	.word	0x7c9fffff
 80118f0:	3fe00000 	.word	0x3fe00000
 80118f4:	bff00000 	.word	0xbff00000
 80118f8:	7fefffff 	.word	0x7fefffff

080118fc <strtod>:
 80118fc:	460a      	mov	r2, r1
 80118fe:	4601      	mov	r1, r0
 8011900:	4802      	ldr	r0, [pc, #8]	; (801190c <strtod+0x10>)
 8011902:	4b03      	ldr	r3, [pc, #12]	; (8011910 <strtod+0x14>)
 8011904:	6800      	ldr	r0, [r0, #0]
 8011906:	f7ff b9f3 	b.w	8010cf0 <_strtod_l>
 801190a:	bf00      	nop
 801190c:	20000074 	.word	0x20000074
 8011910:	200000dc 	.word	0x200000dc

08011914 <_strtol_l.constprop.0>:
 8011914:	2b01      	cmp	r3, #1
 8011916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801191a:	d001      	beq.n	8011920 <_strtol_l.constprop.0+0xc>
 801191c:	2b24      	cmp	r3, #36	; 0x24
 801191e:	d906      	bls.n	801192e <_strtol_l.constprop.0+0x1a>
 8011920:	f7fd fdc6 	bl	800f4b0 <__errno>
 8011924:	2316      	movs	r3, #22
 8011926:	6003      	str	r3, [r0, #0]
 8011928:	2000      	movs	r0, #0
 801192a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801192e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011a14 <_strtol_l.constprop.0+0x100>
 8011932:	460d      	mov	r5, r1
 8011934:	462e      	mov	r6, r5
 8011936:	f815 4b01 	ldrb.w	r4, [r5], #1
 801193a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801193e:	f017 0708 	ands.w	r7, r7, #8
 8011942:	d1f7      	bne.n	8011934 <_strtol_l.constprop.0+0x20>
 8011944:	2c2d      	cmp	r4, #45	; 0x2d
 8011946:	d132      	bne.n	80119ae <_strtol_l.constprop.0+0x9a>
 8011948:	782c      	ldrb	r4, [r5, #0]
 801194a:	2701      	movs	r7, #1
 801194c:	1cb5      	adds	r5, r6, #2
 801194e:	2b00      	cmp	r3, #0
 8011950:	d05b      	beq.n	8011a0a <_strtol_l.constprop.0+0xf6>
 8011952:	2b10      	cmp	r3, #16
 8011954:	d109      	bne.n	801196a <_strtol_l.constprop.0+0x56>
 8011956:	2c30      	cmp	r4, #48	; 0x30
 8011958:	d107      	bne.n	801196a <_strtol_l.constprop.0+0x56>
 801195a:	782c      	ldrb	r4, [r5, #0]
 801195c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011960:	2c58      	cmp	r4, #88	; 0x58
 8011962:	d14d      	bne.n	8011a00 <_strtol_l.constprop.0+0xec>
 8011964:	786c      	ldrb	r4, [r5, #1]
 8011966:	2310      	movs	r3, #16
 8011968:	3502      	adds	r5, #2
 801196a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801196e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011972:	f04f 0c00 	mov.w	ip, #0
 8011976:	fbb8 f9f3 	udiv	r9, r8, r3
 801197a:	4666      	mov	r6, ip
 801197c:	fb03 8a19 	mls	sl, r3, r9, r8
 8011980:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011984:	f1be 0f09 	cmp.w	lr, #9
 8011988:	d816      	bhi.n	80119b8 <_strtol_l.constprop.0+0xa4>
 801198a:	4674      	mov	r4, lr
 801198c:	42a3      	cmp	r3, r4
 801198e:	dd24      	ble.n	80119da <_strtol_l.constprop.0+0xc6>
 8011990:	f1bc 0f00 	cmp.w	ip, #0
 8011994:	db1e      	blt.n	80119d4 <_strtol_l.constprop.0+0xc0>
 8011996:	45b1      	cmp	r9, r6
 8011998:	d31c      	bcc.n	80119d4 <_strtol_l.constprop.0+0xc0>
 801199a:	d101      	bne.n	80119a0 <_strtol_l.constprop.0+0x8c>
 801199c:	45a2      	cmp	sl, r4
 801199e:	db19      	blt.n	80119d4 <_strtol_l.constprop.0+0xc0>
 80119a0:	fb06 4603 	mla	r6, r6, r3, r4
 80119a4:	f04f 0c01 	mov.w	ip, #1
 80119a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119ac:	e7e8      	b.n	8011980 <_strtol_l.constprop.0+0x6c>
 80119ae:	2c2b      	cmp	r4, #43	; 0x2b
 80119b0:	bf04      	itt	eq
 80119b2:	782c      	ldrbeq	r4, [r5, #0]
 80119b4:	1cb5      	addeq	r5, r6, #2
 80119b6:	e7ca      	b.n	801194e <_strtol_l.constprop.0+0x3a>
 80119b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80119bc:	f1be 0f19 	cmp.w	lr, #25
 80119c0:	d801      	bhi.n	80119c6 <_strtol_l.constprop.0+0xb2>
 80119c2:	3c37      	subs	r4, #55	; 0x37
 80119c4:	e7e2      	b.n	801198c <_strtol_l.constprop.0+0x78>
 80119c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80119ca:	f1be 0f19 	cmp.w	lr, #25
 80119ce:	d804      	bhi.n	80119da <_strtol_l.constprop.0+0xc6>
 80119d0:	3c57      	subs	r4, #87	; 0x57
 80119d2:	e7db      	b.n	801198c <_strtol_l.constprop.0+0x78>
 80119d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80119d8:	e7e6      	b.n	80119a8 <_strtol_l.constprop.0+0x94>
 80119da:	f1bc 0f00 	cmp.w	ip, #0
 80119de:	da05      	bge.n	80119ec <_strtol_l.constprop.0+0xd8>
 80119e0:	2322      	movs	r3, #34	; 0x22
 80119e2:	6003      	str	r3, [r0, #0]
 80119e4:	4646      	mov	r6, r8
 80119e6:	b942      	cbnz	r2, 80119fa <_strtol_l.constprop.0+0xe6>
 80119e8:	4630      	mov	r0, r6
 80119ea:	e79e      	b.n	801192a <_strtol_l.constprop.0+0x16>
 80119ec:	b107      	cbz	r7, 80119f0 <_strtol_l.constprop.0+0xdc>
 80119ee:	4276      	negs	r6, r6
 80119f0:	2a00      	cmp	r2, #0
 80119f2:	d0f9      	beq.n	80119e8 <_strtol_l.constprop.0+0xd4>
 80119f4:	f1bc 0f00 	cmp.w	ip, #0
 80119f8:	d000      	beq.n	80119fc <_strtol_l.constprop.0+0xe8>
 80119fa:	1e69      	subs	r1, r5, #1
 80119fc:	6011      	str	r1, [r2, #0]
 80119fe:	e7f3      	b.n	80119e8 <_strtol_l.constprop.0+0xd4>
 8011a00:	2430      	movs	r4, #48	; 0x30
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1b1      	bne.n	801196a <_strtol_l.constprop.0+0x56>
 8011a06:	2308      	movs	r3, #8
 8011a08:	e7af      	b.n	801196a <_strtol_l.constprop.0+0x56>
 8011a0a:	2c30      	cmp	r4, #48	; 0x30
 8011a0c:	d0a5      	beq.n	801195a <_strtol_l.constprop.0+0x46>
 8011a0e:	230a      	movs	r3, #10
 8011a10:	e7ab      	b.n	801196a <_strtol_l.constprop.0+0x56>
 8011a12:	bf00      	nop
 8011a14:	080172a7 	.word	0x080172a7

08011a18 <_strtol_r>:
 8011a18:	f7ff bf7c 	b.w	8011914 <_strtol_l.constprop.0>

08011a1c <strtol>:
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	460a      	mov	r2, r1
 8011a20:	4601      	mov	r1, r0
 8011a22:	4802      	ldr	r0, [pc, #8]	; (8011a2c <strtol+0x10>)
 8011a24:	6800      	ldr	r0, [r0, #0]
 8011a26:	f7ff bf75 	b.w	8011914 <_strtol_l.constprop.0>
 8011a2a:	bf00      	nop
 8011a2c:	20000074 	.word	0x20000074

08011a30 <gettimeofday>:
 8011a30:	4b02      	ldr	r3, [pc, #8]	; (8011a3c <gettimeofday+0xc>)
 8011a32:	460a      	mov	r2, r1
 8011a34:	4601      	mov	r1, r0
 8011a36:	6818      	ldr	r0, [r3, #0]
 8011a38:	f000 bc68 	b.w	801230c <_gettimeofday_r>
 8011a3c:	20000074 	.word	0x20000074

08011a40 <_user_strerror>:
 8011a40:	2000      	movs	r0, #0
 8011a42:	4770      	bx	lr

08011a44 <__swbuf_r>:
 8011a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a46:	460e      	mov	r6, r1
 8011a48:	4614      	mov	r4, r2
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	b118      	cbz	r0, 8011a56 <__swbuf_r+0x12>
 8011a4e:	6983      	ldr	r3, [r0, #24]
 8011a50:	b90b      	cbnz	r3, 8011a56 <__swbuf_r+0x12>
 8011a52:	f7fd fe4d 	bl	800f6f0 <__sinit>
 8011a56:	4b21      	ldr	r3, [pc, #132]	; (8011adc <__swbuf_r+0x98>)
 8011a58:	429c      	cmp	r4, r3
 8011a5a:	d12b      	bne.n	8011ab4 <__swbuf_r+0x70>
 8011a5c:	686c      	ldr	r4, [r5, #4]
 8011a5e:	69a3      	ldr	r3, [r4, #24]
 8011a60:	60a3      	str	r3, [r4, #8]
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	071a      	lsls	r2, r3, #28
 8011a66:	d52f      	bpl.n	8011ac8 <__swbuf_r+0x84>
 8011a68:	6923      	ldr	r3, [r4, #16]
 8011a6a:	b36b      	cbz	r3, 8011ac8 <__swbuf_r+0x84>
 8011a6c:	6923      	ldr	r3, [r4, #16]
 8011a6e:	6820      	ldr	r0, [r4, #0]
 8011a70:	1ac0      	subs	r0, r0, r3
 8011a72:	6963      	ldr	r3, [r4, #20]
 8011a74:	b2f6      	uxtb	r6, r6
 8011a76:	4283      	cmp	r3, r0
 8011a78:	4637      	mov	r7, r6
 8011a7a:	dc04      	bgt.n	8011a86 <__swbuf_r+0x42>
 8011a7c:	4621      	mov	r1, r4
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f7fd fda2 	bl	800f5c8 <_fflush_r>
 8011a84:	bb30      	cbnz	r0, 8011ad4 <__swbuf_r+0x90>
 8011a86:	68a3      	ldr	r3, [r4, #8]
 8011a88:	3b01      	subs	r3, #1
 8011a8a:	60a3      	str	r3, [r4, #8]
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	1c5a      	adds	r2, r3, #1
 8011a90:	6022      	str	r2, [r4, #0]
 8011a92:	701e      	strb	r6, [r3, #0]
 8011a94:	6963      	ldr	r3, [r4, #20]
 8011a96:	3001      	adds	r0, #1
 8011a98:	4283      	cmp	r3, r0
 8011a9a:	d004      	beq.n	8011aa6 <__swbuf_r+0x62>
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	07db      	lsls	r3, r3, #31
 8011aa0:	d506      	bpl.n	8011ab0 <__swbuf_r+0x6c>
 8011aa2:	2e0a      	cmp	r6, #10
 8011aa4:	d104      	bne.n	8011ab0 <__swbuf_r+0x6c>
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f7fd fd8d 	bl	800f5c8 <_fflush_r>
 8011aae:	b988      	cbnz	r0, 8011ad4 <__swbuf_r+0x90>
 8011ab0:	4638      	mov	r0, r7
 8011ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ab4:	4b0a      	ldr	r3, [pc, #40]	; (8011ae0 <__swbuf_r+0x9c>)
 8011ab6:	429c      	cmp	r4, r3
 8011ab8:	d101      	bne.n	8011abe <__swbuf_r+0x7a>
 8011aba:	68ac      	ldr	r4, [r5, #8]
 8011abc:	e7cf      	b.n	8011a5e <__swbuf_r+0x1a>
 8011abe:	4b09      	ldr	r3, [pc, #36]	; (8011ae4 <__swbuf_r+0xa0>)
 8011ac0:	429c      	cmp	r4, r3
 8011ac2:	bf08      	it	eq
 8011ac4:	68ec      	ldreq	r4, [r5, #12]
 8011ac6:	e7ca      	b.n	8011a5e <__swbuf_r+0x1a>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4628      	mov	r0, r5
 8011acc:	f000 f81e 	bl	8011b0c <__swsetup_r>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0cb      	beq.n	8011a6c <__swbuf_r+0x28>
 8011ad4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011ad8:	e7ea      	b.n	8011ab0 <__swbuf_r+0x6c>
 8011ada:	bf00      	nop
 8011adc:	080173c8 	.word	0x080173c8
 8011ae0:	080173e8 	.word	0x080173e8
 8011ae4:	080173a8 	.word	0x080173a8

08011ae8 <_write_r>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	4d07      	ldr	r5, [pc, #28]	; (8011b08 <_write_r+0x20>)
 8011aec:	4604      	mov	r4, r0
 8011aee:	4608      	mov	r0, r1
 8011af0:	4611      	mov	r1, r2
 8011af2:	2200      	movs	r2, #0
 8011af4:	602a      	str	r2, [r5, #0]
 8011af6:	461a      	mov	r2, r3
 8011af8:	f7ef fdf1 	bl	80016de <_write>
 8011afc:	1c43      	adds	r3, r0, #1
 8011afe:	d102      	bne.n	8011b06 <_write_r+0x1e>
 8011b00:	682b      	ldr	r3, [r5, #0]
 8011b02:	b103      	cbz	r3, 8011b06 <_write_r+0x1e>
 8011b04:	6023      	str	r3, [r4, #0]
 8011b06:	bd38      	pop	{r3, r4, r5, pc}
 8011b08:	20003be4 	.word	0x20003be4

08011b0c <__swsetup_r>:
 8011b0c:	4b32      	ldr	r3, [pc, #200]	; (8011bd8 <__swsetup_r+0xcc>)
 8011b0e:	b570      	push	{r4, r5, r6, lr}
 8011b10:	681d      	ldr	r5, [r3, #0]
 8011b12:	4606      	mov	r6, r0
 8011b14:	460c      	mov	r4, r1
 8011b16:	b125      	cbz	r5, 8011b22 <__swsetup_r+0x16>
 8011b18:	69ab      	ldr	r3, [r5, #24]
 8011b1a:	b913      	cbnz	r3, 8011b22 <__swsetup_r+0x16>
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f7fd fde7 	bl	800f6f0 <__sinit>
 8011b22:	4b2e      	ldr	r3, [pc, #184]	; (8011bdc <__swsetup_r+0xd0>)
 8011b24:	429c      	cmp	r4, r3
 8011b26:	d10f      	bne.n	8011b48 <__swsetup_r+0x3c>
 8011b28:	686c      	ldr	r4, [r5, #4]
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b30:	0719      	lsls	r1, r3, #28
 8011b32:	d42c      	bmi.n	8011b8e <__swsetup_r+0x82>
 8011b34:	06dd      	lsls	r5, r3, #27
 8011b36:	d411      	bmi.n	8011b5c <__swsetup_r+0x50>
 8011b38:	2309      	movs	r3, #9
 8011b3a:	6033      	str	r3, [r6, #0]
 8011b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b40:	81a3      	strh	r3, [r4, #12]
 8011b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b46:	e03e      	b.n	8011bc6 <__swsetup_r+0xba>
 8011b48:	4b25      	ldr	r3, [pc, #148]	; (8011be0 <__swsetup_r+0xd4>)
 8011b4a:	429c      	cmp	r4, r3
 8011b4c:	d101      	bne.n	8011b52 <__swsetup_r+0x46>
 8011b4e:	68ac      	ldr	r4, [r5, #8]
 8011b50:	e7eb      	b.n	8011b2a <__swsetup_r+0x1e>
 8011b52:	4b24      	ldr	r3, [pc, #144]	; (8011be4 <__swsetup_r+0xd8>)
 8011b54:	429c      	cmp	r4, r3
 8011b56:	bf08      	it	eq
 8011b58:	68ec      	ldreq	r4, [r5, #12]
 8011b5a:	e7e6      	b.n	8011b2a <__swsetup_r+0x1e>
 8011b5c:	0758      	lsls	r0, r3, #29
 8011b5e:	d512      	bpl.n	8011b86 <__swsetup_r+0x7a>
 8011b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b62:	b141      	cbz	r1, 8011b76 <__swsetup_r+0x6a>
 8011b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b68:	4299      	cmp	r1, r3
 8011b6a:	d002      	beq.n	8011b72 <__swsetup_r+0x66>
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f7fd fff5 	bl	800fb5c <_free_r>
 8011b72:	2300      	movs	r3, #0
 8011b74:	6363      	str	r3, [r4, #52]	; 0x34
 8011b76:	89a3      	ldrh	r3, [r4, #12]
 8011b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b7c:	81a3      	strh	r3, [r4, #12]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	6063      	str	r3, [r4, #4]
 8011b82:	6923      	ldr	r3, [r4, #16]
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	89a3      	ldrh	r3, [r4, #12]
 8011b88:	f043 0308 	orr.w	r3, r3, #8
 8011b8c:	81a3      	strh	r3, [r4, #12]
 8011b8e:	6923      	ldr	r3, [r4, #16]
 8011b90:	b94b      	cbnz	r3, 8011ba6 <__swsetup_r+0x9a>
 8011b92:	89a3      	ldrh	r3, [r4, #12]
 8011b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b9c:	d003      	beq.n	8011ba6 <__swsetup_r+0x9a>
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	f7fd ff4f 	bl	800fa44 <__smakebuf_r>
 8011ba6:	89a0      	ldrh	r0, [r4, #12]
 8011ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bac:	f010 0301 	ands.w	r3, r0, #1
 8011bb0:	d00a      	beq.n	8011bc8 <__swsetup_r+0xbc>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	60a3      	str	r3, [r4, #8]
 8011bb6:	6963      	ldr	r3, [r4, #20]
 8011bb8:	425b      	negs	r3, r3
 8011bba:	61a3      	str	r3, [r4, #24]
 8011bbc:	6923      	ldr	r3, [r4, #16]
 8011bbe:	b943      	cbnz	r3, 8011bd2 <__swsetup_r+0xc6>
 8011bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011bc4:	d1ba      	bne.n	8011b3c <__swsetup_r+0x30>
 8011bc6:	bd70      	pop	{r4, r5, r6, pc}
 8011bc8:	0781      	lsls	r1, r0, #30
 8011bca:	bf58      	it	pl
 8011bcc:	6963      	ldrpl	r3, [r4, #20]
 8011bce:	60a3      	str	r3, [r4, #8]
 8011bd0:	e7f4      	b.n	8011bbc <__swsetup_r+0xb0>
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	e7f7      	b.n	8011bc6 <__swsetup_r+0xba>
 8011bd6:	bf00      	nop
 8011bd8:	20000074 	.word	0x20000074
 8011bdc:	080173c8 	.word	0x080173c8
 8011be0:	080173e8 	.word	0x080173e8
 8011be4:	080173a8 	.word	0x080173a8

08011be8 <_close_r>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	4d06      	ldr	r5, [pc, #24]	; (8011c04 <_close_r+0x1c>)
 8011bec:	2300      	movs	r3, #0
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4608      	mov	r0, r1
 8011bf2:	602b      	str	r3, [r5, #0]
 8011bf4:	f7ef fd8f 	bl	8001716 <_close>
 8011bf8:	1c43      	adds	r3, r0, #1
 8011bfa:	d102      	bne.n	8011c02 <_close_r+0x1a>
 8011bfc:	682b      	ldr	r3, [r5, #0]
 8011bfe:	b103      	cbz	r3, 8011c02 <_close_r+0x1a>
 8011c00:	6023      	str	r3, [r4, #0]
 8011c02:	bd38      	pop	{r3, r4, r5, pc}
 8011c04:	20003be4 	.word	0x20003be4

08011c08 <_fstat_r>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	4d07      	ldr	r5, [pc, #28]	; (8011c28 <_fstat_r+0x20>)
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	4604      	mov	r4, r0
 8011c10:	4608      	mov	r0, r1
 8011c12:	4611      	mov	r1, r2
 8011c14:	602b      	str	r3, [r5, #0]
 8011c16:	f7ef fd8a 	bl	800172e <_fstat>
 8011c1a:	1c43      	adds	r3, r0, #1
 8011c1c:	d102      	bne.n	8011c24 <_fstat_r+0x1c>
 8011c1e:	682b      	ldr	r3, [r5, #0]
 8011c20:	b103      	cbz	r3, 8011c24 <_fstat_r+0x1c>
 8011c22:	6023      	str	r3, [r4, #0]
 8011c24:	bd38      	pop	{r3, r4, r5, pc}
 8011c26:	bf00      	nop
 8011c28:	20003be4 	.word	0x20003be4

08011c2c <rshift>:
 8011c2c:	6903      	ldr	r3, [r0, #16]
 8011c2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011c32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011c3a:	f100 0414 	add.w	r4, r0, #20
 8011c3e:	dd45      	ble.n	8011ccc <rshift+0xa0>
 8011c40:	f011 011f 	ands.w	r1, r1, #31
 8011c44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011c48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011c4c:	d10c      	bne.n	8011c68 <rshift+0x3c>
 8011c4e:	f100 0710 	add.w	r7, r0, #16
 8011c52:	4629      	mov	r1, r5
 8011c54:	42b1      	cmp	r1, r6
 8011c56:	d334      	bcc.n	8011cc2 <rshift+0x96>
 8011c58:	1a9b      	subs	r3, r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	1eea      	subs	r2, r5, #3
 8011c5e:	4296      	cmp	r6, r2
 8011c60:	bf38      	it	cc
 8011c62:	2300      	movcc	r3, #0
 8011c64:	4423      	add	r3, r4
 8011c66:	e015      	b.n	8011c94 <rshift+0x68>
 8011c68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011c6c:	f1c1 0820 	rsb	r8, r1, #32
 8011c70:	40cf      	lsrs	r7, r1
 8011c72:	f105 0e04 	add.w	lr, r5, #4
 8011c76:	46a1      	mov	r9, r4
 8011c78:	4576      	cmp	r6, lr
 8011c7a:	46f4      	mov	ip, lr
 8011c7c:	d815      	bhi.n	8011caa <rshift+0x7e>
 8011c7e:	1a9a      	subs	r2, r3, r2
 8011c80:	0092      	lsls	r2, r2, #2
 8011c82:	3a04      	subs	r2, #4
 8011c84:	3501      	adds	r5, #1
 8011c86:	42ae      	cmp	r6, r5
 8011c88:	bf38      	it	cc
 8011c8a:	2200      	movcc	r2, #0
 8011c8c:	18a3      	adds	r3, r4, r2
 8011c8e:	50a7      	str	r7, [r4, r2]
 8011c90:	b107      	cbz	r7, 8011c94 <rshift+0x68>
 8011c92:	3304      	adds	r3, #4
 8011c94:	1b1a      	subs	r2, r3, r4
 8011c96:	42a3      	cmp	r3, r4
 8011c98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c9c:	bf08      	it	eq
 8011c9e:	2300      	moveq	r3, #0
 8011ca0:	6102      	str	r2, [r0, #16]
 8011ca2:	bf08      	it	eq
 8011ca4:	6143      	streq	r3, [r0, #20]
 8011ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011caa:	f8dc c000 	ldr.w	ip, [ip]
 8011cae:	fa0c fc08 	lsl.w	ip, ip, r8
 8011cb2:	ea4c 0707 	orr.w	r7, ip, r7
 8011cb6:	f849 7b04 	str.w	r7, [r9], #4
 8011cba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011cbe:	40cf      	lsrs	r7, r1
 8011cc0:	e7da      	b.n	8011c78 <rshift+0x4c>
 8011cc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8011cc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8011cca:	e7c3      	b.n	8011c54 <rshift+0x28>
 8011ccc:	4623      	mov	r3, r4
 8011cce:	e7e1      	b.n	8011c94 <rshift+0x68>

08011cd0 <__hexdig_fun>:
 8011cd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011cd4:	2b09      	cmp	r3, #9
 8011cd6:	d802      	bhi.n	8011cde <__hexdig_fun+0xe>
 8011cd8:	3820      	subs	r0, #32
 8011cda:	b2c0      	uxtb	r0, r0
 8011cdc:	4770      	bx	lr
 8011cde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011ce2:	2b05      	cmp	r3, #5
 8011ce4:	d801      	bhi.n	8011cea <__hexdig_fun+0x1a>
 8011ce6:	3847      	subs	r0, #71	; 0x47
 8011ce8:	e7f7      	b.n	8011cda <__hexdig_fun+0xa>
 8011cea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011cee:	2b05      	cmp	r3, #5
 8011cf0:	d801      	bhi.n	8011cf6 <__hexdig_fun+0x26>
 8011cf2:	3827      	subs	r0, #39	; 0x27
 8011cf4:	e7f1      	b.n	8011cda <__hexdig_fun+0xa>
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	4770      	bx	lr
	...

08011cfc <__gethex>:
 8011cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	ed2d 8b02 	vpush	{d8}
 8011d04:	b089      	sub	sp, #36	; 0x24
 8011d06:	ee08 0a10 	vmov	s16, r0
 8011d0a:	9304      	str	r3, [sp, #16]
 8011d0c:	4bb4      	ldr	r3, [pc, #720]	; (8011fe0 <__gethex+0x2e4>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	9301      	str	r3, [sp, #4]
 8011d12:	4618      	mov	r0, r3
 8011d14:	468b      	mov	fp, r1
 8011d16:	4690      	mov	r8, r2
 8011d18:	f7ee fbec 	bl	80004f4 <strlen>
 8011d1c:	9b01      	ldr	r3, [sp, #4]
 8011d1e:	f8db 2000 	ldr.w	r2, [fp]
 8011d22:	4403      	add	r3, r0
 8011d24:	4682      	mov	sl, r0
 8011d26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011d2a:	9305      	str	r3, [sp, #20]
 8011d2c:	1c93      	adds	r3, r2, #2
 8011d2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011d32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011d36:	32fe      	adds	r2, #254	; 0xfe
 8011d38:	18d1      	adds	r1, r2, r3
 8011d3a:	461f      	mov	r7, r3
 8011d3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011d40:	9100      	str	r1, [sp, #0]
 8011d42:	2830      	cmp	r0, #48	; 0x30
 8011d44:	d0f8      	beq.n	8011d38 <__gethex+0x3c>
 8011d46:	f7ff ffc3 	bl	8011cd0 <__hexdig_fun>
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d13a      	bne.n	8011dc6 <__gethex+0xca>
 8011d50:	9901      	ldr	r1, [sp, #4]
 8011d52:	4652      	mov	r2, sl
 8011d54:	4638      	mov	r0, r7
 8011d56:	f001 fd07 	bl	8013768 <strncmp>
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d168      	bne.n	8011e32 <__gethex+0x136>
 8011d60:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011d64:	eb07 060a 	add.w	r6, r7, sl
 8011d68:	f7ff ffb2 	bl	8011cd0 <__hexdig_fun>
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d062      	beq.n	8011e36 <__gethex+0x13a>
 8011d70:	4633      	mov	r3, r6
 8011d72:	7818      	ldrb	r0, [r3, #0]
 8011d74:	2830      	cmp	r0, #48	; 0x30
 8011d76:	461f      	mov	r7, r3
 8011d78:	f103 0301 	add.w	r3, r3, #1
 8011d7c:	d0f9      	beq.n	8011d72 <__gethex+0x76>
 8011d7e:	f7ff ffa7 	bl	8011cd0 <__hexdig_fun>
 8011d82:	2301      	movs	r3, #1
 8011d84:	fab0 f480 	clz	r4, r0
 8011d88:	0964      	lsrs	r4, r4, #5
 8011d8a:	4635      	mov	r5, r6
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	463a      	mov	r2, r7
 8011d90:	4616      	mov	r6, r2
 8011d92:	3201      	adds	r2, #1
 8011d94:	7830      	ldrb	r0, [r6, #0]
 8011d96:	f7ff ff9b 	bl	8011cd0 <__hexdig_fun>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	d1f8      	bne.n	8011d90 <__gethex+0x94>
 8011d9e:	9901      	ldr	r1, [sp, #4]
 8011da0:	4652      	mov	r2, sl
 8011da2:	4630      	mov	r0, r6
 8011da4:	f001 fce0 	bl	8013768 <strncmp>
 8011da8:	b980      	cbnz	r0, 8011dcc <__gethex+0xd0>
 8011daa:	b94d      	cbnz	r5, 8011dc0 <__gethex+0xc4>
 8011dac:	eb06 050a 	add.w	r5, r6, sl
 8011db0:	462a      	mov	r2, r5
 8011db2:	4616      	mov	r6, r2
 8011db4:	3201      	adds	r2, #1
 8011db6:	7830      	ldrb	r0, [r6, #0]
 8011db8:	f7ff ff8a 	bl	8011cd0 <__hexdig_fun>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d1f8      	bne.n	8011db2 <__gethex+0xb6>
 8011dc0:	1bad      	subs	r5, r5, r6
 8011dc2:	00ad      	lsls	r5, r5, #2
 8011dc4:	e004      	b.n	8011dd0 <__gethex+0xd4>
 8011dc6:	2400      	movs	r4, #0
 8011dc8:	4625      	mov	r5, r4
 8011dca:	e7e0      	b.n	8011d8e <__gethex+0x92>
 8011dcc:	2d00      	cmp	r5, #0
 8011dce:	d1f7      	bne.n	8011dc0 <__gethex+0xc4>
 8011dd0:	7833      	ldrb	r3, [r6, #0]
 8011dd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011dd6:	2b50      	cmp	r3, #80	; 0x50
 8011dd8:	d13b      	bne.n	8011e52 <__gethex+0x156>
 8011dda:	7873      	ldrb	r3, [r6, #1]
 8011ddc:	2b2b      	cmp	r3, #43	; 0x2b
 8011dde:	d02c      	beq.n	8011e3a <__gethex+0x13e>
 8011de0:	2b2d      	cmp	r3, #45	; 0x2d
 8011de2:	d02e      	beq.n	8011e42 <__gethex+0x146>
 8011de4:	1c71      	adds	r1, r6, #1
 8011de6:	f04f 0900 	mov.w	r9, #0
 8011dea:	7808      	ldrb	r0, [r1, #0]
 8011dec:	f7ff ff70 	bl	8011cd0 <__hexdig_fun>
 8011df0:	1e43      	subs	r3, r0, #1
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	2b18      	cmp	r3, #24
 8011df6:	d82c      	bhi.n	8011e52 <__gethex+0x156>
 8011df8:	f1a0 0210 	sub.w	r2, r0, #16
 8011dfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e00:	f7ff ff66 	bl	8011cd0 <__hexdig_fun>
 8011e04:	1e43      	subs	r3, r0, #1
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	2b18      	cmp	r3, #24
 8011e0a:	d91d      	bls.n	8011e48 <__gethex+0x14c>
 8011e0c:	f1b9 0f00 	cmp.w	r9, #0
 8011e10:	d000      	beq.n	8011e14 <__gethex+0x118>
 8011e12:	4252      	negs	r2, r2
 8011e14:	4415      	add	r5, r2
 8011e16:	f8cb 1000 	str.w	r1, [fp]
 8011e1a:	b1e4      	cbz	r4, 8011e56 <__gethex+0x15a>
 8011e1c:	9b00      	ldr	r3, [sp, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	bf14      	ite	ne
 8011e22:	2700      	movne	r7, #0
 8011e24:	2706      	moveq	r7, #6
 8011e26:	4638      	mov	r0, r7
 8011e28:	b009      	add	sp, #36	; 0x24
 8011e2a:	ecbd 8b02 	vpop	{d8}
 8011e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e32:	463e      	mov	r6, r7
 8011e34:	4625      	mov	r5, r4
 8011e36:	2401      	movs	r4, #1
 8011e38:	e7ca      	b.n	8011dd0 <__gethex+0xd4>
 8011e3a:	f04f 0900 	mov.w	r9, #0
 8011e3e:	1cb1      	adds	r1, r6, #2
 8011e40:	e7d3      	b.n	8011dea <__gethex+0xee>
 8011e42:	f04f 0901 	mov.w	r9, #1
 8011e46:	e7fa      	b.n	8011e3e <__gethex+0x142>
 8011e48:	230a      	movs	r3, #10
 8011e4a:	fb03 0202 	mla	r2, r3, r2, r0
 8011e4e:	3a10      	subs	r2, #16
 8011e50:	e7d4      	b.n	8011dfc <__gethex+0x100>
 8011e52:	4631      	mov	r1, r6
 8011e54:	e7df      	b.n	8011e16 <__gethex+0x11a>
 8011e56:	1bf3      	subs	r3, r6, r7
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	2b07      	cmp	r3, #7
 8011e5e:	dc0b      	bgt.n	8011e78 <__gethex+0x17c>
 8011e60:	ee18 0a10 	vmov	r0, s16
 8011e64:	f000 fabe 	bl	80123e4 <_Balloc>
 8011e68:	4604      	mov	r4, r0
 8011e6a:	b940      	cbnz	r0, 8011e7e <__gethex+0x182>
 8011e6c:	4b5d      	ldr	r3, [pc, #372]	; (8011fe4 <__gethex+0x2e8>)
 8011e6e:	4602      	mov	r2, r0
 8011e70:	21de      	movs	r1, #222	; 0xde
 8011e72:	485d      	ldr	r0, [pc, #372]	; (8011fe8 <__gethex+0x2ec>)
 8011e74:	f001 fd48 	bl	8013908 <__assert_func>
 8011e78:	3101      	adds	r1, #1
 8011e7a:	105b      	asrs	r3, r3, #1
 8011e7c:	e7ee      	b.n	8011e5c <__gethex+0x160>
 8011e7e:	f100 0914 	add.w	r9, r0, #20
 8011e82:	f04f 0b00 	mov.w	fp, #0
 8011e86:	f1ca 0301 	rsb	r3, sl, #1
 8011e8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8011e8e:	f8cd b000 	str.w	fp, [sp]
 8011e92:	9306      	str	r3, [sp, #24]
 8011e94:	42b7      	cmp	r7, r6
 8011e96:	d340      	bcc.n	8011f1a <__gethex+0x21e>
 8011e98:	9802      	ldr	r0, [sp, #8]
 8011e9a:	9b00      	ldr	r3, [sp, #0]
 8011e9c:	f840 3b04 	str.w	r3, [r0], #4
 8011ea0:	eba0 0009 	sub.w	r0, r0, r9
 8011ea4:	1080      	asrs	r0, r0, #2
 8011ea6:	0146      	lsls	r6, r0, #5
 8011ea8:	6120      	str	r0, [r4, #16]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f000 fb8c 	bl	80125c8 <__hi0bits>
 8011eb0:	1a30      	subs	r0, r6, r0
 8011eb2:	f8d8 6000 	ldr.w	r6, [r8]
 8011eb6:	42b0      	cmp	r0, r6
 8011eb8:	dd63      	ble.n	8011f82 <__gethex+0x286>
 8011eba:	1b87      	subs	r7, r0, r6
 8011ebc:	4639      	mov	r1, r7
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f000 ff30 	bl	8012d24 <__any_on>
 8011ec4:	4682      	mov	sl, r0
 8011ec6:	b1a8      	cbz	r0, 8011ef4 <__gethex+0x1f8>
 8011ec8:	1e7b      	subs	r3, r7, #1
 8011eca:	1159      	asrs	r1, r3, #5
 8011ecc:	f003 021f 	and.w	r2, r3, #31
 8011ed0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011ed4:	f04f 0a01 	mov.w	sl, #1
 8011ed8:	fa0a f202 	lsl.w	r2, sl, r2
 8011edc:	420a      	tst	r2, r1
 8011ede:	d009      	beq.n	8011ef4 <__gethex+0x1f8>
 8011ee0:	4553      	cmp	r3, sl
 8011ee2:	dd05      	ble.n	8011ef0 <__gethex+0x1f4>
 8011ee4:	1eb9      	subs	r1, r7, #2
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f000 ff1c 	bl	8012d24 <__any_on>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d145      	bne.n	8011f7c <__gethex+0x280>
 8011ef0:	f04f 0a02 	mov.w	sl, #2
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff fe98 	bl	8011c2c <rshift>
 8011efc:	443d      	add	r5, r7
 8011efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f02:	42ab      	cmp	r3, r5
 8011f04:	da4c      	bge.n	8011fa0 <__gethex+0x2a4>
 8011f06:	ee18 0a10 	vmov	r0, s16
 8011f0a:	4621      	mov	r1, r4
 8011f0c:	f000 faaa 	bl	8012464 <_Bfree>
 8011f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f12:	2300      	movs	r3, #0
 8011f14:	6013      	str	r3, [r2, #0]
 8011f16:	27a3      	movs	r7, #163	; 0xa3
 8011f18:	e785      	b.n	8011e26 <__gethex+0x12a>
 8011f1a:	1e73      	subs	r3, r6, #1
 8011f1c:	9a05      	ldr	r2, [sp, #20]
 8011f1e:	9303      	str	r3, [sp, #12]
 8011f20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d019      	beq.n	8011f5c <__gethex+0x260>
 8011f28:	f1bb 0f20 	cmp.w	fp, #32
 8011f2c:	d107      	bne.n	8011f3e <__gethex+0x242>
 8011f2e:	9b02      	ldr	r3, [sp, #8]
 8011f30:	9a00      	ldr	r2, [sp, #0]
 8011f32:	f843 2b04 	str.w	r2, [r3], #4
 8011f36:	9302      	str	r3, [sp, #8]
 8011f38:	2300      	movs	r3, #0
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	469b      	mov	fp, r3
 8011f3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011f42:	f7ff fec5 	bl	8011cd0 <__hexdig_fun>
 8011f46:	9b00      	ldr	r3, [sp, #0]
 8011f48:	f000 000f 	and.w	r0, r0, #15
 8011f4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011f50:	4303      	orrs	r3, r0
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	f10b 0b04 	add.w	fp, fp, #4
 8011f58:	9b03      	ldr	r3, [sp, #12]
 8011f5a:	e00d      	b.n	8011f78 <__gethex+0x27c>
 8011f5c:	9b03      	ldr	r3, [sp, #12]
 8011f5e:	9a06      	ldr	r2, [sp, #24]
 8011f60:	4413      	add	r3, r2
 8011f62:	42bb      	cmp	r3, r7
 8011f64:	d3e0      	bcc.n	8011f28 <__gethex+0x22c>
 8011f66:	4618      	mov	r0, r3
 8011f68:	9901      	ldr	r1, [sp, #4]
 8011f6a:	9307      	str	r3, [sp, #28]
 8011f6c:	4652      	mov	r2, sl
 8011f6e:	f001 fbfb 	bl	8013768 <strncmp>
 8011f72:	9b07      	ldr	r3, [sp, #28]
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d1d7      	bne.n	8011f28 <__gethex+0x22c>
 8011f78:	461e      	mov	r6, r3
 8011f7a:	e78b      	b.n	8011e94 <__gethex+0x198>
 8011f7c:	f04f 0a03 	mov.w	sl, #3
 8011f80:	e7b8      	b.n	8011ef4 <__gethex+0x1f8>
 8011f82:	da0a      	bge.n	8011f9a <__gethex+0x29e>
 8011f84:	1a37      	subs	r7, r6, r0
 8011f86:	4621      	mov	r1, r4
 8011f88:	ee18 0a10 	vmov	r0, s16
 8011f8c:	463a      	mov	r2, r7
 8011f8e:	f000 fc85 	bl	801289c <__lshift>
 8011f92:	1bed      	subs	r5, r5, r7
 8011f94:	4604      	mov	r4, r0
 8011f96:	f100 0914 	add.w	r9, r0, #20
 8011f9a:	f04f 0a00 	mov.w	sl, #0
 8011f9e:	e7ae      	b.n	8011efe <__gethex+0x202>
 8011fa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011fa4:	42a8      	cmp	r0, r5
 8011fa6:	dd72      	ble.n	801208e <__gethex+0x392>
 8011fa8:	1b45      	subs	r5, r0, r5
 8011faa:	42ae      	cmp	r6, r5
 8011fac:	dc36      	bgt.n	801201c <__gethex+0x320>
 8011fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d02a      	beq.n	801200c <__gethex+0x310>
 8011fb6:	2b03      	cmp	r3, #3
 8011fb8:	d02c      	beq.n	8012014 <__gethex+0x318>
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d11c      	bne.n	8011ff8 <__gethex+0x2fc>
 8011fbe:	42ae      	cmp	r6, r5
 8011fc0:	d11a      	bne.n	8011ff8 <__gethex+0x2fc>
 8011fc2:	2e01      	cmp	r6, #1
 8011fc4:	d112      	bne.n	8011fec <__gethex+0x2f0>
 8011fc6:	9a04      	ldr	r2, [sp, #16]
 8011fc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011fcc:	6013      	str	r3, [r2, #0]
 8011fce:	2301      	movs	r3, #1
 8011fd0:	6123      	str	r3, [r4, #16]
 8011fd2:	f8c9 3000 	str.w	r3, [r9]
 8011fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011fd8:	2762      	movs	r7, #98	; 0x62
 8011fda:	601c      	str	r4, [r3, #0]
 8011fdc:	e723      	b.n	8011e26 <__gethex+0x12a>
 8011fde:	bf00      	nop
 8011fe0:	08017bb0 	.word	0x08017bb0
 8011fe4:	08017b38 	.word	0x08017b38
 8011fe8:	08017b49 	.word	0x08017b49
 8011fec:	1e71      	subs	r1, r6, #1
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f000 fe98 	bl	8012d24 <__any_on>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d1e6      	bne.n	8011fc6 <__gethex+0x2ca>
 8011ff8:	ee18 0a10 	vmov	r0, s16
 8011ffc:	4621      	mov	r1, r4
 8011ffe:	f000 fa31 	bl	8012464 <_Bfree>
 8012002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012004:	2300      	movs	r3, #0
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	2750      	movs	r7, #80	; 0x50
 801200a:	e70c      	b.n	8011e26 <__gethex+0x12a>
 801200c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801200e:	2b00      	cmp	r3, #0
 8012010:	d1f2      	bne.n	8011ff8 <__gethex+0x2fc>
 8012012:	e7d8      	b.n	8011fc6 <__gethex+0x2ca>
 8012014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012016:	2b00      	cmp	r3, #0
 8012018:	d1d5      	bne.n	8011fc6 <__gethex+0x2ca>
 801201a:	e7ed      	b.n	8011ff8 <__gethex+0x2fc>
 801201c:	1e6f      	subs	r7, r5, #1
 801201e:	f1ba 0f00 	cmp.w	sl, #0
 8012022:	d131      	bne.n	8012088 <__gethex+0x38c>
 8012024:	b127      	cbz	r7, 8012030 <__gethex+0x334>
 8012026:	4639      	mov	r1, r7
 8012028:	4620      	mov	r0, r4
 801202a:	f000 fe7b 	bl	8012d24 <__any_on>
 801202e:	4682      	mov	sl, r0
 8012030:	117b      	asrs	r3, r7, #5
 8012032:	2101      	movs	r1, #1
 8012034:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012038:	f007 071f 	and.w	r7, r7, #31
 801203c:	fa01 f707 	lsl.w	r7, r1, r7
 8012040:	421f      	tst	r7, r3
 8012042:	4629      	mov	r1, r5
 8012044:	4620      	mov	r0, r4
 8012046:	bf18      	it	ne
 8012048:	f04a 0a02 	orrne.w	sl, sl, #2
 801204c:	1b76      	subs	r6, r6, r5
 801204e:	f7ff fded 	bl	8011c2c <rshift>
 8012052:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012056:	2702      	movs	r7, #2
 8012058:	f1ba 0f00 	cmp.w	sl, #0
 801205c:	d048      	beq.n	80120f0 <__gethex+0x3f4>
 801205e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012062:	2b02      	cmp	r3, #2
 8012064:	d015      	beq.n	8012092 <__gethex+0x396>
 8012066:	2b03      	cmp	r3, #3
 8012068:	d017      	beq.n	801209a <__gethex+0x39e>
 801206a:	2b01      	cmp	r3, #1
 801206c:	d109      	bne.n	8012082 <__gethex+0x386>
 801206e:	f01a 0f02 	tst.w	sl, #2
 8012072:	d006      	beq.n	8012082 <__gethex+0x386>
 8012074:	f8d9 0000 	ldr.w	r0, [r9]
 8012078:	ea4a 0a00 	orr.w	sl, sl, r0
 801207c:	f01a 0f01 	tst.w	sl, #1
 8012080:	d10e      	bne.n	80120a0 <__gethex+0x3a4>
 8012082:	f047 0710 	orr.w	r7, r7, #16
 8012086:	e033      	b.n	80120f0 <__gethex+0x3f4>
 8012088:	f04f 0a01 	mov.w	sl, #1
 801208c:	e7d0      	b.n	8012030 <__gethex+0x334>
 801208e:	2701      	movs	r7, #1
 8012090:	e7e2      	b.n	8012058 <__gethex+0x35c>
 8012092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012094:	f1c3 0301 	rsb	r3, r3, #1
 8012098:	9315      	str	r3, [sp, #84]	; 0x54
 801209a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801209c:	2b00      	cmp	r3, #0
 801209e:	d0f0      	beq.n	8012082 <__gethex+0x386>
 80120a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80120a4:	f104 0314 	add.w	r3, r4, #20
 80120a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80120ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80120b0:	f04f 0c00 	mov.w	ip, #0
 80120b4:	4618      	mov	r0, r3
 80120b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80120ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80120be:	d01c      	beq.n	80120fa <__gethex+0x3fe>
 80120c0:	3201      	adds	r2, #1
 80120c2:	6002      	str	r2, [r0, #0]
 80120c4:	2f02      	cmp	r7, #2
 80120c6:	f104 0314 	add.w	r3, r4, #20
 80120ca:	d13f      	bne.n	801214c <__gethex+0x450>
 80120cc:	f8d8 2000 	ldr.w	r2, [r8]
 80120d0:	3a01      	subs	r2, #1
 80120d2:	42b2      	cmp	r2, r6
 80120d4:	d10a      	bne.n	80120ec <__gethex+0x3f0>
 80120d6:	1171      	asrs	r1, r6, #5
 80120d8:	2201      	movs	r2, #1
 80120da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120de:	f006 061f 	and.w	r6, r6, #31
 80120e2:	fa02 f606 	lsl.w	r6, r2, r6
 80120e6:	421e      	tst	r6, r3
 80120e8:	bf18      	it	ne
 80120ea:	4617      	movne	r7, r2
 80120ec:	f047 0720 	orr.w	r7, r7, #32
 80120f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120f2:	601c      	str	r4, [r3, #0]
 80120f4:	9b04      	ldr	r3, [sp, #16]
 80120f6:	601d      	str	r5, [r3, #0]
 80120f8:	e695      	b.n	8011e26 <__gethex+0x12a>
 80120fa:	4299      	cmp	r1, r3
 80120fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8012100:	d8d8      	bhi.n	80120b4 <__gethex+0x3b8>
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	459b      	cmp	fp, r3
 8012106:	db19      	blt.n	801213c <__gethex+0x440>
 8012108:	6861      	ldr	r1, [r4, #4]
 801210a:	ee18 0a10 	vmov	r0, s16
 801210e:	3101      	adds	r1, #1
 8012110:	f000 f968 	bl	80123e4 <_Balloc>
 8012114:	4681      	mov	r9, r0
 8012116:	b918      	cbnz	r0, 8012120 <__gethex+0x424>
 8012118:	4b1a      	ldr	r3, [pc, #104]	; (8012184 <__gethex+0x488>)
 801211a:	4602      	mov	r2, r0
 801211c:	2184      	movs	r1, #132	; 0x84
 801211e:	e6a8      	b.n	8011e72 <__gethex+0x176>
 8012120:	6922      	ldr	r2, [r4, #16]
 8012122:	3202      	adds	r2, #2
 8012124:	f104 010c 	add.w	r1, r4, #12
 8012128:	0092      	lsls	r2, r2, #2
 801212a:	300c      	adds	r0, #12
 801212c:	f7fd fcea 	bl	800fb04 <memcpy>
 8012130:	4621      	mov	r1, r4
 8012132:	ee18 0a10 	vmov	r0, s16
 8012136:	f000 f995 	bl	8012464 <_Bfree>
 801213a:	464c      	mov	r4, r9
 801213c:	6923      	ldr	r3, [r4, #16]
 801213e:	1c5a      	adds	r2, r3, #1
 8012140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012144:	6122      	str	r2, [r4, #16]
 8012146:	2201      	movs	r2, #1
 8012148:	615a      	str	r2, [r3, #20]
 801214a:	e7bb      	b.n	80120c4 <__gethex+0x3c8>
 801214c:	6922      	ldr	r2, [r4, #16]
 801214e:	455a      	cmp	r2, fp
 8012150:	dd0b      	ble.n	801216a <__gethex+0x46e>
 8012152:	2101      	movs	r1, #1
 8012154:	4620      	mov	r0, r4
 8012156:	f7ff fd69 	bl	8011c2c <rshift>
 801215a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801215e:	3501      	adds	r5, #1
 8012160:	42ab      	cmp	r3, r5
 8012162:	f6ff aed0 	blt.w	8011f06 <__gethex+0x20a>
 8012166:	2701      	movs	r7, #1
 8012168:	e7c0      	b.n	80120ec <__gethex+0x3f0>
 801216a:	f016 061f 	ands.w	r6, r6, #31
 801216e:	d0fa      	beq.n	8012166 <__gethex+0x46a>
 8012170:	4453      	add	r3, sl
 8012172:	f1c6 0620 	rsb	r6, r6, #32
 8012176:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801217a:	f000 fa25 	bl	80125c8 <__hi0bits>
 801217e:	42b0      	cmp	r0, r6
 8012180:	dbe7      	blt.n	8012152 <__gethex+0x456>
 8012182:	e7f0      	b.n	8012166 <__gethex+0x46a>
 8012184:	08017b38 	.word	0x08017b38

08012188 <L_shift>:
 8012188:	f1c2 0208 	rsb	r2, r2, #8
 801218c:	0092      	lsls	r2, r2, #2
 801218e:	b570      	push	{r4, r5, r6, lr}
 8012190:	f1c2 0620 	rsb	r6, r2, #32
 8012194:	6843      	ldr	r3, [r0, #4]
 8012196:	6804      	ldr	r4, [r0, #0]
 8012198:	fa03 f506 	lsl.w	r5, r3, r6
 801219c:	432c      	orrs	r4, r5
 801219e:	40d3      	lsrs	r3, r2
 80121a0:	6004      	str	r4, [r0, #0]
 80121a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80121a6:	4288      	cmp	r0, r1
 80121a8:	d3f4      	bcc.n	8012194 <L_shift+0xc>
 80121aa:	bd70      	pop	{r4, r5, r6, pc}

080121ac <__match>:
 80121ac:	b530      	push	{r4, r5, lr}
 80121ae:	6803      	ldr	r3, [r0, #0]
 80121b0:	3301      	adds	r3, #1
 80121b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121b6:	b914      	cbnz	r4, 80121be <__match+0x12>
 80121b8:	6003      	str	r3, [r0, #0]
 80121ba:	2001      	movs	r0, #1
 80121bc:	bd30      	pop	{r4, r5, pc}
 80121be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80121c6:	2d19      	cmp	r5, #25
 80121c8:	bf98      	it	ls
 80121ca:	3220      	addls	r2, #32
 80121cc:	42a2      	cmp	r2, r4
 80121ce:	d0f0      	beq.n	80121b2 <__match+0x6>
 80121d0:	2000      	movs	r0, #0
 80121d2:	e7f3      	b.n	80121bc <__match+0x10>

080121d4 <__hexnan>:
 80121d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d8:	680b      	ldr	r3, [r1, #0]
 80121da:	115e      	asrs	r6, r3, #5
 80121dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80121e0:	f013 031f 	ands.w	r3, r3, #31
 80121e4:	b087      	sub	sp, #28
 80121e6:	bf18      	it	ne
 80121e8:	3604      	addne	r6, #4
 80121ea:	2500      	movs	r5, #0
 80121ec:	1f37      	subs	r7, r6, #4
 80121ee:	4690      	mov	r8, r2
 80121f0:	6802      	ldr	r2, [r0, #0]
 80121f2:	9301      	str	r3, [sp, #4]
 80121f4:	4682      	mov	sl, r0
 80121f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80121fa:	46b9      	mov	r9, r7
 80121fc:	463c      	mov	r4, r7
 80121fe:	9502      	str	r5, [sp, #8]
 8012200:	46ab      	mov	fp, r5
 8012202:	7851      	ldrb	r1, [r2, #1]
 8012204:	1c53      	adds	r3, r2, #1
 8012206:	9303      	str	r3, [sp, #12]
 8012208:	b341      	cbz	r1, 801225c <__hexnan+0x88>
 801220a:	4608      	mov	r0, r1
 801220c:	9205      	str	r2, [sp, #20]
 801220e:	9104      	str	r1, [sp, #16]
 8012210:	f7ff fd5e 	bl	8011cd0 <__hexdig_fun>
 8012214:	2800      	cmp	r0, #0
 8012216:	d14f      	bne.n	80122b8 <__hexnan+0xe4>
 8012218:	9904      	ldr	r1, [sp, #16]
 801221a:	9a05      	ldr	r2, [sp, #20]
 801221c:	2920      	cmp	r1, #32
 801221e:	d818      	bhi.n	8012252 <__hexnan+0x7e>
 8012220:	9b02      	ldr	r3, [sp, #8]
 8012222:	459b      	cmp	fp, r3
 8012224:	dd13      	ble.n	801224e <__hexnan+0x7a>
 8012226:	454c      	cmp	r4, r9
 8012228:	d206      	bcs.n	8012238 <__hexnan+0x64>
 801222a:	2d07      	cmp	r5, #7
 801222c:	dc04      	bgt.n	8012238 <__hexnan+0x64>
 801222e:	462a      	mov	r2, r5
 8012230:	4649      	mov	r1, r9
 8012232:	4620      	mov	r0, r4
 8012234:	f7ff ffa8 	bl	8012188 <L_shift>
 8012238:	4544      	cmp	r4, r8
 801223a:	d950      	bls.n	80122de <__hexnan+0x10a>
 801223c:	2300      	movs	r3, #0
 801223e:	f1a4 0904 	sub.w	r9, r4, #4
 8012242:	f844 3c04 	str.w	r3, [r4, #-4]
 8012246:	f8cd b008 	str.w	fp, [sp, #8]
 801224a:	464c      	mov	r4, r9
 801224c:	461d      	mov	r5, r3
 801224e:	9a03      	ldr	r2, [sp, #12]
 8012250:	e7d7      	b.n	8012202 <__hexnan+0x2e>
 8012252:	2929      	cmp	r1, #41	; 0x29
 8012254:	d156      	bne.n	8012304 <__hexnan+0x130>
 8012256:	3202      	adds	r2, #2
 8012258:	f8ca 2000 	str.w	r2, [sl]
 801225c:	f1bb 0f00 	cmp.w	fp, #0
 8012260:	d050      	beq.n	8012304 <__hexnan+0x130>
 8012262:	454c      	cmp	r4, r9
 8012264:	d206      	bcs.n	8012274 <__hexnan+0xa0>
 8012266:	2d07      	cmp	r5, #7
 8012268:	dc04      	bgt.n	8012274 <__hexnan+0xa0>
 801226a:	462a      	mov	r2, r5
 801226c:	4649      	mov	r1, r9
 801226e:	4620      	mov	r0, r4
 8012270:	f7ff ff8a 	bl	8012188 <L_shift>
 8012274:	4544      	cmp	r4, r8
 8012276:	d934      	bls.n	80122e2 <__hexnan+0x10e>
 8012278:	f1a8 0204 	sub.w	r2, r8, #4
 801227c:	4623      	mov	r3, r4
 801227e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012282:	f842 1f04 	str.w	r1, [r2, #4]!
 8012286:	429f      	cmp	r7, r3
 8012288:	d2f9      	bcs.n	801227e <__hexnan+0xaa>
 801228a:	1b3b      	subs	r3, r7, r4
 801228c:	f023 0303 	bic.w	r3, r3, #3
 8012290:	3304      	adds	r3, #4
 8012292:	3401      	adds	r4, #1
 8012294:	3e03      	subs	r6, #3
 8012296:	42b4      	cmp	r4, r6
 8012298:	bf88      	it	hi
 801229a:	2304      	movhi	r3, #4
 801229c:	4443      	add	r3, r8
 801229e:	2200      	movs	r2, #0
 80122a0:	f843 2b04 	str.w	r2, [r3], #4
 80122a4:	429f      	cmp	r7, r3
 80122a6:	d2fb      	bcs.n	80122a0 <__hexnan+0xcc>
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	b91b      	cbnz	r3, 80122b4 <__hexnan+0xe0>
 80122ac:	4547      	cmp	r7, r8
 80122ae:	d127      	bne.n	8012300 <__hexnan+0x12c>
 80122b0:	2301      	movs	r3, #1
 80122b2:	603b      	str	r3, [r7, #0]
 80122b4:	2005      	movs	r0, #5
 80122b6:	e026      	b.n	8012306 <__hexnan+0x132>
 80122b8:	3501      	adds	r5, #1
 80122ba:	2d08      	cmp	r5, #8
 80122bc:	f10b 0b01 	add.w	fp, fp, #1
 80122c0:	dd06      	ble.n	80122d0 <__hexnan+0xfc>
 80122c2:	4544      	cmp	r4, r8
 80122c4:	d9c3      	bls.n	801224e <__hexnan+0x7a>
 80122c6:	2300      	movs	r3, #0
 80122c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80122cc:	2501      	movs	r5, #1
 80122ce:	3c04      	subs	r4, #4
 80122d0:	6822      	ldr	r2, [r4, #0]
 80122d2:	f000 000f 	and.w	r0, r0, #15
 80122d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80122da:	6022      	str	r2, [r4, #0]
 80122dc:	e7b7      	b.n	801224e <__hexnan+0x7a>
 80122de:	2508      	movs	r5, #8
 80122e0:	e7b5      	b.n	801224e <__hexnan+0x7a>
 80122e2:	9b01      	ldr	r3, [sp, #4]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d0df      	beq.n	80122a8 <__hexnan+0xd4>
 80122e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122ec:	f1c3 0320 	rsb	r3, r3, #32
 80122f0:	fa22 f303 	lsr.w	r3, r2, r3
 80122f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80122f8:	401a      	ands	r2, r3
 80122fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80122fe:	e7d3      	b.n	80122a8 <__hexnan+0xd4>
 8012300:	3f04      	subs	r7, #4
 8012302:	e7d1      	b.n	80122a8 <__hexnan+0xd4>
 8012304:	2004      	movs	r0, #4
 8012306:	b007      	add	sp, #28
 8012308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801230c <_gettimeofday_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	4d07      	ldr	r5, [pc, #28]	; (801232c <_gettimeofday_r+0x20>)
 8012310:	2300      	movs	r3, #0
 8012312:	4604      	mov	r4, r0
 8012314:	4608      	mov	r0, r1
 8012316:	4611      	mov	r1, r2
 8012318:	602b      	str	r3, [r5, #0]
 801231a:	f001 fb67 	bl	80139ec <_gettimeofday>
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	d102      	bne.n	8012328 <_gettimeofday_r+0x1c>
 8012322:	682b      	ldr	r3, [r5, #0]
 8012324:	b103      	cbz	r3, 8012328 <_gettimeofday_r+0x1c>
 8012326:	6023      	str	r3, [r4, #0]
 8012328:	bd38      	pop	{r3, r4, r5, pc}
 801232a:	bf00      	nop
 801232c:	20003be4 	.word	0x20003be4

08012330 <_isatty_r>:
 8012330:	b538      	push	{r3, r4, r5, lr}
 8012332:	4d06      	ldr	r5, [pc, #24]	; (801234c <_isatty_r+0x1c>)
 8012334:	2300      	movs	r3, #0
 8012336:	4604      	mov	r4, r0
 8012338:	4608      	mov	r0, r1
 801233a:	602b      	str	r3, [r5, #0]
 801233c:	f7ef fa07 	bl	800174e <_isatty>
 8012340:	1c43      	adds	r3, r0, #1
 8012342:	d102      	bne.n	801234a <_isatty_r+0x1a>
 8012344:	682b      	ldr	r3, [r5, #0]
 8012346:	b103      	cbz	r3, 801234a <_isatty_r+0x1a>
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	bd38      	pop	{r3, r4, r5, pc}
 801234c:	20003be4 	.word	0x20003be4

08012350 <_lseek_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	4d07      	ldr	r5, [pc, #28]	; (8012370 <_lseek_r+0x20>)
 8012354:	4604      	mov	r4, r0
 8012356:	4608      	mov	r0, r1
 8012358:	4611      	mov	r1, r2
 801235a:	2200      	movs	r2, #0
 801235c:	602a      	str	r2, [r5, #0]
 801235e:	461a      	mov	r2, r3
 8012360:	f7ef fa00 	bl	8001764 <_lseek>
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	d102      	bne.n	801236e <_lseek_r+0x1e>
 8012368:	682b      	ldr	r3, [r5, #0]
 801236a:	b103      	cbz	r3, 801236e <_lseek_r+0x1e>
 801236c:	6023      	str	r3, [r4, #0]
 801236e:	bd38      	pop	{r3, r4, r5, pc}
 8012370:	20003be4 	.word	0x20003be4

08012374 <__ascii_mbtowc>:
 8012374:	b082      	sub	sp, #8
 8012376:	b901      	cbnz	r1, 801237a <__ascii_mbtowc+0x6>
 8012378:	a901      	add	r1, sp, #4
 801237a:	b142      	cbz	r2, 801238e <__ascii_mbtowc+0x1a>
 801237c:	b14b      	cbz	r3, 8012392 <__ascii_mbtowc+0x1e>
 801237e:	7813      	ldrb	r3, [r2, #0]
 8012380:	600b      	str	r3, [r1, #0]
 8012382:	7812      	ldrb	r2, [r2, #0]
 8012384:	1e10      	subs	r0, r2, #0
 8012386:	bf18      	it	ne
 8012388:	2001      	movne	r0, #1
 801238a:	b002      	add	sp, #8
 801238c:	4770      	bx	lr
 801238e:	4610      	mov	r0, r2
 8012390:	e7fb      	b.n	801238a <__ascii_mbtowc+0x16>
 8012392:	f06f 0001 	mvn.w	r0, #1
 8012396:	e7f8      	b.n	801238a <__ascii_mbtowc+0x16>

08012398 <memmove>:
 8012398:	4288      	cmp	r0, r1
 801239a:	b510      	push	{r4, lr}
 801239c:	eb01 0402 	add.w	r4, r1, r2
 80123a0:	d902      	bls.n	80123a8 <memmove+0x10>
 80123a2:	4284      	cmp	r4, r0
 80123a4:	4623      	mov	r3, r4
 80123a6:	d807      	bhi.n	80123b8 <memmove+0x20>
 80123a8:	1e43      	subs	r3, r0, #1
 80123aa:	42a1      	cmp	r1, r4
 80123ac:	d008      	beq.n	80123c0 <memmove+0x28>
 80123ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123b6:	e7f8      	b.n	80123aa <memmove+0x12>
 80123b8:	4402      	add	r2, r0
 80123ba:	4601      	mov	r1, r0
 80123bc:	428a      	cmp	r2, r1
 80123be:	d100      	bne.n	80123c2 <memmove+0x2a>
 80123c0:	bd10      	pop	{r4, pc}
 80123c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123ca:	e7f7      	b.n	80123bc <memmove+0x24>

080123cc <__malloc_lock>:
 80123cc:	4801      	ldr	r0, [pc, #4]	; (80123d4 <__malloc_lock+0x8>)
 80123ce:	f7fd bb12 	b.w	800f9f6 <__retarget_lock_acquire_recursive>
 80123d2:	bf00      	nop
 80123d4:	20003bd8 	.word	0x20003bd8

080123d8 <__malloc_unlock>:
 80123d8:	4801      	ldr	r0, [pc, #4]	; (80123e0 <__malloc_unlock+0x8>)
 80123da:	f7fd bb0d 	b.w	800f9f8 <__retarget_lock_release_recursive>
 80123de:	bf00      	nop
 80123e0:	20003bd8 	.word	0x20003bd8

080123e4 <_Balloc>:
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80123e8:	4604      	mov	r4, r0
 80123ea:	460d      	mov	r5, r1
 80123ec:	b976      	cbnz	r6, 801240c <_Balloc+0x28>
 80123ee:	2010      	movs	r0, #16
 80123f0:	f7fd fb68 	bl	800fac4 <malloc>
 80123f4:	4602      	mov	r2, r0
 80123f6:	6260      	str	r0, [r4, #36]	; 0x24
 80123f8:	b920      	cbnz	r0, 8012404 <_Balloc+0x20>
 80123fa:	4b18      	ldr	r3, [pc, #96]	; (801245c <_Balloc+0x78>)
 80123fc:	4818      	ldr	r0, [pc, #96]	; (8012460 <_Balloc+0x7c>)
 80123fe:	2166      	movs	r1, #102	; 0x66
 8012400:	f001 fa82 	bl	8013908 <__assert_func>
 8012404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012408:	6006      	str	r6, [r0, #0]
 801240a:	60c6      	str	r6, [r0, #12]
 801240c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801240e:	68f3      	ldr	r3, [r6, #12]
 8012410:	b183      	cbz	r3, 8012434 <_Balloc+0x50>
 8012412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801241a:	b9b8      	cbnz	r0, 801244c <_Balloc+0x68>
 801241c:	2101      	movs	r1, #1
 801241e:	fa01 f605 	lsl.w	r6, r1, r5
 8012422:	1d72      	adds	r2, r6, #5
 8012424:	0092      	lsls	r2, r2, #2
 8012426:	4620      	mov	r0, r4
 8012428:	f7fd fb82 	bl	800fb30 <_calloc_r>
 801242c:	b160      	cbz	r0, 8012448 <_Balloc+0x64>
 801242e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012432:	e00e      	b.n	8012452 <_Balloc+0x6e>
 8012434:	2221      	movs	r2, #33	; 0x21
 8012436:	2104      	movs	r1, #4
 8012438:	4620      	mov	r0, r4
 801243a:	f7fd fb79 	bl	800fb30 <_calloc_r>
 801243e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012440:	60f0      	str	r0, [r6, #12]
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d1e4      	bne.n	8012412 <_Balloc+0x2e>
 8012448:	2000      	movs	r0, #0
 801244a:	bd70      	pop	{r4, r5, r6, pc}
 801244c:	6802      	ldr	r2, [r0, #0]
 801244e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012452:	2300      	movs	r3, #0
 8012454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012458:	e7f7      	b.n	801244a <_Balloc+0x66>
 801245a:	bf00      	nop
 801245c:	08017bc4 	.word	0x08017bc4
 8012460:	08017bdb 	.word	0x08017bdb

08012464 <_Bfree>:
 8012464:	b570      	push	{r4, r5, r6, lr}
 8012466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012468:	4605      	mov	r5, r0
 801246a:	460c      	mov	r4, r1
 801246c:	b976      	cbnz	r6, 801248c <_Bfree+0x28>
 801246e:	2010      	movs	r0, #16
 8012470:	f7fd fb28 	bl	800fac4 <malloc>
 8012474:	4602      	mov	r2, r0
 8012476:	6268      	str	r0, [r5, #36]	; 0x24
 8012478:	b920      	cbnz	r0, 8012484 <_Bfree+0x20>
 801247a:	4b09      	ldr	r3, [pc, #36]	; (80124a0 <_Bfree+0x3c>)
 801247c:	4809      	ldr	r0, [pc, #36]	; (80124a4 <_Bfree+0x40>)
 801247e:	218a      	movs	r1, #138	; 0x8a
 8012480:	f001 fa42 	bl	8013908 <__assert_func>
 8012484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012488:	6006      	str	r6, [r0, #0]
 801248a:	60c6      	str	r6, [r0, #12]
 801248c:	b13c      	cbz	r4, 801249e <_Bfree+0x3a>
 801248e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012490:	6862      	ldr	r2, [r4, #4]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012498:	6021      	str	r1, [r4, #0]
 801249a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801249e:	bd70      	pop	{r4, r5, r6, pc}
 80124a0:	08017bc4 	.word	0x08017bc4
 80124a4:	08017bdb 	.word	0x08017bdb

080124a8 <__multadd>:
 80124a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ac:	690d      	ldr	r5, [r1, #16]
 80124ae:	4607      	mov	r7, r0
 80124b0:	460c      	mov	r4, r1
 80124b2:	461e      	mov	r6, r3
 80124b4:	f101 0c14 	add.w	ip, r1, #20
 80124b8:	2000      	movs	r0, #0
 80124ba:	f8dc 3000 	ldr.w	r3, [ip]
 80124be:	b299      	uxth	r1, r3
 80124c0:	fb02 6101 	mla	r1, r2, r1, r6
 80124c4:	0c1e      	lsrs	r6, r3, #16
 80124c6:	0c0b      	lsrs	r3, r1, #16
 80124c8:	fb02 3306 	mla	r3, r2, r6, r3
 80124cc:	b289      	uxth	r1, r1
 80124ce:	3001      	adds	r0, #1
 80124d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80124d4:	4285      	cmp	r5, r0
 80124d6:	f84c 1b04 	str.w	r1, [ip], #4
 80124da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80124de:	dcec      	bgt.n	80124ba <__multadd+0x12>
 80124e0:	b30e      	cbz	r6, 8012526 <__multadd+0x7e>
 80124e2:	68a3      	ldr	r3, [r4, #8]
 80124e4:	42ab      	cmp	r3, r5
 80124e6:	dc19      	bgt.n	801251c <__multadd+0x74>
 80124e8:	6861      	ldr	r1, [r4, #4]
 80124ea:	4638      	mov	r0, r7
 80124ec:	3101      	adds	r1, #1
 80124ee:	f7ff ff79 	bl	80123e4 <_Balloc>
 80124f2:	4680      	mov	r8, r0
 80124f4:	b928      	cbnz	r0, 8012502 <__multadd+0x5a>
 80124f6:	4602      	mov	r2, r0
 80124f8:	4b0c      	ldr	r3, [pc, #48]	; (801252c <__multadd+0x84>)
 80124fa:	480d      	ldr	r0, [pc, #52]	; (8012530 <__multadd+0x88>)
 80124fc:	21b5      	movs	r1, #181	; 0xb5
 80124fe:	f001 fa03 	bl	8013908 <__assert_func>
 8012502:	6922      	ldr	r2, [r4, #16]
 8012504:	3202      	adds	r2, #2
 8012506:	f104 010c 	add.w	r1, r4, #12
 801250a:	0092      	lsls	r2, r2, #2
 801250c:	300c      	adds	r0, #12
 801250e:	f7fd faf9 	bl	800fb04 <memcpy>
 8012512:	4621      	mov	r1, r4
 8012514:	4638      	mov	r0, r7
 8012516:	f7ff ffa5 	bl	8012464 <_Bfree>
 801251a:	4644      	mov	r4, r8
 801251c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012520:	3501      	adds	r5, #1
 8012522:	615e      	str	r6, [r3, #20]
 8012524:	6125      	str	r5, [r4, #16]
 8012526:	4620      	mov	r0, r4
 8012528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801252c:	08017b38 	.word	0x08017b38
 8012530:	08017bdb 	.word	0x08017bdb

08012534 <__s2b>:
 8012534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012538:	460c      	mov	r4, r1
 801253a:	4615      	mov	r5, r2
 801253c:	461f      	mov	r7, r3
 801253e:	2209      	movs	r2, #9
 8012540:	3308      	adds	r3, #8
 8012542:	4606      	mov	r6, r0
 8012544:	fb93 f3f2 	sdiv	r3, r3, r2
 8012548:	2100      	movs	r1, #0
 801254a:	2201      	movs	r2, #1
 801254c:	429a      	cmp	r2, r3
 801254e:	db09      	blt.n	8012564 <__s2b+0x30>
 8012550:	4630      	mov	r0, r6
 8012552:	f7ff ff47 	bl	80123e4 <_Balloc>
 8012556:	b940      	cbnz	r0, 801256a <__s2b+0x36>
 8012558:	4602      	mov	r2, r0
 801255a:	4b19      	ldr	r3, [pc, #100]	; (80125c0 <__s2b+0x8c>)
 801255c:	4819      	ldr	r0, [pc, #100]	; (80125c4 <__s2b+0x90>)
 801255e:	21ce      	movs	r1, #206	; 0xce
 8012560:	f001 f9d2 	bl	8013908 <__assert_func>
 8012564:	0052      	lsls	r2, r2, #1
 8012566:	3101      	adds	r1, #1
 8012568:	e7f0      	b.n	801254c <__s2b+0x18>
 801256a:	9b08      	ldr	r3, [sp, #32]
 801256c:	6143      	str	r3, [r0, #20]
 801256e:	2d09      	cmp	r5, #9
 8012570:	f04f 0301 	mov.w	r3, #1
 8012574:	6103      	str	r3, [r0, #16]
 8012576:	dd16      	ble.n	80125a6 <__s2b+0x72>
 8012578:	f104 0909 	add.w	r9, r4, #9
 801257c:	46c8      	mov	r8, r9
 801257e:	442c      	add	r4, r5
 8012580:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012584:	4601      	mov	r1, r0
 8012586:	3b30      	subs	r3, #48	; 0x30
 8012588:	220a      	movs	r2, #10
 801258a:	4630      	mov	r0, r6
 801258c:	f7ff ff8c 	bl	80124a8 <__multadd>
 8012590:	45a0      	cmp	r8, r4
 8012592:	d1f5      	bne.n	8012580 <__s2b+0x4c>
 8012594:	f1a5 0408 	sub.w	r4, r5, #8
 8012598:	444c      	add	r4, r9
 801259a:	1b2d      	subs	r5, r5, r4
 801259c:	1963      	adds	r3, r4, r5
 801259e:	42bb      	cmp	r3, r7
 80125a0:	db04      	blt.n	80125ac <__s2b+0x78>
 80125a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125a6:	340a      	adds	r4, #10
 80125a8:	2509      	movs	r5, #9
 80125aa:	e7f6      	b.n	801259a <__s2b+0x66>
 80125ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80125b0:	4601      	mov	r1, r0
 80125b2:	3b30      	subs	r3, #48	; 0x30
 80125b4:	220a      	movs	r2, #10
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7ff ff76 	bl	80124a8 <__multadd>
 80125bc:	e7ee      	b.n	801259c <__s2b+0x68>
 80125be:	bf00      	nop
 80125c0:	08017b38 	.word	0x08017b38
 80125c4:	08017bdb 	.word	0x08017bdb

080125c8 <__hi0bits>:
 80125c8:	0c03      	lsrs	r3, r0, #16
 80125ca:	041b      	lsls	r3, r3, #16
 80125cc:	b9d3      	cbnz	r3, 8012604 <__hi0bits+0x3c>
 80125ce:	0400      	lsls	r0, r0, #16
 80125d0:	2310      	movs	r3, #16
 80125d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80125d6:	bf04      	itt	eq
 80125d8:	0200      	lsleq	r0, r0, #8
 80125da:	3308      	addeq	r3, #8
 80125dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80125e0:	bf04      	itt	eq
 80125e2:	0100      	lsleq	r0, r0, #4
 80125e4:	3304      	addeq	r3, #4
 80125e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80125ea:	bf04      	itt	eq
 80125ec:	0080      	lsleq	r0, r0, #2
 80125ee:	3302      	addeq	r3, #2
 80125f0:	2800      	cmp	r0, #0
 80125f2:	db05      	blt.n	8012600 <__hi0bits+0x38>
 80125f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80125f8:	f103 0301 	add.w	r3, r3, #1
 80125fc:	bf08      	it	eq
 80125fe:	2320      	moveq	r3, #32
 8012600:	4618      	mov	r0, r3
 8012602:	4770      	bx	lr
 8012604:	2300      	movs	r3, #0
 8012606:	e7e4      	b.n	80125d2 <__hi0bits+0xa>

08012608 <__lo0bits>:
 8012608:	6803      	ldr	r3, [r0, #0]
 801260a:	f013 0207 	ands.w	r2, r3, #7
 801260e:	4601      	mov	r1, r0
 8012610:	d00b      	beq.n	801262a <__lo0bits+0x22>
 8012612:	07da      	lsls	r2, r3, #31
 8012614:	d423      	bmi.n	801265e <__lo0bits+0x56>
 8012616:	0798      	lsls	r0, r3, #30
 8012618:	bf49      	itett	mi
 801261a:	085b      	lsrmi	r3, r3, #1
 801261c:	089b      	lsrpl	r3, r3, #2
 801261e:	2001      	movmi	r0, #1
 8012620:	600b      	strmi	r3, [r1, #0]
 8012622:	bf5c      	itt	pl
 8012624:	600b      	strpl	r3, [r1, #0]
 8012626:	2002      	movpl	r0, #2
 8012628:	4770      	bx	lr
 801262a:	b298      	uxth	r0, r3
 801262c:	b9a8      	cbnz	r0, 801265a <__lo0bits+0x52>
 801262e:	0c1b      	lsrs	r3, r3, #16
 8012630:	2010      	movs	r0, #16
 8012632:	b2da      	uxtb	r2, r3
 8012634:	b90a      	cbnz	r2, 801263a <__lo0bits+0x32>
 8012636:	3008      	adds	r0, #8
 8012638:	0a1b      	lsrs	r3, r3, #8
 801263a:	071a      	lsls	r2, r3, #28
 801263c:	bf04      	itt	eq
 801263e:	091b      	lsreq	r3, r3, #4
 8012640:	3004      	addeq	r0, #4
 8012642:	079a      	lsls	r2, r3, #30
 8012644:	bf04      	itt	eq
 8012646:	089b      	lsreq	r3, r3, #2
 8012648:	3002      	addeq	r0, #2
 801264a:	07da      	lsls	r2, r3, #31
 801264c:	d403      	bmi.n	8012656 <__lo0bits+0x4e>
 801264e:	085b      	lsrs	r3, r3, #1
 8012650:	f100 0001 	add.w	r0, r0, #1
 8012654:	d005      	beq.n	8012662 <__lo0bits+0x5a>
 8012656:	600b      	str	r3, [r1, #0]
 8012658:	4770      	bx	lr
 801265a:	4610      	mov	r0, r2
 801265c:	e7e9      	b.n	8012632 <__lo0bits+0x2a>
 801265e:	2000      	movs	r0, #0
 8012660:	4770      	bx	lr
 8012662:	2020      	movs	r0, #32
 8012664:	4770      	bx	lr
	...

08012668 <__i2b>:
 8012668:	b510      	push	{r4, lr}
 801266a:	460c      	mov	r4, r1
 801266c:	2101      	movs	r1, #1
 801266e:	f7ff feb9 	bl	80123e4 <_Balloc>
 8012672:	4602      	mov	r2, r0
 8012674:	b928      	cbnz	r0, 8012682 <__i2b+0x1a>
 8012676:	4b05      	ldr	r3, [pc, #20]	; (801268c <__i2b+0x24>)
 8012678:	4805      	ldr	r0, [pc, #20]	; (8012690 <__i2b+0x28>)
 801267a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801267e:	f001 f943 	bl	8013908 <__assert_func>
 8012682:	2301      	movs	r3, #1
 8012684:	6144      	str	r4, [r0, #20]
 8012686:	6103      	str	r3, [r0, #16]
 8012688:	bd10      	pop	{r4, pc}
 801268a:	bf00      	nop
 801268c:	08017b38 	.word	0x08017b38
 8012690:	08017bdb 	.word	0x08017bdb

08012694 <__multiply>:
 8012694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012698:	4691      	mov	r9, r2
 801269a:	690a      	ldr	r2, [r1, #16]
 801269c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	bfb8      	it	lt
 80126a4:	460b      	movlt	r3, r1
 80126a6:	460c      	mov	r4, r1
 80126a8:	bfbc      	itt	lt
 80126aa:	464c      	movlt	r4, r9
 80126ac:	4699      	movlt	r9, r3
 80126ae:	6927      	ldr	r7, [r4, #16]
 80126b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80126b4:	68a3      	ldr	r3, [r4, #8]
 80126b6:	6861      	ldr	r1, [r4, #4]
 80126b8:	eb07 060a 	add.w	r6, r7, sl
 80126bc:	42b3      	cmp	r3, r6
 80126be:	b085      	sub	sp, #20
 80126c0:	bfb8      	it	lt
 80126c2:	3101      	addlt	r1, #1
 80126c4:	f7ff fe8e 	bl	80123e4 <_Balloc>
 80126c8:	b930      	cbnz	r0, 80126d8 <__multiply+0x44>
 80126ca:	4602      	mov	r2, r0
 80126cc:	4b44      	ldr	r3, [pc, #272]	; (80127e0 <__multiply+0x14c>)
 80126ce:	4845      	ldr	r0, [pc, #276]	; (80127e4 <__multiply+0x150>)
 80126d0:	f240 115d 	movw	r1, #349	; 0x15d
 80126d4:	f001 f918 	bl	8013908 <__assert_func>
 80126d8:	f100 0514 	add.w	r5, r0, #20
 80126dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80126e0:	462b      	mov	r3, r5
 80126e2:	2200      	movs	r2, #0
 80126e4:	4543      	cmp	r3, r8
 80126e6:	d321      	bcc.n	801272c <__multiply+0x98>
 80126e8:	f104 0314 	add.w	r3, r4, #20
 80126ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80126f0:	f109 0314 	add.w	r3, r9, #20
 80126f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80126f8:	9202      	str	r2, [sp, #8]
 80126fa:	1b3a      	subs	r2, r7, r4
 80126fc:	3a15      	subs	r2, #21
 80126fe:	f022 0203 	bic.w	r2, r2, #3
 8012702:	3204      	adds	r2, #4
 8012704:	f104 0115 	add.w	r1, r4, #21
 8012708:	428f      	cmp	r7, r1
 801270a:	bf38      	it	cc
 801270c:	2204      	movcc	r2, #4
 801270e:	9201      	str	r2, [sp, #4]
 8012710:	9a02      	ldr	r2, [sp, #8]
 8012712:	9303      	str	r3, [sp, #12]
 8012714:	429a      	cmp	r2, r3
 8012716:	d80c      	bhi.n	8012732 <__multiply+0x9e>
 8012718:	2e00      	cmp	r6, #0
 801271a:	dd03      	ble.n	8012724 <__multiply+0x90>
 801271c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012720:	2b00      	cmp	r3, #0
 8012722:	d05a      	beq.n	80127da <__multiply+0x146>
 8012724:	6106      	str	r6, [r0, #16]
 8012726:	b005      	add	sp, #20
 8012728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272c:	f843 2b04 	str.w	r2, [r3], #4
 8012730:	e7d8      	b.n	80126e4 <__multiply+0x50>
 8012732:	f8b3 a000 	ldrh.w	sl, [r3]
 8012736:	f1ba 0f00 	cmp.w	sl, #0
 801273a:	d024      	beq.n	8012786 <__multiply+0xf2>
 801273c:	f104 0e14 	add.w	lr, r4, #20
 8012740:	46a9      	mov	r9, r5
 8012742:	f04f 0c00 	mov.w	ip, #0
 8012746:	f85e 2b04 	ldr.w	r2, [lr], #4
 801274a:	f8d9 1000 	ldr.w	r1, [r9]
 801274e:	fa1f fb82 	uxth.w	fp, r2
 8012752:	b289      	uxth	r1, r1
 8012754:	fb0a 110b 	mla	r1, sl, fp, r1
 8012758:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801275c:	f8d9 2000 	ldr.w	r2, [r9]
 8012760:	4461      	add	r1, ip
 8012762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012766:	fb0a c20b 	mla	r2, sl, fp, ip
 801276a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801276e:	b289      	uxth	r1, r1
 8012770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012774:	4577      	cmp	r7, lr
 8012776:	f849 1b04 	str.w	r1, [r9], #4
 801277a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801277e:	d8e2      	bhi.n	8012746 <__multiply+0xb2>
 8012780:	9a01      	ldr	r2, [sp, #4]
 8012782:	f845 c002 	str.w	ip, [r5, r2]
 8012786:	9a03      	ldr	r2, [sp, #12]
 8012788:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801278c:	3304      	adds	r3, #4
 801278e:	f1b9 0f00 	cmp.w	r9, #0
 8012792:	d020      	beq.n	80127d6 <__multiply+0x142>
 8012794:	6829      	ldr	r1, [r5, #0]
 8012796:	f104 0c14 	add.w	ip, r4, #20
 801279a:	46ae      	mov	lr, r5
 801279c:	f04f 0a00 	mov.w	sl, #0
 80127a0:	f8bc b000 	ldrh.w	fp, [ip]
 80127a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80127a8:	fb09 220b 	mla	r2, r9, fp, r2
 80127ac:	4492      	add	sl, r2
 80127ae:	b289      	uxth	r1, r1
 80127b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80127b4:	f84e 1b04 	str.w	r1, [lr], #4
 80127b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80127bc:	f8be 1000 	ldrh.w	r1, [lr]
 80127c0:	0c12      	lsrs	r2, r2, #16
 80127c2:	fb09 1102 	mla	r1, r9, r2, r1
 80127c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80127ca:	4567      	cmp	r7, ip
 80127cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80127d0:	d8e6      	bhi.n	80127a0 <__multiply+0x10c>
 80127d2:	9a01      	ldr	r2, [sp, #4]
 80127d4:	50a9      	str	r1, [r5, r2]
 80127d6:	3504      	adds	r5, #4
 80127d8:	e79a      	b.n	8012710 <__multiply+0x7c>
 80127da:	3e01      	subs	r6, #1
 80127dc:	e79c      	b.n	8012718 <__multiply+0x84>
 80127de:	bf00      	nop
 80127e0:	08017b38 	.word	0x08017b38
 80127e4:	08017bdb 	.word	0x08017bdb

080127e8 <__pow5mult>:
 80127e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127ec:	4615      	mov	r5, r2
 80127ee:	f012 0203 	ands.w	r2, r2, #3
 80127f2:	4606      	mov	r6, r0
 80127f4:	460f      	mov	r7, r1
 80127f6:	d007      	beq.n	8012808 <__pow5mult+0x20>
 80127f8:	4c25      	ldr	r4, [pc, #148]	; (8012890 <__pow5mult+0xa8>)
 80127fa:	3a01      	subs	r2, #1
 80127fc:	2300      	movs	r3, #0
 80127fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012802:	f7ff fe51 	bl	80124a8 <__multadd>
 8012806:	4607      	mov	r7, r0
 8012808:	10ad      	asrs	r5, r5, #2
 801280a:	d03d      	beq.n	8012888 <__pow5mult+0xa0>
 801280c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801280e:	b97c      	cbnz	r4, 8012830 <__pow5mult+0x48>
 8012810:	2010      	movs	r0, #16
 8012812:	f7fd f957 	bl	800fac4 <malloc>
 8012816:	4602      	mov	r2, r0
 8012818:	6270      	str	r0, [r6, #36]	; 0x24
 801281a:	b928      	cbnz	r0, 8012828 <__pow5mult+0x40>
 801281c:	4b1d      	ldr	r3, [pc, #116]	; (8012894 <__pow5mult+0xac>)
 801281e:	481e      	ldr	r0, [pc, #120]	; (8012898 <__pow5mult+0xb0>)
 8012820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012824:	f001 f870 	bl	8013908 <__assert_func>
 8012828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801282c:	6004      	str	r4, [r0, #0]
 801282e:	60c4      	str	r4, [r0, #12]
 8012830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012838:	b94c      	cbnz	r4, 801284e <__pow5mult+0x66>
 801283a:	f240 2171 	movw	r1, #625	; 0x271
 801283e:	4630      	mov	r0, r6
 8012840:	f7ff ff12 	bl	8012668 <__i2b>
 8012844:	2300      	movs	r3, #0
 8012846:	f8c8 0008 	str.w	r0, [r8, #8]
 801284a:	4604      	mov	r4, r0
 801284c:	6003      	str	r3, [r0, #0]
 801284e:	f04f 0900 	mov.w	r9, #0
 8012852:	07eb      	lsls	r3, r5, #31
 8012854:	d50a      	bpl.n	801286c <__pow5mult+0x84>
 8012856:	4639      	mov	r1, r7
 8012858:	4622      	mov	r2, r4
 801285a:	4630      	mov	r0, r6
 801285c:	f7ff ff1a 	bl	8012694 <__multiply>
 8012860:	4639      	mov	r1, r7
 8012862:	4680      	mov	r8, r0
 8012864:	4630      	mov	r0, r6
 8012866:	f7ff fdfd 	bl	8012464 <_Bfree>
 801286a:	4647      	mov	r7, r8
 801286c:	106d      	asrs	r5, r5, #1
 801286e:	d00b      	beq.n	8012888 <__pow5mult+0xa0>
 8012870:	6820      	ldr	r0, [r4, #0]
 8012872:	b938      	cbnz	r0, 8012884 <__pow5mult+0x9c>
 8012874:	4622      	mov	r2, r4
 8012876:	4621      	mov	r1, r4
 8012878:	4630      	mov	r0, r6
 801287a:	f7ff ff0b 	bl	8012694 <__multiply>
 801287e:	6020      	str	r0, [r4, #0]
 8012880:	f8c0 9000 	str.w	r9, [r0]
 8012884:	4604      	mov	r4, r0
 8012886:	e7e4      	b.n	8012852 <__pow5mult+0x6a>
 8012888:	4638      	mov	r0, r7
 801288a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801288e:	bf00      	nop
 8012890:	08017d28 	.word	0x08017d28
 8012894:	08017bc4 	.word	0x08017bc4
 8012898:	08017bdb 	.word	0x08017bdb

0801289c <__lshift>:
 801289c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128a0:	460c      	mov	r4, r1
 80128a2:	6849      	ldr	r1, [r1, #4]
 80128a4:	6923      	ldr	r3, [r4, #16]
 80128a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80128aa:	68a3      	ldr	r3, [r4, #8]
 80128ac:	4607      	mov	r7, r0
 80128ae:	4691      	mov	r9, r2
 80128b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80128b4:	f108 0601 	add.w	r6, r8, #1
 80128b8:	42b3      	cmp	r3, r6
 80128ba:	db0b      	blt.n	80128d4 <__lshift+0x38>
 80128bc:	4638      	mov	r0, r7
 80128be:	f7ff fd91 	bl	80123e4 <_Balloc>
 80128c2:	4605      	mov	r5, r0
 80128c4:	b948      	cbnz	r0, 80128da <__lshift+0x3e>
 80128c6:	4602      	mov	r2, r0
 80128c8:	4b2a      	ldr	r3, [pc, #168]	; (8012974 <__lshift+0xd8>)
 80128ca:	482b      	ldr	r0, [pc, #172]	; (8012978 <__lshift+0xdc>)
 80128cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80128d0:	f001 f81a 	bl	8013908 <__assert_func>
 80128d4:	3101      	adds	r1, #1
 80128d6:	005b      	lsls	r3, r3, #1
 80128d8:	e7ee      	b.n	80128b8 <__lshift+0x1c>
 80128da:	2300      	movs	r3, #0
 80128dc:	f100 0114 	add.w	r1, r0, #20
 80128e0:	f100 0210 	add.w	r2, r0, #16
 80128e4:	4618      	mov	r0, r3
 80128e6:	4553      	cmp	r3, sl
 80128e8:	db37      	blt.n	801295a <__lshift+0xbe>
 80128ea:	6920      	ldr	r0, [r4, #16]
 80128ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80128f0:	f104 0314 	add.w	r3, r4, #20
 80128f4:	f019 091f 	ands.w	r9, r9, #31
 80128f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80128fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012900:	d02f      	beq.n	8012962 <__lshift+0xc6>
 8012902:	f1c9 0e20 	rsb	lr, r9, #32
 8012906:	468a      	mov	sl, r1
 8012908:	f04f 0c00 	mov.w	ip, #0
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	fa02 f209 	lsl.w	r2, r2, r9
 8012912:	ea42 020c 	orr.w	r2, r2, ip
 8012916:	f84a 2b04 	str.w	r2, [sl], #4
 801291a:	f853 2b04 	ldr.w	r2, [r3], #4
 801291e:	4298      	cmp	r0, r3
 8012920:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012924:	d8f2      	bhi.n	801290c <__lshift+0x70>
 8012926:	1b03      	subs	r3, r0, r4
 8012928:	3b15      	subs	r3, #21
 801292a:	f023 0303 	bic.w	r3, r3, #3
 801292e:	3304      	adds	r3, #4
 8012930:	f104 0215 	add.w	r2, r4, #21
 8012934:	4290      	cmp	r0, r2
 8012936:	bf38      	it	cc
 8012938:	2304      	movcc	r3, #4
 801293a:	f841 c003 	str.w	ip, [r1, r3]
 801293e:	f1bc 0f00 	cmp.w	ip, #0
 8012942:	d001      	beq.n	8012948 <__lshift+0xac>
 8012944:	f108 0602 	add.w	r6, r8, #2
 8012948:	3e01      	subs	r6, #1
 801294a:	4638      	mov	r0, r7
 801294c:	612e      	str	r6, [r5, #16]
 801294e:	4621      	mov	r1, r4
 8012950:	f7ff fd88 	bl	8012464 <_Bfree>
 8012954:	4628      	mov	r0, r5
 8012956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801295a:	f842 0f04 	str.w	r0, [r2, #4]!
 801295e:	3301      	adds	r3, #1
 8012960:	e7c1      	b.n	80128e6 <__lshift+0x4a>
 8012962:	3904      	subs	r1, #4
 8012964:	f853 2b04 	ldr.w	r2, [r3], #4
 8012968:	f841 2f04 	str.w	r2, [r1, #4]!
 801296c:	4298      	cmp	r0, r3
 801296e:	d8f9      	bhi.n	8012964 <__lshift+0xc8>
 8012970:	e7ea      	b.n	8012948 <__lshift+0xac>
 8012972:	bf00      	nop
 8012974:	08017b38 	.word	0x08017b38
 8012978:	08017bdb 	.word	0x08017bdb

0801297c <__mcmp>:
 801297c:	b530      	push	{r4, r5, lr}
 801297e:	6902      	ldr	r2, [r0, #16]
 8012980:	690c      	ldr	r4, [r1, #16]
 8012982:	1b12      	subs	r2, r2, r4
 8012984:	d10e      	bne.n	80129a4 <__mcmp+0x28>
 8012986:	f100 0314 	add.w	r3, r0, #20
 801298a:	3114      	adds	r1, #20
 801298c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012990:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012994:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012998:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801299c:	42a5      	cmp	r5, r4
 801299e:	d003      	beq.n	80129a8 <__mcmp+0x2c>
 80129a0:	d305      	bcc.n	80129ae <__mcmp+0x32>
 80129a2:	2201      	movs	r2, #1
 80129a4:	4610      	mov	r0, r2
 80129a6:	bd30      	pop	{r4, r5, pc}
 80129a8:	4283      	cmp	r3, r0
 80129aa:	d3f3      	bcc.n	8012994 <__mcmp+0x18>
 80129ac:	e7fa      	b.n	80129a4 <__mcmp+0x28>
 80129ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129b2:	e7f7      	b.n	80129a4 <__mcmp+0x28>

080129b4 <__mdiff>:
 80129b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b8:	460c      	mov	r4, r1
 80129ba:	4606      	mov	r6, r0
 80129bc:	4611      	mov	r1, r2
 80129be:	4620      	mov	r0, r4
 80129c0:	4690      	mov	r8, r2
 80129c2:	f7ff ffdb 	bl	801297c <__mcmp>
 80129c6:	1e05      	subs	r5, r0, #0
 80129c8:	d110      	bne.n	80129ec <__mdiff+0x38>
 80129ca:	4629      	mov	r1, r5
 80129cc:	4630      	mov	r0, r6
 80129ce:	f7ff fd09 	bl	80123e4 <_Balloc>
 80129d2:	b930      	cbnz	r0, 80129e2 <__mdiff+0x2e>
 80129d4:	4b3a      	ldr	r3, [pc, #232]	; (8012ac0 <__mdiff+0x10c>)
 80129d6:	4602      	mov	r2, r0
 80129d8:	f240 2132 	movw	r1, #562	; 0x232
 80129dc:	4839      	ldr	r0, [pc, #228]	; (8012ac4 <__mdiff+0x110>)
 80129de:	f000 ff93 	bl	8013908 <__assert_func>
 80129e2:	2301      	movs	r3, #1
 80129e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80129e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	bfa4      	itt	ge
 80129ee:	4643      	movge	r3, r8
 80129f0:	46a0      	movge	r8, r4
 80129f2:	4630      	mov	r0, r6
 80129f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80129f8:	bfa6      	itte	ge
 80129fa:	461c      	movge	r4, r3
 80129fc:	2500      	movge	r5, #0
 80129fe:	2501      	movlt	r5, #1
 8012a00:	f7ff fcf0 	bl	80123e4 <_Balloc>
 8012a04:	b920      	cbnz	r0, 8012a10 <__mdiff+0x5c>
 8012a06:	4b2e      	ldr	r3, [pc, #184]	; (8012ac0 <__mdiff+0x10c>)
 8012a08:	4602      	mov	r2, r0
 8012a0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a0e:	e7e5      	b.n	80129dc <__mdiff+0x28>
 8012a10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a14:	6926      	ldr	r6, [r4, #16]
 8012a16:	60c5      	str	r5, [r0, #12]
 8012a18:	f104 0914 	add.w	r9, r4, #20
 8012a1c:	f108 0514 	add.w	r5, r8, #20
 8012a20:	f100 0e14 	add.w	lr, r0, #20
 8012a24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012a28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012a2c:	f108 0210 	add.w	r2, r8, #16
 8012a30:	46f2      	mov	sl, lr
 8012a32:	2100      	movs	r1, #0
 8012a34:	f859 3b04 	ldr.w	r3, [r9], #4
 8012a38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012a3c:	fa1f f883 	uxth.w	r8, r3
 8012a40:	fa11 f18b 	uxtah	r1, r1, fp
 8012a44:	0c1b      	lsrs	r3, r3, #16
 8012a46:	eba1 0808 	sub.w	r8, r1, r8
 8012a4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012a4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012a52:	fa1f f888 	uxth.w	r8, r8
 8012a56:	1419      	asrs	r1, r3, #16
 8012a58:	454e      	cmp	r6, r9
 8012a5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012a5e:	f84a 3b04 	str.w	r3, [sl], #4
 8012a62:	d8e7      	bhi.n	8012a34 <__mdiff+0x80>
 8012a64:	1b33      	subs	r3, r6, r4
 8012a66:	3b15      	subs	r3, #21
 8012a68:	f023 0303 	bic.w	r3, r3, #3
 8012a6c:	3304      	adds	r3, #4
 8012a6e:	3415      	adds	r4, #21
 8012a70:	42a6      	cmp	r6, r4
 8012a72:	bf38      	it	cc
 8012a74:	2304      	movcc	r3, #4
 8012a76:	441d      	add	r5, r3
 8012a78:	4473      	add	r3, lr
 8012a7a:	469e      	mov	lr, r3
 8012a7c:	462e      	mov	r6, r5
 8012a7e:	4566      	cmp	r6, ip
 8012a80:	d30e      	bcc.n	8012aa0 <__mdiff+0xec>
 8012a82:	f10c 0203 	add.w	r2, ip, #3
 8012a86:	1b52      	subs	r2, r2, r5
 8012a88:	f022 0203 	bic.w	r2, r2, #3
 8012a8c:	3d03      	subs	r5, #3
 8012a8e:	45ac      	cmp	ip, r5
 8012a90:	bf38      	it	cc
 8012a92:	2200      	movcc	r2, #0
 8012a94:	441a      	add	r2, r3
 8012a96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012a9a:	b17b      	cbz	r3, 8012abc <__mdiff+0x108>
 8012a9c:	6107      	str	r7, [r0, #16]
 8012a9e:	e7a3      	b.n	80129e8 <__mdiff+0x34>
 8012aa0:	f856 8b04 	ldr.w	r8, [r6], #4
 8012aa4:	fa11 f288 	uxtah	r2, r1, r8
 8012aa8:	1414      	asrs	r4, r2, #16
 8012aaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012aae:	b292      	uxth	r2, r2
 8012ab0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ab4:	f84e 2b04 	str.w	r2, [lr], #4
 8012ab8:	1421      	asrs	r1, r4, #16
 8012aba:	e7e0      	b.n	8012a7e <__mdiff+0xca>
 8012abc:	3f01      	subs	r7, #1
 8012abe:	e7ea      	b.n	8012a96 <__mdiff+0xe2>
 8012ac0:	08017b38 	.word	0x08017b38
 8012ac4:	08017bdb 	.word	0x08017bdb

08012ac8 <__ulp>:
 8012ac8:	b082      	sub	sp, #8
 8012aca:	ed8d 0b00 	vstr	d0, [sp]
 8012ace:	9b01      	ldr	r3, [sp, #4]
 8012ad0:	4912      	ldr	r1, [pc, #72]	; (8012b1c <__ulp+0x54>)
 8012ad2:	4019      	ands	r1, r3
 8012ad4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012ad8:	2900      	cmp	r1, #0
 8012ada:	dd05      	ble.n	8012ae8 <__ulp+0x20>
 8012adc:	2200      	movs	r2, #0
 8012ade:	460b      	mov	r3, r1
 8012ae0:	ec43 2b10 	vmov	d0, r2, r3
 8012ae4:	b002      	add	sp, #8
 8012ae6:	4770      	bx	lr
 8012ae8:	4249      	negs	r1, r1
 8012aea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012aee:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012af2:	f04f 0200 	mov.w	r2, #0
 8012af6:	f04f 0300 	mov.w	r3, #0
 8012afa:	da04      	bge.n	8012b06 <__ulp+0x3e>
 8012afc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012b00:	fa41 f300 	asr.w	r3, r1, r0
 8012b04:	e7ec      	b.n	8012ae0 <__ulp+0x18>
 8012b06:	f1a0 0114 	sub.w	r1, r0, #20
 8012b0a:	291e      	cmp	r1, #30
 8012b0c:	bfda      	itte	le
 8012b0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012b12:	fa20 f101 	lsrle.w	r1, r0, r1
 8012b16:	2101      	movgt	r1, #1
 8012b18:	460a      	mov	r2, r1
 8012b1a:	e7e1      	b.n	8012ae0 <__ulp+0x18>
 8012b1c:	7ff00000 	.word	0x7ff00000

08012b20 <__b2d>:
 8012b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b22:	6905      	ldr	r5, [r0, #16]
 8012b24:	f100 0714 	add.w	r7, r0, #20
 8012b28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012b2c:	1f2e      	subs	r6, r5, #4
 8012b2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012b32:	4620      	mov	r0, r4
 8012b34:	f7ff fd48 	bl	80125c8 <__hi0bits>
 8012b38:	f1c0 0320 	rsb	r3, r0, #32
 8012b3c:	280a      	cmp	r0, #10
 8012b3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012bbc <__b2d+0x9c>
 8012b42:	600b      	str	r3, [r1, #0]
 8012b44:	dc14      	bgt.n	8012b70 <__b2d+0x50>
 8012b46:	f1c0 0e0b 	rsb	lr, r0, #11
 8012b4a:	fa24 f10e 	lsr.w	r1, r4, lr
 8012b4e:	42b7      	cmp	r7, r6
 8012b50:	ea41 030c 	orr.w	r3, r1, ip
 8012b54:	bf34      	ite	cc
 8012b56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012b5a:	2100      	movcs	r1, #0
 8012b5c:	3015      	adds	r0, #21
 8012b5e:	fa04 f000 	lsl.w	r0, r4, r0
 8012b62:	fa21 f10e 	lsr.w	r1, r1, lr
 8012b66:	ea40 0201 	orr.w	r2, r0, r1
 8012b6a:	ec43 2b10 	vmov	d0, r2, r3
 8012b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b70:	42b7      	cmp	r7, r6
 8012b72:	bf3a      	itte	cc
 8012b74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012b78:	f1a5 0608 	subcc.w	r6, r5, #8
 8012b7c:	2100      	movcs	r1, #0
 8012b7e:	380b      	subs	r0, #11
 8012b80:	d017      	beq.n	8012bb2 <__b2d+0x92>
 8012b82:	f1c0 0c20 	rsb	ip, r0, #32
 8012b86:	fa04 f500 	lsl.w	r5, r4, r0
 8012b8a:	42be      	cmp	r6, r7
 8012b8c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012b90:	ea45 0504 	orr.w	r5, r5, r4
 8012b94:	bf8c      	ite	hi
 8012b96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012b9a:	2400      	movls	r4, #0
 8012b9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012ba0:	fa01 f000 	lsl.w	r0, r1, r0
 8012ba4:	fa24 f40c 	lsr.w	r4, r4, ip
 8012ba8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012bac:	ea40 0204 	orr.w	r2, r0, r4
 8012bb0:	e7db      	b.n	8012b6a <__b2d+0x4a>
 8012bb2:	ea44 030c 	orr.w	r3, r4, ip
 8012bb6:	460a      	mov	r2, r1
 8012bb8:	e7d7      	b.n	8012b6a <__b2d+0x4a>
 8012bba:	bf00      	nop
 8012bbc:	3ff00000 	.word	0x3ff00000

08012bc0 <__d2b>:
 8012bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012bc4:	4689      	mov	r9, r1
 8012bc6:	2101      	movs	r1, #1
 8012bc8:	ec57 6b10 	vmov	r6, r7, d0
 8012bcc:	4690      	mov	r8, r2
 8012bce:	f7ff fc09 	bl	80123e4 <_Balloc>
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	b930      	cbnz	r0, 8012be4 <__d2b+0x24>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	4b25      	ldr	r3, [pc, #148]	; (8012c70 <__d2b+0xb0>)
 8012bda:	4826      	ldr	r0, [pc, #152]	; (8012c74 <__d2b+0xb4>)
 8012bdc:	f240 310a 	movw	r1, #778	; 0x30a
 8012be0:	f000 fe92 	bl	8013908 <__assert_func>
 8012be4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012bec:	bb35      	cbnz	r5, 8012c3c <__d2b+0x7c>
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	9301      	str	r3, [sp, #4]
 8012bf2:	d028      	beq.n	8012c46 <__d2b+0x86>
 8012bf4:	4668      	mov	r0, sp
 8012bf6:	9600      	str	r6, [sp, #0]
 8012bf8:	f7ff fd06 	bl	8012608 <__lo0bits>
 8012bfc:	9900      	ldr	r1, [sp, #0]
 8012bfe:	b300      	cbz	r0, 8012c42 <__d2b+0x82>
 8012c00:	9a01      	ldr	r2, [sp, #4]
 8012c02:	f1c0 0320 	rsb	r3, r0, #32
 8012c06:	fa02 f303 	lsl.w	r3, r2, r3
 8012c0a:	430b      	orrs	r3, r1
 8012c0c:	40c2      	lsrs	r2, r0
 8012c0e:	6163      	str	r3, [r4, #20]
 8012c10:	9201      	str	r2, [sp, #4]
 8012c12:	9b01      	ldr	r3, [sp, #4]
 8012c14:	61a3      	str	r3, [r4, #24]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	bf14      	ite	ne
 8012c1a:	2202      	movne	r2, #2
 8012c1c:	2201      	moveq	r2, #1
 8012c1e:	6122      	str	r2, [r4, #16]
 8012c20:	b1d5      	cbz	r5, 8012c58 <__d2b+0x98>
 8012c22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012c26:	4405      	add	r5, r0
 8012c28:	f8c9 5000 	str.w	r5, [r9]
 8012c2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012c30:	f8c8 0000 	str.w	r0, [r8]
 8012c34:	4620      	mov	r0, r4
 8012c36:	b003      	add	sp, #12
 8012c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012c40:	e7d5      	b.n	8012bee <__d2b+0x2e>
 8012c42:	6161      	str	r1, [r4, #20]
 8012c44:	e7e5      	b.n	8012c12 <__d2b+0x52>
 8012c46:	a801      	add	r0, sp, #4
 8012c48:	f7ff fcde 	bl	8012608 <__lo0bits>
 8012c4c:	9b01      	ldr	r3, [sp, #4]
 8012c4e:	6163      	str	r3, [r4, #20]
 8012c50:	2201      	movs	r2, #1
 8012c52:	6122      	str	r2, [r4, #16]
 8012c54:	3020      	adds	r0, #32
 8012c56:	e7e3      	b.n	8012c20 <__d2b+0x60>
 8012c58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012c5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012c60:	f8c9 0000 	str.w	r0, [r9]
 8012c64:	6918      	ldr	r0, [r3, #16]
 8012c66:	f7ff fcaf 	bl	80125c8 <__hi0bits>
 8012c6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012c6e:	e7df      	b.n	8012c30 <__d2b+0x70>
 8012c70:	08017b38 	.word	0x08017b38
 8012c74:	08017bdb 	.word	0x08017bdb

08012c78 <__ratio>:
 8012c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7c:	4688      	mov	r8, r1
 8012c7e:	4669      	mov	r1, sp
 8012c80:	4681      	mov	r9, r0
 8012c82:	f7ff ff4d 	bl	8012b20 <__b2d>
 8012c86:	a901      	add	r1, sp, #4
 8012c88:	4640      	mov	r0, r8
 8012c8a:	ec55 4b10 	vmov	r4, r5, d0
 8012c8e:	f7ff ff47 	bl	8012b20 <__b2d>
 8012c92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012c96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012c9a:	eba3 0c02 	sub.w	ip, r3, r2
 8012c9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ca2:	1a9b      	subs	r3, r3, r2
 8012ca4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012ca8:	ec51 0b10 	vmov	r0, r1, d0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	bfd6      	itet	le
 8012cb0:	460a      	movle	r2, r1
 8012cb2:	462a      	movgt	r2, r5
 8012cb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012cb8:	468b      	mov	fp, r1
 8012cba:	462f      	mov	r7, r5
 8012cbc:	bfd4      	ite	le
 8012cbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012cc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	ee10 2a10 	vmov	r2, s0
 8012ccc:	465b      	mov	r3, fp
 8012cce:	4639      	mov	r1, r7
 8012cd0:	f7ed fefe 	bl	8000ad0 <__aeabi_ddiv>
 8012cd4:	ec41 0b10 	vmov	d0, r0, r1
 8012cd8:	b003      	add	sp, #12
 8012cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cde <__copybits>:
 8012cde:	3901      	subs	r1, #1
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	1149      	asrs	r1, r1, #5
 8012ce4:	6914      	ldr	r4, [r2, #16]
 8012ce6:	3101      	adds	r1, #1
 8012ce8:	f102 0314 	add.w	r3, r2, #20
 8012cec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012cf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012cf4:	1f05      	subs	r5, r0, #4
 8012cf6:	42a3      	cmp	r3, r4
 8012cf8:	d30c      	bcc.n	8012d14 <__copybits+0x36>
 8012cfa:	1aa3      	subs	r3, r4, r2
 8012cfc:	3b11      	subs	r3, #17
 8012cfe:	f023 0303 	bic.w	r3, r3, #3
 8012d02:	3211      	adds	r2, #17
 8012d04:	42a2      	cmp	r2, r4
 8012d06:	bf88      	it	hi
 8012d08:	2300      	movhi	r3, #0
 8012d0a:	4418      	add	r0, r3
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	4288      	cmp	r0, r1
 8012d10:	d305      	bcc.n	8012d1e <__copybits+0x40>
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	f853 6b04 	ldr.w	r6, [r3], #4
 8012d18:	f845 6f04 	str.w	r6, [r5, #4]!
 8012d1c:	e7eb      	b.n	8012cf6 <__copybits+0x18>
 8012d1e:	f840 3b04 	str.w	r3, [r0], #4
 8012d22:	e7f4      	b.n	8012d0e <__copybits+0x30>

08012d24 <__any_on>:
 8012d24:	f100 0214 	add.w	r2, r0, #20
 8012d28:	6900      	ldr	r0, [r0, #16]
 8012d2a:	114b      	asrs	r3, r1, #5
 8012d2c:	4298      	cmp	r0, r3
 8012d2e:	b510      	push	{r4, lr}
 8012d30:	db11      	blt.n	8012d56 <__any_on+0x32>
 8012d32:	dd0a      	ble.n	8012d4a <__any_on+0x26>
 8012d34:	f011 011f 	ands.w	r1, r1, #31
 8012d38:	d007      	beq.n	8012d4a <__any_on+0x26>
 8012d3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012d3e:	fa24 f001 	lsr.w	r0, r4, r1
 8012d42:	fa00 f101 	lsl.w	r1, r0, r1
 8012d46:	428c      	cmp	r4, r1
 8012d48:	d10b      	bne.n	8012d62 <__any_on+0x3e>
 8012d4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d803      	bhi.n	8012d5a <__any_on+0x36>
 8012d52:	2000      	movs	r0, #0
 8012d54:	bd10      	pop	{r4, pc}
 8012d56:	4603      	mov	r3, r0
 8012d58:	e7f7      	b.n	8012d4a <__any_on+0x26>
 8012d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d5e:	2900      	cmp	r1, #0
 8012d60:	d0f5      	beq.n	8012d4e <__any_on+0x2a>
 8012d62:	2001      	movs	r0, #1
 8012d64:	e7f6      	b.n	8012d54 <__any_on+0x30>

08012d66 <_realloc_r>:
 8012d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6a:	4680      	mov	r8, r0
 8012d6c:	4614      	mov	r4, r2
 8012d6e:	460e      	mov	r6, r1
 8012d70:	b921      	cbnz	r1, 8012d7c <_realloc_r+0x16>
 8012d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d76:	4611      	mov	r1, r2
 8012d78:	f7fc bf5c 	b.w	800fc34 <_malloc_r>
 8012d7c:	b92a      	cbnz	r2, 8012d8a <_realloc_r+0x24>
 8012d7e:	f7fc feed 	bl	800fb5c <_free_r>
 8012d82:	4625      	mov	r5, r4
 8012d84:	4628      	mov	r0, r5
 8012d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d8a:	f000 fddb 	bl	8013944 <_malloc_usable_size_r>
 8012d8e:	4284      	cmp	r4, r0
 8012d90:	4607      	mov	r7, r0
 8012d92:	d802      	bhi.n	8012d9a <_realloc_r+0x34>
 8012d94:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d98:	d812      	bhi.n	8012dc0 <_realloc_r+0x5a>
 8012d9a:	4621      	mov	r1, r4
 8012d9c:	4640      	mov	r0, r8
 8012d9e:	f7fc ff49 	bl	800fc34 <_malloc_r>
 8012da2:	4605      	mov	r5, r0
 8012da4:	2800      	cmp	r0, #0
 8012da6:	d0ed      	beq.n	8012d84 <_realloc_r+0x1e>
 8012da8:	42bc      	cmp	r4, r7
 8012daa:	4622      	mov	r2, r4
 8012dac:	4631      	mov	r1, r6
 8012dae:	bf28      	it	cs
 8012db0:	463a      	movcs	r2, r7
 8012db2:	f7fc fea7 	bl	800fb04 <memcpy>
 8012db6:	4631      	mov	r1, r6
 8012db8:	4640      	mov	r0, r8
 8012dba:	f7fc fecf 	bl	800fb5c <_free_r>
 8012dbe:	e7e1      	b.n	8012d84 <_realloc_r+0x1e>
 8012dc0:	4635      	mov	r5, r6
 8012dc2:	e7df      	b.n	8012d84 <_realloc_r+0x1e>

08012dc4 <__ssputs_r>:
 8012dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc8:	688e      	ldr	r6, [r1, #8]
 8012dca:	429e      	cmp	r6, r3
 8012dcc:	4682      	mov	sl, r0
 8012dce:	460c      	mov	r4, r1
 8012dd0:	4690      	mov	r8, r2
 8012dd2:	461f      	mov	r7, r3
 8012dd4:	d838      	bhi.n	8012e48 <__ssputs_r+0x84>
 8012dd6:	898a      	ldrh	r2, [r1, #12]
 8012dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012ddc:	d032      	beq.n	8012e44 <__ssputs_r+0x80>
 8012dde:	6825      	ldr	r5, [r4, #0]
 8012de0:	6909      	ldr	r1, [r1, #16]
 8012de2:	eba5 0901 	sub.w	r9, r5, r1
 8012de6:	6965      	ldr	r5, [r4, #20]
 8012de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012df0:	3301      	adds	r3, #1
 8012df2:	444b      	add	r3, r9
 8012df4:	106d      	asrs	r5, r5, #1
 8012df6:	429d      	cmp	r5, r3
 8012df8:	bf38      	it	cc
 8012dfa:	461d      	movcc	r5, r3
 8012dfc:	0553      	lsls	r3, r2, #21
 8012dfe:	d531      	bpl.n	8012e64 <__ssputs_r+0xa0>
 8012e00:	4629      	mov	r1, r5
 8012e02:	f7fc ff17 	bl	800fc34 <_malloc_r>
 8012e06:	4606      	mov	r6, r0
 8012e08:	b950      	cbnz	r0, 8012e20 <__ssputs_r+0x5c>
 8012e0a:	230c      	movs	r3, #12
 8012e0c:	f8ca 3000 	str.w	r3, [sl]
 8012e10:	89a3      	ldrh	r3, [r4, #12]
 8012e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e16:	81a3      	strh	r3, [r4, #12]
 8012e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e20:	6921      	ldr	r1, [r4, #16]
 8012e22:	464a      	mov	r2, r9
 8012e24:	f7fc fe6e 	bl	800fb04 <memcpy>
 8012e28:	89a3      	ldrh	r3, [r4, #12]
 8012e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	6126      	str	r6, [r4, #16]
 8012e36:	6165      	str	r5, [r4, #20]
 8012e38:	444e      	add	r6, r9
 8012e3a:	eba5 0509 	sub.w	r5, r5, r9
 8012e3e:	6026      	str	r6, [r4, #0]
 8012e40:	60a5      	str	r5, [r4, #8]
 8012e42:	463e      	mov	r6, r7
 8012e44:	42be      	cmp	r6, r7
 8012e46:	d900      	bls.n	8012e4a <__ssputs_r+0x86>
 8012e48:	463e      	mov	r6, r7
 8012e4a:	6820      	ldr	r0, [r4, #0]
 8012e4c:	4632      	mov	r2, r6
 8012e4e:	4641      	mov	r1, r8
 8012e50:	f7ff faa2 	bl	8012398 <memmove>
 8012e54:	68a3      	ldr	r3, [r4, #8]
 8012e56:	1b9b      	subs	r3, r3, r6
 8012e58:	60a3      	str	r3, [r4, #8]
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	4433      	add	r3, r6
 8012e5e:	6023      	str	r3, [r4, #0]
 8012e60:	2000      	movs	r0, #0
 8012e62:	e7db      	b.n	8012e1c <__ssputs_r+0x58>
 8012e64:	462a      	mov	r2, r5
 8012e66:	f7ff ff7e 	bl	8012d66 <_realloc_r>
 8012e6a:	4606      	mov	r6, r0
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	d1e1      	bne.n	8012e34 <__ssputs_r+0x70>
 8012e70:	6921      	ldr	r1, [r4, #16]
 8012e72:	4650      	mov	r0, sl
 8012e74:	f7fc fe72 	bl	800fb5c <_free_r>
 8012e78:	e7c7      	b.n	8012e0a <__ssputs_r+0x46>
	...

08012e7c <_svfiprintf_r>:
 8012e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e80:	4698      	mov	r8, r3
 8012e82:	898b      	ldrh	r3, [r1, #12]
 8012e84:	061b      	lsls	r3, r3, #24
 8012e86:	b09d      	sub	sp, #116	; 0x74
 8012e88:	4607      	mov	r7, r0
 8012e8a:	460d      	mov	r5, r1
 8012e8c:	4614      	mov	r4, r2
 8012e8e:	d50e      	bpl.n	8012eae <_svfiprintf_r+0x32>
 8012e90:	690b      	ldr	r3, [r1, #16]
 8012e92:	b963      	cbnz	r3, 8012eae <_svfiprintf_r+0x32>
 8012e94:	2140      	movs	r1, #64	; 0x40
 8012e96:	f7fc fecd 	bl	800fc34 <_malloc_r>
 8012e9a:	6028      	str	r0, [r5, #0]
 8012e9c:	6128      	str	r0, [r5, #16]
 8012e9e:	b920      	cbnz	r0, 8012eaa <_svfiprintf_r+0x2e>
 8012ea0:	230c      	movs	r3, #12
 8012ea2:	603b      	str	r3, [r7, #0]
 8012ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ea8:	e0d1      	b.n	801304e <_svfiprintf_r+0x1d2>
 8012eaa:	2340      	movs	r3, #64	; 0x40
 8012eac:	616b      	str	r3, [r5, #20]
 8012eae:	2300      	movs	r3, #0
 8012eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8012eb2:	2320      	movs	r3, #32
 8012eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ebc:	2330      	movs	r3, #48	; 0x30
 8012ebe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013068 <_svfiprintf_r+0x1ec>
 8012ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ec6:	f04f 0901 	mov.w	r9, #1
 8012eca:	4623      	mov	r3, r4
 8012ecc:	469a      	mov	sl, r3
 8012ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ed2:	b10a      	cbz	r2, 8012ed8 <_svfiprintf_r+0x5c>
 8012ed4:	2a25      	cmp	r2, #37	; 0x25
 8012ed6:	d1f9      	bne.n	8012ecc <_svfiprintf_r+0x50>
 8012ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8012edc:	d00b      	beq.n	8012ef6 <_svfiprintf_r+0x7a>
 8012ede:	465b      	mov	r3, fp
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	4629      	mov	r1, r5
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	f7ff ff6d 	bl	8012dc4 <__ssputs_r>
 8012eea:	3001      	adds	r0, #1
 8012eec:	f000 80aa 	beq.w	8013044 <_svfiprintf_r+0x1c8>
 8012ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ef2:	445a      	add	r2, fp
 8012ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8012ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f000 80a2 	beq.w	8013044 <_svfiprintf_r+0x1c8>
 8012f00:	2300      	movs	r3, #0
 8012f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f0a:	f10a 0a01 	add.w	sl, sl, #1
 8012f0e:	9304      	str	r3, [sp, #16]
 8012f10:	9307      	str	r3, [sp, #28]
 8012f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f16:	931a      	str	r3, [sp, #104]	; 0x68
 8012f18:	4654      	mov	r4, sl
 8012f1a:	2205      	movs	r2, #5
 8012f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f20:	4851      	ldr	r0, [pc, #324]	; (8013068 <_svfiprintf_r+0x1ec>)
 8012f22:	f7ed fa8d 	bl	8000440 <memchr>
 8012f26:	9a04      	ldr	r2, [sp, #16]
 8012f28:	b9d8      	cbnz	r0, 8012f62 <_svfiprintf_r+0xe6>
 8012f2a:	06d0      	lsls	r0, r2, #27
 8012f2c:	bf44      	itt	mi
 8012f2e:	2320      	movmi	r3, #32
 8012f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f34:	0711      	lsls	r1, r2, #28
 8012f36:	bf44      	itt	mi
 8012f38:	232b      	movmi	r3, #43	; 0x2b
 8012f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8012f42:	2b2a      	cmp	r3, #42	; 0x2a
 8012f44:	d015      	beq.n	8012f72 <_svfiprintf_r+0xf6>
 8012f46:	9a07      	ldr	r2, [sp, #28]
 8012f48:	4654      	mov	r4, sl
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	f04f 0c0a 	mov.w	ip, #10
 8012f50:	4621      	mov	r1, r4
 8012f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f56:	3b30      	subs	r3, #48	; 0x30
 8012f58:	2b09      	cmp	r3, #9
 8012f5a:	d94e      	bls.n	8012ffa <_svfiprintf_r+0x17e>
 8012f5c:	b1b0      	cbz	r0, 8012f8c <_svfiprintf_r+0x110>
 8012f5e:	9207      	str	r2, [sp, #28]
 8012f60:	e014      	b.n	8012f8c <_svfiprintf_r+0x110>
 8012f62:	eba0 0308 	sub.w	r3, r0, r8
 8012f66:	fa09 f303 	lsl.w	r3, r9, r3
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	9304      	str	r3, [sp, #16]
 8012f6e:	46a2      	mov	sl, r4
 8012f70:	e7d2      	b.n	8012f18 <_svfiprintf_r+0x9c>
 8012f72:	9b03      	ldr	r3, [sp, #12]
 8012f74:	1d19      	adds	r1, r3, #4
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	9103      	str	r1, [sp, #12]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	bfbb      	ittet	lt
 8012f7e:	425b      	neglt	r3, r3
 8012f80:	f042 0202 	orrlt.w	r2, r2, #2
 8012f84:	9307      	strge	r3, [sp, #28]
 8012f86:	9307      	strlt	r3, [sp, #28]
 8012f88:	bfb8      	it	lt
 8012f8a:	9204      	strlt	r2, [sp, #16]
 8012f8c:	7823      	ldrb	r3, [r4, #0]
 8012f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8012f90:	d10c      	bne.n	8012fac <_svfiprintf_r+0x130>
 8012f92:	7863      	ldrb	r3, [r4, #1]
 8012f94:	2b2a      	cmp	r3, #42	; 0x2a
 8012f96:	d135      	bne.n	8013004 <_svfiprintf_r+0x188>
 8012f98:	9b03      	ldr	r3, [sp, #12]
 8012f9a:	1d1a      	adds	r2, r3, #4
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	9203      	str	r2, [sp, #12]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	bfb8      	it	lt
 8012fa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012fa8:	3402      	adds	r4, #2
 8012faa:	9305      	str	r3, [sp, #20]
 8012fac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013078 <_svfiprintf_r+0x1fc>
 8012fb0:	7821      	ldrb	r1, [r4, #0]
 8012fb2:	2203      	movs	r2, #3
 8012fb4:	4650      	mov	r0, sl
 8012fb6:	f7ed fa43 	bl	8000440 <memchr>
 8012fba:	b140      	cbz	r0, 8012fce <_svfiprintf_r+0x152>
 8012fbc:	2340      	movs	r3, #64	; 0x40
 8012fbe:	eba0 000a 	sub.w	r0, r0, sl
 8012fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8012fc6:	9b04      	ldr	r3, [sp, #16]
 8012fc8:	4303      	orrs	r3, r0
 8012fca:	3401      	adds	r4, #1
 8012fcc:	9304      	str	r3, [sp, #16]
 8012fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fd2:	4826      	ldr	r0, [pc, #152]	; (801306c <_svfiprintf_r+0x1f0>)
 8012fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fd8:	2206      	movs	r2, #6
 8012fda:	f7ed fa31 	bl	8000440 <memchr>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	d038      	beq.n	8013054 <_svfiprintf_r+0x1d8>
 8012fe2:	4b23      	ldr	r3, [pc, #140]	; (8013070 <_svfiprintf_r+0x1f4>)
 8012fe4:	bb1b      	cbnz	r3, 801302e <_svfiprintf_r+0x1b2>
 8012fe6:	9b03      	ldr	r3, [sp, #12]
 8012fe8:	3307      	adds	r3, #7
 8012fea:	f023 0307 	bic.w	r3, r3, #7
 8012fee:	3308      	adds	r3, #8
 8012ff0:	9303      	str	r3, [sp, #12]
 8012ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ff4:	4433      	add	r3, r6
 8012ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ff8:	e767      	b.n	8012eca <_svfiprintf_r+0x4e>
 8012ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ffe:	460c      	mov	r4, r1
 8013000:	2001      	movs	r0, #1
 8013002:	e7a5      	b.n	8012f50 <_svfiprintf_r+0xd4>
 8013004:	2300      	movs	r3, #0
 8013006:	3401      	adds	r4, #1
 8013008:	9305      	str	r3, [sp, #20]
 801300a:	4619      	mov	r1, r3
 801300c:	f04f 0c0a 	mov.w	ip, #10
 8013010:	4620      	mov	r0, r4
 8013012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013016:	3a30      	subs	r2, #48	; 0x30
 8013018:	2a09      	cmp	r2, #9
 801301a:	d903      	bls.n	8013024 <_svfiprintf_r+0x1a8>
 801301c:	2b00      	cmp	r3, #0
 801301e:	d0c5      	beq.n	8012fac <_svfiprintf_r+0x130>
 8013020:	9105      	str	r1, [sp, #20]
 8013022:	e7c3      	b.n	8012fac <_svfiprintf_r+0x130>
 8013024:	fb0c 2101 	mla	r1, ip, r1, r2
 8013028:	4604      	mov	r4, r0
 801302a:	2301      	movs	r3, #1
 801302c:	e7f0      	b.n	8013010 <_svfiprintf_r+0x194>
 801302e:	ab03      	add	r3, sp, #12
 8013030:	9300      	str	r3, [sp, #0]
 8013032:	462a      	mov	r2, r5
 8013034:	4b0f      	ldr	r3, [pc, #60]	; (8013074 <_svfiprintf_r+0x1f8>)
 8013036:	a904      	add	r1, sp, #16
 8013038:	4638      	mov	r0, r7
 801303a:	f3af 8000 	nop.w
 801303e:	1c42      	adds	r2, r0, #1
 8013040:	4606      	mov	r6, r0
 8013042:	d1d6      	bne.n	8012ff2 <_svfiprintf_r+0x176>
 8013044:	89ab      	ldrh	r3, [r5, #12]
 8013046:	065b      	lsls	r3, r3, #25
 8013048:	f53f af2c 	bmi.w	8012ea4 <_svfiprintf_r+0x28>
 801304c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801304e:	b01d      	add	sp, #116	; 0x74
 8013050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013054:	ab03      	add	r3, sp, #12
 8013056:	9300      	str	r3, [sp, #0]
 8013058:	462a      	mov	r2, r5
 801305a:	4b06      	ldr	r3, [pc, #24]	; (8013074 <_svfiprintf_r+0x1f8>)
 801305c:	a904      	add	r1, sp, #16
 801305e:	4638      	mov	r0, r7
 8013060:	f7fd f82e 	bl	80100c0 <_printf_i>
 8013064:	e7eb      	b.n	801303e <_svfiprintf_r+0x1c2>
 8013066:	bf00      	nop
 8013068:	0801740c 	.word	0x0801740c
 801306c:	08017416 	.word	0x08017416
 8013070:	00000000 	.word	0x00000000
 8013074:	08012dc5 	.word	0x08012dc5
 8013078:	08017412 	.word	0x08017412

0801307c <_sungetc_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	1c4b      	adds	r3, r1, #1
 8013080:	4614      	mov	r4, r2
 8013082:	d103      	bne.n	801308c <_sungetc_r+0x10>
 8013084:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013088:	4628      	mov	r0, r5
 801308a:	bd38      	pop	{r3, r4, r5, pc}
 801308c:	8993      	ldrh	r3, [r2, #12]
 801308e:	f023 0320 	bic.w	r3, r3, #32
 8013092:	8193      	strh	r3, [r2, #12]
 8013094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013096:	6852      	ldr	r2, [r2, #4]
 8013098:	b2cd      	uxtb	r5, r1
 801309a:	b18b      	cbz	r3, 80130c0 <_sungetc_r+0x44>
 801309c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801309e:	4293      	cmp	r3, r2
 80130a0:	dd08      	ble.n	80130b4 <_sungetc_r+0x38>
 80130a2:	6823      	ldr	r3, [r4, #0]
 80130a4:	1e5a      	subs	r2, r3, #1
 80130a6:	6022      	str	r2, [r4, #0]
 80130a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80130ac:	6863      	ldr	r3, [r4, #4]
 80130ae:	3301      	adds	r3, #1
 80130b0:	6063      	str	r3, [r4, #4]
 80130b2:	e7e9      	b.n	8013088 <_sungetc_r+0xc>
 80130b4:	4621      	mov	r1, r4
 80130b6:	f000 fbdf 	bl	8013878 <__submore>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d0f1      	beq.n	80130a2 <_sungetc_r+0x26>
 80130be:	e7e1      	b.n	8013084 <_sungetc_r+0x8>
 80130c0:	6921      	ldr	r1, [r4, #16]
 80130c2:	6823      	ldr	r3, [r4, #0]
 80130c4:	b151      	cbz	r1, 80130dc <_sungetc_r+0x60>
 80130c6:	4299      	cmp	r1, r3
 80130c8:	d208      	bcs.n	80130dc <_sungetc_r+0x60>
 80130ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80130ce:	42a9      	cmp	r1, r5
 80130d0:	d104      	bne.n	80130dc <_sungetc_r+0x60>
 80130d2:	3b01      	subs	r3, #1
 80130d4:	3201      	adds	r2, #1
 80130d6:	6023      	str	r3, [r4, #0]
 80130d8:	6062      	str	r2, [r4, #4]
 80130da:	e7d5      	b.n	8013088 <_sungetc_r+0xc>
 80130dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80130e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130e4:	6363      	str	r3, [r4, #52]	; 0x34
 80130e6:	2303      	movs	r3, #3
 80130e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80130ea:	4623      	mov	r3, r4
 80130ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80130f0:	6023      	str	r3, [r4, #0]
 80130f2:	2301      	movs	r3, #1
 80130f4:	e7dc      	b.n	80130b0 <_sungetc_r+0x34>

080130f6 <__ssrefill_r>:
 80130f6:	b510      	push	{r4, lr}
 80130f8:	460c      	mov	r4, r1
 80130fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80130fc:	b169      	cbz	r1, 801311a <__ssrefill_r+0x24>
 80130fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013102:	4299      	cmp	r1, r3
 8013104:	d001      	beq.n	801310a <__ssrefill_r+0x14>
 8013106:	f7fc fd29 	bl	800fb5c <_free_r>
 801310a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801310c:	6063      	str	r3, [r4, #4]
 801310e:	2000      	movs	r0, #0
 8013110:	6360      	str	r0, [r4, #52]	; 0x34
 8013112:	b113      	cbz	r3, 801311a <__ssrefill_r+0x24>
 8013114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013116:	6023      	str	r3, [r4, #0]
 8013118:	bd10      	pop	{r4, pc}
 801311a:	6923      	ldr	r3, [r4, #16]
 801311c:	6023      	str	r3, [r4, #0]
 801311e:	2300      	movs	r3, #0
 8013120:	6063      	str	r3, [r4, #4]
 8013122:	89a3      	ldrh	r3, [r4, #12]
 8013124:	f043 0320 	orr.w	r3, r3, #32
 8013128:	81a3      	strh	r3, [r4, #12]
 801312a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801312e:	e7f3      	b.n	8013118 <__ssrefill_r+0x22>

08013130 <__ssvfiscanf_r>:
 8013130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013134:	460c      	mov	r4, r1
 8013136:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801313a:	2100      	movs	r1, #0
 801313c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013140:	49a6      	ldr	r1, [pc, #664]	; (80133dc <__ssvfiscanf_r+0x2ac>)
 8013142:	91a0      	str	r1, [sp, #640]	; 0x280
 8013144:	f10d 0804 	add.w	r8, sp, #4
 8013148:	49a5      	ldr	r1, [pc, #660]	; (80133e0 <__ssvfiscanf_r+0x2b0>)
 801314a:	4fa6      	ldr	r7, [pc, #664]	; (80133e4 <__ssvfiscanf_r+0x2b4>)
 801314c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80133e8 <__ssvfiscanf_r+0x2b8>
 8013150:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013154:	4606      	mov	r6, r0
 8013156:	91a1      	str	r1, [sp, #644]	; 0x284
 8013158:	9300      	str	r3, [sp, #0]
 801315a:	7813      	ldrb	r3, [r2, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	f000 815a 	beq.w	8013416 <__ssvfiscanf_r+0x2e6>
 8013162:	5dd9      	ldrb	r1, [r3, r7]
 8013164:	f011 0108 	ands.w	r1, r1, #8
 8013168:	f102 0501 	add.w	r5, r2, #1
 801316c:	d019      	beq.n	80131a2 <__ssvfiscanf_r+0x72>
 801316e:	6863      	ldr	r3, [r4, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	dd0f      	ble.n	8013194 <__ssvfiscanf_r+0x64>
 8013174:	6823      	ldr	r3, [r4, #0]
 8013176:	781a      	ldrb	r2, [r3, #0]
 8013178:	5cba      	ldrb	r2, [r7, r2]
 801317a:	0712      	lsls	r2, r2, #28
 801317c:	d401      	bmi.n	8013182 <__ssvfiscanf_r+0x52>
 801317e:	462a      	mov	r2, r5
 8013180:	e7eb      	b.n	801315a <__ssvfiscanf_r+0x2a>
 8013182:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013184:	3201      	adds	r2, #1
 8013186:	9245      	str	r2, [sp, #276]	; 0x114
 8013188:	6862      	ldr	r2, [r4, #4]
 801318a:	3301      	adds	r3, #1
 801318c:	3a01      	subs	r2, #1
 801318e:	6062      	str	r2, [r4, #4]
 8013190:	6023      	str	r3, [r4, #0]
 8013192:	e7ec      	b.n	801316e <__ssvfiscanf_r+0x3e>
 8013194:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013196:	4621      	mov	r1, r4
 8013198:	4630      	mov	r0, r6
 801319a:	4798      	blx	r3
 801319c:	2800      	cmp	r0, #0
 801319e:	d0e9      	beq.n	8013174 <__ssvfiscanf_r+0x44>
 80131a0:	e7ed      	b.n	801317e <__ssvfiscanf_r+0x4e>
 80131a2:	2b25      	cmp	r3, #37	; 0x25
 80131a4:	d012      	beq.n	80131cc <__ssvfiscanf_r+0x9c>
 80131a6:	469a      	mov	sl, r3
 80131a8:	6863      	ldr	r3, [r4, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f340 8091 	ble.w	80132d2 <__ssvfiscanf_r+0x1a2>
 80131b0:	6822      	ldr	r2, [r4, #0]
 80131b2:	7813      	ldrb	r3, [r2, #0]
 80131b4:	4553      	cmp	r3, sl
 80131b6:	f040 812e 	bne.w	8013416 <__ssvfiscanf_r+0x2e6>
 80131ba:	6863      	ldr	r3, [r4, #4]
 80131bc:	3b01      	subs	r3, #1
 80131be:	6063      	str	r3, [r4, #4]
 80131c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80131c2:	3201      	adds	r2, #1
 80131c4:	3301      	adds	r3, #1
 80131c6:	6022      	str	r2, [r4, #0]
 80131c8:	9345      	str	r3, [sp, #276]	; 0x114
 80131ca:	e7d8      	b.n	801317e <__ssvfiscanf_r+0x4e>
 80131cc:	9141      	str	r1, [sp, #260]	; 0x104
 80131ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80131d0:	7853      	ldrb	r3, [r2, #1]
 80131d2:	2b2a      	cmp	r3, #42	; 0x2a
 80131d4:	bf02      	ittt	eq
 80131d6:	2310      	moveq	r3, #16
 80131d8:	1c95      	addeq	r5, r2, #2
 80131da:	9341      	streq	r3, [sp, #260]	; 0x104
 80131dc:	220a      	movs	r2, #10
 80131de:	46aa      	mov	sl, r5
 80131e0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80131e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80131e8:	2b09      	cmp	r3, #9
 80131ea:	d91d      	bls.n	8013228 <__ssvfiscanf_r+0xf8>
 80131ec:	487e      	ldr	r0, [pc, #504]	; (80133e8 <__ssvfiscanf_r+0x2b8>)
 80131ee:	2203      	movs	r2, #3
 80131f0:	f7ed f926 	bl	8000440 <memchr>
 80131f4:	b140      	cbz	r0, 8013208 <__ssvfiscanf_r+0xd8>
 80131f6:	2301      	movs	r3, #1
 80131f8:	eba0 0009 	sub.w	r0, r0, r9
 80131fc:	fa03 f000 	lsl.w	r0, r3, r0
 8013200:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013202:	4318      	orrs	r0, r3
 8013204:	9041      	str	r0, [sp, #260]	; 0x104
 8013206:	4655      	mov	r5, sl
 8013208:	f815 3b01 	ldrb.w	r3, [r5], #1
 801320c:	2b78      	cmp	r3, #120	; 0x78
 801320e:	d806      	bhi.n	801321e <__ssvfiscanf_r+0xee>
 8013210:	2b57      	cmp	r3, #87	; 0x57
 8013212:	d810      	bhi.n	8013236 <__ssvfiscanf_r+0x106>
 8013214:	2b25      	cmp	r3, #37	; 0x25
 8013216:	d0c6      	beq.n	80131a6 <__ssvfiscanf_r+0x76>
 8013218:	d856      	bhi.n	80132c8 <__ssvfiscanf_r+0x198>
 801321a:	2b00      	cmp	r3, #0
 801321c:	d064      	beq.n	80132e8 <__ssvfiscanf_r+0x1b8>
 801321e:	2303      	movs	r3, #3
 8013220:	9347      	str	r3, [sp, #284]	; 0x11c
 8013222:	230a      	movs	r3, #10
 8013224:	9342      	str	r3, [sp, #264]	; 0x108
 8013226:	e071      	b.n	801330c <__ssvfiscanf_r+0x1dc>
 8013228:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801322a:	fb02 1103 	mla	r1, r2, r3, r1
 801322e:	3930      	subs	r1, #48	; 0x30
 8013230:	9143      	str	r1, [sp, #268]	; 0x10c
 8013232:	4655      	mov	r5, sl
 8013234:	e7d3      	b.n	80131de <__ssvfiscanf_r+0xae>
 8013236:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801323a:	2a20      	cmp	r2, #32
 801323c:	d8ef      	bhi.n	801321e <__ssvfiscanf_r+0xee>
 801323e:	a101      	add	r1, pc, #4	; (adr r1, 8013244 <__ssvfiscanf_r+0x114>)
 8013240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013244:	080132f7 	.word	0x080132f7
 8013248:	0801321f 	.word	0x0801321f
 801324c:	0801321f 	.word	0x0801321f
 8013250:	08013355 	.word	0x08013355
 8013254:	0801321f 	.word	0x0801321f
 8013258:	0801321f 	.word	0x0801321f
 801325c:	0801321f 	.word	0x0801321f
 8013260:	0801321f 	.word	0x0801321f
 8013264:	0801321f 	.word	0x0801321f
 8013268:	0801321f 	.word	0x0801321f
 801326c:	0801321f 	.word	0x0801321f
 8013270:	0801336b 	.word	0x0801336b
 8013274:	08013341 	.word	0x08013341
 8013278:	080132cf 	.word	0x080132cf
 801327c:	080132cf 	.word	0x080132cf
 8013280:	080132cf 	.word	0x080132cf
 8013284:	0801321f 	.word	0x0801321f
 8013288:	08013345 	.word	0x08013345
 801328c:	0801321f 	.word	0x0801321f
 8013290:	0801321f 	.word	0x0801321f
 8013294:	0801321f 	.word	0x0801321f
 8013298:	0801321f 	.word	0x0801321f
 801329c:	0801337b 	.word	0x0801337b
 80132a0:	0801334d 	.word	0x0801334d
 80132a4:	080132ef 	.word	0x080132ef
 80132a8:	0801321f 	.word	0x0801321f
 80132ac:	0801321f 	.word	0x0801321f
 80132b0:	08013377 	.word	0x08013377
 80132b4:	0801321f 	.word	0x0801321f
 80132b8:	08013341 	.word	0x08013341
 80132bc:	0801321f 	.word	0x0801321f
 80132c0:	0801321f 	.word	0x0801321f
 80132c4:	080132f7 	.word	0x080132f7
 80132c8:	3b45      	subs	r3, #69	; 0x45
 80132ca:	2b02      	cmp	r3, #2
 80132cc:	d8a7      	bhi.n	801321e <__ssvfiscanf_r+0xee>
 80132ce:	2305      	movs	r3, #5
 80132d0:	e01b      	b.n	801330a <__ssvfiscanf_r+0x1da>
 80132d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80132d4:	4621      	mov	r1, r4
 80132d6:	4630      	mov	r0, r6
 80132d8:	4798      	blx	r3
 80132da:	2800      	cmp	r0, #0
 80132dc:	f43f af68 	beq.w	80131b0 <__ssvfiscanf_r+0x80>
 80132e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80132e2:	2800      	cmp	r0, #0
 80132e4:	f040 808d 	bne.w	8013402 <__ssvfiscanf_r+0x2d2>
 80132e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132ec:	e08f      	b.n	801340e <__ssvfiscanf_r+0x2de>
 80132ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80132f0:	f042 0220 	orr.w	r2, r2, #32
 80132f4:	9241      	str	r2, [sp, #260]	; 0x104
 80132f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80132f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80132fc:	9241      	str	r2, [sp, #260]	; 0x104
 80132fe:	2210      	movs	r2, #16
 8013300:	2b6f      	cmp	r3, #111	; 0x6f
 8013302:	9242      	str	r2, [sp, #264]	; 0x108
 8013304:	bf34      	ite	cc
 8013306:	2303      	movcc	r3, #3
 8013308:	2304      	movcs	r3, #4
 801330a:	9347      	str	r3, [sp, #284]	; 0x11c
 801330c:	6863      	ldr	r3, [r4, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	dd42      	ble.n	8013398 <__ssvfiscanf_r+0x268>
 8013312:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013314:	0659      	lsls	r1, r3, #25
 8013316:	d404      	bmi.n	8013322 <__ssvfiscanf_r+0x1f2>
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	781a      	ldrb	r2, [r3, #0]
 801331c:	5cba      	ldrb	r2, [r7, r2]
 801331e:	0712      	lsls	r2, r2, #28
 8013320:	d441      	bmi.n	80133a6 <__ssvfiscanf_r+0x276>
 8013322:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013324:	2b02      	cmp	r3, #2
 8013326:	dc50      	bgt.n	80133ca <__ssvfiscanf_r+0x29a>
 8013328:	466b      	mov	r3, sp
 801332a:	4622      	mov	r2, r4
 801332c:	a941      	add	r1, sp, #260	; 0x104
 801332e:	4630      	mov	r0, r6
 8013330:	f000 f876 	bl	8013420 <_scanf_chars>
 8013334:	2801      	cmp	r0, #1
 8013336:	d06e      	beq.n	8013416 <__ssvfiscanf_r+0x2e6>
 8013338:	2802      	cmp	r0, #2
 801333a:	f47f af20 	bne.w	801317e <__ssvfiscanf_r+0x4e>
 801333e:	e7cf      	b.n	80132e0 <__ssvfiscanf_r+0x1b0>
 8013340:	220a      	movs	r2, #10
 8013342:	e7dd      	b.n	8013300 <__ssvfiscanf_r+0x1d0>
 8013344:	2300      	movs	r3, #0
 8013346:	9342      	str	r3, [sp, #264]	; 0x108
 8013348:	2303      	movs	r3, #3
 801334a:	e7de      	b.n	801330a <__ssvfiscanf_r+0x1da>
 801334c:	2308      	movs	r3, #8
 801334e:	9342      	str	r3, [sp, #264]	; 0x108
 8013350:	2304      	movs	r3, #4
 8013352:	e7da      	b.n	801330a <__ssvfiscanf_r+0x1da>
 8013354:	4629      	mov	r1, r5
 8013356:	4640      	mov	r0, r8
 8013358:	f000 f9ce 	bl	80136f8 <__sccl>
 801335c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801335e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013362:	9341      	str	r3, [sp, #260]	; 0x104
 8013364:	4605      	mov	r5, r0
 8013366:	2301      	movs	r3, #1
 8013368:	e7cf      	b.n	801330a <__ssvfiscanf_r+0x1da>
 801336a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801336c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013370:	9341      	str	r3, [sp, #260]	; 0x104
 8013372:	2300      	movs	r3, #0
 8013374:	e7c9      	b.n	801330a <__ssvfiscanf_r+0x1da>
 8013376:	2302      	movs	r3, #2
 8013378:	e7c7      	b.n	801330a <__ssvfiscanf_r+0x1da>
 801337a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801337c:	06c3      	lsls	r3, r0, #27
 801337e:	f53f aefe 	bmi.w	801317e <__ssvfiscanf_r+0x4e>
 8013382:	9b00      	ldr	r3, [sp, #0]
 8013384:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013386:	1d19      	adds	r1, r3, #4
 8013388:	9100      	str	r1, [sp, #0]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f010 0f01 	tst.w	r0, #1
 8013390:	bf14      	ite	ne
 8013392:	801a      	strhne	r2, [r3, #0]
 8013394:	601a      	streq	r2, [r3, #0]
 8013396:	e6f2      	b.n	801317e <__ssvfiscanf_r+0x4e>
 8013398:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801339a:	4621      	mov	r1, r4
 801339c:	4630      	mov	r0, r6
 801339e:	4798      	blx	r3
 80133a0:	2800      	cmp	r0, #0
 80133a2:	d0b6      	beq.n	8013312 <__ssvfiscanf_r+0x1e2>
 80133a4:	e79c      	b.n	80132e0 <__ssvfiscanf_r+0x1b0>
 80133a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80133a8:	3201      	adds	r2, #1
 80133aa:	9245      	str	r2, [sp, #276]	; 0x114
 80133ac:	6862      	ldr	r2, [r4, #4]
 80133ae:	3a01      	subs	r2, #1
 80133b0:	2a00      	cmp	r2, #0
 80133b2:	6062      	str	r2, [r4, #4]
 80133b4:	dd02      	ble.n	80133bc <__ssvfiscanf_r+0x28c>
 80133b6:	3301      	adds	r3, #1
 80133b8:	6023      	str	r3, [r4, #0]
 80133ba:	e7ad      	b.n	8013318 <__ssvfiscanf_r+0x1e8>
 80133bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80133be:	4621      	mov	r1, r4
 80133c0:	4630      	mov	r0, r6
 80133c2:	4798      	blx	r3
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d0a7      	beq.n	8013318 <__ssvfiscanf_r+0x1e8>
 80133c8:	e78a      	b.n	80132e0 <__ssvfiscanf_r+0x1b0>
 80133ca:	2b04      	cmp	r3, #4
 80133cc:	dc0e      	bgt.n	80133ec <__ssvfiscanf_r+0x2bc>
 80133ce:	466b      	mov	r3, sp
 80133d0:	4622      	mov	r2, r4
 80133d2:	a941      	add	r1, sp, #260	; 0x104
 80133d4:	4630      	mov	r0, r6
 80133d6:	f000 f87d 	bl	80134d4 <_scanf_i>
 80133da:	e7ab      	b.n	8013334 <__ssvfiscanf_r+0x204>
 80133dc:	0801307d 	.word	0x0801307d
 80133e0:	080130f7 	.word	0x080130f7
 80133e4:	080172a7 	.word	0x080172a7
 80133e8:	08017412 	.word	0x08017412
 80133ec:	4b0b      	ldr	r3, [pc, #44]	; (801341c <__ssvfiscanf_r+0x2ec>)
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	f43f aec5 	beq.w	801317e <__ssvfiscanf_r+0x4e>
 80133f4:	466b      	mov	r3, sp
 80133f6:	4622      	mov	r2, r4
 80133f8:	a941      	add	r1, sp, #260	; 0x104
 80133fa:	4630      	mov	r0, r6
 80133fc:	f3af 8000 	nop.w
 8013400:	e798      	b.n	8013334 <__ssvfiscanf_r+0x204>
 8013402:	89a3      	ldrh	r3, [r4, #12]
 8013404:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013408:	bf18      	it	ne
 801340a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801340e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013416:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013418:	e7f9      	b.n	801340e <__ssvfiscanf_r+0x2de>
 801341a:	bf00      	nop
 801341c:	00000000 	.word	0x00000000

08013420 <_scanf_chars>:
 8013420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013424:	4615      	mov	r5, r2
 8013426:	688a      	ldr	r2, [r1, #8]
 8013428:	4680      	mov	r8, r0
 801342a:	460c      	mov	r4, r1
 801342c:	b932      	cbnz	r2, 801343c <_scanf_chars+0x1c>
 801342e:	698a      	ldr	r2, [r1, #24]
 8013430:	2a00      	cmp	r2, #0
 8013432:	bf0c      	ite	eq
 8013434:	2201      	moveq	r2, #1
 8013436:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801343a:	608a      	str	r2, [r1, #8]
 801343c:	6822      	ldr	r2, [r4, #0]
 801343e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80134d0 <_scanf_chars+0xb0>
 8013442:	06d1      	lsls	r1, r2, #27
 8013444:	bf5f      	itttt	pl
 8013446:	681a      	ldrpl	r2, [r3, #0]
 8013448:	1d11      	addpl	r1, r2, #4
 801344a:	6019      	strpl	r1, [r3, #0]
 801344c:	6816      	ldrpl	r6, [r2, #0]
 801344e:	2700      	movs	r7, #0
 8013450:	69a0      	ldr	r0, [r4, #24]
 8013452:	b188      	cbz	r0, 8013478 <_scanf_chars+0x58>
 8013454:	2801      	cmp	r0, #1
 8013456:	d107      	bne.n	8013468 <_scanf_chars+0x48>
 8013458:	682a      	ldr	r2, [r5, #0]
 801345a:	7811      	ldrb	r1, [r2, #0]
 801345c:	6962      	ldr	r2, [r4, #20]
 801345e:	5c52      	ldrb	r2, [r2, r1]
 8013460:	b952      	cbnz	r2, 8013478 <_scanf_chars+0x58>
 8013462:	2f00      	cmp	r7, #0
 8013464:	d031      	beq.n	80134ca <_scanf_chars+0xaa>
 8013466:	e022      	b.n	80134ae <_scanf_chars+0x8e>
 8013468:	2802      	cmp	r0, #2
 801346a:	d120      	bne.n	80134ae <_scanf_chars+0x8e>
 801346c:	682b      	ldr	r3, [r5, #0]
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013474:	071b      	lsls	r3, r3, #28
 8013476:	d41a      	bmi.n	80134ae <_scanf_chars+0x8e>
 8013478:	6823      	ldr	r3, [r4, #0]
 801347a:	06da      	lsls	r2, r3, #27
 801347c:	bf5e      	ittt	pl
 801347e:	682b      	ldrpl	r3, [r5, #0]
 8013480:	781b      	ldrbpl	r3, [r3, #0]
 8013482:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013486:	682a      	ldr	r2, [r5, #0]
 8013488:	686b      	ldr	r3, [r5, #4]
 801348a:	3201      	adds	r2, #1
 801348c:	602a      	str	r2, [r5, #0]
 801348e:	68a2      	ldr	r2, [r4, #8]
 8013490:	3b01      	subs	r3, #1
 8013492:	3a01      	subs	r2, #1
 8013494:	606b      	str	r3, [r5, #4]
 8013496:	3701      	adds	r7, #1
 8013498:	60a2      	str	r2, [r4, #8]
 801349a:	b142      	cbz	r2, 80134ae <_scanf_chars+0x8e>
 801349c:	2b00      	cmp	r3, #0
 801349e:	dcd7      	bgt.n	8013450 <_scanf_chars+0x30>
 80134a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80134a4:	4629      	mov	r1, r5
 80134a6:	4640      	mov	r0, r8
 80134a8:	4798      	blx	r3
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d0d0      	beq.n	8013450 <_scanf_chars+0x30>
 80134ae:	6823      	ldr	r3, [r4, #0]
 80134b0:	f013 0310 	ands.w	r3, r3, #16
 80134b4:	d105      	bne.n	80134c2 <_scanf_chars+0xa2>
 80134b6:	68e2      	ldr	r2, [r4, #12]
 80134b8:	3201      	adds	r2, #1
 80134ba:	60e2      	str	r2, [r4, #12]
 80134bc:	69a2      	ldr	r2, [r4, #24]
 80134be:	b102      	cbz	r2, 80134c2 <_scanf_chars+0xa2>
 80134c0:	7033      	strb	r3, [r6, #0]
 80134c2:	6923      	ldr	r3, [r4, #16]
 80134c4:	443b      	add	r3, r7
 80134c6:	6123      	str	r3, [r4, #16]
 80134c8:	2000      	movs	r0, #0
 80134ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ce:	bf00      	nop
 80134d0:	080172a7 	.word	0x080172a7

080134d4 <_scanf_i>:
 80134d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d8:	4698      	mov	r8, r3
 80134da:	4b76      	ldr	r3, [pc, #472]	; (80136b4 <_scanf_i+0x1e0>)
 80134dc:	460c      	mov	r4, r1
 80134de:	4682      	mov	sl, r0
 80134e0:	4616      	mov	r6, r2
 80134e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80134e6:	b087      	sub	sp, #28
 80134e8:	ab03      	add	r3, sp, #12
 80134ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80134ee:	4b72      	ldr	r3, [pc, #456]	; (80136b8 <_scanf_i+0x1e4>)
 80134f0:	69a1      	ldr	r1, [r4, #24]
 80134f2:	4a72      	ldr	r2, [pc, #456]	; (80136bc <_scanf_i+0x1e8>)
 80134f4:	2903      	cmp	r1, #3
 80134f6:	bf18      	it	ne
 80134f8:	461a      	movne	r2, r3
 80134fa:	68a3      	ldr	r3, [r4, #8]
 80134fc:	9201      	str	r2, [sp, #4]
 80134fe:	1e5a      	subs	r2, r3, #1
 8013500:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013504:	bf88      	it	hi
 8013506:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801350a:	4627      	mov	r7, r4
 801350c:	bf82      	ittt	hi
 801350e:	eb03 0905 	addhi.w	r9, r3, r5
 8013512:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013516:	60a3      	strhi	r3, [r4, #8]
 8013518:	f857 3b1c 	ldr.w	r3, [r7], #28
 801351c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013520:	bf98      	it	ls
 8013522:	f04f 0900 	movls.w	r9, #0
 8013526:	6023      	str	r3, [r4, #0]
 8013528:	463d      	mov	r5, r7
 801352a:	f04f 0b00 	mov.w	fp, #0
 801352e:	6831      	ldr	r1, [r6, #0]
 8013530:	ab03      	add	r3, sp, #12
 8013532:	7809      	ldrb	r1, [r1, #0]
 8013534:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013538:	2202      	movs	r2, #2
 801353a:	f7ec ff81 	bl	8000440 <memchr>
 801353e:	b328      	cbz	r0, 801358c <_scanf_i+0xb8>
 8013540:	f1bb 0f01 	cmp.w	fp, #1
 8013544:	d159      	bne.n	80135fa <_scanf_i+0x126>
 8013546:	6862      	ldr	r2, [r4, #4]
 8013548:	b92a      	cbnz	r2, 8013556 <_scanf_i+0x82>
 801354a:	6822      	ldr	r2, [r4, #0]
 801354c:	2308      	movs	r3, #8
 801354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013552:	6063      	str	r3, [r4, #4]
 8013554:	6022      	str	r2, [r4, #0]
 8013556:	6822      	ldr	r2, [r4, #0]
 8013558:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801355c:	6022      	str	r2, [r4, #0]
 801355e:	68a2      	ldr	r2, [r4, #8]
 8013560:	1e51      	subs	r1, r2, #1
 8013562:	60a1      	str	r1, [r4, #8]
 8013564:	b192      	cbz	r2, 801358c <_scanf_i+0xb8>
 8013566:	6832      	ldr	r2, [r6, #0]
 8013568:	1c51      	adds	r1, r2, #1
 801356a:	6031      	str	r1, [r6, #0]
 801356c:	7812      	ldrb	r2, [r2, #0]
 801356e:	f805 2b01 	strb.w	r2, [r5], #1
 8013572:	6872      	ldr	r2, [r6, #4]
 8013574:	3a01      	subs	r2, #1
 8013576:	2a00      	cmp	r2, #0
 8013578:	6072      	str	r2, [r6, #4]
 801357a:	dc07      	bgt.n	801358c <_scanf_i+0xb8>
 801357c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013580:	4631      	mov	r1, r6
 8013582:	4650      	mov	r0, sl
 8013584:	4790      	blx	r2
 8013586:	2800      	cmp	r0, #0
 8013588:	f040 8085 	bne.w	8013696 <_scanf_i+0x1c2>
 801358c:	f10b 0b01 	add.w	fp, fp, #1
 8013590:	f1bb 0f03 	cmp.w	fp, #3
 8013594:	d1cb      	bne.n	801352e <_scanf_i+0x5a>
 8013596:	6863      	ldr	r3, [r4, #4]
 8013598:	b90b      	cbnz	r3, 801359e <_scanf_i+0xca>
 801359a:	230a      	movs	r3, #10
 801359c:	6063      	str	r3, [r4, #4]
 801359e:	6863      	ldr	r3, [r4, #4]
 80135a0:	4947      	ldr	r1, [pc, #284]	; (80136c0 <_scanf_i+0x1ec>)
 80135a2:	6960      	ldr	r0, [r4, #20]
 80135a4:	1ac9      	subs	r1, r1, r3
 80135a6:	f000 f8a7 	bl	80136f8 <__sccl>
 80135aa:	f04f 0b00 	mov.w	fp, #0
 80135ae:	68a3      	ldr	r3, [r4, #8]
 80135b0:	6822      	ldr	r2, [r4, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d03d      	beq.n	8013632 <_scanf_i+0x15e>
 80135b6:	6831      	ldr	r1, [r6, #0]
 80135b8:	6960      	ldr	r0, [r4, #20]
 80135ba:	f891 c000 	ldrb.w	ip, [r1]
 80135be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d035      	beq.n	8013632 <_scanf_i+0x15e>
 80135c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80135ca:	d124      	bne.n	8013616 <_scanf_i+0x142>
 80135cc:	0510      	lsls	r0, r2, #20
 80135ce:	d522      	bpl.n	8013616 <_scanf_i+0x142>
 80135d0:	f10b 0b01 	add.w	fp, fp, #1
 80135d4:	f1b9 0f00 	cmp.w	r9, #0
 80135d8:	d003      	beq.n	80135e2 <_scanf_i+0x10e>
 80135da:	3301      	adds	r3, #1
 80135dc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80135e0:	60a3      	str	r3, [r4, #8]
 80135e2:	6873      	ldr	r3, [r6, #4]
 80135e4:	3b01      	subs	r3, #1
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	6073      	str	r3, [r6, #4]
 80135ea:	dd1b      	ble.n	8013624 <_scanf_i+0x150>
 80135ec:	6833      	ldr	r3, [r6, #0]
 80135ee:	3301      	adds	r3, #1
 80135f0:	6033      	str	r3, [r6, #0]
 80135f2:	68a3      	ldr	r3, [r4, #8]
 80135f4:	3b01      	subs	r3, #1
 80135f6:	60a3      	str	r3, [r4, #8]
 80135f8:	e7d9      	b.n	80135ae <_scanf_i+0xda>
 80135fa:	f1bb 0f02 	cmp.w	fp, #2
 80135fe:	d1ae      	bne.n	801355e <_scanf_i+0x8a>
 8013600:	6822      	ldr	r2, [r4, #0]
 8013602:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013606:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801360a:	d1bf      	bne.n	801358c <_scanf_i+0xb8>
 801360c:	2310      	movs	r3, #16
 801360e:	6063      	str	r3, [r4, #4]
 8013610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013614:	e7a2      	b.n	801355c <_scanf_i+0x88>
 8013616:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801361a:	6022      	str	r2, [r4, #0]
 801361c:	780b      	ldrb	r3, [r1, #0]
 801361e:	f805 3b01 	strb.w	r3, [r5], #1
 8013622:	e7de      	b.n	80135e2 <_scanf_i+0x10e>
 8013624:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013628:	4631      	mov	r1, r6
 801362a:	4650      	mov	r0, sl
 801362c:	4798      	blx	r3
 801362e:	2800      	cmp	r0, #0
 8013630:	d0df      	beq.n	80135f2 <_scanf_i+0x11e>
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	05db      	lsls	r3, r3, #23
 8013636:	d50d      	bpl.n	8013654 <_scanf_i+0x180>
 8013638:	42bd      	cmp	r5, r7
 801363a:	d909      	bls.n	8013650 <_scanf_i+0x17c>
 801363c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013644:	4632      	mov	r2, r6
 8013646:	4650      	mov	r0, sl
 8013648:	4798      	blx	r3
 801364a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801364e:	464d      	mov	r5, r9
 8013650:	42bd      	cmp	r5, r7
 8013652:	d02d      	beq.n	80136b0 <_scanf_i+0x1dc>
 8013654:	6822      	ldr	r2, [r4, #0]
 8013656:	f012 0210 	ands.w	r2, r2, #16
 801365a:	d113      	bne.n	8013684 <_scanf_i+0x1b0>
 801365c:	702a      	strb	r2, [r5, #0]
 801365e:	6863      	ldr	r3, [r4, #4]
 8013660:	9e01      	ldr	r6, [sp, #4]
 8013662:	4639      	mov	r1, r7
 8013664:	4650      	mov	r0, sl
 8013666:	47b0      	blx	r6
 8013668:	6821      	ldr	r1, [r4, #0]
 801366a:	f8d8 3000 	ldr.w	r3, [r8]
 801366e:	f011 0f20 	tst.w	r1, #32
 8013672:	d013      	beq.n	801369c <_scanf_i+0x1c8>
 8013674:	1d1a      	adds	r2, r3, #4
 8013676:	f8c8 2000 	str.w	r2, [r8]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	6018      	str	r0, [r3, #0]
 801367e:	68e3      	ldr	r3, [r4, #12]
 8013680:	3301      	adds	r3, #1
 8013682:	60e3      	str	r3, [r4, #12]
 8013684:	1bed      	subs	r5, r5, r7
 8013686:	44ab      	add	fp, r5
 8013688:	6925      	ldr	r5, [r4, #16]
 801368a:	445d      	add	r5, fp
 801368c:	6125      	str	r5, [r4, #16]
 801368e:	2000      	movs	r0, #0
 8013690:	b007      	add	sp, #28
 8013692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013696:	f04f 0b00 	mov.w	fp, #0
 801369a:	e7ca      	b.n	8013632 <_scanf_i+0x15e>
 801369c:	1d1a      	adds	r2, r3, #4
 801369e:	f8c8 2000 	str.w	r2, [r8]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f011 0f01 	tst.w	r1, #1
 80136a8:	bf14      	ite	ne
 80136aa:	8018      	strhne	r0, [r3, #0]
 80136ac:	6018      	streq	r0, [r3, #0]
 80136ae:	e7e6      	b.n	801367e <_scanf_i+0x1aa>
 80136b0:	2001      	movs	r0, #1
 80136b2:	e7ed      	b.n	8013690 <_scanf_i+0x1bc>
 80136b4:	0801646c 	.word	0x0801646c
 80136b8:	08013875 	.word	0x08013875
 80136bc:	08011a19 	.word	0x08011a19
 80136c0:	08017d4d 	.word	0x08017d4d

080136c4 <_read_r>:
 80136c4:	b538      	push	{r3, r4, r5, lr}
 80136c6:	4d07      	ldr	r5, [pc, #28]	; (80136e4 <_read_r+0x20>)
 80136c8:	4604      	mov	r4, r0
 80136ca:	4608      	mov	r0, r1
 80136cc:	4611      	mov	r1, r2
 80136ce:	2200      	movs	r2, #0
 80136d0:	602a      	str	r2, [r5, #0]
 80136d2:	461a      	mov	r2, r3
 80136d4:	f7ed ffe6 	bl	80016a4 <_read>
 80136d8:	1c43      	adds	r3, r0, #1
 80136da:	d102      	bne.n	80136e2 <_read_r+0x1e>
 80136dc:	682b      	ldr	r3, [r5, #0]
 80136de:	b103      	cbz	r3, 80136e2 <_read_r+0x1e>
 80136e0:	6023      	str	r3, [r4, #0]
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	20003be4 	.word	0x20003be4

080136e8 <nan>:
 80136e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80136f0 <nan+0x8>
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop
 80136f0:	00000000 	.word	0x00000000
 80136f4:	7ff80000 	.word	0x7ff80000

080136f8 <__sccl>:
 80136f8:	b570      	push	{r4, r5, r6, lr}
 80136fa:	780b      	ldrb	r3, [r1, #0]
 80136fc:	4604      	mov	r4, r0
 80136fe:	2b5e      	cmp	r3, #94	; 0x5e
 8013700:	bf0b      	itete	eq
 8013702:	784b      	ldrbeq	r3, [r1, #1]
 8013704:	1c48      	addne	r0, r1, #1
 8013706:	1c88      	addeq	r0, r1, #2
 8013708:	2200      	movne	r2, #0
 801370a:	bf08      	it	eq
 801370c:	2201      	moveq	r2, #1
 801370e:	1e61      	subs	r1, r4, #1
 8013710:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013714:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013718:	42a9      	cmp	r1, r5
 801371a:	d1fb      	bne.n	8013714 <__sccl+0x1c>
 801371c:	b90b      	cbnz	r3, 8013722 <__sccl+0x2a>
 801371e:	3801      	subs	r0, #1
 8013720:	bd70      	pop	{r4, r5, r6, pc}
 8013722:	f082 0201 	eor.w	r2, r2, #1
 8013726:	54e2      	strb	r2, [r4, r3]
 8013728:	4605      	mov	r5, r0
 801372a:	4628      	mov	r0, r5
 801372c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013730:	292d      	cmp	r1, #45	; 0x2d
 8013732:	d006      	beq.n	8013742 <__sccl+0x4a>
 8013734:	295d      	cmp	r1, #93	; 0x5d
 8013736:	d0f3      	beq.n	8013720 <__sccl+0x28>
 8013738:	b909      	cbnz	r1, 801373e <__sccl+0x46>
 801373a:	4628      	mov	r0, r5
 801373c:	e7f0      	b.n	8013720 <__sccl+0x28>
 801373e:	460b      	mov	r3, r1
 8013740:	e7f1      	b.n	8013726 <__sccl+0x2e>
 8013742:	786e      	ldrb	r6, [r5, #1]
 8013744:	2e5d      	cmp	r6, #93	; 0x5d
 8013746:	d0fa      	beq.n	801373e <__sccl+0x46>
 8013748:	42b3      	cmp	r3, r6
 801374a:	dcf8      	bgt.n	801373e <__sccl+0x46>
 801374c:	3502      	adds	r5, #2
 801374e:	4619      	mov	r1, r3
 8013750:	3101      	adds	r1, #1
 8013752:	428e      	cmp	r6, r1
 8013754:	5462      	strb	r2, [r4, r1]
 8013756:	dcfb      	bgt.n	8013750 <__sccl+0x58>
 8013758:	1af1      	subs	r1, r6, r3
 801375a:	3901      	subs	r1, #1
 801375c:	1c58      	adds	r0, r3, #1
 801375e:	42b3      	cmp	r3, r6
 8013760:	bfa8      	it	ge
 8013762:	2100      	movge	r1, #0
 8013764:	1843      	adds	r3, r0, r1
 8013766:	e7e0      	b.n	801372a <__sccl+0x32>

08013768 <strncmp>:
 8013768:	b510      	push	{r4, lr}
 801376a:	b17a      	cbz	r2, 801378c <strncmp+0x24>
 801376c:	4603      	mov	r3, r0
 801376e:	3901      	subs	r1, #1
 8013770:	1884      	adds	r4, r0, r2
 8013772:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013776:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801377a:	4290      	cmp	r0, r2
 801377c:	d101      	bne.n	8013782 <strncmp+0x1a>
 801377e:	42a3      	cmp	r3, r4
 8013780:	d101      	bne.n	8013786 <strncmp+0x1e>
 8013782:	1a80      	subs	r0, r0, r2
 8013784:	bd10      	pop	{r4, pc}
 8013786:	2800      	cmp	r0, #0
 8013788:	d1f3      	bne.n	8013772 <strncmp+0xa>
 801378a:	e7fa      	b.n	8013782 <strncmp+0x1a>
 801378c:	4610      	mov	r0, r2
 801378e:	e7f9      	b.n	8013784 <strncmp+0x1c>

08013790 <_strtoul_l.constprop.0>:
 8013790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013794:	4f36      	ldr	r7, [pc, #216]	; (8013870 <_strtoul_l.constprop.0+0xe0>)
 8013796:	4686      	mov	lr, r0
 8013798:	460d      	mov	r5, r1
 801379a:	4628      	mov	r0, r5
 801379c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137a0:	5de6      	ldrb	r6, [r4, r7]
 80137a2:	f016 0608 	ands.w	r6, r6, #8
 80137a6:	d1f8      	bne.n	801379a <_strtoul_l.constprop.0+0xa>
 80137a8:	2c2d      	cmp	r4, #45	; 0x2d
 80137aa:	d12f      	bne.n	801380c <_strtoul_l.constprop.0+0x7c>
 80137ac:	782c      	ldrb	r4, [r5, #0]
 80137ae:	2601      	movs	r6, #1
 80137b0:	1c85      	adds	r5, r0, #2
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d057      	beq.n	8013866 <_strtoul_l.constprop.0+0xd6>
 80137b6:	2b10      	cmp	r3, #16
 80137b8:	d109      	bne.n	80137ce <_strtoul_l.constprop.0+0x3e>
 80137ba:	2c30      	cmp	r4, #48	; 0x30
 80137bc:	d107      	bne.n	80137ce <_strtoul_l.constprop.0+0x3e>
 80137be:	7828      	ldrb	r0, [r5, #0]
 80137c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80137c4:	2858      	cmp	r0, #88	; 0x58
 80137c6:	d149      	bne.n	801385c <_strtoul_l.constprop.0+0xcc>
 80137c8:	786c      	ldrb	r4, [r5, #1]
 80137ca:	2310      	movs	r3, #16
 80137cc:	3502      	adds	r5, #2
 80137ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80137d2:	2700      	movs	r7, #0
 80137d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80137d8:	fb03 f908 	mul.w	r9, r3, r8
 80137dc:	ea6f 0909 	mvn.w	r9, r9
 80137e0:	4638      	mov	r0, r7
 80137e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80137e6:	f1bc 0f09 	cmp.w	ip, #9
 80137ea:	d814      	bhi.n	8013816 <_strtoul_l.constprop.0+0x86>
 80137ec:	4664      	mov	r4, ip
 80137ee:	42a3      	cmp	r3, r4
 80137f0:	dd22      	ble.n	8013838 <_strtoul_l.constprop.0+0xa8>
 80137f2:	2f00      	cmp	r7, #0
 80137f4:	db1d      	blt.n	8013832 <_strtoul_l.constprop.0+0xa2>
 80137f6:	4580      	cmp	r8, r0
 80137f8:	d31b      	bcc.n	8013832 <_strtoul_l.constprop.0+0xa2>
 80137fa:	d101      	bne.n	8013800 <_strtoul_l.constprop.0+0x70>
 80137fc:	45a1      	cmp	r9, r4
 80137fe:	db18      	blt.n	8013832 <_strtoul_l.constprop.0+0xa2>
 8013800:	fb00 4003 	mla	r0, r0, r3, r4
 8013804:	2701      	movs	r7, #1
 8013806:	f815 4b01 	ldrb.w	r4, [r5], #1
 801380a:	e7ea      	b.n	80137e2 <_strtoul_l.constprop.0+0x52>
 801380c:	2c2b      	cmp	r4, #43	; 0x2b
 801380e:	bf04      	itt	eq
 8013810:	782c      	ldrbeq	r4, [r5, #0]
 8013812:	1c85      	addeq	r5, r0, #2
 8013814:	e7cd      	b.n	80137b2 <_strtoul_l.constprop.0+0x22>
 8013816:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801381a:	f1bc 0f19 	cmp.w	ip, #25
 801381e:	d801      	bhi.n	8013824 <_strtoul_l.constprop.0+0x94>
 8013820:	3c37      	subs	r4, #55	; 0x37
 8013822:	e7e4      	b.n	80137ee <_strtoul_l.constprop.0+0x5e>
 8013824:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013828:	f1bc 0f19 	cmp.w	ip, #25
 801382c:	d804      	bhi.n	8013838 <_strtoul_l.constprop.0+0xa8>
 801382e:	3c57      	subs	r4, #87	; 0x57
 8013830:	e7dd      	b.n	80137ee <_strtoul_l.constprop.0+0x5e>
 8013832:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013836:	e7e6      	b.n	8013806 <_strtoul_l.constprop.0+0x76>
 8013838:	2f00      	cmp	r7, #0
 801383a:	da07      	bge.n	801384c <_strtoul_l.constprop.0+0xbc>
 801383c:	2322      	movs	r3, #34	; 0x22
 801383e:	f8ce 3000 	str.w	r3, [lr]
 8013842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013846:	b932      	cbnz	r2, 8013856 <_strtoul_l.constprop.0+0xc6>
 8013848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801384c:	b106      	cbz	r6, 8013850 <_strtoul_l.constprop.0+0xc0>
 801384e:	4240      	negs	r0, r0
 8013850:	2a00      	cmp	r2, #0
 8013852:	d0f9      	beq.n	8013848 <_strtoul_l.constprop.0+0xb8>
 8013854:	b107      	cbz	r7, 8013858 <_strtoul_l.constprop.0+0xc8>
 8013856:	1e69      	subs	r1, r5, #1
 8013858:	6011      	str	r1, [r2, #0]
 801385a:	e7f5      	b.n	8013848 <_strtoul_l.constprop.0+0xb8>
 801385c:	2430      	movs	r4, #48	; 0x30
 801385e:	2b00      	cmp	r3, #0
 8013860:	d1b5      	bne.n	80137ce <_strtoul_l.constprop.0+0x3e>
 8013862:	2308      	movs	r3, #8
 8013864:	e7b3      	b.n	80137ce <_strtoul_l.constprop.0+0x3e>
 8013866:	2c30      	cmp	r4, #48	; 0x30
 8013868:	d0a9      	beq.n	80137be <_strtoul_l.constprop.0+0x2e>
 801386a:	230a      	movs	r3, #10
 801386c:	e7af      	b.n	80137ce <_strtoul_l.constprop.0+0x3e>
 801386e:	bf00      	nop
 8013870:	080172a7 	.word	0x080172a7

08013874 <_strtoul_r>:
 8013874:	f7ff bf8c 	b.w	8013790 <_strtoul_l.constprop.0>

08013878 <__submore>:
 8013878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801387c:	460c      	mov	r4, r1
 801387e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013884:	4299      	cmp	r1, r3
 8013886:	d11d      	bne.n	80138c4 <__submore+0x4c>
 8013888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801388c:	f7fc f9d2 	bl	800fc34 <_malloc_r>
 8013890:	b918      	cbnz	r0, 801389a <__submore+0x22>
 8013892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801389a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801389e:	63a3      	str	r3, [r4, #56]	; 0x38
 80138a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80138a4:	6360      	str	r0, [r4, #52]	; 0x34
 80138a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80138aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80138ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80138b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80138b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80138ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80138be:	6020      	str	r0, [r4, #0]
 80138c0:	2000      	movs	r0, #0
 80138c2:	e7e8      	b.n	8013896 <__submore+0x1e>
 80138c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80138c6:	0077      	lsls	r7, r6, #1
 80138c8:	463a      	mov	r2, r7
 80138ca:	f7ff fa4c 	bl	8012d66 <_realloc_r>
 80138ce:	4605      	mov	r5, r0
 80138d0:	2800      	cmp	r0, #0
 80138d2:	d0de      	beq.n	8013892 <__submore+0x1a>
 80138d4:	eb00 0806 	add.w	r8, r0, r6
 80138d8:	4601      	mov	r1, r0
 80138da:	4632      	mov	r2, r6
 80138dc:	4640      	mov	r0, r8
 80138de:	f7fc f911 	bl	800fb04 <memcpy>
 80138e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80138e6:	f8c4 8000 	str.w	r8, [r4]
 80138ea:	e7e9      	b.n	80138c0 <__submore+0x48>

080138ec <__ascii_wctomb>:
 80138ec:	b149      	cbz	r1, 8013902 <__ascii_wctomb+0x16>
 80138ee:	2aff      	cmp	r2, #255	; 0xff
 80138f0:	bf85      	ittet	hi
 80138f2:	238a      	movhi	r3, #138	; 0x8a
 80138f4:	6003      	strhi	r3, [r0, #0]
 80138f6:	700a      	strbls	r2, [r1, #0]
 80138f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80138fc:	bf98      	it	ls
 80138fe:	2001      	movls	r0, #1
 8013900:	4770      	bx	lr
 8013902:	4608      	mov	r0, r1
 8013904:	4770      	bx	lr
	...

08013908 <__assert_func>:
 8013908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801390a:	4614      	mov	r4, r2
 801390c:	461a      	mov	r2, r3
 801390e:	4b09      	ldr	r3, [pc, #36]	; (8013934 <__assert_func+0x2c>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	4605      	mov	r5, r0
 8013914:	68d8      	ldr	r0, [r3, #12]
 8013916:	b14c      	cbz	r4, 801392c <__assert_func+0x24>
 8013918:	4b07      	ldr	r3, [pc, #28]	; (8013938 <__assert_func+0x30>)
 801391a:	9100      	str	r1, [sp, #0]
 801391c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013920:	4906      	ldr	r1, [pc, #24]	; (801393c <__assert_func+0x34>)
 8013922:	462b      	mov	r3, r5
 8013924:	f7fb ff62 	bl	800f7ec <fiprintf>
 8013928:	f000 f814 	bl	8013954 <abort>
 801392c:	4b04      	ldr	r3, [pc, #16]	; (8013940 <__assert_func+0x38>)
 801392e:	461c      	mov	r4, r3
 8013930:	e7f3      	b.n	801391a <__assert_func+0x12>
 8013932:	bf00      	nop
 8013934:	20000074 	.word	0x20000074
 8013938:	08017d4f 	.word	0x08017d4f
 801393c:	08017d5c 	.word	0x08017d5c
 8013940:	08017d8a 	.word	0x08017d8a

08013944 <_malloc_usable_size_r>:
 8013944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013948:	1f18      	subs	r0, r3, #4
 801394a:	2b00      	cmp	r3, #0
 801394c:	bfbc      	itt	lt
 801394e:	580b      	ldrlt	r3, [r1, r0]
 8013950:	18c0      	addlt	r0, r0, r3
 8013952:	4770      	bx	lr

08013954 <abort>:
 8013954:	b508      	push	{r3, lr}
 8013956:	2006      	movs	r0, #6
 8013958:	f000 f82c 	bl	80139b4 <raise>
 801395c:	2001      	movs	r0, #1
 801395e:	f7ed fe97 	bl	8001690 <_exit>

08013962 <_raise_r>:
 8013962:	291f      	cmp	r1, #31
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	4604      	mov	r4, r0
 8013968:	460d      	mov	r5, r1
 801396a:	d904      	bls.n	8013976 <_raise_r+0x14>
 801396c:	2316      	movs	r3, #22
 801396e:	6003      	str	r3, [r0, #0]
 8013970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013974:	bd38      	pop	{r3, r4, r5, pc}
 8013976:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013978:	b112      	cbz	r2, 8013980 <_raise_r+0x1e>
 801397a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801397e:	b94b      	cbnz	r3, 8013994 <_raise_r+0x32>
 8013980:	4620      	mov	r0, r4
 8013982:	f000 f831 	bl	80139e8 <_getpid_r>
 8013986:	462a      	mov	r2, r5
 8013988:	4601      	mov	r1, r0
 801398a:	4620      	mov	r0, r4
 801398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013990:	f000 b818 	b.w	80139c4 <_kill_r>
 8013994:	2b01      	cmp	r3, #1
 8013996:	d00a      	beq.n	80139ae <_raise_r+0x4c>
 8013998:	1c59      	adds	r1, r3, #1
 801399a:	d103      	bne.n	80139a4 <_raise_r+0x42>
 801399c:	2316      	movs	r3, #22
 801399e:	6003      	str	r3, [r0, #0]
 80139a0:	2001      	movs	r0, #1
 80139a2:	e7e7      	b.n	8013974 <_raise_r+0x12>
 80139a4:	2400      	movs	r4, #0
 80139a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139aa:	4628      	mov	r0, r5
 80139ac:	4798      	blx	r3
 80139ae:	2000      	movs	r0, #0
 80139b0:	e7e0      	b.n	8013974 <_raise_r+0x12>
	...

080139b4 <raise>:
 80139b4:	4b02      	ldr	r3, [pc, #8]	; (80139c0 <raise+0xc>)
 80139b6:	4601      	mov	r1, r0
 80139b8:	6818      	ldr	r0, [r3, #0]
 80139ba:	f7ff bfd2 	b.w	8013962 <_raise_r>
 80139be:	bf00      	nop
 80139c0:	20000074 	.word	0x20000074

080139c4 <_kill_r>:
 80139c4:	b538      	push	{r3, r4, r5, lr}
 80139c6:	4d07      	ldr	r5, [pc, #28]	; (80139e4 <_kill_r+0x20>)
 80139c8:	2300      	movs	r3, #0
 80139ca:	4604      	mov	r4, r0
 80139cc:	4608      	mov	r0, r1
 80139ce:	4611      	mov	r1, r2
 80139d0:	602b      	str	r3, [r5, #0]
 80139d2:	f7ed fe4d 	bl	8001670 <_kill>
 80139d6:	1c43      	adds	r3, r0, #1
 80139d8:	d102      	bne.n	80139e0 <_kill_r+0x1c>
 80139da:	682b      	ldr	r3, [r5, #0]
 80139dc:	b103      	cbz	r3, 80139e0 <_kill_r+0x1c>
 80139de:	6023      	str	r3, [r4, #0]
 80139e0:	bd38      	pop	{r3, r4, r5, pc}
 80139e2:	bf00      	nop
 80139e4:	20003be4 	.word	0x20003be4

080139e8 <_getpid_r>:
 80139e8:	f7ed be3a 	b.w	8001660 <_getpid>

080139ec <_gettimeofday>:
 80139ec:	4b02      	ldr	r3, [pc, #8]	; (80139f8 <_gettimeofday+0xc>)
 80139ee:	2258      	movs	r2, #88	; 0x58
 80139f0:	601a      	str	r2, [r3, #0]
 80139f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139f6:	4770      	bx	lr
 80139f8:	20003be4 	.word	0x20003be4

080139fc <_init>:
 80139fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139fe:	bf00      	nop
 8013a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a02:	bc08      	pop	{r3}
 8013a04:	469e      	mov	lr, r3
 8013a06:	4770      	bx	lr

08013a08 <_fini>:
 8013a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0a:	bf00      	nop
 8013a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a0e:	bc08      	pop	{r3}
 8013a10:	469e      	mov	lr, r3
 8013a12:	4770      	bx	lr
