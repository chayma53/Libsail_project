
Fx_uSD_File_Edit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000654c  08017488  08017488  00027488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9d4  0801d9d4  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9d4  0801d9d4  0002d9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d9dc  0801d9dc  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d9dc  0801d9dc  0002d9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d9e0  0801d9e0  0002d9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0801d9e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003025c  2**0
                  CONTENTS
 10 .bss          00003c2c  2000025c  2000025c  0003025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003e88  20003e88  0003025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b95c  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b036  00000000  00000000  0007bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a50  00000000  00000000  00086c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002488  00000000  00000000  00089670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ef1b  00000000  00000000  0008baf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00047d6f  00000000  00000000  000caa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ff6b  00000000  00000000  00112782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002326ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b884  00000000  00000000  00232740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0023dfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0023dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801746c 	.word	0x0801746c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000260 	.word	0x20000260
 80001fc:	0801746c 	.word	0x0801746c

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4919      	ldr	r1, [pc, #100]	; (800026c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4915      	ldr	r1, [pc, #84]	; (8000278 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490f      	ldr	r1, [pc, #60]	; (800027c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800024c:	f7ff bffe 	b.w	800024c <__tx_SVCallHandler>

08000250 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000250:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000252:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000256:	4770      	bx	lr

08000258 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000258:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800025a:	f000 f891 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000262:	4770      	bx	lr

08000264 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_NMIHandler>

08000268 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800026c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000270:	20003864 	.word	0x20003864
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000274:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000278:	001b773f 	.word	0x001b773f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	40ff0000 	.word	0x40ff0000

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20003904 	.word	0x20003904
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	20003868 	.word	0x20003868
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	2000386c 	.word	0x2000386c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	20003e74 	.word	0x20003e74

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f012 f927 	bl	801262c <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f012 f830 	bl	8012448 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	20003910 	.word	0x20003910
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	20003e74 	.word	0x20003e74
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	20003914 	.word	0x20003914
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	200039a0 	.word	0x200039a0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	200039a4 	.word	0x200039a4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	2000399c 	.word	0x2000399c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	20003998 	.word	0x20003998
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20003904 	.word	0x20003904
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	20003868 	.word	0x20003868
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	2000386c 	.word	0x2000386c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <strcmp>:
 80004e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	bf28      	it	cs
 80004ec:	429a      	cmpcs	r2, r3
 80004ee:	d0f7      	beq.n	80004e0 <strcmp>
 80004f0:	1ad0      	subs	r0, r2, r3
 80004f2:	4770      	bx	lr

080004f4 <strlen>:
 80004f4:	4603      	mov	r3, r0
 80004f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d1fb      	bne.n	80004f6 <strlen+0x2>
 80004fe:	1a18      	subs	r0, r3, r0
 8000500:	3801      	subs	r0, #1
 8000502:	4770      	bx	lr

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_dmul>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8de 	bleq	8000a58 <__aeabi_dmul+0x1dc>
 800089c:	442c      	add	r4, r5
 800089e:	ea81 0603 	eor.w	r6, r1, r3
 80008a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ae:	bf18      	it	ne
 80008b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008bc:	d038      	beq.n	8000930 <__aeabi_dmul+0xb4>
 80008be:	fba0 ce02 	umull	ip, lr, r0, r2
 80008c2:	f04f 0500 	mov.w	r5, #0
 80008c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008d2:	f04f 0600 	mov.w	r6, #0
 80008d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008da:	f09c 0f00 	teq	ip, #0
 80008de:	bf18      	it	ne
 80008e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008f0:	d204      	bcs.n	80008fc <__aeabi_dmul+0x80>
 80008f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008f6:	416d      	adcs	r5, r5
 80008f8:	eb46 0606 	adc.w	r6, r6, r6
 80008fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000900:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000904:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000908:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800090c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000910:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000914:	bf88      	it	hi
 8000916:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091a:	d81e      	bhi.n	800095a <__aeabi_dmul+0xde>
 800091c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000920:	bf08      	it	eq
 8000922:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000934:	ea46 0101 	orr.w	r1, r6, r1
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	f300 80ab 	bgt.w	8000ab4 <__aeabi_dmul+0x238>
 800095e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000962:	bfde      	ittt	le
 8000964:	2000      	movle	r0, #0
 8000966:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800096a:	bd70      	pople	{r4, r5, r6, pc}
 800096c:	f1c4 0400 	rsb	r4, r4, #0
 8000970:	3c20      	subs	r4, #32
 8000972:	da35      	bge.n	80009e0 <__aeabi_dmul+0x164>
 8000974:	340c      	adds	r4, #12
 8000976:	dc1b      	bgt.n	80009b0 <__aeabi_dmul+0x134>
 8000978:	f104 0414 	add.w	r4, r4, #20
 800097c:	f1c4 0520 	rsb	r5, r4, #32
 8000980:	fa00 f305 	lsl.w	r3, r0, r5
 8000984:	fa20 f004 	lsr.w	r0, r0, r4
 8000988:	fa01 f205 	lsl.w	r2, r1, r5
 800098c:	ea40 0002 	orr.w	r0, r0, r2
 8000990:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000994:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800099c:	fa21 f604 	lsr.w	r6, r1, r4
 80009a0:	eb42 0106 	adc.w	r1, r2, r6
 80009a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a8:	bf08      	it	eq
 80009aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f1c4 040c 	rsb	r4, r4, #12
 80009b4:	f1c4 0520 	rsb	r5, r4, #32
 80009b8:	fa00 f304 	lsl.w	r3, r0, r4
 80009bc:	fa20 f005 	lsr.w	r0, r0, r5
 80009c0:	fa01 f204 	lsl.w	r2, r1, r4
 80009c4:	ea40 0002 	orr.w	r0, r0, r2
 80009c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009d0:	f141 0100 	adc.w	r1, r1, #0
 80009d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d8:	bf08      	it	eq
 80009da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f1c4 0520 	rsb	r5, r4, #32
 80009e4:	fa00 f205 	lsl.w	r2, r0, r5
 80009e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009ec:	fa20 f304 	lsr.w	r3, r0, r4
 80009f0:	fa01 f205 	lsl.w	r2, r1, r5
 80009f4:	ea43 0302 	orr.w	r3, r3, r2
 80009f8:	fa21 f004 	lsr.w	r0, r1, r4
 80009fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a00:	fa21 f204 	lsr.w	r2, r1, r4
 8000a04:	ea20 0002 	bic.w	r0, r0, r2
 8000a08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f094 0f00 	teq	r4, #0
 8000a1c:	d10f      	bne.n	8000a3e <__aeabi_dmul+0x1c2>
 8000a1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a22:	0040      	lsls	r0, r0, #1
 8000a24:	eb41 0101 	adc.w	r1, r1, r1
 8000a28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a2c:	bf08      	it	eq
 8000a2e:	3c01      	subeq	r4, #1
 8000a30:	d0f7      	beq.n	8000a22 <__aeabi_dmul+0x1a6>
 8000a32:	ea41 0106 	orr.w	r1, r1, r6
 8000a36:	f095 0f00 	teq	r5, #0
 8000a3a:	bf18      	it	ne
 8000a3c:	4770      	bxne	lr
 8000a3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a42:	0052      	lsls	r2, r2, #1
 8000a44:	eb43 0303 	adc.w	r3, r3, r3
 8000a48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a4c:	bf08      	it	eq
 8000a4e:	3d01      	subeq	r5, #1
 8000a50:	d0f7      	beq.n	8000a42 <__aeabi_dmul+0x1c6>
 8000a52:	ea43 0306 	orr.w	r3, r3, r6
 8000a56:	4770      	bx	lr
 8000a58:	ea94 0f0c 	teq	r4, ip
 8000a5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a60:	bf18      	it	ne
 8000a62:	ea95 0f0c 	teqne	r5, ip
 8000a66:	d00c      	beq.n	8000a82 <__aeabi_dmul+0x206>
 8000a68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a6c:	bf18      	it	ne
 8000a6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a72:	d1d1      	bne.n	8000a18 <__aeabi_dmul+0x19c>
 8000a74:	ea81 0103 	eor.w	r1, r1, r3
 8000a78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a86:	bf06      	itte	eq
 8000a88:	4610      	moveq	r0, r2
 8000a8a:	4619      	moveq	r1, r3
 8000a8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a90:	d019      	beq.n	8000ac6 <__aeabi_dmul+0x24a>
 8000a92:	ea94 0f0c 	teq	r4, ip
 8000a96:	d102      	bne.n	8000a9e <__aeabi_dmul+0x222>
 8000a98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a9c:	d113      	bne.n	8000ac6 <__aeabi_dmul+0x24a>
 8000a9e:	ea95 0f0c 	teq	r5, ip
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_dmul+0x234>
 8000aa4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000aa8:	bf1c      	itt	ne
 8000aaa:	4610      	movne	r0, r2
 8000aac:	4619      	movne	r1, r3
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dmul+0x24a>
 8000ab0:	ea81 0103 	eor.w	r1, r1, r3
 8000ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000abc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ace:	bd70      	pop	{r4, r5, r6, pc}

08000ad0 <__aeabi_ddiv>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ade:	bf1d      	ittte	ne
 8000ae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ae4:	ea94 0f0c 	teqne	r4, ip
 8000ae8:	ea95 0f0c 	teqne	r5, ip
 8000aec:	f000 f8a7 	bleq	8000c3e <__aeabi_ddiv+0x16e>
 8000af0:	eba4 0405 	sub.w	r4, r4, r5
 8000af4:	ea81 0e03 	eor.w	lr, r1, r3
 8000af8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000afc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b00:	f000 8088 	beq.w	8000c14 <__aeabi_ddiv+0x144>
 8000b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b20:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b28:	429d      	cmp	r5, r3
 8000b2a:	bf08      	it	eq
 8000b2c:	4296      	cmpeq	r6, r2
 8000b2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b32:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b36:	d202      	bcs.n	8000b3e <__aeabi_ddiv+0x6e>
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	eb65 0503 	sbc.w	r5, r5, r3
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5a:	bf22      	ittt	cs
 8000b5c:	1ab6      	subcs	r6, r6, r2
 8000b5e:	4675      	movcs	r5, lr
 8000b60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b72:	bf22      	ittt	cs
 8000b74:	1ab6      	subcs	r6, r6, r2
 8000b76:	4675      	movcs	r5, lr
 8000b78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b7c:	085b      	lsrs	r3, r3, #1
 8000b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b82:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b8a:	bf22      	ittt	cs
 8000b8c:	1ab6      	subcs	r6, r6, r2
 8000b8e:	4675      	movcs	r5, lr
 8000b90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ba2:	bf22      	ittt	cs
 8000ba4:	1ab6      	subcs	r6, r6, r2
 8000ba6:	4675      	movcs	r5, lr
 8000ba8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bac:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bb0:	d018      	beq.n	8000be4 <__aeabi_ddiv+0x114>
 8000bb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bce:	d1c0      	bne.n	8000b52 <__aeabi_ddiv+0x82>
 8000bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd4:	d10b      	bne.n	8000bee <__aeabi_ddiv+0x11e>
 8000bd6:	ea41 0100 	orr.w	r1, r1, r0
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000be2:	e7b6      	b.n	8000b52 <__aeabi_ddiv+0x82>
 8000be4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be8:	bf04      	itt	eq
 8000bea:	4301      	orreq	r1, r0
 8000bec:	2000      	moveq	r0, #0
 8000bee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bf2:	bf88      	it	hi
 8000bf4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bf8:	f63f aeaf 	bhi.w	800095a <__aeabi_dmul+0xde>
 8000bfc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c00:	bf04      	itt	eq
 8000c02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c0a:	f150 0000 	adcs.w	r0, r0, #0
 8000c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
 8000c14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c20:	bfc2      	ittt	gt
 8000c22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c2a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c30:	f04f 0e00 	mov.w	lr, #0
 8000c34:	3c01      	subs	r4, #1
 8000c36:	e690      	b.n	800095a <__aeabi_dmul+0xde>
 8000c38:	ea45 0e06 	orr.w	lr, r5, r6
 8000c3c:	e68d      	b.n	800095a <__aeabi_dmul+0xde>
 8000c3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c42:	ea94 0f0c 	teq	r4, ip
 8000c46:	bf08      	it	eq
 8000c48:	ea95 0f0c 	teqeq	r5, ip
 8000c4c:	f43f af3b 	beq.w	8000ac6 <__aeabi_dmul+0x24a>
 8000c50:	ea94 0f0c 	teq	r4, ip
 8000c54:	d10a      	bne.n	8000c6c <__aeabi_ddiv+0x19c>
 8000c56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c5a:	f47f af34 	bne.w	8000ac6 <__aeabi_dmul+0x24a>
 8000c5e:	ea95 0f0c 	teq	r5, ip
 8000c62:	f47f af25 	bne.w	8000ab0 <__aeabi_dmul+0x234>
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	e72c      	b.n	8000ac6 <__aeabi_dmul+0x24a>
 8000c6c:	ea95 0f0c 	teq	r5, ip
 8000c70:	d106      	bne.n	8000c80 <__aeabi_ddiv+0x1b0>
 8000c72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c76:	f43f aefd 	beq.w	8000a74 <__aeabi_dmul+0x1f8>
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	e722      	b.n	8000ac6 <__aeabi_dmul+0x24a>
 8000c80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c84:	bf18      	it	ne
 8000c86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c8a:	f47f aec5 	bne.w	8000a18 <__aeabi_dmul+0x19c>
 8000c8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c92:	f47f af0d 	bne.w	8000ab0 <__aeabi_dmul+0x234>
 8000c96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c9a:	f47f aeeb 	bne.w	8000a74 <__aeabi_dmul+0x1f8>
 8000c9e:	e712      	b.n	8000ac6 <__aeabi_dmul+0x24a>

08000ca0 <__gedf2>:
 8000ca0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ca4:	e006      	b.n	8000cb4 <__cmpdf2+0x4>
 8000ca6:	bf00      	nop

08000ca8 <__ledf2>:
 8000ca8:	f04f 0c01 	mov.w	ip, #1
 8000cac:	e002      	b.n	8000cb4 <__cmpdf2+0x4>
 8000cae:	bf00      	nop

08000cb0 <__cmpdf2>:
 8000cb0:	f04f 0c01 	mov.w	ip, #1
 8000cb4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cca:	d01b      	beq.n	8000d04 <__cmpdf2+0x54>
 8000ccc:	b001      	add	sp, #4
 8000cce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cd2:	bf0c      	ite	eq
 8000cd4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cd8:	ea91 0f03 	teqne	r1, r3
 8000cdc:	bf02      	ittt	eq
 8000cde:	ea90 0f02 	teqeq	r0, r2
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	4770      	bxeq	lr
 8000ce6:	f110 0f00 	cmn.w	r0, #0
 8000cea:	ea91 0f03 	teq	r1, r3
 8000cee:	bf58      	it	pl
 8000cf0:	4299      	cmppl	r1, r3
 8000cf2:	bf08      	it	eq
 8000cf4:	4290      	cmpeq	r0, r2
 8000cf6:	bf2c      	ite	cs
 8000cf8:	17d8      	asrcs	r0, r3, #31
 8000cfa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cfe:	f040 0001 	orr.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	d102      	bne.n	8000d14 <__cmpdf2+0x64>
 8000d0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d12:	d107      	bne.n	8000d24 <__cmpdf2+0x74>
 8000d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d1c:	d1d6      	bne.n	8000ccc <__cmpdf2+0x1c>
 8000d1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d22:	d0d3      	beq.n	8000ccc <__cmpdf2+0x1c>
 8000d24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <__aeabi_cdrcmple>:
 8000d2c:	4684      	mov	ip, r0
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4662      	mov	r2, ip
 8000d32:	468c      	mov	ip, r1
 8000d34:	4619      	mov	r1, r3
 8000d36:	4663      	mov	r3, ip
 8000d38:	e000      	b.n	8000d3c <__aeabi_cdcmpeq>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_cdcmpeq>:
 8000d3c:	b501      	push	{r0, lr}
 8000d3e:	f7ff ffb7 	bl	8000cb0 <__cmpdf2>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	bf48      	it	mi
 8000d46:	f110 0f00 	cmnmi.w	r0, #0
 8000d4a:	bd01      	pop	{r0, pc}

08000d4c <__aeabi_dcmpeq>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff fff4 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d54:	bf0c      	ite	eq
 8000d56:	2001      	moveq	r0, #1
 8000d58:	2000      	movne	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_dcmplt>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffea 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d68:	bf34      	ite	cc
 8000d6a:	2001      	movcc	r0, #1
 8000d6c:	2000      	movcs	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_dcmple>:
 8000d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d78:	f7ff ffe0 	bl	8000d3c <__aeabi_cdcmpeq>
 8000d7c:	bf94      	ite	ls
 8000d7e:	2001      	movls	r0, #1
 8000d80:	2000      	movhi	r0, #0
 8000d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d86:	bf00      	nop

08000d88 <__aeabi_dcmpge>:
 8000d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d8c:	f7ff ffce 	bl	8000d2c <__aeabi_cdrcmple>
 8000d90:	bf94      	ite	ls
 8000d92:	2001      	movls	r0, #1
 8000d94:	2000      	movhi	r0, #0
 8000d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9a:	bf00      	nop

08000d9c <__aeabi_dcmpgt>:
 8000d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da0:	f7ff ffc4 	bl	8000d2c <__aeabi_cdrcmple>
 8000da4:	bf34      	ite	cc
 8000da6:	2001      	movcc	r0, #1
 8000da8:	2000      	movcs	r0, #0
 8000daa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dae:	bf00      	nop

08000db0 <__aeabi_d2uiz>:
 8000db0:	004a      	lsls	r2, r1, #1
 8000db2:	d211      	bcs.n	8000dd8 <__aeabi_d2uiz+0x28>
 8000db4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000db8:	d211      	bcs.n	8000dde <__aeabi_d2uiz+0x2e>
 8000dba:	d50d      	bpl.n	8000dd8 <__aeabi_d2uiz+0x28>
 8000dbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000dc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dc4:	d40e      	bmi.n	8000de4 <__aeabi_d2uiz+0x34>
 8000dc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd6:	4770      	bx	lr
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	4770      	bx	lr
 8000dde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000de2:	d102      	bne.n	8000dea <__aeabi_d2uiz+0x3a>
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de8:	4770      	bx	lr
 8000dea:	f04f 0000 	mov.w	r0, #0
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_uldivmod>:
 8000df0:	b953      	cbnz	r3, 8000e08 <__aeabi_uldivmod+0x18>
 8000df2:	b94a      	cbnz	r2, 8000e08 <__aeabi_uldivmod+0x18>
 8000df4:	2900      	cmp	r1, #0
 8000df6:	bf08      	it	eq
 8000df8:	2800      	cmpeq	r0, #0
 8000dfa:	bf1c      	itt	ne
 8000dfc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 b9fe 	b.w	8001204 <__aeabi_idiv0>
 8000e08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e10:	f000 f83c 	bl	8000e8c <__udivmoddi4>
 8000e14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_d2lz>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	2200      	movs	r2, #0
 8000e24:	2300      	movs	r3, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	460d      	mov	r5, r1
 8000e2a:	f7ff ff99 	bl	8000d60 <__aeabi_dcmplt>
 8000e2e:	b928      	cbnz	r0, 8000e3c <__aeabi_d2lz+0x1c>
 8000e30:	4620      	mov	r0, r4
 8000e32:	4629      	mov	r1, r5
 8000e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e38:	f000 b80a 	b.w	8000e50 <__aeabi_d2ulz>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e42:	f000 f805 	bl	8000e50 <__aeabi_d2ulz>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	bd38      	pop	{r3, r4, r5, pc}
 8000e4e:	bf00      	nop

08000e50 <__aeabi_d2ulz>:
 8000e50:	b5d0      	push	{r4, r6, r7, lr}
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__aeabi_d2ulz+0x34>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	4606      	mov	r6, r0
 8000e58:	460f      	mov	r7, r1
 8000e5a:	f7ff fd0f 	bl	800087c <__aeabi_dmul>
 8000e5e:	f7ff ffa7 	bl	8000db0 <__aeabi_d2uiz>
 8000e62:	4604      	mov	r4, r0
 8000e64:	f7ff fc90 	bl	8000788 <__aeabi_ui2d>
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <__aeabi_d2ulz+0x38>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f7ff fd06 	bl	800087c <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4630      	mov	r0, r6
 8000e76:	4639      	mov	r1, r7
 8000e78:	f7ff fb48 	bl	800050c <__aeabi_dsub>
 8000e7c:	f7ff ff98 	bl	8000db0 <__aeabi_d2uiz>
 8000e80:	4621      	mov	r1, r4
 8000e82:	bdd0      	pop	{r4, r6, r7, pc}
 8000e84:	3df00000 	.word	0x3df00000
 8000e88:	41f00000 	.word	0x41f00000

08000e8c <__udivmoddi4>:
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	9d08      	ldr	r5, [sp, #32]
 8000e92:	4604      	mov	r4, r0
 8000e94:	468e      	mov	lr, r1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14d      	bne.n	8000f36 <__udivmoddi4+0xaa>
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	4694      	mov	ip, r2
 8000e9e:	d969      	bls.n	8000f74 <__udivmoddi4+0xe8>
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	b152      	cbz	r2, 8000ebc <__udivmoddi4+0x30>
 8000ea6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eaa:	f1c2 0120 	rsb	r1, r2, #32
 8000eae:	fa20 f101 	lsr.w	r1, r0, r1
 8000eb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000eba:	4094      	lsls	r4, r2
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	0c21      	lsrs	r1, r4, #16
 8000ec2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ec6:	fa1f f78c 	uxth.w	r7, ip
 8000eca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ece:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ed2:	fb06 f107 	mul.w	r1, r6, r7
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d90a      	bls.n	8000ef0 <__udivmoddi4+0x64>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ee2:	f080 811f 	bcs.w	8001124 <__udivmoddi4+0x298>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 811c 	bls.w	8001124 <__udivmoddi4+0x298>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef8:	fb08 3310 	mls	r3, r8, r0, r3
 8000efc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f00:	fb00 f707 	mul.w	r7, r0, r7
 8000f04:	42a7      	cmp	r7, r4
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x92>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f10:	f080 810a 	bcs.w	8001128 <__udivmoddi4+0x29c>
 8000f14:	42a7      	cmp	r7, r4
 8000f16:	f240 8107 	bls.w	8001128 <__udivmoddi4+0x29c>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	1be4      	subs	r4, r4, r7
 8000f24:	2600      	movs	r6, #0
 8000f26:	b11d      	cbz	r5, 8000f30 <__udivmoddi4+0xa4>
 8000f28:	40d4      	lsrs	r4, r2
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d909      	bls.n	8000f4e <__udivmoddi4+0xc2>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	f000 80ef 	beq.w	800111e <__udivmoddi4+0x292>
 8000f40:	2600      	movs	r6, #0
 8000f42:	e9c5 0100 	strd	r0, r1, [r5]
 8000f46:	4630      	mov	r0, r6
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	fab3 f683 	clz	r6, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d14a      	bne.n	8000fec <__udivmoddi4+0x160>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d302      	bcc.n	8000f60 <__udivmoddi4+0xd4>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	f200 80f9 	bhi.w	8001152 <__udivmoddi4+0x2c6>
 8000f60:	1a84      	subs	r4, r0, r2
 8000f62:	eb61 0303 	sbc.w	r3, r1, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	469e      	mov	lr, r3
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	d0e0      	beq.n	8000f30 <__udivmoddi4+0xa4>
 8000f6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f72:	e7dd      	b.n	8000f30 <__udivmoddi4+0xa4>
 8000f74:	b902      	cbnz	r2, 8000f78 <__udivmoddi4+0xec>
 8000f76:	deff      	udf	#255	; 0xff
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	f040 8092 	bne.w	80010a6 <__udivmoddi4+0x21a>
 8000f82:	eba1 010c 	sub.w	r1, r1, ip
 8000f86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8a:	fa1f fe8c 	uxth.w	lr, ip
 8000f8e:	2601      	movs	r6, #1
 8000f90:	0c20      	lsrs	r0, r4, #16
 8000f92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f96:	fb07 1113 	mls	r1, r7, r3, r1
 8000f9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f9e:	fb0e f003 	mul.w	r0, lr, r3
 8000fa2:	4288      	cmp	r0, r1
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x12c>
 8000fa6:	eb1c 0101 	adds.w	r1, ip, r1
 8000faa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x12a>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f200 80cb 	bhi.w	800114c <__udivmoddi4+0x2c0>
 8000fb6:	4643      	mov	r3, r8
 8000fb8:	1a09      	subs	r1, r1, r0
 8000fba:	b2a4      	uxth	r4, r4
 8000fbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000fc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000fcc:	45a6      	cmp	lr, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x156>
 8000fd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fd8:	d202      	bcs.n	8000fe0 <__udivmoddi4+0x154>
 8000fda:	45a6      	cmp	lr, r4
 8000fdc:	f200 80bb 	bhi.w	8001156 <__udivmoddi4+0x2ca>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	eba4 040e 	sub.w	r4, r4, lr
 8000fe6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fea:	e79c      	b.n	8000f26 <__udivmoddi4+0x9a>
 8000fec:	f1c6 0720 	rsb	r7, r6, #32
 8000ff0:	40b3      	lsls	r3, r6
 8000ff2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffa:	fa20 f407 	lsr.w	r4, r0, r7
 8000ffe:	fa01 f306 	lsl.w	r3, r1, r6
 8001002:	431c      	orrs	r4, r3
 8001004:	40f9      	lsrs	r1, r7
 8001006:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800100a:	fa00 f306 	lsl.w	r3, r0, r6
 800100e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001012:	0c20      	lsrs	r0, r4, #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fb09 1118 	mls	r1, r9, r8, r1
 800101c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001020:	fb08 f00e 	mul.w	r0, r8, lr
 8001024:	4288      	cmp	r0, r1
 8001026:	fa02 f206 	lsl.w	r2, r2, r6
 800102a:	d90b      	bls.n	8001044 <__udivmoddi4+0x1b8>
 800102c:	eb1c 0101 	adds.w	r1, ip, r1
 8001030:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001034:	f080 8088 	bcs.w	8001148 <__udivmoddi4+0x2bc>
 8001038:	4288      	cmp	r0, r1
 800103a:	f240 8085 	bls.w	8001148 <__udivmoddi4+0x2bc>
 800103e:	f1a8 0802 	sub.w	r8, r8, #2
 8001042:	4461      	add	r1, ip
 8001044:	1a09      	subs	r1, r1, r0
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb1 f0f9 	udiv	r0, r1, r9
 800104c:	fb09 1110 	mls	r1, r9, r0, r1
 8001050:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001054:	fb00 fe0e 	mul.w	lr, r0, lr
 8001058:	458e      	cmp	lr, r1
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x1e2>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8001064:	d26c      	bcs.n	8001140 <__udivmoddi4+0x2b4>
 8001066:	458e      	cmp	lr, r1
 8001068:	d96a      	bls.n	8001140 <__udivmoddi4+0x2b4>
 800106a:	3802      	subs	r0, #2
 800106c:	4461      	add	r1, ip
 800106e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001072:	fba0 9402 	umull	r9, r4, r0, r2
 8001076:	eba1 010e 	sub.w	r1, r1, lr
 800107a:	42a1      	cmp	r1, r4
 800107c:	46c8      	mov	r8, r9
 800107e:	46a6      	mov	lr, r4
 8001080:	d356      	bcc.n	8001130 <__udivmoddi4+0x2a4>
 8001082:	d053      	beq.n	800112c <__udivmoddi4+0x2a0>
 8001084:	b15d      	cbz	r5, 800109e <__udivmoddi4+0x212>
 8001086:	ebb3 0208 	subs.w	r2, r3, r8
 800108a:	eb61 010e 	sbc.w	r1, r1, lr
 800108e:	fa01 f707 	lsl.w	r7, r1, r7
 8001092:	fa22 f306 	lsr.w	r3, r2, r6
 8001096:	40f1      	lsrs	r1, r6
 8001098:	431f      	orrs	r7, r3
 800109a:	e9c5 7100 	strd	r7, r1, [r5]
 800109e:	2600      	movs	r6, #0
 80010a0:	4631      	mov	r1, r6
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	f1c2 0320 	rsb	r3, r2, #32
 80010aa:	40d8      	lsrs	r0, r3
 80010ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80010b0:	fa21 f303 	lsr.w	r3, r1, r3
 80010b4:	4091      	lsls	r1, r2
 80010b6:	4301      	orrs	r1, r0
 80010b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010bc:	fa1f fe8c 	uxth.w	lr, ip
 80010c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80010c4:	fb07 3610 	mls	r6, r7, r0, r3
 80010c8:	0c0b      	lsrs	r3, r1, #16
 80010ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010ce:	fb00 f60e 	mul.w	r6, r0, lr
 80010d2:	429e      	cmp	r6, r3
 80010d4:	fa04 f402 	lsl.w	r4, r4, r2
 80010d8:	d908      	bls.n	80010ec <__udivmoddi4+0x260>
 80010da:	eb1c 0303 	adds.w	r3, ip, r3
 80010de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010e2:	d22f      	bcs.n	8001144 <__udivmoddi4+0x2b8>
 80010e4:	429e      	cmp	r6, r3
 80010e6:	d92d      	bls.n	8001144 <__udivmoddi4+0x2b8>
 80010e8:	3802      	subs	r0, #2
 80010ea:	4463      	add	r3, ip
 80010ec:	1b9b      	subs	r3, r3, r6
 80010ee:	b289      	uxth	r1, r1
 80010f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80010f4:	fb07 3316 	mls	r3, r7, r6, r3
 80010f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fc:	fb06 f30e 	mul.w	r3, r6, lr
 8001100:	428b      	cmp	r3, r1
 8001102:	d908      	bls.n	8001116 <__udivmoddi4+0x28a>
 8001104:	eb1c 0101 	adds.w	r1, ip, r1
 8001108:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800110c:	d216      	bcs.n	800113c <__udivmoddi4+0x2b0>
 800110e:	428b      	cmp	r3, r1
 8001110:	d914      	bls.n	800113c <__udivmoddi4+0x2b0>
 8001112:	3e02      	subs	r6, #2
 8001114:	4461      	add	r1, ip
 8001116:	1ac9      	subs	r1, r1, r3
 8001118:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800111c:	e738      	b.n	8000f90 <__udivmoddi4+0x104>
 800111e:	462e      	mov	r6, r5
 8001120:	4628      	mov	r0, r5
 8001122:	e705      	b.n	8000f30 <__udivmoddi4+0xa4>
 8001124:	4606      	mov	r6, r0
 8001126:	e6e3      	b.n	8000ef0 <__udivmoddi4+0x64>
 8001128:	4618      	mov	r0, r3
 800112a:	e6f8      	b.n	8000f1e <__udivmoddi4+0x92>
 800112c:	454b      	cmp	r3, r9
 800112e:	d2a9      	bcs.n	8001084 <__udivmoddi4+0x1f8>
 8001130:	ebb9 0802 	subs.w	r8, r9, r2
 8001134:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001138:	3801      	subs	r0, #1
 800113a:	e7a3      	b.n	8001084 <__udivmoddi4+0x1f8>
 800113c:	4646      	mov	r6, r8
 800113e:	e7ea      	b.n	8001116 <__udivmoddi4+0x28a>
 8001140:	4620      	mov	r0, r4
 8001142:	e794      	b.n	800106e <__udivmoddi4+0x1e2>
 8001144:	4640      	mov	r0, r8
 8001146:	e7d1      	b.n	80010ec <__udivmoddi4+0x260>
 8001148:	46d0      	mov	r8, sl
 800114a:	e77b      	b.n	8001044 <__udivmoddi4+0x1b8>
 800114c:	3b02      	subs	r3, #2
 800114e:	4461      	add	r1, ip
 8001150:	e732      	b.n	8000fb8 <__udivmoddi4+0x12c>
 8001152:	4630      	mov	r0, r6
 8001154:	e709      	b.n	8000f6a <__udivmoddi4+0xde>
 8001156:	4464      	add	r4, ip
 8001158:	3802      	subs	r0, #2
 800115a:	e742      	b.n	8000fe2 <__udivmoddi4+0x156>

0800115c <__gthread_active_p>:
 800115c:	2000      	movs	r0, #0
 800115e:	4770      	bx	lr

08001160 <emutls_alloc>:
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	6845      	ldr	r5, [r0, #4]
 8001164:	6806      	ldr	r6, [r0, #0]
 8001166:	2d04      	cmp	r5, #4
 8001168:	4604      	mov	r4, r0
 800116a:	d80f      	bhi.n	800118c <emutls_alloc+0x2c>
 800116c:	1d30      	adds	r0, r6, #4
 800116e:	f012 f9c9 	bl	8013504 <malloc>
 8001172:	4603      	mov	r3, r0
 8001174:	b1f8      	cbz	r0, 80011b6 <emutls_alloc+0x56>
 8001176:	68e1      	ldr	r1, [r4, #12]
 8001178:	6000      	str	r0, [r0, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	4632      	mov	r2, r6
 800117e:	4618      	mov	r0, r3
 8001180:	b1a1      	cbz	r1, 80011ac <emutls_alloc+0x4c>
 8001182:	f012 f9df 	bl	8013544 <memcpy>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	19a8      	adds	r0, r5, r6
 800118e:	3003      	adds	r0, #3
 8001190:	f012 f9b8 	bl	8013504 <malloc>
 8001194:	b178      	cbz	r0, 80011b6 <emutls_alloc+0x56>
 8001196:	1ceb      	adds	r3, r5, #3
 8001198:	4403      	add	r3, r0
 800119a:	426d      	negs	r5, r5
 800119c:	402b      	ands	r3, r5
 800119e:	4632      	mov	r2, r6
 80011a0:	f843 0c04 	str.w	r0, [r3, #-4]
 80011a4:	68e1      	ldr	r1, [r4, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	2900      	cmp	r1, #0
 80011aa:	d1ea      	bne.n	8001182 <emutls_alloc+0x22>
 80011ac:	f012 f9d8 	bl	8013560 <memset>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	f016 f905 	bl	80173c4 <abort>
 80011ba:	bf00      	nop

080011bc <__emutls_get_address>:
 80011bc:	b510      	push	{r4, lr}
 80011be:	4604      	mov	r4, r0
 80011c0:	f7ff ffcc 	bl	800115c <__gthread_active_p>
 80011c4:	b938      	cbnz	r0, 80011d6 <__emutls_get_address+0x1a>
 80011c6:	68a0      	ldr	r0, [r4, #8]
 80011c8:	b100      	cbz	r0, 80011cc <__emutls_get_address+0x10>
 80011ca:	bd10      	pop	{r4, pc}
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff ffc7 	bl	8001160 <emutls_alloc>
 80011d2:	60a0      	str	r0, [r4, #8]
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	f016 f8f5 	bl	80173c4 <abort>
 80011da:	bf00      	nop

080011dc <__emutls_register_common>:
 80011dc:	b410      	push	{r4}
 80011de:	6804      	ldr	r4, [r0, #0]
 80011e0:	428c      	cmp	r4, r1
 80011e2:	d202      	bcs.n	80011ea <__emutls_register_common+0xe>
 80011e4:	2400      	movs	r4, #0
 80011e6:	6001      	str	r1, [r0, #0]
 80011e8:	60c4      	str	r4, [r0, #12]
 80011ea:	6844      	ldr	r4, [r0, #4]
 80011ec:	4294      	cmp	r4, r2
 80011ee:	bf38      	it	cc
 80011f0:	6042      	strcc	r2, [r0, #4]
 80011f2:	b11b      	cbz	r3, 80011fc <__emutls_register_common+0x20>
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	428a      	cmp	r2, r1
 80011f8:	bf08      	it	eq
 80011fa:	60c3      	streq	r3, [r0, #12]
 80011fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__aeabi_idiv0>:
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001210:	2334      	movs	r3, #52	; 0x34
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <tx_application_define+0x74>)
 800121a:	4919      	ldr	r1, [pc, #100]	; (8001280 <tx_application_define+0x78>)
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <tx_application_define+0x7c>)
 800121e:	f011 fcaf 	bl	8012b80 <_txe_byte_pool_create>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 8001228:	f000 f9aa 	bl	8001580 <Error_Handler>
 800122c:	e009      	b.n	8001242 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <tx_application_define+0x7c>)
 8001230:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f82e 	bl	8001294 <App_ThreadX_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 800123e:	f000 f99f 	bl	8001580 <Error_Handler>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001242:	2334      	movs	r3, #52	; 0x34
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <tx_application_define+0x80>)
 800124c:	490f      	ldr	r1, [pc, #60]	; (800128c <tx_application_define+0x84>)
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <tx_application_define+0x88>)
 8001250:	f011 fc96 	bl	8012b80 <_txe_byte_pool_create>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <tx_application_define+0x58>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Error */
    Error_Handler();
 800125a:	f000 f991 	bl	8001580 <Error_Handler>
    /* USER CODE BEGIN MX_FileX_Init_Success */

    /* USER CODE END MX_FileX_Init_Success */
  }

}
 800125e:	e009      	b.n	8001274 <tx_application_define+0x6c>
    memory_ptr = (VOID *)&fx_app_byte_pool;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <tx_application_define+0x88>)
 8001262:	60fb      	str	r3, [r7, #12]
    if (MX_FileX_Init(memory_ptr) != FX_SUCCESS)
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 fb1d 	bl	80018a4 <MX_FileX_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <tx_application_define+0x6c>
      Error_Handler();
 8001270:	f000 f986 	bl	8001580 <Error_Handler>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000278 	.word	0x20000278
 8001280:	08017488 	.word	0x08017488
 8001284:	20002278 	.word	0x20002278
 8001288:	200022ac 	.word	0x200022ac
 800128c:	0801749c 	.word	0x0801749c
 8001290:	200032ac 	.word	0x200032ac

08001294 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80012b6:	f010 fbb9 	bl	8011a2c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f001 fe9b 	bl	8002ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f869 	bl	800139c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LED */
  BSP_LED_Init(LED_GREEN);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 fda2 	bl	8001e14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 fd9f 	bl	8001e14 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f8fd 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012da:	f000 f8d3 	bl	8001484 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* LCD Configuration */
  LCD_Config();
 80012de:	f000 f803 	bl	80012e8 <LCD_Config>


  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80012e2:	f7ff ffe6 	bl	80012b2 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <main+0x28>

080012e8 <LCD_Config>:
  * @brief lcd Configuration
  * @retval None
  *
  */
static void LCD_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	uint8_t lcd_status = LCD_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]

  /* LCD DSI initialization */
  lcd_status = BSP_LCD_Init();
 80012f2:	f000 fe56 	bl	8001fa2 <BSP_LCD_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if(lcd_status != LCD_OK)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <LCD_Config+0x1c>
  {
    Error_Handler();
 8001300:	f000 f93e 	bl	8001580 <Error_Handler>
  }

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001304:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001308:	2000      	movs	r0, #0
 800130a:	f000 ffeb 	bl	80022e4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f001 f848 	bl	80023a4 <BSP_LCD_SelectLayer>

  /* Clear the LCD Background layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f001 f8a0 	bl	800245c <BSP_LCD_Clear>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800131c:	4819      	ldr	r0, [pc, #100]	; (8001384 <LCD_Config+0x9c>)
 800131e:	f001 f883 	bl	8002428 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001326:	f001 f865 	bl	80023f4 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800132a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132e:	f001 f895 	bl	800245c <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <LCD_Config+0xa0>)
 8001334:	f001 f846 	bl	80023c4 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 430, (uint8_t *)"Application BMP_Image_Decoding", CENTER_MODE);
 8001338:	2301      	movs	r3, #1
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <LCD_Config+0xa4>)
 800133c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001340:	2000      	movs	r0, #0
 8001342:	f001 f8f7 	bl	8002534 <BSP_LCD_DisplayStringAt>

  /* Compute centered position to draw on screen the decoded pixels */
  Xpos = (uint16_t)((BSP_LCD_GetXSize() - WIDTH) / 2);
 8001346:	f000 ffb5 	bl	80022b4 <BSP_LCD_GetXSize>
 800134a:	4603      	mov	r3, r0
 800134c:	3b20      	subs	r3, #32
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <LCD_Config+0xa8>)
 8001354:	801a      	strh	r2, [r3, #0]
  Ypos = (uint16_t)((BSP_LCD_GetYSize() - HEIGHT) / 2);
 8001356:	f000 ffb9 	bl	80022cc <BSP_LCD_GetYSize>
 800135a:	4603      	mov	r3, r0
 800135c:	3b23      	subs	r3, #35	; 0x23
 800135e:	085b      	lsrs	r3, r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LCD_Config+0xac>)
 8001364:	801a      	strh	r2, [r3, #0]

  /* Draw Bitmap */
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80)/2, 125, (uint8_t *)bmp_buffer);
 8001366:	f000 ffa5 	bl	80022b4 <BSP_LCD_GetXSize>
 800136a:	4603      	mov	r3, r0
 800136c:	3b50      	subs	r3, #80	; 0x50
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <LCD_Config+0xb0>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	217d      	movs	r1, #125	; 0x7d
 8001376:	4618      	mov	r0, r3
 8001378:	f001 f9a4 	bl	80026c4 <BSP_LCD_DrawBitmap>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000044 	.word	0x20000044
 8001388:	ff000080 	.word	0xff000080
 800138c:	080174b0 	.word	0x080174b0
 8001390:	20003424 	.word	0x20003424
 8001394:	20003426 	.word	0x20003426
 8001398:	0801a608 	.word	0x0801a608

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2234      	movs	r2, #52	; 0x34
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f012 f8d8 	bl	8013560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <SystemClock_Config+0xe0>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a2c      	ldr	r2, [pc, #176]	; (800147c <SystemClock_Config+0xe0>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <SystemClock_Config+0xe0>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <SystemClock_Config+0xe4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <SystemClock_Config+0xe4>)
 80013e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <SystemClock_Config+0xe4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001400:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001410:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800141a:	2308      	movs	r3, #8
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fc2e 	bl	8005c88 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001432:	f000 f8a5 	bl	8001580 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001436:	f003 ff5b 	bl	80052f0 <HAL_PWREx_EnableOverDrive>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001440:	f000 f89e 	bl	8001580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001450:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001454:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	2105      	movs	r1, #5
 8001462:	4618      	mov	r0, r3
 8001464:	f003 ff94 	bl	8005390 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800146e:	f000 f887 	bl	8001580 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3750      	adds	r7, #80	; 0x50
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_DMA_Init>:
/**
  * Enable DMA controller clock
  */

static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_DMA_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	203b      	movs	r0, #59	; 0x3b
 80014ac:	f001 fec4 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014b0:	203b      	movs	r0, #59	; 0x3b
 80014b2:	f001 fedd 	bl	8003270 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 15, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	210f      	movs	r1, #15
 80014ba:	2045      	movs	r0, #69	; 0x45
 80014bc:	f001 febc 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014c0:	2045      	movs	r0, #69	; 0x45
 80014c2:	f001 fed5 	bl	8003270 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_GPIO_Init+0x84>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <MX_GPIO_Init+0x84>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_GPIO_Init+0x84>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_GPIO_Init+0x84>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <MX_GPIO_Init+0x84>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_GPIO_Init+0x84>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_GPIO_Init+0x84>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <MX_GPIO_Init+0x84>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <MX_GPIO_Init+0x84>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_GPIO_Init+0x84>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <MX_GPIO_Init+0x84>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_GPIO_Init+0x84>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156e:	f001 fd67 	bl	8003040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40001000 	.word	0x40001000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_GREEN);
 8001584:	2000      	movs	r0, #0
 8001586:	f000 fcc5 	bl	8001f14 <BSP_LED_Off>
  while (1)
  {
    BSP_LED_Toggle(LED_RED);
 800158a:	2002      	movs	r0, #2
 800158c:	f000 fce0 	bl	8001f50 <BSP_LED_Toggle>
    HAL_Delay(200);
 8001590:	20c8      	movs	r0, #200	; 0xc8
 8001592:	f001 fd75 	bl	8003080 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 8001596:	e7f8      	b.n	800158a <Error_Handler+0xa>

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_MspInit+0x4c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_MspInit+0x4c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2036      	movs	r0, #54	; 0x36
 80015fe:	f001 fe1b 	bl	8003238 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001602:	2036      	movs	r0, #54	; 0x36
 8001604:	f001 fe34 	bl	8003270 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_InitTick+0xa4>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_InitTick+0xa4>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_InitTick+0xa4>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001624:	f107 0210 	add.w	r2, r7, #16
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f8ba 	bl	80057a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001634:	f004 f8a4 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 8001638:	4603      	mov	r3, r0
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_InitTick+0xa8>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0c9b      	lsrs	r3, r3, #18
 8001648:	3b01      	subs	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_InitTick+0xac>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_InitTick+0xb0>)
 8001650:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_InitTick+0xac>)
 8001654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001658:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_InitTick+0xac>)
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_InitTick+0xac>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_InitTick+0xac>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_InitTick+0xac>)
 800166e:	f005 f8fe 	bl	800686e <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d104      	bne.n	8001682 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <HAL_InitTick+0xac>)
 800167a:	f005 f951 	bl	8006920 <HAL_TIM_Base_Start_IT>
 800167e:	4603      	mov	r3, r0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	431bde83 	.word	0x431bde83
 8001694:	20003428 	.word	0x20003428
 8001698:	40001000 	.word	0x40001000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <SDIO_IRQHandler+0x10>)
 80016ce:	f004 fd5f 	bl	8006190 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200032e0 	.word	0x200032e0

080016dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <TIM6_DAC_IRQHandler+0x10>)
 80016e2:	f005 f98d 	bl	8006a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20003428 	.word	0x20003428

080016f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA2_Stream3_IRQHandler+0x10>)
 80016f6:	f001 fef7 	bl	80034e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20003364 	.word	0x20003364

08001704 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <DMA2_Stream6_IRQHandler+0x10>)
 800170a:	f001 feed 	bl	80034e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200033c4 	.word	0x200033c4

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_kill>:

int _kill(int pid, int sig)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001732:	f011 fbdd 	bl	8012ef0 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	2216      	movs	r2, #22
 800173a:	601a      	str	r2, [r3, #0]
	return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_exit>:

void _exit (int status)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe7 	bl	8001728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800175a:	e7fe      	b.n	800175a <_exit+0x12>

0800175c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
	}

return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
	}
	return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f011 fb42 	bl	8012ef0 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20050000 	.word	0x20050000
 8001898:	00000400 	.word	0x00000400
 800189c:	20003470 	.word	0x20003470
 80018a0:	20003e88 	.word	0x20003e88

080018a4 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af08      	add	r7, sp, #32
 80018aa:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN MX_FileX_Init */
  VOID *pointer;

  /* Allocate memory for the main thread's stack */
  ret = tx_byte_allocate(byte_pool, &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 80018b4:	f107 010c 	add.w	r1, r7, #12
 80018b8:	2300      	movs	r3, #0
 80018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018be:	6938      	ldr	r0, [r7, #16]
 80018c0:	f011 f8ea 	bl	8012a98 <_txe_byte_allocate>
 80018c4:	6178      	str	r0, [r7, #20]

  if (ret != FX_SUCCESS)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_FileX_Init+0x2c>
  {
    /* Failed at allocating memory */
    Error_Handler();
 80018cc:	f7ff fe58 	bl	8001580 <Error_Handler>
  }

  /* Create the main thread.  */
  tx_thread_create(&fx_app_thread, "FileX App Thread", fx_thread_entry, 0, pointer, DEFAULT_STACK_SIZE,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	22b4      	movs	r2, #180	; 0xb4
 80018d4:	9206      	str	r2, [sp, #24]
 80018d6:	2201      	movs	r2, #1
 80018d8:	9205      	str	r2, [sp, #20]
 80018da:	2200      	movs	r2, #0
 80018dc:	9204      	str	r2, [sp, #16]
 80018de:	220a      	movs	r2, #10
 80018e0:	9203      	str	r2, [sp, #12]
 80018e2:	220a      	movs	r2, #10
 80018e4:	9202      	str	r2, [sp, #8]
 80018e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	4a05      	ldr	r2, [pc, #20]	; (8001908 <MX_FileX_Init+0x64>)
 80018f2:	4906      	ldr	r1, [pc, #24]	; (800190c <MX_FileX_Init+0x68>)
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_FileX_Init+0x6c>)
 80018f6:	f011 fa01 	bl	8012cfc <_txe_thread_create>
                   DEFAULT_THREAD_PRIO, DEFAULT_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);

  /* Initialize FileX.  */
  fx_system_initialize();
 80018fa:	f005 fd41 	bl	8007380 <_fx_system_initialize>

  /* USER CODE END MX_FileX_Init */
  return ret;
 80018fe:	697b      	ldr	r3, [r7, #20]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08001915 	.word	0x08001915
 800190c:	080174d4 	.word	0x080174d4
 8001910:	20003478 	.word	0x20003478

08001914 <fx_thread_entry>:

/* USER CODE BEGIN 1 */

void fx_thread_entry(ULONG thread_input)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	b087      	sub	sp, #28
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
/* UINT status;
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";*/
  //sail_load_image_from_memory((const void *)bmp_buffer, bmp_buffer_len, &image_bmp);
	UINT check_load_image=SAIL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]

	check_load_image = sail_load_image_from_memory(bmp_buffer, bmp_buffer_len, &fst_bmp);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <fx_thread_entry+0x74>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <fx_thread_entry+0x78>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a19      	ldr	r2, [pc, #100]	; (8001990 <fx_thread_entry+0x7c>)
 800192c:	4619      	mov	r1, r3
 800192e:	f00e fa11 	bl	800fd54 <sail_load_image_from_memory>
 8001932:	4603      	mov	r3, r0
 8001934:	60fb      	str	r3, [r7, #12]
	if(check_load_image != SAIL_OK)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <fx_thread_entry+0x2c>
	{
		Error_Handler();
 800193c:	f7ff fe20 	bl	8001580 <Error_Handler>

	}

	  printf("Size: %ux%u, bytes per line: %u, "
	         "pixel format: %s, pixels: %p\n",
			 fst_bmp->width,
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <fx_thread_entry+0x7c>)
 8001942:	681b      	ldr	r3, [r3, #0]
	  printf("Size: %ux%u, bytes per line: %u, "
 8001944:	685c      	ldr	r4, [r3, #4]
			 fst_bmp->height,
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <fx_thread_entry+0x7c>)
 8001948:	681b      	ldr	r3, [r3, #0]
	  printf("Size: %ux%u, bytes per line: %u, "
 800194a:	689d      	ldr	r5, [r3, #8]
			 fst_bmp->bytes_per_line,
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <fx_thread_entry+0x7c>)
 800194e:	681b      	ldr	r3, [r3, #0]
	  printf("Size: %ux%u, bytes per line: %u, "
 8001950:	68de      	ldr	r6, [r3, #12]
	         sail_pixel_format_to_string(fst_bmp->pixel_format),
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <fx_thread_entry+0x7c>)
 8001954:	681b      	ldr	r3, [r3, #0]
	  printf("Size: %ux%u, bytes per line: %u, "
 8001956:	7d1b      	ldrb	r3, [r3, #20]
 8001958:	4618      	mov	r0, r3
 800195a:	f009 ff31 	bl	800b7c0 <sail_pixel_format_to_string>
 800195e:	4602      	mov	r2, r0
			 fst_bmp->pixels);
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <fx_thread_entry+0x7c>)
 8001962:	681b      	ldr	r3, [r3, #0]
	  printf("Size: %ux%u, bytes per line: %u, "
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	9200      	str	r2, [sp, #0]
 800196a:	4633      	mov	r3, r6
 800196c:	462a      	mov	r2, r5
 800196e:	4621      	mov	r1, r4
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <fx_thread_entry+0x80>)
 8001972:	f012 f9eb 	bl	8013d4c <iprintf>

	  sail_destroy_image(fst_bmp);
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <fx_thread_entry+0x7c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f00c f99a 	bl	800dcb4 <sail_destroy_image>
  {
    BSP_LED_Toggle(LED_GREEN);
    tx_thread_sleep(50);
  }
#endif
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001988:	0801a608 	.word	0x0801a608
 800198c:	20000020 	.word	0x20000020
 8001990:	20003474 	.word	0x20003474
 8001994:	080174e8 	.word	0x080174e8

08001998 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <HAL_SD_TxCpltCallback+0x18>)
 80019a2:	f011 f98d 	bl	8012cc0 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000352c 	.word	0x2000352c

080019b4 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <HAL_SD_RxCpltCallback+0x18>)
 80019be:	f011 f97f 	bl	8012cc0 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000352c 	.word	0x2000352c

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fa:	f001 faed 	bl	8002fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f011 fcf5 	bl	80133ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff fc5c 	bl	80012be <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001a14:	0801d9e4 	.word	0x0801d9e4
  ldr r2, =_sbss
 8001a18:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001a1c:	20003e88 	.word	0x20003e88

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b2      	sub	sp, #200	; 0xc8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 8001a2e:	2078      	movs	r0, #120	; 0x78
 8001a30:	f000 faac 	bl	8001f8c <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8001a34:	4ac8      	ldr	r2, [pc, #800]	; (8001d58 <NT35510_Init+0x334>)
 8001a36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3e:	6018      	str	r0, [r3, #0]
 8001a40:	3304      	adds	r3, #4
 8001a42:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8001a44:	4bc5      	ldr	r3, [pc, #788]	; (8001d5c <NT35510_Init+0x338>)
 8001a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8001a4a:	4bc5      	ldr	r3, [pc, #788]	; (8001d60 <NT35510_Init+0x33c>)
 8001a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8001a50:	4bc4      	ldr	r3, [pc, #784]	; (8001d64 <NT35510_Init+0x340>)
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8001a56:	4bc4      	ldr	r3, [pc, #784]	; (8001d68 <NT35510_Init+0x344>)
 8001a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8001a5c:	4bc3      	ldr	r3, [pc, #780]	; (8001d6c <NT35510_Init+0x348>)
 8001a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8001a62:	4bc3      	ldr	r3, [pc, #780]	; (8001d70 <NT35510_Init+0x34c>)
 8001a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8001a68:	f240 13bf 	movw	r3, #447	; 0x1bf
 8001a6c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8001a70:	4bc0      	ldr	r3, [pc, #768]	; (8001d74 <NT35510_Init+0x350>)
 8001a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8001a76:	4bc0      	ldr	r3, [pc, #768]	; (8001d78 <NT35510_Init+0x354>)
 8001a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8001a7c:	4bbf      	ldr	r3, [pc, #764]	; (8001d7c <NT35510_Init+0x358>)
 8001a7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8001a82:	4bbf      	ldr	r3, [pc, #764]	; (8001d80 <NT35510_Init+0x35c>)
 8001a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8001a88:	4bbe      	ldr	r3, [pc, #760]	; (8001d84 <NT35510_Init+0x360>)
 8001a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8001a8e:	4bbe      	ldr	r3, [pc, #760]	; (8001d88 <NT35510_Init+0x364>)
 8001a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8001a94:	4abd      	ldr	r2, [pc, #756]	; (8001d8c <NT35510_Init+0x368>)
 8001a96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	8019      	strh	r1, [r3, #0]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	0c12      	lsrs	r2, r2, #16
 8001aa4:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8001aa6:	4aba      	ldr	r2, [pc, #744]	; (8001d90 <NT35510_Init+0x36c>)
 8001aa8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab0:	6018      	str	r0, [r3, #0]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8001ab6:	4ab7      	ldr	r2, [pc, #732]	; (8001d94 <NT35510_Init+0x370>)
 8001ab8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	8019      	strh	r1, [r3, #0]
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	0c12      	lsrs	r2, r2, #16
 8001ac6:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8001ac8:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001acc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8001ad0:	f245 13b5 	movw	r3, #20917	; 0x51b5
 8001ad4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8001ad8:	4aaf      	ldr	r2, [pc, #700]	; (8001d98 <NT35510_Init+0x374>)
 8001ada:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	8019      	strh	r1, [r3, #0]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	0c12      	lsrs	r2, r2, #16
 8001ae8:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8001aea:	4aac      	ldr	r2, [pc, #688]	; (8001d9c <NT35510_Init+0x378>)
 8001aec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af4:	6018      	str	r0, [r3, #0]
 8001af6:	3304      	adds	r3, #4
 8001af8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8001afa:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8001b00:	4ba7      	ldr	r3, [pc, #668]	; (8001da0 <NT35510_Init+0x37c>)
 8001b02:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8001b04:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8001b08:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8001b0c:	2336      	movs	r3, #54	; 0x36
 8001b0e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8001b12:	4aa4      	ldr	r2, [pc, #656]	; (8001da4 <NT35510_Init+0x380>)
 8001b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1c:	6018      	str	r0, [r3, #0]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8001b22:	4aa1      	ldr	r2, [pc, #644]	; (8001da8 <NT35510_Init+0x384>)
 8001b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2c:	6018      	str	r0, [r3, #0]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8001b32:	f246 0336 	movw	r3, #24630	; 0x6036
 8001b36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8001b3a:	4a9c      	ldr	r2, [pc, #624]	; (8001dac <NT35510_Init+0x388>)
 8001b3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b44:	6018      	str	r0, [r3, #0]
 8001b46:	3304      	adds	r3, #4
 8001b48:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8001b4a:	4a99      	ldr	r2, [pc, #612]	; (8001db0 <NT35510_Init+0x38c>)
 8001b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b54:	6018      	str	r0, [r3, #0]
 8001b56:	3304      	adds	r3, #4
 8001b58:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8001b5a:	2335      	movs	r3, #53	; 0x35
 8001b5c:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8001b5e:	2311      	movs	r3, #17
 8001b60:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8001b62:	2329      	movs	r3, #41	; 0x29
 8001b64:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8001b66:	f647 7351 	movw	r3, #32593	; 0x7f51
 8001b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8001b6c:	f642 4353 	movw	r3, #11347	; 0x2c53
 8001b70:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8001b72:	f240 2355 	movw	r3, #597	; 0x255
 8001b76:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8001b78:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8001b7c:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8001b7e:	232c      	movs	r3, #44	; 0x2c
 8001b80:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8001b82:	f245 533a 	movw	r3, #21818	; 0x553a
 8001b86:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8001b88:	f247 733a 	movw	r3, #30522	; 0x773a
 8001b8c:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8001b8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b92:	4619      	mov	r1, r3
 8001b94:	2005      	movs	r0, #5
 8001b96:	f000 fe47 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8001b9a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 fe41 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8001ba6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fe3b 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8001bb2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 fe35 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8001bbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 fe2f 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8001bca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 fe29 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8001bd6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bda:	4619      	mov	r1, r3
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 fe23 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8001be2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001be6:	4619      	mov	r1, r3
 8001be8:	2001      	movs	r0, #1
 8001bea:	f000 fe1d 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8001bee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 fe17 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8001bfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 fe11 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8001c06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 fe0b 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8001c12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c16:	4619      	mov	r1, r3
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 fe05 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8001c1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c22:	4619      	mov	r1, r3
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 fdff 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8001c2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 fdf9 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8001c36:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f000 fdf3 	bl	8002828 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8001c42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c46:	4619      	mov	r1, r3
 8001c48:	2005      	movs	r0, #5
 8001c4a:	f000 fded 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8001c4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c52:	4619      	mov	r1, r3
 8001c54:	2002      	movs	r0, #2
 8001c56:	f000 fde7 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8001c5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2001      	movs	r0, #1
 8001c62:	f000 fde1 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8001c66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 fddb 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8001c72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c76:	4619      	mov	r1, r3
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f000 fdd5 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8001c7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c82:	4619      	mov	r1, r3
 8001c84:	2004      	movs	r0, #4
 8001c86:	f000 fdcf 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8001c8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 fdc9 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8001c96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 fdc3 	bl	8002828 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8001ca2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f000 fdbd 	bl	8002828 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8001cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 fdb7 	bl	8002828 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 fdb1 	bl	8002828 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8001cc6:	20c8      	movs	r0, #200	; 0xc8
 8001cc8:	f000 f960 	bl	8001f8c <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d112      	bne.n	8001cf8 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8001cd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f000 fda5 	bl	8002828 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8001cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2004      	movs	r0, #4
 8001ce6:	f000 fd9f 	bl	8002828 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8001cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2004      	movs	r0, #4
 8001cf2:	f000 fd99 	bl	8002828 <DSI_IO_WriteCmd>
 8001cf6:	e011      	b.n	8001d1c <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8001cf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 fd92 	bl	8002828 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8001d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2004      	movs	r0, #4
 8001d0c:	f000 fd8c 	bl	8002828 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8001d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d14:	4619      	mov	r1, r3
 8001d16:	2004      	movs	r0, #4
 8001d18:	f000 fd86 	bl	8002828 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 fd80 	bl	8002828 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8001d28:	2078      	movs	r0, #120	; 0x78
 8001d2a:	f000 f92f 	bl	8001f8c <NT35510_IO_Delay>

  switch(ColorCoding)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <NT35510_Init+0x324>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d13c      	bne.n	8001db4 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2001      	movs	r0, #1
 8001d42:	f000 fd71 	bl	8002828 <DSI_IO_WriteCmd>
      break;
 8001d46:	e03c      	b.n	8001dc2 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 fd6a 	bl	8002828 <DSI_IO_WriteCmd>
      break;
 8001d54:	e035      	b.n	8001dc2 <NT35510_Init+0x39e>
 8001d56:	bf00      	nop
 8001d58:	08017528 	.word	0x08017528
 8001d5c:	b0030303 	.word	0xb0030303
 8001d60:	b6464646 	.word	0xb6464646
 8001d64:	b1030303 	.word	0xb1030303
 8001d68:	b7363636 	.word	0xb7363636
 8001d6c:	b2020000 	.word	0xb2020000
 8001d70:	b8262626 	.word	0xb8262626
 8001d74:	b3090909 	.word	0xb3090909
 8001d78:	b9363636 	.word	0xb9363636
 8001d7c:	b5080808 	.word	0xb5080808
 8001d80:	ba262626 	.word	0xba262626
 8001d84:	bc008000 	.word	0xbc008000
 8001d88:	bd008000 	.word	0xbd008000
 8001d8c:	08017530 	.word	0x08017530
 8001d90:	08017534 	.word	0x08017534
 8001d94:	0801753c 	.word	0x0801753c
 8001d98:	08017540 	.word	0x08017540
 8001d9c:	08017544 	.word	0x08017544
 8001da0:	cc000003 	.word	0xcc000003
 8001da4:	0801754c 	.word	0x0801754c
 8001da8:	08017554 	.word	0x08017554
 8001dac:	0801755c 	.word	0x0801755c
 8001db0:	08017564 	.word	0x08017564
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4619      	mov	r1, r3
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 fd34 	bl	8002828 <DSI_IO_WriteCmd>
      break;
 8001dc0:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f000 fd2d 	bl	8002828 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f000 fd27 	bl	8002828 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	2001      	movs	r0, #1
 8001de2:	f000 fd21 	bl	8002828 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8001de6:	f107 0318 	add.w	r3, r7, #24
 8001dea:	4619      	mov	r1, r3
 8001dec:	2001      	movs	r0, #1
 8001dee:	f000 fd1b 	bl	8002828 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8001df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df6:	4619      	mov	r1, r3
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 fd15 	bl	8002828 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 fd0f 	bl	8002828 <DSI_IO_WriteCmd>

  return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	37c8      	adds	r7, #200	; 0xc8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d86d      	bhi.n	8001f00 <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <BSP_LED_Init+0xf4>)
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d847      	bhi.n	8001ed0 <BSP_LED_Init+0xbc>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <BSP_LED_Init+0x34>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e77 	.word	0x08001e77
 8001e50:	08001e95 	.word	0x08001e95
 8001e54:	08001eb3 	.word	0x08001eb3
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]
      break;
 8001e74:	e02d      	b.n	8001ed2 <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
      break;
 8001e92:	e01e      	b.n	8001ed2 <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
      break;
 8001eb0:	e00f      	b.n	8001ed2 <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <BSP_LED_Init+0xf8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
      break;
 8001ece:	e000      	b.n	8001ed2 <BSP_LED_Init+0xbe>
    default :
      break;
 8001ed0:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <BSP_LED_Init+0xfc>)
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	f107 021c 	add.w	r2, r7, #28
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fd25 	bl	8004930 <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <BSP_LED_Init+0xfc>)
 8001eea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <BSP_LED_Init+0xf4>)
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4619      	mov	r1, r3
 8001efc:	f002 fec4 	bl	8004c88 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 8001f00:	bf00      	nop
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000024 	.word	0x20000024
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	20000034 	.word	0x20000034

08001f14 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d80c      	bhi.n	8001f3e <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <BSP_LED_Off+0x34>)
 8001f28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <BSP_LED_Off+0x38>)
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2201      	movs	r2, #1
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f002 fea5 	bl	8004c88 <HAL_GPIO_WritePin>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000034 	.word	0x20000034
 8001f4c:	20000024 	.word	0x20000024

08001f50 <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d80c      	bhi.n	8001f7a <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <BSP_LED_Toggle+0x34>)
 8001f64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4907      	ldr	r1, [pc, #28]	; (8001f88 <BSP_LED_Toggle+0x38>)
 8001f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f002 fea0 	bl	8004cba <HAL_GPIO_TogglePin>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000034 	.word	0x20000034
 8001f88:	20000024 	.word	0x20000024

08001f8c <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f001 f873 	bl	8003080 <HAL_Delay>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 f804 	bl	8001fb4 <BSP_LCD_InitEx>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b096      	sub	sp, #88	; 0x58
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001fbe:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001fc2:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001fc8:	f000 f93e 	bl	8002248 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001fcc:	f000 fc56 	bl	800287c <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8001fd0:	4b93      	ldr	r3, [pc, #588]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 8001fd2:	4a94      	ldr	r2, [pc, #592]	; (8002224 <BSP_LCD_InitEx+0x270>)
 8001fd4:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8001fd6:	4892      	ldr	r0, [pc, #584]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 8001fd8:	f002 f8ba 	bl	8004150 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8001fdc:	237d      	movs	r3, #125	; 0x7d
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001fe8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001fee:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	4a8b      	ldr	r2, [pc, #556]	; (8002228 <BSP_LCD_InitEx+0x274>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0a9b      	lsrs	r3, r3, #10
 8002000:	4a87      	ldr	r2, [pc, #540]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 8002002:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	4885      	ldr	r0, [pc, #532]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 800200c:	f001 ff86 	bl	8003f1c <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8002016:	4b85      	ldr	r3, [pc, #532]	; (800222c <BSP_LCD_InitEx+0x278>)
 8002018:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800201c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800201e:	4b84      	ldr	r3, [pc, #528]	; (8002230 <BSP_LCD_InitEx+0x27c>)
 8002020:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e007      	b.n	8002038 <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8002028:	4b80      	ldr	r3, [pc, #512]	; (800222c <BSP_LCD_InitEx+0x278>)
 800202a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800202e:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8002030:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <BSP_LCD_InitEx+0x27c>)
 8002032:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002036:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8002038:	4b7c      	ldr	r3, [pc, #496]	; (800222c <BSP_LCD_InitEx+0x278>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 800203e:	4b7c      	ldr	r3, [pc, #496]	; (8002230 <BSP_LCD_InitEx+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
#if defined (USE_STM32469I_DISCO_REVC)
  VSA  = NT35510_480X800_VSYNC;
 8002044:	2378      	movs	r3, #120	; 0x78
 8002046:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = NT35510_480X800_VBP;
 8002048:	2396      	movs	r3, #150	; 0x96
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = NT35510_480X800_VFP;
 800204c:	2396      	movs	r3, #150	; 0x96
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = NT35510_480X800_HSYNC;
 8002050:	2302      	movs	r3, #2
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = NT35510_480X800_HBP;
 8002054:	2322      	movs	r3, #34	; 0x22
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = NT35510_480X800_HFP;
 8002058:	2322      	movs	r3, #34	; 0x22
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  HBP  = OTM8009A_480X800_HBP;
  HFP  = OTM8009A_480X800_HFP;
#endif /* USE_STM32469I_DISCO_REVC */
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800205c:	4b75      	ldr	r3, [pc, #468]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8002062:	4b74      	ldr	r3, [pc, #464]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002064:	2205      	movs	r2, #5
 8002066:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002068:	4b72      	ldr	r3, [pc, #456]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800206e:	4b71      	ldr	r3, [pc, #452]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002070:	2200      	movs	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8002074:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800207a:	4b6e      	ldr	r3, [pc, #440]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800207c:	2202      	movs	r2, #2
 800207e:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002082:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002086:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800208e:	4a69      	ldr	r2, [pc, #420]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002092:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002098:	fb03 f202 	mul.w	r2, r3, r2
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4a64      	ldr	r2, [pc, #400]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020a4:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80020b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020bc:	441a      	add	r2, r3
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	441a      	add	r2, r3
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	4413      	add	r3, r2
 80020c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020c8:	fb03 f202 	mul.w	r2, r3, r2
 80020cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80020d6:	4a57      	ldr	r2, [pc, #348]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020da:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80020dc:	4a55      	ldr	r2, [pc, #340]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80020e2:	4a54      	ldr	r2, [pc, #336]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80020e8:	4a52      	ldr	r2, [pc, #328]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80020f6:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020f8:	2210      	movs	r2, #16
 80020fa:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80020fe:	2200      	movs	r2, #0
 8002100:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8002102:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002104:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002108:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800210a:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800210c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800211c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002128:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <BSP_LCD_InitEx+0x280>)
 800212c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002130:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8002132:	4940      	ldr	r1, [pc, #256]	; (8002234 <BSP_LCD_InitEx+0x280>)
 8002134:	483a      	ldr	r0, [pc, #232]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 8002136:	f002 f893 	bl	8004260 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 800213a:	2323      	movs	r3, #35	; 0x23
 800213c:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 800213e:	2323      	movs	r3, #35	; 0x23
 8002140:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 8002142:	2323      	movs	r3, #35	; 0x23
 8002144:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8002146:	2323      	movs	r3, #35	; 0x23
 8002148:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 800214e:	230a      	movs	r3, #10
 8002150:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4619      	mov	r1, r3
 8002158:	4831      	ldr	r0, [pc, #196]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 800215a:	f002 fa89 	bl	8004670 <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	3b01      	subs	r3, #1
 8002162:	4a35      	ldr	r2, [pc, #212]	; (8002238 <BSP_LCD_InitEx+0x284>)
 8002164:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8002166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216a:	4413      	add	r3, r2
 800216c:	3b01      	subs	r3, #1
 800216e:	4a32      	ldr	r2, [pc, #200]	; (8002238 <BSP_LCD_InitEx+0x284>)
 8002170:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <BSP_LCD_InitEx+0x278>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	441a      	add	r2, r3
 800217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217c:	4413      	add	r3, r2
 800217e:	3b01      	subs	r3, #1
 8002180:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <BSP_LCD_InitEx+0x284>)
 8002182:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <BSP_LCD_InitEx+0x278>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218a:	441a      	add	r2, r3
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	441a      	add	r2, r3
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	4413      	add	r3, r2
 8002194:	3b01      	subs	r3, #1
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <BSP_LCD_InitEx+0x284>)
 8002198:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <BSP_LCD_InitEx+0x278>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a26      	ldr	r2, [pc, #152]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021a0:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 80021a2:	4b23      	ldr	r3, [pc, #140]	; (8002230 <BSP_LCD_InitEx+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a24      	ldr	r2, [pc, #144]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021a8:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <BSP_LCD_InitEx+0x288>)
 80021ac:	2208      	movs	r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <BSP_LCD_InitEx+0x288>)
 80021b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021b6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <BSP_LCD_InitEx+0x288>)
 80021ba:	2207      	movs	r2, #7
 80021bc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <BSP_LCD_InitEx+0x288>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80021c4:	481d      	ldr	r0, [pc, #116]	; (800223c <BSP_LCD_InitEx+0x288>)
 80021c6:	f003 fb21 	bl	800580c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <BSP_LCD_InitEx+0x28c>)
 80021ec:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 80021ee:	4911      	ldr	r1, [pc, #68]	; (8002234 <BSP_LCD_InitEx+0x280>)
 80021f0:	4811      	ldr	r0, [pc, #68]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021f2:	f003 f82c 	bl	800524e <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 80021f6:	4810      	ldr	r0, [pc, #64]	; (8002238 <BSP_LCD_InitEx+0x284>)
 80021f8:	f002 fd7a 	bl	8004cf0 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 80021fc:	4808      	ldr	r0, [pc, #32]	; (8002220 <BSP_LCD_InitEx+0x26c>)
 80021fe:	f002 faa1 	bl	8004744 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002202:	f000 fd05 	bl	8002c10 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002206:	480f      	ldr	r0, [pc, #60]	; (8002244 <BSP_LCD_InitEx+0x290>)
 8002208:	f000 f90e 	bl	8002428 <BSP_LCD_SetFont>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4619      	mov	r1, r3
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff fc07 	bl	8001a24 <NT35510_Init>
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32469I_DISCO_REVC */

  return LCD_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3758      	adds	r7, #88	; 0x58
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200036a0 	.word	0x200036a0
 8002224:	40016c00 	.word	0x40016c00
 8002228:	43215e57 	.word	0x43215e57
 800222c:	2000004c 	.word	0x2000004c
 8002230:	20000050 	.word	0x20000050
 8002234:	2000354c 	.word	0x2000354c
 8002238:	200035f8 	.word	0x200035f8
 800223c:	200036d8 	.word	0x200036d8
 8002240:	40016800 	.word	0x40016800
 8002244:	20000044 	.word	0x20000044

08002248 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <BSP_LCD_Reset+0x64>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a15      	ldr	r2, [pc, #84]	; (80022ac <BSP_LCD_Reset+0x64>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <BSP_LCD_Reset+0x64>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	607b      	str	r3, [r7, #4]
#if defined(USE_STM32469I_DISCO_REVC)
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
#else
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	480c      	ldr	r0, [pc, #48]	; (80022b0 <BSP_LCD_Reset+0x68>)
 8002280:	f002 fb56 	bl	8004930 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <BSP_LCD_Reset+0x68>)
 800228a:	f002 fcfd 	bl	8004c88 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800228e:	2014      	movs	r0, #20
 8002290:	f000 fef6 	bl	8003080 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <BSP_LCD_Reset+0x68>)
 800229a:	f002 fcf5 	bl	8004c88 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 800229e:	2014      	movs	r0, #20
 80022a0:	f000 feee 	bl	8003080 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40021c00 	.word	0x40021c00

080022b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <BSP_LCD_GetXSize+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	2000004c 	.word	0x2000004c

080022cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <BSP_LCD_GetYSize+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000050 	.word	0x20000050

080022e4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b090      	sub	sp, #64	; 0x40
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80022f4:	f7ff ffde 	bl	80022b4 <BSP_LCD_GetXSize>
 80022f8:	4603      	mov	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002300:	f7ff ffe4 	bl	80022cc <BSP_LCD_GetYSize>
 8002304:	4603      	mov	r3, r0
 8002306:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002310:	23ff      	movs	r3, #255	; 0xff
 8002312:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800232a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002330:	2307      	movs	r3, #7
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002334:	f7ff ffbe 	bl	80022b4 <BSP_LCD_GetXSize>
 8002338:	4603      	mov	r3, r0
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800233c:	f7ff ffc6 	bl	80022cc <BSP_LCD_GetYSize>
 8002340:	4603      	mov	r3, r0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8002344:	88fa      	ldrh	r2, [r7, #6]
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4619      	mov	r1, r3
 800234c:	4812      	ldr	r0, [pc, #72]	; (8002398 <BSP_LCD_LayerDefaultInit+0xb4>)
 800234e:	f002 fda9 	bl	8004ea4 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	4911      	ldr	r1, [pc, #68]	; (800239c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3304      	adds	r3, #4
 8002362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002366:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	490c      	ldr	r1, [pc, #48]	; (800239c <BSP_LCD_LayerDefaultInit+0xb8>)
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3308      	adds	r3, #8
 8002378:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800237a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	4907      	ldr	r1, [pc, #28]	; (800239c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	3740      	adds	r7, #64	; 0x40
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200035f8 	.word	0x200035f8
 800239c:	200036c0 	.word	0x200036c0
 80023a0:	20000044 	.word	0x20000044

080023a4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <BSP_LCD_SelectLayer+0x1c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6013      	str	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200036bc 	.word	0x200036bc

080023c4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <BSP_LCD_SetTextColor+0x28>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4907      	ldr	r1, [pc, #28]	; (80023f0 <BSP_LCD_SetTextColor+0x2c>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	200036bc 	.word	0x200036bc
 80023f0:	200036c0 	.word	0x200036c0

080023f4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <BSP_LCD_SetBackColor+0x2c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4908      	ldr	r1, [pc, #32]	; (8002424 <BSP_LCD_SetBackColor+0x30>)
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200036bc 	.word	0x200036bc
 8002424:	200036c0 	.word	0x200036c0

08002428 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <BSP_LCD_SetFont+0x2c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4908      	ldr	r1, [pc, #32]	; (8002458 <BSP_LCD_SetFont+0x30>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3308      	adds	r3, #8
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	200036bc 	.word	0x200036bc
 8002458:	200036c0 	.word	0x200036c0

0800245c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <BSP_LCD_Clear+0x48>)
 8002466:	681c      	ldr	r4, [r3, #0]
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <BSP_LCD_Clear+0x48>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <BSP_LCD_Clear+0x4c>)
 800246e:	2134      	movs	r1, #52	; 0x34
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	335c      	adds	r3, #92	; 0x5c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461e      	mov	r6, r3
 800247c:	f7ff ff1a 	bl	80022b4 <BSP_LCD_GetXSize>
 8002480:	4605      	mov	r5, r0
 8002482:	f7ff ff23 	bl	80022cc <BSP_LCD_GetYSize>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	462a      	mov	r2, r5
 8002494:	4631      	mov	r1, r6
 8002496:	4620      	mov	r0, r4
 8002498:	f000 fb3e 	bl	8002b18 <LL_FillBuffer>
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	200036bc 	.word	0x200036bc
 80024a8:	200035f8 	.word	0x200035f8

080024ac <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
 80024b6:	460b      	mov	r3, r1
 80024b8:	80bb      	strh	r3, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <BSP_LCD_DisplayChar+0x80>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	491b      	ldr	r1, [pc, #108]	; (8002530 <BSP_LCD_DisplayChar+0x84>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3308      	adds	r3, #8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <BSP_LCD_DisplayChar+0x80>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4c14      	ldr	r4, [pc, #80]	; (8002530 <BSP_LCD_DisplayChar+0x84>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4423      	add	r3, r4
 80024ea:	3308      	adds	r3, #8
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024f0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <BSP_LCD_DisplayChar+0x80>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4c0d      	ldr	r4, [pc, #52]	; (8002530 <BSP_LCD_DisplayChar+0x84>)
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4423      	add	r3, r4
 8002504:	3308      	adds	r3, #8
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	889b      	ldrh	r3, [r3, #4]
 800250a:	3307      	adds	r3, #7
 800250c:	2b00      	cmp	r3, #0
 800250e:	da00      	bge.n	8002512 <BSP_LCD_DisplayChar+0x66>
 8002510:	3307      	adds	r3, #7
 8002512:	10db      	asrs	r3, r3, #3
 8002514:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002518:	18ca      	adds	r2, r1, r3
 800251a:	88b9      	ldrh	r1, [r7, #4]
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fa42 	bl	80029a8 <DrawChar>
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	200036bc 	.word	0x200036bc
 8002530:	200036c0 	.word	0x200036c0

08002534 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	60ba      	str	r2, [r7, #8]
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	81fb      	strh	r3, [r7, #14]
 8002542:	460b      	mov	r3, r1
 8002544:	81bb      	strh	r3, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800254a:	2301      	movs	r3, #1
 800254c:	83fb      	strh	r3, [r7, #30]
 800254e:	2300      	movs	r3, #0
 8002550:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800255e:	e002      	b.n	8002566 <BSP_LCD_DisplayStringAt+0x32>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	3301      	adds	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	617a      	str	r2, [r7, #20]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f6      	bne.n	8002560 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002572:	f7ff fe9f 	bl	80022b4 <BSP_LCD_GetXSize>
 8002576:	4601      	mov	r1, r0
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <BSP_LCD_DisplayStringAt+0x188>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4850      	ldr	r0, [pc, #320]	; (80026c0 <BSP_LCD_DisplayStringAt+0x18c>)
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4403      	add	r3, r0
 8002588:	3308      	adds	r3, #8
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	889b      	ldrh	r3, [r3, #4]
 800258e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002592:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d01c      	beq.n	80025d4 <BSP_LCD_DisplayStringAt+0xa0>
 800259a:	2b03      	cmp	r3, #3
 800259c:	dc33      	bgt.n	8002606 <BSP_LCD_DisplayStringAt+0xd2>
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d002      	beq.n	80025a8 <BSP_LCD_DisplayStringAt+0x74>
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d019      	beq.n	80025da <BSP_LCD_DisplayStringAt+0xa6>
 80025a6:	e02e      	b.n	8002606 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1ad1      	subs	r1, r2, r3
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <BSP_LCD_DisplayStringAt+0x188>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4843      	ldr	r0, [pc, #268]	; (80026c0 <BSP_LCD_DisplayStringAt+0x18c>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4403      	add	r3, r0
 80025be:	3308      	adds	r3, #8
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	889b      	ldrh	r3, [r3, #4]
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	4413      	add	r3, r2
 80025d0:	83fb      	strh	r3, [r7, #30]
      break;
 80025d2:	e01b      	b.n	800260c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	83fb      	strh	r3, [r7, #30]
      break;
 80025d8:	e018      	b.n	800260c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b299      	uxth	r1, r3
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <BSP_LCD_DisplayStringAt+0x188>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4836      	ldr	r0, [pc, #216]	; (80026c0 <BSP_LCD_DisplayStringAt+0x18c>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4403      	add	r3, r0
 80025f2:	3308      	adds	r3, #8
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	889b      	ldrh	r3, [r3, #4]
 80025f8:	fb11 f303 	smulbb	r3, r1, r3
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	83fb      	strh	r3, [r7, #30]
      break;
 8002604:	e002      	b.n	800260c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	83fb      	strh	r3, [r7, #30]
      break;
 800260a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800260c:	8bfb      	ldrh	r3, [r7, #30]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <BSP_LCD_DisplayStringAt+0xe6>
 8002612:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da1d      	bge.n	8002656 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 800261a:	2301      	movs	r3, #1
 800261c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800261e:	e01a      	b.n	8002656 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	89b9      	ldrh	r1, [r7, #12]
 8002626:	8bfb      	ldrh	r3, [r7, #30]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff3f 	bl	80024ac <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <BSP_LCD_DisplayStringAt+0x188>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4923      	ldr	r1, [pc, #140]	; (80026c0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3308      	adds	r3, #8
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	889a      	ldrh	r2, [r3, #4]
 8002644:	8bfb      	ldrh	r3, [r7, #30]
 8002646:	4413      	add	r3, r2
 8002648:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
    i++;
 8002650:	8bbb      	ldrh	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2dc      	uxtb	r4, r3
 8002664:	f7ff fe26 	bl	80022b4 <BSP_LCD_GetXSize>
 8002668:	8bb9      	ldrh	r1, [r7, #28]
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <BSP_LCD_DisplayStringAt+0x188>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4d14      	ldr	r5, [pc, #80]	; (80026c0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	442b      	add	r3, r5
 800267a:	3308      	adds	r3, #8
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	889b      	ldrh	r3, [r3, #4]
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	1ac3      	subs	r3, r0, r3
 8002686:	b299      	uxth	r1, r3
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <BSP_LCD_DisplayStringAt+0x188>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <BSP_LCD_DisplayStringAt+0x18c>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4403      	add	r3, r0
 8002698:	3308      	adds	r3, #8
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	4299      	cmp	r1, r3
 80026a0:	bf2c      	ite	cs
 80026a2:	2301      	movcs	r3, #1
 80026a4:	2300      	movcc	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4023      	ands	r3, r4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1b7      	bne.n	8002620 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200036bc 	.word	0x200036bc
 80026c0:	200036c0 	.word	0x200036c0

080026c4 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b08b      	sub	sp, #44	; 0x2c
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	330a      	adds	r3, #10
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	330b      	adds	r3, #11
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	441a      	add	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	330c      	adds	r3, #12
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	330d      	adds	r3, #13
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4413      	add	r3, r2
 800270a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3312      	adds	r3, #18
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3313      	adds	r3, #19
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	441a      	add	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3314      	adds	r3, #20
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	441a      	add	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3315      	adds	r3, #21
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	061b      	lsls	r3, r3, #24
 8002730:	4413      	add	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3316      	adds	r3, #22
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3317      	adds	r3, #23
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	441a      	add	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3318      	adds	r3, #24
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	441a      	add	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3319      	adds	r3, #25
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	061b      	lsls	r3, r3, #24
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	331c      	adds	r3, #28
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	331d      	adds	r3, #29
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	4413      	add	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <BSP_LCD_DrawBitmap+0x15c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <BSP_LCD_DrawBitmap+0x160>)
 8002776:	2134      	movs	r1, #52	; 0x34
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	335c      	adds	r3, #92	; 0x5c
 8002780:	681c      	ldr	r4, [r3, #0]
 8002782:	f7ff fd97 	bl	80022b4 <BSP_LCD_GetXSize>
 8002786:	4602      	mov	r2, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	fb03 f202 	mul.w	r2, r3, r2
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4423      	add	r3, r4
 8002796:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	3b20      	subs	r3, #32
 800279c:	2b07      	cmp	r3, #7
 800279e:	d802      	bhi.n	80027a6 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = CM_ARGB8888;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	e008      	b.n	80027b8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	3b10      	subs	r3, #16
 80027aa:	2b07      	cmp	r3, #7
 80027ac:	d802      	bhi.n	80027b4 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = CM_RGB565;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e001      	b.n	80027b8 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = CM_RGB888;
 80027b4:	2301      	movs	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	08d2      	lsrs	r2, r2, #3
 80027c6:	fb03 f202 	mul.w	r2, r3, r2
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	4413      	add	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	e018      	b.n	800280c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 80027da:	6a39      	ldr	r1, [r7, #32]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9d1 	bl	8002b88 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 80027e6:	f7ff fd65 	bl	80022b4 <BSP_LCD_GetXSize>
 80027ea:	4603      	mov	r3, r0
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	4413      	add	r3, r2
 80027f2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	425b      	negs	r3, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	429a      	cmp	r2, r3
 8002812:	d3e2      	bcc.n	80027da <BSP_LCD_DrawBitmap+0x116>
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	372c      	adds	r7, #44	; 0x2c
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	200036bc 	.word	0x200036bc
 8002824:	200035f8 	.word	0x200035f8

08002828 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af02      	add	r7, sp, #8
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d80d      	bhi.n	8002854 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	2215      	movs	r2, #21
 800284a:	2100      	movs	r1, #0
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <DSI_IO_WriteCmd+0x50>)
 800284e:	f001 ffb5 	bl	80047bc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8002852:	e00d      	b.n	8002870 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	9200      	str	r2, [sp, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2239      	movs	r2, #57	; 0x39
 8002868:	2100      	movs	r1, #0
 800286a:	4803      	ldr	r0, [pc, #12]	; (8002878 <DSI_IO_WriteCmd+0x50>)
 800286c:	f001 ffc8 	bl	8004800 <HAL_DSI_LongWrite>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200036a0 	.word	0x200036a0

0800287c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b34      	ldr	r3, [pc, #208]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 800288c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028a8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80028aa:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a20      	ldr	r2, [pc, #128]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028dc:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028e8:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a19      	ldr	r2, [pc, #100]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 800290c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002910:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <BSP_LCD_MspInit+0xdc>)
 8002918:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800291c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2103      	movs	r1, #3
 8002922:	2058      	movs	r0, #88	; 0x58
 8002924:	f000 fc88 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002928:	2058      	movs	r0, #88	; 0x58
 800292a:	f000 fca1 	bl	8003270 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2103      	movs	r1, #3
 8002932:	205a      	movs	r0, #90	; 0x5a
 8002934:	f000 fc80 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002938:	205a      	movs	r0, #90	; 0x5a
 800293a:	f000 fc99 	bl	8003270 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2103      	movs	r1, #3
 8002942:	205c      	movs	r0, #92	; 0x5c
 8002944:	f000 fc78 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002948:	205c      	movs	r0, #92	; 0x5c
 800294a:	f000 fc91 	bl	8003270 <HAL_NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	603a      	str	r2, [r7, #0]
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	460b      	mov	r3, r1
 800296a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <BSP_LCD_DrawPixel+0x44>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <BSP_LCD_DrawPixel+0x48>)
 8002972:	2134      	movs	r1, #52	; 0x34
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	88bd      	ldrh	r5, [r7, #4]
 8002980:	f7ff fc98 	bl	80022b4 <BSP_LCD_GetXSize>
 8002984:	4603      	mov	r3, r0
 8002986:	fb03 f205 	mul.w	r2, r3, r5
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4423      	add	r3, r4
 8002992:	461a      	mov	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bdb0      	pop	{r4, r5, r7, pc}
 80029a0:	200036bc 	.word	0x200036bc
 80029a4:	200035f8 	.word	0x200035f8

080029a8 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	603a      	str	r2, [r7, #0]
 80029b2:	80fb      	strh	r3, [r7, #6]
 80029b4:	460b      	mov	r3, r1
 80029b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <DrawChar+0x168>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4953      	ldr	r1, [pc, #332]	; (8002b14 <DrawChar+0x16c>)
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3308      	adds	r3, #8
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	88db      	ldrh	r3, [r3, #6]
 80029d6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <DrawChar+0x168>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <DrawChar+0x16c>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3308      	adds	r3, #8
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	889b      	ldrh	r3, [r3, #4]
 80029ee:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80029f0:	8a3b      	ldrh	r3, [r7, #16]
 80029f2:	3307      	adds	r3, #7
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da00      	bge.n	80029fa <DrawChar+0x52>
 80029f8:	3307      	adds	r3, #7
 80029fa:	10db      	asrs	r3, r3, #3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	8a3b      	ldrh	r3, [r7, #16]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e076      	b.n	8002afe <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002a10:	8a3b      	ldrh	r3, [r7, #16]
 8002a12:	3307      	adds	r3, #7
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da00      	bge.n	8002a1a <DrawChar+0x72>
 8002a18:	3307      	adds	r3, #7
 8002a1a:	10db      	asrs	r3, r3, #3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002a2a:	8a3b      	ldrh	r3, [r7, #16]
 8002a2c:	3307      	adds	r3, #7
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da00      	bge.n	8002a34 <DrawChar+0x8c>
 8002a32:	3307      	adds	r3, #7
 8002a34:	10db      	asrs	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d002      	beq.n	8002a40 <DrawChar+0x98>
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d004      	beq.n	8002a48 <DrawChar+0xa0>
 8002a3e:	e00c      	b.n	8002a5a <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	617b      	str	r3, [r7, #20]
      break;
 8002a46:	e016      	b.n	8002a76 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	3201      	adds	r2, #1
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
      break;
 8002a58:	e00d      	b.n	8002a76 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	041a      	lsls	r2, r3, #16
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	3202      	adds	r2, #2
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
      break;
 8002a74:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	e036      	b.n	8002aea <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002a7c:	8a3a      	ldrh	r2, [r7, #16]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad2      	subs	r2, r2, r3
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	4413      	add	r3, r2
 8002a86:	3b01      	subs	r3, #1
 8002a88:	2201      	movs	r2, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <DrawChar+0x168>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	491b      	ldr	r1, [pc, #108]	; (8002b14 <DrawChar+0x16c>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	88bb      	ldrh	r3, [r7, #4]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7ff ff50 	bl	800295c <BSP_LCD_DrawPixel>
 8002abc:	e012      	b.n	8002ae4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b298      	uxth	r0, r3
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <DrawChar+0x168>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4911      	ldr	r1, [pc, #68]	; (8002b14 <DrawChar+0x16c>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3304      	adds	r3, #4
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7ff ff3c 	bl	800295c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	8a3b      	ldrh	r3, [r7, #16]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3c4      	bcc.n	8002a7c <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002af2:	88bb      	ldrh	r3, [r7, #4]
 8002af4:	3301      	adds	r3, #1
 8002af6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	8a7b      	ldrh	r3, [r7, #18]
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d384      	bcc.n	8002a10 <DrawChar+0x68>
  }
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200036bc 	.word	0x200036bc
 8002b14:	200036c0 	.word	0x200036c0

08002b18 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b2c:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8002b34:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <LL_FillBuffer+0x6c>)
 8002b3e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8002b40:	480f      	ldr	r0, [pc, #60]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b42:	f000 ff0d 	bl	8003960 <HAL_DMA2D_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d115      	bne.n	8002b78 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	480c      	ldr	r0, [pc, #48]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b50:	f001 f86e 	bl	8003c30 <HAL_DMA2D_ConfigLayer>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10e      	bne.n	8002b78 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69f9      	ldr	r1, [r7, #28]
 8002b64:	4806      	ldr	r0, [pc, #24]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b66:	f000 ff4e 	bl	8003a06 <HAL_DMA2D_Start>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8002b70:	210a      	movs	r1, #10
 8002b72:	4803      	ldr	r0, [pc, #12]	; (8002b80 <LL_FillBuffer+0x68>)
 8002b74:	f000 ff72 	bl	8003a5c <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200035b8 	.word	0x200035b8
 8002b84:	4002b000 	.word	0x4002b000

08002b88 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_eval.Init.Mode         = DMA2D_M2M_PFC;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002b98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b9c:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = 0;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_eval.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d_eval.LayerCfg[1].InputColorMode = ColorMode;
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdma2d_eval.LayerCfg[1].InputOffset = 0;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28

  hdma2d_eval.Instance = DMA2D;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <LL_ConvertLineToARGB8888+0x84>)
 8002bc6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8002bc8:	480f      	ldr	r0, [pc, #60]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bca:	f000 fec9 	bl	8003960 <HAL_DMA2D_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d115      	bne.n	8002c00 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, 1) == HAL_OK)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bd8:	f001 f82a 	bl	8003c30 <HAL_DMA2D_ConfigLayer>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10e      	bne.n	8002c00 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	2301      	movs	r3, #1
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bee:	f000 ff0a 	bl	8003a06 <HAL_DMA2D_Start>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <LL_ConvertLineToARGB8888+0x80>)
 8002bfc:	f000 ff2e 	bl	8003a5c <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200035b8 	.word	0x200035b8
 8002c0c:	4002b000 	.word	0x4002b000

08002c10 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <BSP_SDRAM_Init+0xb0>)
 8002c18:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c22:	2207      	movs	r2, #7
 8002c24:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002c26:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c28:	2204      	movs	r2, #4
 8002c2a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c2e:	2207      	movs	r2, #7
 8002c30:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c34:	2202      	movs	r2, #2
 8002c36:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c40:	2202      	movs	r2, #2
 8002c42:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c52:	2204      	movs	r2, #4
 8002c54:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c58:	2220      	movs	r2, #32
 8002c5a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c64:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c68:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c76:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8002c86:	2100      	movs	r1, #0
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c8a:	f000 f87f 	bl	8002d8c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002c8e:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <BSP_SDRAM_Init+0xb4>)
 8002c90:	480a      	ldr	r0, [pc, #40]	; (8002cbc <BSP_SDRAM_Init+0xac>)
 8002c92:	f003 fd63 	bl	800675c <HAL_SDRAM_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <BSP_SDRAM_Init+0xb8>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e002      	b.n	8002caa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <BSP_SDRAM_Init+0xb8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002caa:	f240 5069 	movw	r0, #1385	; 0x569
 8002cae:	f000 f80d 	bl	8002ccc <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <BSP_SDRAM_Init+0xb8>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20003714 	.word	0x20003714
 8002cc0:	a0000140 	.word	0xa0000140
 8002cc4:	20003748 	.word	0x20003748
 8002cc8:	20000054 	.word	0x20000054

08002ccc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002cea:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf6:	4824      	ldr	r0, [pc, #144]	; (8002d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cf8:	f003 fd6e 	bl	80067d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f000 f9bf 	bl	8003080 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d04:	2202      	movs	r2, #2
 8002d06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1e:	4919      	ldr	r1, [pc, #100]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d20:	4819      	ldr	r0, [pc, #100]	; (8002d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d22:	f003 fd59 	bl	80067d8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d28:	2203      	movs	r2, #3
 8002d2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d2e:	2210      	movs	r2, #16
 8002d30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d34:	2208      	movs	r2, #8
 8002d36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d42:	4910      	ldr	r1, [pc, #64]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d44:	4810      	ldr	r0, [pc, #64]	; (8002d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d46:	f003 fd47 	bl	80067d8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002d4a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d4e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d52:	2204      	movs	r2, #4
 8002d54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d58:	2210      	movs	r2, #16
 8002d5a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d66:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d6c:	4905      	ldr	r1, [pc, #20]	; (8002d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6e:	4806      	ldr	r0, [pc, #24]	; (8002d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d70:	f003 fd32 	bl	80067d8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4804      	ldr	r0, [pc, #16]	; (8002d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d78:	f003 fd59 	bl	800682e <HAL_SDRAM_ProgramRefreshRate>
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20003764 	.word	0x20003764
 8002d88:	20003714 	.word	0x20003714

08002d8c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b090      	sub	sp, #64	; 0x40
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8104 	beq.w	8002fa6 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da2:	4b83      	ldr	r3, [pc, #524]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	4a82      	ldr	r2, [pc, #520]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6393      	str	r3, [r2, #56]	; 0x38
 8002dae:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a7b      	ldr	r2, [pc, #492]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a74      	ldr	r2, [pc, #464]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	623b      	str	r3, [r7, #32]
 8002df0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	4b6e      	ldr	r3, [pc, #440]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a66      	ldr	r2, [pc, #408]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e18:	f043 0310 	orr.w	r3, r3, #16
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a5f      	ldr	r2, [pc, #380]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e34:	f043 0320 	orr.w	r3, r3, #32
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a58      	ldr	r2, [pc, #352]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a51      	ldr	r2, [pc, #324]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a4a      	ldr	r2, [pc, #296]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <BSP_SDRAM_MspInit+0x224>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	483f      	ldr	r0, [pc, #252]	; (8002fb4 <BSP_SDRAM_MspInit+0x228>)
 8002eb6:	f001 fd3b 	bl	8004930 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002eba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	483c      	ldr	r0, [pc, #240]	; (8002fb8 <BSP_SDRAM_MspInit+0x22c>)
 8002ec8:	f001 fd32 	bl	8004930 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002ecc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4838      	ldr	r0, [pc, #224]	; (8002fbc <BSP_SDRAM_MspInit+0x230>)
 8002eda:	f001 fd29 	bl	8004930 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ede:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4835      	ldr	r0, [pc, #212]	; (8002fc0 <BSP_SDRAM_MspInit+0x234>)
 8002eec:	f001 fd20 	bl	8004930 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002ef0:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002efa:	4619      	mov	r1, r3
 8002efc:	4831      	ldr	r0, [pc, #196]	; (8002fc4 <BSP_SDRAM_MspInit+0x238>)
 8002efe:	f001 fd17 	bl	8004930 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002f02:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	482e      	ldr	r0, [pc, #184]	; (8002fc8 <BSP_SDRAM_MspInit+0x23c>)
 8002f10:	f001 fd0e 	bl	8004930 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002f14:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	482a      	ldr	r0, [pc, #168]	; (8002fcc <BSP_SDRAM_MspInit+0x240>)
 8002f22:	f001 fd05 	bl	8004930 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f38:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f40:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f48:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f50:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f5e:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f68:	2203      	movs	r2, #3
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <BSP_SDRAM_MspInit+0x248>)
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8002f8a:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f8c:	f000 fa2c 	bl	80033e8 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8002f90:	480f      	ldr	r0, [pc, #60]	; (8002fd0 <BSP_SDRAM_MspInit+0x244>)
 8002f92:	f000 f97b 	bl	800328c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2105      	movs	r1, #5
 8002f9a:	2038      	movs	r0, #56	; 0x38
 8002f9c:	f000 f94c 	bl	8003238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002fa0:	2038      	movs	r0, #56	; 0x38
 8002fa2:	f000 f965 	bl	8003270 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002fa6:	bf00      	nop
 8002fa8:	3740      	adds	r7, #64	; 0x40
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40021400 	.word	0x40021400
 8002fc4:	40021800 	.word	0x40021800
 8002fc8:	40021c00 	.word	0x40021c00
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	20003774 	.word	0x20003774
 8002fd4:	40026410 	.word	0x40026410

08002fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_Init+0x40>)
 8003006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_Init+0x40>)
 8003012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_Init+0x40>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003024:	2003      	movs	r0, #3
 8003026:	f000 f8fc 	bl	8003222 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302a:	200f      	movs	r0, #15
 800302c:	f7fe fadc 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003030:	f7fe fab2 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00

08003040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_IncTick+0x20>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_IncTick+0x24>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4413      	add	r3, r2
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_IncTick+0x24>)
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000060 	.word	0x20000060
 8003064:	200037d4 	.word	0x200037d4

08003068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return uwTick;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_GetTick+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	200037d4 	.word	0x200037d4

08003080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff ffee 	bl	8003068 <HAL_GetTick>
 800308c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d005      	beq.n	80030a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_Delay+0x44>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a6:	bf00      	nop
 80030a8:	f7ff ffde 	bl	8003068 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d8f7      	bhi.n	80030a8 <HAL_Delay+0x28>
  {
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000060 	.word	0x20000060

080030c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	60d3      	str	r3, [r2, #12]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_GetPriorityGrouping+0x18>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0307 	and.w	r3, r3, #7
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	2b00      	cmp	r3, #0
 800313c:	db0b      	blt.n	8003156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <__NVIC_EnableIRQ+0x38>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2001      	movs	r0, #1
 800314e:	fa00 f202 	lsl.w	r2, r0, r2
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	; (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff4c 	bl	80030c8 <__NVIC_SetPriorityGrouping>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800324a:	f7ff ff61 	bl	8003110 <__NVIC_GetPriorityGrouping>
 800324e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7ff ffb1 	bl	80031bc <NVIC_EncodePriority>
 800325a:	4602      	mov	r2, r0
 800325c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff80 	bl	8003168 <__NVIC_SetPriority>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff54 	bl	800312c <__NVIC_EnableIRQ>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff fee6 	bl	8003068 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e099      	b.n	80033dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c8:	e00f      	b.n	80032ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ca:	f7ff fecd 	bl	8003068 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d908      	bls.n	80032ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e078      	b.n	80033dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e8      	bne.n	80032ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_DMA_Init+0x158>)
 8003304:	4013      	ands	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b04      	cmp	r3, #4
 8003342:	d107      	bne.n	8003354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4313      	orrs	r3, r2
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b04      	cmp	r3, #4
 800337c:	d117      	bne.n	80033ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fa69 	bl	8003868 <DMA_CheckFifoParam>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033aa:	2301      	movs	r3, #1
 80033ac:	e016      	b.n	80033dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa20 	bl	80037fc <DMA_CalcBaseAndBitshift>
 80033bc:	4603      	mov	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	f010803f 	.word	0xf010803f

080033e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e050      	b.n	800349c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d101      	bne.n	800340a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	e048      	b.n	800349c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2221      	movs	r2, #33	; 0x21
 8003448:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9d6 	bl	80037fc <DMA_CalcBaseAndBitshift>
 8003450:	4603      	mov	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00c      	b.n	80034dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2205      	movs	r2, #5
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034f4:	4b8e      	ldr	r3, [pc, #568]	; (8003730 <HAL_DMA_IRQHandler+0x248>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a8e      	ldr	r2, [pc, #568]	; (8003734 <HAL_DMA_IRQHandler+0x24c>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0a9b      	lsrs	r3, r3, #10
 8003500:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	2208      	movs	r2, #8
 8003514:	409a      	lsls	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01a      	beq.n	8003554 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2208      	movs	r2, #8
 8003542:	409a      	lsls	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	2201      	movs	r2, #1
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2201      	movs	r2, #1
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f043 0202 	orr.w	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	2204      	movs	r2, #4
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2204      	movs	r2, #4
 80035ae:	409a      	lsls	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2210      	movs	r2, #16
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d043      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d03c      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	2210      	movs	r2, #16
 80035e4:	409a      	lsls	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d018      	beq.n	800362a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d024      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e01f      	b.n	8003658 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
 8003628:	e016      	b.n	8003658 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0208 	bic.w	r2, r2, #8
 8003646:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2220      	movs	r2, #32
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 808f 	beq.w	8003788 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8087 	beq.w	8003788 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	2220      	movs	r2, #32
 8003680:	409a      	lsls	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b05      	cmp	r3, #5
 8003690:	d136      	bne.n	8003700 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0216 	bic.w	r2, r2, #22
 80036a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x1da>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0208 	bic.w	r2, r2, #8
 80036d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	223f      	movs	r2, #63	; 0x3f
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d07e      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
        }
        return;
 80036fe:	e079      	b.n	80037f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01d      	beq.n	800374a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	2b00      	cmp	r3, #0
 8003722:	d031      	beq.n	8003788 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
 800372c:	e02c      	b.n	8003788 <HAL_DMA_IRQHandler+0x2a0>
 800372e:	bf00      	nop
 8003730:	20000058 	.word	0x20000058
 8003734:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d023      	beq.n	8003788 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
 8003748:	e01e      	b.n	8003788 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0210 	bic.w	r2, r2, #16
 8003766:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	2b00      	cmp	r3, #0
 800378e:	d032      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d022      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2205      	movs	r2, #5
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d307      	bcc.n	80037d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f2      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x2cc>
 80037ce:	e000      	b.n	80037d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e000      	b.n	80037f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037f4:	bf00      	nop
    }
  }
}
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	3b10      	subs	r3, #16
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <DMA_CalcBaseAndBitshift+0x64>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <DMA_CalcBaseAndBitshift+0x68>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d909      	bls.n	800383e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	659a      	str	r2, [r3, #88]	; 0x58
 800383c:	e007      	b.n	800384e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	aaaaaaab 	.word	0xaaaaaaab
 8003864:	0801cee4 	.word	0x0801cee4

08003868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d856      	bhi.n	8003936 <DMA_CheckFifoParam+0xce>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <DMA_CheckFifoParam+0x28>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b3 	.word	0x080038b3
 8003898:	080038a1 	.word	0x080038a1
 800389c:	08003937 	.word	0x08003937
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d046      	beq.n	800393a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e043      	b.n	800393a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ba:	d140      	bne.n	800393e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e03d      	b.n	800393e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ca:	d121      	bne.n	8003910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d837      	bhi.n	8003942 <DMA_CheckFifoParam+0xda>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <DMA_CheckFifoParam+0x70>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038ef 	.word	0x080038ef
 80038e0:	080038e9 	.word	0x080038e9
 80038e4:	08003901 	.word	0x08003901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e030      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d025      	beq.n	8003946 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e022      	b.n	8003946 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003908:	d11f      	bne.n	800394a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800390e:	e01c      	b.n	800394a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d903      	bls.n	800391e <DMA_CheckFifoParam+0xb6>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d003      	beq.n	8003924 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800391c:	e018      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      break;
 8003922:	e015      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e00b      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003936:	bf00      	nop
 8003938:	e00a      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 800393a:	bf00      	nop
 800393c:	e008      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
 8003940:	e006      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 8003942:	bf00      	nop
 8003944:	e004      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 8003946:	bf00      	nop
 8003948:	e002      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;   
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
    }
  } 
  
  return status; 
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop

08003960 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e03b      	b.n	80039ea <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f833 	bl	80039f2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	f023 0107 	bic.w	r1, r3, #7
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d1      	ldr	r1, [r2, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA2D_Start+0x1c>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e018      	b.n	8003a54 <HAL_DMA2D_Start+0x4e>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f989 	bl	8003d54 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d056      	beq.n	8003b26 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a78:	f7ff faf6 	bl	8003068 <HAL_GetTick>
 8003a7c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a7e:	e04b      	b.n	8003b18 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d023      	beq.n	8003ada <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	f043 0202 	orr.w	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0a5      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae0:	d01a      	beq.n	8003b18 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7ff fac1 	bl	8003068 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <HAL_DMA2D_PollForTransfer+0x9c>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e086      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ac      	beq.n	8003a80 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d061      	beq.n	8003c0c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b48:	f7ff fa8e 	bl	8003068 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b4e:	e056      	b.n	8003bfe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02e      	beq.n	8003bc0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2229      	movs	r2, #41	; 0x29
 8003baa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e032      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc6:	d01a      	beq.n	8003bfe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc8:	f7ff fa4e 	bl	8003068 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <HAL_DMA2D_PollForTransfer+0x182>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e013      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0a1      	beq.n	8003b50 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2212      	movs	r2, #18
 8003c12:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_DMA2D_ConfigLayer+0x20>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e079      	b.n	8003d44 <HAL_DMA2D_ConfigLayer+0x114>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3318      	adds	r3, #24
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c7c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b0a      	cmp	r3, #10
 8003c84:	d003      	beq.n	8003c8e <HAL_DMA2D_ConfigLayer+0x5e>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d107      	bne.n	8003c9e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e005      	b.n	8003caa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d120      	bne.n	8003cf2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	ea02 0103 	and.w	r1, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b0a      	cmp	r3, #10
 8003cd8:	d003      	beq.n	8003ce2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b09      	cmp	r3, #9
 8003ce0:	d127      	bne.n	8003d32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	e01f      	b.n	8003d32 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	ea02 0103 	and.w	r1, r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b0a      	cmp	r3, #10
 8003d1a:	d003      	beq.n	8003d24 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d106      	bne.n	8003d32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d30:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	ff03000f 	.word	0xff03000f

08003d54 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08b      	sub	sp, #44	; 0x2c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	041a      	lsls	r2, r3, #16
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d8c:	d174      	bne.n	8003e78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d94:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d9c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003da4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	e053      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d106      	bne.n	8003ddc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	e048      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d111      	bne.n	8003e08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	0cdb      	lsrs	r3, r3, #19
 8003de8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	0a9b      	lsrs	r3, r3, #10
 8003dee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	08db      	lsrs	r3, r3, #3
 8003df4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	02db      	lsls	r3, r3, #11
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e032      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d117      	bne.n	8003e40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	0fdb      	lsrs	r3, r3, #31
 8003e14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	0cdb      	lsrs	r3, r3, #19
 8003e1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	431a      	orrs	r2, r3
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	03db      	lsls	r3, r3, #15
 8003e36:	4313      	orrs	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e016      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	0f1b      	lsrs	r3, r3, #28
 8003e44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	0d1b      	lsrs	r3, r3, #20
 8003e4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	0b1b      	lsrs	r3, r3, #12
 8003e50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	431a      	orrs	r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	4313      	orrs	r3, r2
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e76:	e003      	b.n	8003e80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
}
 8003e80:	bf00      	nop
 8003e82:	372c      	adds	r7, #44	; 0x2c
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	019a      	lsls	r2, r3, #6
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ecc:	f7ff f8cc 	bl	8003068 <HAL_GetTick>
 8003ed0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ed2:	e009      	b.n	8003ee8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003ed4:	f7ff f8c8 	bl	8003068 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee2:	d901      	bls.n	8003ee8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e015      	b.n	8003f14 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ee      	beq.n	8003ed4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	019a      	lsls	r2, r3, #6
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	ea42 0103 	orr.w	r1, r2, r3
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e108      	b.n	8004142 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7c5b      	ldrb	r3, [r3, #17]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f97c 	bl	8004238 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f5a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f6e:	f7ff f87b 	bl	8003068 <HAL_GetTick>
 8003f72:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f74:	e009      	b.n	8003f8a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f76:	f7ff f877 	bl	8003068 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f84:	d901      	bls.n	8003f8a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0db      	b.n	8004142 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0ed      	beq.n	8003f76 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003faa:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003fae:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	02db      	lsls	r3, r3, #11
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004002:	f7ff f831 	bl	8003068 <HAL_GetTick>
 8004006:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004008:	e009      	b.n	800401e <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800400a:	f7ff f82d 	bl	8003068 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004018:	d901      	bls.n	800401e <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e091      	b.n	8004142 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0ed      	beq.n	800400a <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0206 	orr.w	r2, r2, #6
 800403e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0203 	bic.w	r2, r2, #3
 8004052:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0203 	bic.w	r2, r2, #3
 8004080:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040a8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6899      	ldr	r1, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_DSI_Init+0x1ae>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	e000      	b.n	80040cc <HAL_DSI_Init+0x1b0>
 80040ca:	2301      	movs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_DSI_Init+0x230>)
 80040d2:	fb03 f202 	mul.w	r2, r3, r2
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	409a      	lsls	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004102:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	430a      	orrs	r2, r1
 8004116:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2200      	movs	r2, #0
 800412a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	003d0900 	.word	0x003d0900

08004150 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e066      	b.n	8004230 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2203      	movs	r2, #3
 8004166:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0208 	bic.w	r2, r2, #8
 800417c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0206 	bic.w	r2, r2, #6
 80041c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004202:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800420e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f818 	bl	800424c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7c1b      	ldrb	r3, [r3, #16]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_DSI_ConfigVideoMode+0x16>
 8004272:	2302      	movs	r3, #2
 8004274:	e1f6      	b.n	8004664 <HAL_DSI_ConfigVideoMode+0x404>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0203 	bic.w	r2, r2, #3
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042d4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80042f6:	f023 031f 	bic.w	r3, r3, #31
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800431c:	f023 031f 	bic.w	r3, r3, #31
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0203 	bic.w	r2, r2, #3
 8004342:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68d9      	ldr	r1, [r3, #12]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0207 	bic.w	r2, r2, #7
 8004364:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6959      	ldr	r1, [r3, #20]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	431a      	orrs	r2, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 020f 	bic.w	r2, r2, #15
 8004392:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 020e 	bic.w	r2, r2, #14
 80043b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	005a      	lsls	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d110      	bne.n	80043fc <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6919      	ldr	r1, [r3, #16]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800440a:	f023 030f 	bic.w	r3, r3, #15
 800440e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004430:	f023 030f 	bic.w	r3, r3, #15
 8004434:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800445a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800447c:	f023 0303 	bic.w	r3, r3, #3
 8004480:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044c8:	f023 0303 	bic.w	r3, r3, #3
 80044cc:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80044ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044f2:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004536:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	041a      	lsls	r2, r3, #16
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800455a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6999      	ldr	r1, [r3, #24]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7c1b      	ldrb	r3, [r3, #16]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_DSI_ConfigPhyTimer+0x16>
 8004682:	2302      	movs	r3, #2
 8004684:	e058      	b.n	8004738 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4293      	cmp	r3, r2
 8004696:	bf38      	it	cc
 8004698:	4613      	movcc	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80046ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	041a      	lsls	r2, r3, #16
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80046da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004714:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	021a      	lsls	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7c1b      	ldrb	r3, [r3, #16]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_DSI_Start+0x14>
 8004754:	2302      	movs	r3, #2
 8004756:	e02b      	b.n	80047b0 <HAL_DSI_Start+0x6c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0208 	orr.w	r2, r2, #8
 8004794:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	7c1b      	ldrb	r3, [r3, #16]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_DSI_ShortWrite+0x1a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e010      	b.n	80047f8 <HAL_DSI_ShortWrite+0x3c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff fb69 	bl	8003ebe <DSI_ShortWrite>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	741a      	strb	r2, [r3, #16]

  return status;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08c      	sub	sp, #48	; 0x30
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004810:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	7c1b      	ldrb	r3, [r3, #16]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_DSI_LongWrite+0x1e>
 800481a:	2302      	movs	r3, #2
 800481c:	e084      	b.n	8004928 <HAL_DSI_LongWrite+0x128>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004824:	f7fe fc20 	bl	8003068 <HAL_GetTick>
 8004828:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800482a:	e00c      	b.n	8004846 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800482c:	f7fe fc1c 	bl	8003068 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483a:	d904      	bls.n	8004846 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e070      	b.n	8004928 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0eb      	beq.n	800482c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b03      	cmp	r3, #3
 800485c:	bf28      	it	cs
 800485e:	2303      	movcs	r3, #3
 8004860:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	e00f      	b.n	8004888 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	4413      	add	r3, r2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	3301      	adds	r3, #1
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	4313      	orrs	r3, r2
 8004880:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	3301      	adds	r3, #1
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	6a3a      	ldr	r2, [r7, #32]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d3eb      	bcc.n	8004868 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80048a8:	e028      	b.n	80048fc <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	bf28      	it	cs
 80048b0:	2304      	movcs	r3, #4
 80048b2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	e00e      	b.n	80048dc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	4413      	add	r3, r2
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	3301      	adds	r3, #1
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3ec      	bcc.n	80048be <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1d3      	bne.n	80048aa <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800490a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004912:	b2db      	uxtb	r3, r3
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	f7ff fab6 	bl	8003e8c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e177      	b.n	8004c3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800494c:	2201      	movs	r2, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8166 	bne.w	8004c36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	2b02      	cmp	r3, #2
 8004980:	d130      	bne.n	80049e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b8:	2201      	movs	r2, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0201 	and.w	r2, r3, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d017      	beq.n	8004a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d123      	bne.n	8004a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	08da      	lsrs	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3208      	adds	r2, #8
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	2203      	movs	r2, #3
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80c0 	beq.w	8004c36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <HAL_GPIO_Init+0x324>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_GPIO_Init+0x324>)
 8004ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac6:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_GPIO_Init+0x324>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad2:	4a61      	ldr	r2, [pc, #388]	; (8004c58 <HAL_GPIO_Init+0x328>)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a58      	ldr	r2, [pc, #352]	; (8004c5c <HAL_GPIO_Init+0x32c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d037      	beq.n	8004b6e <HAL_GPIO_Init+0x23e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a57      	ldr	r2, [pc, #348]	; (8004c60 <HAL_GPIO_Init+0x330>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d031      	beq.n	8004b6a <HAL_GPIO_Init+0x23a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a56      	ldr	r2, [pc, #344]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02b      	beq.n	8004b66 <HAL_GPIO_Init+0x236>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a55      	ldr	r2, [pc, #340]	; (8004c68 <HAL_GPIO_Init+0x338>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d025      	beq.n	8004b62 <HAL_GPIO_Init+0x232>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a54      	ldr	r2, [pc, #336]	; (8004c6c <HAL_GPIO_Init+0x33c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01f      	beq.n	8004b5e <HAL_GPIO_Init+0x22e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a53      	ldr	r2, [pc, #332]	; (8004c70 <HAL_GPIO_Init+0x340>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d019      	beq.n	8004b5a <HAL_GPIO_Init+0x22a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a52      	ldr	r2, [pc, #328]	; (8004c74 <HAL_GPIO_Init+0x344>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_GPIO_Init+0x226>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a51      	ldr	r2, [pc, #324]	; (8004c78 <HAL_GPIO_Init+0x348>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00d      	beq.n	8004b52 <HAL_GPIO_Init+0x222>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a50      	ldr	r2, [pc, #320]	; (8004c7c <HAL_GPIO_Init+0x34c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <HAL_GPIO_Init+0x21e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4f      	ldr	r2, [pc, #316]	; (8004c80 <HAL_GPIO_Init+0x350>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_GPIO_Init+0x21a>
 8004b46:	2309      	movs	r3, #9
 8004b48:	e012      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	e010      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	e00e      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e00c      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b56:	2306      	movs	r3, #6
 8004b58:	e00a      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b5a:	2305      	movs	r3, #5
 8004b5c:	e008      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	e006      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b62:	2303      	movs	r3, #3
 8004b64:	e004      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e002      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <HAL_GPIO_Init+0x240>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	f002 0203 	and.w	r2, r2, #3
 8004b76:	0092      	lsls	r2, r2, #2
 8004b78:	4093      	lsls	r3, r2
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b80:	4935      	ldr	r1, [pc, #212]	; (8004c58 <HAL_GPIO_Init+0x328>)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	3302      	adds	r3, #2
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b8e:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bb2:	4a34      	ldr	r2, [pc, #208]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c06:	4a1f      	ldr	r2, [pc, #124]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c30:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <HAL_GPIO_Init+0x354>)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	f67f ae84 	bls.w	800494c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40020000 	.word	0x40020000
 8004c60:	40020400 	.word	0x40020400
 8004c64:	40020800 	.word	0x40020800
 8004c68:	40020c00 	.word	0x40020c00
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40021400 	.word	0x40021400
 8004c74:	40021800 	.word	0x40021800
 8004c78:	40021c00 	.word	0x40021c00
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40022400 	.word	0x40022400
 8004c84:	40013c00 	.word	0x40013c00

08004c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
 8004c94:	4613      	mov	r3, r2
 8004c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c98:	787b      	ldrb	r3, [r7, #1]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ca4:	e003      	b.n	8004cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	041a      	lsls	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	619a      	str	r2, [r3, #24]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ccc:	887a      	ldrh	r2, [r7, #2]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	041a      	lsls	r2, r3, #16
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	43d9      	mvns	r1, r3
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	400b      	ands	r3, r1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	619a      	str	r2, [r3, #24]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0bf      	b.n	8004e82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8ba 	bl	8004e90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004d32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_LTDC_Init+0x19c>)
 8004d64:	400b      	ands	r3, r1
 8004d66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6899      	ldr	r1, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68d9      	ldr	r1, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <HAL_LTDC_Init+0x19c>)
 8004d92:	400b      	ands	r3, r1
 8004d94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68d9      	ldr	r1, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6919      	ldr	r1, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_LTDC_Init+0x19c>)
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6919      	ldr	r1, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6959      	ldr	r1, [r3, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <HAL_LTDC_Init+0x19c>)
 8004dee:	400b      	ands	r3, r1
 8004df0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6959      	ldr	r1, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0206 	orr.w	r2, r2, #6
 8004e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	f000f800 	.word	0xf000f800

08004e90 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ea4:	b5b0      	push	{r4, r5, r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_LTDC_ConfigLayer+0x1a>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e02c      	b.n	8004f18 <HAL_LTDC_ConfigLayer+0x74>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2134      	movs	r1, #52	; 0x34
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f811 	bl	8004f20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bdb0      	pop	{r4, r5, r7, pc}

08004f20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3c:	4413      	add	r3, r2
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	01db      	lsls	r3, r3, #7
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3384      	adds	r3, #132	; 0x84
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	4611      	mov	r1, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	01d2      	lsls	r2, r2, #7
 8004f5c:	440a      	add	r2, r1
 8004f5e:	3284      	adds	r2, #132	; 0x84
 8004f60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f76:	4413      	add	r3, r2
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	01db      	lsls	r3, r3, #7
 8004f84:	440b      	add	r3, r1
 8004f86:	3384      	adds	r3, #132	; 0x84
 8004f88:	4619      	mov	r1, r3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9e:	4413      	add	r3, r2
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	01db      	lsls	r3, r3, #7
 8004fae:	4413      	add	r3, r2
 8004fb0:	3384      	adds	r3, #132	; 0x84
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	01d2      	lsls	r2, r2, #7
 8004fbe:	440a      	add	r2, r1
 8004fc0:	3284      	adds	r2, #132	; 0x84
 8004fc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd6:	4413      	add	r3, r2
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	01db      	lsls	r3, r3, #7
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3384      	adds	r3, #132	; 0x84
 8004fe8:	4619      	mov	r1, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	01db      	lsls	r3, r3, #7
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3384      	adds	r3, #132	; 0x84
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	4611      	mov	r1, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	01d2      	lsls	r2, r2, #7
 800500a:	440a      	add	r2, r1
 800500c:	3284      	adds	r2, #132	; 0x84
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	01db      	lsls	r3, r3, #7
 800501e:	4413      	add	r3, r2
 8005020:	3384      	adds	r3, #132	; 0x84
 8005022:	461a      	mov	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	01db      	lsls	r3, r3, #7
 8005050:	4413      	add	r3, r2
 8005052:	3384      	adds	r3, #132	; 0x84
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	4413      	add	r3, r2
 8005062:	3384      	adds	r3, #132	; 0x84
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005070:	461a      	mov	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	431a      	orrs	r2, r3
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	01db      	lsls	r3, r3, #7
 8005084:	440b      	add	r3, r1
 8005086:	3384      	adds	r3, #132	; 0x84
 8005088:	4619      	mov	r1, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	01db      	lsls	r3, r3, #7
 800509a:	4413      	add	r3, r2
 800509c:	3384      	adds	r3, #132	; 0x84
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	4611      	mov	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	01d2      	lsls	r2, r2, #7
 80050aa:	440a      	add	r2, r1
 80050ac:	3284      	adds	r2, #132	; 0x84
 80050ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	01db      	lsls	r3, r3, #7
 80050be:	4413      	add	r3, r2
 80050c0:	3384      	adds	r3, #132	; 0x84
 80050c2:	461a      	mov	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	01db      	lsls	r3, r3, #7
 80050d4:	4413      	add	r3, r2
 80050d6:	3384      	adds	r3, #132	; 0x84
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	4611      	mov	r1, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	01d2      	lsls	r2, r2, #7
 80050e4:	440a      	add	r2, r1
 80050e6:	3284      	adds	r2, #132	; 0x84
 80050e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6809      	ldr	r1, [r1, #0]
 80050fe:	4608      	mov	r0, r1
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	01c9      	lsls	r1, r1, #7
 8005104:	4401      	add	r1, r0
 8005106:	3184      	adds	r1, #132	; 0x84
 8005108:	4313      	orrs	r3, r2
 800510a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	01db      	lsls	r3, r3, #7
 8005116:	4413      	add	r3, r2
 8005118:	3384      	adds	r3, #132	; 0x84
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	01db      	lsls	r3, r3, #7
 8005126:	4413      	add	r3, r2
 8005128:	3384      	adds	r3, #132	; 0x84
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	01db      	lsls	r3, r3, #7
 800513a:	4413      	add	r3, r2
 800513c:	3384      	adds	r3, #132	; 0x84
 800513e:	461a      	mov	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800514e:	2304      	movs	r3, #4
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e01b      	b.n	800518c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800515c:	2303      	movs	r3, #3
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e014      	b.n	800518c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d00b      	beq.n	8005182 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800516e:	2b02      	cmp	r3, #2
 8005170:	d007      	beq.n	8005182 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005176:	2b03      	cmp	r3, #3
 8005178:	d003      	beq.n	8005182 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800517e:	2b07      	cmp	r3, #7
 8005180:	d102      	bne.n	8005188 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005182:	2302      	movs	r3, #2
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e001      	b.n	800518c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005188:	2301      	movs	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	01db      	lsls	r3, r3, #7
 8005196:	4413      	add	r3, r2
 8005198:	3384      	adds	r3, #132	; 0x84
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4611      	mov	r1, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	01d2      	lsls	r2, r2, #7
 80051a6:	440a      	add	r2, r1
 80051a8:	3284      	adds	r2, #132	; 0x84
 80051aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	041a      	lsls	r2, r3, #16
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1acb      	subs	r3, r1, r3
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	3303      	adds	r3, #3
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6809      	ldr	r1, [r1, #0]
 80051d2:	4608      	mov	r0, r1
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	01c9      	lsls	r1, r1, #7
 80051d8:	4401      	add	r1, r0
 80051da:	3184      	adds	r1, #132	; 0x84
 80051dc:	4313      	orrs	r3, r2
 80051de:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	01db      	lsls	r3, r3, #7
 80051ea:	4413      	add	r3, r2
 80051ec:	3384      	adds	r3, #132	; 0x84
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	4611      	mov	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	01d2      	lsls	r2, r2, #7
 80051fa:	440a      	add	r2, r1
 80051fc:	3284      	adds	r2, #132	; 0x84
 80051fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	01db      	lsls	r3, r3, #7
 8005212:	4413      	add	r3, r2
 8005214:	3384      	adds	r3, #132	; 0x84
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	01db      	lsls	r3, r3, #7
 8005228:	4413      	add	r3, r2
 800522a:	3384      	adds	r3, #132	; 0x84
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	4611      	mov	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	01d2      	lsls	r2, r2, #7
 8005238:	440a      	add	r2, r1
 800523a:	3284      	adds	r2, #132	; 0x84
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8005260:	2200      	movs	r2, #0
 8005262:	e001      	b.n	8005268 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8005264:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8005274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005278:	e000      	b.n	800527c <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800527a:	2200      	movs	r2, #0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8005288:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800528c:	e000      	b.n	8005290 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800528e:	2200      	movs	r2, #0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	4413      	add	r3, r2
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	441a      	add	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	4413      	add	r3, r2
 80052be:	1e5a      	subs	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	441a      	add	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	441a      	add	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d8:	4413      	add	r3, r2
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_PWREx_EnableOverDrive+0x90>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_PWREx_EnableOverDrive+0x90>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005308:	6413      	str	r3, [r2, #64]	; 0x40
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <HAL_PWREx_EnableOverDrive+0x90>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005316:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_PWREx_EnableOverDrive+0x94>)
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800531c:	f7fd fea4 	bl	8003068 <HAL_GetTick>
 8005320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005322:	e009      	b.n	8005338 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005324:	f7fd fea0 	bl	8003068 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005332:	d901      	bls.n	8005338 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e01f      	b.n	8005378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005338:	4b13      	ldr	r3, [pc, #76]	; (8005388 <HAL_PWREx_EnableOverDrive+0x98>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005344:	d1ee      	bne.n	8005324 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005346:	4b11      	ldr	r3, [pc, #68]	; (800538c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800534c:	f7fd fe8c 	bl	8003068 <HAL_GetTick>
 8005350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005352:	e009      	b.n	8005368 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005354:	f7fd fe88 	bl	8003068 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005362:	d901      	bls.n	8005368 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e007      	b.n	8005378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005368:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_PWREx_EnableOverDrive+0x98>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005374:	d1ee      	bne.n	8005354 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	420e0040 	.word	0x420e0040
 8005388:	40007000 	.word	0x40007000
 800538c:	420e0044 	.word	0x420e0044

08005390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0cc      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b68      	ldr	r3, [pc, #416]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d90c      	bls.n	80053cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b65      	ldr	r3, [pc, #404]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ba:	4b63      	ldr	r3, [pc, #396]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0b8      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d020      	beq.n	800541a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053e4:	4b59      	ldr	r3, [pc, #356]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a58      	ldr	r2, [pc, #352]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053fc:	4b53      	ldr	r3, [pc, #332]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a52      	ldr	r2, [pc, #328]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005408:	4b50      	ldr	r3, [pc, #320]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	494d      	ldr	r1, [pc, #308]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d044      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d107      	bne.n	800543e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	4b47      	ldr	r3, [pc, #284]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d119      	bne.n	800546e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e07f      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d003      	beq.n	800544e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800544a:	2b03      	cmp	r3, #3
 800544c:	d107      	bne.n	800545e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544e:	4b3f      	ldr	r3, [pc, #252]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e06f      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545e:	4b3b      	ldr	r3, [pc, #236]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e067      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800546e:	4b37      	ldr	r3, [pc, #220]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f023 0203 	bic.w	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4934      	ldr	r1, [pc, #208]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005480:	f7fd fdf2 	bl	8003068 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	e00a      	b.n	800549e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005488:	f7fd fdee 	bl	8003068 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	; 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e04f      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	4b2b      	ldr	r3, [pc, #172]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 020c 	and.w	r2, r3, #12
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d1eb      	bne.n	8005488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b0:	4b25      	ldr	r3, [pc, #148]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d20c      	bcs.n	80054d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b22      	ldr	r3, [pc, #136]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e032      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4916      	ldr	r1, [pc, #88]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	490e      	ldr	r1, [pc, #56]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005516:	f000 f821 	bl	800555c <HAL_RCC_GetSysClockFreq>
 800551a:	4602      	mov	r2, r0
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	490a      	ldr	r1, [pc, #40]	; (8005550 <HAL_RCC_ClockConfig+0x1c0>)
 8005528:	5ccb      	ldrb	r3, [r1, r3]
 800552a:	fa22 f303 	lsr.w	r3, r2, r3
 800552e:	4a09      	ldr	r2, [pc, #36]	; (8005554 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <HAL_RCC_ClockConfig+0x1c8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f7fc f856 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40023c00 	.word	0x40023c00
 800554c:	40023800 	.word	0x40023800
 8005550:	0801cecc 	.word	0x0801cecc
 8005554:	20000058 	.word	0x20000058
 8005558:	2000005c 	.word	0x2000005c

0800555c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800555c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005560:	b094      	sub	sp, #80	; 0x50
 8005562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	647b      	str	r3, [r7, #68]	; 0x44
 8005568:	2300      	movs	r3, #0
 800556a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800556c:	2300      	movs	r3, #0
 800556e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005574:	4b79      	ldr	r3, [pc, #484]	; (800575c <HAL_RCC_GetSysClockFreq+0x200>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b08      	cmp	r3, #8
 800557e:	d00d      	beq.n	800559c <HAL_RCC_GetSysClockFreq+0x40>
 8005580:	2b08      	cmp	r3, #8
 8005582:	f200 80e1 	bhi.w	8005748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x34>
 800558a:	2b04      	cmp	r3, #4
 800558c:	d003      	beq.n	8005596 <HAL_RCC_GetSysClockFreq+0x3a>
 800558e:	e0db      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005590:	4b73      	ldr	r3, [pc, #460]	; (8005760 <HAL_RCC_GetSysClockFreq+0x204>)
 8005592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005594:	e0db      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005596:	4b73      	ldr	r3, [pc, #460]	; (8005764 <HAL_RCC_GetSysClockFreq+0x208>)
 8005598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800559a:	e0d8      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800559c:	4b6f      	ldr	r3, [pc, #444]	; (800575c <HAL_RCC_GetSysClockFreq+0x200>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055a6:	4b6d      	ldr	r3, [pc, #436]	; (800575c <HAL_RCC_GetSysClockFreq+0x200>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d063      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b2:	4b6a      	ldr	r3, [pc, #424]	; (800575c <HAL_RCC_GetSysClockFreq+0x200>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	099b      	lsrs	r3, r3, #6
 80055b8:	2200      	movs	r2, #0
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80055bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	633b      	str	r3, [r7, #48]	; 0x30
 80055c6:	2300      	movs	r3, #0
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055ce:	4622      	mov	r2, r4
 80055d0:	462b      	mov	r3, r5
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f04f 0100 	mov.w	r1, #0
 80055da:	0159      	lsls	r1, r3, #5
 80055dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e0:	0150      	lsls	r0, r2, #5
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4621      	mov	r1, r4
 80055e8:	1a51      	subs	r1, r2, r1
 80055ea:	6139      	str	r1, [r7, #16]
 80055ec:	4629      	mov	r1, r5
 80055ee:	eb63 0301 	sbc.w	r3, r3, r1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005600:	4659      	mov	r1, fp
 8005602:	018b      	lsls	r3, r1, #6
 8005604:	4651      	mov	r1, sl
 8005606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800560a:	4651      	mov	r1, sl
 800560c:	018a      	lsls	r2, r1, #6
 800560e:	4651      	mov	r1, sl
 8005610:	ebb2 0801 	subs.w	r8, r2, r1
 8005614:	4659      	mov	r1, fp
 8005616:	eb63 0901 	sbc.w	r9, r3, r1
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800562a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800562e:	4690      	mov	r8, r2
 8005630:	4699      	mov	r9, r3
 8005632:	4623      	mov	r3, r4
 8005634:	eb18 0303 	adds.w	r3, r8, r3
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	462b      	mov	r3, r5
 800563c:	eb49 0303 	adc.w	r3, r9, r3
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800564e:	4629      	mov	r1, r5
 8005650:	024b      	lsls	r3, r1, #9
 8005652:	4621      	mov	r1, r4
 8005654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005658:	4621      	mov	r1, r4
 800565a:	024a      	lsls	r2, r1, #9
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005662:	2200      	movs	r2, #0
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
 8005666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800566c:	f7fb fbc0 	bl	8000df0 <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4613      	mov	r3, r2
 8005676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005678:	e058      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567a:	4b38      	ldr	r3, [pc, #224]	; (800575c <HAL_RCC_GetSysClockFreq+0x200>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	099b      	lsrs	r3, r3, #6
 8005680:	2200      	movs	r2, #0
 8005682:	4618      	mov	r0, r3
 8005684:	4611      	mov	r1, r2
 8005686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800568a:	623b      	str	r3, [r7, #32]
 800568c:	2300      	movs	r3, #0
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
 8005690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	f04f 0000 	mov.w	r0, #0
 800569c:	f04f 0100 	mov.w	r1, #0
 80056a0:	0159      	lsls	r1, r3, #5
 80056a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056a6:	0150      	lsls	r0, r2, #5
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4641      	mov	r1, r8
 80056ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80056b2:	4649      	mov	r1, r9
 80056b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056cc:	ebb2 040a 	subs.w	r4, r2, sl
 80056d0:	eb63 050b 	sbc.w	r5, r3, fp
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	00eb      	lsls	r3, r5, #3
 80056de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056e2:	00e2      	lsls	r2, r4, #3
 80056e4:	4614      	mov	r4, r2
 80056e6:	461d      	mov	r5, r3
 80056e8:	4643      	mov	r3, r8
 80056ea:	18e3      	adds	r3, r4, r3
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	464b      	mov	r3, r9
 80056f0:	eb45 0303 	adc.w	r3, r5, r3
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005702:	4629      	mov	r1, r5
 8005704:	028b      	lsls	r3, r1, #10
 8005706:	4621      	mov	r1, r4
 8005708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800570c:	4621      	mov	r1, r4
 800570e:	028a      	lsls	r2, r1, #10
 8005710:	4610      	mov	r0, r2
 8005712:	4619      	mov	r1, r3
 8005714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005716:	2200      	movs	r2, #0
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	61fa      	str	r2, [r7, #28]
 800571c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005720:	f7fb fb66 	bl	8000df0 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4613      	mov	r3, r2
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCC_GetSysClockFreq+0x200>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	3301      	adds	r3, #1
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800573c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800573e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005746:	e002      	b.n	800574e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetSysClockFreq+0x204>)
 800574a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800574c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800574e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005750:	4618      	mov	r0, r3
 8005752:	3750      	adds	r7, #80	; 0x50
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	00f42400 	.word	0x00f42400
 8005764:	007a1200 	.word	0x007a1200

08005768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <HAL_RCC_GetHCLKFreq+0x14>)
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000058 	.word	0x20000058

08005780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005784:	f7ff fff0 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 8005788:	4602      	mov	r2, r0
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	0a9b      	lsrs	r3, r3, #10
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	4903      	ldr	r1, [pc, #12]	; (80057a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005796:	5ccb      	ldrb	r3, [r1, r3]
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40023800 	.word	0x40023800
 80057a4:	0801cedc 	.word	0x0801cedc

080057a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	220f      	movs	r2, #15
 80057b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057b8:	4b12      	ldr	r3, [pc, #72]	; (8005804 <HAL_RCC_GetClockConfig+0x5c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0203 	and.w	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <HAL_RCC_GetClockConfig+0x5c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <HAL_RCC_GetClockConfig+0x5c>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_RCC_GetClockConfig+0x5c>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <HAL_RCC_GetClockConfig+0x60>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800
 8005808:	40023c00 	.word	0x40023c00

0800580c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005834:	4b66      	ldr	r3, [pc, #408]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	4963      	ldr	r1, [pc, #396]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005856:	4b5e      	ldr	r3, [pc, #376]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	495a      	ldr	r1, [pc, #360]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800588c:	2b00      	cmp	r3, #0
 800588e:	d075      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005890:	4b50      	ldr	r3, [pc, #320]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005896:	f7fd fbe7 	bl	8003068 <HAL_GetTick>
 800589a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800589e:	f7fd fbe3 	bl	8003068 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e1dc      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b0:	4b47      	ldr	r3, [pc, #284]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	019a      	lsls	r2, r3, #6
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	071b      	lsls	r3, r3, #28
 80058d4:	493e      	ldr	r1, [pc, #248]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01f      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058e8:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80058ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ee:	0f1b      	lsrs	r3, r3, #28
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	019a      	lsls	r2, r3, #6
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	061b      	lsls	r3, r3, #24
 8005902:	431a      	orrs	r2, r3
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	071b      	lsls	r3, r3, #28
 8005908:	4931      	ldr	r1, [pc, #196]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005910:	4b2f      	ldr	r3, [pc, #188]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005916:	f023 021f 	bic.w	r2, r3, #31
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	3b01      	subs	r3, #1
 8005920:	492b      	ldr	r1, [pc, #172]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	019a      	lsls	r2, r3, #6
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	061b      	lsls	r3, r3, #24
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	071b      	lsls	r3, r3, #28
 8005948:	4921      	ldr	r1, [pc, #132]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005950:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005956:	f7fd fb87 	bl	8003068 <HAL_GetTick>
 800595a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800595e:	f7fd fb83 	bl	8003068 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e17c      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d112      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10c      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80ce 	beq.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80059a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059aa:	f040 80c8 	bne.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059b4:	f7fd fb58 	bl	8003068 <HAL_GetTick>
 80059b8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059ba:	e00f      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059bc:	f7fd fb54 	bl	8003068 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d908      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e14d      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	42470068 	.word	0x42470068
 80059d8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059dc:	4ba5      	ldr	r3, [pc, #660]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e8:	d0e8      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d02e      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80059f6:	4b9f      	ldr	r3, [pc, #636]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	3301      	adds	r3, #1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a08:	4b9a      	ldr	r3, [pc, #616]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	0f1b      	lsrs	r3, r3, #28
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	019a      	lsls	r2, r3, #6
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	3b01      	subs	r3, #1
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	071b      	lsls	r3, r3, #28
 8005a32:	4990      	ldr	r1, [pc, #576]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a3a:	4b8e      	ldr	r3, [pc, #568]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	4989      	ldr	r1, [pc, #548]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d02c      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005a60:	4b84      	ldr	r3, [pc, #528]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a72:	4b80      	ldr	r3, [pc, #512]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	0e1b      	lsrs	r3, r3, #24
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	019a      	lsls	r2, r3, #6
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	071b      	lsls	r3, r3, #28
 8005a9c:	4975      	ldr	r1, [pc, #468]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aa4:	4b73      	ldr	r3, [pc, #460]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	4970      	ldr	r1, [pc, #448]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d024      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ace:	d11f      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	0e1b      	lsrs	r3, r3, #24
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	0f1b      	lsrs	r3, r3, #28
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	019a      	lsls	r2, r3, #6
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	3b01      	subs	r3, #1
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	431a      	orrs	r2, r3
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	431a      	orrs	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	071b      	lsls	r3, r3, #28
 8005b08:	495a      	ldr	r1, [pc, #360]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b16:	f7fd faa7 	bl	8003068 <HAL_GetTick>
 8005b1a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b1e:	f7fd faa3 	bl	8003068 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e09c      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b30:	4b50      	ldr	r3, [pc, #320]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b3c:	d1ef      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8083 	beq.w	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60bb      	str	r3, [r7, #8]
 8005b50:	4b48      	ldr	r3, [pc, #288]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	4a47      	ldr	r2, [pc, #284]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8005b5c:	4b45      	ldr	r3, [pc, #276]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b68:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a43      	ldr	r2, [pc, #268]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b74:	f7fd fa78 	bl	8003068 <HAL_GetTick>
 8005b78:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b7c:	f7fd fa74 	bl	8003068 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e06d      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02f      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d028      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bb8:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bce:	4a29      	ldr	r2, [pc, #164]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bd4:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d114      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fd fa42 	bl	8003068 <HAL_GetTick>
 8005be4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be6:	e00a      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be8:	f7fd fa3e 	bl	8003068 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e035      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ee      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c16:	d10d      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	4911      	ldr	r1, [pc, #68]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]
 8005c32:	e005      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4a0e      	ldr	r2, [pc, #56]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c3e:	6093      	str	r3, [r2, #8]
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4c:	4909      	ldr	r1, [pc, #36]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8005c66:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800
 8005c78:	42470070 	.word	0x42470070
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42470e40 	.word	0x42470e40
 8005c84:	424711e0 	.word	0x424711e0

08005c88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e273      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d075      	beq.n	8005d92 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ca6:	4b88      	ldr	r3, [pc, #544]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d00c      	beq.n	8005ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cb2:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d112      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbe:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	4b7e      	ldr	r3, [pc, #504]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d05b      	beq.n	8005d90 <HAL_RCC_OscConfig+0x108>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d157      	bne.n	8005d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e24e      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cec:	d106      	bne.n	8005cfc <HAL_RCC_OscConfig+0x74>
 8005cee:	4b76      	ldr	r3, [pc, #472]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a75      	ldr	r2, [pc, #468]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x98>
 8005d06:	4b70      	ldr	r3, [pc, #448]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6f      	ldr	r2, [pc, #444]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b6d      	ldr	r3, [pc, #436]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6c      	ldr	r2, [pc, #432]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005d20:	4b69      	ldr	r3, [pc, #420]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a68      	ldr	r2, [pc, #416]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b66      	ldr	r3, [pc, #408]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fd f992 	bl	8003068 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fd f98e 	bl	8003068 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e213      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b5b      	ldr	r3, [pc, #364]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xc0>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fd f97e 	bl	8003068 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fd f97a 	bl	8003068 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e1ff      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d82:	4b51      	ldr	r3, [pc, #324]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0xe8>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005daa:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d11c      	bne.n	8005df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db6:	4b44      	ldr	r3, [pc, #272]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_RCC_OscConfig+0x152>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e1d3      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4937      	ldr	r1, [pc, #220]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	e03a      	b.n	8005e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df8:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <HAL_RCC_OscConfig+0x244>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fd f933 	bl	8003068 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e06:	f7fd f92f 	bl	8003068 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1b4      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e18:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e24:	4b28      	ldr	r3, [pc, #160]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4925      	ldr	r1, [pc, #148]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]
 8005e38:	e015      	b.n	8005e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCC_OscConfig+0x244>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fd f912 	bl	8003068 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e48:	f7fd f90e 	bl	8003068 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e193      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d036      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <HAL_RCC_OscConfig+0x248>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e80:	f7fd f8f2 	bl	8003068 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e88:	f7fd f8ee 	bl	8003068 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e173      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0x200>
 8005ea6:	e01b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <HAL_RCC_OscConfig+0x248>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fd f8db 	bl	8003068 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb4:	e00e      	b.n	8005ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb6:	f7fd f8d7 	bl	8003068 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d907      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e15c      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	42470000 	.word	0x42470000
 8005ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed4:	4b8a      	ldr	r3, [pc, #552]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ea      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8097 	beq.w	800601c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef2:	4b83      	ldr	r3, [pc, #524]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10f      	bne.n	8005f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	4b7f      	ldr	r3, [pc, #508]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	4a7e      	ldr	r2, [pc, #504]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0e:	4b7c      	ldr	r3, [pc, #496]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1e:	4b79      	ldr	r3, [pc, #484]	; (8006104 <HAL_RCC_OscConfig+0x47c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d118      	bne.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f2a:	4b76      	ldr	r3, [pc, #472]	; (8006104 <HAL_RCC_OscConfig+0x47c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a75      	ldr	r2, [pc, #468]	; (8006104 <HAL_RCC_OscConfig+0x47c>)
 8005f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f36:	f7fd f897 	bl	8003068 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3e:	f7fd f893 	bl	8003068 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e118      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f50:	4b6c      	ldr	r3, [pc, #432]	; (8006104 <HAL_RCC_OscConfig+0x47c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f0      	beq.n	8005f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x2ea>
 8005f64:	4b66      	ldr	r3, [pc, #408]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a65      	ldr	r2, [pc, #404]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f70:	e01c      	b.n	8005fac <HAL_RCC_OscConfig+0x324>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x30c>
 8005f7a:	4b61      	ldr	r3, [pc, #388]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a60      	ldr	r2, [pc, #384]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f80:	f043 0304 	orr.w	r3, r3, #4
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
 8005f86:	4b5e      	ldr	r3, [pc, #376]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	4a5d      	ldr	r2, [pc, #372]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	6713      	str	r3, [r2, #112]	; 0x70
 8005f92:	e00b      	b.n	8005fac <HAL_RCC_OscConfig+0x324>
 8005f94:	4b5a      	ldr	r3, [pc, #360]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	4a59      	ldr	r2, [pc, #356]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa0:	4b57      	ldr	r3, [pc, #348]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	4a56      	ldr	r2, [pc, #344]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb4:	f7fd f858 	bl	8003068 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fbc:	f7fd f854 	bl	8003068 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0d7      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd2:	4b4b      	ldr	r3, [pc, #300]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0ee      	beq.n	8005fbc <HAL_RCC_OscConfig+0x334>
 8005fde:	e014      	b.n	800600a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fd f842 	bl	8003068 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fd f83e 	bl	8003068 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e0c1      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffe:	4b40      	ldr	r3, [pc, #256]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ee      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d105      	bne.n	800601c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006010:	4b3b      	ldr	r3, [pc, #236]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80ad 	beq.w	8006180 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b08      	cmp	r3, #8
 8006030:	d060      	beq.n	80060f4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d145      	bne.n	80060c6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	4b33      	ldr	r3, [pc, #204]	; (8006108 <HAL_RCC_OscConfig+0x480>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fd f812 	bl	8003068 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fd f80e 	bl	8003068 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e093      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	4b29      	ldr	r3, [pc, #164]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69da      	ldr	r2, [r3, #28]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	3b01      	subs	r3, #1
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	071b      	lsls	r3, r3, #28
 8006092:	491b      	ldr	r1, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006098:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <HAL_RCC_OscConfig+0x480>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7fc ffe3 	bl	8003068 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fc ffdf 	bl	8003068 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e064      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x41e>
 80060c4:	e05c      	b.n	8006180 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <HAL_RCC_OscConfig+0x480>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fc ffcc 	bl	8003068 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fc ffc8 	bl	8003068 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e04d      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCC_OscConfig+0x478>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x44c>
 80060f2:	e045      	b.n	8006180 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e040      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
 8006100:	40023800 	.word	0x40023800
 8006104:	40007000 	.word	0x40007000
 8006108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610c:	4b1f      	ldr	r3, [pc, #124]	; (800618c <HAL_RCC_OscConfig+0x504>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d030      	beq.n	800617c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d129      	bne.n	800617c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d122      	bne.n	800617c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006144:	4293      	cmp	r3, r2
 8006146:	d119      	bne.n	800617c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	3b01      	subs	r3, #1
 8006156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d10f      	bne.n	800617c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006168:	429a      	cmp	r2, r3
 800616a:	d107      	bne.n	800617c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006178:	429a      	cmp	r2, r3
 800617a:	d001      	beq.n	8006180 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800

08006190 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_SD_IRQHandler+0x2e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa2a 	bl	8006610 <SD_Read_IT>
 80061bc:	e155      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 808f 	beq.w	80062ec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80061e6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80061ea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d039      	beq.n	800627a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_SD_IRQHandler+0x8a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 ff7c 	bl	800711c <SDMMC_CmdStopTransfer>
 8006224:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f91f 	bl	800647c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f240 523a 	movw	r2, #1338	; 0x53a
 8006246:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <HAL_SD_IRQHandler+0xda>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fb fba2 	bl	80019b4 <HAL_SD_RxCpltCallback>
 8006270:	e0fb      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fb fb90 	bl	8001998 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006278:	e0f7      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80f2 	beq.w	800646a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d011      	beq.n	80062b4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 ff41 	bl	800711c <SDMMC_CmdStopTransfer>
 800629a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8e4 	bl	800647c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 80d5 	bne.w	800646a <HAL_SD_IRQHandler+0x2da>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 80cf 	bne.w	800646a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0208 	bic.w	r2, r2, #8
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fb fb57 	bl	8001998 <HAL_SD_TxCpltCallback>
}
 80062ea:	e0be      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <HAL_SD_IRQHandler+0x17c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f9d4 	bl	80066b2 <SD_Write_IT>
 800630a:	e0ae      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80a7 	beq.w	800646a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	f043 0202 	orr.w	r2, r3, #2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	f043 0208 	orr.w	r2, r3, #8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f043 0210 	orr.w	r2, r3, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f240 523a 	movw	r2, #1338	; 0x53a
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800639c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 feba 	bl	800711c <SDMMC_CmdStopTransfer>
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f855 	bl	800647c <HAL_SD_ErrorCallback>
}
 80063d2:	e04a      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d045      	beq.n	800646a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <HAL_SD_IRQHandler+0x262>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d011      	beq.n	8006416 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <HAL_SD_IRQHandler+0x2e4>)
 80063f8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fd f850 	bl	80034a4 <HAL_DMA_Abort_IT>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d02f      	beq.n	800646a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f868 	bl	80064e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006414:	e029      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <HAL_SD_IRQHandler+0x29a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d011      	beq.n	800644e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <HAL_SD_IRQHandler+0x2e8>)
 8006430:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd f834 	bl	80034a4 <HAL_DMA_Abort_IT>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d013      	beq.n	800646a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f883 	bl	8006552 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800644c:	e00d      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f814 	bl	8006490 <HAL_SD_AbortCallback>
}
 8006468:	e7ff      	b.n	800646a <HAL_SD_IRQHandler+0x2da>
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	080064e5 	.word	0x080064e5
 8006478:	08006553 	.word	0x08006553

0800647c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f882 	bl	80065c0 <SD_SendStatus>
 80064bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	0a5b      	lsrs	r3, r3, #9
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064da:	693b      	ldr	r3, [r7, #16]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff ffd1 	bl	80064a4 <HAL_SD_GetCardState>
 8006502:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b06      	cmp	r3, #6
 8006516:	d002      	beq.n	800651e <SD_DMATxAbort+0x3a>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d10a      	bne.n	8006534 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fdfa 	bl	800711c <SDMMC_CmdStopTransfer>
 8006528:	4602      	mov	r2, r0
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	431a      	orrs	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff ffa7 	bl	8006490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006542:	e002      	b.n	800654a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff ff99 	bl	800647c <HAL_SD_ErrorCallback>
}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f240 523a 	movw	r2, #1338	; 0x53a
 8006568:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff ff9a 	bl	80064a4 <HAL_SD_GetCardState>
 8006570:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d002      	beq.n	800658c <SD_DMARxAbort+0x3a>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b05      	cmp	r3, #5
 800658a:	d10a      	bne.n	80065a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fdc3 	bl	800711c <SDMMC_CmdStopTransfer>
 8006596:	4602      	mov	r2, r0
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff ff70 	bl	8006490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80065b0:	e002      	b.n	80065b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff ff62 	bl	800647c <HAL_SD_ErrorCallback>
}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80065d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065d4:	e018      	b.n	8006608 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f000 fdbc 	bl	8007160 <SDMMC_CmdSendStatus>
 80065e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	e009      	b.n	8006608 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fd7a 	bl	80070f4 <SDIO_GetResponse>
 8006600:	4602      	mov	r2, r0
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d03f      	beq.n	80066aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e033      	b.n	8006698 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fd08 	bl	800704a <SDIO_ReadFIFO>
 800663a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3b01      	subs	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	0a1b      	lsrs	r3, r3, #8
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	701a      	strb	r2, [r3, #0]
      tmp++;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3b01      	subs	r3, #1
 8006664:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	b2da      	uxtb	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3b01      	subs	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	0e1b      	lsrs	r3, r3, #24
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3b01      	subs	r3, #1
 8006690:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3301      	adds	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b07      	cmp	r3, #7
 800669c:	d9c8      	bls.n	8006630 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80066aa:	bf00      	nop
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d043      	beq.n	8006754 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e037      	b.n	8006742 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	021a      	lsls	r2, r3, #8
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	041a      	lsls	r2, r3, #16
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4313      	orrs	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3b01      	subs	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	061a      	lsls	r2, r3, #24
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4313      	orrs	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3b01      	subs	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f107 0208 	add.w	r2, r7, #8
 8006734:	4611      	mov	r1, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fc94 	bl	8007064 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	3301      	adds	r3, #1
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b07      	cmp	r3, #7
 8006746:	d9c4      	bls.n	80066d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e025      	b.n	80067bc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f81d 	bl	80067c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f000 fb13 	bl	8006dc8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	f000 fb7e 	bl	8006eae <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d101      	bne.n	80067f4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
 80067f2:	e018      	b.n	8006826 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fbd1 	bl	8006fac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d104      	bne.n	800681c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2205      	movs	r2, #5
 8006816:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800681a:	e003      	b.n	8006824 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d101      	bne.n	8006848 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
 8006846:	e00e      	b.n	8006866 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fbe4 	bl	8007024 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e041      	b.n	8006904 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f839 	bl	800690c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 f9d7 	bl	8006c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d001      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e04e      	b.n	80069d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a23      	ldr	r2, [pc, #140]	; (80069e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d022      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d01d      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d018      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d013      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00e      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_TIM_Base_Start_IT+0x80>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a18      	ldr	r2, [pc, #96]	; (80069fc <HAL_TIM_Base_Start_IT+0xdc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d111      	bne.n	80069c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d010      	beq.n	80069d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c2:	e007      	b.n	80069d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40010400 	.word	0x40010400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40001800 	.word	0x40001800

08006a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d122      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d11b      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0202 	mvn.w	r2, #2
 8006a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f8ee 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8e0 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8f1 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d122      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d11b      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0204 	mvn.w	r2, #4
 8006a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f8c4 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 8006a9c:	e005      	b.n	8006aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8b6 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8c7 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d122      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d11b      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0208 	mvn.w	r2, #8
 8006ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2204      	movs	r2, #4
 8006ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f89a 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 8006af0:	e005      	b.n	8006afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f88c 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f89d 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d122      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d11b      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0210 	mvn.w	r2, #16
 8006b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f870 	bl	8006c24 <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f862 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f873 	bl	8006c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10e      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d107      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0201 	mvn.w	r2, #1
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fa fcec 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d10e      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d107      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f902 	bl	8006db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d10e      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d107      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f838 	bl	8006c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d10e      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d107      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0220 	mvn.w	r2, #32
 8006c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f8cc 	bl	8006da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a40      	ldr	r2, [pc, #256]	; (8006d74 <TIM_Base_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d013      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d00f      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a3d      	ldr	r2, [pc, #244]	; (8006d78 <TIM_Base_SetConfig+0x118>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00b      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3c      	ldr	r2, [pc, #240]	; (8006d7c <TIM_Base_SetConfig+0x11c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d007      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3b      	ldr	r2, [pc, #236]	; (8006d80 <TIM_Base_SetConfig+0x120>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3a      	ldr	r2, [pc, #232]	; (8006d84 <TIM_Base_SetConfig+0x124>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d108      	bne.n	8006cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2f      	ldr	r2, [pc, #188]	; (8006d74 <TIM_Base_SetConfig+0x114>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d02b      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc0:	d027      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2c      	ldr	r2, [pc, #176]	; (8006d78 <TIM_Base_SetConfig+0x118>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d023      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <TIM_Base_SetConfig+0x11c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01f      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2a      	ldr	r2, [pc, #168]	; (8006d80 <TIM_Base_SetConfig+0x120>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01b      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a29      	ldr	r2, [pc, #164]	; (8006d84 <TIM_Base_SetConfig+0x124>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d017      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a28      	ldr	r2, [pc, #160]	; (8006d88 <TIM_Base_SetConfig+0x128>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <TIM_Base_SetConfig+0x12c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <TIM_Base_SetConfig+0x130>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <TIM_Base_SetConfig+0x134>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <TIM_Base_SetConfig+0x138>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a23      	ldr	r2, [pc, #140]	; (8006d9c <TIM_Base_SetConfig+0x13c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <TIM_Base_SetConfig+0x114>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_Base_SetConfig+0xf8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a0c      	ldr	r2, [pc, #48]	; (8006d84 <TIM_Base_SetConfig+0x124>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d103      	bne.n	8006d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	615a      	str	r2, [r3, #20]
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40010000 	.word	0x40010000
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800
 8006d80:	40000c00 	.word	0x40000c00
 8006d84:	40010400 	.word	0x40010400
 8006d88:	40014000 	.word	0x40014000
 8006d8c:	40014400 	.word	0x40014400
 8006d90:	40014800 	.word	0x40014800
 8006d94:	40001800 	.word	0x40001800
 8006d98:	40001c00 	.word	0x40001c00
 8006d9c:	40002000 	.word	0x40002000

08006da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d029      	beq.n	8006e36 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006dee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006df2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006dfc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006e02:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006e08:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006e0e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006e14:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006e1a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006e20:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006e26:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e034      	b.n	8006ea0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e42:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006e4c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006e52:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e6a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e74:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006e7a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006e80:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006e86:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006e8c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d02e      	beq.n	8006f26 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ed4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006ee4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006eee:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006ef8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006f02:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006f0c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006f16:	4313      	orrs	r3, r2
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	609a      	str	r2, [r3, #8]
 8006f24:	e03b      	b.n	8006f9e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f36:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f5c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006f6c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006f76:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006f80:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006fc8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006fd2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006fe4:	f7fc f840 	bl	8003068 <HAL_GetTick>
 8006fe8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006fea:	e010      	b.n	800700e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff2:	d00c      	beq.n	800700e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <FMC_SDRAM_SendCommand+0x5e>
 8006ffa:	f7fc f835 	bl	8003068 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d201      	bcs.n	800700e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e006      	b.n	800701c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b20      	cmp	r3, #32
 8007018:	d0e8      	beq.n	8006fec <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80070a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80070aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80070b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80070c0:	f023 030f 	bic.w	r3, r3, #15
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	b2db      	uxtb	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3314      	adds	r3, #20
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4413      	add	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
}  
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007128:	230c      	movs	r3, #12
 800712a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800713a:	f107 0308 	add.w	r3, r7, #8
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ffa0 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <SDMMC_CmdStopTransfer+0x40>)
 8007148:	210c      	movs	r1, #12
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f82a 	bl	80071a4 <SDMMC_GetCmdResp1>
 8007150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007152:	69fb      	ldr	r3, [r7, #28]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3720      	adds	r7, #32
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	05f5e100 	.word	0x05f5e100

08007160 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800716e:	230d      	movs	r3, #13
 8007170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800717a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff ff7d 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800718c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007190:	210d      	movs	r1, #13
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f806 	bl	80071a4 <SDMMC_GetCmdResp1>
 8007198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800719a:	69fb      	ldr	r3, [r7, #28]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	460b      	mov	r3, r1
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071b2:	4b70      	ldr	r3, [pc, #448]	; (8007374 <SDMMC_GetCmdResp1+0x1d0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a70      	ldr	r2, [pc, #448]	; (8007378 <SDMMC_GetCmdResp1+0x1d4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	0a5a      	lsrs	r2, r3, #9
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	1e5a      	subs	r2, r3, #1
 80071ca:	61fa      	str	r2, [r7, #28]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071d4:	e0c9      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0ef      	beq.n	80071c6 <SDMMC_GetCmdResp1+0x22>
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1ea      	bne.n	80071c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2204      	movs	r2, #4
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007202:	2304      	movs	r3, #4
 8007204:	e0b1      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007218:	2301      	movs	r3, #1
 800721a:	e0a6      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	22c5      	movs	r2, #197	; 0xc5
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff ff59 	bl	80070da <SDIO_GetCommandResponse>
 8007228:	4603      	mov	r3, r0
 800722a:	461a      	mov	r2, r3
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	4293      	cmp	r3, r2
 8007230:	d001      	beq.n	8007236 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007232:	2301      	movs	r3, #1
 8007234:	e099      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007236:	2100      	movs	r1, #0
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ff5b 	bl	80070f4 <SDIO_GetResponse>
 800723e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4b4e      	ldr	r3, [pc, #312]	; (800737c <SDMMC_GetCmdResp1+0x1d8>)
 8007244:	4013      	ands	r3, r2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
 800724c:	e08d      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	da02      	bge.n	800725a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007258:	e087      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007264:	2340      	movs	r3, #64	; 0x40
 8007266:	e080      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	e079      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007284:	e071      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007294:	e069      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80072a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a4:	e061      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80072b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072b4:	e059      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80072c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072c4:	e051      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80072d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072d4:	e049      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80072e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072e4:	e041      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80072f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f4:	e039      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007304:	e031      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007310:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007314:	e029      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007320:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007324:	e021      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007334:	e019      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007340:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007344:	e011      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007354:	e009      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007360:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007364:	e001      	b.n	800736a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000058 	.word	0x20000058
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	fdffe008 	.word	0xfdffe008

08007380 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8007386:	4b27      	ldr	r3, [pc, #156]	; (8007424 <_fx_system_initialize+0xa4>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800738c:	4b26      	ldr	r3, [pc, #152]	; (8007428 <_fx_system_initialize+0xa8>)
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 8007392:	4b26      	ldr	r3, [pc, #152]	; (800742c <_fx_system_initialize+0xac>)
 8007394:	f644 2221 	movw	r2, #18977	; 0x4a21
 8007398:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800739a:	4b25      	ldr	r3, [pc, #148]	; (8007430 <_fx_system_initialize+0xb0>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 80073a0:	4b24      	ldr	r3, [pc, #144]	; (8007434 <_fx_system_initialize+0xb4>)
 80073a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a6:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 80073a8:	4b23      	ldr	r3, [pc, #140]	; (8007438 <_fx_system_initialize+0xb8>)
 80073aa:	2210      	movs	r2, #16
 80073ac:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 80073ae:	2301      	movs	r3, #1
 80073b0:	9302      	str	r3, [sp, #8]
 80073b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4b1f      	ldr	r3, [pc, #124]	; (800743c <_fx_system_initialize+0xbc>)
 80073c0:	4a1f      	ldr	r2, [pc, #124]	; (8007440 <_fx_system_initialize+0xc0>)
 80073c2:	4920      	ldr	r1, [pc, #128]	; (8007444 <_fx_system_initialize+0xc4>)
 80073c4:	4820      	ldr	r0, [pc, #128]	; (8007448 <_fx_system_initialize+0xc8>)
 80073c6:	f00b f8cd 	bl	8012564 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 80073ca:	4b20      	ldr	r3, [pc, #128]	; (800744c <_fx_system_initialize+0xcc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <_fx_system_initialize+0xcc>)
 80073d4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <_fx_system_initialize+0xcc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073de:	4a1b      	ldr	r2, [pc, #108]	; (800744c <_fx_system_initialize+0xcc>)
 80073e0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 80073e2:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <_fx_system_initialize+0xd0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ea:	4a19      	ldr	r2, [pc, #100]	; (8007450 <_fx_system_initialize+0xd0>)
 80073ec:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 80073ee:	4b18      	ldr	r3, [pc, #96]	; (8007450 <_fx_system_initialize+0xd0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	4a16      	ldr	r2, [pc, #88]	; (8007450 <_fx_system_initialize+0xd0>)
 80073f8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <_fx_system_initialize+0xd0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f043 0310 	orr.w	r3, r3, #16
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <_fx_system_initialize+0xd0>)
 8007404:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <_fx_system_initialize+0xd4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <_fx_system_initialize+0xd4>)
 8007410:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <_fx_system_initialize+0xd4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800741a:	4a0e      	ldr	r2, [pc, #56]	; (8007454 <_fx_system_initialize+0xd4>)
 800741c:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800741e:	bf00      	nop
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	200037d8 	.word	0x200037d8
 8007428:	200037dc 	.word	0x200037dc
 800742c:	200037e0 	.word	0x200037e0
 8007430:	200037e4 	.word	0x200037e4
 8007434:	200037e8 	.word	0x200037e8
 8007438:	200037ec 	.word	0x200037ec
 800743c:	46585359 	.word	0x46585359
 8007440:	08007459 	.word	0x08007459
 8007444:	0801756c 	.word	0x0801756c
 8007448:	200037fc 	.word	0x200037fc
 800744c:	200037f0 	.word	0x200037f0
 8007450:	200037f4 	.word	0x200037f4
 8007454:	200037f8 	.word	0x200037f8

08007458 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a9d      	ldr	r2, [pc, #628]	; (80076d8 <_fx_system_timer_entry+0x280>)
 8007464:	4293      	cmp	r3, r2
 8007466:	f040 8132 	bne.w	80076ce <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800746a:	4b9c      	ldr	r3, [pc, #624]	; (80076dc <_fx_system_timer_entry+0x284>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 8007476:	4b99      	ldr	r3, [pc, #612]	; (80076dc <_fx_system_timer_entry+0x284>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007480:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 8007482:	4b96      	ldr	r3, [pc, #600]	; (80076dc <_fx_system_timer_entry+0x284>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	0adb      	lsrs	r3, r3, #11
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800748e:	4b94      	ldr	r3, [pc, #592]	; (80076e0 <_fx_system_timer_entry+0x288>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8007498:	4b91      	ldr	r3, [pc, #580]	; (80076e0 <_fx_system_timer_entry+0x288>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 80074a4:	4b8e      	ldr	r3, [pc, #568]	; (80076e0 <_fx_system_timer_entry+0x288>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	0a5b      	lsrs	r3, r3, #9
 80074aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ae:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80074b2:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	330a      	adds	r3, #10
 80074b8:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b3b      	cmp	r3, #59	; 0x3b
 80074be:	f240 80d4 	bls.w	800766a <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4a87      	ldr	r2, [pc, #540]	; (80076e4 <_fx_system_timer_entry+0x28c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	4413      	add	r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	4b83      	ldr	r3, [pc, #524]	; (80076e4 <_fx_system_timer_entry+0x28c>)
 80074d6:	fba3 1302 	umull	r1, r3, r3, r2
 80074da:	0959      	lsrs	r1, r3, #5
 80074dc:	460b      	mov	r3, r1
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	1a5b      	subs	r3, r3, r1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b3b      	cmp	r3, #59	; 0x3b
 80074ec:	f240 80bd 	bls.w	800766a <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	4a7c      	ldr	r2, [pc, #496]	; (80076e4 <_fx_system_timer_entry+0x28c>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4413      	add	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	4b78      	ldr	r3, [pc, #480]	; (80076e4 <_fx_system_timer_entry+0x28c>)
 8007504:	fba3 1302 	umull	r1, r3, r3, r2
 8007508:	0959      	lsrs	r1, r3, #5
 800750a:	460b      	mov	r3, r1
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	1a5b      	subs	r3, r3, r1
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b17      	cmp	r3, #23
 800751a:	f240 80a6 	bls.w	800766a <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]
                    day++;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3301      	adds	r3, #1
 8007526:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3b01      	subs	r3, #1
 800752c:	2b0b      	cmp	r3, #11
 800752e:	f200 80cb 	bhi.w	80076c8 <_fx_system_timer_entry+0x270>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <_fx_system_timer_entry+0xe0>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007569 	.word	0x08007569
 800753c:	0800757b 	.word	0x0800757b
 8007540:	080075a9 	.word	0x080075a9
 8007544:	080075bb 	.word	0x080075bb
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075df 	.word	0x080075df
 8007550:	080075f1 	.word	0x080075f1
 8007554:	08007603 	.word	0x08007603
 8007558:	08007615 	.word	0x08007615
 800755c:	08007627 	.word	0x08007627
 8007560:	08007639 	.word	0x08007639
 8007564:	0800764b 	.word	0x0800764b

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b1f      	cmp	r3, #31
 800756c:	d97f      	bls.n	800766e <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800756e:	2301      	movs	r3, #1
 8007570:	613b      	str	r3, [r7, #16]
                            month++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3301      	adds	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007578:	e079      	b.n	800766e <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f003 0303 	and.w	r3, r3, #3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d108      	bne.n	8007596 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b1d      	cmp	r3, #29
 8007588:	d973      	bls.n	8007672 <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800758a:	2301      	movs	r3, #1
 800758c:	613b      	str	r3, [r7, #16]
                                month++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8007594:	e06d      	b.n	8007672 <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b1c      	cmp	r3, #28
 800759a:	d96a      	bls.n	8007672 <_fx_system_timer_entry+0x21a>
                                day = 1;
 800759c:	2301      	movs	r3, #1
 800759e:	613b      	str	r3, [r7, #16]
                                month++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
                        break;
 80075a6:	e064      	b.n	8007672 <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b1f      	cmp	r3, #31
 80075ac:	d963      	bls.n	8007676 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	613b      	str	r3, [r7, #16]
                            month++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80075b8:	e05d      	b.n	8007676 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b1e      	cmp	r3, #30
 80075be:	d95c      	bls.n	800767a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 80075c0:	2301      	movs	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
                            month++;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80075ca:	e056      	b.n	800767a <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b1f      	cmp	r3, #31
 80075d0:	d955      	bls.n	800767e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	613b      	str	r3, [r7, #16]
                            month++;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3301      	adds	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80075dc:	e04f      	b.n	800767e <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b1e      	cmp	r3, #30
 80075e2:	d94e      	bls.n	8007682 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 80075e4:	2301      	movs	r3, #1
 80075e6:	613b      	str	r3, [r7, #16]
                            month++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80075ee:	e048      	b.n	8007682 <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b1f      	cmp	r3, #31
 80075f4:	d947      	bls.n	8007686 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	613b      	str	r3, [r7, #16]
                            month++;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007600:	e041      	b.n	8007686 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b1f      	cmp	r3, #31
 8007606:	d940      	bls.n	800768a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007608:	2301      	movs	r3, #1
 800760a:	613b      	str	r3, [r7, #16]
                            month++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007612:	e03a      	b.n	800768a <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b1e      	cmp	r3, #30
 8007618:	d939      	bls.n	800768e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800761a:	2301      	movs	r3, #1
 800761c:	613b      	str	r3, [r7, #16]
                            month++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007624:	e033      	b.n	800768e <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b1f      	cmp	r3, #31
 800762a:	d932      	bls.n	8007692 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800762c:	2301      	movs	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
                            month++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3301      	adds	r3, #1
 8007634:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007636:	e02c      	b.n	8007692 <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b1e      	cmp	r3, #30
 800763c:	d92b      	bls.n	8007696 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800763e:	2301      	movs	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
                            month++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8007648:	e025      	b.n	8007696 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b1f      	cmp	r3, #31
 800764e:	d924      	bls.n	800769a <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 8007650:	2301      	movs	r3, #1
 8007652:	613b      	str	r3, [r7, #16]
                            month = 1;
 8007654:	2301      	movs	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3301      	adds	r3, #1
 800765c:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f640 023b 	movw	r2, #2107	; 0x83b
 8007664:	4293      	cmp	r3, r2
 8007666:	d831      	bhi.n	80076cc <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 8007668:	e017      	b.n	800769a <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 800766a:	bf00      	nop
 800766c:	e016      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 800766e:	bf00      	nop
 8007670:	e014      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 8007672:	bf00      	nop
 8007674:	e012      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 8007676:	bf00      	nop
 8007678:	e010      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 800767a:	bf00      	nop
 800767c:	e00e      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 800767e:	bf00      	nop
 8007680:	e00c      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 8007682:	bf00      	nop
 8007684:	e00a      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 8007686:	bf00      	nop
 8007688:	e008      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 800768a:	bf00      	nop
 800768c:	e006      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 800768e:	bf00      	nop
 8007690:	e004      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 8007692:	bf00      	nop
 8007694:	e002      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <_fx_system_timer_entry+0x244>
                        break;
 800769a:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 80076a2:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80076a8:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80076ae:	4a0c      	ldr	r2, [pc, #48]	; (80076e0 <_fx_system_timer_entry+0x288>)
 80076b0:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80076ba:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80076c2:	4a06      	ldr	r2, [pc, #24]	; (80076dc <_fx_system_timer_entry+0x284>)
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e002      	b.n	80076ce <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <_fx_system_timer_entry+0x276>
                                return;
 80076cc:	bf00      	nop
    }
}
 80076ce:	3724      	adds	r7, #36	; 0x24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	46585359 	.word	0x46585359
 80076dc:	200037e4 	.word	0x200037e4
 80076e0:	200037e0 	.word	0x200037e0
 80076e4:	88888889 	.word	0x88888889

080076e8 <alloc_bmp_state>:

    bool frame_loaded;
    void *common_bmp_state;
};

static sail_status_t alloc_bmp_state(struct bmp_state **bmp_state) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct bmp_state), &ptr));
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	4619      	mov	r1, r3
 80076f6:	2010      	movs	r0, #16
 80076f8:	f007 fe8c 	bl	800f414 <sail_malloc>
 80076fc:	4603      	mov	r3, r0
 80076fe:	81fb      	strh	r3, [r7, #14]
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	2b00      	cmp	r3, #0
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <alloc_bmp_state+0x2c>
 8007710:	89fb      	ldrh	r3, [r7, #14]
 8007712:	e013      	b.n	800773c <alloc_bmp_state+0x54>
    *bmp_state = ptr;
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]

    (*bmp_state)->load_options = NULL;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
    (*bmp_state)->save_options = NULL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2200      	movs	r2, #0
 8007728:	605a      	str	r2, [r3, #4]

    (*bmp_state)->frame_loaded     = false;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	721a      	strb	r2, [r3, #8]
    (*bmp_state)->common_bmp_state = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	60da      	str	r2, [r3, #12]

    return SAIL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <destroy_bmp_state>:

static void destroy_bmp_state(struct bmp_state *bmp_state) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

    if (bmp_state == NULL) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <destroy_bmp_state+0x2a>
        return;
    }

    sail_destroy_load_options(bmp_state->load_options);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f007 fc54 	bl	800f004 <sail_destroy_load_options>
    sail_destroy_save_options(bmp_state->save_options);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	f008 fe92 	bl	801048a <sail_destroy_save_options>

    sail_free(bmp_state);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f007 fedc 	bl	800f524 <sail_free>
 800776c:	e000      	b.n	8007770 <destroy_bmp_state+0x2c>
        return;
 800776e:	bf00      	nop
}
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <sail_codec_load_init_v7_bmp>:

/*
 * Decoding functions.
 */

SAIL_EXPORT sail_status_t sail_codec_load_init_v7_bmp(struct sail_io *io, const struct sail_load_options *load_options, void **state) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d011      	beq.n	80077b8 <sail_codec_load_init_v7_bmp+0x40>
 8007794:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <sail_codec_load_init_v7_bmp+0x118>)
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	4b3e      	ldr	r3, [pc, #248]	; (8007894 <sail_codec_load_init_v7_bmp+0x11c>)
 800779a:	224c      	movs	r2, #76	; 0x4c
 800779c:	493e      	ldr	r1, [pc, #248]	; (8007898 <sail_codec_load_init_v7_bmp+0x120>)
 800779e:	2001      	movs	r0, #1
 80077a0:	f007 fd40 	bl	800f224 <sail_log>
 80077a4:	4b3d      	ldr	r3, [pc, #244]	; (800789c <sail_codec_load_init_v7_bmp+0x124>)
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	4b3d      	ldr	r3, [pc, #244]	; (80078a0 <sail_codec_load_init_v7_bmp+0x128>)
 80077aa:	224c      	movs	r2, #76	; 0x4c
 80077ac:	493a      	ldr	r1, [pc, #232]	; (8007898 <sail_codec_load_init_v7_bmp+0x120>)
 80077ae:	2001      	movs	r0, #1
 80077b0:	f007 fd38 	bl	800f224 <sail_log>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e066      	b.n	8007886 <sail_codec_load_init_v7_bmp+0x10e>
    *state = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]

    SAIL_TRY(sail_check_io_valid(io));
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f006 fe80 	bl	800e4c4 <sail_check_io_valid>
 80077c4:	4603      	mov	r3, r0
 80077c6:	83fb      	strh	r3, [r7, #30]
 80077c8:	8bfb      	ldrh	r3, [r7, #30]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bf14      	ite	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	2300      	moveq	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <sail_codec_load_init_v7_bmp+0x64>
 80077d8:	8bfb      	ldrh	r3, [r7, #30]
 80077da:	e054      	b.n	8007886 <sail_codec_load_init_v7_bmp+0x10e>
    SAIL_CHECK_PTR(load_options);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf0c      	ite	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	2300      	movne	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <sail_codec_load_init_v7_bmp+0x98>
 80077ec:	4b2d      	ldr	r3, [pc, #180]	; (80078a4 <sail_codec_load_init_v7_bmp+0x12c>)
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <sail_codec_load_init_v7_bmp+0x11c>)
 80077f2:	2250      	movs	r2, #80	; 0x50
 80077f4:	4928      	ldr	r1, [pc, #160]	; (8007898 <sail_codec_load_init_v7_bmp+0x120>)
 80077f6:	2001      	movs	r0, #1
 80077f8:	f007 fd14 	bl	800f224 <sail_log>
 80077fc:	4b27      	ldr	r3, [pc, #156]	; (800789c <sail_codec_load_init_v7_bmp+0x124>)
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <sail_codec_load_init_v7_bmp+0x128>)
 8007802:	2250      	movs	r2, #80	; 0x50
 8007804:	4924      	ldr	r1, [pc, #144]	; (8007898 <sail_codec_load_init_v7_bmp+0x120>)
 8007806:	2001      	movs	r0, #1
 8007808:	f007 fd0c 	bl	800f224 <sail_log>
 800780c:	2301      	movs	r3, #1
 800780e:	e03a      	b.n	8007886 <sail_codec_load_init_v7_bmp+0x10e>

    /* Allocate a new state. */
    struct bmp_state *bmp_state;
    SAIL_TRY(alloc_bmp_state(&bmp_state));
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ff67 	bl	80076e8 <alloc_bmp_state>
 800781a:	4603      	mov	r3, r0
 800781c:	83bb      	strh	r3, [r7, #28]
 800781e:	8bbb      	ldrh	r3, [r7, #28]
 8007820:	2b00      	cmp	r3, #0
 8007822:	bf14      	ite	ne
 8007824:	2301      	movne	r3, #1
 8007826:	2300      	moveq	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <sail_codec_load_init_v7_bmp+0xba>
 800782e:	8bbb      	ldrh	r3, [r7, #28]
 8007830:	e029      	b.n	8007886 <sail_codec_load_init_v7_bmp+0x10e>
    *state = bmp_state;
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]

    /* Deep copy load options. */
    SAIL_TRY(sail_copy_load_options(load_options, &bmp_state->load_options));
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4619      	mov	r1, r3
 800783c:	68b8      	ldr	r0, [r7, #8]
 800783e:	f007 fc53 	bl	800f0e8 <sail_copy_load_options>
 8007842:	4603      	mov	r3, r0
 8007844:	837b      	strh	r3, [r7, #26]
 8007846:	8b7b      	ldrh	r3, [r7, #26]
 8007848:	2b00      	cmp	r3, #0
 800784a:	bf14      	ite	ne
 800784c:	2301      	movne	r3, #1
 800784e:	2300      	moveq	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <sail_codec_load_init_v7_bmp+0xe2>
 8007856:	8b7b      	ldrh	r3, [r7, #26]
 8007858:	e015      	b.n	8007886 <sail_codec_load_init_v7_bmp+0x10e>

    SAIL_TRY(bmp_private_read_init(io, bmp_state->load_options, &bmp_state->common_bmp_state, SAIL_READ_BMP_FILE_HEADER));
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6819      	ldr	r1, [r3, #0]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f103 020c 	add.w	r2, r3, #12
 8007864:	2301      	movs	r3, #1
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fc4a 	bl	8008100 <bmp_private_read_init>
 800786c:	4603      	mov	r3, r0
 800786e:	833b      	strh	r3, [r7, #24]
 8007870:	8b3b      	ldrh	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	bf14      	ite	ne
 8007876:	2301      	movne	r3, #1
 8007878:	2300      	moveq	r3, #0
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <sail_codec_load_init_v7_bmp+0x10c>
 8007880:	8b3b      	ldrh	r3, [r7, #24]
 8007882:	e000      	b.n	8007886 <sail_codec_load_init_v7_bmp+0x10e>

    return SAIL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	080175e8 	.word	0x080175e8
 8007894:	08017580 	.word	0x08017580
 8007898:	08017598 	.word	0x08017598
 800789c:	080175f4 	.word	0x080175f4
 80078a0:	080175f0 	.word	0x080175f0
 80078a4:	08017608 	.word	0x08017608

080078a8 <sail_codec_load_seek_next_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_seek_next_frame_v7_bmp(void *state, struct sail_io *io, struct sail_image **image) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d011      	beq.n	80078e8 <sail_codec_load_seek_next_frame_v7_bmp+0x40>
 80078c4:	4b32      	ldr	r3, [pc, #200]	; (8007990 <sail_codec_load_seek_next_frame_v7_bmp+0xe8>)
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	4b32      	ldr	r3, [pc, #200]	; (8007994 <sail_codec_load_seek_next_frame_v7_bmp+0xec>)
 80078ca:	2261      	movs	r2, #97	; 0x61
 80078cc:	4932      	ldr	r1, [pc, #200]	; (8007998 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 80078ce:	2001      	movs	r0, #1
 80078d0:	f007 fca8 	bl	800f224 <sail_log>
 80078d4:	4b31      	ldr	r3, [pc, #196]	; (800799c <sail_codec_load_seek_next_frame_v7_bmp+0xf4>)
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 80078da:	2261      	movs	r2, #97	; 0x61
 80078dc:	492e      	ldr	r1, [pc, #184]	; (8007998 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 80078de:	2001      	movs	r0, #1
 80078e0:	f007 fca0 	bl	800f224 <sail_log>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e04f      	b.n	8007988 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    SAIL_TRY(sail_check_io_valid(io));
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f006 fdeb 	bl	800e4c4 <sail_check_io_valid>
 80078ee:	4603      	mov	r3, r0
 80078f0:	83fb      	strh	r3, [r7, #30]
 80078f2:	8bfb      	ldrh	r3, [r7, #30]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <sail_codec_load_seek_next_frame_v7_bmp+0x5e>
 8007902:	8bfb      	ldrh	r3, [r7, #30]
 8007904:	e040      	b.n	8007988 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    SAIL_CHECK_PTR(image);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d011      	beq.n	800793a <sail_codec_load_seek_next_frame_v7_bmp+0x92>
 8007916:	4b23      	ldr	r3, [pc, #140]	; (80079a4 <sail_codec_load_seek_next_frame_v7_bmp+0xfc>)
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <sail_codec_load_seek_next_frame_v7_bmp+0xec>)
 800791c:	2263      	movs	r2, #99	; 0x63
 800791e:	491e      	ldr	r1, [pc, #120]	; (8007998 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 8007920:	2001      	movs	r0, #1
 8007922:	f007 fc7f 	bl	800f224 <sail_log>
 8007926:	4b1d      	ldr	r3, [pc, #116]	; (800799c <sail_codec_load_seek_next_frame_v7_bmp+0xf4>)
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 800792c:	2263      	movs	r2, #99	; 0x63
 800792e:	491a      	ldr	r1, [pc, #104]	; (8007998 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 8007930:	2001      	movs	r0, #1
 8007932:	f007 fc77 	bl	800f224 <sail_log>
 8007936:	2301      	movs	r3, #1
 8007938:	e026      	b.n	8007988 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	61bb      	str	r3, [r7, #24]

    if (bmp_state->frame_loaded) {
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	7a1b      	ldrb	r3, [r3, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <sail_codec_load_seek_next_frame_v7_bmp+0xb2>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_NO_MORE_FRAMES);
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <sail_codec_load_seek_next_frame_v7_bmp+0x100>)
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	4b15      	ldr	r3, [pc, #84]	; (80079a0 <sail_codec_load_seek_next_frame_v7_bmp+0xf8>)
 800794c:	2268      	movs	r2, #104	; 0x68
 800794e:	4912      	ldr	r1, [pc, #72]	; (8007998 <sail_codec_load_seek_next_frame_v7_bmp+0xf0>)
 8007950:	2001      	movs	r0, #1
 8007952:	f007 fc67 	bl	800f224 <sail_log>
 8007956:	23ce      	movs	r3, #206	; 0xce
 8007958:	e016      	b.n	8007988 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>
    }

    bmp_state->frame_loaded = true;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2201      	movs	r2, #1
 800795e:	721a      	strb	r2, [r3, #8]

    SAIL_TRY(bmp_private_read_seek_next_frame(bmp_state->common_bmp_state, io, image));
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 ff05 	bl	8008778 <bmp_private_read_seek_next_frame>
 800796e:	4603      	mov	r3, r0
 8007970:	82fb      	strh	r3, [r7, #22]
 8007972:	8afb      	ldrh	r3, [r7, #22]
 8007974:	2b00      	cmp	r3, #0
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <sail_codec_load_seek_next_frame_v7_bmp+0xde>
 8007982:	8afb      	ldrh	r3, [r7, #22]
 8007984:	e000      	b.n	8007988 <sail_codec_load_seek_next_frame_v7_bmp+0xe0>

    return SAIL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3720      	adds	r7, #32
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	080175e8 	.word	0x080175e8
 8007994:	08017580 	.word	0x08017580
 8007998:	08017598 	.word	0x08017598
 800799c:	080175f4 	.word	0x080175f4
 80079a0:	080175f0 	.word	0x080175f0
 80079a4:	08017618 	.word	0x08017618
 80079a8:	08017620 	.word	0x08017620

080079ac <sail_codec_load_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_frame_v7_bmp(void *state, struct sail_io *io, struct sail_image *image) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf0c      	ite	eq
 80079be:	2301      	moveq	r3, #1
 80079c0:	2300      	movne	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d011      	beq.n	80079ec <sail_codec_load_frame_v7_bmp+0x40>
 80079c8:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <sail_codec_load_frame_v7_bmp+0xb0>)
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <sail_codec_load_frame_v7_bmp+0xb4>)
 80079ce:	2274      	movs	r2, #116	; 0x74
 80079d0:	4924      	ldr	r1, [pc, #144]	; (8007a64 <sail_codec_load_frame_v7_bmp+0xb8>)
 80079d2:	2001      	movs	r0, #1
 80079d4:	f007 fc26 	bl	800f224 <sail_log>
 80079d8:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <sail_codec_load_frame_v7_bmp+0xbc>)
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <sail_codec_load_frame_v7_bmp+0xc0>)
 80079de:	2274      	movs	r2, #116	; 0x74
 80079e0:	4920      	ldr	r1, [pc, #128]	; (8007a64 <sail_codec_load_frame_v7_bmp+0xb8>)
 80079e2:	2001      	movs	r0, #1
 80079e4:	f007 fc1e 	bl	800f224 <sail_log>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e033      	b.n	8007a54 <sail_codec_load_frame_v7_bmp+0xa8>
    SAIL_TRY(sail_check_io_valid(io));
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f006 fd69 	bl	800e4c4 <sail_check_io_valid>
 80079f2:	4603      	mov	r3, r0
 80079f4:	83fb      	strh	r3, [r7, #30]
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <sail_codec_load_frame_v7_bmp+0x5e>
 8007a06:	8bfb      	ldrh	r3, [r7, #30]
 8007a08:	e024      	b.n	8007a54 <sail_codec_load_frame_v7_bmp+0xa8>
    SAIL_TRY(sail_check_image_skeleton_valid(image));
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f006 f980 	bl	800dd10 <sail_check_image_skeleton_valid>
 8007a10:	4603      	mov	r3, r0
 8007a12:	83bb      	strh	r3, [r7, #28]
 8007a14:	8bbb      	ldrh	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf14      	ite	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	2300      	moveq	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <sail_codec_load_frame_v7_bmp+0x7c>
 8007a24:	8bbb      	ldrh	r3, [r7, #28]
 8007a26:	e015      	b.n	8007a54 <sail_codec_load_frame_v7_bmp+0xa8>

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	61bb      	str	r3, [r7, #24]

    SAIL_TRY(bmp_private_read_frame(bmp_state->common_bmp_state, io, image));
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 ffd1 	bl	80089dc <bmp_private_read_frame>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	82fb      	strh	r3, [r7, #22]
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bf14      	ite	ne
 8007a44:	2301      	movne	r3, #1
 8007a46:	2300      	moveq	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <sail_codec_load_frame_v7_bmp+0xa6>
 8007a4e:	8afb      	ldrh	r3, [r7, #22]
 8007a50:	e000      	b.n	8007a54 <sail_codec_load_frame_v7_bmp+0xa8>

    return SAIL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	080175e8 	.word	0x080175e8
 8007a60:	08017580 	.word	0x08017580
 8007a64:	08017598 	.word	0x08017598
 8007a68:	080175f4 	.word	0x080175f4
 8007a6c:	080175f0 	.word	0x080175f0

08007a70 <sail_codec_load_finish_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_load_finish_v7_bmp(void **state, struct sail_io *io) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf0c      	ite	eq
 8007a80:	2301      	moveq	r3, #1
 8007a82:	2300      	movne	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <sail_codec_load_finish_v7_bmp+0x3e>
 8007a8a:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <sail_codec_load_finish_v7_bmp+0xac>)
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <sail_codec_load_finish_v7_bmp+0xb0>)
 8007a90:	2281      	movs	r2, #129	; 0x81
 8007a92:	4924      	ldr	r1, [pc, #144]	; (8007b24 <sail_codec_load_finish_v7_bmp+0xb4>)
 8007a94:	2001      	movs	r0, #1
 8007a96:	f007 fbc5 	bl	800f224 <sail_log>
 8007a9a:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <sail_codec_load_finish_v7_bmp+0xb8>)
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	4b23      	ldr	r3, [pc, #140]	; (8007b2c <sail_codec_load_finish_v7_bmp+0xbc>)
 8007aa0:	2281      	movs	r2, #129	; 0x81
 8007aa2:	4920      	ldr	r1, [pc, #128]	; (8007b24 <sail_codec_load_finish_v7_bmp+0xb4>)
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	f007 fbbd 	bl	800f224 <sail_log>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e031      	b.n	8007b12 <sail_codec_load_finish_v7_bmp+0xa2>
    SAIL_TRY(sail_check_io_valid(io));
 8007aae:	6838      	ldr	r0, [r7, #0]
 8007ab0:	f006 fd08 	bl	800e4c4 <sail_check_io_valid>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	82fb      	strh	r3, [r7, #22]
 8007ab8:	8afb      	ldrh	r3, [r7, #22]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf14      	ite	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	2300      	moveq	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <sail_codec_load_finish_v7_bmp+0x5c>
 8007ac8:	8afb      	ldrh	r3, [r7, #22]
 8007aca:	e022      	b.n	8007b12 <sail_codec_load_finish_v7_bmp+0xa2>

    struct bmp_state *bmp_state = (struct bmp_state *)(*state);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	613b      	str	r3, [r7, #16]

    *state = NULL;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

    if (bmp_state->common_bmp_state != NULL) {
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d014      	beq.n	8007b0a <sail_codec_load_finish_v7_bmp+0x9a>
        SAIL_TRY_OR_CLEANUP(bmp_private_read_finish(&bmp_state->common_bmp_state, io),
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fa24 	bl	8008f34 <bmp_private_read_finish>
 8007aec:	4603      	mov	r3, r0
 8007aee:	81fb      	strh	r3, [r7, #14]
 8007af0:	89fb      	ldrh	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <sail_codec_load_finish_v7_bmp+0x9a>
 8007b00:	6938      	ldr	r0, [r7, #16]
 8007b02:	f7ff fe1f 	bl	8007744 <destroy_bmp_state>
 8007b06:	89fb      	ldrh	r3, [r7, #14]
 8007b08:	e003      	b.n	8007b12 <sail_codec_load_finish_v7_bmp+0xa2>
                            /* cleanup */ destroy_bmp_state(bmp_state));
    }

    destroy_bmp_state(bmp_state);
 8007b0a:	6938      	ldr	r0, [r7, #16]
 8007b0c:	f7ff fe1a 	bl	8007744 <destroy_bmp_state>

    return SAIL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	080175e8 	.word	0x080175e8
 8007b20:	08017580 	.word	0x08017580
 8007b24:	08017598 	.word	0x08017598
 8007b28:	080175f4 	.word	0x080175f4
 8007b2c:	080175f0 	.word	0x080175f0

08007b30 <sail_codec_save_init_v7_bmp>:

/*
 * Encoding functions.
 */

SAIL_EXPORT sail_status_t sail_codec_save_init_v7_bmp(struct sail_io *io, const struct sail_save_options *save_options, void **state) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d011      	beq.n	8007b70 <sail_codec_save_init_v7_bmp+0x40>
 8007b4c:	4b23      	ldr	r3, [pc, #140]	; (8007bdc <sail_codec_save_init_v7_bmp+0xac>)
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <sail_codec_save_init_v7_bmp+0xb0>)
 8007b52:	2298      	movs	r2, #152	; 0x98
 8007b54:	4923      	ldr	r1, [pc, #140]	; (8007be4 <sail_codec_save_init_v7_bmp+0xb4>)
 8007b56:	2001      	movs	r0, #1
 8007b58:	f007 fb64 	bl	800f224 <sail_log>
 8007b5c:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <sail_codec_save_init_v7_bmp+0xb8>)
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	4b22      	ldr	r3, [pc, #136]	; (8007bec <sail_codec_save_init_v7_bmp+0xbc>)
 8007b62:	2298      	movs	r2, #152	; 0x98
 8007b64:	491f      	ldr	r1, [pc, #124]	; (8007be4 <sail_codec_save_init_v7_bmp+0xb4>)
 8007b66:	2001      	movs	r0, #1
 8007b68:	f007 fb5c 	bl	800f224 <sail_log>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e031      	b.n	8007bd4 <sail_codec_save_init_v7_bmp+0xa4>
    SAIL_TRY(sail_check_io_valid(io));
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f006 fca7 	bl	800e4c4 <sail_check_io_valid>
 8007b76:	4603      	mov	r3, r0
 8007b78:	82fb      	strh	r3, [r7, #22]
 8007b7a:	8afb      	ldrh	r3, [r7, #22]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bf14      	ite	ne
 8007b80:	2301      	movne	r3, #1
 8007b82:	2300      	moveq	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <sail_codec_save_init_v7_bmp+0x5e>
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	e022      	b.n	8007bd4 <sail_codec_save_init_v7_bmp+0xa4>
    SAIL_CHECK_PTR(save_options);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d011      	beq.n	8007bc2 <sail_codec_save_init_v7_bmp+0x92>
 8007b9e:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <sail_codec_save_init_v7_bmp+0xc0>)
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <sail_codec_save_init_v7_bmp+0xb0>)
 8007ba4:	229a      	movs	r2, #154	; 0x9a
 8007ba6:	490f      	ldr	r1, [pc, #60]	; (8007be4 <sail_codec_save_init_v7_bmp+0xb4>)
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f007 fb3b 	bl	800f224 <sail_log>
 8007bae:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <sail_codec_save_init_v7_bmp+0xb8>)
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <sail_codec_save_init_v7_bmp+0xbc>)
 8007bb4:	229a      	movs	r2, #154	; 0x9a
 8007bb6:	490b      	ldr	r1, [pc, #44]	; (8007be4 <sail_codec_save_init_v7_bmp+0xb4>)
 8007bb8:	2001      	movs	r0, #1
 8007bba:	f007 fb33 	bl	800f224 <sail_log>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e008      	b.n	8007bd4 <sail_codec_save_init_v7_bmp+0xa4>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <sail_codec_save_init_v7_bmp+0xc4>)
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <sail_codec_save_init_v7_bmp+0xbc>)
 8007bc8:	229c      	movs	r2, #156	; 0x9c
 8007bca:	4906      	ldr	r1, [pc, #24]	; (8007be4 <sail_codec_save_init_v7_bmp+0xb4>)
 8007bcc:	2001      	movs	r0, #1
 8007bce:	f007 fb29 	bl	800f224 <sail_log>
 8007bd2:	2311      	movs	r3, #17
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	080175e8 	.word	0x080175e8
 8007be0:	08017580 	.word	0x08017580
 8007be4:	08017598 	.word	0x08017598
 8007be8:	080175f4 	.word	0x080175f4
 8007bec:	080175f0 	.word	0x080175f0
 8007bf0:	0801763c 	.word	0x0801763c
 8007bf4:	0801764c 	.word	0x0801764c

08007bf8 <sail_codec_save_seek_next_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_seek_next_frame_v7_bmp(void *state, struct sail_io *io, const struct sail_image *image) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d011      	beq.n	8007c38 <sail_codec_save_seek_next_frame_v7_bmp+0x40>
 8007c14:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <sail_codec_save_seek_next_frame_v7_bmp+0x98>)
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <sail_codec_save_seek_next_frame_v7_bmp+0x9c>)
 8007c1a:	22a1      	movs	r2, #161	; 0xa1
 8007c1c:	491e      	ldr	r1, [pc, #120]	; (8007c98 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f007 fb00 	bl	800f224 <sail_log>
 8007c24:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <sail_codec_save_seek_next_frame_v7_bmp+0xa4>)
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <sail_codec_save_seek_next_frame_v7_bmp+0xa8>)
 8007c2a:	22a1      	movs	r2, #161	; 0xa1
 8007c2c:	491a      	ldr	r1, [pc, #104]	; (8007c98 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f007 faf8 	bl	800f224 <sail_log>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e026      	b.n	8007c86 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_io_valid(io));
 8007c38:	68b8      	ldr	r0, [r7, #8]
 8007c3a:	f006 fc43 	bl	800e4c4 <sail_check_io_valid>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	82fb      	strh	r3, [r7, #22]
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bf14      	ite	ne
 8007c48:	2301      	movne	r3, #1
 8007c4a:	2300      	moveq	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <sail_codec_save_seek_next_frame_v7_bmp+0x5e>
 8007c52:	8afb      	ldrh	r3, [r7, #22]
 8007c54:	e017      	b.n	8007c86 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_image_valid(image));
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f006 f8bc 	bl	800ddd4 <sail_check_image_valid>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	82bb      	strh	r3, [r7, #20]
 8007c60:	8abb      	ldrh	r3, [r7, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <sail_codec_save_seek_next_frame_v7_bmp+0x7c>
 8007c70:	8abb      	ldrh	r3, [r7, #20]
 8007c72:	e008      	b.n	8007c86 <sail_codec_save_seek_next_frame_v7_bmp+0x8e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007c74:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <sail_codec_save_seek_next_frame_v7_bmp+0xac>)
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <sail_codec_save_seek_next_frame_v7_bmp+0xa8>)
 8007c7a:	22a5      	movs	r2, #165	; 0xa5
 8007c7c:	4906      	ldr	r1, [pc, #24]	; (8007c98 <sail_codec_save_seek_next_frame_v7_bmp+0xa0>)
 8007c7e:	2001      	movs	r0, #1
 8007c80:	f007 fad0 	bl	800f224 <sail_log>
 8007c84:	2311      	movs	r3, #17
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	080175e8 	.word	0x080175e8
 8007c94:	08017580 	.word	0x08017580
 8007c98:	08017598 	.word	0x08017598
 8007c9c:	080175f4 	.word	0x080175f4
 8007ca0:	080175f0 	.word	0x080175f0
 8007ca4:	0801764c 	.word	0x0801764c

08007ca8 <sail_codec_save_frame_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_frame_v7_bmp(void *state, struct sail_io *io, const struct sail_image *image) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(state);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d011      	beq.n	8007ce8 <sail_codec_save_frame_v7_bmp+0x40>
 8007cc4:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <sail_codec_save_frame_v7_bmp+0x98>)
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <sail_codec_save_frame_v7_bmp+0x9c>)
 8007cca:	22aa      	movs	r2, #170	; 0xaa
 8007ccc:	491e      	ldr	r1, [pc, #120]	; (8007d48 <sail_codec_save_frame_v7_bmp+0xa0>)
 8007cce:	2001      	movs	r0, #1
 8007cd0:	f007 faa8 	bl	800f224 <sail_log>
 8007cd4:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <sail_codec_save_frame_v7_bmp+0xa4>)
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <sail_codec_save_frame_v7_bmp+0xa8>)
 8007cda:	22aa      	movs	r2, #170	; 0xaa
 8007cdc:	491a      	ldr	r1, [pc, #104]	; (8007d48 <sail_codec_save_frame_v7_bmp+0xa0>)
 8007cde:	2001      	movs	r0, #1
 8007ce0:	f007 faa0 	bl	800f224 <sail_log>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e026      	b.n	8007d36 <sail_codec_save_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_io_valid(io));
 8007ce8:	68b8      	ldr	r0, [r7, #8]
 8007cea:	f006 fbeb 	bl	800e4c4 <sail_check_io_valid>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	82fb      	strh	r3, [r7, #22]
 8007cf2:	8afb      	ldrh	r3, [r7, #22]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <sail_codec_save_frame_v7_bmp+0x5e>
 8007d02:	8afb      	ldrh	r3, [r7, #22]
 8007d04:	e017      	b.n	8007d36 <sail_codec_save_frame_v7_bmp+0x8e>
    SAIL_TRY(sail_check_image_valid(image));
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f006 f864 	bl	800ddd4 <sail_check_image_valid>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	82bb      	strh	r3, [r7, #20]
 8007d10:	8abb      	ldrh	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bf14      	ite	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <sail_codec_save_frame_v7_bmp+0x7c>
 8007d20:	8abb      	ldrh	r3, [r7, #20]
 8007d22:	e008      	b.n	8007d36 <sail_codec_save_frame_v7_bmp+0x8e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <sail_codec_save_frame_v7_bmp+0xac>)
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <sail_codec_save_frame_v7_bmp+0xa8>)
 8007d2a:	22ae      	movs	r2, #174	; 0xae
 8007d2c:	4906      	ldr	r1, [pc, #24]	; (8007d48 <sail_codec_save_frame_v7_bmp+0xa0>)
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f007 fa78 	bl	800f224 <sail_log>
 8007d34:	2311      	movs	r3, #17
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	080175e8 	.word	0x080175e8
 8007d44:	08017580 	.word	0x08017580
 8007d48:	08017598 	.word	0x08017598
 8007d4c:	080175f4 	.word	0x080175f4
 8007d50:	080175f0 	.word	0x080175f0
 8007d54:	0801764c 	.word	0x0801764c

08007d58 <sail_codec_save_finish_v7_bmp>:

SAIL_EXPORT sail_status_t sail_codec_save_finish_v7_bmp(void **state, struct sail_io *io) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <sail_codec_save_finish_v7_bmp+0x3e>
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <sail_codec_save_finish_v7_bmp+0x78>)
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <sail_codec_save_finish_v7_bmp+0x7c>)
 8007d78:	22b3      	movs	r2, #179	; 0xb3
 8007d7a:	4917      	ldr	r1, [pc, #92]	; (8007dd8 <sail_codec_save_finish_v7_bmp+0x80>)
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	f007 fa51 	bl	800f224 <sail_log>
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <sail_codec_save_finish_v7_bmp+0x84>)
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <sail_codec_save_finish_v7_bmp+0x88>)
 8007d88:	22b3      	movs	r2, #179	; 0xb3
 8007d8a:	4913      	ldr	r1, [pc, #76]	; (8007dd8 <sail_codec_save_finish_v7_bmp+0x80>)
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	f007 fa49 	bl	800f224 <sail_log>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e017      	b.n	8007dc6 <sail_codec_save_finish_v7_bmp+0x6e>
    SAIL_TRY(sail_check_io_valid(io));
 8007d96:	6838      	ldr	r0, [r7, #0]
 8007d98:	f006 fb94 	bl	800e4c4 <sail_check_io_valid>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	81fb      	strh	r3, [r7, #14]
 8007da0:	89fb      	ldrh	r3, [r7, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf14      	ite	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	2300      	moveq	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <sail_codec_save_finish_v7_bmp+0x5c>
 8007db0:	89fb      	ldrh	r3, [r7, #14]
 8007db2:	e008      	b.n	8007dc6 <sail_codec_save_finish_v7_bmp+0x6e>

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 8007db4:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <sail_codec_save_finish_v7_bmp+0x8c>)
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <sail_codec_save_finish_v7_bmp+0x88>)
 8007dba:	22b6      	movs	r2, #182	; 0xb6
 8007dbc:	4906      	ldr	r1, [pc, #24]	; (8007dd8 <sail_codec_save_finish_v7_bmp+0x80>)
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	f007 fa30 	bl	800f224 <sail_log>
 8007dc4:	2311      	movs	r3, #17
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	080175e8 	.word	0x080175e8
 8007dd4:	08017580 	.word	0x08017580
 8007dd8:	08017598 	.word	0x08017598
 8007ddc:	080175f4 	.word	0x080175f4
 8007de0:	080175f0 	.word	0x080175f0
 8007de4:	0801764c 	.word	0x0801764c

08007de8 <alloc_bmp_state>:
    /* Number of bytes to pad scan lines to 4-byte boundary. */
    unsigned pad_bytes;
    bool flipped;
};

static sail_status_t alloc_bmp_state(struct bmp_state **bmp_state) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	6078      	str	r0, [r7, #4]

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct bmp_state), &ptr));
 8007df0:	f107 0308 	add.w	r3, r7, #8
 8007df4:	4619      	mov	r1, r3
 8007df6:	20c4      	movs	r0, #196	; 0xc4
 8007df8:	f007 fb0c 	bl	800f414 <sail_malloc>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	81fb      	strh	r3, [r7, #14]
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <alloc_bmp_state+0x2c>
 8007e10:	89fb      	ldrh	r3, [r7, #14]
 8007e12:	e03b      	b.n	8007e8c <alloc_bmp_state+0xa4>
    *bmp_state = ptr;
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]

    if (*bmp_state == NULL) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <alloc_bmp_state+0x4e>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <alloc_bmp_state+0xac>)
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4b1c      	ldr	r3, [pc, #112]	; (8007e98 <alloc_bmp_state+0xb0>)
 8007e28:	226b      	movs	r2, #107	; 0x6b
 8007e2a:	491c      	ldr	r1, [pc, #112]	; (8007e9c <alloc_bmp_state+0xb4>)
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	f007 f9f9 	bl	800f224 <sail_log>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e02a      	b.n	8007e8c <alloc_bmp_state+0xa4>
    }

    (*bmp_state)->load_options     = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
    (*bmp_state)->save_options     = NULL;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	605a      	str	r2, [r3, #4]
    (*bmp_state)->bmp_load_options = 0;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	609a      	str	r2, [r3, #8]
    (*bmp_state)->iccp             = NULL;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    (*bmp_state)->palette          = NULL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    (*bmp_state)->palette_count    = 0;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    (*bmp_state)->bytes_in_row     = 0;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    (*bmp_state)->pad_bytes        = 0;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    (*bmp_state)->flipped          = false;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    return SAIL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	080176c4 	.word	0x080176c4
 8007e98:	08017668 	.word	0x08017668
 8007e9c:	0801766c 	.word	0x0801766c

08007ea0 <destroy_bmp_state>:

static void destroy_bmp_state(struct bmp_state *bmp_state) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

    if (bmp_state == NULL) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00f      	beq.n	8007ece <destroy_bmp_state+0x2e>
        return;
    }

    sail_destroy_iccp(bmp_state->iccp);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f005 fe6d 	bl	800db94 <sail_destroy_iccp>

    sail_free(bmp_state->palette);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f007 fb2f 	bl	800f524 <sail_free>

    sail_free(bmp_state);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f007 fb2c 	bl	800f524 <sail_free>
 8007ecc:	e000      	b.n	8007ed0 <destroy_bmp_state+0x30>
        return;
 8007ece:	bf00      	nop
}
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <read_bmp_headers>:

static sail_status_t read_bmp_headers(struct sail_io *io, struct bmp_state *bmp_state) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]

    size_t offset_of_bitmap_header;
    SAIL_TRY(io->tell(io->stream, &offset_of_bitmap_header));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	68d2      	ldr	r2, [r2, #12]
 8007eea:	f107 0108 	add.w	r1, r7, #8
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	83fb      	strh	r3, [r7, #30]
 8007ef6:	8bfb      	ldrh	r3, [r7, #30]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf14      	ite	ne
 8007efc:	2301      	movne	r3, #1
 8007efe:	2300      	moveq	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <read_bmp_headers+0x32>
 8007f06:	8bfb      	ldrh	r3, [r7, #30]
 8007f08:	e0eb      	b.n	80080e2 <read_bmp_headers+0x20a>

    SAIL_TRY(bmp_private_read_v2(io, &bmp_state->v2));
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	3330      	adds	r3, #48	; 0x30
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f947 	bl	80091a4 <bmp_private_read_v2>
 8007f16:	4603      	mov	r3, r0
 8007f18:	83bb      	strh	r3, [r7, #28]
 8007f1a:	8bbb      	ldrh	r3, [r7, #28]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bf14      	ite	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	2300      	moveq	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <read_bmp_headers+0x56>
 8007f2a:	8bbb      	ldrh	r3, [r7, #28]
 8007f2c:	e0d9      	b.n	80080e2 <read_bmp_headers+0x20a>

    /* If the height is negative, the bitmap is top-to-bottom. */
    if (bmp_state->v2.height < 0) {
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da09      	bge.n	8007f4a <read_bmp_headers+0x72>
        bmp_state->v2.height = -bmp_state->v2.height;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	425a      	negs	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
        bmp_state->flipped = false;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8007f48:	e003      	b.n	8007f52 <read_bmp_headers+0x7a>
    } else {
        bmp_state->flipped = true;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    switch (bmp_state->v2.size) {
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	2b7c      	cmp	r3, #124	; 0x7c
 8007f58:	d04d      	beq.n	8007ff6 <read_bmp_headers+0x11e>
 8007f5a:	2b7c      	cmp	r3, #124	; 0x7c
 8007f5c:	f200 80a8 	bhi.w	80080b0 <read_bmp_headers+0x1d8>
 8007f60:	2b6c      	cmp	r3, #108	; 0x6c
 8007f62:	d021      	beq.n	8007fa8 <read_bmp_headers+0xd0>
 8007f64:	2b6c      	cmp	r3, #108	; 0x6c
 8007f66:	f200 80a3 	bhi.w	80080b0 <read_bmp_headers+0x1d8>
 8007f6a:	2b0c      	cmp	r3, #12
 8007f6c:	d002      	beq.n	8007f74 <read_bmp_headers+0x9c>
 8007f6e:	2b28      	cmp	r3, #40	; 0x28
 8007f70:	d004      	beq.n	8007f7c <read_bmp_headers+0xa4>
 8007f72:	e09d      	b.n	80080b0 <read_bmp_headers+0x1d8>
        case SAIL_BITMAP_DIB_HEADER_V2_SIZE: {
            bmp_state->version = SAIL_BMP_V2;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2202      	movs	r2, #2
 8007f78:	735a      	strb	r2, [r3, #13]
            break;
 8007f7a:	e0b1      	b.n	80080e0 <read_bmp_headers+0x208>
        }
        case SAIL_BITMAP_DIB_HEADER_V3_SIZE: {
            bmp_state->version = SAIL_BMP_V3;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2203      	movs	r2, #3
 8007f80:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	3340      	adds	r3, #64	; 0x40
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 f97b 	bl	8009284 <bmp_private_read_v3>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	81fb      	strh	r3, [r7, #14]
 8007f92:	89fb      	ldrh	r3, [r7, #14]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf14      	ite	ne
 8007f98:	2301      	movne	r3, #1
 8007f9a:	2300      	moveq	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8099 	beq.w	80080d6 <read_bmp_headers+0x1fe>
 8007fa4:	89fb      	ldrh	r3, [r7, #14]
 8007fa6:	e09c      	b.n	80080e2 <read_bmp_headers+0x20a>
            break;
        }
        case SAIL_BITMAP_DIB_HEADER_V4_SIZE: {
            bmp_state->version = SAIL_BMP_V4;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2204      	movs	r2, #4
 8007fac:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	3340      	adds	r3, #64	; 0x40
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f965 	bl	8009284 <bmp_private_read_v3>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	827b      	strh	r3, [r7, #18]
 8007fbe:	8a7b      	ldrh	r3, [r7, #18]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <read_bmp_headers+0xfa>
 8007fce:	8a7b      	ldrh	r3, [r7, #18]
 8007fd0:	e087      	b.n	80080e2 <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v4(io, &bmp_state->v4));
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	3358      	adds	r3, #88	; 0x58
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f9d8 	bl	800938e <bmp_private_read_v4>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	823b      	strh	r3, [r7, #16]
 8007fe2:	8a3b      	ldrh	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d073      	beq.n	80080da <read_bmp_headers+0x202>
 8007ff2:	8a3b      	ldrh	r3, [r7, #16]
 8007ff4:	e075      	b.n	80080e2 <read_bmp_headers+0x20a>
            break;
        }
        case SAIL_BITMAP_DIB_HEADER_V5_SIZE: {
            bmp_state->version = SAIL_BMP_V5;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	735a      	strb	r2, [r3, #13]
            SAIL_TRY(bmp_private_read_v3(io, &bmp_state->v3));
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	3340      	adds	r3, #64	; 0x40
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f93e 	bl	8009284 <bmp_private_read_v3>
 8008008:	4603      	mov	r3, r0
 800800a:	837b      	strh	r3, [r7, #26]
 800800c:	8b7b      	ldrh	r3, [r7, #26]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bf14      	ite	ne
 8008012:	2301      	movne	r3, #1
 8008014:	2300      	moveq	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <read_bmp_headers+0x148>
 800801c:	8b7b      	ldrh	r3, [r7, #26]
 800801e:	e060      	b.n	80080e2 <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v4(io, &bmp_state->v4));
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	3358      	adds	r3, #88	; 0x58
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 f9b1 	bl	800938e <bmp_private_read_v4>
 800802c:	4603      	mov	r3, r0
 800802e:	833b      	strh	r3, [r7, #24]
 8008030:	8b3b      	ldrh	r3, [r7, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	bf14      	ite	ne
 8008036:	2301      	movne	r3, #1
 8008038:	2300      	moveq	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <read_bmp_headers+0x16c>
 8008040:	8b3b      	ldrh	r3, [r7, #24]
 8008042:	e04e      	b.n	80080e2 <read_bmp_headers+0x20a>
            SAIL_TRY(bmp_private_read_v5(io, &bmp_state->v5));
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	339c      	adds	r3, #156	; 0x9c
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fb0b 	bl	8009666 <bmp_private_read_v5>
 8008050:	4603      	mov	r3, r0
 8008052:	82fb      	strh	r3, [r7, #22]
 8008054:	8afb      	ldrh	r3, [r7, #22]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bf14      	ite	ne
 800805a:	2301      	movne	r3, #1
 800805c:	2300      	moveq	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <read_bmp_headers+0x190>
 8008064:	8afb      	ldrh	r3, [r7, #22]
 8008066:	e03c      	b.n	80080e2 <read_bmp_headers+0x20a>

            if (memcmp(&bmp_state->v4.color_space_type, SAIL_PROFILE_EMBEDDED, sizeof(SAIL_PROFILE_EMBEDDED)) == 0) {
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	3368      	adds	r3, #104	; 0x68
 800806c:	2204      	movs	r2, #4
 800806e:	491f      	ldr	r1, [pc, #124]	; (80080ec <read_bmp_headers+0x214>)
 8008070:	4618      	mov	r0, r3
 8008072:	f00b fa57 	bl	8013524 <memcmp>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d130      	bne.n	80080de <read_bmp_headers+0x206>
                SAIL_TRY(bmp_private_fetch_iccp(io, (long)(offset_of_bitmap_header + bmp_state->v5.profile_data), bmp_state->v5.profile_size, &bmp_state->iccp));
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	4619      	mov	r1, r3
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	33ac      	adds	r3, #172	; 0xac
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fbc2 	bl	800981c <bmp_private_fetch_iccp>
 8008098:	4603      	mov	r3, r0
 800809a:	82bb      	strh	r3, [r7, #20]
 800809c:	8abb      	ldrh	r3, [r7, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d018      	beq.n	80080de <read_bmp_headers+0x206>
 80080ac:	8abb      	ldrh	r3, [r7, #20]
 80080ae:	e018      	b.n	80080e2 <read_bmp_headers+0x20a>
            }

            break;
        }
        default: {
            SAIL_LOG_ERROR("BMP: Unsupported file header size %u", bmp_state->v2.size);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <read_bmp_headers+0x218>)
 80080b8:	22b4      	movs	r2, #180	; 0xb4
 80080ba:	490e      	ldr	r1, [pc, #56]	; (80080f4 <read_bmp_headers+0x21c>)
 80080bc:	2001      	movs	r0, #1
 80080be:	f007 f8b1 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 80080c2:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <read_bmp_headers+0x220>)
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <read_bmp_headers+0x224>)
 80080c8:	22b5      	movs	r2, #181	; 0xb5
 80080ca:	490a      	ldr	r1, [pc, #40]	; (80080f4 <read_bmp_headers+0x21c>)
 80080cc:	2001      	movs	r0, #1
 80080ce:	f007 f8a9 	bl	800f224 <sail_log>
 80080d2:	23d4      	movs	r3, #212	; 0xd4
 80080d4:	e005      	b.n	80080e2 <read_bmp_headers+0x20a>
            break;
 80080d6:	bf00      	nop
 80080d8:	e002      	b.n	80080e0 <read_bmp_headers+0x208>
            break;
 80080da:	bf00      	nop
 80080dc:	e000      	b.n	80080e0 <read_bmp_headers+0x208>
            break;
 80080de:	bf00      	nop
        }
    }

    return SAIL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3720      	adds	r7, #32
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	0801ceec 	.word	0x0801ceec
 80080f0:	080176e4 	.word	0x080176e4
 80080f4:	0801766c 	.word	0x0801766c
 80080f8:	0801770c 	.word	0x0801770c
 80080fc:	08017668 	.word	0x08017668

08008100 <bmp_private_read_init>:

/*
 * Decoding functions.
 */

sail_status_t bmp_private_read_init(struct sail_io *io, const struct sail_load_options *load_options, void **state, int bmp_load_options) {
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b097      	sub	sp, #92	; 0x5c
 8008104:	af02      	add	r7, sp, #8
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]

    /* Allocate a new state. */
    struct bmp_state *bmp_state;
    SAIL_TRY(alloc_bmp_state(&bmp_state));
 800810e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fe68 	bl	8007de8 <alloc_bmp_state>
 8008118:	4603      	mov	r3, r0
 800811a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800811e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf14      	ite	ne
 8008126:	2301      	movne	r3, #1
 8008128:	2300      	moveq	r3, #0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <bmp_private_read_init+0x36>
 8008130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008134:	e312      	b.n	800875c <bmp_private_read_init+0x65c>
    *state = bmp_state;
 8008136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]

    /* Shallow copy load options. */
    bmp_state->load_options = load_options;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	601a      	str	r2, [r3, #0]

    bmp_state->bmp_load_options = bmp_load_options;
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	609a      	str	r2, [r3, #8]

    if (bmp_load_options & SAIL_READ_BMP_FILE_HEADER) {
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8092 	beq.w	8008278 <bmp_private_read_init+0x178>
        /* "BM" or 0x02. */
        uint16_t magic;
        SAIL_TRY(io->strict_read(io->stream, &magic, sizeof(magic)));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	68d0      	ldr	r0, [r2, #12]
 800815c:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8008160:	2202      	movs	r2, #2
 8008162:	4798      	blx	r3
 8008164:	4603      	mov	r3, r0
 8008166:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800816a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf14      	ite	ne
 8008172:	2301      	movne	r3, #1
 8008174:	2300      	moveq	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <bmp_private_read_init+0x82>
 800817c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008180:	e2ec      	b.n	800875c <bmp_private_read_init+0x65c>
        SAIL_TRY(io->seek(io->stream, 0, SEEK_SET));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	68d0      	ldr	r0, [r2, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	4798      	blx	r3
 8008190:	4603      	mov	r3, r0
 8008192:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008196:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	bf14      	ite	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	2300      	moveq	r3, #0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <bmp_private_read_init+0xae>
 80081a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80081ac:	e2d6      	b.n	800875c <bmp_private_read_init+0x65c>

        if (magic == SAIL_DDB_IDENTIFIER) {
 80081ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081b0:	2202      	movs	r2, #2
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d126      	bne.n	8008204 <bmp_private_read_init+0x104>
            bmp_state->version = SAIL_BMP_V1;
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	2201      	movs	r2, #1
 80081ba:	735a      	strb	r2, [r3, #13]

            SAIL_TRY(bmp_private_read_ddb_file_header(io, &bmp_state->ddb_file_header));
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	330e      	adds	r3, #14
 80081c0:	4619      	mov	r1, r3
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fec9 	bl	8008f5a <bmp_private_read_ddb_file_header>
 80081c8:	4603      	mov	r3, r0
 80081ca:	877b      	strh	r3, [r7, #58]	; 0x3a
 80081cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bf14      	ite	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	2300      	moveq	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <bmp_private_read_init+0xe0>
 80081dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80081de:	e2bd      	b.n	800875c <bmp_private_read_init+0x65c>
            SAIL_TRY(bmp_private_read_v1(io, &bmp_state->v1));
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	3310      	adds	r3, #16
 80081e4:	4619      	mov	r1, r3
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fed4 	bl	8008f94 <bmp_private_read_v1>
 80081ec:	4603      	mov	r3, r0
 80081ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80081f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bf14      	ite	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	2300      	moveq	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d04f      	beq.n	80082a0 <bmp_private_read_init+0x1a0>
 8008200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008202:	e2ab      	b.n	800875c <bmp_private_read_init+0x65c>
        } else if (magic == SAIL_DIB_IDENTIFIER) {
 8008204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008206:	f644 5242 	movw	r2, #19778	; 0x4d42
 800820a:	4293      	cmp	r3, r2
 800820c:	d122      	bne.n	8008254 <bmp_private_read_init+0x154>
            SAIL_TRY(bmp_private_read_dib_file_header(io, &bmp_state->dib_file_header));
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	3320      	adds	r3, #32
 8008212:	4619      	mov	r1, r3
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 ff55 	bl	80090c4 <bmp_private_read_dib_file_header>
 800821a:	4603      	mov	r3, r0
 800821c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800821e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <bmp_private_read_init+0x132>
 800822e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008230:	e294      	b.n	800875c <bmp_private_read_init+0x65c>
            SAIL_TRY(read_bmp_headers(io, bmp_state));
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	4619      	mov	r1, r3
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff fe4e 	bl	8007ed8 <read_bmp_headers>
 800823c:	4603      	mov	r3, r0
 800823e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d027      	beq.n	80082a0 <bmp_private_read_init+0x1a0>
 8008250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008252:	e283      	b.n	800875c <bmp_private_read_init+0x65c>
        } else {
            SAIL_LOG_ERROR("BMP: 0x%x is not a valid magic number", magic);
 8008254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4b90      	ldr	r3, [pc, #576]	; (800849c <bmp_private_read_init+0x39c>)
 800825a:	22db      	movs	r2, #219	; 0xdb
 800825c:	4990      	ldr	r1, [pc, #576]	; (80084a0 <bmp_private_read_init+0x3a0>)
 800825e:	2001      	movs	r0, #1
 8008260:	f006 ffe0 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8008264:	4b8f      	ldr	r3, [pc, #572]	; (80084a4 <bmp_private_read_init+0x3a4>)
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4b8f      	ldr	r3, [pc, #572]	; (80084a8 <bmp_private_read_init+0x3a8>)
 800826a:	22dc      	movs	r2, #220	; 0xdc
 800826c:	498c      	ldr	r1, [pc, #560]	; (80084a0 <bmp_private_read_init+0x3a0>)
 800826e:	2001      	movs	r0, #1
 8008270:	f006 ffd8 	bl	800f224 <sail_log>
 8008274:	23d4      	movs	r3, #212	; 0xd4
 8008276:	e271      	b.n	800875c <bmp_private_read_init+0x65c>
        }
    } else {
        SAIL_TRY(read_bmp_headers(io, bmp_state));
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	4619      	mov	r1, r3
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff fe2b 	bl	8007ed8 <read_bmp_headers>
 8008282:	4603      	mov	r3, r0
 8008284:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008288:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf14      	ite	ne
 8008290:	2301      	movne	r3, #1
 8008292:	2300      	moveq	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <bmp_private_read_init+0x1a0>
 800829a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800829e:	e25d      	b.n	800875c <bmp_private_read_init+0x65c>
    }

    /* Check BMP restrictions. */
    if (bmp_state->version == SAIL_BMP_V1) {
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	7b5b      	ldrb	r3, [r3, #13]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d15a      	bne.n	800835e <bmp_private_read_init+0x25e>
        if (bmp_state->v1.type != 0) {
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	8a1b      	ldrh	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00f      	beq.n	80082d0 <bmp_private_read_init+0x1d0>
            SAIL_LOG_ERROR("BMP: DDB type must always be 0");
 80082b0:	4b7e      	ldr	r3, [pc, #504]	; (80084ac <bmp_private_read_init+0x3ac>)
 80082b2:	22e5      	movs	r2, #229	; 0xe5
 80082b4:	497a      	ldr	r1, [pc, #488]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80082b6:	2001      	movs	r0, #1
 80082b8:	f006 ffb4 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 80082bc:	4b7c      	ldr	r3, [pc, #496]	; (80084b0 <bmp_private_read_init+0x3b0>)
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4b79      	ldr	r3, [pc, #484]	; (80084a8 <bmp_private_read_init+0x3a8>)
 80082c2:	22e6      	movs	r2, #230	; 0xe6
 80082c4:	4976      	ldr	r1, [pc, #472]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80082c6:	2001      	movs	r0, #1
 80082c8:	f006 ffac 	bl	800f224 <sail_log>
 80082cc:	23d5      	movs	r3, #213	; 0xd5
 80082ce:	e245      	b.n	800875c <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.planes != 1) {
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	7e1b      	ldrb	r3, [r3, #24]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d00f      	beq.n	80082f8 <bmp_private_read_init+0x1f8>
            SAIL_LOG_ERROR("BMP: DDB planes must always be 1");
 80082d8:	4b76      	ldr	r3, [pc, #472]	; (80084b4 <bmp_private_read_init+0x3b4>)
 80082da:	22e9      	movs	r2, #233	; 0xe9
 80082dc:	4970      	ldr	r1, [pc, #448]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80082de:	2001      	movs	r0, #1
 80082e0:	f006 ffa0 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 80082e4:	4b72      	ldr	r3, [pc, #456]	; (80084b0 <bmp_private_read_init+0x3b0>)
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	4b6f      	ldr	r3, [pc, #444]	; (80084a8 <bmp_private_read_init+0x3a8>)
 80082ea:	22ea      	movs	r2, #234	; 0xea
 80082ec:	496c      	ldr	r1, [pc, #432]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80082ee:	2001      	movs	r0, #1
 80082f0:	f006 ff98 	bl	800f224 <sail_log>
 80082f4:	23d5      	movs	r3, #213	; 0xd5
 80082f6:	e231      	b.n	800875c <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.pixels != 0) {
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00f      	beq.n	8008320 <bmp_private_read_init+0x220>
            SAIL_LOG_ERROR("BMP: DDB pixels must always be 0");
 8008300:	4b6d      	ldr	r3, [pc, #436]	; (80084b8 <bmp_private_read_init+0x3b8>)
 8008302:	22ed      	movs	r2, #237	; 0xed
 8008304:	4966      	ldr	r1, [pc, #408]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008306:	2001      	movs	r0, #1
 8008308:	f006 ff8c 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800830c:	4b68      	ldr	r3, [pc, #416]	; (80084b0 <bmp_private_read_init+0x3b0>)
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4b65      	ldr	r3, [pc, #404]	; (80084a8 <bmp_private_read_init+0x3a8>)
 8008312:	22ee      	movs	r2, #238	; 0xee
 8008314:	4962      	ldr	r1, [pc, #392]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008316:	2001      	movs	r0, #1
 8008318:	f006 ff84 	bl	800f224 <sail_log>
 800831c:	23d5      	movs	r3, #213	; 0xd5
 800831e:	e21d      	b.n	800875c <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v1.bit_count != 1 && bmp_state->v1.bit_count != 4 && bmp_state->v1.bit_count != 8) {
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	7e5b      	ldrb	r3, [r3, #25]
 8008324:	2b01      	cmp	r3, #1
 8008326:	f000 808e 	beq.w	8008446 <bmp_private_read_init+0x346>
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	7e5b      	ldrb	r3, [r3, #25]
 800832e:	2b04      	cmp	r3, #4
 8008330:	f000 8089 	beq.w	8008446 <bmp_private_read_init+0x346>
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	7e5b      	ldrb	r3, [r3, #25]
 8008338:	2b08      	cmp	r3, #8
 800833a:	f000 8084 	beq.w	8008446 <bmp_private_read_init+0x346>
            SAIL_LOG_ERROR("BMP: DDB bpp must be 1, 4, or 8");
 800833e:	4b5f      	ldr	r3, [pc, #380]	; (80084bc <bmp_private_read_init+0x3bc>)
 8008340:	22f1      	movs	r2, #241	; 0xf1
 8008342:	4957      	ldr	r1, [pc, #348]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008344:	2001      	movs	r0, #1
 8008346:	f006 ff6d 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800834a:	4b59      	ldr	r3, [pc, #356]	; (80084b0 <bmp_private_read_init+0x3b0>)
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4b56      	ldr	r3, [pc, #344]	; (80084a8 <bmp_private_read_init+0x3a8>)
 8008350:	22f2      	movs	r2, #242	; 0xf2
 8008352:	4953      	ldr	r1, [pc, #332]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008354:	2001      	movs	r0, #1
 8008356:	f006 ff65 	bl	800f224 <sail_log>
 800835a:	23d5      	movs	r3, #213	; 0xd5
 800835c:	e1fe      	b.n	800875c <bmp_private_read_init+0x65c>
        }
    } else if (bmp_state->version >= SAIL_BMP_V3) {
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	7b5b      	ldrb	r3, [r3, #13]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d96f      	bls.n	8008446 <bmp_private_read_init+0x346>
        if (bmp_state->v3.compression == SAIL_BI_BITFIELDS && bmp_state->v2.bit_count != 16 && bmp_state->v2.bit_count != 32) {
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	2203      	movs	r2, #3
 800836c:	4293      	cmp	r3, r2
 800836e:	d117      	bne.n	80083a0 <bmp_private_read_init+0x2a0>
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008374:	2b10      	cmp	r3, #16
 8008376:	d013      	beq.n	80083a0 <bmp_private_read_init+0x2a0>
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837c:	2b20      	cmp	r3, #32
 800837e:	d00f      	beq.n	80083a0 <bmp_private_read_init+0x2a0>
            SAIL_LOG_ERROR("BMP: BitFields compression is allowed only for 16 or 32 bpp");
 8008380:	4b4f      	ldr	r3, [pc, #316]	; (80084c0 <bmp_private_read_init+0x3c0>)
 8008382:	22f6      	movs	r2, #246	; 0xf6
 8008384:	4946      	ldr	r1, [pc, #280]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008386:	2001      	movs	r0, #1
 8008388:	f006 ff4c 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 800838c:	4b48      	ldr	r3, [pc, #288]	; (80084b0 <bmp_private_read_init+0x3b0>)
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4b45      	ldr	r3, [pc, #276]	; (80084a8 <bmp_private_read_init+0x3a8>)
 8008392:	22f7      	movs	r2, #247	; 0xf7
 8008394:	4942      	ldr	r1, [pc, #264]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008396:	2001      	movs	r0, #1
 8008398:	f006 ff44 	bl	800f224 <sail_log>
 800839c:	23d5      	movs	r3, #213	; 0xd5
 800839e:	e1dd      	b.n	800875c <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression != SAIL_BI_RGB && bmp_state->v3.compression != SAIL_BI_RLE4 && bmp_state->v3.compression != SAIL_BI_RLE8) {
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	2200      	movs	r2, #0
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d019      	beq.n	80083de <bmp_private_read_init+0x2de>
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	2202      	movs	r2, #2
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d014      	beq.n	80083de <bmp_private_read_init+0x2de>
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	2201      	movs	r2, #1
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00f      	beq.n	80083de <bmp_private_read_init+0x2de>
            SAIL_LOG_ERROR("BMP: Only RGB, RLE4, and RLE8 compressions are supported");
 80083be:	4b41      	ldr	r3, [pc, #260]	; (80084c4 <bmp_private_read_init+0x3c4>)
 80083c0:	22fa      	movs	r2, #250	; 0xfa
 80083c2:	4937      	ldr	r1, [pc, #220]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80083c4:	2001      	movs	r0, #1
 80083c6:	f006 ff2d 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_COMPRESSION);
 80083ca:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <bmp_private_read_init+0x3c8>)
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <bmp_private_read_init+0x3a8>)
 80083d0:	22fb      	movs	r2, #251	; 0xfb
 80083d2:	4933      	ldr	r1, [pc, #204]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80083d4:	2001      	movs	r0, #1
 80083d6:	f006 ff25 	bl	800f224 <sail_log>
 80083da:	23cb      	movs	r3, #203	; 0xcb
 80083dc:	e1be      	b.n	800875c <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression == SAIL_BI_RLE4 && bmp_state->v2.bit_count != 4) {
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	2202      	movs	r2, #2
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d113      	bne.n	8008410 <bmp_private_read_init+0x310>
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d00f      	beq.n	8008410 <bmp_private_read_init+0x310>
            SAIL_LOG_ERROR("BMP: RLE4 compression must only be used with 4 bpp");
 80083f0:	4b36      	ldr	r3, [pc, #216]	; (80084cc <bmp_private_read_init+0x3cc>)
 80083f2:	22fe      	movs	r2, #254	; 0xfe
 80083f4:	492a      	ldr	r1, [pc, #168]	; (80084a0 <bmp_private_read_init+0x3a0>)
 80083f6:	2001      	movs	r0, #1
 80083f8:	f006 ff14 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 80083fc:	4b2c      	ldr	r3, [pc, #176]	; (80084b0 <bmp_private_read_init+0x3b0>)
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <bmp_private_read_init+0x3a8>)
 8008402:	22ff      	movs	r2, #255	; 0xff
 8008404:	4926      	ldr	r1, [pc, #152]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008406:	2001      	movs	r0, #1
 8008408:	f006 ff0c 	bl	800f224 <sail_log>
 800840c:	23d5      	movs	r3, #213	; 0xd5
 800840e:	e1a5      	b.n	800875c <bmp_private_read_init+0x65c>
        }
        if (bmp_state->v3.compression == SAIL_BI_RLE8 && bmp_state->v2.bit_count != 8) {
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	2201      	movs	r2, #1
 8008416:	4293      	cmp	r3, r2
 8008418:	d115      	bne.n	8008446 <bmp_private_read_init+0x346>
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841e:	2b08      	cmp	r3, #8
 8008420:	d011      	beq.n	8008446 <bmp_private_read_init+0x346>
            SAIL_LOG_ERROR("BMP: RLE8 compression must only be used with 8 bpp");
 8008422:	4b2b      	ldr	r3, [pc, #172]	; (80084d0 <bmp_private_read_init+0x3d0>)
 8008424:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008428:	491d      	ldr	r1, [pc, #116]	; (80084a0 <bmp_private_read_init+0x3a0>)
 800842a:	2001      	movs	r0, #1
 800842c:	f006 fefa 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8008430:	4b1f      	ldr	r3, [pc, #124]	; (80084b0 <bmp_private_read_init+0x3b0>)
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <bmp_private_read_init+0x3a8>)
 8008436:	f240 1203 	movw	r2, #259	; 0x103
 800843a:	4919      	ldr	r1, [pc, #100]	; (80084a0 <bmp_private_read_init+0x3a0>)
 800843c:	2001      	movs	r0, #1
 800843e:	f006 fef1 	bl	800f224 <sail_log>
 8008442:	23d5      	movs	r3, #213	; 0xd5
 8008444:	e18a      	b.n	800875c <bmp_private_read_init+0x65c>
        }
    }

    SAIL_TRY(bmp_private_bit_count_to_pixel_format(bmp_state->version == SAIL_BMP_V1 ? bmp_state->v1.bit_count : bmp_state->v2.bit_count,
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	7b5b      	ldrb	r3, [r3, #13]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d103      	bne.n	8008456 <bmp_private_read_init+0x356>
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	7e5b      	ldrb	r3, [r3, #25]
 8008452:	b29b      	uxth	r3, r3
 8008454:	e001      	b.n	800845a <bmp_private_read_init+0x35a>
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845c:	320c      	adds	r2, #12
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f95b 	bl	800971c <bmp_private_bit_count_to_pixel_format>
 8008466:	4603      	mov	r3, r0
 8008468:	86fb      	strh	r3, [r7, #54]	; 0x36
 800846a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800846c:	2b00      	cmp	r3, #0
 800846e:	bf14      	ite	ne
 8008470:	2301      	movne	r3, #1
 8008472:	2300      	moveq	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <bmp_private_read_init+0x37e>
 800847a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800847c:	e16e      	b.n	800875c <bmp_private_read_init+0x65c>
                                                    &bmp_state->source_pixel_format));

    if (bmp_state->version < SAIL_BMP_V3) {
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	7b5b      	ldrb	r3, [r3, #13]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d828      	bhi.n	80084d8 <bmp_private_read_init+0x3d8>
        SAIL_LOG_DEBUG("BMP: Version(%d)", bmp_state->version);
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	7b5b      	ldrb	r3, [r3, #13]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <bmp_private_read_init+0x3d4>)
 800848e:	f240 120b 	movw	r2, #267	; 0x10b
 8008492:	4903      	ldr	r1, [pc, #12]	; (80084a0 <bmp_private_read_init+0x3a0>)
 8008494:	2005      	movs	r0, #5
 8008496:	f006 fec5 	bl	800f224 <sail_log>
 800849a:	e02b      	b.n	80084f4 <bmp_private_read_init+0x3f4>
 800849c:	0801772c 	.word	0x0801772c
 80084a0:	0801766c 	.word	0x0801766c
 80084a4:	0801770c 	.word	0x0801770c
 80084a8:	08017668 	.word	0x08017668
 80084ac:	08017754 	.word	0x08017754
 80084b0:	08017774 	.word	0x08017774
 80084b4:	0801778c 	.word	0x0801778c
 80084b8:	080177b0 	.word	0x080177b0
 80084bc:	080177d4 	.word	0x080177d4
 80084c0:	080177f4 	.word	0x080177f4
 80084c4:	08017830 	.word	0x08017830
 80084c8:	0801786c 	.word	0x0801786c
 80084cc:	08017890 	.word	0x08017890
 80084d0:	080178c4 	.word	0x080178c4
 80084d4:	080178f8 	.word	0x080178f8
    } else {
        SAIL_LOG_DEBUG("BMP: Version(%d), compression(%u)", bmp_state->version, bmp_state->v3.compression);
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	7b5b      	ldrb	r3, [r3, #13]
 80084dc:	461a      	mov	r2, r3
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	9200      	str	r2, [sp, #0]
 80084e6:	4b9f      	ldr	r3, [pc, #636]	; (8008764 <bmp_private_read_init+0x664>)
 80084e8:	f240 120d 	movw	r2, #269	; 0x10d
 80084ec:	499e      	ldr	r1, [pc, #632]	; (8008768 <bmp_private_read_init+0x668>)
 80084ee:	2005      	movs	r0, #5
 80084f0:	f006 fe98 	bl	800f224 <sail_log>
    }

    /* Read palette.  */
    if (bmp_state->version == SAIL_BMP_V1) {
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	7b5b      	ldrb	r3, [r3, #13]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d117      	bne.n	800852c <bmp_private_read_init+0x42c>
        SAIL_TRY(bmp_private_fill_system_palette(bmp_state->v1.bit_count, &bmp_state->palette, &bmp_state->palette_count));
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	7e5b      	ldrb	r3, [r3, #25]
 8008500:	4618      	mov	r0, r3
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	33b4      	adds	r3, #180	; 0xb4
 800850c:	461a      	mov	r2, r3
 800850e:	f001 fae3 	bl	8009ad8 <bmp_private_fill_system_palette>
 8008512:	4603      	mov	r3, r0
 8008514:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80d2 	beq.w	80086cc <bmp_private_read_init+0x5cc>
 8008528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800852a:	e117      	b.n	800875c <bmp_private_read_init+0x65c>
    } else if (bmp_state->v2.bit_count < 16) {
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008530:	2b0f      	cmp	r3, #15
 8008532:	f200 80cb 	bhi.w	80086cc <bmp_private_read_init+0x5cc>
        if (bmp_state->version == SAIL_BMP_V2) {
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	7b5b      	ldrb	r3, [r3, #13]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d109      	bne.n	8008552 <bmp_private_read_init+0x452>
            bmp_state->palette_count = 1 << bmp_state->v2.bit_count;
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008542:	461a      	mov	r2, r3
 8008544:	2301      	movs	r3, #1
 8008546:	fa03 f202 	lsl.w	r2, r3, r2
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008550:	e00e      	b.n	8008570 <bmp_private_read_init+0x470>
        } else {
            bmp_state->palette_count = (bmp_state->v3.colors_used == 0) ? (1U << bmp_state->v2.bit_count) : bmp_state->v3.colors_used;
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <bmp_private_read_init+0x466>
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855e:	461a      	mov	r2, r3
 8008560:	2301      	movs	r3, #1
 8008562:	4093      	lsls	r3, r2
 8008564:	e001      	b.n	800856a <bmp_private_read_init+0x46a>
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        }

        if (bmp_state->palette_count == 0) {
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d111      	bne.n	800859e <bmp_private_read_init+0x49e>
            SAIL_LOG_ERROR("BMP: Indexed image has no palette");
 800857a:	4b7c      	ldr	r3, [pc, #496]	; (800876c <bmp_private_read_init+0x66c>)
 800857c:	f240 121b 	movw	r2, #283	; 0x11b
 8008580:	4979      	ldr	r1, [pc, #484]	; (8008768 <bmp_private_read_init+0x668>)
 8008582:	2001      	movs	r0, #1
 8008584:	f006 fe4e 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8008588:	4b79      	ldr	r3, [pc, #484]	; (8008770 <bmp_private_read_init+0x670>)
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4b79      	ldr	r3, [pc, #484]	; (8008774 <bmp_private_read_init+0x674>)
 800858e:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8008592:	4975      	ldr	r1, [pc, #468]	; (8008768 <bmp_private_read_init+0x668>)
 8008594:	2001      	movs	r0, #1
 8008596:	f006 fe45 	bl	800f224 <sail_log>
 800859a:	23d3      	movs	r3, #211	; 0xd3
 800859c:	e0de      	b.n	800875c <bmp_private_read_init+0x65c>
        }

        void *ptr;
        SAIL_TRY(sail_malloc(sizeof(sail_rgba32_t) * bmp_state->palette_count, &ptr));
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f107 021c 	add.w	r2, r7, #28
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f006 ff31 	bl	800f414 <sail_malloc>
 80085b2:	4603      	mov	r3, r0
 80085b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80085b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf14      	ite	ne
 80085bc:	2301      	movne	r3, #1
 80085be:	2300      	moveq	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <bmp_private_read_init+0x4ca>
 80085c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085c8:	e0c8      	b.n	800875c <bmp_private_read_init+0x65c>
        bmp_state->palette = ptr;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        if (bmp_state->version == SAIL_BMP_V2) {
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	7b5b      	ldrb	r3, [r3, #13]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d13c      	bne.n	8008654 <bmp_private_read_init+0x554>
            sail_rgb24_t rgb;

            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 80085da:	2300      	movs	r3, #0
 80085dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085de:	e032      	b.n	8008646 <bmp_private_read_init+0x546>
                SAIL_TRY(sail_read_pixel3_uint8(io, &rgb));
 80085e0:	f107 0318 	add.w	r3, r7, #24
 80085e4:	4619      	mov	r1, r3
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f007 f8ac 	bl	800f744 <sail_read_pixel3_uint8>
 80085ec:	4603      	mov	r3, r0
 80085ee:	863b      	strh	r3, [r7, #48]	; 0x30
 80085f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bf14      	ite	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	2300      	moveq	r3, #0
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <bmp_private_read_init+0x504>
 8008600:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 8008602:	e0ab      	b.n	800875c <bmp_private_read_init+0x65c>

                bmp_state->palette[i].component1 = rgb.component1;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800860a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800860c:	4613      	mov	r3, r2
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	4413      	add	r3, r2
 8008612:	440b      	add	r3, r1
 8008614:	7e3a      	ldrb	r2, [r7, #24]
 8008616:	701a      	strb	r2, [r3, #0]
                bmp_state->palette[i].component2 = rgb.component2;
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800861e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008620:	4613      	mov	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	4413      	add	r3, r2
 8008626:	440b      	add	r3, r1
 8008628:	7e7a      	ldrb	r2, [r7, #25]
 800862a:	705a      	strb	r2, [r3, #1]
                bmp_state->palette[i].component3 = rgb.component3;
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008634:	4613      	mov	r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4413      	add	r3, r2
 800863a:	440b      	add	r3, r1
 800863c:	7eba      	ldrb	r2, [r7, #26]
 800863e:	709a      	strb	r2, [r3, #2]
            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008642:	3301      	adds	r3, #1
 8008644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800864c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800864e:	429a      	cmp	r2, r3
 8008650:	d3c6      	bcc.n	80085e0 <bmp_private_read_init+0x4e0>
 8008652:	e03b      	b.n	80086cc <bmp_private_read_init+0x5cc>
            }
        } else {
            sail_rgba32_t rgba;

            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 8008654:	2300      	movs	r3, #0
 8008656:	64bb      	str	r3, [r7, #72]	; 0x48
 8008658:	e032      	b.n	80086c0 <bmp_private_read_init+0x5c0>
                SAIL_TRY(sail_read_pixel4_uint8(io, &rgba));
 800865a:	f107 0314 	add.w	r3, r7, #20
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f007 f8d7 	bl	800f814 <sail_read_pixel4_uint8>
 8008666:	4603      	mov	r3, r0
 8008668:	867b      	strh	r3, [r7, #50]	; 0x32
 800866a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800866c:	2b00      	cmp	r3, #0
 800866e:	bf14      	ite	ne
 8008670:	2301      	movne	r3, #1
 8008672:	2300      	moveq	r3, #0
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <bmp_private_read_init+0x57e>
 800867a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
            SAIL_LOG_AND_RETURN(SAIL_ERROR_MISSING_PALETTE);
 800867c:	e06e      	b.n	800875c <bmp_private_read_init+0x65c>

                bmp_state->palette[i].component1 = rgba.component1;
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008686:	4613      	mov	r3, r2
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	4413      	add	r3, r2
 800868c:	440b      	add	r3, r1
 800868e:	7d3a      	ldrb	r2, [r7, #20]
 8008690:	701a      	strb	r2, [r3, #0]
                bmp_state->palette[i].component2 = rgba.component2;
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869a:	4613      	mov	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4413      	add	r3, r2
 80086a0:	440b      	add	r3, r1
 80086a2:	7d7a      	ldrb	r2, [r7, #21]
 80086a4:	705a      	strb	r2, [r3, #1]
                bmp_state->palette[i].component3 = rgba.component3;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80086ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ae:	4613      	mov	r3, r2
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	4413      	add	r3, r2
 80086b4:	440b      	add	r3, r1
 80086b6:	7dba      	ldrb	r2, [r7, #22]
 80086b8:	709a      	strb	r2, [r3, #2]
            for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 80086ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086bc:	3301      	adds	r3, #1
 80086be:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d3c6      	bcc.n	800865a <bmp_private_read_init+0x55a>
            }
        }
    }

    /* Calculate the number of pad bytes to align scan lines to 4-byte boundary. */
    if (bmp_state->version == SAIL_BMP_V1) {
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	7b5b      	ldrb	r3, [r3, #13]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d121      	bne.n	8008718 <bmp_private_read_init+0x618>
        SAIL_TRY(bmp_private_bytes_in_row(bmp_state->v1.width, bmp_state->v1.bit_count, &bmp_state->bytes_in_row));
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	8a5b      	ldrh	r3, [r3, #18]
 80086d8:	4618      	mov	r0, r3
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	7e5b      	ldrb	r3, [r3, #25]
 80086de:	4619      	mov	r1, r3
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	33b8      	adds	r3, #184	; 0xb8
 80086e4:	461a      	mov	r2, r3
 80086e6:	f001 f959 	bl	800999c <bmp_private_bytes_in_row>
 80086ea:	4603      	mov	r3, r0
 80086ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf14      	ite	ne
 80086f4:	2301      	movne	r3, #1
 80086f6:	2300      	moveq	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <bmp_private_read_init+0x602>
 80086fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008700:	e02c      	b.n	800875c <bmp_private_read_init+0x65c>
        bmp_state->pad_bytes = bmp_state->v1.byte_width - bmp_state->bytes_in_row;
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	8adb      	ldrh	r3, [r3, #22]
 8008706:	4619      	mov	r1, r3
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	1a8a      	subs	r2, r1, r2
 8008712:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8008716:	e020      	b.n	800875a <bmp_private_read_init+0x65a>
    } else {
        SAIL_TRY(bmp_private_bytes_in_row(bmp_state->v2.width, bmp_state->v2.bit_count, &bmp_state->bytes_in_row));
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	4618      	mov	r0, r3
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008722:	4619      	mov	r1, r3
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	33b8      	adds	r3, #184	; 0xb8
 8008728:	461a      	mov	r2, r3
 800872a:	f001 f937 	bl	800999c <bmp_private_bytes_in_row>
 800872e:	4603      	mov	r3, r0
 8008730:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008734:	2b00      	cmp	r3, #0
 8008736:	bf14      	ite	ne
 8008738:	2301      	movne	r3, #1
 800873a:	2300      	moveq	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <bmp_private_read_init+0x646>
 8008742:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008744:	e00a      	b.n	800875c <bmp_private_read_init+0x65c>
        bmp_state->pad_bytes = bmp_private_pad_bytes(bmp_state->bytes_in_row);
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800874c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f001 f9ac 	bl	8009aac <bmp_private_pad_bytes>
 8008754:	4603      	mov	r3, r0
 8008756:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    }

    return SAIL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3754      	adds	r7, #84	; 0x54
 8008760:	46bd      	mov	sp, r7
 8008762:	bd90      	pop	{r4, r7, pc}
 8008764:	0801790c 	.word	0x0801790c
 8008768:	0801766c 	.word	0x0801766c
 800876c:	08017930 	.word	0x08017930
 8008770:	08017954 	.word	0x08017954
 8008774:	08017668 	.word	0x08017668

08008778 <bmp_private_read_seek_next_frame>:

sail_status_t bmp_private_read_seek_next_frame(void *state, struct sail_io *io, struct sail_image **image) {
 8008778:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800877c:	b08c      	sub	sp, #48	; 0x30
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24

    struct sail_image *image_local;
    SAIL_TRY(sail_alloc_image(&image_local));
 800878a:	f107 0314 	add.w	r3, r7, #20
 800878e:	4618      	mov	r0, r3
 8008790:	f005 fa14 	bl	800dbbc <sail_alloc_image>
 8008794:	4603      	mov	r3, r0
 8008796:	847b      	strh	r3, [r7, #34]	; 0x22
 8008798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800879a:	2b00      	cmp	r3, #0
 800879c:	bf14      	ite	ne
 800879e:	2301      	movne	r3, #1
 80087a0:	2300      	moveq	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <bmp_private_read_seek_next_frame+0x34>
 80087a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087aa:	e112      	b.n	80089d2 <bmp_private_read_seek_next_frame+0x25a>
    SAIL_TRY_OR_CLEANUP(sail_alloc_source_image(&image_local->source_image),
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	3334      	adds	r3, #52	; 0x34
 80087b0:	4618      	mov	r0, r3
 80087b2:	f007 fe79 	bl	80104a8 <sail_alloc_source_image>
 80087b6:	4603      	mov	r3, r0
 80087b8:	843b      	strh	r3, [r7, #32]
 80087ba:	8c3b      	ldrh	r3, [r7, #32]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf14      	ite	ne
 80087c0:	2301      	movne	r3, #1
 80087c2:	2300      	moveq	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <bmp_private_read_seek_next_frame+0x5e>
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f005 fa71 	bl	800dcb4 <sail_destroy_image>
 80087d2:	8c3b      	ldrh	r3, [r7, #32]
 80087d4:	e0fd      	b.n	80089d2 <bmp_private_read_seek_next_frame+0x25a>
                        /* cleanup */ sail_destroy_image(image_local));

    image_local->source_image->pixel_format = bmp_state->source_pixel_format;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087dc:	7b12      	ldrb	r2, [r2, #12]
 80087de:	701a      	strb	r2, [r3, #0]
    image_local->source_image->properties = bmp_state->flipped ? SAIL_IMAGE_PROPERTY_FLIPPED_VERTICALLY : 0;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <bmp_private_read_seek_next_frame+0x76>
 80087ea:	2202      	movs	r2, #2
 80087ec:	e000      	b.n	80087f0 <bmp_private_read_seek_next_frame+0x78>
 80087ee:	2200      	movs	r2, #0
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f4:	605a      	str	r2, [r3, #4]
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	2202      	movs	r2, #2
                                             ? SAIL_COMPRESSION_RLE : SAIL_COMPRESSION_NONE;
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d004      	beq.n	800880a <bmp_private_read_seek_next_frame+0x92>
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	2201      	movs	r2, #1
 8008806:	4293      	cmp	r3, r2
 8008808:	d101      	bne.n	800880e <bmp_private_read_seek_next_frame+0x96>
                                             ? SAIL_COMPRESSION_RLE : SAIL_COMPRESSION_NONE;
 800880a:	221e      	movs	r2, #30
 800880c:	e000      	b.n	8008810 <bmp_private_read_seek_next_frame+0x98>
 800880e:	2201      	movs	r2, #1
    image_local->source_image->compression = (bmp_state->v3.compression == SAIL_BI_RLE4 || bmp_state->v3.compression == SAIL_BI_RLE8)
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	721a      	strb	r2, [r3, #8]
    image_local->width = (bmp_state->version == SAIL_BMP_V1) ? bmp_state->v1.width : bmp_state->v2.width;
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	7b5b      	ldrb	r3, [r3, #13]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d103      	bne.n	8008826 <bmp_private_read_seek_next_frame+0xae>
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	8a5b      	ldrh	r3, [r3, #18]
 8008822:	461a      	mov	r2, r3
 8008824:	e002      	b.n	800882c <bmp_private_read_seek_next_frame+0xb4>
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	461a      	mov	r2, r3
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	605a      	str	r2, [r3, #4]
    image_local->height = (bmp_state->version == SAIL_BMP_V1) ? bmp_state->v1.height : bmp_state->v2.height;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	7b5b      	ldrb	r3, [r3, #13]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d103      	bne.n	8008840 <bmp_private_read_seek_next_frame+0xc8>
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	8a9b      	ldrh	r3, [r3, #20]
 800883c:	461a      	mov	r2, r3
 800883e:	e002      	b.n	8008846 <bmp_private_read_seek_next_frame+0xce>
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	461a      	mov	r2, r3
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	609a      	str	r2, [r3, #8]

    if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE4) {
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	7b5b      	ldrb	r3, [r3, #13]
 800884e:	2b02      	cmp	r3, #2
 8008850:	d90e      	bls.n	8008870 <bmp_private_read_seek_next_frame+0xf8>
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	2202      	movs	r2, #2
 8008858:	4293      	cmp	r3, r2
 800885a:	d109      	bne.n	8008870 <bmp_private_read_seek_next_frame+0xf8>
        /* We expand RLE-encoded 4-bit pixels to 8-bit. TODO: Unpack into 4-bit indexed image. */
        image_local->pixel_format = SAIL_PIXEL_FORMAT_BPP8_INDEXED;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2210      	movs	r2, #16
 8008860:	751a      	strb	r2, [r3, #20]
        image_local->bytes_per_line = bmp_state->bytes_in_row * 2;
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	0052      	lsls	r2, r2, #1
 800886c:	60da      	str	r2, [r3, #12]
 800886e:	e008      	b.n	8008882 <bmp_private_read_seek_next_frame+0x10a>
    } else {
        image_local->pixel_format = bmp_state->source_pixel_format;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	7b12      	ldrb	r2, [r2, #12]
 8008876:	751a      	strb	r2, [r3, #20]
        image_local->bytes_per_line = bmp_state->bytes_in_row;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008880:	60da      	str	r2, [r3, #12]
    }

    if (bmp_state->palette != NULL) {
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d04f      	beq.n	800892c <bmp_private_read_seek_next_frame+0x1b4>
        SAIL_TRY_OR_CLEANUP(sail_alloc_palette_for_data(SAIL_PIXEL_FORMAT_BPP24_RGB, bmp_state->palette_count, &image_local->palette),
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	3324      	adds	r3, #36	; 0x24
 8008896:	461a      	mov	r2, r3
 8008898:	201f      	movs	r0, #31
 800889a:	f006 fed7 	bl	800f64c <sail_alloc_palette_for_data>
 800889e:	4603      	mov	r3, r0
 80088a0:	83fb      	strh	r3, [r7, #30]
 80088a2:	8bfb      	ldrh	r3, [r7, #30]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bf14      	ite	ne
 80088a8:	2301      	movne	r3, #1
 80088aa:	2300      	moveq	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <bmp_private_read_seek_next_frame+0x146>
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f005 f9fd 	bl	800dcb4 <sail_destroy_image>
 80088ba:	8bfb      	ldrh	r3, [r7, #30]
 80088bc:	e089      	b.n	80089d2 <bmp_private_read_seek_next_frame+0x25a>
                            /* cleanup */ sail_destroy_image(image_local));

        unsigned char *palette_ptr = image_local->palette->data;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	62fb      	str	r3, [r7, #44]	; 0x2c

        for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 80088c6:	2300      	movs	r3, #0
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ca:	e029      	b.n	8008920 <bmp_private_read_seek_next_frame+0x1a8>
            *palette_ptr++ = bmp_state->palette[i].component3;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80088d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d4:	4613      	mov	r3, r2
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	4413      	add	r3, r2
 80088da:	18ca      	adds	r2, r1, r3
 80088dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088de:	1c59      	adds	r1, r3, #1
 80088e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088e2:	7892      	ldrb	r2, [r2, #2]
 80088e4:	701a      	strb	r2, [r3, #0]
            *palette_ptr++ = bmp_state->palette[i].component2;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80088ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	18ca      	adds	r2, r1, r3
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	1c59      	adds	r1, r3, #1
 80088fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088fc:	7852      	ldrb	r2, [r2, #1]
 80088fe:	701a      	strb	r2, [r3, #0]
            *palette_ptr++ = bmp_state->palette[i].component1;
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008908:	4613      	mov	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4413      	add	r3, r2
 800890e:	18ca      	adds	r2, r1, r3
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	1c59      	adds	r1, r3, #1
 8008914:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008916:	7812      	ldrb	r2, [r2, #0]
 8008918:	701a      	strb	r2, [r3, #0]
        for (unsigned i = 0; i < bmp_state->palette_count; i++) {
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	3301      	adds	r3, #1
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008928:	429a      	cmp	r2, r3
 800892a:	d3cf      	bcc.n	80088cc <bmp_private_read_seek_next_frame+0x154>
        }
    }

    /* Resolution. */
    if (bmp_state->version >= SAIL_BMP_V3) {
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	7b5b      	ldrb	r3, [r3, #13]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d927      	bls.n	8008984 <bmp_private_read_seek_next_frame+0x20c>
        SAIL_TRY_OR_CLEANUP(
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008938:	4618      	mov	r0, r3
 800893a:	f7f7 ff35 	bl	80007a8 <__aeabi_i2d>
 800893e:	4604      	mov	r4, r0
 8008940:	460d      	mov	r5, r1
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008946:	4618      	mov	r0, r3
 8008948:	f7f7 ff2e 	bl	80007a8 <__aeabi_i2d>
 800894c:	4680      	mov	r8, r0
 800894e:	4689      	mov	r9, r1
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	3310      	adds	r3, #16
 8008954:	4619      	mov	r1, r3
 8008956:	ec49 8b11 	vmov	d1, r8, r9
 800895a:	ec45 4b10 	vmov	d0, r4, r5
 800895e:	2003      	movs	r0, #3
 8008960:	f006 ffc2 	bl	800f8e8 <sail_alloc_resolution_from_data>
 8008964:	4603      	mov	r3, r0
 8008966:	83bb      	strh	r3, [r7, #28]
 8008968:	8bbb      	ldrh	r3, [r7, #28]
 800896a:	2b00      	cmp	r3, #0
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <bmp_private_read_seek_next_frame+0x20c>
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4618      	mov	r0, r3
 800897c:	f005 f99a 	bl	800dcb4 <sail_destroy_image>
 8008980:	8bbb      	ldrh	r3, [r7, #28]
 8008982:	e026      	b.n	80089d2 <bmp_private_read_seek_next_frame+0x25a>
            sail_alloc_resolution_from_data(SAIL_RESOLUTION_UNIT_METER, bmp_state->v3.x_pixels_per_meter, bmp_state->v3.y_pixels_per_meter, &image_local->resolution),
                        /* cleanup */ sail_destroy_image(image_local));
    }

    /* Seek to the bitmap data if we have the file header. */
    if (bmp_state->bmp_load_options & SAIL_READ_BMP_FILE_HEADER) {
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d01c      	beq.n	80089ca <bmp_private_read_seek_next_frame+0x252>
        if (bmp_state->version > SAIL_BMP_V1) {
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	7b5b      	ldrb	r3, [r3, #13]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d918      	bls.n	80089ca <bmp_private_read_seek_next_frame+0x252>
            SAIL_TRY_OR_CLEANUP(io->seek(io->stream, bmp_state->dib_file_header.offset, SEEK_SET),
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	68d0      	ldr	r0, [r2, #12]
 80089a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	4798      	blx	r3
 80089aa:	4603      	mov	r3, r0
 80089ac:	837b      	strh	r3, [r7, #26]
 80089ae:	8b7b      	ldrh	r3, [r7, #26]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bf14      	ite	ne
 80089b4:	2301      	movne	r3, #1
 80089b6:	2300      	moveq	r3, #0
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <bmp_private_read_seek_next_frame+0x252>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f005 f977 	bl	800dcb4 <sail_destroy_image>
 80089c6:	8b7b      	ldrh	r3, [r7, #26]
 80089c8:	e003      	b.n	80089d2 <bmp_private_read_seek_next_frame+0x25a>
                                /* cleanup */ sail_destroy_image(image_local));
        }
    }

    *image = image_local;
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3730      	adds	r7, #48	; 0x30
 80089d6:	46bd      	mov	sp, r7
 80089d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080089dc <bmp_private_read_frame>:

sail_status_t bmp_private_read_frame(void *state, struct sail_io *io, struct sail_image *image) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b098      	sub	sp, #96	; 0x60
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]

    struct bmp_state *bmp_state = (struct bmp_state *)state;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* RLE-encoded images don't need to skip pad bytes. */
    bool skip_pad_bytes = true;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    for (unsigned i = image->height; i > 0; i--) {
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	653b      	str	r3, [r7, #80]	; 0x50
 80089f8:	e28a      	b.n	8008f10 <bmp_private_read_frame+0x534>
        unsigned char *scan = (unsigned char *)image->pixels + image->bytes_per_line * (bmp_state->flipped ? (i - 1) : (image->height - i));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68d9      	ldr	r1, [r3, #12]
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <bmp_private_read_frame+0x36>
 8008a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	e003      	b.n	8008a1a <bmp_private_read_frame+0x3e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6898      	ldr	r0, [r3, #8]
 8008a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a18:	1ac3      	subs	r3, r0, r3
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	64fb      	str	r3, [r7, #76]	; 0x4c

        for (unsigned pixel_index = 0; pixel_index < image->width;) {
 8008a22:	2300      	movs	r3, #0
 8008a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a26:	e250      	b.n	8008eca <bmp_private_read_frame+0x4ee>
            if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE4) {
 8008a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2a:	7b5b      	ldrb	r3, [r3, #13]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	f240 812f 	bls.w	8008c90 <bmp_private_read_frame+0x2b4>
 8008a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	2202      	movs	r2, #2
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	f040 8129 	bne.w	8008c90 <bmp_private_read_frame+0x2b4>
                skip_pad_bytes = false;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                uint8_t marker;
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	68d0      	ldr	r0, [r2, #12]
 8008a4c:	f107 011d 	add.w	r1, r7, #29
 8008a50:	2201      	movs	r2, #1
 8008a52:	4798      	blx	r3
 8008a54:	4603      	mov	r3, r0
 8008a56:	873b      	strh	r3, [r7, #56]	; 0x38
 8008a58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bf14      	ite	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	2300      	moveq	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <bmp_private_read_frame+0x90>
 8008a68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008a6a:	e256      	b.n	8008f1a <bmp_private_read_frame+0x53e>

                if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8008a6c:	7f7b      	ldrb	r3, [r7, #29]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4293      	cmp	r3, r2
 8008a72:	f040 80b3 	bne.w	8008bdc <bmp_private_read_frame+0x200>
                    uint8_t count_or_marker;
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	68d0      	ldr	r0, [r2, #12]
 8008a7e:	f107 011c 	add.w	r1, r7, #28
 8008a82:	2201      	movs	r2, #1
 8008a84:	4798      	blx	r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008a8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bf14      	ite	ne
 8008a90:	2301      	movne	r3, #1
 8008a92:	2300      	moveq	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <bmp_private_read_frame+0xc2>
 8008a9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a9c:	e09d      	b.n	8008bda <bmp_private_read_frame+0x1fe>

                    if (count_or_marker == SAIL_END_OF_SCAN_LINE_MARKER) {
 8008a9e:	7f3b      	ldrb	r3, [r7, #28]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d104      	bne.n	8008ab0 <bmp_private_read_frame+0xd4>
                        /* Jump to the end of scan line. +1 to avoid reading end-of-scan-line marker twice below. */
                        pixel_index = image->width + 1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aae:	e0d9      	b.n	8008c64 <bmp_private_read_frame+0x288>
                    } else if (count_or_marker == SAIL_END_OF_RLE_DATA_MARKER) {
 8008ab0:	7f3b      	ldrb	r3, [r7, #28]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d111      	bne.n	8008adc <bmp_private_read_frame+0x100>
                        SAIL_LOG_ERROR("BMP: Unexpected end-of-rle-data marker");
 8008ab8:	4ba2      	ldr	r3, [pc, #648]	; (8008d44 <bmp_private_read_frame+0x368>)
 8008aba:	f240 1299 	movw	r2, #409	; 0x199
 8008abe:	49a2      	ldr	r1, [pc, #648]	; (8008d48 <bmp_private_read_frame+0x36c>)
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	f006 fbaf 	bl	800f224 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8008ac6:	4ba1      	ldr	r3, [pc, #644]	; (8008d4c <bmp_private_read_frame+0x370>)
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	4ba1      	ldr	r3, [pc, #644]	; (8008d50 <bmp_private_read_frame+0x374>)
 8008acc:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8008ad0:	499d      	ldr	r1, [pc, #628]	; (8008d48 <bmp_private_read_frame+0x36c>)
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	f006 fba6 	bl	800f224 <sail_log>
 8008ad8:	23d5      	movs	r3, #213	; 0xd5
 8008ada:	e07e      	b.n	8008bda <bmp_private_read_frame+0x1fe>
                    } else if (count_or_marker == SAIL_DELTA_MARKER) {
 8008adc:	7f3b      	ldrb	r3, [r7, #28]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d111      	bne.n	8008b08 <bmp_private_read_frame+0x12c>
                        SAIL_LOG_ERROR("BMP: Delta marker is not supported");
 8008ae4:	4b9b      	ldr	r3, [pc, #620]	; (8008d54 <bmp_private_read_frame+0x378>)
 8008ae6:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008aea:	4997      	ldr	r1, [pc, #604]	; (8008d48 <bmp_private_read_frame+0x36c>)
 8008aec:	2001      	movs	r0, #1
 8008aee:	f006 fb99 	bl	800f224 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8008af2:	4b99      	ldr	r3, [pc, #612]	; (8008d58 <bmp_private_read_frame+0x37c>)
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4b96      	ldr	r3, [pc, #600]	; (8008d50 <bmp_private_read_frame+0x374>)
 8008af8:	f240 129d 	movw	r2, #413	; 0x19d
 8008afc:	4992      	ldr	r1, [pc, #584]	; (8008d48 <bmp_private_read_frame+0x36c>)
 8008afe:	2001      	movs	r0, #1
 8008b00:	f006 fb90 	bl	800f224 <sail_log>
 8008b04:	23d4      	movs	r3, #212	; 0xd4
 8008b06:	e068      	b.n	8008bda <bmp_private_read_frame+0x1fe>
                    } else {
                        bool read_byte = true;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        uint8_t byte = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	76fb      	strb	r3, [r7, #27]
                        uint8_t index;

                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008b12:	2300      	movs	r3, #0
 8008b14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008b18:	e032      	b.n	8008b80 <bmp_private_read_frame+0x1a4>
                            if (read_byte) {
 8008b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01b      	beq.n	8008b5a <bmp_private_read_frame+0x17e>
                                SAIL_TRY(io->strict_read(io->stream, &byte, sizeof(byte)));
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	68d0      	ldr	r0, [r2, #12]
 8008b2a:	f107 011b 	add.w	r1, r7, #27
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4798      	blx	r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008b36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <bmp_private_read_frame+0x16e>
 8008b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b48:	e046      	b.n	8008bd8 <bmp_private_read_frame+0x1fc>
                                index = (byte >> 4) & 0xf;
 8008b4a:	7efb      	ldrb	r3, [r7, #27]
 8008b4c:	091b      	lsrs	r3, r3, #4
 8008b4e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                                read_byte = false;
 8008b52:	2300      	movs	r3, #0
 8008b54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b58:	e007      	b.n	8008b6a <bmp_private_read_frame+0x18e>
                            } else {
                                index = byte & 0xf;
 8008b5a:	7efb      	ldrb	r3, [r7, #27]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                                read_byte = true;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            }

                            *scan++ = index;
 8008b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008b70:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008b74:	701a      	strb	r2, [r3, #0]
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008b76:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008b80:	7f3b      	ldrb	r3, [r7, #28]
 8008b82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3c7      	bcc.n	8008b1a <bmp_private_read_frame+0x13e>
                        }

                        /* Odd number of bytes is accompanied with an additional byte. */
                        uint8_t number_of_unencoded_bytes = (count_or_marker + 1) / 2;
 8008b8a:	7f3b      	ldrb	r3, [r7, #28]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	0fda      	lsrs	r2, r3, #31
 8008b90:	4413      	add	r3, r2
 8008b92:	105b      	asrs	r3, r3, #1
 8008b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                        if ((number_of_unencoded_bytes % 2) != 0) {
 8008b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d012      	beq.n	8008bcc <bmp_private_read_frame+0x1f0>
                            SAIL_TRY(io->seek(io->stream, 1, SEEK_CUR));
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	68d0      	ldr	r0, [r2, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	4798      	blx	r3
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	863b      	strh	r3, [r7, #48]	; 0x30
 8008bb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bf14      	ite	ne
 8008bbe:	2301      	movne	r3, #1
 8008bc0:	2300      	moveq	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <bmp_private_read_frame+0x1f0>
 8008bc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008bca:	e005      	b.n	8008bd8 <bmp_private_read_frame+0x1fc>
                        }

                        pixel_index += count_or_marker;
 8008bcc:	7f3b      	ldrb	r3, [r7, #28]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd2:	4413      	add	r3, r2
 8008bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd6:	e045      	b.n	8008c64 <bmp_private_read_frame+0x288>
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008bd8:	e19f      	b.n	8008f1a <bmp_private_read_frame+0x53e>
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008bda:	e19e      	b.n	8008f1a <bmp_private_read_frame+0x53e>
                    }
                } else {
                    /* Normal RLE: count + value. */
                    bool high_4_bits = true;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                    uint8_t index;

                    uint8_t byte;
                    SAIL_TRY(io->strict_read(io->stream, &byte, sizeof(byte)));
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	68d0      	ldr	r0, [r2, #12]
 8008bea:	f107 011a 	add.w	r1, r7, #26
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4798      	blx	r3
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008bf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <bmp_private_read_frame+0x22e>
 8008c06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008c08:	e187      	b.n	8008f1a <bmp_private_read_frame+0x53e>

                    for (uint8_t k = 0; k < marker; k++) {
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c10:	e01e      	b.n	8008c50 <bmp_private_read_frame+0x274>
                        if (high_4_bits) {
 8008c12:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <bmp_private_read_frame+0x24e>
                            index = (byte >> 4) & 0xf;
 8008c1a:	7ebb      	ldrb	r3, [r7, #26]
 8008c1c:	091b      	lsrs	r3, r3, #4
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            high_4_bits = false;
 8008c22:	2300      	movs	r3, #0
 8008c24:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008c28:	e007      	b.n	8008c3a <bmp_private_read_frame+0x25e>
                        } else {
                            index = byte & 0xf;
 8008c2a:	7ebb      	ldrb	r3, [r7, #26]
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            high_4_bits = true;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                        }

                        *scan++ = index;
 8008c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008c40:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008c44:	701a      	strb	r2, [r3, #0]
                    for (uint8_t k = 0; k < marker; k++) {
 8008c46:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c50:	7f7b      	ldrb	r3, [r7, #29]
 8008c52:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d3db      	bcc.n	8008c12 <bmp_private_read_frame+0x236>
                    }

                    pixel_index += marker;
 8008c5a:	7f7b      	ldrb	r3, [r7, #29]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c60:	4413      	add	r3, r2
 8008c62:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Read a possible end-of-scan-line marker at the end of line. */
                if (pixel_index == image->width) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	f040 812d 	bne.w	8008eca <bmp_private_read_frame+0x4ee>
                    SAIL_TRY(bmp_private_skip_end_of_scan_line(io));
 8008c70:	68b8      	ldr	r0, [r7, #8]
 8008c72:	f000 fe31 	bl	80098d8 <bmp_private_skip_end_of_scan_line>
 8008c76:	4603      	mov	r3, r0
 8008c78:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bf14      	ite	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	2300      	moveq	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 811f 	beq.w	8008eca <bmp_private_read_frame+0x4ee>
 8008c8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c8e:	e144      	b.n	8008f1a <bmp_private_read_frame+0x53e>
                }
            } else if (bmp_state->version >= SAIL_BMP_V3 && bmp_state->v3.compression == SAIL_BI_RLE8) {
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	7b5b      	ldrb	r3, [r3, #13]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	f240 80fe 	bls.w	8008e96 <bmp_private_read_frame+0x4ba>
 8008c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	f040 80f8 	bne.w	8008e96 <bmp_private_read_frame+0x4ba>
                skip_pad_bytes = false;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                uint8_t marker;
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	68d0      	ldr	r0, [r2, #12]
 8008cb4:	f107 0119 	add.w	r1, r7, #25
 8008cb8:	2201      	movs	r2, #1
 8008cba:	4798      	blx	r3
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008cc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	bf14      	ite	ne
 8008cc6:	2301      	movne	r3, #1
 8008cc8:	2300      	moveq	r3, #0
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <bmp_private_read_frame+0x2f8>
 8008cd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cd2:	e122      	b.n	8008f1a <bmp_private_read_frame+0x53e>

                if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8008cd4:	7e7b      	ldrb	r3, [r7, #25]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	f040 809c 	bne.w	8008e16 <bmp_private_read_frame+0x43a>
                    uint8_t count_or_marker;
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	68d0      	ldr	r0, [r2, #12]
 8008ce6:	f107 0118 	add.w	r1, r7, #24
 8008cea:	2201      	movs	r2, #1
 8008cec:	4798      	blx	r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <bmp_private_read_frame+0x32a>
 8008d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d04:	e086      	b.n	8008e14 <bmp_private_read_frame+0x438>

                    if (count_or_marker == SAIL_END_OF_SCAN_LINE_MARKER) {
 8008d06:	7e3b      	ldrb	r3, [r7, #24]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d104      	bne.n	8008d18 <bmp_private_read_frame+0x33c>
                        /* Jump to the end of scan line. +1 to avoid reading end-of-scan-line marker twice below. */
                        pixel_index = image->width + 1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	3301      	adds	r3, #1
 8008d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d16:	e0aa      	b.n	8008e6e <bmp_private_read_frame+0x492>
                    } else if (count_or_marker == SAIL_END_OF_RLE_DATA_MARKER) {
 8008d18:	7e3b      	ldrb	r3, [r7, #24]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d11d      	bne.n	8008d5c <bmp_private_read_frame+0x380>
                        SAIL_LOG_ERROR("BMP: Unexpected end-of-rle-data marker");
 8008d20:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <bmp_private_read_frame+0x368>)
 8008d22:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008d26:	4908      	ldr	r1, [pc, #32]	; (8008d48 <bmp_private_read_frame+0x36c>)
 8008d28:	2001      	movs	r0, #1
 8008d2a:	f006 fa7b 	bl	800f224 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_BROKEN_IMAGE);
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <bmp_private_read_frame+0x370>)
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <bmp_private_read_frame+0x374>)
 8008d34:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8008d38:	4903      	ldr	r1, [pc, #12]	; (8008d48 <bmp_private_read_frame+0x36c>)
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	f006 fa72 	bl	800f224 <sail_log>
 8008d40:	23d5      	movs	r3, #213	; 0xd5
 8008d42:	e067      	b.n	8008e14 <bmp_private_read_frame+0x438>
 8008d44:	08017970 	.word	0x08017970
 8008d48:	0801766c 	.word	0x0801766c
 8008d4c:	08017774 	.word	0x08017774
 8008d50:	08017668 	.word	0x08017668
 8008d54:	08017998 	.word	0x08017998
 8008d58:	0801770c 	.word	0x0801770c
                    } else if (count_or_marker == SAIL_DELTA_MARKER) {
 8008d5c:	7e3b      	ldrb	r3, [r7, #24]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d111      	bne.n	8008d88 <bmp_private_read_frame+0x3ac>
                        SAIL_LOG_ERROR("BMP: Delta marker is not supported");
 8008d64:	4b6f      	ldr	r3, [pc, #444]	; (8008f24 <bmp_private_read_frame+0x548>)
 8008d66:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008d6a:	496f      	ldr	r1, [pc, #444]	; (8008f28 <bmp_private_read_frame+0x54c>)
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f006 fa59 	bl	800f224 <sail_log>
                        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8008d72:	4b6e      	ldr	r3, [pc, #440]	; (8008f2c <bmp_private_read_frame+0x550>)
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	4b6e      	ldr	r3, [pc, #440]	; (8008f30 <bmp_private_read_frame+0x554>)
 8008d78:	f240 12e5 	movw	r2, #485	; 0x1e5
 8008d7c:	496a      	ldr	r1, [pc, #424]	; (8008f28 <bmp_private_read_frame+0x54c>)
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f006 fa50 	bl	800f224 <sail_log>
 8008d84:	23d4      	movs	r3, #212	; 0xd4
 8008d86:	e045      	b.n	8008e14 <bmp_private_read_frame+0x438>
                    } else {
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008d8e:	e01d      	b.n	8008dcc <bmp_private_read_frame+0x3f0>
                            uint8_t index;
                            SAIL_TRY(io->strict_read(io->stream, &index, sizeof(index)));
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	68d0      	ldr	r0, [r2, #12]
 8008d98:	f107 0117 	add.w	r1, r7, #23
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4798      	blx	r3
 8008da0:	4603      	mov	r3, r0
 8008da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008da4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	bf14      	ite	ne
 8008daa:	2301      	movne	r3, #1
 8008dac:	2300      	moveq	r3, #0
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <bmp_private_read_frame+0x3dc>
 8008db4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
                    SAIL_TRY(io->strict_read(io->stream, &count_or_marker, sizeof(count_or_marker)));
 8008db6:	e0b0      	b.n	8008f1a <bmp_private_read_frame+0x53e>

                            *scan++ = index;
 8008db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008dbe:	7dfa      	ldrb	r2, [r7, #23]
 8008dc0:	701a      	strb	r2, [r3, #0]
                        for (uint8_t k = 0; k < count_or_marker; k++) {
 8008dc2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008dcc:	7e3b      	ldrb	r3, [r7, #24]
 8008dce:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3dc      	bcc.n	8008d90 <bmp_private_read_frame+0x3b4>
                        }

                        /* Odd number of pixels is accompanied with an additional byte. */
                        if ((count_or_marker % 2) != 0) {
 8008dd6:	7e3b      	ldrb	r3, [r7, #24]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d012      	beq.n	8008e08 <bmp_private_read_frame+0x42c>
                            SAIL_TRY(io->seek(io->stream, 1, SEEK_CUR));
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	68d0      	ldr	r0, [r2, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	2101      	movs	r1, #1
 8008dee:	4798      	blx	r3
 8008df0:	4603      	mov	r3, r0
 8008df2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bf14      	ite	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	2300      	moveq	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <bmp_private_read_frame+0x42c>
 8008e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e06:	e005      	b.n	8008e14 <bmp_private_read_frame+0x438>
                        }

                        pixel_index += count_or_marker;
 8008e08:	7e3b      	ldrb	r3, [r7, #24]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e0e:	4413      	add	r3, r2
 8008e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e12:	e02c      	b.n	8008e6e <bmp_private_read_frame+0x492>
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008e14:	e081      	b.n	8008f1a <bmp_private_read_frame+0x53e>
                    }
                } else {
                    /* Normal RLE: count + value. */
                    uint8_t index;
                    SAIL_TRY(io->strict_read(io->stream, &index, sizeof(index)));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	68d0      	ldr	r0, [r2, #12]
 8008e1e:	f107 0116 	add.w	r1, r7, #22
 8008e22:	2201      	movs	r2, #1
 8008e24:	4798      	blx	r3
 8008e26:	4603      	mov	r3, r0
 8008e28:	853b      	strh	r3, [r7, #40]	; 0x28
 8008e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bf14      	ite	ne
 8008e30:	2301      	movne	r3, #1
 8008e32:	2300      	moveq	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <bmp_private_read_frame+0x462>
 8008e3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
                SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8008e3c:	e06d      	b.n	8008f1a <bmp_private_read_frame+0x53e>

                    for (uint8_t k = 0; k < marker; k++) {
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008e44:	e009      	b.n	8008e5a <bmp_private_read_frame+0x47e>
                        *scan++ = index;
 8008e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008e4c:	7dba      	ldrb	r2, [r7, #22]
 8008e4e:	701a      	strb	r2, [r3, #0]
                    for (uint8_t k = 0; k < marker; k++) {
 8008e50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008e54:	3301      	adds	r3, #1
 8008e56:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8008e5a:	7e7b      	ldrb	r3, [r7, #25]
 8008e5c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d3f0      	bcc.n	8008e46 <bmp_private_read_frame+0x46a>
                    }

                    pixel_index += marker;
 8008e64:	7e7b      	ldrb	r3, [r7, #25]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e6a:	4413      	add	r3, r2
 8008e6c:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Read a possible end-of-scan-line marker at the end of line. */
                if (pixel_index == image->width) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d128      	bne.n	8008eca <bmp_private_read_frame+0x4ee>
                    SAIL_TRY(bmp_private_skip_end_of_scan_line(io));
 8008e78:	68b8      	ldr	r0, [r7, #8]
 8008e7a:	f000 fd2d 	bl	80098d8 <bmp_private_skip_end_of_scan_line>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	843b      	strh	r3, [r7, #32]
 8008e82:	8c3b      	ldrh	r3, [r7, #32]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bf14      	ite	ne
 8008e88:	2301      	movne	r3, #1
 8008e8a:	2300      	moveq	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01b      	beq.n	8008eca <bmp_private_read_frame+0x4ee>
 8008e92:	8c3b      	ldrh	r3, [r7, #32]
 8008e94:	e041      	b.n	8008f1a <bmp_private_read_frame+0x53e>
                }
            } else {
                /* Read a whole scan line. */
                SAIL_TRY(io->strict_read(io->stream, scan, bmp_state->bytes_in_row));
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	68d0      	ldr	r0, [r2, #12]
 8008e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ea0:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008ea4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008ea6:	4798      	blx	r3
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	83fb      	strh	r3, [r7, #30]
 8008eac:	8bfb      	ldrh	r3, [r7, #30]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bf14      	ite	ne
 8008eb2:	2301      	movne	r3, #1
 8008eb4:	2300      	moveq	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <bmp_private_read_frame+0x4e4>
 8008ebc:	8bfb      	ldrh	r3, [r7, #30]
 8008ebe:	e02c      	b.n	8008f1a <bmp_private_read_frame+0x53e>
                pixel_index += image->width;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec6:	4413      	add	r3, r2
 8008ec8:	64bb      	str	r3, [r7, #72]	; 0x48
        for (unsigned pixel_index = 0; pixel_index < image->width;) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	f4ff ada9 	bcc.w	8008a28 <bmp_private_read_frame+0x4c>
            }
        }

        /* Skip pad bytes. */
        if (skip_pad_bytes) {
 8008ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d015      	beq.n	8008f0a <bmp_private_read_frame+0x52e>
            SAIL_TRY(io->seek(io->stream, bmp_state->pad_bytes, SEEK_CUR));
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	68d0      	ldr	r0, [r2, #12]
 8008ee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ee8:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008eec:	4611      	mov	r1, r2
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4798      	blx	r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008ef6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <bmp_private_read_frame+0x52e>
 8008f06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008f08:	e007      	b.n	8008f1a <bmp_private_read_frame+0x53e>
    for (unsigned i = image->height; i > 0; i--) {
 8008f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8008f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f47f ad71 	bne.w	80089fa <bmp_private_read_frame+0x1e>
        }
    }

    return SAIL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3758      	adds	r7, #88	; 0x58
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08017998 	.word	0x08017998
 8008f28:	0801766c 	.word	0x0801766c
 8008f2c:	0801770c 	.word	0x0801770c
 8008f30:	08017668 	.word	0x08017668

08008f34 <bmp_private_read_finish>:

sail_status_t bmp_private_read_finish(void **state, struct sail_io *io) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]

    (void)io;

    struct bmp_state *bmp_state = (struct bmp_state *)(*state);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]

    *state = NULL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]

    destroy_bmp_state(bmp_state);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7fe ffa8 	bl	8007ea0 <destroy_bmp_state>

    return SAIL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <bmp_private_read_ddb_file_header>:

#include "sail-common.h"

#include "helpers.h"

sail_status_t bmp_private_read_ddb_file_header(struct sail_io *io, struct SailBmpDdbFileHeader *ddb_file_header) {
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &ddb_file_header->type, sizeof(ddb_file_header->type)));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68d0      	ldr	r0, [r2, #12]
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	4798      	blx	r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	81fb      	strh	r3, [r7, #14]
 8008f76:	89fb      	ldrh	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bf14      	ite	ne
 8008f7c:	2301      	movne	r3, #1
 8008f7e:	2300      	moveq	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <bmp_private_read_ddb_file_header+0x30>
 8008f86:	89fb      	ldrh	r3, [r7, #14]
 8008f88:	e000      	b.n	8008f8c <bmp_private_read_ddb_file_header+0x32>

    return SAIL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <bmp_private_read_v1>:

sail_status_t bmp_private_read_v1(struct sail_io *io, struct SailBmpDdbBitmap *v1) {
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v1->type,       sizeof(v1->type)));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68d0      	ldr	r0, [r2, #12]
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	4798      	blx	r3
 8008fac:	4603      	mov	r3, r0
 8008fae:	82fb      	strh	r3, [r7, #22]
 8008fb0:	8afb      	ldrh	r3, [r7, #22]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bf14      	ite	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	2300      	moveq	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <bmp_private_read_v1+0x30>
 8008fc0:	8afb      	ldrh	r3, [r7, #22]
 8008fc2:	e07b      	b.n	80090bc <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->width,      sizeof(v1->width)));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	68d0      	ldr	r0, [r2, #12]
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	1c91      	adds	r1, r2, #2
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	4798      	blx	r3
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	82bb      	strh	r3, [r7, #20]
 8008fd8:	8abb      	ldrh	r3, [r7, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bf14      	ite	ne
 8008fde:	2301      	movne	r3, #1
 8008fe0:	2300      	moveq	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <bmp_private_read_v1+0x58>
 8008fe8:	8abb      	ldrh	r3, [r7, #20]
 8008fea:	e067      	b.n	80090bc <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->height,     sizeof(v1->height)));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	68d0      	ldr	r0, [r2, #12]
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	1d11      	adds	r1, r2, #4
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	4798      	blx	r3
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	827b      	strh	r3, [r7, #18]
 8009000:	8a7b      	ldrh	r3, [r7, #18]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bf14      	ite	ne
 8009006:	2301      	movne	r3, #1
 8009008:	2300      	moveq	r3, #0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <bmp_private_read_v1+0x80>
 8009010:	8a7b      	ldrh	r3, [r7, #18]
 8009012:	e053      	b.n	80090bc <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->byte_width, sizeof(v1->byte_width)));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68d0      	ldr	r0, [r2, #12]
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	1d91      	adds	r1, r2, #6
 8009020:	2202      	movs	r2, #2
 8009022:	4798      	blx	r3
 8009024:	4603      	mov	r3, r0
 8009026:	823b      	strh	r3, [r7, #16]
 8009028:	8a3b      	ldrh	r3, [r7, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <bmp_private_read_v1+0xa8>
 8009038:	8a3b      	ldrh	r3, [r7, #16]
 800903a:	e03f      	b.n	80090bc <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->planes,     sizeof(v1->planes)));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	68d0      	ldr	r0, [r2, #12]
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	f102 0108 	add.w	r1, r2, #8
 800904a:	2201      	movs	r2, #1
 800904c:	4798      	blx	r3
 800904e:	4603      	mov	r3, r0
 8009050:	81fb      	strh	r3, [r7, #14]
 8009052:	89fb      	ldrh	r3, [r7, #14]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <bmp_private_read_v1+0xd2>
 8009062:	89fb      	ldrh	r3, [r7, #14]
 8009064:	e02a      	b.n	80090bc <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->bit_count,  sizeof(v1->bit_count)));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	68d0      	ldr	r0, [r2, #12]
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	f102 0109 	add.w	r1, r2, #9
 8009074:	2201      	movs	r2, #1
 8009076:	4798      	blx	r3
 8009078:	4603      	mov	r3, r0
 800907a:	81bb      	strh	r3, [r7, #12]
 800907c:	89bb      	ldrh	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	bf14      	ite	ne
 8009082:	2301      	movne	r3, #1
 8009084:	2300      	moveq	r3, #0
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <bmp_private_read_v1+0xfc>
 800908c:	89bb      	ldrh	r3, [r7, #12]
 800908e:	e015      	b.n	80090bc <bmp_private_read_v1+0x128>
    SAIL_TRY(io->strict_read(io->stream, &v1->pixels,     sizeof(v1->pixels)));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68d0      	ldr	r0, [r2, #12]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	f102 010c 	add.w	r1, r2, #12
 800909e:	2204      	movs	r2, #4
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	817b      	strh	r3, [r7, #10]
 80090a6:	897b      	ldrh	r3, [r7, #10]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bf14      	ite	ne
 80090ac:	2301      	movne	r3, #1
 80090ae:	2300      	moveq	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <bmp_private_read_v1+0x126>
 80090b6:	897b      	ldrh	r3, [r7, #10]
 80090b8:	e000      	b.n	80090bc <bmp_private_read_v1+0x128>

    return SAIL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <bmp_private_read_dib_file_header>:

sail_status_t bmp_private_read_dib_file_header(struct sail_io *io, struct SailBmpDibFileHeader *fh) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &fh->type,      sizeof(fh->type)));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	68d0      	ldr	r0, [r2, #12]
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	2202      	movs	r2, #2
 80090da:	4798      	blx	r3
 80090dc:	4603      	mov	r3, r0
 80090de:	82fb      	strh	r3, [r7, #22]
 80090e0:	8afb      	ldrh	r3, [r7, #22]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bf14      	ite	ne
 80090e6:	2301      	movne	r3, #1
 80090e8:	2300      	moveq	r3, #0
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <bmp_private_read_dib_file_header+0x30>
 80090f0:	8afb      	ldrh	r3, [r7, #22]
 80090f2:	e053      	b.n	800919c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->size,      sizeof(fh->size)));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	68d0      	ldr	r0, [r2, #12]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	1d11      	adds	r1, r2, #4
 8009100:	2204      	movs	r2, #4
 8009102:	4798      	blx	r3
 8009104:	4603      	mov	r3, r0
 8009106:	82bb      	strh	r3, [r7, #20]
 8009108:	8abb      	ldrh	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	bf14      	ite	ne
 800910e:	2301      	movne	r3, #1
 8009110:	2300      	moveq	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <bmp_private_read_dib_file_header+0x58>
 8009118:	8abb      	ldrh	r3, [r7, #20]
 800911a:	e03f      	b.n	800919c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->reserved1, sizeof(fh->reserved1)));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68d0      	ldr	r0, [r2, #12]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	f102 0108 	add.w	r1, r2, #8
 800912a:	2202      	movs	r2, #2
 800912c:	4798      	blx	r3
 800912e:	4603      	mov	r3, r0
 8009130:	827b      	strh	r3, [r7, #18]
 8009132:	8a7b      	ldrh	r3, [r7, #18]
 8009134:	2b00      	cmp	r3, #0
 8009136:	bf14      	ite	ne
 8009138:	2301      	movne	r3, #1
 800913a:	2300      	moveq	r3, #0
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <bmp_private_read_dib_file_header+0x82>
 8009142:	8a7b      	ldrh	r3, [r7, #18]
 8009144:	e02a      	b.n	800919c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->reserved2, sizeof(fh->reserved2)));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	68d0      	ldr	r0, [r2, #12]
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	f102 010a 	add.w	r1, r2, #10
 8009154:	2202      	movs	r2, #2
 8009156:	4798      	blx	r3
 8009158:	4603      	mov	r3, r0
 800915a:	823b      	strh	r3, [r7, #16]
 800915c:	8a3b      	ldrh	r3, [r7, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	bf14      	ite	ne
 8009162:	2301      	movne	r3, #1
 8009164:	2300      	moveq	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <bmp_private_read_dib_file_header+0xac>
 800916c:	8a3b      	ldrh	r3, [r7, #16]
 800916e:	e015      	b.n	800919c <bmp_private_read_dib_file_header+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &fh->offset,    sizeof(fh->offset)));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	68d0      	ldr	r0, [r2, #12]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	f102 010c 	add.w	r1, r2, #12
 800917e:	2204      	movs	r2, #4
 8009180:	4798      	blx	r3
 8009182:	4603      	mov	r3, r0
 8009184:	81fb      	strh	r3, [r7, #14]
 8009186:	89fb      	ldrh	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	bf14      	ite	ne
 800918c:	2301      	movne	r3, #1
 800918e:	2300      	moveq	r3, #0
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <bmp_private_read_dib_file_header+0xd6>
 8009196:	89fb      	ldrh	r3, [r7, #14]
 8009198:	e000      	b.n	800919c <bmp_private_read_dib_file_header+0xd8>

    return SAIL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <bmp_private_read_v2>:

sail_status_t bmp_private_read_v2(struct sail_io *io, struct SailBmpDibHeaderV2 *v2) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v2->size,      sizeof(v2->size)));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	68d0      	ldr	r0, [r2, #12]
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	2204      	movs	r2, #4
 80091ba:	4798      	blx	r3
 80091bc:	4603      	mov	r3, r0
 80091be:	82fb      	strh	r3, [r7, #22]
 80091c0:	8afb      	ldrh	r3, [r7, #22]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <bmp_private_read_v2+0x30>
 80091d0:	8afb      	ldrh	r3, [r7, #22]
 80091d2:	e053      	b.n	800927c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->width,     sizeof(v2->width)));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68d0      	ldr	r0, [r2, #12]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	1d11      	adds	r1, r2, #4
 80091e0:	2204      	movs	r2, #4
 80091e2:	4798      	blx	r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	82bb      	strh	r3, [r7, #20]
 80091e8:	8abb      	ldrh	r3, [r7, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	bf14      	ite	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	2300      	moveq	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <bmp_private_read_v2+0x58>
 80091f8:	8abb      	ldrh	r3, [r7, #20]
 80091fa:	e03f      	b.n	800927c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->height,    sizeof(v2->height)));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	68d0      	ldr	r0, [r2, #12]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	f102 0108 	add.w	r1, r2, #8
 800920a:	2204      	movs	r2, #4
 800920c:	4798      	blx	r3
 800920e:	4603      	mov	r3, r0
 8009210:	827b      	strh	r3, [r7, #18]
 8009212:	8a7b      	ldrh	r3, [r7, #18]
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <bmp_private_read_v2+0x82>
 8009222:	8a7b      	ldrh	r3, [r7, #18]
 8009224:	e02a      	b.n	800927c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->planes,    sizeof(v2->planes)));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	68d0      	ldr	r0, [r2, #12]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	f102 010c 	add.w	r1, r2, #12
 8009234:	2202      	movs	r2, #2
 8009236:	4798      	blx	r3
 8009238:	4603      	mov	r3, r0
 800923a:	823b      	strh	r3, [r7, #16]
 800923c:	8a3b      	ldrh	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <bmp_private_read_v2+0xac>
 800924c:	8a3b      	ldrh	r3, [r7, #16]
 800924e:	e015      	b.n	800927c <bmp_private_read_v2+0xd8>
    SAIL_TRY(io->strict_read(io->stream, &v2->bit_count, sizeof(v2->bit_count)));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68d0      	ldr	r0, [r2, #12]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	f102 010e 	add.w	r1, r2, #14
 800925e:	2202      	movs	r2, #2
 8009260:	4798      	blx	r3
 8009262:	4603      	mov	r3, r0
 8009264:	81fb      	strh	r3, [r7, #14]
 8009266:	89fb      	ldrh	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <bmp_private_read_v2+0xd6>
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	e000      	b.n	800927c <bmp_private_read_v2+0xd8>

    return SAIL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <bmp_private_read_v3>:

sail_status_t bmp_private_read_v3(struct sail_io *io, struct SailBmpDibHeaderV3 *v3) {
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v3->compression,        sizeof(v3->compression)));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	68d0      	ldr	r0, [r2, #12]
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	2204      	movs	r2, #4
 800929a:	4798      	blx	r3
 800929c:	4603      	mov	r3, r0
 800929e:	82fb      	strh	r3, [r7, #22]
 80092a0:	8afb      	ldrh	r3, [r7, #22]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bf14      	ite	ne
 80092a6:	2301      	movne	r3, #1
 80092a8:	2300      	moveq	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <bmp_private_read_v3+0x30>
 80092b0:	8afb      	ldrh	r3, [r7, #22]
 80092b2:	e068      	b.n	8009386 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->bitmap_size,        sizeof(v3->bitmap_size)));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	68d0      	ldr	r0, [r2, #12]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	1d11      	adds	r1, r2, #4
 80092c0:	2204      	movs	r2, #4
 80092c2:	4798      	blx	r3
 80092c4:	4603      	mov	r3, r0
 80092c6:	82bb      	strh	r3, [r7, #20]
 80092c8:	8abb      	ldrh	r3, [r7, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf14      	ite	ne
 80092ce:	2301      	movne	r3, #1
 80092d0:	2300      	moveq	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <bmp_private_read_v3+0x58>
 80092d8:	8abb      	ldrh	r3, [r7, #20]
 80092da:	e054      	b.n	8009386 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->x_pixels_per_meter, sizeof(v3->x_pixels_per_meter)));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	68d0      	ldr	r0, [r2, #12]
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	f102 0108 	add.w	r1, r2, #8
 80092ea:	2204      	movs	r2, #4
 80092ec:	4798      	blx	r3
 80092ee:	4603      	mov	r3, r0
 80092f0:	827b      	strh	r3, [r7, #18]
 80092f2:	8a7b      	ldrh	r3, [r7, #18]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bf14      	ite	ne
 80092f8:	2301      	movne	r3, #1
 80092fa:	2300      	moveq	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <bmp_private_read_v3+0x82>
 8009302:	8a7b      	ldrh	r3, [r7, #18]
 8009304:	e03f      	b.n	8009386 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->y_pixels_per_meter, sizeof(v3->y_pixels_per_meter)));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	68d0      	ldr	r0, [r2, #12]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	f102 010c 	add.w	r1, r2, #12
 8009314:	2204      	movs	r2, #4
 8009316:	4798      	blx	r3
 8009318:	4603      	mov	r3, r0
 800931a:	823b      	strh	r3, [r7, #16]
 800931c:	8a3b      	ldrh	r3, [r7, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bf14      	ite	ne
 8009322:	2301      	movne	r3, #1
 8009324:	2300      	moveq	r3, #0
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <bmp_private_read_v3+0xac>
 800932c:	8a3b      	ldrh	r3, [r7, #16]
 800932e:	e02a      	b.n	8009386 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->colors_used,        sizeof(v3->colors_used)));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	68d0      	ldr	r0, [r2, #12]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	f102 0110 	add.w	r1, r2, #16
 800933e:	2204      	movs	r2, #4
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	81fb      	strh	r3, [r7, #14]
 8009346:	89fb      	ldrh	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <bmp_private_read_v3+0xd6>
 8009356:	89fb      	ldrh	r3, [r7, #14]
 8009358:	e015      	b.n	8009386 <bmp_private_read_v3+0x102>
    SAIL_TRY(io->strict_read(io->stream, &v3->colors_important,   sizeof(v3->colors_important)));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	68d0      	ldr	r0, [r2, #12]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	f102 0114 	add.w	r1, r2, #20
 8009368:	2204      	movs	r2, #4
 800936a:	4798      	blx	r3
 800936c:	4603      	mov	r3, r0
 800936e:	81bb      	strh	r3, [r7, #12]
 8009370:	89bb      	ldrh	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	bf14      	ite	ne
 8009376:	2301      	movne	r3, #1
 8009378:	2300      	moveq	r3, #0
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <bmp_private_read_v3+0x100>
 8009380:	89bb      	ldrh	r3, [r7, #12]
 8009382:	e000      	b.n	8009386 <bmp_private_read_v3+0x102>

    return SAIL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <bmp_private_read_v4>:

sail_status_t bmp_private_read_v4(struct sail_io *io, struct SailBmpDibHeaderV4 *v4) {
 800938e:	b580      	push	{r7, lr}
 8009390:	b08c      	sub	sp, #48	; 0x30
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v4->red_mask,         sizeof(v4->red_mask)));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68d0      	ldr	r0, [r2, #12]
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	2204      	movs	r2, #4
 80093a4:	4798      	blx	r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80093aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bf14      	ite	ne
 80093b0:	2301      	movne	r3, #1
 80093b2:	2300      	moveq	r3, #0
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <bmp_private_read_v4+0x30>
 80093ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093bc:	e14f      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_mask,       sizeof(v4->green_mask)));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	68d0      	ldr	r0, [r2, #12]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	1d11      	adds	r1, r2, #4
 80093ca:	2204      	movs	r2, #4
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80093d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bf14      	ite	ne
 80093d8:	2301      	movne	r3, #1
 80093da:	2300      	moveq	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <bmp_private_read_v4+0x58>
 80093e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093e4:	e13b      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_mask,        sizeof(v4->blue_mask)));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	68d0      	ldr	r0, [r2, #12]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	f102 0108 	add.w	r1, r2, #8
 80093f4:	2204      	movs	r2, #4
 80093f6:	4798      	blx	r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80093fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bf14      	ite	ne
 8009402:	2301      	movne	r3, #1
 8009404:	2300      	moveq	r3, #0
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <bmp_private_read_v4+0x82>
 800940c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800940e:	e126      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->alpha_mask,       sizeof(v4->alpha_mask)));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68d0      	ldr	r0, [r2, #12]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f102 010c 	add.w	r1, r2, #12
 800941e:	2204      	movs	r2, #4
 8009420:	4798      	blx	r3
 8009422:	4603      	mov	r3, r0
 8009424:	853b      	strh	r3, [r7, #40]	; 0x28
 8009426:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	bf14      	ite	ne
 800942c:	2301      	movne	r3, #1
 800942e:	2300      	moveq	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <bmp_private_read_v4+0xac>
 8009436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009438:	e111      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->color_space_type, sizeof(v4->color_space_type)));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68d0      	ldr	r0, [r2, #12]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	f102 0110 	add.w	r1, r2, #16
 8009448:	2204      	movs	r2, #4
 800944a:	4798      	blx	r3
 800944c:	4603      	mov	r3, r0
 800944e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009452:	2b00      	cmp	r3, #0
 8009454:	bf14      	ite	ne
 8009456:	2301      	movne	r3, #1
 8009458:	2300      	moveq	r3, #0
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <bmp_private_read_v4+0xd6>
 8009460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009462:	e0fc      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_x,            sizeof(v4->red_x)));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	68d0      	ldr	r0, [r2, #12]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	f102 0114 	add.w	r1, r2, #20
 8009472:	2204      	movs	r2, #4
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	84bb      	strh	r3, [r7, #36]	; 0x24
 800947a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	bf14      	ite	ne
 8009480:	2301      	movne	r3, #1
 8009482:	2300      	moveq	r3, #0
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <bmp_private_read_v4+0x100>
 800948a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800948c:	e0e7      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_y,            sizeof(v4->red_y)));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	68d0      	ldr	r0, [r2, #12]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	f102 0118 	add.w	r1, r2, #24
 800949c:	2204      	movs	r2, #4
 800949e:	4798      	blx	r3
 80094a0:	4603      	mov	r3, r0
 80094a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80094a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bf14      	ite	ne
 80094aa:	2301      	movne	r3, #1
 80094ac:	2300      	moveq	r3, #0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <bmp_private_read_v4+0x12a>
 80094b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094b6:	e0d2      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->red_z,            sizeof(v4->red_z)));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	68d0      	ldr	r0, [r2, #12]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	f102 011c 	add.w	r1, r2, #28
 80094c6:	2204      	movs	r2, #4
 80094c8:	4798      	blx	r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	843b      	strh	r3, [r7, #32]
 80094ce:	8c3b      	ldrh	r3, [r7, #32]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bf14      	ite	ne
 80094d4:	2301      	movne	r3, #1
 80094d6:	2300      	moveq	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <bmp_private_read_v4+0x154>
 80094de:	8c3b      	ldrh	r3, [r7, #32]
 80094e0:	e0bd      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_x,          sizeof(v4->green_x)));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	68d0      	ldr	r0, [r2, #12]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	f102 0120 	add.w	r1, r2, #32
 80094f0:	2204      	movs	r2, #4
 80094f2:	4798      	blx	r3
 80094f4:	4603      	mov	r3, r0
 80094f6:	83fb      	strh	r3, [r7, #30]
 80094f8:	8bfb      	ldrh	r3, [r7, #30]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bf14      	ite	ne
 80094fe:	2301      	movne	r3, #1
 8009500:	2300      	moveq	r3, #0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <bmp_private_read_v4+0x17e>
 8009508:	8bfb      	ldrh	r3, [r7, #30]
 800950a:	e0a8      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_y,          sizeof(v4->green_y)));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68d0      	ldr	r0, [r2, #12]
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	f102 0124 	add.w	r1, r2, #36	; 0x24
 800951a:	2204      	movs	r2, #4
 800951c:	4798      	blx	r3
 800951e:	4603      	mov	r3, r0
 8009520:	83bb      	strh	r3, [r7, #28]
 8009522:	8bbb      	ldrh	r3, [r7, #28]
 8009524:	2b00      	cmp	r3, #0
 8009526:	bf14      	ite	ne
 8009528:	2301      	movne	r3, #1
 800952a:	2300      	moveq	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <bmp_private_read_v4+0x1a8>
 8009532:	8bbb      	ldrh	r3, [r7, #28]
 8009534:	e093      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->green_z,          sizeof(v4->green_z)));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	68d0      	ldr	r0, [r2, #12]
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8009544:	2204      	movs	r2, #4
 8009546:	4798      	blx	r3
 8009548:	4603      	mov	r3, r0
 800954a:	837b      	strh	r3, [r7, #26]
 800954c:	8b7b      	ldrh	r3, [r7, #26]
 800954e:	2b00      	cmp	r3, #0
 8009550:	bf14      	ite	ne
 8009552:	2301      	movne	r3, #1
 8009554:	2300      	moveq	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <bmp_private_read_v4+0x1d2>
 800955c:	8b7b      	ldrh	r3, [r7, #26]
 800955e:	e07e      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_x,           sizeof(v4->blue_x)));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	68d0      	ldr	r0, [r2, #12]
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 800956e:	2204      	movs	r2, #4
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	833b      	strh	r3, [r7, #24]
 8009576:	8b3b      	ldrh	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <bmp_private_read_v4+0x1fc>
 8009586:	8b3b      	ldrh	r3, [r7, #24]
 8009588:	e069      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_y,           sizeof(v4->blue_y)));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	68d0      	ldr	r0, [r2, #12]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8009598:	2204      	movs	r2, #4
 800959a:	4798      	blx	r3
 800959c:	4603      	mov	r3, r0
 800959e:	82fb      	strh	r3, [r7, #22]
 80095a0:	8afb      	ldrh	r3, [r7, #22]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bf14      	ite	ne
 80095a6:	2301      	movne	r3, #1
 80095a8:	2300      	moveq	r3, #0
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <bmp_private_read_v4+0x226>
 80095b0:	8afb      	ldrh	r3, [r7, #22]
 80095b2:	e054      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->blue_z,           sizeof(v4->blue_z)));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	68d0      	ldr	r0, [r2, #12]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	f102 0134 	add.w	r1, r2, #52	; 0x34
 80095c2:	2204      	movs	r2, #4
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	82bb      	strh	r3, [r7, #20]
 80095ca:	8abb      	ldrh	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bf14      	ite	ne
 80095d0:	2301      	movne	r3, #1
 80095d2:	2300      	moveq	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <bmp_private_read_v4+0x250>
 80095da:	8abb      	ldrh	r3, [r7, #20]
 80095dc:	e03f      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_red,        sizeof(v4->gamma_red)));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	68d0      	ldr	r0, [r2, #12]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	f102 0138 	add.w	r1, r2, #56	; 0x38
 80095ec:	2204      	movs	r2, #4
 80095ee:	4798      	blx	r3
 80095f0:	4603      	mov	r3, r0
 80095f2:	827b      	strh	r3, [r7, #18]
 80095f4:	8a7b      	ldrh	r3, [r7, #18]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <bmp_private_read_v4+0x27a>
 8009604:	8a7b      	ldrh	r3, [r7, #18]
 8009606:	e02a      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_green,      sizeof(v4->gamma_green)));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	68d0      	ldr	r0, [r2, #12]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8009616:	2204      	movs	r2, #4
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	823b      	strh	r3, [r7, #16]
 800961e:	8a3b      	ldrh	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	bf14      	ite	ne
 8009624:	2301      	movne	r3, #1
 8009626:	2300      	moveq	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <bmp_private_read_v4+0x2a4>
 800962e:	8a3b      	ldrh	r3, [r7, #16]
 8009630:	e015      	b.n	800965e <bmp_private_read_v4+0x2d0>
    SAIL_TRY(io->strict_read(io->stream, &v4->gamma_blue,       sizeof(v4->gamma_blue)));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68d0      	ldr	r0, [r2, #12]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8009640:	2204      	movs	r2, #4
 8009642:	4798      	blx	r3
 8009644:	4603      	mov	r3, r0
 8009646:	81fb      	strh	r3, [r7, #14]
 8009648:	89fb      	ldrh	r3, [r7, #14]
 800964a:	2b00      	cmp	r3, #0
 800964c:	bf14      	ite	ne
 800964e:	2301      	movne	r3, #1
 8009650:	2300      	moveq	r3, #0
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <bmp_private_read_v4+0x2ce>
 8009658:	89fb      	ldrh	r3, [r7, #14]
 800965a:	e000      	b.n	800965e <bmp_private_read_v4+0x2d0>

    return SAIL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3730      	adds	r7, #48	; 0x30
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <bmp_private_read_v5>:

sail_status_t bmp_private_read_v5(struct sail_io *io, struct SailBmpDibHeaderV5 *v5) {
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]

    SAIL_TRY(io->strict_read(io->stream, &v5->intent,       sizeof(v5->intent)));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	68d0      	ldr	r0, [r2, #12]
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	2204      	movs	r2, #4
 800967c:	4798      	blx	r3
 800967e:	4603      	mov	r3, r0
 8009680:	81fb      	strh	r3, [r7, #14]
 8009682:	89fb      	ldrh	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bf14      	ite	ne
 8009688:	2301      	movne	r3, #1
 800968a:	2300      	moveq	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <bmp_private_read_v5+0x30>
 8009692:	89fb      	ldrh	r3, [r7, #14]
 8009694:	e03e      	b.n	8009714 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->profile_data, sizeof(v5->profile_data)));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	68d0      	ldr	r0, [r2, #12]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	1d11      	adds	r1, r2, #4
 80096a2:	2204      	movs	r2, #4
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	81bb      	strh	r3, [r7, #12]
 80096aa:	89bb      	ldrh	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	bf14      	ite	ne
 80096b0:	2301      	movne	r3, #1
 80096b2:	2300      	moveq	r3, #0
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <bmp_private_read_v5+0x58>
 80096ba:	89bb      	ldrh	r3, [r7, #12]
 80096bc:	e02a      	b.n	8009714 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->profile_size, sizeof(v5->profile_size)));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	68d0      	ldr	r0, [r2, #12]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	f102 0108 	add.w	r1, r2, #8
 80096cc:	2204      	movs	r2, #4
 80096ce:	4798      	blx	r3
 80096d0:	4603      	mov	r3, r0
 80096d2:	817b      	strh	r3, [r7, #10]
 80096d4:	897b      	ldrh	r3, [r7, #10]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bf14      	ite	ne
 80096da:	2301      	movne	r3, #1
 80096dc:	2300      	moveq	r3, #0
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <bmp_private_read_v5+0x82>
 80096e4:	897b      	ldrh	r3, [r7, #10]
 80096e6:	e015      	b.n	8009714 <bmp_private_read_v5+0xae>
    SAIL_TRY(io->strict_read(io->stream, &v5->reserved,     sizeof(v5->reserved)));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	68d0      	ldr	r0, [r2, #12]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	f102 010c 	add.w	r1, r2, #12
 80096f6:	2204      	movs	r2, #4
 80096f8:	4798      	blx	r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	813b      	strh	r3, [r7, #8]
 80096fe:	893b      	ldrh	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bf14      	ite	ne
 8009704:	2301      	movne	r3, #1
 8009706:	2300      	moveq	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <bmp_private_read_v5+0xac>
 800970e:	893b      	ldrh	r3, [r7, #8]
 8009710:	e000      	b.n	8009714 <bmp_private_read_v5+0xae>

    return SAIL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <bmp_private_bit_count_to_pixel_format>:

sail_status_t bmp_private_bit_count_to_pixel_format(uint16_t bit_count, enum SailPixelFormat *pixel_format) {
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af02      	add	r7, sp, #8
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	80fb      	strh	r3, [r7, #6]

    switch (bit_count) {
 8009728:	88fb      	ldrh	r3, [r7, #6]
 800972a:	3b01      	subs	r3, #1
 800972c:	2b1f      	cmp	r3, #31
 800972e:	d861      	bhi.n	80097f4 <bmp_private_bit_count_to_pixel_format+0xd8>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <bmp_private_bit_count_to_pixel_format+0x1c>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	080097b9 	.word	0x080097b9
 800973c:	080097f5 	.word	0x080097f5
 8009740:	080097f5 	.word	0x080097f5
 8009744:	080097c3 	.word	0x080097c3
 8009748:	080097f5 	.word	0x080097f5
 800974c:	080097f5 	.word	0x080097f5
 8009750:	080097f5 	.word	0x080097f5
 8009754:	080097cd 	.word	0x080097cd
 8009758:	080097f5 	.word	0x080097f5
 800975c:	080097f5 	.word	0x080097f5
 8009760:	080097f5 	.word	0x080097f5
 8009764:	080097f5 	.word	0x080097f5
 8009768:	080097f5 	.word	0x080097f5
 800976c:	080097f5 	.word	0x080097f5
 8009770:	080097f5 	.word	0x080097f5
 8009774:	080097d7 	.word	0x080097d7
 8009778:	080097f5 	.word	0x080097f5
 800977c:	080097f5 	.word	0x080097f5
 8009780:	080097f5 	.word	0x080097f5
 8009784:	080097f5 	.word	0x080097f5
 8009788:	080097f5 	.word	0x080097f5
 800978c:	080097f5 	.word	0x080097f5
 8009790:	080097f5 	.word	0x080097f5
 8009794:	080097e1 	.word	0x080097e1
 8009798:	080097f5 	.word	0x080097f5
 800979c:	080097f5 	.word	0x080097f5
 80097a0:	080097f5 	.word	0x080097f5
 80097a4:	080097f5 	.word	0x080097f5
 80097a8:	080097f5 	.word	0x080097f5
 80097ac:	080097f5 	.word	0x080097f5
 80097b0:	080097f5 	.word	0x080097f5
 80097b4:	080097eb 	.word	0x080097eb
        case 1:  *pixel_format = SAIL_PIXEL_FORMAT_BPP1_INDEXED; return SAIL_OK;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	220d      	movs	r2, #13
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	e021      	b.n	8009806 <bmp_private_bit_count_to_pixel_format+0xea>
        case 4:  *pixel_format = SAIL_PIXEL_FORMAT_BPP4_INDEXED; return SAIL_OK;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	220f      	movs	r2, #15
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	2300      	movs	r3, #0
 80097ca:	e01c      	b.n	8009806 <bmp_private_bit_count_to_pixel_format+0xea>
        case 8:  *pixel_format = SAIL_PIXEL_FORMAT_BPP8_INDEXED; return SAIL_OK;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2210      	movs	r2, #16
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	2300      	movs	r3, #0
 80097d4:	e017      	b.n	8009806 <bmp_private_bit_count_to_pixel_format+0xea>
        case 16: *pixel_format = SAIL_PIXEL_FORMAT_BPP16_BGR555; return SAIL_OK;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	221c      	movs	r2, #28
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	2300      	movs	r3, #0
 80097de:	e012      	b.n	8009806 <bmp_private_bit_count_to_pixel_format+0xea>
        case 24: *pixel_format = SAIL_PIXEL_FORMAT_BPP24_BGR;    return SAIL_OK;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2220      	movs	r2, #32
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	2300      	movs	r3, #0
 80097e8:	e00d      	b.n	8009806 <bmp_private_bit_count_to_pixel_format+0xea>
        case 32: *pixel_format = SAIL_PIXEL_FORMAT_BPP32_BGRA;   return SAIL_OK;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2230      	movs	r2, #48	; 0x30
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	2300      	movs	r3, #0
 80097f2:	e008      	b.n	8009806 <bmp_private_bit_count_to_pixel_format+0xea>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_BIT_DEPTH);
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <bmp_private_bit_count_to_pixel_format+0xf4>)
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	4b06      	ldr	r3, [pc, #24]	; (8009814 <bmp_private_bit_count_to_pixel_format+0xf8>)
 80097fa:	2282      	movs	r2, #130	; 0x82
 80097fc:	4906      	ldr	r1, [pc, #24]	; (8009818 <bmp_private_bit_count_to_pixel_format+0xfc>)
 80097fe:	2001      	movs	r0, #1
 8009800:	f005 fd10 	bl	800f224 <sail_log>
 8009804:	23d2      	movs	r3, #210	; 0xd2
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	08017a1c 	.word	0x08017a1c
 8009814:	080179bc 	.word	0x080179bc
 8009818:	080179c0 	.word	0x080179c0

0800981c <bmp_private_fetch_iccp>:

sail_status_t bmp_private_fetch_iccp(struct sail_io *io, long offset_of_data, uint32_t profile_size, struct sail_iccp **iccp) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]

    SAIL_TRY(io->seek(io->stream, offset_of_data, SEEK_SET));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	68d0      	ldr	r0, [r2, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	4798      	blx	r3
 8009838:	4603      	mov	r3, r0
 800983a:	83fb      	strh	r3, [r7, #30]
 800983c:	8bfb      	ldrh	r3, [r7, #30]
 800983e:	2b00      	cmp	r3, #0
 8009840:	bf14      	ite	ne
 8009842:	2301      	movne	r3, #1
 8009844:	2300      	moveq	r3, #0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <bmp_private_fetch_iccp+0x34>
 800984c:	8bfb      	ldrh	r3, [r7, #30]
 800984e:	e03f      	b.n	80098d0 <bmp_private_fetch_iccp+0xb4>

    void *profile_data;
    SAIL_TRY(sail_malloc(profile_size, &profile_data));
 8009850:	f107 0314 	add.w	r3, r7, #20
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f005 fddc 	bl	800f414 <sail_malloc>
 800985c:	4603      	mov	r3, r0
 800985e:	83bb      	strh	r3, [r7, #28]
 8009860:	8bbb      	ldrh	r3, [r7, #28]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2301      	movne	r3, #1
 8009868:	2300      	moveq	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <bmp_private_fetch_iccp+0x58>
 8009870:	8bbb      	ldrh	r3, [r7, #28]
 8009872:	e02d      	b.n	80098d0 <bmp_private_fetch_iccp+0xb4>

    SAIL_TRY_OR_CLEANUP(io->strict_read(io->stream, profile_data, profile_size),
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	68d0      	ldr	r0, [r2, #12]
 800987c:	6979      	ldr	r1, [r7, #20]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	4798      	blx	r3
 8009882:	4603      	mov	r3, r0
 8009884:	837b      	strh	r3, [r7, #26]
 8009886:	8b7b      	ldrh	r3, [r7, #26]
 8009888:	2b00      	cmp	r3, #0
 800988a:	bf14      	ite	ne
 800988c:	2301      	movne	r3, #1
 800988e:	2300      	moveq	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <bmp_private_fetch_iccp+0x86>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4618      	mov	r0, r3
 800989a:	f005 fe43 	bl	800f524 <sail_free>
 800989e:	8b7b      	ldrh	r3, [r7, #26]
 80098a0:	e016      	b.n	80098d0 <bmp_private_fetch_iccp+0xb4>
                        /* cleanup */ sail_free(profile_data));

    SAIL_TRY_OR_CLEANUP(sail_alloc_iccp_move_data(profile_data, profile_size, iccp),
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f004 f911 	bl	800dad0 <sail_alloc_iccp_move_data>
 80098ae:	4603      	mov	r3, r0
 80098b0:	833b      	strh	r3, [r7, #24]
 80098b2:	8b3b      	ldrh	r3, [r7, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d005      	beq.n	80098ce <bmp_private_fetch_iccp+0xb2>
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f005 fe2d 	bl	800f524 <sail_free>
 80098ca:	8b3b      	ldrh	r3, [r7, #24]
 80098cc:	e000      	b.n	80098d0 <bmp_private_fetch_iccp+0xb4>
                        /* cleanup */ sail_free(profile_data));

    return SAIL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <bmp_private_skip_end_of_scan_line>:

sail_status_t bmp_private_skip_end_of_scan_line(struct sail_io *io) {
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]

    uint8_t marker;
    SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	68d0      	ldr	r0, [r2, #12]
 80098e8:	f107 010f 	add.w	r1, r7, #15
 80098ec:	2201      	movs	r2, #1
 80098ee:	4798      	blx	r3
 80098f0:	4603      	mov	r3, r0
 80098f2:	82fb      	strh	r3, [r7, #22]
 80098f4:	8afb      	ldrh	r3, [r7, #22]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	bf14      	ite	ne
 80098fa:	2301      	movne	r3, #1
 80098fc:	2300      	moveq	r3, #0
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <bmp_private_skip_end_of_scan_line+0x30>
 8009904:	8afb      	ldrh	r3, [r7, #22]
 8009906:	e044      	b.n	8009992 <bmp_private_skip_end_of_scan_line+0xba>

    if (marker == SAIL_UNENCODED_RUN_MARKER) {
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	2200      	movs	r2, #0
 800990c:	4293      	cmp	r3, r2
 800990e:	d12b      	bne.n	8009968 <bmp_private_skip_end_of_scan_line+0x90>
        SAIL_TRY(io->strict_read(io->stream, &marker, sizeof(marker)));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	68d0      	ldr	r0, [r2, #12]
 8009918:	f107 010f 	add.w	r1, r7, #15
 800991c:	2201      	movs	r2, #1
 800991e:	4798      	blx	r3
 8009920:	4603      	mov	r3, r0
 8009922:	827b      	strh	r3, [r7, #18]
 8009924:	8a7b      	ldrh	r3, [r7, #18]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bf14      	ite	ne
 800992a:	2301      	movne	r3, #1
 800992c:	2300      	moveq	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <bmp_private_skip_end_of_scan_line+0x60>
 8009934:	8a7b      	ldrh	r3, [r7, #18]
 8009936:	e02c      	b.n	8009992 <bmp_private_skip_end_of_scan_line+0xba>

        if (marker != SAIL_END_OF_SCAN_LINE_MARKER) {
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	2200      	movs	r2, #0
 800993c:	4293      	cmp	r3, r2
 800993e:	d027      	beq.n	8009990 <bmp_private_skip_end_of_scan_line+0xb8>
            SAIL_TRY(io->seek(io->stream, -2, SEEK_CUR));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68d0      	ldr	r0, [r2, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f06f 0101 	mvn.w	r1, #1
 800994e:	4798      	blx	r3
 8009950:	4603      	mov	r3, r0
 8009952:	823b      	strh	r3, [r7, #16]
 8009954:	8a3b      	ldrh	r3, [r7, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	bf14      	ite	ne
 800995a:	2301      	movne	r3, #1
 800995c:	2300      	moveq	r3, #0
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	d015      	beq.n	8009990 <bmp_private_skip_end_of_scan_line+0xb8>
 8009964:	8a3b      	ldrh	r3, [r7, #16]
 8009966:	e014      	b.n	8009992 <bmp_private_skip_end_of_scan_line+0xba>
        }
    } else {
        SAIL_TRY(io->seek(io->stream, -1, SEEK_CUR));
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	68d0      	ldr	r0, [r2, #12]
 8009970:	2201      	movs	r2, #1
 8009972:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009976:	4798      	blx	r3
 8009978:	4603      	mov	r3, r0
 800997a:	82bb      	strh	r3, [r7, #20]
 800997c:	8abb      	ldrh	r3, [r7, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	bf14      	ite	ne
 8009982:	2301      	movne	r3, #1
 8009984:	2300      	moveq	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <bmp_private_skip_end_of_scan_line+0xb8>
 800998c:	8abb      	ldrh	r3, [r7, #20]
 800998e:	e000      	b.n	8009992 <bmp_private_skip_end_of_scan_line+0xba>
    }

    return SAIL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <bmp_private_bytes_in_row>:

sail_status_t bmp_private_bytes_in_row(unsigned width, unsigned bit_count, unsigned *bytes_in_row) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]

    switch (bit_count) {
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	2b1f      	cmp	r3, #31
 80099ae:	d86a      	bhi.n	8009a86 <bmp_private_bytes_in_row+0xea>
 80099b0:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <bmp_private_bytes_in_row+0x1c>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	08009a39 	.word	0x08009a39
 80099bc:	08009a87 	.word	0x08009a87
 80099c0:	08009a87 	.word	0x08009a87
 80099c4:	08009a47 	.word	0x08009a47
 80099c8:	08009a87 	.word	0x08009a87
 80099cc:	08009a87 	.word	0x08009a87
 80099d0:	08009a87 	.word	0x08009a87
 80099d4:	08009a55 	.word	0x08009a55
 80099d8:	08009a87 	.word	0x08009a87
 80099dc:	08009a87 	.word	0x08009a87
 80099e0:	08009a87 	.word	0x08009a87
 80099e4:	08009a87 	.word	0x08009a87
 80099e8:	08009a87 	.word	0x08009a87
 80099ec:	08009a87 	.word	0x08009a87
 80099f0:	08009a87 	.word	0x08009a87
 80099f4:	08009a5f 	.word	0x08009a5f
 80099f8:	08009a87 	.word	0x08009a87
 80099fc:	08009a87 	.word	0x08009a87
 8009a00:	08009a87 	.word	0x08009a87
 8009a04:	08009a87 	.word	0x08009a87
 8009a08:	08009a87 	.word	0x08009a87
 8009a0c:	08009a87 	.word	0x08009a87
 8009a10:	08009a87 	.word	0x08009a87
 8009a14:	08009a6b 	.word	0x08009a6b
 8009a18:	08009a87 	.word	0x08009a87
 8009a1c:	08009a87 	.word	0x08009a87
 8009a20:	08009a87 	.word	0x08009a87
 8009a24:	08009a87 	.word	0x08009a87
 8009a28:	08009a87 	.word	0x08009a87
 8009a2c:	08009a87 	.word	0x08009a87
 8009a30:	08009a87 	.word	0x08009a87
 8009a34:	08009a7b 	.word	0x08009a7b
        case 1:  *bytes_in_row = (width + 7) / 8; return SAIL_OK;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3307      	adds	r3, #7
 8009a3c:	08da      	lsrs	r2, r3, #3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	e028      	b.n	8009a98 <bmp_private_bytes_in_row+0xfc>
        case 4:  *bytes_in_row = (width + 1) / 2; return SAIL_OK;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	085a      	lsrs	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	2300      	movs	r3, #0
 8009a52:	e021      	b.n	8009a98 <bmp_private_bytes_in_row+0xfc>
        case 8:  *bytes_in_row = width;           return SAIL_OK;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e01c      	b.n	8009a98 <bmp_private_bytes_in_row+0xfc>
        case 16: *bytes_in_row = width * 2;       return SAIL_OK;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	005a      	lsls	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	2300      	movs	r3, #0
 8009a68:	e016      	b.n	8009a98 <bmp_private_bytes_in_row+0xfc>
        case 24: *bytes_in_row = width * 3;       return SAIL_OK;
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	441a      	add	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	2300      	movs	r3, #0
 8009a78:	e00e      	b.n	8009a98 <bmp_private_bytes_in_row+0xfc>
        case 32: *bytes_in_row = width * 4;       return SAIL_OK;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	009a      	lsls	r2, r3, #2
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	2300      	movs	r3, #0
 8009a84:	e008      	b.n	8009a98 <bmp_private_bytes_in_row+0xfc>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_FORMAT);
 8009a86:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <bmp_private_bytes_in_row+0x104>)
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	4b06      	ldr	r3, [pc, #24]	; (8009aa4 <bmp_private_bytes_in_row+0x108>)
 8009a8c:	22b2      	movs	r2, #178	; 0xb2
 8009a8e:	4906      	ldr	r1, [pc, #24]	; (8009aa8 <bmp_private_bytes_in_row+0x10c>)
 8009a90:	2001      	movs	r0, #1
 8009a92:	f005 fbc7 	bl	800f224 <sail_log>
 8009a96:	23d4      	movs	r3, #212	; 0xd4
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	08017a40 	.word	0x08017a40
 8009aa4:	080179bc 	.word	0x080179bc
 8009aa8:	080179c0 	.word	0x080179c0

08009aac <bmp_private_pad_bytes>:

unsigned bmp_private_pad_bytes(unsigned bytes_in_row) {
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]

    const unsigned remainder = bytes_in_row % 4;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	60fb      	str	r3, [r7, #12]
    return (remainder == 0) ? 0 : (4 - remainder);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <bmp_private_pad_bytes+0x1e>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f1c3 0304 	rsb	r3, r3, #4
 8009ac8:	e000      	b.n	8009acc <bmp_private_pad_bytes+0x20>
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <bmp_private_fill_system_palette>:

sail_status_t bmp_private_fill_system_palette(unsigned bit_count, sail_rgb24_t **palette, unsigned *palette_count) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b09c      	sub	sp, #112	; 0x70
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]

    switch (bit_count) {
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d003      	beq.n	8009af2 <bmp_private_fill_system_palette+0x1a>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d032      	beq.n	8009b56 <bmp_private_fill_system_palette+0x7e>
 8009af0:	e0d9      	b.n	8009ca6 <bmp_private_fill_system_palette+0x1ce>
        case 1: {
            *palette_count = 2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2202      	movs	r2, #2
 8009af6:	601a      	str	r2, [r3, #0]

            void *ptr;
            SAIL_TRY(sail_malloc(sizeof(sail_rgb24_t) * (*palette_count), &ptr));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	4613      	mov	r3, r2
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	4413      	add	r3, r2
 8009b02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f005 fc83 	bl	800f414 <sail_malloc>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009b14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bf14      	ite	ne
 8009b1c:	2301      	movne	r3, #1
 8009b1e:	2300      	moveq	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <bmp_private_fill_system_palette+0x54>
 8009b26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009b2a:	e0c5      	b.n	8009cb8 <bmp_private_fill_system_palette+0x1e0>
            *palette = ptr;
 8009b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	601a      	str	r2, [r3, #0]

            (*palette)[0] = (sail_rgb24_t) { 0,   0,   0   };
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	705a      	strb	r2, [r3, #1]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	709a      	strb	r2, [r3, #2]
            (*palette)[1] = (sail_rgb24_t) { 255, 255, 255 };
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3303      	adds	r3, #3
 8009b48:	4a5d      	ldr	r2, [pc, #372]	; (8009cc0 <bmp_private_fill_system_palette+0x1e8>)
 8009b4a:	8811      	ldrh	r1, [r2, #0]
 8009b4c:	7892      	ldrb	r2, [r2, #2]
 8009b4e:	8019      	strh	r1, [r3, #0]
 8009b50:	709a      	strb	r2, [r3, #2]

            return SAIL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	e0b0      	b.n	8009cb8 <bmp_private_fill_system_palette+0x1e0>
        }
        case 4: {
            *palette_count = 16;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2210      	movs	r2, #16
 8009b5a:	601a      	str	r2, [r3, #0]

            void *ptr;
            SAIL_TRY(sail_malloc(sizeof(sail_rgb24_t) * (*palette_count), &ptr));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	4613      	mov	r3, r2
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	4413      	add	r3, r2
 8009b66:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f005 fc51 	bl	800f414 <sail_malloc>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009b78:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bf14      	ite	ne
 8009b80:	2301      	movne	r3, #1
 8009b82:	2300      	moveq	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <bmp_private_fill_system_palette+0xb8>
 8009b8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009b8e:	e093      	b.n	8009cb8 <bmp_private_fill_system_palette+0x1e0>
            *palette = ptr;
 8009b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	601a      	str	r2, [r3, #0]

            (*palette)[0]  = (sail_rgb24_t) { 0,   0,   0   };
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	705a      	strb	r2, [r3, #1]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	709a      	strb	r2, [r3, #2]
            (*palette)[1]  = (sail_rgb24_t) { 128, 0,   0   };
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3303      	adds	r3, #3
 8009bac:	2280      	movs	r2, #128	; 0x80
 8009bae:	701a      	strb	r2, [r3, #0]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	705a      	strb	r2, [r3, #1]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	709a      	strb	r2, [r3, #2]
            (*palette)[2]  = (sail_rgb24_t) { 0,   128, 0   };
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3306      	adds	r3, #6
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	2280      	movs	r2, #128	; 0x80
 8009bc4:	705a      	strb	r2, [r3, #1]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	709a      	strb	r2, [r3, #2]
            (*palette)[3]  = (sail_rgb24_t) { 128, 128, 0   };
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3309      	adds	r3, #9
 8009bd0:	4a3c      	ldr	r2, [pc, #240]	; (8009cc4 <bmp_private_fill_system_palette+0x1ec>)
 8009bd2:	8811      	ldrh	r1, [r2, #0]
 8009bd4:	7892      	ldrb	r2, [r2, #2]
 8009bd6:	8019      	strh	r1, [r3, #0]
 8009bd8:	709a      	strb	r2, [r3, #2]
            (*palette)[4]  = (sail_rgb24_t) { 0,   0,   128 };
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	330c      	adds	r3, #12
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	2200      	movs	r2, #0
 8009be6:	705a      	strb	r2, [r3, #1]
 8009be8:	2280      	movs	r2, #128	; 0x80
 8009bea:	709a      	strb	r2, [r3, #2]
            (*palette)[5]  = (sail_rgb24_t) { 128, 0,   128 };
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	330f      	adds	r3, #15
 8009bf2:	4a35      	ldr	r2, [pc, #212]	; (8009cc8 <bmp_private_fill_system_palette+0x1f0>)
 8009bf4:	8811      	ldrh	r1, [r2, #0]
 8009bf6:	7892      	ldrb	r2, [r2, #2]
 8009bf8:	8019      	strh	r1, [r3, #0]
 8009bfa:	709a      	strb	r2, [r3, #2]
            (*palette)[6]  = (sail_rgb24_t) { 0,   128, 128 };
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3312      	adds	r3, #18
 8009c02:	4a32      	ldr	r2, [pc, #200]	; (8009ccc <bmp_private_fill_system_palette+0x1f4>)
 8009c04:	8811      	ldrh	r1, [r2, #0]
 8009c06:	7892      	ldrb	r2, [r2, #2]
 8009c08:	8019      	strh	r1, [r3, #0]
 8009c0a:	709a      	strb	r2, [r3, #2]
            (*palette)[7]  = (sail_rgb24_t) { 192, 192, 192 };
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3315      	adds	r3, #21
 8009c12:	4a2f      	ldr	r2, [pc, #188]	; (8009cd0 <bmp_private_fill_system_palette+0x1f8>)
 8009c14:	8811      	ldrh	r1, [r2, #0]
 8009c16:	7892      	ldrb	r2, [r2, #2]
 8009c18:	8019      	strh	r1, [r3, #0]
 8009c1a:	709a      	strb	r2, [r3, #2]
            (*palette)[8]  = (sail_rgb24_t) { 128, 128, 128 };
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3318      	adds	r3, #24
 8009c22:	4a2c      	ldr	r2, [pc, #176]	; (8009cd4 <bmp_private_fill_system_palette+0x1fc>)
 8009c24:	8811      	ldrh	r1, [r2, #0]
 8009c26:	7892      	ldrb	r2, [r2, #2]
 8009c28:	8019      	strh	r1, [r3, #0]
 8009c2a:	709a      	strb	r2, [r3, #2]
            (*palette)[9]  = (sail_rgb24_t) { 255, 0,   0   };
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	331b      	adds	r3, #27
 8009c32:	22ff      	movs	r2, #255	; 0xff
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	2200      	movs	r2, #0
 8009c38:	705a      	strb	r2, [r3, #1]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	709a      	strb	r2, [r3, #2]
            (*palette)[10] = (sail_rgb24_t) { 0,   255, 0   };
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	331e      	adds	r3, #30
 8009c44:	2200      	movs	r2, #0
 8009c46:	701a      	strb	r2, [r3, #0]
 8009c48:	22ff      	movs	r2, #255	; 0xff
 8009c4a:	705a      	strb	r2, [r3, #1]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	709a      	strb	r2, [r3, #2]
            (*palette)[11] = (sail_rgb24_t) { 255, 255, 0   };
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3321      	adds	r3, #33	; 0x21
 8009c56:	4a20      	ldr	r2, [pc, #128]	; (8009cd8 <bmp_private_fill_system_palette+0x200>)
 8009c58:	8811      	ldrh	r1, [r2, #0]
 8009c5a:	7892      	ldrb	r2, [r2, #2]
 8009c5c:	8019      	strh	r1, [r3, #0]
 8009c5e:	709a      	strb	r2, [r3, #2]
            (*palette)[12] = (sail_rgb24_t) { 0,   0,   255 };
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3324      	adds	r3, #36	; 0x24
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	705a      	strb	r2, [r3, #1]
 8009c6e:	22ff      	movs	r2, #255	; 0xff
 8009c70:	709a      	strb	r2, [r3, #2]
            (*palette)[13] = (sail_rgb24_t) { 255, 0,   255 };
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3327      	adds	r3, #39	; 0x27
 8009c78:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <bmp_private_fill_system_palette+0x204>)
 8009c7a:	8811      	ldrh	r1, [r2, #0]
 8009c7c:	7892      	ldrb	r2, [r2, #2]
 8009c7e:	8019      	strh	r1, [r3, #0]
 8009c80:	709a      	strb	r2, [r3, #2]
            (*palette)[14] = (sail_rgb24_t) { 0,   255, 255 };
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	332a      	adds	r3, #42	; 0x2a
 8009c88:	4a15      	ldr	r2, [pc, #84]	; (8009ce0 <bmp_private_fill_system_palette+0x208>)
 8009c8a:	8811      	ldrh	r1, [r2, #0]
 8009c8c:	7892      	ldrb	r2, [r2, #2]
 8009c8e:	8019      	strh	r1, [r3, #0]
 8009c90:	709a      	strb	r2, [r3, #2]
            (*palette)[15] = (sail_rgb24_t) { 255, 255, 255 };
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	332d      	adds	r3, #45	; 0x2d
 8009c98:	4a09      	ldr	r2, [pc, #36]	; (8009cc0 <bmp_private_fill_system_palette+0x1e8>)
 8009c9a:	8811      	ldrh	r1, [r2, #0]
 8009c9c:	7892      	ldrb	r2, [r2, #2]
 8009c9e:	8019      	strh	r1, [r3, #0]
 8009ca0:	709a      	strb	r2, [r3, #2]

            return SAIL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e008      	b.n	8009cb8 <bmp_private_fill_system_palette+0x1e0>
        }
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_BIT_DEPTH);
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <bmp_private_fill_system_palette+0x20c>)
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <bmp_private_fill_system_palette+0x210>)
 8009cac:	22e6      	movs	r2, #230	; 0xe6
 8009cae:	490f      	ldr	r1, [pc, #60]	; (8009cec <bmp_private_fill_system_palette+0x214>)
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	f005 fab7 	bl	800f224 <sail_log>
 8009cb6:	23d2      	movs	r3, #210	; 0xd2
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3768      	adds	r7, #104	; 0x68
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	08017a60 	.word	0x08017a60
 8009cc4:	08017a64 	.word	0x08017a64
 8009cc8:	08017a68 	.word	0x08017a68
 8009ccc:	08017a6c 	.word	0x08017a6c
 8009cd0:	08017a70 	.word	0x08017a70
 8009cd4:	08017a74 	.word	0x08017a74
 8009cd8:	08017a78 	.word	0x08017a78
 8009cdc:	08017a7c 	.word	0x08017a7c
 8009ce0:	08017a80 	.word	0x08017a80
 8009ce4:	08017a1c 	.word	0x08017a1c
 8009ce8:	080179bc 	.word	0x080179bc
 8009cec:	080179c0 	.word	0x080179c0

08009cf0 <alloc_codec>:

/*
 * Private functions.
 */

static sail_status_t alloc_codec(struct sail_codec **codec) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	2300      	movne	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d011      	beq.n	8009d2c <alloc_codec+0x3c>
 8009d08:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <alloc_codec+0x88>)
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4b1b      	ldr	r3, [pc, #108]	; (8009d7c <alloc_codec+0x8c>)
 8009d0e:	2232      	movs	r2, #50	; 0x32
 8009d10:	491b      	ldr	r1, [pc, #108]	; (8009d80 <alloc_codec+0x90>)
 8009d12:	2001      	movs	r0, #1
 8009d14:	f005 fa86 	bl	800f224 <sail_log>
 8009d18:	4b1a      	ldr	r3, [pc, #104]	; (8009d84 <alloc_codec+0x94>)
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <alloc_codec+0x98>)
 8009d1e:	2232      	movs	r2, #50	; 0x32
 8009d20:	4917      	ldr	r1, [pc, #92]	; (8009d80 <alloc_codec+0x90>)
 8009d22:	2001      	movs	r0, #1
 8009d24:	f005 fa7e 	bl	800f224 <sail_log>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e021      	b.n	8009d70 <alloc_codec+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec), &ptr));
 8009d2c:	f107 0308 	add.w	r3, r7, #8
 8009d30:	4619      	mov	r1, r3
 8009d32:	200c      	movs	r0, #12
 8009d34:	f005 fb6e 	bl	800f414 <sail_malloc>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	81fb      	strh	r3, [r7, #14]
 8009d3c:	89fb      	ldrh	r3, [r7, #14]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bf14      	ite	ne
 8009d42:	2301      	movne	r3, #1
 8009d44:	2300      	moveq	r3, #0
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <alloc_codec+0x60>
 8009d4c:	89fb      	ldrh	r3, [r7, #14]
 8009d4e:	e00f      	b.n	8009d70 <alloc_codec+0x80>
    *codec = ptr;
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]

    (*codec)->layout = 0;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
    (*codec)->handle = NULL;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	605a      	str	r2, [r3, #4]
    (*codec)->v7     = NULL;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	08017ae4 	.word	0x08017ae4
 8009d7c:	08017a84 	.word	0x08017a84
 8009d80:	08017a9c 	.word	0x08017a9c
 8009d84:	08017af0 	.word	0x08017af0
 8009d88:	08017aec 	.word	0x08017aec

08009d8c <load_combined_codec>:

#ifdef SAIL_COMBINE_CODECS
static sail_status_t load_combined_codec(const struct sail_codec_info *codec_info, struct sail_codec *codec) {
 8009d8c:	b5b0      	push	{r4, r5, r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
    extern struct sail_codec_layout_v7 const sail_enabled_codecs_layouts[];
#else
    SAIL_IMPORT extern const char * const sail_enabled_codecs[];
    SAIL_IMPORT extern struct sail_codec_layout_v7 const sail_enabled_codecs_layouts[];
#endif
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e01f      	b.n	8009ddc <load_combined_codec+0x50>
        if (strcmp(sail_enabled_codecs[i], codec_info->name) == 0) {
 8009d9c:	4a1e      	ldr	r2, [pc, #120]	; (8009e18 <load_combined_codec+0x8c>)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	4619      	mov	r1, r3
 8009daa:	4610      	mov	r0, r2
 8009dac:	f7f6 fb98 	bl	80004e0 <strcmp>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10f      	bne.n	8009dd6 <load_combined_codec+0x4a>
            *codec->v7 = sail_enabled_codecs_layouts[i];
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6899      	ldr	r1, [r3, #8]
 8009dba:	4a18      	ldr	r2, [pc, #96]	; (8009e1c <load_combined_codec+0x90>)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	015b      	lsls	r3, r3, #5
 8009dc0:	4413      	add	r3, r2
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	461d      	mov	r5, r3
 8009dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009dce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            return SAIL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e01b      	b.n	8009e0e <load_combined_codec+0x82>
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	4a0e      	ldr	r2, [pc, #56]	; (8009e18 <load_combined_codec+0x8c>)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1d9      	bne.n	8009d9c <load_combined_codec+0x10>
        }
    }

    SAIL_LOG_ERROR("Failed to find combined %s codec", codec_info->name);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <load_combined_codec+0x94>)
 8009df0:	2251      	movs	r2, #81	; 0x51
 8009df2:	490c      	ldr	r1, [pc, #48]	; (8009e24 <load_combined_codec+0x98>)
 8009df4:	2001      	movs	r0, #1
 8009df6:	f005 fa15 	bl	800f224 <sail_log>
    SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <load_combined_codec+0x9c>)
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <load_combined_codec+0xa0>)
 8009e00:	2252      	movs	r2, #82	; 0x52
 8009e02:	4908      	ldr	r1, [pc, #32]	; (8009e24 <load_combined_codec+0x98>)
 8009e04:	2001      	movs	r0, #1
 8009e06:	f005 fa0d 	bl	800f224 <sail_log>
 8009e0a:	f240 132d 	movw	r3, #301	; 0x12d
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bdb0      	pop	{r4, r5, r7, pc}
 8009e16:	bf00      	nop
 8009e18:	0801a604 	.word	0x0801a604
 8009e1c:	20000000 	.word	0x20000000
 8009e20:	08017b04 	.word	0x08017b04
 8009e24:	08017a9c 	.word	0x08017a9c
 8009e28:	08017b28 	.word	0x08017b28
 8009e2c:	08017aec 	.word	0x08017aec

08009e30 <load_codec_from_file>:
#endif

static sail_status_t load_codec_from_file(const struct sail_codec_info *codec_info, struct sail_codec *codec) {
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
    SAIL_RESOLVE(codec->v7->save_init,            handle, sail_codec_save_init_v7,            codec_info->name);
    SAIL_RESOLVE(codec->v7->save_seek_next_frame, handle, sail_codec_save_seek_next_frame_v7, codec_info->name);
    SAIL_RESOLVE(codec->v7->save_frame,           handle, sail_codec_save_frame_v7,           codec_info->name);
    SAIL_RESOLVE(codec->v7->save_finish,          handle, sail_codec_save_finish_v7,          codec_info->name);
# endif
    return SAIL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <alloc_and_load_codec>:

/*
 * Public functions.
 */

sail_status_t alloc_and_load_codec(const struct sail_codec_info *codec_info, struct sail_codec **codec) {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	; 0x30
 8009e4c:	af04      	add	r7, sp, #16
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d011      	beq.n	8009e86 <alloc_and_load_codec+0x3e>
 8009e62:	4b67      	ldr	r3, [pc, #412]	; (800a000 <alloc_and_load_codec+0x1b8>)
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4b67      	ldr	r3, [pc, #412]	; (800a004 <alloc_and_load_codec+0x1bc>)
 8009e68:	229f      	movs	r2, #159	; 0x9f
 8009e6a:	4967      	ldr	r1, [pc, #412]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	f005 f9d9 	bl	800f224 <sail_log>
 8009e72:	4b66      	ldr	r3, [pc, #408]	; (800a00c <alloc_and_load_codec+0x1c4>)
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	4b66      	ldr	r3, [pc, #408]	; (800a010 <alloc_and_load_codec+0x1c8>)
 8009e78:	229f      	movs	r2, #159	; 0x9f
 8009e7a:	4963      	ldr	r1, [pc, #396]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	f005 f9d1 	bl	800f224 <sail_log>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e0b8      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>
    SAIL_CHECK_PTR(codec);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2301      	moveq	r3, #1
 8009e8e:	2300      	movne	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d011      	beq.n	8009eba <alloc_and_load_codec+0x72>
 8009e96:	4b5f      	ldr	r3, [pc, #380]	; (800a014 <alloc_and_load_codec+0x1cc>)
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	4b5a      	ldr	r3, [pc, #360]	; (800a004 <alloc_and_load_codec+0x1bc>)
 8009e9c:	22a0      	movs	r2, #160	; 0xa0
 8009e9e:	495a      	ldr	r1, [pc, #360]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	f005 f9bf 	bl	800f224 <sail_log>
 8009ea6:	4b59      	ldr	r3, [pc, #356]	; (800a00c <alloc_and_load_codec+0x1c4>)
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	4b59      	ldr	r3, [pc, #356]	; (800a010 <alloc_and_load_codec+0x1c8>)
 8009eac:	22a0      	movs	r2, #160	; 0xa0
 8009eae:	4956      	ldr	r1, [pc, #344]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	f005 f9b7 	bl	800f224 <sail_log>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e09e      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>

    if (codec_info->layout != SAIL_CODEC_LAYOUT_V7) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2b07      	cmp	r3, #7
 8009ec0:	d018      	beq.n	8009ef4 <alloc_and_load_codec+0xac>
        SAIL_LOG_ERROR("Failed to load %s codec with unsupported layout V%d (expected V%d)", codec_info->name, codec_info->layout, SAIL_CODEC_LAYOUT_V7);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6852      	ldr	r2, [r2, #4]
 8009eca:	2107      	movs	r1, #7
 8009ecc:	9102      	str	r1, [sp, #8]
 8009ece:	9201      	str	r2, [sp, #4]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	4b51      	ldr	r3, [pc, #324]	; (800a018 <alloc_and_load_codec+0x1d0>)
 8009ed4:	22a3      	movs	r2, #163	; 0xa3
 8009ed6:	494c      	ldr	r1, [pc, #304]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009ed8:	2001      	movs	r0, #1
 8009eda:	f005 f9a3 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_CODEC_LAYOUT);
 8009ede:	4b4f      	ldr	r3, [pc, #316]	; (800a01c <alloc_and_load_codec+0x1d4>)
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4b4b      	ldr	r3, [pc, #300]	; (800a010 <alloc_and_load_codec+0x1c8>)
 8009ee4:	22a4      	movs	r2, #164	; 0xa4
 8009ee6:	4948      	ldr	r1, [pc, #288]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009ee8:	2001      	movs	r0, #1
 8009eea:	f005 f99b 	bl	800f224 <sail_log>
 8009eee:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8009ef2:	e081      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>
        SAIL_LOG_ERROR("Failed to load %s codec with empty path when SAIL_COMBINE_CODECS is disabled", codec_info->name);
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
    }
#endif

    const bool fetch_combined_codec = codec_info->path == NULL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bf0c      	ite	eq
 8009efc:	2301      	moveq	r3, #1
 8009efe:	2300      	movne	r3, #0
 8009f00:	77fb      	strb	r3, [r7, #31]

    struct sail_codec *codec_local;
    SAIL_TRY(alloc_codec(&codec_local));
 8009f02:	f107 0310 	add.w	r3, r7, #16
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fef2 	bl	8009cf0 <alloc_codec>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	83bb      	strh	r3, [r7, #28]
 8009f10:	8bbb      	ldrh	r3, [r7, #28]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bf14      	ite	ne
 8009f16:	2301      	movne	r3, #1
 8009f18:	2300      	moveq	r3, #0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <alloc_and_load_codec+0xdc>
 8009f20:	8bbb      	ldrh	r3, [r7, #28]
 8009f22:	e069      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>
    codec_local->layout = codec_info->layout;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6852      	ldr	r2, [r2, #4]
 8009f2a:	601a      	str	r2, [r3, #0]

    if (fetch_combined_codec) {
 8009f2c:	7ffb      	ldrb	r3, [r7, #31]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00c      	beq.n	8009f4c <alloc_and_load_codec+0x104>
        SAIL_LOG_DEBUG("Fetching V%d functions for %s codec", codec_info->layout, codec_info->name);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6912      	ldr	r2, [r2, #16]
 8009f3a:	9201      	str	r2, [sp, #4]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4b38      	ldr	r3, [pc, #224]	; (800a020 <alloc_and_load_codec+0x1d8>)
 8009f40:	22bb      	movs	r2, #187	; 0xbb
 8009f42:	4931      	ldr	r1, [pc, #196]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009f44:	2005      	movs	r0, #5
 8009f46:	f005 f96d 	bl	800f224 <sail_log>
 8009f4a:	e00b      	b.n	8009f64 <alloc_and_load_codec+0x11c>
    } else {
        SAIL_LOG_DEBUG("Loading %s codec from %s", codec_info->name, codec_info->path);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4b32      	ldr	r3, [pc, #200]	; (800a024 <alloc_and_load_codec+0x1dc>)
 8009f5a:	22bd      	movs	r2, #189	; 0xbd
 8009f5c:	492a      	ldr	r1, [pc, #168]	; (800a008 <alloc_and_load_codec+0x1c0>)
 8009f5e:	2005      	movs	r0, #5
 8009f60:	f005 f960 	bl	800f224 <sail_log>
    }

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct sail_codec_layout_v7), &ptr),
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4619      	mov	r1, r3
 8009f6a:	2020      	movs	r0, #32
 8009f6c:	f005 fa52 	bl	800f414 <sail_malloc>
 8009f70:	4603      	mov	r3, r0
 8009f72:	837b      	strh	r3, [r7, #26]
 8009f74:	8b7b      	ldrh	r3, [r7, #26]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bf14      	ite	ne
 8009f7a:	2301      	movne	r3, #1
 8009f7c:	2300      	moveq	r3, #0
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d005      	beq.n	8009f90 <alloc_and_load_codec+0x148>
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 f84e 	bl	800a028 <destroy_codec>
 8009f8c:	8b7b      	ldrh	r3, [r7, #26]
 8009f8e:	e033      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>
                        /* cleanup */ destroy_codec(codec_local));
    codec_local->v7 = ptr;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	609a      	str	r2, [r3, #8]

#ifdef SAIL_COMBINE_CODECS
    if (fetch_combined_codec) {
 8009f96:	7ffb      	ldrb	r3, [r7, #31]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d014      	beq.n	8009fc6 <alloc_and_load_codec+0x17e>
        SAIL_TRY_OR_CLEANUP(load_combined_codec(codec_info, codec_local),
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff fef3 	bl	8009d8c <load_combined_codec>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	82fb      	strh	r3, [r7, #22]
 8009faa:	8afb      	ldrh	r3, [r7, #22]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bf14      	ite	ne
 8009fb0:	2301      	movne	r3, #1
 8009fb2:	2300      	moveq	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d01a      	beq.n	8009ff0 <alloc_and_load_codec+0x1a8>
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 f833 	bl	800a028 <destroy_codec>
 8009fc2:	8afb      	ldrh	r3, [r7, #22]
 8009fc4:	e018      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>
                            /* cleanup */ destroy_codec(codec_local));
    } else {
        SAIL_TRY_OR_CLEANUP(load_codec_from_file(codec_info, codec_local),
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff ff30 	bl	8009e30 <load_codec_from_file>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	833b      	strh	r3, [r7, #24]
 8009fd4:	8b3b      	ldrh	r3, [r7, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bf14      	ite	ne
 8009fda:	2301      	movne	r3, #1
 8009fdc:	2300      	moveq	r3, #0
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d005      	beq.n	8009ff0 <alloc_and_load_codec+0x1a8>
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f81e 	bl	800a028 <destroy_codec>
 8009fec:	8b3b      	ldrh	r3, [r7, #24]
 8009fee:	e003      	b.n	8009ff8 <alloc_and_load_codec+0x1b0>
#else
    SAIL_TRY_OR_CLEANUP(load_codec_from_file(codec_info, codec_local),
                        /* cleanup */ destroy_codec(codec_local));
#endif

    *codec = codec_local;
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3720      	adds	r7, #32
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	08017b44 	.word	0x08017b44
 800a004:	08017a84 	.word	0x08017a84
 800a008:	08017a9c 	.word	0x08017a9c
 800a00c:	08017af0 	.word	0x08017af0
 800a010:	08017aec 	.word	0x08017aec
 800a014:	08017ae4 	.word	0x08017ae4
 800a018:	08017b50 	.word	0x08017b50
 800a01c:	08017b94 	.word	0x08017b94
 800a020:	08017bb8 	.word	0x08017bb8
 800a024:	08017bdc 	.word	0x08017bdc

0800a028 <destroy_codec>:

void destroy_codec(struct sail_codec *codec) {
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    }

    sail_free(codec->v7);
    sail_free(codec);
#endif
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <alloc_codec_bundle_node>:
    SOFTWARE.
*/

#include "sail.h"

sail_status_t alloc_codec_bundle_node(struct sail_codec_bundle_node **codec_bundle_node) {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]

    SAIL_TRY(sail_private_alloc_linked_list_node((struct linked_list_node **)codec_bundle_node));
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f004 fdd3 	bl	800ebf0 <sail_private_alloc_linked_list_node>
 800a04a:	4603      	mov	r3, r0
 800a04c:	81fb      	strh	r3, [r7, #14]
 800a04e:	89fb      	ldrh	r3, [r7, #14]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bf14      	ite	ne
 800a054:	2301      	movne	r3, #1
 800a056:	2300      	moveq	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <alloc_codec_bundle_node+0x26>
 800a05e:	89fb      	ldrh	r3, [r7, #14]
 800a060:	e000      	b.n	800a064 <alloc_codec_bundle_node+0x28>

    return SAIL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <destroy_codec_bundle_node>:

void destroy_codec_bundle_node(struct sail_codec_bundle_node *codec_bundle_node) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node((struct linked_list_node *)codec_bundle_node,
 800a074:	4903      	ldr	r1, [pc, #12]	; (800a084 <destroy_codec_bundle_node+0x18>)
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f004 fe04 	bl	800ec84 <sail_private_destroy_linked_list_node>
                                          (linked_list_value_deallocator_t)&destroy_codec_bundle);
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	0800a11d 	.word	0x0800a11d

0800a088 <alloc_codec_bundle>:
    SOFTWARE.
*/

#include "sail.h"

sail_status_t alloc_codec_bundle(struct sail_codec_bundle **codec_bundle) {
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec_bundle);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	bf0c      	ite	eq
 800a096:	2301      	moveq	r3, #1
 800a098:	2300      	movne	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d011      	beq.n	800a0c4 <alloc_codec_bundle+0x3c>
 800a0a0:	4b19      	ldr	r3, [pc, #100]	; (800a108 <alloc_codec_bundle+0x80>)
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4b19      	ldr	r3, [pc, #100]	; (800a10c <alloc_codec_bundle+0x84>)
 800a0a6:	221e      	movs	r2, #30
 800a0a8:	4919      	ldr	r1, [pc, #100]	; (800a110 <alloc_codec_bundle+0x88>)
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	f005 f8ba 	bl	800f224 <sail_log>
 800a0b0:	4b18      	ldr	r3, [pc, #96]	; (800a114 <alloc_codec_bundle+0x8c>)
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	4b18      	ldr	r3, [pc, #96]	; (800a118 <alloc_codec_bundle+0x90>)
 800a0b6:	221e      	movs	r2, #30
 800a0b8:	4915      	ldr	r1, [pc, #84]	; (800a110 <alloc_codec_bundle+0x88>)
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	f005 f8b2 	bl	800f224 <sail_log>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e01d      	b.n	800a100 <alloc_codec_bundle+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_bundle), &ptr));
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	2008      	movs	r0, #8
 800a0cc:	f005 f9a2 	bl	800f414 <sail_malloc>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	81fb      	strh	r3, [r7, #14]
 800a0d4:	89fb      	ldrh	r3, [r7, #14]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bf14      	ite	ne
 800a0da:	2301      	movne	r3, #1
 800a0dc:	2300      	moveq	r3, #0
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <alloc_codec_bundle+0x60>
 800a0e4:	89fb      	ldrh	r3, [r7, #14]
 800a0e6:	e00b      	b.n	800a100 <alloc_codec_bundle+0x78>
    *codec_bundle = ptr;
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]

    (*codec_bundle)->codec_info = NULL;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
    (*codec_bundle)->codec      = NULL;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	08017c68 	.word	0x08017c68
 800a10c:	08017bf8 	.word	0x08017bf8
 800a110:	08017c10 	.word	0x08017c10
 800a114:	08017c7c 	.word	0x08017c7c
 800a118:	08017c78 	.word	0x08017c78

0800a11c <destroy_codec_bundle>:

void destroy_codec_bundle(struct sail_codec_bundle *codec_bundle) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]

    if (codec_bundle == NULL) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00d      	beq.n	800a146 <destroy_codec_bundle+0x2a>
        return;
    }

    destroy_codec_info(codec_bundle->codec_info);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 faa8 	bl	800b684 <destroy_codec_info>
    destroy_codec(codec_bundle->codec);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff ff75 	bl	800a028 <destroy_codec>

    sail_free(codec_bundle);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f005 f9f0 	bl	800f524 <sail_free>
 800a144:	e000      	b.n	800a148 <destroy_codec_bundle+0x2c>
        return;
 800a146:	bf00      	nop
}
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <sail_codec_info_by_magic_number_from_memory>:
    sail_destroy_io(io);

    return SAIL_OK;
}

sail_status_t sail_codec_info_by_magic_number_from_memory(const unsigned char *bmp_buffer[], size_t buffer_length, const struct sail_codec_info **codec_info) {
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af02      	add	r7, sp, #8
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(bmp_buffer);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bf0c      	ite	eq
 800a162:	2301      	moveq	r3, #1
 800a164:	2300      	movne	r3, #0
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d011      	beq.n	800a190 <sail_codec_info_by_magic_number_from_memory+0x40>
 800a16c:	4b2e      	ldr	r3, [pc, #184]	; (800a228 <sail_codec_info_by_magic_number_from_memory+0xd8>)
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	4b2e      	ldr	r3, [pc, #184]	; (800a22c <sail_codec_info_by_magic_number_from_memory+0xdc>)
 800a172:	225d      	movs	r2, #93	; 0x5d
 800a174:	492e      	ldr	r1, [pc, #184]	; (800a230 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 800a176:	2001      	movs	r0, #1
 800a178:	f005 f854 	bl	800f224 <sail_log>
 800a17c:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <sail_codec_info_by_magic_number_from_memory+0xe4>)
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	4b2d      	ldr	r3, [pc, #180]	; (800a238 <sail_codec_info_by_magic_number_from_memory+0xe8>)
 800a182:	225d      	movs	r2, #93	; 0x5d
 800a184:	492a      	ldr	r1, [pc, #168]	; (800a230 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 800a186:	2001      	movs	r0, #1
 800a188:	f005 f84c 	bl	800f224 <sail_log>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e046      	b.n	800a21e <sail_codec_info_by_magic_number_from_memory+0xce>
    SAIL_CHECK_PTR(codec_info);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	bf0c      	ite	eq
 800a196:	2301      	moveq	r3, #1
 800a198:	2300      	movne	r3, #0
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d011      	beq.n	800a1c4 <sail_codec_info_by_magic_number_from_memory+0x74>
 800a1a0:	4b26      	ldr	r3, [pc, #152]	; (800a23c <sail_codec_info_by_magic_number_from_memory+0xec>)
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	4b21      	ldr	r3, [pc, #132]	; (800a22c <sail_codec_info_by_magic_number_from_memory+0xdc>)
 800a1a6:	225e      	movs	r2, #94	; 0x5e
 800a1a8:	4921      	ldr	r1, [pc, #132]	; (800a230 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f005 f83a 	bl	800f224 <sail_log>
 800a1b0:	4b20      	ldr	r3, [pc, #128]	; (800a234 <sail_codec_info_by_magic_number_from_memory+0xe4>)
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4b20      	ldr	r3, [pc, #128]	; (800a238 <sail_codec_info_by_magic_number_from_memory+0xe8>)
 800a1b6:	225e      	movs	r2, #94	; 0x5e
 800a1b8:	491d      	ldr	r1, [pc, #116]	; (800a230 <sail_codec_info_by_magic_number_from_memory+0xe0>)
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	f005 f832 	bl	800f224 <sail_log>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e02c      	b.n	800a21e <sail_codec_info_by_magic_number_from_memory+0xce>

    struct sail_io *io;
    SAIL_TRY(sail_alloc_io_read_memory(bmp_buffer, buffer_length, &io));
 800a1c4:	f107 0310 	add.w	r3, r7, #16
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f004 fbfb 	bl	800e9c8 <sail_alloc_io_read_memory>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	82fb      	strh	r3, [r7, #22]
 800a1d6:	8afb      	ldrh	r3, [r7, #22]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bf14      	ite	ne
 800a1dc:	2301      	movne	r3, #1
 800a1de:	2300      	moveq	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <sail_codec_info_by_magic_number_from_memory+0x9a>
 800a1e6:	8afb      	ldrh	r3, [r7, #22]
 800a1e8:	e019      	b.n	800a21e <sail_codec_info_by_magic_number_from_memory+0xce>

    SAIL_TRY_OR_CLEANUP(sail_codec_info_by_magic_number_from_io(io, codec_info),
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	6879      	ldr	r1, [r7, #4]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f826 	bl	800a240 <sail_codec_info_by_magic_number_from_io>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	82bb      	strh	r3, [r7, #20]
 800a1f8:	8abb      	ldrh	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	bf14      	ite	ne
 800a1fe:	2301      	movne	r3, #1
 800a200:	2300      	moveq	r3, #0
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <sail_codec_info_by_magic_number_from_memory+0xc4>
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f004 f92e 	bl	800e46c <sail_destroy_io>
 800a210:	8abb      	ldrh	r3, [r7, #20]
 800a212:	e004      	b.n	800a21e <sail_codec_info_by_magic_number_from_memory+0xce>
                        /* cleanup */ sail_destroy_io(io));

    sail_destroy_io(io);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	4618      	mov	r0, r3
 800a218:	f004 f928 	bl	800e46c <sail_destroy_io>

    return SAIL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	08017d80 	.word	0x08017d80
 800a22c:	08017c90 	.word	0x08017c90
 800a230:	08017ca8 	.word	0x08017ca8
 800a234:	08017d04 	.word	0x08017d04
 800a238:	08017d00 	.word	0x08017d00
 800a23c:	08017d18 	.word	0x08017d18

0800a240 <sail_codec_info_by_magic_number_from_io>:

sail_status_t sail_codec_info_by_magic_number_from_io(struct sail_io *io, const struct sail_codec_info **codec_info) {
 800a240:	b580      	push	{r7, lr}
 800a242:	b0a4      	sub	sp, #144	; 0x90
 800a244:	af02      	add	r7, sp, #8
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bf0c      	ite	eq
 800a250:	2301      	moveq	r3, #1
 800a252:	2300      	movne	r3, #0
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d011      	beq.n	800a27e <sail_codec_info_by_magic_number_from_io+0x3e>
 800a25a:	4b9c      	ldr	r3, [pc, #624]	; (800a4cc <sail_codec_info_by_magic_number_from_io+0x28c>)
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	4b9c      	ldr	r3, [pc, #624]	; (800a4d0 <sail_codec_info_by_magic_number_from_io+0x290>)
 800a260:	226d      	movs	r2, #109	; 0x6d
 800a262:	499c      	ldr	r1, [pc, #624]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a264:	2001      	movs	r0, #1
 800a266:	f004 ffdd 	bl	800f224 <sail_log>
 800a26a:	4b9b      	ldr	r3, [pc, #620]	; (800a4d8 <sail_codec_info_by_magic_number_from_io+0x298>)
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b9b      	ldr	r3, [pc, #620]	; (800a4dc <sail_codec_info_by_magic_number_from_io+0x29c>)
 800a270:	226d      	movs	r2, #109	; 0x6d
 800a272:	4998      	ldr	r1, [pc, #608]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a274:	2001      	movs	r0, #1
 800a276:	f004 ffd5 	bl	800f224 <sail_log>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e160      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>
    SAIL_CHECK_PTR(codec_info);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	bf0c      	ite	eq
 800a284:	2301      	moveq	r3, #1
 800a286:	2300      	movne	r3, #0
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d011      	beq.n	800a2b2 <sail_codec_info_by_magic_number_from_io+0x72>
 800a28e:	4b94      	ldr	r3, [pc, #592]	; (800a4e0 <sail_codec_info_by_magic_number_from_io+0x2a0>)
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4b8f      	ldr	r3, [pc, #572]	; (800a4d0 <sail_codec_info_by_magic_number_from_io+0x290>)
 800a294:	226e      	movs	r2, #110	; 0x6e
 800a296:	498f      	ldr	r1, [pc, #572]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a298:	2001      	movs	r0, #1
 800a29a:	f004 ffc3 	bl	800f224 <sail_log>
 800a29e:	4b8e      	ldr	r3, [pc, #568]	; (800a4d8 <sail_codec_info_by_magic_number_from_io+0x298>)
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4b8e      	ldr	r3, [pc, #568]	; (800a4dc <sail_codec_info_by_magic_number_from_io+0x29c>)
 800a2a4:	226e      	movs	r2, #110	; 0x6e
 800a2a6:	498b      	ldr	r1, [pc, #556]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a2a8:	2001      	movs	r0, #1
 800a2aa:	f004 ffbb 	bl	800f224 <sail_log>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e146      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>

    struct sail_context *context;
    SAIL_TRY(fetch_global_context_guarded(&context));
 800a2b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f003 f9c6 	bl	800d648 <fetch_global_context_guarded>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800a2c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	bf14      	ite	ne
 800a2ca:	2301      	movne	r3, #1
 800a2cc:	2300      	moveq	r3, #0
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <sail_codec_info_by_magic_number_from_io+0x9a>
 800a2d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a2d8:	e132      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>

    size_t saved_offset;
    SAIL_TRY(io->tell(io->stream, &saved_offset));
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68d2      	ldr	r2, [r2, #12]
 800a2e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	4798      	blx	r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800a2f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bf14      	ite	ne
 800a2f8:	2301      	movne	r3, #1
 800a2fa:	2300      	moveq	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <sail_codec_info_by_magic_number_from_io+0xc8>
 800a302:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a306:	e11b      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>

    /* Read the image magic. */
    unsigned char buffer[SAIL_MAGIC_BUFFER_SIZE];
    SAIL_TRY(io->strict_read(io->stream, buffer, sizeof(buffer)));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	68d0      	ldr	r0, [r2, #12]
 800a310:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a314:	2210      	movs	r2, #16
 800a316:	4798      	blx	r3
 800a318:	4603      	mov	r3, r0
 800a31a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a31e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a322:	2b00      	cmp	r3, #0
 800a324:	bf14      	ite	ne
 800a326:	2301      	movne	r3, #1
 800a328:	2300      	moveq	r3, #0
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <sail_codec_info_by_magic_number_from_io+0xf6>
 800a330:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a334:	e104      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>

    /* Seek back. */
    SAIL_TRY(io->seek(io->stream, (long)saved_offset, SEEK_SET));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	68d0      	ldr	r0, [r2, #12]
 800a33e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a340:	4611      	mov	r1, r2
 800a342:	2200      	movs	r2, #0
 800a344:	4798      	blx	r3
 800a346:	4603      	mov	r3, r0
 800a348:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a34c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a350:	2b00      	cmp	r3, #0
 800a352:	bf14      	ite	ne
 800a354:	2301      	movne	r3, #1
 800a356:	2300      	moveq	r3, #0
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <sail_codec_info_by_magic_number_from_io+0x124>
 800a35e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a362:	e0ed      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>
    /* \xFF\xDD => "FF DD" + string terminator. */
    char hex_numbers[sizeof(buffer) * 3 + 1];

    /* Debug print. */
    {
        char *hex_numbers_ptr = hex_numbers;
 800a364:	f107 0314 	add.w	r3, r7, #20
 800a368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        for (size_t i = 0; i < sizeof(buffer); i++, hex_numbers_ptr += 3) {
 800a36c:	2300      	movs	r3, #0
 800a36e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a372:	e015      	b.n	800a3a0 <sail_codec_info_by_magic_number_from_io+0x160>
#ifdef _MSC_VER
            sprintf_s(hex_numbers_ptr, 4, "%02x ", buffer[i]);
#else
            sprintf(hex_numbers_ptr, "%02x ", buffer[i]);
 800a374:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a37c:	4413      	add	r3, r2
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	4958      	ldr	r1, [pc, #352]	; (800a4e4 <sail_codec_info_by_magic_number_from_io+0x2a4>)
 800a384:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800a388:	f009 fee0 	bl	801414c <siprintf>
        for (size_t i = 0; i < sizeof(buffer); i++, hex_numbers_ptr += 3) {
 800a38c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a390:	3301      	adds	r3, #1
 800a392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a39a:	3303      	adds	r3, #3
 800a39c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3a4:	2b0f      	cmp	r3, #15
 800a3a6:	d9e5      	bls.n	800a374 <sail_codec_info_by_magic_number_from_io+0x134>
#endif
        }

        *(hex_numbers_ptr-1) = '\0';
 800a3a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
        SAIL_LOG_DEBUG("Read magic number: '%s'", hex_numbers);
 800a3b2:	f107 0314 	add.w	r3, r7, #20
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	4b4b      	ldr	r3, [pc, #300]	; (800a4e8 <sail_codec_info_by_magic_number_from_io+0x2a8>)
 800a3ba:	228d      	movs	r2, #141	; 0x8d
 800a3bc:	4945      	ldr	r1, [pc, #276]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a3be:	2005      	movs	r0, #5
 800a3c0:	f004 ff30 	bl	800f224 <sail_log>
    }

    /* Find the codec info. */
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800a3c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3ca:	e0a2      	b.n	800a512 <sail_codec_info_by_magic_number_from_io+0x2d2>
        const struct sail_codec_bundle *codec_bundle = codec_bundle_node->codec_bundle;
 800a3cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	663b      	str	r3, [r7, #96]	; 0x60
        const struct sail_string_node *magic_number_node = codec_bundle->codec_info->magic_number_node;
 800a3d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	67bb      	str	r3, [r7, #120]	; 0x78
        /*
         * Split "ab cd" into bytes and compare individual bytes against the read magic number.
         * Additionally, we support "??" pattern matching any byte. For example, "?? ?? 66 74"
         * matches both "00 20 66 74" and "20 30 66 74".
         */
        while (magic_number_node != NULL) {
 800a3da:	e093      	b.n	800a504 <sail_codec_info_by_magic_number_from_io+0x2c4>
            size_t buffer_index = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	677b      	str	r3, [r7, #116]	; 0x74
            const char *magic = magic_number_node->string;
 800a3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	673b      	str	r3, [r7, #112]	; 0x70
            char hex_byte[3];
            int bytes_consumed = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
            bool mismatch = false;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            SAIL_LOG_TRACE("Check against %s magic '%s'", codec_bundle->codec_info->name, magic);
 800a3f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a3f8:	9201      	str	r2, [sp, #4]
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4b3b      	ldr	r3, [pc, #236]	; (800a4ec <sail_codec_info_by_magic_number_from_io+0x2ac>)
 800a3fe:	22a1      	movs	r2, #161	; 0xa1
 800a400:	4934      	ldr	r1, [pc, #208]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a402:	2006      	movs	r0, #6
 800a404:	f004 ff0e 	bl	800f224 <sail_log>

#ifdef _MSC_VER
            while (buffer_index < sizeof(buffer) && sscanf_s(magic, "%2s%n", hex_byte, (unsigned)sizeof(hex_byte), &bytes_consumed) == 1) {
#else
            while (buffer_index < sizeof(buffer) && sscanf(magic, "%2s%n", hex_byte, &bytes_consumed) == 1) {
 800a408:	e03a      	b.n	800a480 <sail_codec_info_by_magic_number_from_io+0x240>
#endif
                if (hex_byte[0] == '?') {
 800a40a:	7c3b      	ldrb	r3, [r7, #16]
 800a40c:	2b3f      	cmp	r3, #63	; 0x3f
 800a40e:	d106      	bne.n	800a41e <sail_codec_info_by_magic_number_from_io+0x1de>
                    SAIL_LOG_TRACE("Skipping ? character");
 800a410:	4b37      	ldr	r3, [pc, #220]	; (800a4f0 <sail_codec_info_by_magic_number_from_io+0x2b0>)
 800a412:	22a9      	movs	r2, #169	; 0xa9
 800a414:	492f      	ldr	r1, [pc, #188]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a416:	2006      	movs	r0, #6
 800a418:	f004 ff04 	bl	800f224 <sail_log>
 800a41c:	e028      	b.n	800a470 <sail_codec_info_by_magic_number_from_io+0x230>
                } else {
                    unsigned byte = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]

#ifdef _MSC_VER
                    if (sscanf_s(hex_byte, "%02x", &byte) != 1 || byte != buffer[buffer_index]) {
#else
                    if (sscanf(hex_byte, "%02x", &byte) != 1 || byte != buffer[buffer_index]) {
 800a422:	f107 0208 	add.w	r2, r7, #8
 800a426:	f107 0310 	add.w	r3, r7, #16
 800a42a:	4932      	ldr	r1, [pc, #200]	; (800a4f4 <sail_codec_info_by_magic_number_from_io+0x2b4>)
 800a42c:	4618      	mov	r0, r3
 800a42e:	f009 fead 	bl	801418c <siscanf>
 800a432:	4603      	mov	r3, r0
 800a434:	2b01      	cmp	r3, #1
 800a436:	d108      	bne.n	800a44a <sail_codec_info_by_magic_number_from_io+0x20a>
 800a438:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a43c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	429a      	cmp	r2, r3
 800a448:	d012      	beq.n	800a470 <sail_codec_info_by_magic_number_from_io+0x230>
#endif
                        SAIL_LOG_TRACE("Character mismatch %02x != %02x", buffer[buffer_index], byte);
 800a44a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	9200      	str	r2, [sp, #0]
 800a45c:	4b26      	ldr	r3, [pc, #152]	; (800a4f8 <sail_codec_info_by_magic_number_from_io+0x2b8>)
 800a45e:	22b2      	movs	r2, #178	; 0xb2
 800a460:	491c      	ldr	r1, [pc, #112]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a462:	2006      	movs	r0, #6
 800a464:	f004 fede 	bl	800f224 <sail_log>
                        mismatch = true;
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a46e:	e015      	b.n	800a49c <sail_codec_info_by_magic_number_from_io+0x25c>
                        break;
                    }
                }

                magic += bytes_consumed;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	461a      	mov	r2, r3
 800a474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a476:	4413      	add	r3, r2
 800a478:	673b      	str	r3, [r7, #112]	; 0x70
                buffer_index++;
 800a47a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a47c:	3301      	adds	r3, #1
 800a47e:	677b      	str	r3, [r7, #116]	; 0x74
            while (buffer_index < sizeof(buffer) && sscanf(magic, "%2s%n", hex_byte, &bytes_consumed) == 1) {
 800a480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a482:	2b0f      	cmp	r3, #15
 800a484:	d80a      	bhi.n	800a49c <sail_codec_info_by_magic_number_from_io+0x25c>
 800a486:	f107 030c 	add.w	r3, r7, #12
 800a48a:	f107 0210 	add.w	r2, r7, #16
 800a48e:	491b      	ldr	r1, [pc, #108]	; (800a4fc <sail_codec_info_by_magic_number_from_io+0x2bc>)
 800a490:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a492:	f009 fe7b 	bl	801418c <siscanf>
 800a496:	4603      	mov	r3, r0
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d0b6      	beq.n	800a40a <sail_codec_info_by_magic_number_from_io+0x1ca>
            }

            if (mismatch) {
 800a49c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <sail_codec_info_by_magic_number_from_io+0x26c>
                magic_number_node = magic_number_node->next;
 800a4a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4aa:	e02b      	b.n	800a504 <sail_codec_info_by_magic_number_from_io+0x2c4>
            } else {
                *codec_info = codec_bundle->codec_info;
 800a4ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	601a      	str	r2, [r3, #0]
                SAIL_LOG_DEBUG("Found codec info: %s", (*codec_info)->name);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	4b10      	ldr	r3, [pc, #64]	; (800a500 <sail_codec_info_by_magic_number_from_io+0x2c0>)
 800a4be:	22c0      	movs	r2, #192	; 0xc0
 800a4c0:	4904      	ldr	r1, [pc, #16]	; (800a4d4 <sail_codec_info_by_magic_number_from_io+0x294>)
 800a4c2:	2005      	movs	r0, #5
 800a4c4:	f004 feae 	bl	800f224 <sail_log>
                return SAIL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	e039      	b.n	800a540 <sail_codec_info_by_magic_number_from_io+0x300>
 800a4cc:	08017d8c 	.word	0x08017d8c
 800a4d0:	08017c90 	.word	0x08017c90
 800a4d4:	08017ca8 	.word	0x08017ca8
 800a4d8:	08017d04 	.word	0x08017d04
 800a4dc:	08017d00 	.word	0x08017d00
 800a4e0:	08017d18 	.word	0x08017d18
 800a4e4:	08017d90 	.word	0x08017d90
 800a4e8:	08017d98 	.word	0x08017d98
 800a4ec:	08017db0 	.word	0x08017db0
 800a4f0:	08017dcc 	.word	0x08017dcc
 800a4f4:	08017de4 	.word	0x08017de4
 800a4f8:	08017dec 	.word	0x08017dec
 800a4fc:	08017e0c 	.word	0x08017e0c
 800a500:	08017e14 	.word	0x08017e14
        while (magic_number_node != NULL) {
 800a504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a506:	2b00      	cmp	r3, #0
 800a508:	f47f af68 	bne.w	800a3dc <sail_codec_info_by_magic_number_from_io+0x19c>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800a50c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a514:	2b00      	cmp	r3, #0
 800a516:	f47f af59 	bne.w	800a3cc <sail_codec_info_by_magic_number_from_io+0x18c>
            }
        }
    }

    SAIL_LOG_ERROR("Magic number '%s' is not supported by any codec", hex_numbers);
 800a51a:	f107 0314 	add.w	r3, r7, #20
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	4b09      	ldr	r3, [pc, #36]	; (800a548 <sail_codec_info_by_magic_number_from_io+0x308>)
 800a522:	22c6      	movs	r2, #198	; 0xc6
 800a524:	4909      	ldr	r1, [pc, #36]	; (800a54c <sail_codec_info_by_magic_number_from_io+0x30c>)
 800a526:	2001      	movs	r0, #1
 800a528:	f004 fe7c 	bl	800f224 <sail_log>
    SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 800a52c:	4b08      	ldr	r3, [pc, #32]	; (800a550 <sail_codec_info_by_magic_number_from_io+0x310>)
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	4b08      	ldr	r3, [pc, #32]	; (800a554 <sail_codec_info_by_magic_number_from_io+0x314>)
 800a532:	22c7      	movs	r2, #199	; 0xc7
 800a534:	4905      	ldr	r1, [pc, #20]	; (800a54c <sail_codec_info_by_magic_number_from_io+0x30c>)
 800a536:	2001      	movs	r0, #1
 800a538:	f004 fe74 	bl	800f224 <sail_log>
 800a53c:	f240 132d 	movw	r3, #301	; 0x12d
}
 800a540:	4618      	mov	r0, r3
 800a542:	3788      	adds	r7, #136	; 0x88
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	08017e2c 	.word	0x08017e2c
 800a54c:	08017ca8 	.word	0x08017ca8
 800a550:	08017e5c 	.word	0x08017e5c
 800a554:	08017d00 	.word	0x08017d00

0800a558 <pixel_format_from_string>:

/*
 * Private functions.
 */

static int pixel_format_from_string(const char *str) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]

    return sail_pixel_format_from_string(str);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 fb03 	bl	800bb6c <sail_pixel_format_from_string>
 800a566:	4603      	mov	r3, r0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <compression_from_string>:

static int compression_from_string(const char *str) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]

    return sail_compression_from_string(str);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f002 f8f7 	bl	800c76c <sail_compression_from_string>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <parse_serialized_ints>:

static sail_status_t parse_serialized_ints(const char *value, int **target, unsigned *length, int (*converter)(const char *str)) {
 800a588:	b590      	push	{r4, r7, lr}
 800a58a:	b08d      	sub	sp, #52	; 0x34
 800a58c:	af02      	add	r7, sp, #8
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(value);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d011      	beq.n	800a5ca <parse_serialized_ints+0x42>
 800a5a6:	4b55      	ldr	r3, [pc, #340]	; (800a6fc <parse_serialized_ints+0x174>)
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	4b55      	ldr	r3, [pc, #340]	; (800a700 <parse_serialized_ints+0x178>)
 800a5ac:	2231      	movs	r2, #49	; 0x31
 800a5ae:	4955      	ldr	r1, [pc, #340]	; (800a704 <parse_serialized_ints+0x17c>)
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	f004 fe37 	bl	800f224 <sail_log>
 800a5b6:	4b54      	ldr	r3, [pc, #336]	; (800a708 <parse_serialized_ints+0x180>)
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	4b54      	ldr	r3, [pc, #336]	; (800a70c <parse_serialized_ints+0x184>)
 800a5bc:	2231      	movs	r2, #49	; 0x31
 800a5be:	4951      	ldr	r1, [pc, #324]	; (800a704 <parse_serialized_ints+0x17c>)
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	f004 fe2f 	bl	800f224 <sail_log>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e093      	b.n	800a6f2 <parse_serialized_ints+0x16a>
    SAIL_CHECK_PTR(target);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bf0c      	ite	eq
 800a5d0:	2301      	moveq	r3, #1
 800a5d2:	2300      	movne	r3, #0
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d011      	beq.n	800a5fe <parse_serialized_ints+0x76>
 800a5da:	4b4d      	ldr	r3, [pc, #308]	; (800a710 <parse_serialized_ints+0x188>)
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	4b48      	ldr	r3, [pc, #288]	; (800a700 <parse_serialized_ints+0x178>)
 800a5e0:	2232      	movs	r2, #50	; 0x32
 800a5e2:	4948      	ldr	r1, [pc, #288]	; (800a704 <parse_serialized_ints+0x17c>)
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	f004 fe1d 	bl	800f224 <sail_log>
 800a5ea:	4b47      	ldr	r3, [pc, #284]	; (800a708 <parse_serialized_ints+0x180>)
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4b47      	ldr	r3, [pc, #284]	; (800a70c <parse_serialized_ints+0x184>)
 800a5f0:	2232      	movs	r2, #50	; 0x32
 800a5f2:	4944      	ldr	r1, [pc, #272]	; (800a704 <parse_serialized_ints+0x17c>)
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	f004 fe15 	bl	800f224 <sail_log>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e079      	b.n	800a6f2 <parse_serialized_ints+0x16a>
    SAIL_CHECK_PTR(length);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf0c      	ite	eq
 800a604:	2301      	moveq	r3, #1
 800a606:	2300      	movne	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d011      	beq.n	800a632 <parse_serialized_ints+0xaa>
 800a60e:	4b41      	ldr	r3, [pc, #260]	; (800a714 <parse_serialized_ints+0x18c>)
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4b3b      	ldr	r3, [pc, #236]	; (800a700 <parse_serialized_ints+0x178>)
 800a614:	2233      	movs	r2, #51	; 0x33
 800a616:	493b      	ldr	r1, [pc, #236]	; (800a704 <parse_serialized_ints+0x17c>)
 800a618:	2001      	movs	r0, #1
 800a61a:	f004 fe03 	bl	800f224 <sail_log>
 800a61e:	4b3a      	ldr	r3, [pc, #232]	; (800a708 <parse_serialized_ints+0x180>)
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	4b3a      	ldr	r3, [pc, #232]	; (800a70c <parse_serialized_ints+0x184>)
 800a624:	2233      	movs	r2, #51	; 0x33
 800a626:	4937      	ldr	r1, [pc, #220]	; (800a704 <parse_serialized_ints+0x17c>)
 800a628:	2001      	movs	r0, #1
 800a62a:	f004 fdfb 	bl	800f224 <sail_log>
 800a62e:	2301      	movs	r3, #1
 800a630:	e05f      	b.n	800a6f2 <parse_serialized_ints+0x16a>

    struct sail_string_node *string_node;
    SAIL_TRY(sail_split_into_string_node_chain(value, &string_node));
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	4619      	mov	r1, r3
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f005 ffd3 	bl	80105e4 <sail_split_into_string_node_chain>
 800a63e:	4603      	mov	r3, r0
 800a640:	837b      	strh	r3, [r7, #26]
 800a642:	8b7b      	ldrh	r3, [r7, #26]
 800a644:	2b00      	cmp	r3, #0
 800a646:	bf14      	ite	ne
 800a648:	2301      	movne	r3, #1
 800a64a:	2300      	moveq	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <parse_serialized_ints+0xce>
 800a652:	8b7b      	ldrh	r3, [r7, #26]
 800a654:	e04d      	b.n	800a6f2 <parse_serialized_ints+0x16a>

    *length = 0;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]

    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
 800a660:	e007      	b.n	800a672 <parse_serialized_ints+0xea>
        (*length)++;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1f4      	bne.n	800a662 <parse_serialized_ints+0xda>
    }

    if (*length > 0) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d033      	beq.n	800a6e8 <parse_serialized_ints+0x160>
        void *ptr;
        SAIL_TRY_OR_CLEANUP(sail_malloc((size_t)*length * sizeof(int), &ptr),
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	f107 0210 	add.w	r2, r7, #16
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f004 fec1 	bl	800f414 <sail_malloc>
 800a692:	4603      	mov	r3, r0
 800a694:	833b      	strh	r3, [r7, #24]
 800a696:	8b3b      	ldrh	r3, [r7, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d005      	beq.n	800a6b2 <parse_serialized_ints+0x12a>
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f005 ff8d 	bl	80105c8 <sail_destroy_string_node_chain>
 800a6ae:	8b3b      	ldrh	r3, [r7, #24]
 800a6b0:	e01f      	b.n	800a6f2 <parse_serialized_ints+0x16a>
                            /* cleanup */ sail_destroy_string_node_chain(string_node));
        *target = ptr;
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	601a      	str	r2, [r3, #0]

        int i = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	623b      	str	r3, [r7, #32]

        for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	e00f      	b.n	800a6e2 <parse_serialized_ints+0x15a>
            *(*target + i++) = converter(node->string);
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	1c59      	adds	r1, r3, #1
 800a6ce:	6239      	str	r1, [r7, #32]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	18d4      	adds	r4, r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	4798      	blx	r3
 800a6d8:	4603      	mov	r3, r0
 800a6da:	6023      	str	r3, [r4, #0]
        for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1ec      	bne.n	800a6c2 <parse_serialized_ints+0x13a>
        }
    }

    sail_destroy_string_node_chain(string_node);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f005 ff6c 	bl	80105c8 <sail_destroy_string_node_chain>

    return SAIL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	372c      	adds	r7, #44	; 0x2c
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd90      	pop	{r4, r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	08018028 	.word	0x08018028
 800a700:	08017fb8 	.word	0x08017fb8
 800a704:	08017fd0 	.word	0x08017fd0
 800a708:	08018034 	.word	0x08018034
 800a70c:	08018030 	.word	0x08018030
 800a710:	08018048 	.word	0x08018048
 800a714:	08018050 	.word	0x08018050

0800a718 <codec_feature_from_string>:

static int codec_feature_from_string(const char *str) {
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]

    return sail_codec_feature_from_string(str);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f002 fb19 	bl	800cd58 <sail_codec_feature_from_string>
 800a726:	4603      	mov	r3, r0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <parse_flags>:

static sail_status_t parse_flags(const char *value, int *features, int (*converter)(const char *str)) {
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	; 0x28
 800a734:	af02      	add	r7, sp, #8
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(value);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bf0c      	ite	eq
 800a742:	2301      	moveq	r3, #1
 800a744:	2300      	movne	r3, #0
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d011      	beq.n	800a770 <parse_flags+0x40>
 800a74c:	4b2e      	ldr	r3, [pc, #184]	; (800a808 <parse_flags+0xd8>)
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	4b2e      	ldr	r3, [pc, #184]	; (800a80c <parse_flags+0xdc>)
 800a752:	2257      	movs	r2, #87	; 0x57
 800a754:	492e      	ldr	r1, [pc, #184]	; (800a810 <parse_flags+0xe0>)
 800a756:	2001      	movs	r0, #1
 800a758:	f004 fd64 	bl	800f224 <sail_log>
 800a75c:	4b2d      	ldr	r3, [pc, #180]	; (800a814 <parse_flags+0xe4>)
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	4b2d      	ldr	r3, [pc, #180]	; (800a818 <parse_flags+0xe8>)
 800a762:	2257      	movs	r2, #87	; 0x57
 800a764:	492a      	ldr	r1, [pc, #168]	; (800a810 <parse_flags+0xe0>)
 800a766:	2001      	movs	r0, #1
 800a768:	f004 fd5c 	bl	800f224 <sail_log>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e047      	b.n	800a800 <parse_flags+0xd0>
    SAIL_CHECK_PTR(features);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	bf0c      	ite	eq
 800a776:	2301      	moveq	r3, #1
 800a778:	2300      	movne	r3, #0
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d011      	beq.n	800a7a4 <parse_flags+0x74>
 800a780:	4b26      	ldr	r3, [pc, #152]	; (800a81c <parse_flags+0xec>)
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	4b21      	ldr	r3, [pc, #132]	; (800a80c <parse_flags+0xdc>)
 800a786:	2258      	movs	r2, #88	; 0x58
 800a788:	4921      	ldr	r1, [pc, #132]	; (800a810 <parse_flags+0xe0>)
 800a78a:	2001      	movs	r0, #1
 800a78c:	f004 fd4a 	bl	800f224 <sail_log>
 800a790:	4b20      	ldr	r3, [pc, #128]	; (800a814 <parse_flags+0xe4>)
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	4b20      	ldr	r3, [pc, #128]	; (800a818 <parse_flags+0xe8>)
 800a796:	2258      	movs	r2, #88	; 0x58
 800a798:	491d      	ldr	r1, [pc, #116]	; (800a810 <parse_flags+0xe0>)
 800a79a:	2001      	movs	r0, #1
 800a79c:	f004 fd42 	bl	800f224 <sail_log>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e02d      	b.n	800a800 <parse_flags+0xd0>

    struct sail_string_node *string_node;
    SAIL_TRY(sail_split_into_string_node_chain(value, &string_node));
 800a7a4:	f107 0314 	add.w	r3, r7, #20
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f005 ff1a 	bl	80105e4 <sail_split_into_string_node_chain>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	837b      	strh	r3, [r7, #26]
 800a7b4:	8b7b      	ldrh	r3, [r7, #26]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bf14      	ite	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	2300      	moveq	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <parse_flags+0x98>
 800a7c4:	8b7b      	ldrh	r3, [r7, #26]
 800a7c6:	e01b      	b.n	800a800 <parse_flags+0xd0>

    *features = 0;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]

    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	61fb      	str	r3, [r7, #28]
 800a7d2:	e00d      	b.n	800a7f0 <parse_flags+0xc0>
        *features |= converter(node->string);
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4610      	mov	r0, r2
 800a7dc:	4798      	blx	r3
 800a7de:	4602      	mov	r2, r0
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	601a      	str	r2, [r3, #0]
    for (struct sail_string_node *node = string_node; node != NULL; node = node->next) {
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1ee      	bne.n	800a7d4 <parse_flags+0xa4>
    }

    sail_destroy_string_node_chain(string_node);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f005 fee5 	bl	80105c8 <sail_destroy_string_node_chain>

    return SAIL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	08018028 	.word	0x08018028
 800a80c:	08017fb8 	.word	0x08017fb8
 800a810:	08017fd0 	.word	0x08017fd0
 800a814:	08018034 	.word	0x08018034
 800a818:	08018030 	.word	0x08018030
 800a81c:	08018058 	.word	0x08018058

0800a820 <codec_priority_from_string>:

struct init_data {
    struct sail_codec_info *codec_info;
};

static sail_status_t codec_priority_from_string(const char *str, enum SailCodecPriority *result) {
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800a82a:	f107 0308 	add.w	r3, r7, #8
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f006 f86d 	bl	8010910 <sail_string_hash>
 800a836:	4603      	mov	r3, r0
 800a838:	82fb      	strh	r3, [r7, #22]
 800a83a:	8afb      	ldrh	r3, [r7, #22]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bf14      	ite	ne
 800a840:	2301      	movne	r3, #1
 800a842:	2300      	moveq	r3, #0
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <codec_priority_from_string+0x30>
 800a84a:	f44f 7399 	mov.w	r3, #306	; 0x132
 800a84e:	e050      	b.n	800a8f2 <codec_priority_from_string+0xd2>
                        /* cleanup */ return SAIL_ERROR_UNSUPPORTED_CODEC_PRIORITY);

    switch (hash) {
 800a850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a854:	4829      	ldr	r0, [pc, #164]	; (800a8fc <codec_priority_from_string+0xdc>)
 800a856:	f24d 01a9 	movw	r1, #53417	; 0xd0a9
 800a85a:	428b      	cmp	r3, r1
 800a85c:	bf08      	it	eq
 800a85e:	4282      	cmpeq	r2, r0
 800a860:	d02c      	beq.n	800a8bc <codec_priority_from_string+0x9c>
 800a862:	4927      	ldr	r1, [pc, #156]	; (800a900 <codec_priority_from_string+0xe0>)
 800a864:	428a      	cmp	r2, r1
 800a866:	f24d 01a9 	movw	r1, #53417	; 0xd0a9
 800a86a:	eb73 0101 	sbcs.w	r1, r3, r1
 800a86e:	d23e      	bcs.n	800a8ee <codec_priority_from_string+0xce>
 800a870:	4824      	ldr	r0, [pc, #144]	; (800a904 <codec_priority_from_string+0xe4>)
 800a872:	f240 6152 	movw	r1, #1618	; 0x652
 800a876:	428b      	cmp	r3, r1
 800a878:	bf08      	it	eq
 800a87a:	4282      	cmpeq	r2, r0
 800a87c:	d028      	beq.n	800a8d0 <codec_priority_from_string+0xb0>
 800a87e:	4922      	ldr	r1, [pc, #136]	; (800a908 <codec_priority_from_string+0xe8>)
 800a880:	428a      	cmp	r2, r1
 800a882:	f240 6152 	movw	r1, #1618	; 0x652
 800a886:	eb73 0101 	sbcs.w	r1, r3, r1
 800a88a:	d230      	bcs.n	800a8ee <codec_priority_from_string+0xce>
 800a88c:	481f      	ldr	r0, [pc, #124]	; (800a90c <codec_priority_from_string+0xec>)
 800a88e:	f240 6152 	movw	r1, #1618	; 0x652
 800a892:	428b      	cmp	r3, r1
 800a894:	bf08      	it	eq
 800a896:	4282      	cmpeq	r2, r0
 800a898:	d024      	beq.n	800a8e4 <codec_priority_from_string+0xc4>
 800a89a:	491d      	ldr	r1, [pc, #116]	; (800a910 <codec_priority_from_string+0xf0>)
 800a89c:	428a      	cmp	r2, r1
 800a89e:	f240 6152 	movw	r1, #1618	; 0x652
 800a8a2:	eb73 0101 	sbcs.w	r1, r3, r1
 800a8a6:	d222      	bcs.n	800a8ee <codec_priority_from_string+0xce>
 800a8a8:	491a      	ldr	r1, [pc, #104]	; (800a914 <codec_priority_from_string+0xf4>)
 800a8aa:	4411      	add	r1, r2
 800a8ac:	4319      	orrs	r1, r3
 800a8ae:	d014      	beq.n	800a8da <codec_priority_from_string+0xba>
 800a8b0:	4919      	ldr	r1, [pc, #100]	; (800a918 <codec_priority_from_string+0xf8>)
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	bf08      	it	eq
 800a8b6:	428a      	cmpeq	r2, r1
 800a8b8:	d005      	beq.n	800a8c6 <codec_priority_from_string+0xa6>
 800a8ba:	e018      	b.n	800a8ee <codec_priority_from_string+0xce>
        case UINT64_C(229425771102513): *result = SAIL_CODEC_PRIORITY_HIGHEST; return SAIL_OK;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e015      	b.n	800a8f2 <codec_priority_from_string+0xd2>
        case UINT64_C(6384110277):      *result = SAIL_CODEC_PRIORITY_HIGH;    return SAIL_OK;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	701a      	strb	r2, [r3, #0]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e010      	b.n	800a8f2 <codec_priority_from_string+0xd2>
        case UINT64_C(6952486921094):   *result = SAIL_CODEC_PRIORITY_MEDIUM;  return SAIL_OK;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e00b      	b.n	800a8f2 <codec_priority_from_string+0xd2>
        case UINT64_C(193462455):       *result = SAIL_CODEC_PRIORITY_LOW;     return SAIL_OK;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e006      	b.n	800a8f2 <codec_priority_from_string+0xd2>
        case UINT64_C(6952460323299):   *result = SAIL_CODEC_PRIORITY_LOWEST;  return SAIL_OK;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	e001      	b.n	800a8f2 <codec_priority_from_string+0xd2>

        default: return SAIL_ERROR_UNSUPPORTED_CODEC_PRIORITY;
 800a8ee:	f44f 7399 	mov.w	r3, #306	; 0x132
    }
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	5996c131 	.word	0x5996c131
 800a900:	5996c132 	.word	0x5996c132
 800a904:	c0836386 	.word	0xc0836386
 800a908:	c0836387 	.word	0xc0836387
 800a90c:	beed89e3 	.word	0xbeed89e3
 800a910:	beed89e4 	.word	0xbeed89e4
 800a914:	f477ff49 	.word	0xf477ff49
 800a918:	7c85cac5 	.word	0x7c85cac5

0800a91c <inih_handler_sail_error>:

static sail_status_t inih_handler_sail_error(void *data, const char *section, const char *name, const char *value) {
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b095      	sub	sp, #84	; 0x54
 800a920:	af02      	add	r7, sp, #8
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]

    /* Silently ignore empty values. */
    if (strlen(value) == 0) {
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <inih_handler_sail_error+0x1a>
        return SAIL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	e35b      	b.n	800afee <inih_handler_sail_error+0x6d2>
    }

    struct init_data *init_data = (struct init_data *)data;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38
    struct sail_codec_info *codec_info = init_data->codec_info;
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34

    if (strcmp(section, "codec") == 0) {
 800a940:	4998      	ldr	r1, [pc, #608]	; (800aba4 <inih_handler_sail_error+0x288>)
 800a942:	68b8      	ldr	r0, [r7, #8]
 800a944:	f7f5 fdcc 	bl	80004e0 <strcmp>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f040 8148 	bne.w	800abe0 <inih_handler_sail_error+0x2c4>
        if (strcmp(name, "layout") == 0) {
 800a950:	4995      	ldr	r1, [pc, #596]	; (800aba8 <inih_handler_sail_error+0x28c>)
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7f5 fdc4 	bl	80004e0 <strcmp>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <inih_handler_sail_error+0x50>
            codec_info->layout = atoi(value);
 800a95e:	6838      	ldr	r0, [r7, #0]
 800a960:	f008 fac1 	bl	8012ee6 <atoi>
 800a964:	4602      	mov	r2, r0
 800a966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a968:	605a      	str	r2, [r3, #4]
 800a96a:	e33f      	b.n	800afec <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "version") == 0) {
 800a96c:	498f      	ldr	r1, [pc, #572]	; (800abac <inih_handler_sail_error+0x290>)
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f5 fdb6 	bl	80004e0 <strcmp>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d112      	bne.n	800a9a0 <inih_handler_sail_error+0x84>
            SAIL_TRY(sail_strdup(value, &codec_info->version));
 800a97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97c:	330c      	adds	r3, #12
 800a97e:	4619      	mov	r1, r3
 800a980:	6838      	ldr	r0, [r7, #0]
 800a982:	f005 ff13 	bl	80107ac <sail_strdup>
 800a986:	4603      	mov	r3, r0
 800a988:	827b      	strh	r3, [r7, #18]
 800a98a:	8a7b      	ldrh	r3, [r7, #18]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bf14      	ite	ne
 800a990:	2301      	movne	r3, #1
 800a992:	2300      	moveq	r3, #0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 8328 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800a99c:	8a7b      	ldrh	r3, [r7, #18]
 800a99e:	e326      	b.n	800afee <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "priority") == 0) {
 800a9a0:	4983      	ldr	r1, [pc, #524]	; (800abb0 <inih_handler_sail_error+0x294>)
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7f5 fd9c 	bl	80004e0 <strcmp>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d11a      	bne.n	800a9e4 <inih_handler_sail_error+0xc8>
            SAIL_TRY_OR_CLEANUP(codec_priority_from_string(value, &codec_info->priority),
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6838      	ldr	r0, [r7, #0]
 800a9b6:	f7ff ff33 	bl	800a820 <codec_priority_from_string>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	82bb      	strh	r3, [r7, #20]
 800a9be:	8abb      	ldrh	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bf14      	ite	ne
 800a9c4:	2301      	movne	r3, #1
 800a9c6:	2300      	moveq	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 830e 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	4b77      	ldr	r3, [pc, #476]	; (800abb4 <inih_handler_sail_error+0x298>)
 800a9d6:	228e      	movs	r2, #142	; 0x8e
 800a9d8:	4977      	ldr	r1, [pc, #476]	; (800abb8 <inih_handler_sail_error+0x29c>)
 800a9da:	2001      	movs	r0, #1
 800a9dc:	f004 fc22 	bl	800f224 <sail_log>
 800a9e0:	8abb      	ldrh	r3, [r7, #20]
 800a9e2:	e304      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec priority: '%s'", value));
        } else if (strcmp(name, "name") == 0) {
 800a9e4:	4975      	ldr	r1, [pc, #468]	; (800abbc <inih_handler_sail_error+0x2a0>)
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7f5 fd7a 	bl	80004e0 <strcmp>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d112      	bne.n	800aa18 <inih_handler_sail_error+0xfc>
            SAIL_TRY(sail_strdup(value, &codec_info->name));
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	3310      	adds	r3, #16
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6838      	ldr	r0, [r7, #0]
 800a9fa:	f005 fed7 	bl	80107ac <sail_strdup>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	82fb      	strh	r3, [r7, #22]
 800aa02:	8afb      	ldrh	r3, [r7, #22]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bf14      	ite	ne
 800aa08:	2301      	movne	r3, #1
 800aa0a:	2300      	moveq	r3, #0
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 82ec 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800aa14:	8afb      	ldrh	r3, [r7, #22]
 800aa16:	e2ea      	b.n	800afee <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "description") == 0) {
 800aa18:	4969      	ldr	r1, [pc, #420]	; (800abc0 <inih_handler_sail_error+0x2a4>)
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7f5 fd60 	bl	80004e0 <strcmp>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d112      	bne.n	800aa4c <inih_handler_sail_error+0x130>
            SAIL_TRY(sail_strdup(value, &codec_info->description));
 800aa26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa28:	3314      	adds	r3, #20
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6838      	ldr	r0, [r7, #0]
 800aa2e:	f005 febd 	bl	80107ac <sail_strdup>
 800aa32:	4603      	mov	r3, r0
 800aa34:	833b      	strh	r3, [r7, #24]
 800aa36:	8b3b      	ldrh	r3, [r7, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bf14      	ite	ne
 800aa3c:	2301      	movne	r3, #1
 800aa3e:	2300      	moveq	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 82d2 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800aa48:	8b3b      	ldrh	r3, [r7, #24]
 800aa4a:	e2d0      	b.n	800afee <inih_handler_sail_error+0x6d2>
        } else if (strcmp(name, "magic-numbers") == 0) {
 800aa4c:	495d      	ldr	r1, [pc, #372]	; (800abc4 <inih_handler_sail_error+0x2a8>)
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7f5 fd46 	bl	80004e0 <strcmp>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d13e      	bne.n	800aad8 <inih_handler_sail_error+0x1bc>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->magic_number_node));
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6838      	ldr	r0, [r7, #0]
 800aa62:	f005 fdbf 	bl	80105e4 <sail_split_into_string_node_chain>
 800aa66:	4603      	mov	r3, r0
 800aa68:	837b      	strh	r3, [r7, #26]
 800aa6a:	8b7b      	ldrh	r3, [r7, #26]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bf14      	ite	ne
 800aa70:	2301      	movne	r3, #1
 800aa72:	2300      	moveq	r3, #0
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <inih_handler_sail_error+0x162>
 800aa7a:	8b7b      	ldrh	r3, [r7, #26]
 800aa7c:	e2b7      	b.n	800afee <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->magic_number_node; node != NULL; node = node->next) {
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	647b      	str	r3, [r7, #68]	; 0x44
 800aa84:	e024      	b.n	800aad0 <inih_handler_sail_error+0x1b4>
                if (strlen(node->string) > SAIL_MAGIC_BUFFER_SIZE * 3 - 1) {
 800aa86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f5 fd32 	bl	80004f4 <strlen>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b2f      	cmp	r3, #47	; 0x2f
 800aa94:	d914      	bls.n	800aac0 <inih_handler_sail_error+0x1a4>
                    SAIL_LOG_ERROR("Magic number '%s' is too long. Magic numbers for the '%s' codec are disabled",
 800aa96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa9c:	6912      	ldr	r2, [r2, #16]
 800aa9e:	9201      	str	r2, [sp, #4]
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	4b49      	ldr	r3, [pc, #292]	; (800abc8 <inih_handler_sail_error+0x2ac>)
 800aaa4:	2298      	movs	r2, #152	; 0x98
 800aaa6:	4944      	ldr	r1, [pc, #272]	; (800abb8 <inih_handler_sail_error+0x29c>)
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f004 fbbb 	bl	800f224 <sail_log>
                                    node->string, codec_info->name);
                    sail_destroy_string_node_chain(codec_info->magic_number_node);
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f005 fd88 	bl	80105c8 <sail_destroy_string_node_chain>
                    codec_info->magic_number_node = NULL;
 800aab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]
                    break;
 800aabe:	e295      	b.n	800afec <inih_handler_sail_error+0x6d0>
                }

                sail_to_lower(node->string);
 800aac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f005 feef 	bl	80108a8 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->magic_number_node; node != NULL; node = node->next) {
 800aaca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	647b      	str	r3, [r7, #68]	; 0x44
 800aad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1d7      	bne.n	800aa86 <inih_handler_sail_error+0x16a>
 800aad6:	e289      	b.n	800afec <inih_handler_sail_error+0x6d0>
            }
        } else if (strcmp(name, "extensions") == 0) {
 800aad8:	493c      	ldr	r1, [pc, #240]	; (800abcc <inih_handler_sail_error+0x2b0>)
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7f5 fd00 	bl	80004e0 <strcmp>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d121      	bne.n	800ab2a <inih_handler_sail_error+0x20e>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->extension_node));
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	331c      	adds	r3, #28
 800aaea:	4619      	mov	r1, r3
 800aaec:	6838      	ldr	r0, [r7, #0]
 800aaee:	f005 fd79 	bl	80105e4 <sail_split_into_string_node_chain>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	83bb      	strh	r3, [r7, #28]
 800aaf6:	8bbb      	ldrh	r3, [r7, #28]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bf14      	ite	ne
 800aafc:	2301      	movne	r3, #1
 800aafe:	2300      	moveq	r3, #0
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <inih_handler_sail_error+0x1ee>
 800ab06:	8bbb      	ldrh	r3, [r7, #28]
 800ab08:	e271      	b.n	800afee <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->extension_node; node != NULL; node = node->next) {
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab10:	e007      	b.n	800ab22 <inih_handler_sail_error+0x206>
                sail_to_lower(node->string);
 800ab12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f005 fec6 	bl	80108a8 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->extension_node; node != NULL; node = node->next) {
 800ab1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	643b      	str	r3, [r7, #64]	; 0x40
 800ab22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f4      	bne.n	800ab12 <inih_handler_sail_error+0x1f6>
 800ab28:	e260      	b.n	800afec <inih_handler_sail_error+0x6d0>
            }
        } else if (strcmp(name, "mime-types") == 0) {
 800ab2a:	4929      	ldr	r1, [pc, #164]	; (800abd0 <inih_handler_sail_error+0x2b4>)
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7f5 fcd7 	bl	80004e0 <strcmp>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d121      	bne.n	800ab7c <inih_handler_sail_error+0x260>
            SAIL_TRY(sail_split_into_string_node_chain(value, &codec_info->mime_type_node));
 800ab38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3a:	3320      	adds	r3, #32
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6838      	ldr	r0, [r7, #0]
 800ab40:	f005 fd50 	bl	80105e4 <sail_split_into_string_node_chain>
 800ab44:	4603      	mov	r3, r0
 800ab46:	83fb      	strh	r3, [r7, #30]
 800ab48:	8bfb      	ldrh	r3, [r7, #30]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bf14      	ite	ne
 800ab4e:	2301      	movne	r3, #1
 800ab50:	2300      	moveq	r3, #0
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <inih_handler_sail_error+0x240>
 800ab58:	8bfb      	ldrh	r3, [r7, #30]
 800ab5a:	e248      	b.n	800afee <inih_handler_sail_error+0x6d2>

            for (struct sail_string_node *node = codec_info->mime_type_node; node != NULL; node = node->next) {
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab62:	e007      	b.n	800ab74 <inih_handler_sail_error+0x258>
                sail_to_lower(node->string);
 800ab64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f005 fe9d 	bl	80108a8 <sail_to_lower>
            for (struct sail_string_node *node = codec_info->mime_type_node; node != NULL; node = node->next) {
 800ab6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f4      	bne.n	800ab64 <inih_handler_sail_error+0x248>
 800ab7a:	e237      	b.n	800afec <inih_handler_sail_error+0x6d0>
            }
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	4b13      	ldr	r3, [pc, #76]	; (800abd4 <inih_handler_sail_error+0x2b8>)
 800ab86:	22ae      	movs	r2, #174	; 0xae
 800ab88:	490b      	ldr	r1, [pc, #44]	; (800abb8 <inih_handler_sail_error+0x29c>)
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	f004 fb4a 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800ab90:	4b11      	ldr	r3, [pc, #68]	; (800abd8 <inih_handler_sail_error+0x2bc>)
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	4b11      	ldr	r3, [pc, #68]	; (800abdc <inih_handler_sail_error+0x2c0>)
 800ab96:	22af      	movs	r2, #175	; 0xaf
 800ab98:	4907      	ldr	r1, [pc, #28]	; (800abb8 <inih_handler_sail_error+0x29c>)
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	f004 fb42 	bl	800f224 <sail_log>
 800aba0:	2308      	movs	r3, #8
 800aba2:	e224      	b.n	800afee <inih_handler_sail_error+0x6d2>
 800aba4:	08018064 	.word	0x08018064
 800aba8:	0801806c 	.word	0x0801806c
 800abac:	08018074 	.word	0x08018074
 800abb0:	0801807c 	.word	0x0801807c
 800abb4:	08018088 	.word	0x08018088
 800abb8:	08017fd0 	.word	0x08017fd0
 800abbc:	080180b0 	.word	0x080180b0
 800abc0:	080180b8 	.word	0x080180b8
 800abc4:	080180c4 	.word	0x080180c4
 800abc8:	080180d4 	.word	0x080180d4
 800abcc:	08018124 	.word	0x08018124
 800abd0:	08018130 	.word	0x08018130
 800abd4:	0801813c 	.word	0x0801813c
 800abd8:	08018164 	.word	0x08018164
 800abdc:	08018030 	.word	0x08018030
        }
    } else if (strcmp(section, "load-features") == 0) {
 800abe0:	499f      	ldr	r1, [pc, #636]	; (800ae60 <inih_handler_sail_error+0x544>)
 800abe2:	68b8      	ldr	r0, [r7, #8]
 800abe4:	f7f5 fc7c 	bl	80004e0 <strcmp>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d159      	bne.n	800aca2 <inih_handler_sail_error+0x386>
        if (strcmp(name, "features") == 0) {
 800abee:	499d      	ldr	r1, [pc, #628]	; (800ae64 <inih_handler_sail_error+0x548>)
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7f5 fc75 	bl	80004e0 <strcmp>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d11b      	bne.n	800ac34 <inih_handler_sail_error+0x318>
            SAIL_TRY_OR_CLEANUP(parse_flags(value, &codec_info->load_features->features, codec_feature_from_string),
 800abfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	4a99      	ldr	r2, [pc, #612]	; (800ae68 <inih_handler_sail_error+0x54c>)
 800ac02:	4619      	mov	r1, r3
 800ac04:	6838      	ldr	r0, [r7, #0]
 800ac06:	f7ff fd93 	bl	800a730 <parse_flags>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	843b      	strh	r3, [r7, #32]
 800ac0e:	8c3b      	ldrh	r3, [r7, #32]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bf14      	ite	ne
 800ac14:	2301      	movne	r3, #1
 800ac16:	2300      	moveq	r3, #0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 81e6 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	4b91      	ldr	r3, [pc, #580]	; (800ae6c <inih_handler_sail_error+0x550>)
 800ac26:	22b4      	movs	r2, #180	; 0xb4
 800ac28:	4991      	ldr	r1, [pc, #580]	; (800ae70 <inih_handler_sail_error+0x554>)
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	f004 fafa 	bl	800f224 <sail_log>
 800ac30:	8c3b      	ldrh	r3, [r7, #32]
 800ac32:	e1dc      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec features: '%s'", value));
        } else if (strcmp(name, "tuning") == 0) {
 800ac34:	498f      	ldr	r1, [pc, #572]	; (800ae74 <inih_handler_sail_error+0x558>)
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7f5 fc52 	bl	80004e0 <strcmp>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d11b      	bne.n	800ac7a <inih_handler_sail_error+0x35e>
            SAIL_TRY_OR_CLEANUP(sail_split_into_string_node_chain(value, &codec_info->load_features->tuning),
 800ac42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	3304      	adds	r3, #4
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6838      	ldr	r0, [r7, #0]
 800ac4c:	f005 fcca 	bl	80105e4 <sail_split_into_string_node_chain>
 800ac50:	4603      	mov	r3, r0
 800ac52:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2301      	movne	r3, #1
 800ac5c:	2300      	moveq	r3, #0
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 81c3 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	4b83      	ldr	r3, [pc, #524]	; (800ae78 <inih_handler_sail_error+0x55c>)
 800ac6c:	22b7      	movs	r2, #183	; 0xb7
 800ac6e:	4980      	ldr	r1, [pc, #512]	; (800ae70 <inih_handler_sail_error+0x554>)
 800ac70:	2001      	movs	r0, #1
 800ac72:	f004 fad7 	bl	800f224 <sail_log>
 800ac76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac78:	e1b9      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                    /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec tuning: '%s'", value));
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4b7e      	ldr	r3, [pc, #504]	; (800ae7c <inih_handler_sail_error+0x560>)
 800ac84:	22b9      	movs	r2, #185	; 0xb9
 800ac86:	497a      	ldr	r1, [pc, #488]	; (800ae70 <inih_handler_sail_error+0x554>)
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f004 facb 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800ac8e:	4b7c      	ldr	r3, [pc, #496]	; (800ae80 <inih_handler_sail_error+0x564>)
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	4b7c      	ldr	r3, [pc, #496]	; (800ae84 <inih_handler_sail_error+0x568>)
 800ac94:	22ba      	movs	r2, #186	; 0xba
 800ac96:	4976      	ldr	r1, [pc, #472]	; (800ae70 <inih_handler_sail_error+0x554>)
 800ac98:	2001      	movs	r0, #1
 800ac9a:	f004 fac3 	bl	800f224 <sail_log>
 800ac9e:	2308      	movs	r3, #8
 800aca0:	e1a5      	b.n	800afee <inih_handler_sail_error+0x6d2>
        }
    } else if (strcmp(section, "save-features") == 0) {
 800aca2:	4979      	ldr	r1, [pc, #484]	; (800ae88 <inih_handler_sail_error+0x56c>)
 800aca4:	68b8      	ldr	r0, [r7, #8]
 800aca6:	f7f5 fc1b 	bl	80004e0 <strcmp>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	f040 818b 	bne.w	800afc8 <inih_handler_sail_error+0x6ac>
        if (strcmp(name, "features") == 0) {
 800acb2:	496c      	ldr	r1, [pc, #432]	; (800ae64 <inih_handler_sail_error+0x548>)
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7f5 fc13 	bl	80004e0 <strcmp>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d11c      	bne.n	800acfa <inih_handler_sail_error+0x3de>
            SAIL_TRY_OR_CLEANUP(parse_flags(value, &codec_info->save_features->features, codec_feature_from_string),
 800acc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	3308      	adds	r3, #8
 800acc6:	4a68      	ldr	r2, [pc, #416]	; (800ae68 <inih_handler_sail_error+0x54c>)
 800acc8:	4619      	mov	r1, r3
 800acca:	6838      	ldr	r0, [r7, #0]
 800accc:	f7ff fd30 	bl	800a730 <parse_flags>
 800acd0:	4603      	mov	r3, r0
 800acd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800acd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bf14      	ite	ne
 800acda:	2301      	movne	r3, #1
 800acdc:	2300      	moveq	r3, #0
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8183 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	4b60      	ldr	r3, [pc, #384]	; (800ae6c <inih_handler_sail_error+0x550>)
 800acec:	22bf      	movs	r2, #191	; 0xbf
 800acee:	4960      	ldr	r1, [pc, #384]	; (800ae70 <inih_handler_sail_error+0x554>)
 800acf0:	2001      	movs	r0, #1
 800acf2:	f004 fa97 	bl	800f224 <sail_log>
 800acf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acf8:	e179      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec features: '%s'", value));
        } else if (strcmp(name, "pixel-formats") == 0) {
 800acfa:	4964      	ldr	r1, [pc, #400]	; (800ae8c <inih_handler_sail_error+0x570>)
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f5 fbef 	bl	80004e0 <strcmp>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d11e      	bne.n	800ad46 <inih_handler_sail_error+0x42a>
            SAIL_TRY_OR_CLEANUP(parse_serialized_ints(value,
 800ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad12:	1d1a      	adds	r2, r3, #4
 800ad14:	4b5e      	ldr	r3, [pc, #376]	; (800ae90 <inih_handler_sail_error+0x574>)
 800ad16:	6838      	ldr	r0, [r7, #0]
 800ad18:	f7ff fc36 	bl	800a588 <parse_serialized_ints>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ad20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	bf14      	ite	ne
 800ad26:	2301      	movne	r3, #1
 800ad28:	2300      	moveq	r3, #0
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 815d 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	4b57      	ldr	r3, [pc, #348]	; (800ae94 <inih_handler_sail_error+0x578>)
 800ad38:	22c5      	movs	r2, #197	; 0xc5
 800ad3a:	494d      	ldr	r1, [pc, #308]	; (800ae70 <inih_handler_sail_error+0x554>)
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	f004 fa71 	bl	800f224 <sail_log>
 800ad42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad44:	e153      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                                        (int **)&codec_info->save_features->pixel_formats,
                                                        &codec_info->save_features->pixel_formats_length,
                                                        pixel_format_from_string),
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse output pixel formats: '%s'", value));
        } else if (strcmp(name, "compressions") == 0) {
 800ad46:	4954      	ldr	r1, [pc, #336]	; (800ae98 <inih_handler_sail_error+0x57c>)
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f5 fbc9 	bl	80004e0 <strcmp>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d120      	bne.n	800ad96 <inih_handler_sail_error+0x47a>
            SAIL_TRY_OR_CLEANUP(parse_serialized_ints(value,
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad58:	f103 010c 	add.w	r1, r3, #12
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad60:	f103 0210 	add.w	r2, r3, #16
 800ad64:	4b4d      	ldr	r3, [pc, #308]	; (800ae9c <inih_handler_sail_error+0x580>)
 800ad66:	6838      	ldr	r0, [r7, #0]
 800ad68:	f7ff fc0e 	bl	800a588 <parse_serialized_ints>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	853b      	strh	r3, [r7, #40]	; 0x28
 800ad70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bf14      	ite	ne
 800ad76:	2301      	movne	r3, #1
 800ad78:	2300      	moveq	r3, #0
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 8135 	beq.w	800afec <inih_handler_sail_error+0x6d0>
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4b46      	ldr	r3, [pc, #280]	; (800aea0 <inih_handler_sail_error+0x584>)
 800ad88:	22cb      	movs	r2, #203	; 0xcb
 800ad8a:	4939      	ldr	r1, [pc, #228]	; (800ae70 <inih_handler_sail_error+0x554>)
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f004 fa49 	bl	800f224 <sail_log>
 800ad92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad94:	e12b      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                                        (int **)&codec_info->save_features->compressions,
                                                        &codec_info->save_features->compressions_length,
                                                        compression_from_string),
                                /* cleanup */ SAIL_LOG_ERROR("Failed to parse compressions: '%s'", value));
        } else if (strcmp(name, "default-compression") == 0) {
 800ad96:	4943      	ldr	r1, [pc, #268]	; (800aea4 <inih_handler_sail_error+0x588>)
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7f5 fba1 	bl	80004e0 <strcmp>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d107      	bne.n	800adb4 <inih_handler_sail_error+0x498>
            codec_info->save_features->default_compression = sail_compression_from_string(value);
 800ada4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ada8:	6838      	ldr	r0, [r7, #0]
 800adaa:	f001 fcdf 	bl	800c76c <sail_compression_from_string>
 800adae:	4603      	mov	r3, r0
 800adb0:	7523      	strb	r3, [r4, #20]
 800adb2:	e11b      	b.n	800afec <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-min") == 0) {
 800adb4:	493c      	ldr	r1, [pc, #240]	; (800aea8 <inih_handler_sail_error+0x58c>)
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7f5 fb92 	bl	80004e0 <strcmp>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d123      	bne.n	800ae0a <inih_handler_sail_error+0x4ee>
            if (codec_info->save_features->compression_level == NULL) {
 800adc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d111      	bne.n	800adf0 <inih_handler_sail_error+0x4d4>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800adcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	3318      	adds	r3, #24
 800add2:	4618      	mov	r0, r3
 800add4:	f002 f856 	bl	800ce84 <sail_alloc_compression_level>
 800add8:	4603      	mov	r3, r0
 800adda:	857b      	strh	r3, [r7, #42]	; 0x2a
 800addc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bf14      	ite	ne
 800ade2:	2301      	movne	r3, #1
 800ade4:	2300      	moveq	r3, #0
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <inih_handler_sail_error+0x4d4>
 800adec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800adee:	e0fe      	b.n	800afee <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->min_level = atof(value);
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf4:	699c      	ldr	r4, [r3, #24]
 800adf6:	6838      	ldr	r0, [r7, #0]
 800adf8:	f008 f872 	bl	8012ee0 <atof>
 800adfc:	eeb0 7a40 	vmov.f32	s14, s0
 800ae00:	eef0 7a60 	vmov.f32	s15, s1
 800ae04:	ed84 7b00 	vstr	d7, [r4]
 800ae08:	e0f0      	b.n	800afec <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-max") == 0) {
 800ae0a:	4928      	ldr	r1, [pc, #160]	; (800aeac <inih_handler_sail_error+0x590>)
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7f5 fb67 	bl	80004e0 <strcmp>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d14b      	bne.n	800aeb0 <inih_handler_sail_error+0x594>
            if (codec_info->save_features->compression_level == NULL) {
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d111      	bne.n	800ae46 <inih_handler_sail_error+0x52a>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	3318      	adds	r3, #24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f002 f82b 	bl	800ce84 <sail_alloc_compression_level>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ae32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <inih_handler_sail_error+0x52a>
 800ae42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae44:	e0d3      	b.n	800afee <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->max_level = atof(value);
 800ae46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4a:	699c      	ldr	r4, [r3, #24]
 800ae4c:	6838      	ldr	r0, [r7, #0]
 800ae4e:	f008 f847 	bl	8012ee0 <atof>
 800ae52:	eeb0 7a40 	vmov.f32	s14, s0
 800ae56:	eef0 7a60 	vmov.f32	s15, s1
 800ae5a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ae5e:	e0c5      	b.n	800afec <inih_handler_sail_error+0x6d0>
 800ae60:	0801817c 	.word	0x0801817c
 800ae64:	08018058 	.word	0x08018058
 800ae68:	0800a719 	.word	0x0800a719
 800ae6c:	0801818c 	.word	0x0801818c
 800ae70:	08017fd0 	.word	0x08017fd0
 800ae74:	080181b4 	.word	0x080181b4
 800ae78:	080181bc 	.word	0x080181bc
 800ae7c:	0801813c 	.word	0x0801813c
 800ae80:	08018164 	.word	0x08018164
 800ae84:	08018030 	.word	0x08018030
 800ae88:	080181e0 	.word	0x080181e0
 800ae8c:	080181f0 	.word	0x080181f0
 800ae90:	0800a559 	.word	0x0800a559
 800ae94:	08018200 	.word	0x08018200
 800ae98:	0801822c 	.word	0x0801822c
 800ae9c:	0800a571 	.word	0x0800a571
 800aea0:	0801823c 	.word	0x0801823c
 800aea4:	08018260 	.word	0x08018260
 800aea8:	08018274 	.word	0x08018274
 800aeac:	0801828c 	.word	0x0801828c
        } else if (strcmp(name, "compression-level-default") == 0) {
 800aeb0:	4951      	ldr	r1, [pc, #324]	; (800aff8 <inih_handler_sail_error+0x6dc>)
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7f5 fb14 	bl	80004e0 <strcmp>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d123      	bne.n	800af06 <inih_handler_sail_error+0x5ea>
            if (codec_info->save_features->compression_level == NULL) {
 800aebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d111      	bne.n	800aeec <inih_handler_sail_error+0x5d0>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800aec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aecc:	3318      	adds	r3, #24
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 ffd8 	bl	800ce84 <sail_alloc_compression_level>
 800aed4:	4603      	mov	r3, r0
 800aed6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aed8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bf14      	ite	ne
 800aede:	2301      	movne	r3, #1
 800aee0:	2300      	moveq	r3, #0
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <inih_handler_sail_error+0x5d0>
 800aee8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aeea:	e080      	b.n	800afee <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->default_level = atof(value);
 800aeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef0:	699c      	ldr	r4, [r3, #24]
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f007 fff4 	bl	8012ee0 <atof>
 800aef8:	eeb0 7a40 	vmov.f32	s14, s0
 800aefc:	eef0 7a60 	vmov.f32	s15, s1
 800af00:	ed84 7b04 	vstr	d7, [r4, #16]
 800af04:	e072      	b.n	800afec <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "compression-level-step") == 0) {
 800af06:	493d      	ldr	r1, [pc, #244]	; (800affc <inih_handler_sail_error+0x6e0>)
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7f5 fae9 	bl	80004e0 <strcmp>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d123      	bne.n	800af5c <inih_handler_sail_error+0x640>
            if (codec_info->save_features->compression_level == NULL) {
 800af14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d111      	bne.n	800af42 <inih_handler_sail_error+0x626>
                SAIL_TRY(sail_alloc_compression_level(&codec_info->save_features->compression_level));
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	3318      	adds	r3, #24
 800af24:	4618      	mov	r0, r3
 800af26:	f001 ffad 	bl	800ce84 <sail_alloc_compression_level>
 800af2a:	4603      	mov	r3, r0
 800af2c:	863b      	strh	r3, [r7, #48]	; 0x30
 800af2e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af30:	2b00      	cmp	r3, #0
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <inih_handler_sail_error+0x626>
 800af3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800af40:	e055      	b.n	800afee <inih_handler_sail_error+0x6d2>
            }

            codec_info->save_features->compression_level->step = atof(value);
 800af42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af46:	699c      	ldr	r4, [r3, #24]
 800af48:	6838      	ldr	r0, [r7, #0]
 800af4a:	f007 ffc9 	bl	8012ee0 <atof>
 800af4e:	eeb0 7a40 	vmov.f32	s14, s0
 800af52:	eef0 7a60 	vmov.f32	s15, s1
 800af56:	ed84 7b06 	vstr	d7, [r4, #24]
 800af5a:	e047      	b.n	800afec <inih_handler_sail_error+0x6d0>
        } else if (strcmp(name, "tuning") == 0) {
 800af5c:	4928      	ldr	r1, [pc, #160]	; (800b000 <inih_handler_sail_error+0x6e4>)
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7f5 fabe 	bl	80004e0 <strcmp>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d11a      	bne.n	800afa0 <inih_handler_sail_error+0x684>
            SAIL_TRY_OR_CLEANUP(sail_split_into_string_node_chain(value, &codec_info->save_features->tuning),
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6e:	331c      	adds	r3, #28
 800af70:	4619      	mov	r1, r3
 800af72:	6838      	ldr	r0, [r7, #0]
 800af74:	f005 fb36 	bl	80105e4 <sail_split_into_string_node_chain>
 800af78:	4603      	mov	r3, r0
 800af7a:	867b      	strh	r3, [r7, #50]	; 0x32
 800af7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bf14      	ite	ne
 800af82:	2301      	movne	r3, #1
 800af84:	2300      	moveq	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d02f      	beq.n	800afec <inih_handler_sail_error+0x6d0>
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <inih_handler_sail_error+0x6e8>)
 800af92:	22e8      	movs	r2, #232	; 0xe8
 800af94:	491c      	ldr	r1, [pc, #112]	; (800b008 <inih_handler_sail_error+0x6ec>)
 800af96:	2001      	movs	r0, #1
 800af98:	f004 f944 	bl	800f224 <sail_log>
 800af9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800af9e:	e026      	b.n	800afee <inih_handler_sail_error+0x6d2>
                                    /* cleanup */ SAIL_LOG_ERROR("Failed to parse codec tuning: '%s'", value));
        } else {
            SAIL_LOG_ERROR("Unsupported codec info key '%s' in [%s]", name, section);
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4b18      	ldr	r3, [pc, #96]	; (800b00c <inih_handler_sail_error+0x6f0>)
 800afaa:	22ea      	movs	r2, #234	; 0xea
 800afac:	4916      	ldr	r1, [pc, #88]	; (800b008 <inih_handler_sail_error+0x6ec>)
 800afae:	2001      	movs	r0, #1
 800afb0:	f004 f938 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800afb4:	4b16      	ldr	r3, [pc, #88]	; (800b010 <inih_handler_sail_error+0x6f4>)
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4b16      	ldr	r3, [pc, #88]	; (800b014 <inih_handler_sail_error+0x6f8>)
 800afba:	22eb      	movs	r2, #235	; 0xeb
 800afbc:	4912      	ldr	r1, [pc, #72]	; (800b008 <inih_handler_sail_error+0x6ec>)
 800afbe:	2001      	movs	r0, #1
 800afc0:	f004 f930 	bl	800f224 <sail_log>
 800afc4:	2308      	movs	r3, #8
 800afc6:	e012      	b.n	800afee <inih_handler_sail_error+0x6d2>
        }
    } else {
        SAIL_LOG_ERROR("Unsupported codec info section '%s'", section);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <inih_handler_sail_error+0x6fc>)
 800afce:	22ee      	movs	r2, #238	; 0xee
 800afd0:	490d      	ldr	r1, [pc, #52]	; (800b008 <inih_handler_sail_error+0x6ec>)
 800afd2:	2001      	movs	r0, #1
 800afd4:	f004 f926 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800afd8:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <inih_handler_sail_error+0x6f4>)
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <inih_handler_sail_error+0x6f8>)
 800afde:	22ef      	movs	r2, #239	; 0xef
 800afe0:	4909      	ldr	r1, [pc, #36]	; (800b008 <inih_handler_sail_error+0x6ec>)
 800afe2:	2001      	movs	r0, #1
 800afe4:	f004 f91e 	bl	800f224 <sail_log>
 800afe8:	2308      	movs	r3, #8
 800afea:	e000      	b.n	800afee <inih_handler_sail_error+0x6d2>
    }

    return SAIL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	374c      	adds	r7, #76	; 0x4c
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd90      	pop	{r4, r7, pc}
 800aff6:	bf00      	nop
 800aff8:	080182a4 	.word	0x080182a4
 800affc:	080182c0 	.word	0x080182c0
 800b000:	080181b4 	.word	0x080181b4
 800b004:	080181bc 	.word	0x080181bc
 800b008:	08017fd0 	.word	0x08017fd0
 800b00c:	0801813c 	.word	0x0801813c
 800b010:	08018164 	.word	0x08018164
 800b014:	08018030 	.word	0x08018030
 800b018:	080182d8 	.word	0x080182d8

0800b01c <inih_handler>:

/* Returns 1 on success. */
static int inih_handler(void *data, const char *section, const char *name, const char *value) {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]

    SAIL_TRY_OR_EXECUTE(inih_handler_sail_error(data, section, name, value),
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fc73 	bl	800a91c <inih_handler_sail_error>
 800b036:	4603      	mov	r3, r0
 800b038:	82fb      	strh	r3, [r7, #22]
 800b03a:	8afb      	ldrh	r3, [r7, #22]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bf14      	ite	ne
 800b040:	2301      	movne	r3, #1
 800b042:	2300      	moveq	r3, #0
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <inih_handler+0x32>
 800b04a:	2300      	movs	r3, #0
 800b04c:	e000      	b.n	800b050 <inih_handler+0x34>
                        /* on error */ return 0);

    return 1;
 800b04e:	2301      	movs	r3, #1
}
 800b050:	4618      	mov	r0, r3
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <check_codec_info>:

static sail_status_t check_codec_info(const struct sail_codec_info *codec_info) {
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b08d      	sub	sp, #52	; 0x34
 800b05c:	af06      	add	r7, sp, #24
 800b05e:	6078      	str	r0, [r7, #4]

    if (codec_info->name == NULL || strlen(codec_info->name) == 0) {
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d004      	beq.n	800b072 <check_codec_info+0x1a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d112      	bne.n	800b098 <check_codec_info+0x40>
        SAIL_LOG_ERROR("Codec validation error: the codec currently being parsed has empty name");
 800b072:	4b9b      	ldr	r3, [pc, #620]	; (800b2e0 <check_codec_info+0x288>)
 800b074:	f240 1201 	movw	r2, #257	; 0x101
 800b078:	499a      	ldr	r1, [pc, #616]	; (800b2e4 <check_codec_info+0x28c>)
 800b07a:	2001      	movs	r0, #1
 800b07c:	f004 f8d2 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b080:	4b99      	ldr	r3, [pc, #612]	; (800b2e8 <check_codec_info+0x290>)
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	4b99      	ldr	r3, [pc, #612]	; (800b2ec <check_codec_info+0x294>)
 800b086:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b08a:	4996      	ldr	r1, [pc, #600]	; (800b2e4 <check_codec_info+0x28c>)
 800b08c:	2001      	movs	r0, #1
 800b08e:	f004 f8c9 	bl	800f224 <sail_log>
 800b092:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b096:	e1b5      	b.n	800b404 <check_codec_info+0x3ac>
    }

    for (size_t i = 0; i < strlen(codec_info->name); i++) {
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e026      	b.n	800b0ec <check_codec_info+0x94>
        if (codec_info->name[i] >= 'a' && codec_info->name[i] <= 'z') {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	691a      	ldr	r2, [r3, #16]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b60      	cmp	r3, #96	; 0x60
 800b0aa:	d91c      	bls.n	800b0e6 <check_codec_info+0x8e>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b7a      	cmp	r3, #122	; 0x7a
 800b0b8:	d815      	bhi.n	800b0e6 <check_codec_info+0x8e>
            SAIL_LOG_ERROR("Codec validation error: %s codec has lowercase letters in its name", codec_info->name);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	4b8b      	ldr	r3, [pc, #556]	; (800b2f0 <check_codec_info+0x298>)
 800b0c2:	f240 1207 	movw	r2, #263	; 0x107
 800b0c6:	4987      	ldr	r1, [pc, #540]	; (800b2e4 <check_codec_info+0x28c>)
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f004 f8ab 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b0ce:	4b86      	ldr	r3, [pc, #536]	; (800b2e8 <check_codec_info+0x290>)
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4b86      	ldr	r3, [pc, #536]	; (800b2ec <check_codec_info+0x294>)
 800b0d4:	f44f 7284 	mov.w	r2, #264	; 0x108
 800b0d8:	4982      	ldr	r1, [pc, #520]	; (800b2e4 <check_codec_info+0x28c>)
 800b0da:	2001      	movs	r0, #1
 800b0dc:	f004 f8a2 	bl	800f224 <sail_log>
 800b0e0:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b0e4:	e18e      	b.n	800b404 <check_codec_info+0x3ac>
    for (size_t i = 0; i < strlen(codec_info->name); i++) {
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f5 f9ff 	bl	80004f4 <strlen>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d3cf      	bcc.n	800b09e <check_codec_info+0x46>
        }
    }

    if (codec_info->version == NULL || strlen(codec_info->version) == 0) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <check_codec_info+0xb8>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d115      	bne.n	800b13c <check_codec_info+0xe4>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty version", codec_info->name);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	4b77      	ldr	r3, [pc, #476]	; (800b2f4 <check_codec_info+0x29c>)
 800b118:	f240 120d 	movw	r2, #269	; 0x10d
 800b11c:	4971      	ldr	r1, [pc, #452]	; (800b2e4 <check_codec_info+0x28c>)
 800b11e:	2001      	movs	r0, #1
 800b120:	f004 f880 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b124:	4b70      	ldr	r3, [pc, #448]	; (800b2e8 <check_codec_info+0x290>)
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4b70      	ldr	r3, [pc, #448]	; (800b2ec <check_codec_info+0x294>)
 800b12a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b12e:	496d      	ldr	r1, [pc, #436]	; (800b2e4 <check_codec_info+0x28c>)
 800b130:	2001      	movs	r0, #1
 800b132:	f004 f877 	bl	800f224 <sail_log>
 800b136:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b13a:	e163      	b.n	800b404 <check_codec_info+0x3ac>
    }

    if (codec_info->description == NULL || strlen(codec_info->description) == 0) {
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d004      	beq.n	800b14e <check_codec_info+0xf6>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d115      	bne.n	800b17a <check_codec_info+0x122>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty description", codec_info->name);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	4b68      	ldr	r3, [pc, #416]	; (800b2f8 <check_codec_info+0x2a0>)
 800b156:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b15a:	4962      	ldr	r1, [pc, #392]	; (800b2e4 <check_codec_info+0x28c>)
 800b15c:	2001      	movs	r0, #1
 800b15e:	f004 f861 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b162:	4b61      	ldr	r3, [pc, #388]	; (800b2e8 <check_codec_info+0x290>)
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4b61      	ldr	r3, [pc, #388]	; (800b2ec <check_codec_info+0x294>)
 800b168:	f240 1213 	movw	r2, #275	; 0x113
 800b16c:	495d      	ldr	r1, [pc, #372]	; (800b2e4 <check_codec_info+0x28c>)
 800b16e:	2001      	movs	r0, #1
 800b170:	f004 f858 	bl	800f224 <sail_log>
 800b174:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b178:	e144      	b.n	800b404 <check_codec_info+0x3ac>
    }

    if (codec_info->magic_number_node == NULL && codec_info->extension_node == NULL && codec_info->mime_type_node == NULL) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11d      	bne.n	800b1be <check_codec_info+0x166>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	69db      	ldr	r3, [r3, #28]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d119      	bne.n	800b1be <check_codec_info+0x166>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d115      	bne.n	800b1be <check_codec_info+0x166>
        SAIL_LOG_ERROR("Codec validation error: %s codec has no identification method (magic number or extension or mime type)", codec_info->name);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	4b58      	ldr	r3, [pc, #352]	; (800b2fc <check_codec_info+0x2a4>)
 800b19a:	f240 1217 	movw	r2, #279	; 0x117
 800b19e:	4951      	ldr	r1, [pc, #324]	; (800b2e4 <check_codec_info+0x28c>)
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	f004 f83f 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b1a6:	4b50      	ldr	r3, [pc, #320]	; (800b2e8 <check_codec_info+0x290>)
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	4b50      	ldr	r3, [pc, #320]	; (800b2ec <check_codec_info+0x294>)
 800b1ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b1b0:	494c      	ldr	r1, [pc, #304]	; (800b2e4 <check_codec_info+0x28c>)
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	f004 f836 	bl	800f224 <sail_log>
 800b1b8:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b1bc:	e122      	b.n	800b404 <check_codec_info+0x3ac>
    }

    const struct sail_save_features *save_features = codec_info->save_features;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	60fb      	str	r3, [r7, #12]

    /* Check save features. */
    if ((save_features->features & SAIL_CODEC_FEATURE_STATIC ||
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10b      	bne.n	800b1e8 <check_codec_info+0x190>
            save_features->features & SAIL_CODEC_FEATURE_ANIMATED ||
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
    if ((save_features->features & SAIL_CODEC_FEATURE_STATIC ||
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d105      	bne.n	800b1e8 <check_codec_info+0x190>
            save_features->features & SAIL_CODEC_FEATURE_MULTI_PAGED) &&
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f003 0308 	and.w	r3, r3, #8
            save_features->features & SAIL_CODEC_FEATURE_ANIMATED ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01d      	beq.n	800b224 <check_codec_info+0x1cc>
            (save_features->pixel_formats == NULL || save_features->pixel_formats_length == 0)) {
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
            save_features->features & SAIL_CODEC_FEATURE_MULTI_PAGED) &&
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <check_codec_info+0x1a0>
            (save_features->pixel_formats == NULL || save_features->pixel_formats_length == 0)) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d115      	bne.n	800b224 <check_codec_info+0x1cc>
        SAIL_LOG_ERROR("Codec validation error: %s codec is able to save images, but output pixel formats are not specified", codec_info->name);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	4b40      	ldr	r3, [pc, #256]	; (800b300 <check_codec_info+0x2a8>)
 800b200:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b204:	4937      	ldr	r1, [pc, #220]	; (800b2e4 <check_codec_info+0x28c>)
 800b206:	2001      	movs	r0, #1
 800b208:	f004 f80c 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b20c:	4b36      	ldr	r3, [pc, #216]	; (800b2e8 <check_codec_info+0x290>)
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	4b36      	ldr	r3, [pc, #216]	; (800b2ec <check_codec_info+0x294>)
 800b212:	f240 1223 	movw	r2, #291	; 0x123
 800b216:	4933      	ldr	r1, [pc, #204]	; (800b2e4 <check_codec_info+0x28c>)
 800b218:	2001      	movs	r0, #1
 800b21a:	f004 f803 	bl	800f224 <sail_log>
 800b21e:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b222:	e0ef      	b.n	800b404 <check_codec_info+0x3ac>
    }

    /* Compressions must exist if we're able to save this image format.*/
    if (save_features->features != 0 && (save_features->compressions == NULL || save_features->compressions_length == 0)) {
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d01d      	beq.n	800b268 <check_codec_info+0x210>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <check_codec_info+0x1e4>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d115      	bne.n	800b268 <check_codec_info+0x210>
        SAIL_LOG_ERROR("Codec validation error: %s codec has empty compressions list", codec_info->name);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	4b30      	ldr	r3, [pc, #192]	; (800b304 <check_codec_info+0x2ac>)
 800b244:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b248:	4926      	ldr	r1, [pc, #152]	; (800b2e4 <check_codec_info+0x28c>)
 800b24a:	2001      	movs	r0, #1
 800b24c:	f003 ffea 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b250:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <check_codec_info+0x290>)
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	4b25      	ldr	r3, [pc, #148]	; (800b2ec <check_codec_info+0x294>)
 800b256:	f240 1229 	movw	r2, #297	; 0x129
 800b25a:	4922      	ldr	r1, [pc, #136]	; (800b2e4 <check_codec_info+0x28c>)
 800b25c:	2001      	movs	r0, #1
 800b25e:	f003 ffe1 	bl	800f224 <sail_log>
 800b262:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b266:	e0cd      	b.n	800b404 <check_codec_info+0x3ac>
    }

    /* Compression levels and types are mutually exclusive.*/
    if (save_features->compressions_length > 1 && save_features->compression_level != NULL &&
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d933      	bls.n	800b2d8 <check_codec_info+0x280>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d02f      	beq.n	800b2d8 <check_codec_info+0x280>
            (save_features->compression_level->min_level != 0 || save_features->compression_level->max_level != 0)) {
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	e9d3 0100 	ldrd	r0, r1, [r3]
    if (save_features->compressions_length > 1 && save_features->compression_level != NULL &&
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	f7f5 fd60 	bl	8000d4c <__aeabi_dcmpeq>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00c      	beq.n	800b2ac <check_codec_info+0x254>
            (save_features->compression_level->min_level != 0 || save_features->compression_level->max_level != 0)) {
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	f7f5 fd53 	bl	8000d4c <__aeabi_dcmpeq>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d115      	bne.n	800b2d8 <check_codec_info+0x280>
        SAIL_LOG_ERROR("Codec validation error: %s codec has more than two compression types and non-zero compression levels which is unsupported", codec_info->name);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <check_codec_info+0x2b0>)
 800b2b4:	f240 122f 	movw	r2, #303	; 0x12f
 800b2b8:	490a      	ldr	r1, [pc, #40]	; (800b2e4 <check_codec_info+0x28c>)
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	f003 ffb2 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b2c0:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <check_codec_info+0x290>)
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <check_codec_info+0x294>)
 800b2c6:	f44f 7298 	mov.w	r2, #304	; 0x130
 800b2ca:	4906      	ldr	r1, [pc, #24]	; (800b2e4 <check_codec_info+0x28c>)
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f003 ffa9 	bl	800f224 <sail_log>
 800b2d2:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b2d6:	e095      	b.n	800b404 <check_codec_info+0x3ac>
    }

    for (unsigned i = 0; i < save_features->compressions_length; i++) {
 800b2d8:	2300      	movs	r3, #0
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	e036      	b.n	800b34c <check_codec_info+0x2f4>
 800b2de:	bf00      	nop
 800b2e0:	080182fc 	.word	0x080182fc
 800b2e4:	08017fd0 	.word	0x08017fd0
 800b2e8:	08018344 	.word	0x08018344
 800b2ec:	08018030 	.word	0x08018030
 800b2f0:	08018368 	.word	0x08018368
 800b2f4:	080183ac 	.word	0x080183ac
 800b2f8:	080183e0 	.word	0x080183e0
 800b2fc:	08018418 	.word	0x08018418
 800b300:	08018480 	.word	0x08018480
 800b304:	080184e4 	.word	0x080184e4
 800b308:	08018524 	.word	0x08018524
        if (save_features->compressions[i] == SAIL_COMPRESSION_UNKNOWN) {
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	4413      	add	r3, r2
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d115      	bne.n	800b346 <check_codec_info+0x2ee>
            SAIL_LOG_ERROR("Codec validation error: %s codec has UNKNOWN compression", codec_info->name);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	4b3a      	ldr	r3, [pc, #232]	; (800b40c <check_codec_info+0x3b4>)
 800b322:	f240 1235 	movw	r2, #309	; 0x135
 800b326:	493a      	ldr	r1, [pc, #232]	; (800b410 <check_codec_info+0x3b8>)
 800b328:	2001      	movs	r0, #1
 800b32a:	f003 ff7b 	bl	800f224 <sail_log>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b32e:	4b39      	ldr	r3, [pc, #228]	; (800b414 <check_codec_info+0x3bc>)
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	4b39      	ldr	r3, [pc, #228]	; (800b418 <check_codec_info+0x3c0>)
 800b334:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b338:	4935      	ldr	r1, [pc, #212]	; (800b410 <check_codec_info+0x3b8>)
 800b33a:	2001      	movs	r0, #1
 800b33c:	f003 ff72 	bl	800f224 <sail_log>
 800b340:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b344:	e05e      	b.n	800b404 <check_codec_info+0x3ac>
    for (unsigned i = 0; i < save_features->compressions_length; i++) {
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3301      	adds	r3, #1
 800b34a:	613b      	str	r3, [r7, #16]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	429a      	cmp	r2, r3
 800b354:	d3da      	bcc.n	800b30c <check_codec_info+0x2b4>
        }
    }

    if (save_features->compressions_length > 0 && save_features->default_compression == SAIL_COMPRESSION_UNKNOWN) {
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d019      	beq.n	800b392 <check_codec_info+0x33a>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	7d1b      	ldrb	r3, [r3, #20]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d115      	bne.n	800b392 <check_codec_info+0x33a>
        SAIL_LOG_ERROR("Codec validation error: %s codec has UNKNOWN default compression", codec_info->name);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4b2b      	ldr	r3, [pc, #172]	; (800b41c <check_codec_info+0x3c4>)
 800b36e:	f240 123b 	movw	r2, #315	; 0x13b
 800b372:	4927      	ldr	r1, [pc, #156]	; (800b410 <check_codec_info+0x3b8>)
 800b374:	2001      	movs	r0, #1
 800b376:	f003 ff55 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b37a:	4b26      	ldr	r3, [pc, #152]	; (800b414 <check_codec_info+0x3bc>)
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	4b26      	ldr	r3, [pc, #152]	; (800b418 <check_codec_info+0x3c0>)
 800b380:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b384:	4922      	ldr	r1, [pc, #136]	; (800b410 <check_codec_info+0x3b8>)
 800b386:	2001      	movs	r0, #1
 800b388:	f003 ff4c 	bl	800f224 <sail_log>
 800b38c:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b390:	e038      	b.n	800b404 <check_codec_info+0x3ac>
    }

    if (codec_info->save_features->compression_level != NULL) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d032      	beq.n	800b402 <check_codec_info+0x3aa>
        if (codec_info->save_features->compression_level->min_level > codec_info->save_features->compression_level->max_level) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b3b0:	f7f5 fcf4 	bl	8000d9c <__aeabi_dcmpgt>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d023      	beq.n	800b402 <check_codec_info+0x3aa>
            SAIL_LOG_ERROR("Codec validation error: %s codec has incorrect compression levels of min(%.1f), max(%.1f)",
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	691c      	ldr	r4, [r3, #16]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800b3cc:	6989      	ldr	r1, [r1, #24]
 800b3ce:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800b3d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3da:	9400      	str	r4, [sp, #0]
 800b3dc:	4b10      	ldr	r3, [pc, #64]	; (800b420 <check_codec_info+0x3c8>)
 800b3de:	f240 1241 	movw	r2, #321	; 0x141
 800b3e2:	490b      	ldr	r1, [pc, #44]	; (800b410 <check_codec_info+0x3b8>)
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	f003 ff1d 	bl	800f224 <sail_log>
                            codec_info->name, codec_info->save_features->compression_level->min_level,
                            codec_info->save_features->compression_level->max_level);
            SAIL_LOG_AND_RETURN(SAIL_ERROR_INCOMPLETE_CODEC_INFO);
 800b3ea:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <check_codec_info+0x3bc>)
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <check_codec_info+0x3c0>)
 800b3f0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800b3f4:	4906      	ldr	r1, [pc, #24]	; (800b410 <check_codec_info+0x3b8>)
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	f003 ff14 	bl	800f224 <sail_log>
 800b3fc:	f44f 7398 	mov.w	r3, #304	; 0x130
 800b400:	e000      	b.n	800b404 <check_codec_info+0x3ac>
        }
    }

    return SAIL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	371c      	adds	r7, #28
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd90      	pop	{r4, r7, pc}
 800b40c:	080185a0 	.word	0x080185a0
 800b410:	08017fd0 	.word	0x08017fd0
 800b414:	08018344 	.word	0x08018344
 800b418:	08018030 	.word	0x08018030
 800b41c:	080185dc 	.word	0x080185dc
 800b420:	08018620 	.word	0x08018620

0800b424 <alloc_codec_info>:

static sail_status_t alloc_codec_info(struct sail_codec_info **codec_info) {
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af02      	add	r7, sp, #8
 800b42a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(codec_info);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	bf0c      	ite	eq
 800b432:	2301      	moveq	r3, #1
 800b434:	2300      	movne	r3, #0
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d013      	beq.n	800b464 <alloc_codec_info+0x40>
 800b43c:	4b2a      	ldr	r3, [pc, #168]	; (800b4e8 <alloc_codec_info+0xc4>)
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	4b2a      	ldr	r3, [pc, #168]	; (800b4ec <alloc_codec_info+0xc8>)
 800b442:	f240 124d 	movw	r2, #333	; 0x14d
 800b446:	492a      	ldr	r1, [pc, #168]	; (800b4f0 <alloc_codec_info+0xcc>)
 800b448:	2001      	movs	r0, #1
 800b44a:	f003 feeb 	bl	800f224 <sail_log>
 800b44e:	4b29      	ldr	r3, [pc, #164]	; (800b4f4 <alloc_codec_info+0xd0>)
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4b29      	ldr	r3, [pc, #164]	; (800b4f8 <alloc_codec_info+0xd4>)
 800b454:	f240 124d 	movw	r2, #333	; 0x14d
 800b458:	4925      	ldr	r1, [pc, #148]	; (800b4f0 <alloc_codec_info+0xcc>)
 800b45a:	2001      	movs	r0, #1
 800b45c:	f003 fee2 	bl	800f224 <sail_log>
 800b460:	2301      	movs	r3, #1
 800b462:	e03d      	b.n	800b4e0 <alloc_codec_info+0xbc>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_info), &ptr));
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	4619      	mov	r1, r3
 800b46a:	202c      	movs	r0, #44	; 0x2c
 800b46c:	f003 ffd2 	bl	800f414 <sail_malloc>
 800b470:	4603      	mov	r3, r0
 800b472:	81fb      	strh	r3, [r7, #14]
 800b474:	89fb      	ldrh	r3, [r7, #14]
 800b476:	2b00      	cmp	r3, #0
 800b478:	bf14      	ite	ne
 800b47a:	2301      	movne	r3, #1
 800b47c:	2300      	moveq	r3, #0
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <alloc_codec_info+0x64>
 800b484:	89fb      	ldrh	r3, [r7, #14]
 800b486:	e02b      	b.n	800b4e0 <alloc_codec_info+0xbc>
    *codec_info = ptr;
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	601a      	str	r2, [r3, #0]

    (*codec_info)->path              = NULL;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
    (*codec_info)->layout            = 0;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	605a      	str	r2, [r3, #4]
    (*codec_info)->version           = NULL;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	60da      	str	r2, [r3, #12]
    (*codec_info)->name              = NULL;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	611a      	str	r2, [r3, #16]
    (*codec_info)->description       = NULL;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	615a      	str	r2, [r3, #20]
    (*codec_info)->magic_number_node = NULL;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	619a      	str	r2, [r3, #24]
    (*codec_info)->extension_node    = NULL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	61da      	str	r2, [r3, #28]
    (*codec_info)->mime_type_node    = NULL;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	621a      	str	r2, [r3, #32]
    (*codec_info)->load_features     = NULL;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	625a      	str	r2, [r3, #36]	; 0x24
    (*codec_info)->save_features    = NULL;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	629a      	str	r2, [r3, #40]	; 0x28

    return SAIL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	0801867c 	.word	0x0801867c
 800b4ec:	08017fb8 	.word	0x08017fb8
 800b4f0:	08017fd0 	.word	0x08017fd0
 800b4f4:	08018034 	.word	0x08018034
 800b4f8:	08018030 	.word	0x08018030

0800b4fc <codec_read_info_from_input>:

static sail_status_t codec_read_info_from_input(const char *input, int (*ini_parser)(const char*, ini_handler, void*), struct sail_codec_info **codec_info) {
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08c      	sub	sp, #48	; 0x30
 800b500:	af02      	add	r7, sp, #8
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]

    struct sail_codec_info *codec_info_local;
    SAIL_TRY(alloc_codec_info(&codec_info_local));
 800b508:	f107 0314 	add.w	r3, r7, #20
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff ff89 	bl	800b424 <alloc_codec_info>
 800b512:	4603      	mov	r3, r0
 800b514:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bf14      	ite	ne
 800b51c:	2301      	movne	r3, #1
 800b51e:	2300      	moveq	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <codec_read_info_from_input+0x2e>
 800b526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b528:	e098      	b.n	800b65c <codec_read_info_from_input+0x160>
    SAIL_TRY_OR_CLEANUP(sail_alloc_load_features(&codec_info_local->load_features),
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	3324      	adds	r3, #36	; 0x24
 800b52e:	4618      	mov	r0, r3
 800b530:	f003 fcc0 	bl	800eeb4 <sail_alloc_load_features>
 800b534:	4603      	mov	r3, r0
 800b536:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bf14      	ite	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	2300      	moveq	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d005      	beq.n	800b554 <codec_read_info_from_input+0x58>
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 f89a 	bl	800b684 <destroy_codec_info>
 800b550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b552:	e083      	b.n	800b65c <codec_read_info_from_input+0x160>
                        destroy_codec_info(codec_info_local));
    SAIL_TRY_OR_CLEANUP(sail_alloc_save_features(&codec_info_local->save_features),
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	3328      	adds	r3, #40	; 0x28
 800b558:	4618      	mov	r0, r3
 800b55a:	f004 ff11 	bl	8010380 <sail_alloc_save_features>
 800b55e:	4603      	mov	r3, r0
 800b560:	847b      	strh	r3, [r7, #34]	; 0x22
 800b562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b564:	2b00      	cmp	r3, #0
 800b566:	bf14      	ite	ne
 800b568:	2301      	movne	r3, #1
 800b56a:	2300      	moveq	r3, #0
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <codec_read_info_from_input+0x82>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	4618      	mov	r0, r3
 800b576:	f000 f885 	bl	800b684 <destroy_codec_info>
 800b57a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b57c:	e06e      	b.n	800b65c <codec_read_info_from_input+0x160>
                        destroy_codec_info(codec_info_local));

    struct init_data init_data;
    init_data.codec_info = codec_info_local;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	613b      	str	r3, [r7, #16]
     *  - 0 on success
     *  - line number of first error on parse error
     *  - -1 on file open error
     *  - -2 on memory allocation error (only when INI_USE_STACK is zero).
     */
    const int code = ini_parser(input, inih_handler, &init_data);
 800b582:	f107 0210 	add.w	r2, r7, #16
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	4936      	ldr	r1, [pc, #216]	; (800b664 <codec_read_info_from_input+0x168>)
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	4798      	blx	r3
 800b58e:	61f8      	str	r0, [r7, #28]

    /* Success. */
    if (code == 0) {
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d136      	bne.n	800b604 <codec_read_info_from_input+0x108>
        if (codec_info_local->layout != SAIL_CODEC_LAYOUT_V7) {
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	2b07      	cmp	r3, #7
 800b59c:	d019      	beq.n	800b5d2 <codec_read_info_from_input+0xd6>
            SAIL_LOG_ERROR("Unsupported codec layout version %d. Please check your codec info files", codec_info_local->layout);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4b30      	ldr	r3, [pc, #192]	; (800b668 <codec_read_info_from_input+0x16c>)
 800b5a6:	f240 1279 	movw	r2, #377	; 0x179
 800b5aa:	4930      	ldr	r1, [pc, #192]	; (800b66c <codec_read_info_from_input+0x170>)
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	f003 fe39 	bl	800f224 <sail_log>
            destroy_codec_info(codec_info_local);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 f865 	bl	800b684 <destroy_codec_info>
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_CODEC_LAYOUT);
 800b5ba:	4b2d      	ldr	r3, [pc, #180]	; (800b670 <codec_read_info_from_input+0x174>)
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	4b2d      	ldr	r3, [pc, #180]	; (800b674 <codec_read_info_from_input+0x178>)
 800b5c0:	f240 127b 	movw	r2, #379	; 0x17b
 800b5c4:	4929      	ldr	r1, [pc, #164]	; (800b66c <codec_read_info_from_input+0x170>)
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	f003 fe2c 	bl	800f224 <sail_log>
 800b5cc:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800b5d0:	e044      	b.n	800b65c <codec_read_info_from_input+0x160>
        }

        /* Paranoid error checks. */
        SAIL_TRY_OR_CLEANUP(check_codec_info(codec_info_local),
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff fd3f 	bl	800b058 <check_codec_info>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	837b      	strh	r3, [r7, #26]
 800b5de:	8b7b      	ldrh	r3, [r7, #26]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	bf14      	ite	ne
 800b5e4:	2301      	movne	r3, #1
 800b5e6:	2300      	moveq	r3, #0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d005      	beq.n	800b5fa <codec_read_info_from_input+0xfe>
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 f847 	bl	800b684 <destroy_codec_info>
 800b5f6:	8b7b      	ldrh	r3, [r7, #26]
 800b5f8:	e030      	b.n	800b65c <codec_read_info_from_input+0x160>
                            /* cleanup */ destroy_codec_info(codec_info_local));

        *codec_info = codec_info_local;
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]

        return SAIL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	e02b      	b.n	800b65c <codec_read_info_from_input+0x160>
    } else {
        destroy_codec_info(codec_info_local);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	4618      	mov	r0, r3
 800b608:	f000 f83c 	bl	800b684 <destroy_codec_info>

        switch (code) {
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	f113 0f02 	cmn.w	r3, #2
 800b612:	d00e      	beq.n	800b632 <codec_read_info_from_input+0x136>
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b61a:	d115      	bne.n	800b648 <codec_read_info_from_input+0x14c>
            case -1: SAIL_LOG_AND_RETURN(SAIL_ERROR_OPEN_FILE);
 800b61c:	4b16      	ldr	r3, [pc, #88]	; (800b678 <codec_read_info_from_input+0x17c>)
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	4b14      	ldr	r3, [pc, #80]	; (800b674 <codec_read_info_from_input+0x178>)
 800b622:	f240 1289 	movw	r2, #393	; 0x189
 800b626:	4911      	ldr	r1, [pc, #68]	; (800b66c <codec_read_info_from_input+0x170>)
 800b628:	2001      	movs	r0, #1
 800b62a:	f003 fdfb 	bl	800f224 <sail_log>
 800b62e:	2303      	movs	r3, #3
 800b630:	e014      	b.n	800b65c <codec_read_info_from_input+0x160>
            case -2: SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 800b632:	4b12      	ldr	r3, [pc, #72]	; (800b67c <codec_read_info_from_input+0x180>)
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <codec_read_info_from_input+0x178>)
 800b638:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800b63c:	490b      	ldr	r1, [pc, #44]	; (800b66c <codec_read_info_from_input+0x170>)
 800b63e:	2001      	movs	r0, #1
 800b640:	f003 fdf0 	bl	800f224 <sail_log>
 800b644:	2302      	movs	r3, #2
 800b646:	e009      	b.n	800b65c <codec_read_info_from_input+0x160>

            default: SAIL_LOG_AND_RETURN(SAIL_ERROR_PARSE_FILE);
 800b648:	4b0d      	ldr	r3, [pc, #52]	; (800b680 <codec_read_info_from_input+0x184>)
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	4b09      	ldr	r3, [pc, #36]	; (800b674 <codec_read_info_from_input+0x178>)
 800b64e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800b652:	4906      	ldr	r1, [pc, #24]	; (800b66c <codec_read_info_from_input+0x170>)
 800b654:	2001      	movs	r0, #1
 800b656:	f003 fde5 	bl	800f224 <sail_log>
 800b65a:	2308      	movs	r3, #8
        }
    }
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3728      	adds	r7, #40	; 0x28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	0800b01d 	.word	0x0800b01d
 800b668:	08018688 	.word	0x08018688
 800b66c:	08017fd0 	.word	0x08017fd0
 800b670:	080186d0 	.word	0x080186d0
 800b674:	08018030 	.word	0x08018030
 800b678:	080186f4 	.word	0x080186f4
 800b67c:	0801870c 	.word	0x0801870c
 800b680:	08018164 	.word	0x08018164

0800b684 <destroy_codec_info>:

/*
 * Public functions.
 */

void destroy_codec_info(struct sail_codec_info *codec_info) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]

    if (codec_info == NULL) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d030      	beq.n	800b6f4 <destroy_codec_info+0x70>
        return;
    }

    sail_free(codec_info->path);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4618      	mov	r0, r3
 800b698:	f003 ff44 	bl	800f524 <sail_free>
    sail_free(codec_info->version);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f003 ff3f 	bl	800f524 <sail_free>
    sail_free(codec_info->name);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f003 ff3a 	bl	800f524 <sail_free>
    sail_free(codec_info->description);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f003 ff35 	bl	800f524 <sail_free>

    sail_destroy_string_node_chain(codec_info->magic_number_node);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f004 ff82 	bl	80105c8 <sail_destroy_string_node_chain>
    sail_destroy_string_node_chain(codec_info->extension_node);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f004 ff7d 	bl	80105c8 <sail_destroy_string_node_chain>
    sail_destroy_string_node_chain(codec_info->mime_type_node);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f004 ff78 	bl	80105c8 <sail_destroy_string_node_chain>

    sail_destroy_load_features(codec_info->load_features);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f003 fc33 	bl	800ef48 <sail_destroy_load_features>
    sail_destroy_save_features(codec_info->save_features);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f004 feac 	bl	8010444 <sail_destroy_save_features>

    sail_free(codec_info);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f003 ff19 	bl	800f524 <sail_free>
 800b6f2:	e000      	b.n	800b6f6 <destroy_codec_info+0x72>
        return;
 800b6f4:	bf00      	nop
}
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <codec_read_info_from_string>:
    SAIL_TRY(codec_read_info_from_input(path, ini_parse, codec_info));

    return SAIL_OK;
}

sail_status_t codec_read_info_from_string(const char *str, struct sail_codec_info **codec_info) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af02      	add	r7, sp, #8
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(str);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	bf0c      	ite	eq
 800b70c:	2301      	moveq	r3, #1
 800b70e:	2300      	movne	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d013      	beq.n	800b73e <codec_read_info_from_string+0x42>
 800b716:	4b23      	ldr	r3, [pc, #140]	; (800b7a4 <codec_read_info_from_string+0xa8>)
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	4b23      	ldr	r3, [pc, #140]	; (800b7a8 <codec_read_info_from_string+0xac>)
 800b71c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b720:	4922      	ldr	r1, [pc, #136]	; (800b7ac <codec_read_info_from_string+0xb0>)
 800b722:	2001      	movs	r0, #1
 800b724:	f003 fd7e 	bl	800f224 <sail_log>
 800b728:	4b21      	ldr	r3, [pc, #132]	; (800b7b0 <codec_read_info_from_string+0xb4>)
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4b21      	ldr	r3, [pc, #132]	; (800b7b4 <codec_read_info_from_string+0xb8>)
 800b72e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b732:	491e      	ldr	r1, [pc, #120]	; (800b7ac <codec_read_info_from_string+0xb0>)
 800b734:	2001      	movs	r0, #1
 800b736:	f003 fd75 	bl	800f224 <sail_log>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e02d      	b.n	800b79a <codec_read_info_from_string+0x9e>
    SAIL_CHECK_PTR(codec_info);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	bf0c      	ite	eq
 800b744:	2301      	moveq	r3, #1
 800b746:	2300      	movne	r3, #0
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d013      	beq.n	800b776 <codec_read_info_from_string+0x7a>
 800b74e:	4b1a      	ldr	r3, [pc, #104]	; (800b7b8 <codec_read_info_from_string+0xbc>)
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <codec_read_info_from_string+0xac>)
 800b754:	f240 12b9 	movw	r2, #441	; 0x1b9
 800b758:	4914      	ldr	r1, [pc, #80]	; (800b7ac <codec_read_info_from_string+0xb0>)
 800b75a:	2001      	movs	r0, #1
 800b75c:	f003 fd62 	bl	800f224 <sail_log>
 800b760:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <codec_read_info_from_string+0xb4>)
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4b13      	ldr	r3, [pc, #76]	; (800b7b4 <codec_read_info_from_string+0xb8>)
 800b766:	f240 12b9 	movw	r2, #441	; 0x1b9
 800b76a:	4910      	ldr	r1, [pc, #64]	; (800b7ac <codec_read_info_from_string+0xb0>)
 800b76c:	2001      	movs	r0, #1
 800b76e:	f003 fd59 	bl	800f224 <sail_log>
 800b772:	2301      	movs	r3, #1
 800b774:	e011      	b.n	800b79a <codec_read_info_from_string+0x9e>

    SAIL_TRY(codec_read_info_from_input(str, ini_parse_string, codec_info));
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	4910      	ldr	r1, [pc, #64]	; (800b7bc <codec_read_info_from_string+0xc0>)
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff febe 	bl	800b4fc <codec_read_info_from_input>
 800b780:	4603      	mov	r3, r0
 800b782:	81fb      	strh	r3, [r7, #14]
 800b784:	89fb      	ldrh	r3, [r7, #14]
 800b786:	2b00      	cmp	r3, #0
 800b788:	bf14      	ite	ne
 800b78a:	2301      	movne	r3, #1
 800b78c:	2300      	moveq	r3, #0
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <codec_read_info_from_string+0x9c>
 800b794:	89fb      	ldrh	r3, [r7, #14]
 800b796:	e000      	b.n	800b79a <codec_read_info_from_string+0x9e>

    return SAIL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	0801874c 	.word	0x0801874c
 800b7a8:	08017fb8 	.word	0x08017fb8
 800b7ac:	08017fd0 	.word	0x08017fd0
 800b7b0:	08018034 	.word	0x08018034
 800b7b4:	08018030 	.word	0x08018030
 800b7b8:	0801867c 	.word	0x0801867c
 800b7bc:	0800e349 	.word	0x0800e349

0800b7c0 <sail_pixel_format_to_string>:
    SOFTWARE.
*/

#include "sail-common.h"

const char* sail_pixel_format_to_string(enum SailPixelFormat pixel_format) {
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]

    switch (pixel_format) {
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	2b4a      	cmp	r3, #74	; 0x4a
 800b7ce:	f200 812f 	bhi.w	800ba30 <sail_pixel_format_to_string+0x270>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <sail_pixel_format_to_string+0x18>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b905 	.word	0x0800b905
 800b7dc:	0800b909 	.word	0x0800b909
 800b7e0:	0800b90d 	.word	0x0800b90d
 800b7e4:	0800b911 	.word	0x0800b911
 800b7e8:	0800b915 	.word	0x0800b915
 800b7ec:	0800b919 	.word	0x0800b919
 800b7f0:	0800b91d 	.word	0x0800b91d
 800b7f4:	0800b921 	.word	0x0800b921
 800b7f8:	0800b925 	.word	0x0800b925
 800b7fc:	0800b929 	.word	0x0800b929
 800b800:	0800b92d 	.word	0x0800b92d
 800b804:	0800b931 	.word	0x0800b931
 800b808:	0800b935 	.word	0x0800b935
 800b80c:	0800b939 	.word	0x0800b939
 800b810:	0800b93d 	.word	0x0800b93d
 800b814:	0800b941 	.word	0x0800b941
 800b818:	0800b945 	.word	0x0800b945
 800b81c:	0800b949 	.word	0x0800b949
 800b820:	0800b94d 	.word	0x0800b94d
 800b824:	0800b951 	.word	0x0800b951
 800b828:	0800b955 	.word	0x0800b955
 800b82c:	0800b959 	.word	0x0800b959
 800b830:	0800b95d 	.word	0x0800b95d
 800b834:	0800b961 	.word	0x0800b961
 800b838:	0800b965 	.word	0x0800b965
 800b83c:	0800b969 	.word	0x0800b969
 800b840:	0800b96d 	.word	0x0800b96d
 800b844:	0800b971 	.word	0x0800b971
 800b848:	0800b975 	.word	0x0800b975
 800b84c:	0800b979 	.word	0x0800b979
 800b850:	0800b97d 	.word	0x0800b97d
 800b854:	0800b981 	.word	0x0800b981
 800b858:	0800b985 	.word	0x0800b985
 800b85c:	0800b989 	.word	0x0800b989
 800b860:	0800b98d 	.word	0x0800b98d
 800b864:	0800b991 	.word	0x0800b991
 800b868:	0800b995 	.word	0x0800b995
 800b86c:	0800b999 	.word	0x0800b999
 800b870:	0800b99d 	.word	0x0800b99d
 800b874:	0800b9a1 	.word	0x0800b9a1
 800b878:	0800b9a5 	.word	0x0800b9a5
 800b87c:	0800b9a9 	.word	0x0800b9a9
 800b880:	0800b9ad 	.word	0x0800b9ad
 800b884:	0800b9b1 	.word	0x0800b9b1
 800b888:	0800b9b5 	.word	0x0800b9b5
 800b88c:	0800b9b9 	.word	0x0800b9b9
 800b890:	0800b9bd 	.word	0x0800b9bd
 800b894:	0800b9c1 	.word	0x0800b9c1
 800b898:	0800b9c5 	.word	0x0800b9c5
 800b89c:	0800b9c9 	.word	0x0800b9c9
 800b8a0:	0800b9cd 	.word	0x0800b9cd
 800b8a4:	0800b9d1 	.word	0x0800b9d1
 800b8a8:	0800b9d5 	.word	0x0800b9d5
 800b8ac:	0800b9d9 	.word	0x0800b9d9
 800b8b0:	0800b9dd 	.word	0x0800b9dd
 800b8b4:	0800b9e1 	.word	0x0800b9e1
 800b8b8:	0800b9e5 	.word	0x0800b9e5
 800b8bc:	0800b9e9 	.word	0x0800b9e9
 800b8c0:	0800b9ed 	.word	0x0800b9ed
 800b8c4:	0800b9f1 	.word	0x0800b9f1
 800b8c8:	0800b9f5 	.word	0x0800b9f5
 800b8cc:	0800b9f9 	.word	0x0800b9f9
 800b8d0:	0800b9fd 	.word	0x0800b9fd
 800b8d4:	0800ba01 	.word	0x0800ba01
 800b8d8:	0800ba05 	.word	0x0800ba05
 800b8dc:	0800ba09 	.word	0x0800ba09
 800b8e0:	0800ba0d 	.word	0x0800ba0d
 800b8e4:	0800ba11 	.word	0x0800ba11
 800b8e8:	0800ba15 	.word	0x0800ba15
 800b8ec:	0800ba19 	.word	0x0800ba19
 800b8f0:	0800ba1d 	.word	0x0800ba1d
 800b8f4:	0800ba21 	.word	0x0800ba21
 800b8f8:	0800ba25 	.word	0x0800ba25
 800b8fc:	0800ba29 	.word	0x0800ba29
 800b900:	0800ba2d 	.word	0x0800ba2d
        case SAIL_PIXEL_FORMAT_UNKNOWN:               return "UNKNOWN";
 800b904:	4b4e      	ldr	r3, [pc, #312]	; (800ba40 <sail_pixel_format_to_string+0x280>)
 800b906:	e094      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP1:                  return "BPP1";
 800b908:	4b4e      	ldr	r3, [pc, #312]	; (800ba44 <sail_pixel_format_to_string+0x284>)
 800b90a:	e092      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP2:                  return "BPP2";
 800b90c:	4b4e      	ldr	r3, [pc, #312]	; (800ba48 <sail_pixel_format_to_string+0x288>)
 800b90e:	e090      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP4:                  return "BPP4";
 800b910:	4b4e      	ldr	r3, [pc, #312]	; (800ba4c <sail_pixel_format_to_string+0x28c>)
 800b912:	e08e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP8:                  return "BPP8";
 800b914:	4b4e      	ldr	r3, [pc, #312]	; (800ba50 <sail_pixel_format_to_string+0x290>)
 800b916:	e08c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16:                 return "BPP16";
 800b918:	4b4e      	ldr	r3, [pc, #312]	; (800ba54 <sail_pixel_format_to_string+0x294>)
 800b91a:	e08a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP24:                 return "BPP24";
 800b91c:	4b4e      	ldr	r3, [pc, #312]	; (800ba58 <sail_pixel_format_to_string+0x298>)
 800b91e:	e088      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32:                 return "BPP32";
 800b920:	4b4e      	ldr	r3, [pc, #312]	; (800ba5c <sail_pixel_format_to_string+0x29c>)
 800b922:	e086      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP48:                 return "BPP48";
 800b924:	4b4e      	ldr	r3, [pc, #312]	; (800ba60 <sail_pixel_format_to_string+0x2a0>)
 800b926:	e084      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64:                 return "BPP64";
 800b928:	4b4e      	ldr	r3, [pc, #312]	; (800ba64 <sail_pixel_format_to_string+0x2a4>)
 800b92a:	e082      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP72:                 return "BPP72";
 800b92c:	4b4e      	ldr	r3, [pc, #312]	; (800ba68 <sail_pixel_format_to_string+0x2a8>)
 800b92e:	e080      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP96:                 return "BPP96";
 800b930:	4b4e      	ldr	r3, [pc, #312]	; (800ba6c <sail_pixel_format_to_string+0x2ac>)
 800b932:	e07e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP128:                return "BPP128";
 800b934:	4b4e      	ldr	r3, [pc, #312]	; (800ba70 <sail_pixel_format_to_string+0x2b0>)
 800b936:	e07c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:          return "BPP1-INDEXED";
 800b938:	4b4e      	ldr	r3, [pc, #312]	; (800ba74 <sail_pixel_format_to_string+0x2b4>)
 800b93a:	e07a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:          return "BPP2-INDEXED";
 800b93c:	4b4e      	ldr	r3, [pc, #312]	; (800ba78 <sail_pixel_format_to_string+0x2b8>)
 800b93e:	e078      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:          return "BPP4-INDEXED";
 800b940:	4b4e      	ldr	r3, [pc, #312]	; (800ba7c <sail_pixel_format_to_string+0x2bc>)
 800b942:	e076      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:          return "BPP8-INDEXED";
 800b944:	4b4e      	ldr	r3, [pc, #312]	; (800ba80 <sail_pixel_format_to_string+0x2c0>)
 800b946:	e074      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED:         return "BPP16-INDEXED";
 800b948:	4b4e      	ldr	r3, [pc, #312]	; (800ba84 <sail_pixel_format_to_string+0x2c4>)
 800b94a:	e072      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE:        return "BPP1-GRAYSCALE";
 800b94c:	4b4e      	ldr	r3, [pc, #312]	; (800ba88 <sail_pixel_format_to_string+0x2c8>)
 800b94e:	e070      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE:        return "BPP2-GRAYSCALE";
 800b950:	4b4e      	ldr	r3, [pc, #312]	; (800ba8c <sail_pixel_format_to_string+0x2cc>)
 800b952:	e06e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE:        return "BPP4-GRAYSCALE";
 800b954:	4b4e      	ldr	r3, [pc, #312]	; (800ba90 <sail_pixel_format_to_string+0x2d0>)
 800b956:	e06c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE:        return "BPP8-GRAYSCALE";
 800b958:	4b4e      	ldr	r3, [pc, #312]	; (800ba94 <sail_pixel_format_to_string+0x2d4>)
 800b95a:	e06a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE:       return "BPP16-GRAYSCALE";
 800b95c:	4b4e      	ldr	r3, [pc, #312]	; (800ba98 <sail_pixel_format_to_string+0x2d8>)
 800b95e:	e068      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA:  return "BPP4-GRAYSCALE-ALPHA";
 800b960:	4b4e      	ldr	r3, [pc, #312]	; (800ba9c <sail_pixel_format_to_string+0x2dc>)
 800b962:	e066      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA:  return "BPP8-GRAYSCALE-ALPHA";
 800b964:	4b4e      	ldr	r3, [pc, #312]	; (800baa0 <sail_pixel_format_to_string+0x2e0>)
 800b966:	e064      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA: return "BPP16-GRAYSCALE-ALPHA";
 800b968:	4b4e      	ldr	r3, [pc, #312]	; (800baa4 <sail_pixel_format_to_string+0x2e4>)
 800b96a:	e062      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA: return "BPP32-GRAYSCALE-ALPHA";
 800b96c:	4b4e      	ldr	r3, [pc, #312]	; (800baa8 <sail_pixel_format_to_string+0x2e8>)
 800b96e:	e060      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP16_RGB555:          return "BPP16-RGB555";
 800b970:	4b4e      	ldr	r3, [pc, #312]	; (800baac <sail_pixel_format_to_string+0x2ec>)
 800b972:	e05e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_BGR555:          return "BPP16-BGR555";
 800b974:	4b4e      	ldr	r3, [pc, #312]	; (800bab0 <sail_pixel_format_to_string+0x2f0>)
 800b976:	e05c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_RGB565:          return "BPP16-RGB565";
 800b978:	4b4e      	ldr	r3, [pc, #312]	; (800bab4 <sail_pixel_format_to_string+0x2f4>)
 800b97a:	e05a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_BGR565:          return "BPP16-BGR565";
 800b97c:	4b4e      	ldr	r3, [pc, #312]	; (800bab8 <sail_pixel_format_to_string+0x2f8>)
 800b97e:	e058      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP24_RGB:             return "BPP24-RGB";
 800b980:	4b4e      	ldr	r3, [pc, #312]	; (800babc <sail_pixel_format_to_string+0x2fc>)
 800b982:	e056      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP24_BGR:             return "BPP24-BGR";
 800b984:	4b4e      	ldr	r3, [pc, #312]	; (800bac0 <sail_pixel_format_to_string+0x300>)
 800b986:	e054      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP48_RGB:             return "BPP48-RGB";
 800b988:	4b4e      	ldr	r3, [pc, #312]	; (800bac4 <sail_pixel_format_to_string+0x304>)
 800b98a:	e052      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP48_BGR:             return "BPP48-BGR";
 800b98c:	4b4e      	ldr	r3, [pc, #312]	; (800bac8 <sail_pixel_format_to_string+0x308>)
 800b98e:	e050      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP16_RGBX:            return "BPP16-RGBX";
 800b990:	4b4e      	ldr	r3, [pc, #312]	; (800bacc <sail_pixel_format_to_string+0x30c>)
 800b992:	e04e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_BGRX:            return "BPP16-BGRX";
 800b994:	4b4e      	ldr	r3, [pc, #312]	; (800bad0 <sail_pixel_format_to_string+0x310>)
 800b996:	e04c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_XRGB:            return "BPP16-XRGB";
 800b998:	4b4e      	ldr	r3, [pc, #312]	; (800bad4 <sail_pixel_format_to_string+0x314>)
 800b99a:	e04a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_XBGR:            return "BPP16-XBGR";
 800b99c:	4b4e      	ldr	r3, [pc, #312]	; (800bad8 <sail_pixel_format_to_string+0x318>)
 800b99e:	e048      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_RGBA:            return "BPP16-RGBA";
 800b9a0:	4b4e      	ldr	r3, [pc, #312]	; (800badc <sail_pixel_format_to_string+0x31c>)
 800b9a2:	e046      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_BGRA:            return "BPP16-BGRA";
 800b9a4:	4b4e      	ldr	r3, [pc, #312]	; (800bae0 <sail_pixel_format_to_string+0x320>)
 800b9a6:	e044      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_ARGB:            return "BPP16-ARGB";
 800b9a8:	4b4e      	ldr	r3, [pc, #312]	; (800bae4 <sail_pixel_format_to_string+0x324>)
 800b9aa:	e042      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP16_ABGR:            return "BPP16-ABGR";
 800b9ac:	4b4e      	ldr	r3, [pc, #312]	; (800bae8 <sail_pixel_format_to_string+0x328>)
 800b9ae:	e040      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP32_RGBX:            return "BPP32-RGBX";
 800b9b0:	4b4e      	ldr	r3, [pc, #312]	; (800baec <sail_pixel_format_to_string+0x32c>)
 800b9b2:	e03e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_BGRX:            return "BPP32-BGRX";
 800b9b4:	4b4e      	ldr	r3, [pc, #312]	; (800baf0 <sail_pixel_format_to_string+0x330>)
 800b9b6:	e03c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_XRGB:            return "BPP32-XRGB";
 800b9b8:	4b4e      	ldr	r3, [pc, #312]	; (800baf4 <sail_pixel_format_to_string+0x334>)
 800b9ba:	e03a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_XBGR:            return "BPP32-XBGR";
 800b9bc:	4b4e      	ldr	r3, [pc, #312]	; (800baf8 <sail_pixel_format_to_string+0x338>)
 800b9be:	e038      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_RGBA:            return "BPP32-RGBA";
 800b9c0:	4b4e      	ldr	r3, [pc, #312]	; (800bafc <sail_pixel_format_to_string+0x33c>)
 800b9c2:	e036      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_BGRA:            return "BPP32-BGRA";
 800b9c4:	4b4e      	ldr	r3, [pc, #312]	; (800bb00 <sail_pixel_format_to_string+0x340>)
 800b9c6:	e034      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_ARGB:            return "BPP32-ARGB";
 800b9c8:	4b4e      	ldr	r3, [pc, #312]	; (800bb04 <sail_pixel_format_to_string+0x344>)
 800b9ca:	e032      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP32_ABGR:            return "BPP32-ABGR";
 800b9cc:	4b4e      	ldr	r3, [pc, #312]	; (800bb08 <sail_pixel_format_to_string+0x348>)
 800b9ce:	e030      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP64_RGBX:            return "BPP64-RGBX";
 800b9d0:	4b4e      	ldr	r3, [pc, #312]	; (800bb0c <sail_pixel_format_to_string+0x34c>)
 800b9d2:	e02e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_BGRX:            return "BPP64-BGRX";
 800b9d4:	4b4e      	ldr	r3, [pc, #312]	; (800bb10 <sail_pixel_format_to_string+0x350>)
 800b9d6:	e02c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_XRGB:            return "BPP64-XRGB";
 800b9d8:	4b4e      	ldr	r3, [pc, #312]	; (800bb14 <sail_pixel_format_to_string+0x354>)
 800b9da:	e02a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_XBGR:            return "BPP64-XBGR";
 800b9dc:	4b4e      	ldr	r3, [pc, #312]	; (800bb18 <sail_pixel_format_to_string+0x358>)
 800b9de:	e028      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_RGBA:            return "BPP64-RGBA";
 800b9e0:	4b4e      	ldr	r3, [pc, #312]	; (800bb1c <sail_pixel_format_to_string+0x35c>)
 800b9e2:	e026      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_BGRA:            return "BPP64-BGRA";
 800b9e4:	4b4e      	ldr	r3, [pc, #312]	; (800bb20 <sail_pixel_format_to_string+0x360>)
 800b9e6:	e024      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_ARGB:            return "BPP64-ARGB";
 800b9e8:	4b4e      	ldr	r3, [pc, #312]	; (800bb24 <sail_pixel_format_to_string+0x364>)
 800b9ea:	e022      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_ABGR:            return "BPP64-ABGR";
 800b9ec:	4b4e      	ldr	r3, [pc, #312]	; (800bb28 <sail_pixel_format_to_string+0x368>)
 800b9ee:	e020      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP32_CMYK:            return "BPP32-CMYK";
 800b9f0:	4b4e      	ldr	r3, [pc, #312]	; (800bb2c <sail_pixel_format_to_string+0x36c>)
 800b9f2:	e01e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_CMYK:            return "BPP64-CMYK";
 800b9f4:	4b4e      	ldr	r3, [pc, #312]	; (800bb30 <sail_pixel_format_to_string+0x370>)
 800b9f6:	e01c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP24_YCBCR:           return "BPP24-YCBCR";
 800b9f8:	4b4e      	ldr	r3, [pc, #312]	; (800bb34 <sail_pixel_format_to_string+0x374>)
 800b9fa:	e01a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP32_YCCK:            return "BPP32-YCCK";
 800b9fc:	4b4e      	ldr	r3, [pc, #312]	; (800bb38 <sail_pixel_format_to_string+0x378>)
 800b9fe:	e018      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LAB:         return "BPP24-CIE-LAB";
 800ba00:	4b4e      	ldr	r3, [pc, #312]	; (800bb3c <sail_pixel_format_to_string+0x37c>)
 800ba02:	e016      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LAB:         return "BPP40-CIE-LAB";
 800ba04:	4b4e      	ldr	r3, [pc, #312]	; (800bb40 <sail_pixel_format_to_string+0x380>)
 800ba06:	e014      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LUV:         return "BPP24-CIE-LUV";
 800ba08:	4b4e      	ldr	r3, [pc, #312]	; (800bb44 <sail_pixel_format_to_string+0x384>)
 800ba0a:	e012      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LUV:         return "BPP40-CIE-LUV";
 800ba0c:	4b4e      	ldr	r3, [pc, #312]	; (800bb48 <sail_pixel_format_to_string+0x388>)
 800ba0e:	e010      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP24_YUV:             return "BPP24-YUV";
 800ba10:	4b4e      	ldr	r3, [pc, #312]	; (800bb4c <sail_pixel_format_to_string+0x38c>)
 800ba12:	e00e      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP30_YUV:             return "BPP30-YUV";
 800ba14:	4b4e      	ldr	r3, [pc, #312]	; (800bb50 <sail_pixel_format_to_string+0x390>)
 800ba16:	e00c      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP36_YUV:             return "BPP36-YUV";
 800ba18:	4b4e      	ldr	r3, [pc, #312]	; (800bb54 <sail_pixel_format_to_string+0x394>)
 800ba1a:	e00a      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP48_YUV:             return "BPP48-YUV";
 800ba1c:	4b4e      	ldr	r3, [pc, #312]	; (800bb58 <sail_pixel_format_to_string+0x398>)
 800ba1e:	e008      	b.n	800ba32 <sail_pixel_format_to_string+0x272>

        case SAIL_PIXEL_FORMAT_BPP32_YUVA:            return "BPP32-YUVA";
 800ba20:	4b4e      	ldr	r3, [pc, #312]	; (800bb5c <sail_pixel_format_to_string+0x39c>)
 800ba22:	e006      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP40_YUVA:            return "BPP40-YUVA";
 800ba24:	4b4e      	ldr	r3, [pc, #312]	; (800bb60 <sail_pixel_format_to_string+0x3a0>)
 800ba26:	e004      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP48_YUVA:            return "BPP48-YUVA";
 800ba28:	4b4e      	ldr	r3, [pc, #312]	; (800bb64 <sail_pixel_format_to_string+0x3a4>)
 800ba2a:	e002      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
        case SAIL_PIXEL_FORMAT_BPP64_YUVA:            return "BPP64-YUVA";
 800ba2c:	4b4e      	ldr	r3, [pc, #312]	; (800bb68 <sail_pixel_format_to_string+0x3a8>)
 800ba2e:	e000      	b.n	800ba32 <sail_pixel_format_to_string+0x272>
    }

    return NULL;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	08018750 	.word	0x08018750
 800ba44:	08018758 	.word	0x08018758
 800ba48:	08018760 	.word	0x08018760
 800ba4c:	08018768 	.word	0x08018768
 800ba50:	08018770 	.word	0x08018770
 800ba54:	08018778 	.word	0x08018778
 800ba58:	08018780 	.word	0x08018780
 800ba5c:	08018788 	.word	0x08018788
 800ba60:	08018790 	.word	0x08018790
 800ba64:	08018798 	.word	0x08018798
 800ba68:	080187a0 	.word	0x080187a0
 800ba6c:	080187a8 	.word	0x080187a8
 800ba70:	080187b0 	.word	0x080187b0
 800ba74:	080187b8 	.word	0x080187b8
 800ba78:	080187c8 	.word	0x080187c8
 800ba7c:	080187d8 	.word	0x080187d8
 800ba80:	080187e8 	.word	0x080187e8
 800ba84:	080187f8 	.word	0x080187f8
 800ba88:	08018808 	.word	0x08018808
 800ba8c:	08018818 	.word	0x08018818
 800ba90:	08018828 	.word	0x08018828
 800ba94:	08018838 	.word	0x08018838
 800ba98:	08018848 	.word	0x08018848
 800ba9c:	08018858 	.word	0x08018858
 800baa0:	08018870 	.word	0x08018870
 800baa4:	08018888 	.word	0x08018888
 800baa8:	080188a0 	.word	0x080188a0
 800baac:	080188b8 	.word	0x080188b8
 800bab0:	080188c8 	.word	0x080188c8
 800bab4:	080188d8 	.word	0x080188d8
 800bab8:	080188e8 	.word	0x080188e8
 800babc:	080188f8 	.word	0x080188f8
 800bac0:	08018904 	.word	0x08018904
 800bac4:	08018910 	.word	0x08018910
 800bac8:	0801891c 	.word	0x0801891c
 800bacc:	08018928 	.word	0x08018928
 800bad0:	08018934 	.word	0x08018934
 800bad4:	08018940 	.word	0x08018940
 800bad8:	0801894c 	.word	0x0801894c
 800badc:	08018958 	.word	0x08018958
 800bae0:	08018964 	.word	0x08018964
 800bae4:	08018970 	.word	0x08018970
 800bae8:	0801897c 	.word	0x0801897c
 800baec:	08018988 	.word	0x08018988
 800baf0:	08018994 	.word	0x08018994
 800baf4:	080189a0 	.word	0x080189a0
 800baf8:	080189ac 	.word	0x080189ac
 800bafc:	080189b8 	.word	0x080189b8
 800bb00:	080189c4 	.word	0x080189c4
 800bb04:	080189d0 	.word	0x080189d0
 800bb08:	080189dc 	.word	0x080189dc
 800bb0c:	080189e8 	.word	0x080189e8
 800bb10:	080189f4 	.word	0x080189f4
 800bb14:	08018a00 	.word	0x08018a00
 800bb18:	08018a0c 	.word	0x08018a0c
 800bb1c:	08018a18 	.word	0x08018a18
 800bb20:	08018a24 	.word	0x08018a24
 800bb24:	08018a30 	.word	0x08018a30
 800bb28:	08018a3c 	.word	0x08018a3c
 800bb2c:	08018a48 	.word	0x08018a48
 800bb30:	08018a54 	.word	0x08018a54
 800bb34:	08018a60 	.word	0x08018a60
 800bb38:	08018a6c 	.word	0x08018a6c
 800bb3c:	08018a78 	.word	0x08018a78
 800bb40:	08018a88 	.word	0x08018a88
 800bb44:	08018a98 	.word	0x08018a98
 800bb48:	08018aa8 	.word	0x08018aa8
 800bb4c:	08018ab8 	.word	0x08018ab8
 800bb50:	08018ac4 	.word	0x08018ac4
 800bb54:	08018ad0 	.word	0x08018ad0
 800bb58:	08018adc 	.word	0x08018adc
 800bb5c:	08018ae8 	.word	0x08018ae8
 800bb60:	08018af4 	.word	0x08018af4
 800bb64:	08018b00 	.word	0x08018b00
 800bb68:	08018b0c 	.word	0x08018b0c

0800bb6c <sail_pixel_format_from_string>:

enum SailPixelFormat sail_pixel_format_from_string(const char *str) {
 800bb6c:	b5b0      	push	{r4, r5, r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800bb74:	f107 0308 	add.w	r3, r7, #8
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f004 fec8 	bl	8010910 <sail_string_hash>
 800bb80:	4603      	mov	r3, r0
 800bb82:	82fb      	strh	r3, [r7, #22]
 800bb84:	8afb      	ldrh	r3, [r7, #22]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bf14      	ite	ne
 800bb8a:	2301      	movne	r3, #1
 800bb8c:	2300      	moveq	r3, #0
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <sail_pixel_format_from_string+0x2e>
 800bb94:	2300      	movs	r3, #0
 800bb96:	f000 bde4 	b.w	800c762 <sail_pixel_format_from_string+0xbf6>
     * extra data structures and initializations. It's not C++11, so we choose between two evils:
     *
     *     1. Introduce extra data structures and their initializations to work with hashes.
     *     2. Use a single ugly looking switch/case.
     */
    switch (hash) {
 800bb9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb9e:	48b2      	ldr	r0, [pc, #712]	; (800be68 <sail_pixel_format_from_string+0x2fc>)
 800bba0:	49b2      	ldr	r1, [pc, #712]	; (800be6c <sail_pixel_format_from_string+0x300>)
 800bba2:	428b      	cmp	r3, r1
 800bba4:	bf08      	it	eq
 800bba6:	4282      	cmpeq	r2, r0
 800bba8:	f000 85be 	beq.w	800c728 <sail_pixel_format_from_string+0xbbc>
 800bbac:	49b0      	ldr	r1, [pc, #704]	; (800be70 <sail_pixel_format_from_string+0x304>)
 800bbae:	428a      	cmp	r2, r1
 800bbb0:	49ae      	ldr	r1, [pc, #696]	; (800be6c <sail_pixel_format_from_string+0x300>)
 800bbb2:	eb73 0101 	sbcs.w	r1, r3, r1
 800bbb6:	f080 85d3 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bbba:	48ae      	ldr	r0, [pc, #696]	; (800be74 <sail_pixel_format_from_string+0x308>)
 800bbbc:	49ae      	ldr	r1, [pc, #696]	; (800be78 <sail_pixel_format_from_string+0x30c>)
 800bbbe:	428b      	cmp	r3, r1
 800bbc0:	bf08      	it	eq
 800bbc2:	4282      	cmpeq	r2, r0
 800bbc4:	f000 84fa 	beq.w	800c5bc <sail_pixel_format_from_string+0xa50>
 800bbc8:	49ac      	ldr	r1, [pc, #688]	; (800be7c <sail_pixel_format_from_string+0x310>)
 800bbca:	428a      	cmp	r2, r1
 800bbcc:	49aa      	ldr	r1, [pc, #680]	; (800be78 <sail_pixel_format_from_string+0x30c>)
 800bbce:	eb73 0101 	sbcs.w	r1, r3, r1
 800bbd2:	f080 85c5 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bbd6:	48aa      	ldr	r0, [pc, #680]	; (800be80 <sail_pixel_format_from_string+0x314>)
 800bbd8:	49aa      	ldr	r1, [pc, #680]	; (800be84 <sail_pixel_format_from_string+0x318>)
 800bbda:	428b      	cmp	r3, r1
 800bbdc:	bf08      	it	eq
 800bbde:	4282      	cmpeq	r2, r0
 800bbe0:	f000 84ea 	beq.w	800c5b8 <sail_pixel_format_from_string+0xa4c>
 800bbe4:	49a8      	ldr	r1, [pc, #672]	; (800be88 <sail_pixel_format_from_string+0x31c>)
 800bbe6:	428a      	cmp	r2, r1
 800bbe8:	49a6      	ldr	r1, [pc, #664]	; (800be84 <sail_pixel_format_from_string+0x318>)
 800bbea:	eb73 0101 	sbcs.w	r1, r3, r1
 800bbee:	f080 85b7 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bbf2:	48a6      	ldr	r0, [pc, #664]	; (800be8c <sail_pixel_format_from_string+0x320>)
 800bbf4:	49a6      	ldr	r1, [pc, #664]	; (800be90 <sail_pixel_format_from_string+0x324>)
 800bbf6:	428b      	cmp	r3, r1
 800bbf8:	bf08      	it	eq
 800bbfa:	4282      	cmpeq	r2, r0
 800bbfc:	f000 84da 	beq.w	800c5b4 <sail_pixel_format_from_string+0xa48>
 800bc00:	49a4      	ldr	r1, [pc, #656]	; (800be94 <sail_pixel_format_from_string+0x328>)
 800bc02:	428a      	cmp	r2, r1
 800bc04:	49a2      	ldr	r1, [pc, #648]	; (800be90 <sail_pixel_format_from_string+0x324>)
 800bc06:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc0a:	f080 85a9 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bc0e:	48a2      	ldr	r0, [pc, #648]	; (800be98 <sail_pixel_format_from_string+0x32c>)
 800bc10:	49a2      	ldr	r1, [pc, #648]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc12:	428b      	cmp	r3, r1
 800bc14:	bf08      	it	eq
 800bc16:	4282      	cmpeq	r2, r0
 800bc18:	f000 84ea 	beq.w	800c5f0 <sail_pixel_format_from_string+0xa84>
 800bc1c:	49a0      	ldr	r1, [pc, #640]	; (800bea0 <sail_pixel_format_from_string+0x334>)
 800bc1e:	428a      	cmp	r2, r1
 800bc20:	499e      	ldr	r1, [pc, #632]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc22:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc26:	f080 859b 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bc2a:	489e      	ldr	r0, [pc, #632]	; (800bea4 <sail_pixel_format_from_string+0x338>)
 800bc2c:	499b      	ldr	r1, [pc, #620]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc2e:	428b      	cmp	r3, r1
 800bc30:	bf08      	it	eq
 800bc32:	4282      	cmpeq	r2, r0
 800bc34:	f000 84d8 	beq.w	800c5e8 <sail_pixel_format_from_string+0xa7c>
 800bc38:	499b      	ldr	r1, [pc, #620]	; (800bea8 <sail_pixel_format_from_string+0x33c>)
 800bc3a:	428a      	cmp	r2, r1
 800bc3c:	4997      	ldr	r1, [pc, #604]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc3e:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc42:	f080 858d 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bc46:	4899      	ldr	r0, [pc, #612]	; (800beac <sail_pixel_format_from_string+0x340>)
 800bc48:	4994      	ldr	r1, [pc, #592]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc4a:	428b      	cmp	r3, r1
 800bc4c:	bf08      	it	eq
 800bc4e:	4282      	cmpeq	r2, r0
 800bc50:	f000 852c 	beq.w	800c6ac <sail_pixel_format_from_string+0xb40>
 800bc54:	4996      	ldr	r1, [pc, #600]	; (800beb0 <sail_pixel_format_from_string+0x344>)
 800bc56:	428a      	cmp	r2, r1
 800bc58:	4990      	ldr	r1, [pc, #576]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc5a:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc5e:	f080 857f 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bc62:	4894      	ldr	r0, [pc, #592]	; (800beb4 <sail_pixel_format_from_string+0x348>)
 800bc64:	498d      	ldr	r1, [pc, #564]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc66:	428b      	cmp	r3, r1
 800bc68:	bf08      	it	eq
 800bc6a:	4282      	cmpeq	r2, r0
 800bc6c:	f000 84be 	beq.w	800c5ec <sail_pixel_format_from_string+0xa80>
 800bc70:	4991      	ldr	r1, [pc, #580]	; (800beb8 <sail_pixel_format_from_string+0x34c>)
 800bc72:	428a      	cmp	r2, r1
 800bc74:	4989      	ldr	r1, [pc, #548]	; (800be9c <sail_pixel_format_from_string+0x330>)
 800bc76:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc7a:	f080 8571 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bc7e:	488f      	ldr	r0, [pc, #572]	; (800bebc <sail_pixel_format_from_string+0x350>)
 800bc80:	498f      	ldr	r1, [pc, #572]	; (800bec0 <sail_pixel_format_from_string+0x354>)
 800bc82:	428b      	cmp	r3, r1
 800bc84:	bf08      	it	eq
 800bc86:	4282      	cmpeq	r2, r0
 800bc88:	f000 8492 	beq.w	800c5b0 <sail_pixel_format_from_string+0xa44>
 800bc8c:	498d      	ldr	r1, [pc, #564]	; (800bec4 <sail_pixel_format_from_string+0x358>)
 800bc8e:	428a      	cmp	r2, r1
 800bc90:	498b      	ldr	r1, [pc, #556]	; (800bec0 <sail_pixel_format_from_string+0x354>)
 800bc92:	eb73 0101 	sbcs.w	r1, r3, r1
 800bc96:	f080 8563 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bc9a:	488b      	ldr	r0, [pc, #556]	; (800bec8 <sail_pixel_format_from_string+0x35c>)
 800bc9c:	498b      	ldr	r1, [pc, #556]	; (800becc <sail_pixel_format_from_string+0x360>)
 800bc9e:	428b      	cmp	r3, r1
 800bca0:	bf08      	it	eq
 800bca2:	4282      	cmpeq	r2, r0
 800bca4:	f000 854a 	beq.w	800c73c <sail_pixel_format_from_string+0xbd0>
 800bca8:	4989      	ldr	r1, [pc, #548]	; (800bed0 <sail_pixel_format_from_string+0x364>)
 800bcaa:	428a      	cmp	r2, r1
 800bcac:	4987      	ldr	r1, [pc, #540]	; (800becc <sail_pixel_format_from_string+0x360>)
 800bcae:	eb73 0101 	sbcs.w	r1, r3, r1
 800bcb2:	f080 8555 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bcb6:	4887      	ldr	r0, [pc, #540]	; (800bed4 <sail_pixel_format_from_string+0x368>)
 800bcb8:	4984      	ldr	r1, [pc, #528]	; (800becc <sail_pixel_format_from_string+0x360>)
 800bcba:	428b      	cmp	r3, r1
 800bcbc:	bf08      	it	eq
 800bcbe:	4282      	cmpeq	r2, r0
 800bcc0:	f000 8538 	beq.w	800c734 <sail_pixel_format_from_string+0xbc8>
 800bcc4:	4984      	ldr	r1, [pc, #528]	; (800bed8 <sail_pixel_format_from_string+0x36c>)
 800bcc6:	428a      	cmp	r2, r1
 800bcc8:	4980      	ldr	r1, [pc, #512]	; (800becc <sail_pixel_format_from_string+0x360>)
 800bcca:	eb73 0101 	sbcs.w	r1, r3, r1
 800bcce:	f080 8547 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bcd2:	4882      	ldr	r0, [pc, #520]	; (800bedc <sail_pixel_format_from_string+0x370>)
 800bcd4:	4982      	ldr	r1, [pc, #520]	; (800bee0 <sail_pixel_format_from_string+0x374>)
 800bcd6:	428b      	cmp	r3, r1
 800bcd8:	bf08      	it	eq
 800bcda:	4282      	cmpeq	r2, r0
 800bcdc:	f000 852c 	beq.w	800c738 <sail_pixel_format_from_string+0xbcc>
 800bce0:	4980      	ldr	r1, [pc, #512]	; (800bee4 <sail_pixel_format_from_string+0x378>)
 800bce2:	428a      	cmp	r2, r1
 800bce4:	497e      	ldr	r1, [pc, #504]	; (800bee0 <sail_pixel_format_from_string+0x374>)
 800bce6:	eb73 0101 	sbcs.w	r1, r3, r1
 800bcea:	f080 8539 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bcee:	487e      	ldr	r0, [pc, #504]	; (800bee8 <sail_pixel_format_from_string+0x37c>)
 800bcf0:	497b      	ldr	r1, [pc, #492]	; (800bee0 <sail_pixel_format_from_string+0x374>)
 800bcf2:	428b      	cmp	r3, r1
 800bcf4:	bf08      	it	eq
 800bcf6:	4282      	cmpeq	r2, r0
 800bcf8:	f000 851a 	beq.w	800c730 <sail_pixel_format_from_string+0xbc4>
 800bcfc:	497b      	ldr	r1, [pc, #492]	; (800beec <sail_pixel_format_from_string+0x380>)
 800bcfe:	428a      	cmp	r2, r1
 800bd00:	4977      	ldr	r1, [pc, #476]	; (800bee0 <sail_pixel_format_from_string+0x374>)
 800bd02:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd06:	f080 852b 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bd0a:	4879      	ldr	r0, [pc, #484]	; (800bef0 <sail_pixel_format_from_string+0x384>)
 800bd0c:	4979      	ldr	r1, [pc, #484]	; (800bef4 <sail_pixel_format_from_string+0x388>)
 800bd0e:	428b      	cmp	r3, r1
 800bd10:	bf08      	it	eq
 800bd12:	4282      	cmpeq	r2, r0
 800bd14:	f000 8454 	beq.w	800c5c0 <sail_pixel_format_from_string+0xa54>
 800bd18:	4977      	ldr	r1, [pc, #476]	; (800bef8 <sail_pixel_format_from_string+0x38c>)
 800bd1a:	428a      	cmp	r2, r1
 800bd1c:	4975      	ldr	r1, [pc, #468]	; (800bef4 <sail_pixel_format_from_string+0x388>)
 800bd1e:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd22:	f080 851d 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bd26:	4875      	ldr	r0, [pc, #468]	; (800befc <sail_pixel_format_from_string+0x390>)
 800bd28:	4975      	ldr	r1, [pc, #468]	; (800bf00 <sail_pixel_format_from_string+0x394>)
 800bd2a:	428b      	cmp	r3, r1
 800bd2c:	bf08      	it	eq
 800bd2e:	4282      	cmpeq	r2, r0
 800bd30:	f000 844e 	beq.w	800c5d0 <sail_pixel_format_from_string+0xa64>
 800bd34:	4973      	ldr	r1, [pc, #460]	; (800bf04 <sail_pixel_format_from_string+0x398>)
 800bd36:	428a      	cmp	r2, r1
 800bd38:	4971      	ldr	r1, [pc, #452]	; (800bf00 <sail_pixel_format_from_string+0x394>)
 800bd3a:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd3e:	f080 850f 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bd42:	4871      	ldr	r0, [pc, #452]	; (800bf08 <sail_pixel_format_from_string+0x39c>)
 800bd44:	4971      	ldr	r1, [pc, #452]	; (800bf0c <sail_pixel_format_from_string+0x3a0>)
 800bd46:	428b      	cmp	r3, r1
 800bd48:	bf08      	it	eq
 800bd4a:	4282      	cmpeq	r2, r0
 800bd4c:	f000 843e 	beq.w	800c5cc <sail_pixel_format_from_string+0xa60>
 800bd50:	496f      	ldr	r1, [pc, #444]	; (800bf10 <sail_pixel_format_from_string+0x3a4>)
 800bd52:	428a      	cmp	r2, r1
 800bd54:	496d      	ldr	r1, [pc, #436]	; (800bf0c <sail_pixel_format_from_string+0x3a0>)
 800bd56:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd5a:	f080 8501 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bd5e:	486d      	ldr	r0, [pc, #436]	; (800bf14 <sail_pixel_format_from_string+0x3a8>)
 800bd60:	496d      	ldr	r1, [pc, #436]	; (800bf18 <sail_pixel_format_from_string+0x3ac>)
 800bd62:	428b      	cmp	r3, r1
 800bd64:	bf08      	it	eq
 800bd66:	4282      	cmpeq	r2, r0
 800bd68:	f000 842e 	beq.w	800c5c8 <sail_pixel_format_from_string+0xa5c>
 800bd6c:	496b      	ldr	r1, [pc, #428]	; (800bf1c <sail_pixel_format_from_string+0x3b0>)
 800bd6e:	428a      	cmp	r2, r1
 800bd70:	4969      	ldr	r1, [pc, #420]	; (800bf18 <sail_pixel_format_from_string+0x3ac>)
 800bd72:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd76:	f080 84f3 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bd7a:	4869      	ldr	r0, [pc, #420]	; (800bf20 <sail_pixel_format_from_string+0x3b4>)
 800bd7c:	4969      	ldr	r1, [pc, #420]	; (800bf24 <sail_pixel_format_from_string+0x3b8>)
 800bd7e:	428b      	cmp	r3, r1
 800bd80:	bf08      	it	eq
 800bd82:	4282      	cmpeq	r2, r0
 800bd84:	f000 841e 	beq.w	800c5c4 <sail_pixel_format_from_string+0xa58>
 800bd88:	4967      	ldr	r1, [pc, #412]	; (800bf28 <sail_pixel_format_from_string+0x3bc>)
 800bd8a:	428a      	cmp	r2, r1
 800bd8c:	4965      	ldr	r1, [pc, #404]	; (800bf24 <sail_pixel_format_from_string+0x3b8>)
 800bd8e:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd92:	f080 84e5 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bd96:	4865      	ldr	r0, [pc, #404]	; (800bf2c <sail_pixel_format_from_string+0x3c0>)
 800bd98:	4965      	ldr	r1, [pc, #404]	; (800bf30 <sail_pixel_format_from_string+0x3c4>)
 800bd9a:	428b      	cmp	r3, r1
 800bd9c:	bf08      	it	eq
 800bd9e:	4282      	cmpeq	r2, r0
 800bda0:	f000 841c 	beq.w	800c5dc <sail_pixel_format_from_string+0xa70>
 800bda4:	4963      	ldr	r1, [pc, #396]	; (800bf34 <sail_pixel_format_from_string+0x3c8>)
 800bda6:	428a      	cmp	r2, r1
 800bda8:	4961      	ldr	r1, [pc, #388]	; (800bf30 <sail_pixel_format_from_string+0x3c4>)
 800bdaa:	eb73 0101 	sbcs.w	r1, r3, r1
 800bdae:	f080 84d7 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bdb2:	4861      	ldr	r0, [pc, #388]	; (800bf38 <sail_pixel_format_from_string+0x3cc>)
 800bdb4:	4961      	ldr	r1, [pc, #388]	; (800bf3c <sail_pixel_format_from_string+0x3d0>)
 800bdb6:	428b      	cmp	r3, r1
 800bdb8:	bf08      	it	eq
 800bdba:	4282      	cmpeq	r2, r0
 800bdbc:	f000 840c 	beq.w	800c5d8 <sail_pixel_format_from_string+0xa6c>
 800bdc0:	495f      	ldr	r1, [pc, #380]	; (800bf40 <sail_pixel_format_from_string+0x3d4>)
 800bdc2:	428a      	cmp	r2, r1
 800bdc4:	495d      	ldr	r1, [pc, #372]	; (800bf3c <sail_pixel_format_from_string+0x3d0>)
 800bdc6:	eb73 0101 	sbcs.w	r1, r3, r1
 800bdca:	f080 84c9 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bdce:	485d      	ldr	r0, [pc, #372]	; (800bf44 <sail_pixel_format_from_string+0x3d8>)
 800bdd0:	495d      	ldr	r1, [pc, #372]	; (800bf48 <sail_pixel_format_from_string+0x3dc>)
 800bdd2:	428b      	cmp	r3, r1
 800bdd4:	bf08      	it	eq
 800bdd6:	4282      	cmpeq	r2, r0
 800bdd8:	f000 83fc 	beq.w	800c5d4 <sail_pixel_format_from_string+0xa68>
 800bddc:	495b      	ldr	r1, [pc, #364]	; (800bf4c <sail_pixel_format_from_string+0x3e0>)
 800bdde:	428a      	cmp	r2, r1
 800bde0:	4959      	ldr	r1, [pc, #356]	; (800bf48 <sail_pixel_format_from_string+0x3dc>)
 800bde2:	eb73 0101 	sbcs.w	r1, r3, r1
 800bde6:	f080 84bb 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bdea:	4859      	ldr	r0, [pc, #356]	; (800bf50 <sail_pixel_format_from_string+0x3e4>)
 800bdec:	4959      	ldr	r1, [pc, #356]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800bdee:	428b      	cmp	r3, r1
 800bdf0:	bf08      	it	eq
 800bdf2:	4282      	cmpeq	r2, r0
 800bdf4:	f000 84b2 	beq.w	800c75c <sail_pixel_format_from_string+0xbf0>
 800bdf8:	4957      	ldr	r1, [pc, #348]	; (800bf58 <sail_pixel_format_from_string+0x3ec>)
 800bdfa:	428a      	cmp	r2, r1
 800bdfc:	4955      	ldr	r1, [pc, #340]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800bdfe:	eb73 0101 	sbcs.w	r1, r3, r1
 800be02:	f080 84ad 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800be06:	4855      	ldr	r0, [pc, #340]	; (800bf5c <sail_pixel_format_from_string+0x3f0>)
 800be08:	4952      	ldr	r1, [pc, #328]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be0a:	428b      	cmp	r3, r1
 800be0c:	bf08      	it	eq
 800be0e:	4282      	cmpeq	r2, r0
 800be10:	f000 847a 	beq.w	800c708 <sail_pixel_format_from_string+0xb9c>
 800be14:	4952      	ldr	r1, [pc, #328]	; (800bf60 <sail_pixel_format_from_string+0x3f4>)
 800be16:	428a      	cmp	r2, r1
 800be18:	494e      	ldr	r1, [pc, #312]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be1a:	eb73 0101 	sbcs.w	r1, r3, r1
 800be1e:	f080 849f 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800be22:	4850      	ldr	r0, [pc, #320]	; (800bf64 <sail_pixel_format_from_string+0x3f8>)
 800be24:	494b      	ldr	r1, [pc, #300]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be26:	428b      	cmp	r3, r1
 800be28:	bf08      	it	eq
 800be2a:	4282      	cmpeq	r2, r0
 800be2c:	f000 846e 	beq.w	800c70c <sail_pixel_format_from_string+0xba0>
 800be30:	494d      	ldr	r1, [pc, #308]	; (800bf68 <sail_pixel_format_from_string+0x3fc>)
 800be32:	428a      	cmp	r2, r1
 800be34:	4947      	ldr	r1, [pc, #284]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be36:	eb73 0101 	sbcs.w	r1, r3, r1
 800be3a:	f080 8491 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800be3e:	484b      	ldr	r0, [pc, #300]	; (800bf6c <sail_pixel_format_from_string+0x400>)
 800be40:	4944      	ldr	r1, [pc, #272]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be42:	428b      	cmp	r3, r1
 800be44:	bf08      	it	eq
 800be46:	4282      	cmpeq	r2, r0
 800be48:	f000 845a 	beq.w	800c700 <sail_pixel_format_from_string+0xb94>
 800be4c:	4948      	ldr	r1, [pc, #288]	; (800bf70 <sail_pixel_format_from_string+0x404>)
 800be4e:	428a      	cmp	r2, r1
 800be50:	4940      	ldr	r1, [pc, #256]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be52:	eb73 0101 	sbcs.w	r1, r3, r1
 800be56:	f080 8483 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800be5a:	4846      	ldr	r0, [pc, #280]	; (800bf74 <sail_pixel_format_from_string+0x408>)
 800be5c:	493d      	ldr	r1, [pc, #244]	; (800bf54 <sail_pixel_format_from_string+0x3e8>)
 800be5e:	428b      	cmp	r3, r1
 800be60:	bf08      	it	eq
 800be62:	4282      	cmpeq	r2, r0
 800be64:	e088      	b.n	800bf78 <sail_pixel_format_from_string+0x40c>
 800be66:	bf00      	nop
 800be68:	2e99a0ad 	.word	0x2e99a0ad
 800be6c:	bfc1deac 	.word	0xbfc1deac
 800be70:	2e99a0ae 	.word	0x2e99a0ae
 800be74:	98b585ed 	.word	0x98b585ed
 800be78:	b7fdbba1 	.word	0xb7fdbba1
 800be7c:	98b585ee 	.word	0x98b585ee
 800be80:	c6c3c1e9 	.word	0xc6c3c1e9
 800be84:	b7fdb683 	.word	0xb7fdb683
 800be88:	c6c3c1ea 	.word	0xc6c3c1ea
 800be8c:	ddcadfe7 	.word	0xddcadfe7
 800be90:	b7fdb3f4 	.word	0xb7fdb3f4
 800be94:	ddcadfe8 	.word	0xddcadfe8
 800be98:	55c8f5b6 	.word	0x55c8f5b6
 800be9c:	b7fdb2fe 	.word	0xb7fdb2fe
 800bea0:	55c8f5b7 	.word	0x55c8f5b7
 800bea4:	55c8f595 	.word	0x55c8f595
 800bea8:	55c8f596 	.word	0x55c8f596
 800beac:	307f31b6 	.word	0x307f31b6
 800beb0:	307f31b7 	.word	0x307f31b7
 800beb4:	307f3195 	.word	0x307f3195
 800beb8:	307f3196 	.word	0x307f3196
 800bebc:	694e6ee6 	.word	0x694e6ee6
 800bec0:	b7fdb2ad 	.word	0xb7fdb2ad
 800bec4:	694e6ee7 	.word	0x694e6ee7
 800bec8:	e24fc44d 	.word	0xe24fc44d
 800becc:	b7b489b9 	.word	0xb7b489b9
 800bed0:	e24fc44e 	.word	0xe24fc44e
 800bed4:	e24fc1a5 	.word	0xe24fc1a5
 800bed8:	e24fc1a6 	.word	0xe24fc1a6
 800bedc:	ac2c660f 	.word	0xac2c660f
 800bee0:	b7b43a6b 	.word	0xb7b43a6b
 800bee4:	ac2c6610 	.word	0xac2c6610
 800bee8:	ac2c6367 	.word	0xac2c6367
 800beec:	ac2c6368 	.word	0xac2c6368
 800bef0:	6a9d301c 	.word	0x6a9d301c
 800bef4:	b7b412c6 	.word	0xb7b412c6
 800bef8:	6a9d301d 	.word	0x6a9d301d
 800befc:	ab9a0707 	.word	0xab9a0707
 800bf00:	ae5b2802 	.word	0xae5b2802
 800bf04:	ab9a0708 	.word	0xab9a0708
 800bf08:	96273203 	.word	0x96273203
 800bf0c:	ae456428 	.word	0xae456428
 800bf10:	96273204 	.word	0x96273204
 800bf14:	8b6dc781 	.word	0x8b6dc781
 800bf18:	ae3a823b 	.word	0xae3a823b
 800bf1c:	8b6dc782 	.word	0x8b6dc782
 800bf20:	06111240 	.word	0x06111240
 800bf24:	ae351145 	.word	0xae351145
 800bf28:	06111241 	.word	0x06111241
 800bf2c:	d75657fa 	.word	0xd75657fa
 800bf30:	ada718bc 	.word	0xada718bc
 800bf34:	d75657fb 	.word	0xd75657fb
 800bf38:	8beecff6 	.word	0x8beecff6
 800bf3c:	82004aea 	.word	0x82004aea
 800bf40:	8beecff7 	.word	0x8beecff7
 800bf44:	9614f8f6 	.word	0x9614f8f6
 800bf48:	7503dba3 	.word	0x7503dba3
 800bf4c:	9614f8f7 	.word	0x9614f8f7
 800bf50:	3552c323 	.word	0x3552c323
 800bf54:	726ab92d 	.word	0x726ab92d
 800bf58:	3552c324 	.word	0x3552c324
 800bf5c:	35522811 	.word	0x35522811
 800bf60:	35522812 	.word	0x35522812
 800bf64:	3551e411 	.word	0x3551e411
 800bf68:	3551e412 	.word	0x3551e412
 800bf6c:	354eae71 	.word	0x354eae71
 800bf70:	354eae72 	.word	0x354eae72
 800bf74:	354eae5a 	.word	0x354eae5a
 800bf78:	f000 83ca 	beq.w	800c710 <sail_pixel_format_from_string+0xba4>
 800bf7c:	49b1      	ldr	r1, [pc, #708]	; (800c244 <sail_pixel_format_from_string+0x6d8>)
 800bf7e:	428a      	cmp	r2, r1
 800bf80:	49b1      	ldr	r1, [pc, #708]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bf82:	eb73 0101 	sbcs.w	r1, r3, r1
 800bf86:	f080 83eb 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bf8a:	48b0      	ldr	r0, [pc, #704]	; (800c24c <sail_pixel_format_from_string+0x6e0>)
 800bf8c:	49ae      	ldr	r1, [pc, #696]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bf8e:	428b      	cmp	r3, r1
 800bf90:	bf08      	it	eq
 800bf92:	4282      	cmpeq	r2, r0
 800bf94:	f000 83c6 	beq.w	800c724 <sail_pixel_format_from_string+0xbb8>
 800bf98:	49ad      	ldr	r1, [pc, #692]	; (800c250 <sail_pixel_format_from_string+0x6e4>)
 800bf9a:	428a      	cmp	r2, r1
 800bf9c:	49aa      	ldr	r1, [pc, #680]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bf9e:	eb73 0101 	sbcs.w	r1, r3, r1
 800bfa2:	f080 83dd 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bfa6:	48ab      	ldr	r0, [pc, #684]	; (800c254 <sail_pixel_format_from_string+0x6e8>)
 800bfa8:	49a7      	ldr	r1, [pc, #668]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bfaa:	428b      	cmp	r3, r1
 800bfac:	bf08      	it	eq
 800bfae:	4282      	cmpeq	r2, r0
 800bfb0:	f000 83a8 	beq.w	800c704 <sail_pixel_format_from_string+0xb98>
 800bfb4:	49a8      	ldr	r1, [pc, #672]	; (800c258 <sail_pixel_format_from_string+0x6ec>)
 800bfb6:	428a      	cmp	r2, r1
 800bfb8:	49a3      	ldr	r1, [pc, #652]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bfba:	eb73 0101 	sbcs.w	r1, r3, r1
 800bfbe:	f080 83cf 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bfc2:	48a6      	ldr	r0, [pc, #664]	; (800c25c <sail_pixel_format_from_string+0x6f0>)
 800bfc4:	49a0      	ldr	r1, [pc, #640]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bfc6:	428b      	cmp	r3, r1
 800bfc8:	bf08      	it	eq
 800bfca:	4282      	cmpeq	r2, r0
 800bfcc:	f000 83a2 	beq.w	800c714 <sail_pixel_format_from_string+0xba8>
 800bfd0:	49a3      	ldr	r1, [pc, #652]	; (800c260 <sail_pixel_format_from_string+0x6f4>)
 800bfd2:	428a      	cmp	r2, r1
 800bfd4:	499c      	ldr	r1, [pc, #624]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bfd6:	eb73 0101 	sbcs.w	r1, r3, r1
 800bfda:	f080 83c1 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bfde:	48a1      	ldr	r0, [pc, #644]	; (800c264 <sail_pixel_format_from_string+0x6f8>)
 800bfe0:	4999      	ldr	r1, [pc, #612]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bfe2:	428b      	cmp	r3, r1
 800bfe4:	bf08      	it	eq
 800bfe6:	4282      	cmpeq	r2, r0
 800bfe8:	f000 8396 	beq.w	800c718 <sail_pixel_format_from_string+0xbac>
 800bfec:	499e      	ldr	r1, [pc, #632]	; (800c268 <sail_pixel_format_from_string+0x6fc>)
 800bfee:	428a      	cmp	r2, r1
 800bff0:	4995      	ldr	r1, [pc, #596]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bff2:	eb73 0101 	sbcs.w	r1, r3, r1
 800bff6:	f080 83b3 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800bffa:	489c      	ldr	r0, [pc, #624]	; (800c26c <sail_pixel_format_from_string+0x700>)
 800bffc:	4992      	ldr	r1, [pc, #584]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800bffe:	428b      	cmp	r3, r1
 800c000:	bf08      	it	eq
 800c002:	4282      	cmpeq	r2, r0
 800c004:	f000 838a 	beq.w	800c71c <sail_pixel_format_from_string+0xbb0>
 800c008:	4999      	ldr	r1, [pc, #612]	; (800c270 <sail_pixel_format_from_string+0x704>)
 800c00a:	428a      	cmp	r2, r1
 800c00c:	498e      	ldr	r1, [pc, #568]	; (800c248 <sail_pixel_format_from_string+0x6dc>)
 800c00e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c012:	f080 83a5 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c016:	4897      	ldr	r0, [pc, #604]	; (800c274 <sail_pixel_format_from_string+0x708>)
 800c018:	4997      	ldr	r1, [pc, #604]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c01a:	428b      	cmp	r3, r1
 800c01c:	bf08      	it	eq
 800c01e:	4282      	cmpeq	r2, r0
 800c020:	f000 839a 	beq.w	800c758 <sail_pixel_format_from_string+0xbec>
 800c024:	4995      	ldr	r1, [pc, #596]	; (800c27c <sail_pixel_format_from_string+0x710>)
 800c026:	428a      	cmp	r2, r1
 800c028:	4993      	ldr	r1, [pc, #588]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c02a:	eb73 0101 	sbcs.w	r1, r3, r1
 800c02e:	f080 8397 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c032:	4893      	ldr	r0, [pc, #588]	; (800c280 <sail_pixel_format_from_string+0x714>)
 800c034:	4990      	ldr	r1, [pc, #576]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c036:	428b      	cmp	r3, r1
 800c038:	bf08      	it	eq
 800c03a:	4282      	cmpeq	r2, r0
 800c03c:	f000 838a 	beq.w	800c754 <sail_pixel_format_from_string+0xbe8>
 800c040:	4990      	ldr	r1, [pc, #576]	; (800c284 <sail_pixel_format_from_string+0x718>)
 800c042:	428a      	cmp	r2, r1
 800c044:	498c      	ldr	r1, [pc, #560]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c046:	eb73 0101 	sbcs.w	r1, r3, r1
 800c04a:	f080 8389 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c04e:	488e      	ldr	r0, [pc, #568]	; (800c288 <sail_pixel_format_from_string+0x71c>)
 800c050:	4989      	ldr	r1, [pc, #548]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c052:	428b      	cmp	r3, r1
 800c054:	bf08      	it	eq
 800c056:	4282      	cmpeq	r2, r0
 800c058:	f000 837a 	beq.w	800c750 <sail_pixel_format_from_string+0xbe4>
 800c05c:	498b      	ldr	r1, [pc, #556]	; (800c28c <sail_pixel_format_from_string+0x720>)
 800c05e:	428a      	cmp	r2, r1
 800c060:	4985      	ldr	r1, [pc, #532]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c062:	eb73 0101 	sbcs.w	r1, r3, r1
 800c066:	f080 837b 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c06a:	4889      	ldr	r0, [pc, #548]	; (800c290 <sail_pixel_format_from_string+0x724>)
 800c06c:	4982      	ldr	r1, [pc, #520]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c06e:	428b      	cmp	r3, r1
 800c070:	bf08      	it	eq
 800c072:	4282      	cmpeq	r2, r0
 800c074:	f000 835a 	beq.w	800c72c <sail_pixel_format_from_string+0xbc0>
 800c078:	4986      	ldr	r1, [pc, #536]	; (800c294 <sail_pixel_format_from_string+0x728>)
 800c07a:	428a      	cmp	r2, r1
 800c07c:	497e      	ldr	r1, [pc, #504]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c07e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c082:	f080 836d 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c086:	4884      	ldr	r0, [pc, #528]	; (800c298 <sail_pixel_format_from_string+0x72c>)
 800c088:	497b      	ldr	r1, [pc, #492]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c08a:	428b      	cmp	r3, r1
 800c08c:	bf08      	it	eq
 800c08e:	4282      	cmpeq	r2, r0
 800c090:	f000 832a 	beq.w	800c6e8 <sail_pixel_format_from_string+0xb7c>
 800c094:	4981      	ldr	r1, [pc, #516]	; (800c29c <sail_pixel_format_from_string+0x730>)
 800c096:	428a      	cmp	r2, r1
 800c098:	4977      	ldr	r1, [pc, #476]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c09a:	eb73 0101 	sbcs.w	r1, r3, r1
 800c09e:	f080 835f 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c0a2:	487f      	ldr	r0, [pc, #508]	; (800c2a0 <sail_pixel_format_from_string+0x734>)
 800c0a4:	4974      	ldr	r1, [pc, #464]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0a6:	428b      	cmp	r3, r1
 800c0a8:	bf08      	it	eq
 800c0aa:	4282      	cmpeq	r2, r0
 800c0ac:	f000 831e 	beq.w	800c6ec <sail_pixel_format_from_string+0xb80>
 800c0b0:	497c      	ldr	r1, [pc, #496]	; (800c2a4 <sail_pixel_format_from_string+0x738>)
 800c0b2:	428a      	cmp	r2, r1
 800c0b4:	4970      	ldr	r1, [pc, #448]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0b6:	eb73 0101 	sbcs.w	r1, r3, r1
 800c0ba:	f080 8351 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c0be:	487a      	ldr	r0, [pc, #488]	; (800c2a8 <sail_pixel_format_from_string+0x73c>)
 800c0c0:	496d      	ldr	r1, [pc, #436]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0c2:	428b      	cmp	r3, r1
 800c0c4:	bf08      	it	eq
 800c0c6:	4282      	cmpeq	r2, r0
 800c0c8:	f000 830a 	beq.w	800c6e0 <sail_pixel_format_from_string+0xb74>
 800c0cc:	4977      	ldr	r1, [pc, #476]	; (800c2ac <sail_pixel_format_from_string+0x740>)
 800c0ce:	428a      	cmp	r2, r1
 800c0d0:	4969      	ldr	r1, [pc, #420]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0d2:	eb73 0101 	sbcs.w	r1, r3, r1
 800c0d6:	f080 8343 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c0da:	4875      	ldr	r0, [pc, #468]	; (800c2b0 <sail_pixel_format_from_string+0x744>)
 800c0dc:	4966      	ldr	r1, [pc, #408]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0de:	428b      	cmp	r3, r1
 800c0e0:	bf08      	it	eq
 800c0e2:	4282      	cmpeq	r2, r0
 800c0e4:	f000 8304 	beq.w	800c6f0 <sail_pixel_format_from_string+0xb84>
 800c0e8:	4972      	ldr	r1, [pc, #456]	; (800c2b4 <sail_pixel_format_from_string+0x748>)
 800c0ea:	428a      	cmp	r2, r1
 800c0ec:	4962      	ldr	r1, [pc, #392]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0ee:	eb73 0101 	sbcs.w	r1, r3, r1
 800c0f2:	f080 8335 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c0f6:	4870      	ldr	r0, [pc, #448]	; (800c2b8 <sail_pixel_format_from_string+0x74c>)
 800c0f8:	495f      	ldr	r1, [pc, #380]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c0fa:	428b      	cmp	r3, r1
 800c0fc:	bf08      	it	eq
 800c0fe:	4282      	cmpeq	r2, r0
 800c100:	f000 830e 	beq.w	800c720 <sail_pixel_format_from_string+0xbb4>
 800c104:	496d      	ldr	r1, [pc, #436]	; (800c2bc <sail_pixel_format_from_string+0x750>)
 800c106:	428a      	cmp	r2, r1
 800c108:	495b      	ldr	r1, [pc, #364]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c10a:	eb73 0101 	sbcs.w	r1, r3, r1
 800c10e:	f080 8327 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c112:	486b      	ldr	r0, [pc, #428]	; (800c2c0 <sail_pixel_format_from_string+0x754>)
 800c114:	4958      	ldr	r1, [pc, #352]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c116:	428b      	cmp	r3, r1
 800c118:	bf08      	it	eq
 800c11a:	4282      	cmpeq	r2, r0
 800c11c:	f000 82e2 	beq.w	800c6e4 <sail_pixel_format_from_string+0xb78>
 800c120:	4968      	ldr	r1, [pc, #416]	; (800c2c4 <sail_pixel_format_from_string+0x758>)
 800c122:	428a      	cmp	r2, r1
 800c124:	4954      	ldr	r1, [pc, #336]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c126:	eb73 0101 	sbcs.w	r1, r3, r1
 800c12a:	f080 8319 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c12e:	4866      	ldr	r0, [pc, #408]	; (800c2c8 <sail_pixel_format_from_string+0x75c>)
 800c130:	4951      	ldr	r1, [pc, #324]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c132:	428b      	cmp	r3, r1
 800c134:	bf08      	it	eq
 800c136:	4282      	cmpeq	r2, r0
 800c138:	f000 82dc 	beq.w	800c6f4 <sail_pixel_format_from_string+0xb88>
 800c13c:	4963      	ldr	r1, [pc, #396]	; (800c2cc <sail_pixel_format_from_string+0x760>)
 800c13e:	428a      	cmp	r2, r1
 800c140:	494d      	ldr	r1, [pc, #308]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c142:	eb73 0101 	sbcs.w	r1, r3, r1
 800c146:	f080 830b 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c14a:	4861      	ldr	r0, [pc, #388]	; (800c2d0 <sail_pixel_format_from_string+0x764>)
 800c14c:	494a      	ldr	r1, [pc, #296]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c14e:	428b      	cmp	r3, r1
 800c150:	bf08      	it	eq
 800c152:	4282      	cmpeq	r2, r0
 800c154:	f000 82d0 	beq.w	800c6f8 <sail_pixel_format_from_string+0xb8c>
 800c158:	495e      	ldr	r1, [pc, #376]	; (800c2d4 <sail_pixel_format_from_string+0x768>)
 800c15a:	428a      	cmp	r2, r1
 800c15c:	4946      	ldr	r1, [pc, #280]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c15e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c162:	f080 82fd 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c166:	485c      	ldr	r0, [pc, #368]	; (800c2d8 <sail_pixel_format_from_string+0x76c>)
 800c168:	4943      	ldr	r1, [pc, #268]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c16a:	428b      	cmp	r3, r1
 800c16c:	bf08      	it	eq
 800c16e:	4282      	cmpeq	r2, r0
 800c170:	f000 82c4 	beq.w	800c6fc <sail_pixel_format_from_string+0xb90>
 800c174:	4959      	ldr	r1, [pc, #356]	; (800c2dc <sail_pixel_format_from_string+0x770>)
 800c176:	428a      	cmp	r2, r1
 800c178:	493f      	ldr	r1, [pc, #252]	; (800c278 <sail_pixel_format_from_string+0x70c>)
 800c17a:	eb73 0101 	sbcs.w	r1, r3, r1
 800c17e:	f080 82ef 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c182:	4857      	ldr	r0, [pc, #348]	; (800c2e0 <sail_pixel_format_from_string+0x774>)
 800c184:	4957      	ldr	r1, [pc, #348]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c186:	428b      	cmp	r3, r1
 800c188:	bf08      	it	eq
 800c18a:	4282      	cmpeq	r2, r0
 800c18c:	f000 829c 	beq.w	800c6c8 <sail_pixel_format_from_string+0xb5c>
 800c190:	4955      	ldr	r1, [pc, #340]	; (800c2e8 <sail_pixel_format_from_string+0x77c>)
 800c192:	428a      	cmp	r2, r1
 800c194:	4953      	ldr	r1, [pc, #332]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c196:	eb73 0101 	sbcs.w	r1, r3, r1
 800c19a:	f080 82e1 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c19e:	4853      	ldr	r0, [pc, #332]	; (800c2ec <sail_pixel_format_from_string+0x780>)
 800c1a0:	4950      	ldr	r1, [pc, #320]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1a2:	428b      	cmp	r3, r1
 800c1a4:	bf08      	it	eq
 800c1a6:	4282      	cmpeq	r2, r0
 800c1a8:	f000 8290 	beq.w	800c6cc <sail_pixel_format_from_string+0xb60>
 800c1ac:	4950      	ldr	r1, [pc, #320]	; (800c2f0 <sail_pixel_format_from_string+0x784>)
 800c1ae:	428a      	cmp	r2, r1
 800c1b0:	494c      	ldr	r1, [pc, #304]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1b2:	eb73 0101 	sbcs.w	r1, r3, r1
 800c1b6:	f080 82d3 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c1ba:	484e      	ldr	r0, [pc, #312]	; (800c2f4 <sail_pixel_format_from_string+0x788>)
 800c1bc:	4949      	ldr	r1, [pc, #292]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1be:	428b      	cmp	r3, r1
 800c1c0:	bf08      	it	eq
 800c1c2:	4282      	cmpeq	r2, r0
 800c1c4:	f000 827c 	beq.w	800c6c0 <sail_pixel_format_from_string+0xb54>
 800c1c8:	494b      	ldr	r1, [pc, #300]	; (800c2f8 <sail_pixel_format_from_string+0x78c>)
 800c1ca:	428a      	cmp	r2, r1
 800c1cc:	4945      	ldr	r1, [pc, #276]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1ce:	eb73 0101 	sbcs.w	r1, r3, r1
 800c1d2:	f080 82c5 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c1d6:	4849      	ldr	r0, [pc, #292]	; (800c2fc <sail_pixel_format_from_string+0x790>)
 800c1d8:	4942      	ldr	r1, [pc, #264]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1da:	428b      	cmp	r3, r1
 800c1dc:	bf08      	it	eq
 800c1de:	4282      	cmpeq	r2, r0
 800c1e0:	f000 8276 	beq.w	800c6d0 <sail_pixel_format_from_string+0xb64>
 800c1e4:	4946      	ldr	r1, [pc, #280]	; (800c300 <sail_pixel_format_from_string+0x794>)
 800c1e6:	428a      	cmp	r2, r1
 800c1e8:	493e      	ldr	r1, [pc, #248]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1ea:	eb73 0101 	sbcs.w	r1, r3, r1
 800c1ee:	f080 82b7 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c1f2:	4844      	ldr	r0, [pc, #272]	; (800c304 <sail_pixel_format_from_string+0x798>)
 800c1f4:	493b      	ldr	r1, [pc, #236]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c1f6:	428b      	cmp	r3, r1
 800c1f8:	bf08      	it	eq
 800c1fa:	4282      	cmpeq	r2, r0
 800c1fc:	f000 8262 	beq.w	800c6c4 <sail_pixel_format_from_string+0xb58>
 800c200:	4941      	ldr	r1, [pc, #260]	; (800c308 <sail_pixel_format_from_string+0x79c>)
 800c202:	428a      	cmp	r2, r1
 800c204:	4937      	ldr	r1, [pc, #220]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c206:	eb73 0101 	sbcs.w	r1, r3, r1
 800c20a:	f080 82a9 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c20e:	483f      	ldr	r0, [pc, #252]	; (800c30c <sail_pixel_format_from_string+0x7a0>)
 800c210:	4934      	ldr	r1, [pc, #208]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c212:	428b      	cmp	r3, r1
 800c214:	bf08      	it	eq
 800c216:	4282      	cmpeq	r2, r0
 800c218:	f000 825c 	beq.w	800c6d4 <sail_pixel_format_from_string+0xb68>
 800c21c:	493c      	ldr	r1, [pc, #240]	; (800c310 <sail_pixel_format_from_string+0x7a4>)
 800c21e:	428a      	cmp	r2, r1
 800c220:	4930      	ldr	r1, [pc, #192]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c222:	eb73 0101 	sbcs.w	r1, r3, r1
 800c226:	f080 829b 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c22a:	483a      	ldr	r0, [pc, #232]	; (800c314 <sail_pixel_format_from_string+0x7a8>)
 800c22c:	492d      	ldr	r1, [pc, #180]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c22e:	428b      	cmp	r3, r1
 800c230:	bf08      	it	eq
 800c232:	4282      	cmpeq	r2, r0
 800c234:	f000 8250 	beq.w	800c6d8 <sail_pixel_format_from_string+0xb6c>
 800c238:	4937      	ldr	r1, [pc, #220]	; (800c318 <sail_pixel_format_from_string+0x7ac>)
 800c23a:	428a      	cmp	r2, r1
 800c23c:	4929      	ldr	r1, [pc, #164]	; (800c2e4 <sail_pixel_format_from_string+0x778>)
 800c23e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c242:	e06b      	b.n	800c31c <sail_pixel_format_from_string+0x7b0>
 800c244:	354eae5b 	.word	0x354eae5b
 800c248:	726ab92d 	.word	0x726ab92d
 800c24c:	35469132 	.word	0x35469132
 800c250:	35469133 	.word	0x35469133
 800c254:	3545ea71 	.word	0x3545ea71
 800c258:	3545ea72 	.word	0x3545ea72
 800c25c:	3545ea5a 	.word	0x3545ea5a
 800c260:	3545ea5b 	.word	0x3545ea5b
 800c264:	35458b5a 	.word	0x35458b5a
 800c268:	35458b5b 	.word	0x35458b5b
 800c26c:	3545475a 	.word	0x3545475a
 800c270:	3545475b 	.word	0x3545475b
 800c274:	a4b2ec25 	.word	0xa4b2ec25
 800c278:	726ab92c 	.word	0x726ab92c
 800c27c:	a4b2ec26 	.word	0xa4b2ec26
 800c280:	9209a71d 	.word	0x9209a71d
 800c284:	9209a71e 	.word	0x9209a71e
 800c288:	49b9bb9e 	.word	0x49b9bb9e
 800c28c:	49b9bb9f 	.word	0x49b9bb9f
 800c290:	49b96ca3 	.word	0x49b96ca3
 800c294:	49b96ca4 	.word	0x49b96ca4
 800c298:	49b9208c 	.word	0x49b9208c
 800c29c:	49b9208d 	.word	0x49b9208d
 800c2a0:	49b8dc8c 	.word	0x49b8dc8c
 800c2a4:	49b8dc8d 	.word	0x49b8dc8d
 800c2a8:	49b5a6ec 	.word	0x49b5a6ec
 800c2ac:	49b5a6ed 	.word	0x49b5a6ed
 800c2b0:	49b5a6d5 	.word	0x49b5a6d5
 800c2b4:	49b5a6d6 	.word	0x49b5a6d6
 800c2b8:	49ad89ad 	.word	0x49ad89ad
 800c2bc:	49ad89ae 	.word	0x49ad89ae
 800c2c0:	49ace2ec 	.word	0x49ace2ec
 800c2c4:	49ace2ed 	.word	0x49ace2ed
 800c2c8:	49ace2d5 	.word	0x49ace2d5
 800c2cc:	49ace2d6 	.word	0x49ace2d6
 800c2d0:	49ac83d5 	.word	0x49ac83d5
 800c2d4:	49ac83d6 	.word	0x49ac83d6
 800c2d8:	49ac3fd5 	.word	0x49ac3fd5
 800c2dc:	49ac3fd6 	.word	0x49ac3fd6
 800c2e0:	b919498e 	.word	0xb919498e
 800c2e4:	726ab92b 	.word	0x726ab92b
 800c2e8:	b919498f 	.word	0xb919498f
 800c2ec:	b919058e 	.word	0xb919058e
 800c2f0:	b919058f 	.word	0xb919058f
 800c2f4:	b915cfee 	.word	0xb915cfee
 800c2f8:	b915cfef 	.word	0xb915cfef
 800c2fc:	b915cfd7 	.word	0xb915cfd7
 800c300:	b915cfd8 	.word	0xb915cfd8
 800c304:	b90d0bee 	.word	0xb90d0bee
 800c308:	b90d0bef 	.word	0xb90d0bef
 800c30c:	b90d0bd7 	.word	0xb90d0bd7
 800c310:	b90d0bd8 	.word	0xb90d0bd8
 800c314:	b90cacd7 	.word	0xb90cacd7
 800c318:	b90cacd8 	.word	0xb90cacd8
 800c31c:	f080 8220 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c320:	48b4      	ldr	r0, [pc, #720]	; (800c5f4 <sail_pixel_format_from_string+0xa88>)
 800c322:	49b5      	ldr	r1, [pc, #724]	; (800c5f8 <sail_pixel_format_from_string+0xa8c>)
 800c324:	428b      	cmp	r3, r1
 800c326:	bf08      	it	eq
 800c328:	4282      	cmpeq	r2, r0
 800c32a:	f000 81d7 	beq.w	800c6dc <sail_pixel_format_from_string+0xb70>
 800c32e:	49b3      	ldr	r1, [pc, #716]	; (800c5fc <sail_pixel_format_from_string+0xa90>)
 800c330:	428a      	cmp	r2, r1
 800c332:	49b1      	ldr	r1, [pc, #708]	; (800c5f8 <sail_pixel_format_from_string+0xa8c>)
 800c334:	eb73 0101 	sbcs.w	r1, r3, r1
 800c338:	f080 8212 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c33c:	48b0      	ldr	r0, [pc, #704]	; (800c600 <sail_pixel_format_from_string+0xa94>)
 800c33e:	49b1      	ldr	r1, [pc, #708]	; (800c604 <sail_pixel_format_from_string+0xa98>)
 800c340:	428b      	cmp	r3, r1
 800c342:	bf08      	it	eq
 800c344:	4282      	cmpeq	r2, r0
 800c346:	f000 814d 	beq.w	800c5e4 <sail_pixel_format_from_string+0xa78>
 800c34a:	49af      	ldr	r1, [pc, #700]	; (800c608 <sail_pixel_format_from_string+0xa9c>)
 800c34c:	428a      	cmp	r2, r1
 800c34e:	49ad      	ldr	r1, [pc, #692]	; (800c604 <sail_pixel_format_from_string+0xa98>)
 800c350:	eb73 0101 	sbcs.w	r1, r3, r1
 800c354:	f080 8204 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c358:	48ac      	ldr	r0, [pc, #688]	; (800c60c <sail_pixel_format_from_string+0xaa0>)
 800c35a:	49ad      	ldr	r1, [pc, #692]	; (800c610 <sail_pixel_format_from_string+0xaa4>)
 800c35c:	428b      	cmp	r3, r1
 800c35e:	bf08      	it	eq
 800c360:	4282      	cmpeq	r2, r0
 800c362:	f000 813d 	beq.w	800c5e0 <sail_pixel_format_from_string+0xa74>
 800c366:	49ab      	ldr	r1, [pc, #684]	; (800c614 <sail_pixel_format_from_string+0xaa8>)
 800c368:	428a      	cmp	r2, r1
 800c36a:	49a9      	ldr	r1, [pc, #676]	; (800c610 <sail_pixel_format_from_string+0xaa4>)
 800c36c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c370:	f080 81f6 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c374:	48a8      	ldr	r0, [pc, #672]	; (800c618 <sail_pixel_format_from_string+0xaac>)
 800c376:	49a9      	ldr	r1, [pc, #676]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c378:	428b      	cmp	r3, r1
 800c37a:	bf08      	it	eq
 800c37c:	4282      	cmpeq	r2, r0
 800c37e:	f000 81e5 	beq.w	800c74c <sail_pixel_format_from_string+0xbe0>
 800c382:	49a7      	ldr	r1, [pc, #668]	; (800c620 <sail_pixel_format_from_string+0xab4>)
 800c384:	428a      	cmp	r2, r1
 800c386:	49a5      	ldr	r1, [pc, #660]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c388:	eb73 0101 	sbcs.w	r1, r3, r1
 800c38c:	f080 81e8 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c390:	48a4      	ldr	r0, [pc, #656]	; (800c624 <sail_pixel_format_from_string+0xab8>)
 800c392:	49a2      	ldr	r1, [pc, #648]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c394:	428b      	cmp	r3, r1
 800c396:	bf08      	it	eq
 800c398:	4282      	cmpeq	r2, r0
 800c39a:	f000 818d 	beq.w	800c6b8 <sail_pixel_format_from_string+0xb4c>
 800c39e:	49a2      	ldr	r1, [pc, #648]	; (800c628 <sail_pixel_format_from_string+0xabc>)
 800c3a0:	428a      	cmp	r2, r1
 800c3a2:	499e      	ldr	r1, [pc, #632]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3a4:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3a8:	f080 81da 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c3ac:	489f      	ldr	r0, [pc, #636]	; (800c62c <sail_pixel_format_from_string+0xac0>)
 800c3ae:	499b      	ldr	r1, [pc, #620]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3b0:	428b      	cmp	r3, r1
 800c3b2:	bf08      	it	eq
 800c3b4:	4282      	cmpeq	r2, r0
 800c3b6:	f000 8181 	beq.w	800c6bc <sail_pixel_format_from_string+0xb50>
 800c3ba:	499d      	ldr	r1, [pc, #628]	; (800c630 <sail_pixel_format_from_string+0xac4>)
 800c3bc:	428a      	cmp	r2, r1
 800c3be:	4997      	ldr	r1, [pc, #604]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3c0:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3c4:	f080 81cc 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c3c8:	489a      	ldr	r0, [pc, #616]	; (800c634 <sail_pixel_format_from_string+0xac8>)
 800c3ca:	4994      	ldr	r1, [pc, #592]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3cc:	428b      	cmp	r3, r1
 800c3ce:	bf08      	it	eq
 800c3d0:	4282      	cmpeq	r2, r0
 800c3d2:	f000 81b9 	beq.w	800c748 <sail_pixel_format_from_string+0xbdc>
 800c3d6:	4998      	ldr	r1, [pc, #608]	; (800c638 <sail_pixel_format_from_string+0xacc>)
 800c3d8:	428a      	cmp	r2, r1
 800c3da:	4990      	ldr	r1, [pc, #576]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3dc:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3e0:	f080 81be 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c3e4:	4895      	ldr	r0, [pc, #596]	; (800c63c <sail_pixel_format_from_string+0xad0>)
 800c3e6:	498d      	ldr	r1, [pc, #564]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3e8:	428b      	cmp	r3, r1
 800c3ea:	bf08      	it	eq
 800c3ec:	4282      	cmpeq	r2, r0
 800c3ee:	f000 81a9 	beq.w	800c744 <sail_pixel_format_from_string+0xbd8>
 800c3f2:	4993      	ldr	r1, [pc, #588]	; (800c640 <sail_pixel_format_from_string+0xad4>)
 800c3f4:	428a      	cmp	r2, r1
 800c3f6:	4989      	ldr	r1, [pc, #548]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c3f8:	eb73 0101 	sbcs.w	r1, r3, r1
 800c3fc:	f080 81b0 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c400:	4890      	ldr	r0, [pc, #576]	; (800c644 <sail_pixel_format_from_string+0xad8>)
 800c402:	4986      	ldr	r1, [pc, #536]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c404:	428b      	cmp	r3, r1
 800c406:	bf08      	it	eq
 800c408:	4282      	cmpeq	r2, r0
 800c40a:	f000 8199 	beq.w	800c740 <sail_pixel_format_from_string+0xbd4>
 800c40e:	498e      	ldr	r1, [pc, #568]	; (800c648 <sail_pixel_format_from_string+0xadc>)
 800c410:	428a      	cmp	r2, r1
 800c412:	4982      	ldr	r1, [pc, #520]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c414:	eb73 0101 	sbcs.w	r1, r3, r1
 800c418:	f080 81a2 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c41c:	488b      	ldr	r0, [pc, #556]	; (800c64c <sail_pixel_format_from_string+0xae0>)
 800c41e:	497f      	ldr	r1, [pc, #508]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c420:	428b      	cmp	r3, r1
 800c422:	bf08      	it	eq
 800c424:	4282      	cmpeq	r2, r0
 800c426:	f000 8143 	beq.w	800c6b0 <sail_pixel_format_from_string+0xb44>
 800c42a:	4989      	ldr	r1, [pc, #548]	; (800c650 <sail_pixel_format_from_string+0xae4>)
 800c42c:	428a      	cmp	r2, r1
 800c42e:	497b      	ldr	r1, [pc, #492]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c430:	eb73 0101 	sbcs.w	r1, r3, r1
 800c434:	f080 8194 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c438:	4886      	ldr	r0, [pc, #536]	; (800c654 <sail_pixel_format_from_string+0xae8>)
 800c43a:	4978      	ldr	r1, [pc, #480]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c43c:	428b      	cmp	r3, r1
 800c43e:	bf08      	it	eq
 800c440:	4282      	cmpeq	r2, r0
 800c442:	f000 8137 	beq.w	800c6b4 <sail_pixel_format_from_string+0xb48>
 800c446:	4984      	ldr	r1, [pc, #528]	; (800c658 <sail_pixel_format_from_string+0xaec>)
 800c448:	428a      	cmp	r2, r1
 800c44a:	4974      	ldr	r1, [pc, #464]	; (800c61c <sail_pixel_format_from_string+0xab0>)
 800c44c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c450:	f080 8186 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c454:	4881      	ldr	r0, [pc, #516]	; (800c65c <sail_pixel_format_from_string+0xaf0>)
 800c456:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c45a:	428b      	cmp	r3, r1
 800c45c:	bf08      	it	eq
 800c45e:	4282      	cmpeq	r2, r0
 800c460:	f000 808c 	beq.w	800c57c <sail_pixel_format_from_string+0xa10>
 800c464:	497e      	ldr	r1, [pc, #504]	; (800c660 <sail_pixel_format_from_string+0xaf4>)
 800c466:	428a      	cmp	r2, r1
 800c468:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c46c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c470:	f080 8176 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c474:	487b      	ldr	r0, [pc, #492]	; (800c664 <sail_pixel_format_from_string+0xaf8>)
 800c476:	f240 6152 	movw	r1, #1618	; 0x652
 800c47a:	428b      	cmp	r3, r1
 800c47c:	bf08      	it	eq
 800c47e:	4282      	cmpeq	r2, r0
 800c480:	f000 8094 	beq.w	800c5ac <sail_pixel_format_from_string+0xa40>
 800c484:	4978      	ldr	r1, [pc, #480]	; (800c668 <sail_pixel_format_from_string+0xafc>)
 800c486:	428a      	cmp	r2, r1
 800c488:	f240 6152 	movw	r1, #1618	; 0x652
 800c48c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c490:	f080 8166 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c494:	4975      	ldr	r1, [pc, #468]	; (800c66c <sail_pixel_format_from_string+0xb00>)
 800c496:	2b31      	cmp	r3, #49	; 0x31
 800c498:	bf08      	it	eq
 800c49a:	428a      	cmpeq	r2, r1
 800c49c:	f000 8084 	beq.w	800c5a8 <sail_pixel_format_from_string+0xa3c>
 800c4a0:	4973      	ldr	r1, [pc, #460]	; (800c670 <sail_pixel_format_from_string+0xb04>)
 800c4a2:	428a      	cmp	r2, r1
 800c4a4:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c4a8:	f080 815a 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c4ac:	4971      	ldr	r1, [pc, #452]	; (800c674 <sail_pixel_format_from_string+0xb08>)
 800c4ae:	2b31      	cmp	r3, #49	; 0x31
 800c4b0:	bf08      	it	eq
 800c4b2:	428a      	cmpeq	r2, r1
 800c4b4:	d076      	beq.n	800c5a4 <sail_pixel_format_from_string+0xa38>
 800c4b6:	4970      	ldr	r1, [pc, #448]	; (800c678 <sail_pixel_format_from_string+0xb0c>)
 800c4b8:	428a      	cmp	r2, r1
 800c4ba:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c4be:	f080 814f 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c4c2:	496e      	ldr	r1, [pc, #440]	; (800c67c <sail_pixel_format_from_string+0xb10>)
 800c4c4:	2b31      	cmp	r3, #49	; 0x31
 800c4c6:	bf08      	it	eq
 800c4c8:	428a      	cmpeq	r2, r1
 800c4ca:	d069      	beq.n	800c5a0 <sail_pixel_format_from_string+0xa34>
 800c4cc:	496c      	ldr	r1, [pc, #432]	; (800c680 <sail_pixel_format_from_string+0xb14>)
 800c4ce:	428a      	cmp	r2, r1
 800c4d0:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c4d4:	f080 8144 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c4d8:	496a      	ldr	r1, [pc, #424]	; (800c684 <sail_pixel_format_from_string+0xb18>)
 800c4da:	2b31      	cmp	r3, #49	; 0x31
 800c4dc:	bf08      	it	eq
 800c4de:	428a      	cmpeq	r2, r1
 800c4e0:	d05c      	beq.n	800c59c <sail_pixel_format_from_string+0xa30>
 800c4e2:	4969      	ldr	r1, [pc, #420]	; (800c688 <sail_pixel_format_from_string+0xb1c>)
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c4ea:	f080 8139 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c4ee:	4967      	ldr	r1, [pc, #412]	; (800c68c <sail_pixel_format_from_string+0xb20>)
 800c4f0:	2b31      	cmp	r3, #49	; 0x31
 800c4f2:	bf08      	it	eq
 800c4f4:	428a      	cmpeq	r2, r1
 800c4f6:	d04f      	beq.n	800c598 <sail_pixel_format_from_string+0xa2c>
 800c4f8:	4965      	ldr	r1, [pc, #404]	; (800c690 <sail_pixel_format_from_string+0xb24>)
 800c4fa:	428a      	cmp	r2, r1
 800c4fc:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c500:	f080 812e 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c504:	4963      	ldr	r1, [pc, #396]	; (800c694 <sail_pixel_format_from_string+0xb28>)
 800c506:	2b31      	cmp	r3, #49	; 0x31
 800c508:	bf08      	it	eq
 800c50a:	428a      	cmpeq	r2, r1
 800c50c:	d042      	beq.n	800c594 <sail_pixel_format_from_string+0xa28>
 800c50e:	4962      	ldr	r1, [pc, #392]	; (800c698 <sail_pixel_format_from_string+0xb2c>)
 800c510:	428a      	cmp	r2, r1
 800c512:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800c516:	f080 8123 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c51a:	4960      	ldr	r1, [pc, #384]	; (800c69c <sail_pixel_format_from_string+0xb30>)
 800c51c:	428a      	cmp	r2, r1
 800c51e:	f173 0101 	sbcs.w	r1, r3, #1
 800c522:	d225      	bcs.n	800c570 <sail_pixel_format_from_string+0xa04>
 800c524:	495e      	ldr	r1, [pc, #376]	; (800c6a0 <sail_pixel_format_from_string+0xb34>)
 800c526:	428a      	cmp	r2, r1
 800c528:	f173 0101 	sbcs.w	r1, r3, #1
 800c52c:	f0c0 8118 	bcc.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c530:	495c      	ldr	r1, [pc, #368]	; (800c6a4 <sail_pixel_format_from_string+0xb38>)
 800c532:	1854      	adds	r4, r2, r1
 800c534:	f163 0501 	sbc.w	r5, r3, #1
 800c538:	2c08      	cmp	r4, #8
 800c53a:	f175 0300 	sbcs.w	r3, r5, #0
 800c53e:	f080 810f 	bcs.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c542:	2c07      	cmp	r4, #7
 800c544:	f200 810c 	bhi.w	800c760 <sail_pixel_format_from_string+0xbf4>
 800c548:	a301      	add	r3, pc, #4	; (adr r3, 800c550 <sail_pixel_format_from_string+0x9e4>)
 800c54a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800c54e:	bf00      	nop
 800c550:	0800c581 	.word	0x0800c581
 800c554:	0800c585 	.word	0x0800c585
 800c558:	0800c761 	.word	0x0800c761
 800c55c:	0800c589 	.word	0x0800c589
 800c560:	0800c761 	.word	0x0800c761
 800c564:	0800c761 	.word	0x0800c761
 800c568:	0800c761 	.word	0x0800c761
 800c56c:	0800c58d 	.word	0x0800c58d
 800c570:	494d      	ldr	r1, [pc, #308]	; (800c6a8 <sail_pixel_format_from_string+0xb3c>)
 800c572:	2b31      	cmp	r3, #49	; 0x31
 800c574:	bf08      	it	eq
 800c576:	428a      	cmpeq	r2, r1
 800c578:	d00a      	beq.n	800c590 <sail_pixel_format_from_string+0xa24>
 800c57a:	e0f1      	b.n	800c760 <sail_pixel_format_from_string+0xbf4>
        case UINT64_C(229442760833397):      return SAIL_PIXEL_FORMAT_UNKNOWN;
 800c57c:	2300      	movs	r3, #0
 800c57e:	e0f0      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(6383902552):           return SAIL_PIXEL_FORMAT_BPP1;
 800c580:	2301      	movs	r3, #1
 800c582:	e0ee      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902553):           return SAIL_PIXEL_FORMAT_BPP2;
 800c584:	2302      	movs	r3, #2
 800c586:	e0ec      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902555):           return SAIL_PIXEL_FORMAT_BPP4;
 800c588:	2303      	movs	r3, #3
 800c58a:	e0ea      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6383902559):           return SAIL_PIXEL_FORMAT_BPP8;
 800c58c:	2304      	movs	r3, #4
 800c58e:	e0e8      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784270):         return SAIL_PIXEL_FORMAT_BPP16;
 800c590:	2305      	movs	r3, #5
 800c592:	e0e6      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784301):         return SAIL_PIXEL_FORMAT_BPP24;
 800c594:	2306      	movs	r3, #6
 800c596:	e0e4      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784332):         return SAIL_PIXEL_FORMAT_BPP32;
 800c598:	2307      	movs	r3, #7
 800c59a:	e0e2      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784371):         return SAIL_PIXEL_FORMAT_BPP48;
 800c59c:	2308      	movs	r3, #8
 800c59e:	e0e0      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784433):         return SAIL_PIXEL_FORMAT_BPP64;
 800c5a0:	2309      	movs	r3, #9
 800c5a2:	e0de      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784464):         return SAIL_PIXEL_FORMAT_BPP72;
 800c5a4:	230a      	movs	r3, #10
 800c5a6:	e0dc      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(210668784534):         return SAIL_PIXEL_FORMAT_BPP96;
 800c5a8:	230b      	movs	r3, #11
 800c5aa:	e0da      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(6952069880834):        return SAIL_PIXEL_FORMAT_BPP128;
 800c5ac:	230c      	movs	r3, #12
 800c5ae:	e0d8      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13257949335914442470): return SAIL_PIXEL_FORMAT_BPP1_INDEXED;
 800c5b0:	230d      	movs	r3, #13
 800c5b2:	e0d6      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257950742323060711): return SAIL_PIXEL_FORMAT_BPP2_INDEXED;
 800c5b4:	230e      	movs	r3, #14
 800c5b6:	e0d4      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257953555140297193): return SAIL_PIXEL_FORMAT_BPP4_INDEXED;
 800c5b8:	230f      	movs	r3, #15
 800c5ba:	e0d2      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257959180774770157): return SAIL_PIXEL_FORMAT_BPP8_INDEXED;
 800c5bc:	2310      	movs	r3, #16
 800c5be:	e0d0      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237225848150241308): return SAIL_PIXEL_FORMAT_BPP16_INDEXED;
 800c5c0:	2311      	movs	r3, #17
 800c5c2:	e0ce      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(12552958524517323328): return SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE;
 800c5c4:	2312      	movs	r3, #18
 800c5c6:	e0cc      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12554490103502587777): return SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE;
 800c5c8:	2313      	movs	r3, #19
 800c5ca:	e0ca      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12557553261473116675): return SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE;
 800c5cc:	2314      	movs	r3, #20
 800c5ce:	e0c8      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12563679577414174471): return SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE;
 800c5d0:	2315      	movs	r3, #21
 800c5d2:	e0c6      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8431824423011809526):  return SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE;
 800c5d4:	2316      	movs	r3, #22
 800c5d6:	e0c4      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(9367569596161118198):  return SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA;
 800c5d8:	2317      	movs	r3, #23
 800c5da:	e0c2      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(12512997289017890810): return SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA;
 800c5dc:	2318      	movs	r3, #24
 800c5de:	e0c0      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(3292614999547101481):  return SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA;
 800c5e0:	2319      	movs	r3, #25
 800c5e2:	e0be      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(5929884054553197927):  return SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA;
 800c5e4:	231a      	movs	r3, #26
 800c5e6:	e0bc      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13257949683479278997): return SAIL_PIXEL_FORMAT_BPP16_RGB555;
 800c5e8:	231b      	movs	r3, #27
 800c5ea:	e0ba      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257949682853687701): return SAIL_PIXEL_FORMAT_BPP16_BGR555;
 800c5ec:	231c      	movs	r3, #28
 800c5ee:	e0b8      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13257949683479279030): return SAIL_PIXEL_FORMAT_BPP16_RGB565;
 800c5f0:	231d      	movs	r3, #29
 800c5f2:	e0b6      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
 800c5f4:	b90c68d7 	.word	0xb90c68d7
 800c5f8:	726ab92b 	.word	0x726ab92b
 800c5fc:	b90c68d8 	.word	0xb90c68d8
 800c600:	36e57d67 	.word	0x36e57d67
 800c604:	524b2e21 	.word	0x524b2e21
 800c608:	36e57d68 	.word	0x36e57d68
 800c60c:	a620c129 	.word	0xa620c129
 800c610:	2db1b7e5 	.word	0x2db1b7e5
 800c614:	a620c12a 	.word	0xa620c12a
 800c618:	5a52ff64 	.word	0x5a52ff64
 800c61c:	03779901 	.word	0x03779901
 800c620:	5a52ff65 	.word	0x5a52ff65
 800c624:	5a52dfbb 	.word	0x5a52dfbb
 800c628:	5a52dfbc 	.word	0x5a52dfbc
 800c62c:	5a529bbb 	.word	0x5a529bbb
 800c630:	5a529bbc 	.word	0x5a529bbc
 800c634:	57d9a5c1 	.word	0x57d9a5c1
 800c638:	57d9a5c2 	.word	0x57d9a5c2
 800c63c:	576d12bb 	.word	0x576d12bb
 800c640:	576d12bc 	.word	0x576d12bc
 800c644:	55604c1e 	.word	0x55604c1e
 800c648:	55604c1f 	.word	0x55604c1f
 800c64c:	55602c75 	.word	0x55602c75
 800c650:	55602c76 	.word	0x55602c76
 800c654:	555fe875 	.word	0x555fe875
 800c658:	555fe876 	.word	0x555fe876
 800c65c:	4e417975 	.word	0x4e417975
 800c660:	4e417976 	.word	0x4e417976
 800c664:	a7a7dc02 	.word	0xa7a7dc02
 800c668:	a7a7dc03 	.word	0xa7a7dc03
 800c66c:	0cd68b96 	.word	0x0cd68b96
 800c670:	0cd68b97 	.word	0x0cd68b97
 800c674:	0cd68b50 	.word	0x0cd68b50
 800c678:	0cd68b51 	.word	0x0cd68b51
 800c67c:	0cd68b31 	.word	0x0cd68b31
 800c680:	0cd68b32 	.word	0x0cd68b32
 800c684:	0cd68af3 	.word	0x0cd68af3
 800c688:	0cd68af4 	.word	0x0cd68af4
 800c68c:	0cd68acc 	.word	0x0cd68acc
 800c690:	0cd68acd 	.word	0x0cd68acd
 800c694:	0cd68aad 	.word	0x0cd68aad
 800c698:	0cd68aae 	.word	0x0cd68aae
 800c69c:	7c829f60 	.word	0x7c829f60
 800c6a0:	7c829f58 	.word	0x7c829f58
 800c6a4:	837d60a8 	.word	0x837d60a8
 800c6a8:	0cd68a8e 	.word	0x0cd68a8e
        case UINT64_C(13257949682853687734): return SAIL_PIXEL_FORMAT_BPP16_BGR565;
 800c6ac:	231e      	movs	r3, #30
 800c6ae:	e058      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535348735093):   return SAIL_PIXEL_FORMAT_BPP24_RGB;
 800c6b0:	231f      	movs	r3, #31
 800c6b2:	e056      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535348717685):   return SAIL_PIXEL_FORMAT_BPP24_BGR;
 800c6b4:	2320      	movs	r3, #32
 800c6b6:	e054      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535431749563):   return SAIL_PIXEL_FORMAT_BPP48_RGB;
 800c6b8:	2321      	movs	r3, #33	; 0x21
 800c6ba:	e052      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535431732155):   return SAIL_PIXEL_FORMAT_BPP48_BGR;
 800c6bc:	2322      	movs	r3, #34	; 0x22
 800c6be:	e050      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605665295060974):  return SAIL_PIXEL_FORMAT_BPP16_RGBX;
 800c6c0:	2323      	movs	r3, #35	; 0x23
 800c6c2:	e04e      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294486510):  return SAIL_PIXEL_FORMAT_BPP16_BGRX;
 800c6c4:	2324      	movs	r3, #36	; 0x24
 800c6c6:	e04c      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295288718):  return SAIL_PIXEL_FORMAT_BPP16_XRGB;
 800c6c8:	2325      	movs	r3, #37	; 0x25
 800c6ca:	e04a      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295271310):  return SAIL_PIXEL_FORMAT_BPP16_XBGR;
 800c6cc:	2326      	movs	r3, #38	; 0x26
 800c6ce:	e048      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665295060951):  return SAIL_PIXEL_FORMAT_BPP16_RGBA;
 800c6d0:	2327      	movs	r3, #39	; 0x27
 800c6d2:	e046      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294486487):  return SAIL_PIXEL_FORMAT_BPP16_BGRA;
 800c6d4:	2328      	movs	r3, #40	; 0x28
 800c6d6:	e044      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294462167):  return SAIL_PIXEL_FORMAT_BPP16_ARGB;
 800c6d8:	2329      	movs	r3, #41	; 0x29
 800c6da:	e042      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605665294444759):  return SAIL_PIXEL_FORMAT_BPP16_ABGR;
 800c6dc:	232a      	movs	r3, #42	; 0x2a
 800c6de:	e040      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721455340):  return SAIL_PIXEL_FORMAT_BPP32_RGBX;
 800c6e0:	232b      	movs	r3, #43	; 0x2b
 800c6e2:	e03e      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720880876):  return SAIL_PIXEL_FORMAT_BPP32_BGRX;
 800c6e4:	232c      	movs	r3, #44	; 0x2c
 800c6e6:	e03c      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721683084):  return SAIL_PIXEL_FORMAT_BPP32_XRGB;
 800c6e8:	232d      	movs	r3, #45	; 0x2d
 800c6ea:	e03a      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721665676):  return SAIL_PIXEL_FORMAT_BPP32_XBGR;
 800c6ec:	232e      	movs	r3, #46	; 0x2e
 800c6ee:	e038      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667721455317):  return SAIL_PIXEL_FORMAT_BPP32_RGBA;
 800c6f0:	232f      	movs	r3, #47	; 0x2f
 800c6f2:	e036      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720880853):  return SAIL_PIXEL_FORMAT_BPP32_BGRA;
 800c6f4:	2330      	movs	r3, #48	; 0x30
 800c6f6:	e034      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720856533):  return SAIL_PIXEL_FORMAT_BPP32_ARGB;
 800c6f8:	2331      	movs	r3, #49	; 0x31
 800c6fa:	e032      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605667720839125):  return SAIL_PIXEL_FORMAT_BPP32_ABGR;
 800c6fc:	2332      	movs	r3, #50	; 0x32
 800c6fe:	e030      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605671674130033):  return SAIL_PIXEL_FORMAT_BPP64_RGBX;
 800c700:	2333      	movs	r3, #51	; 0x33
 800c702:	e02e      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673555569):  return SAIL_PIXEL_FORMAT_BPP64_BGRX;
 800c704:	2334      	movs	r3, #52	; 0x34
 800c706:	e02c      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674357777):  return SAIL_PIXEL_FORMAT_BPP64_XRGB;
 800c708:	2335      	movs	r3, #53	; 0x35
 800c70a:	e02a      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674340369):  return SAIL_PIXEL_FORMAT_BPP64_XBGR;
 800c70c:	2336      	movs	r3, #54	; 0x36
 800c70e:	e028      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674130010):  return SAIL_PIXEL_FORMAT_BPP64_RGBA;
 800c710:	2337      	movs	r3, #55	; 0x37
 800c712:	e026      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673555546):  return SAIL_PIXEL_FORMAT_BPP64_BGRA;
 800c714:	2338      	movs	r3, #56	; 0x38
 800c716:	e024      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673531226):  return SAIL_PIXEL_FORMAT_BPP64_ARGB;
 800c718:	2339      	movs	r3, #57	; 0x39
 800c71a:	e022      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673513818):  return SAIL_PIXEL_FORMAT_BPP64_ABGR;
 800c71c:	233a      	movs	r3, #58	; 0x3a
 800c71e:	e020      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667720923565):  return SAIL_PIXEL_FORMAT_BPP32_CMYK;
 800c720:	233b      	movs	r3, #59	; 0x3b
 800c722:	e01e      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671673598258):  return SAIL_PIXEL_FORMAT_BPP64_CMYK;
 800c724:	233c      	movs	r3, #60	; 0x3c
 800c726:	e01c      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13817569962846953645): return SAIL_PIXEL_FORMAT_BPP24_YCBCR;
 800c728:	233d      	movs	r3, #61	; 0x3d
 800c72a:	e01a      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721702563):  return SAIL_PIXEL_FORMAT_BPP32_YCCK;
 800c72c:	233e      	movs	r3, #62	; 0x3e
 800c72e:	e018      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13237269438873232231): return SAIL_PIXEL_FORMAT_BPP24_CIE_LAB;
 800c730:	233f      	movs	r3, #63	; 0x3f
 800c732:	e016      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237356636207563173): return SAIL_PIXEL_FORMAT_BPP40_CIE_LAB;
 800c734:	2340      	movs	r3, #64	; 0x40
 800c736:	e014      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(13237269438873232911): return SAIL_PIXEL_FORMAT_BPP24_CIE_LUV;
 800c738:	2341      	movs	r3, #65	; 0x41
 800c73a:	e012      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(13237356636207563853): return SAIL_PIXEL_FORMAT_BPP40_CIE_LUV;
 800c73c:	2342      	movs	r3, #66	; 0x42
 800c73e:	e010      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(249836535348743198):   return SAIL_PIXEL_FORMAT_BPP24_YUV;
 800c740:	2343      	movs	r3, #67	; 0x43
 800c742:	e00e      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535383134907):   return SAIL_PIXEL_FORMAT_BPP30_YUV;
 800c744:	2344      	movs	r3, #68	; 0x44
 800c746:	e00c      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535390250433):   return SAIL_PIXEL_FORMAT_BPP36_YUV;
 800c748:	2345      	movs	r3, #69	; 0x45
 800c74a:	e00a      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(249836535431757668):   return SAIL_PIXEL_FORMAT_BPP48_YUV;
 800c74c:	2346      	movs	r3, #70	; 0x46
 800c74e:	e008      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>

        case UINT64_C(8244605667721722782):  return SAIL_PIXEL_FORMAT_BPP32_YUVA;
 800c750:	2347      	movs	r3, #71	; 0x47
 800c752:	e006      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605668934919965):  return SAIL_PIXEL_FORMAT_BPP40_YUVA;
 800c754:	2348      	movs	r3, #72	; 0x48
 800c756:	e004      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605669248003109):  return SAIL_PIXEL_FORMAT_BPP48_YUVA;
 800c758:	2349      	movs	r3, #73	; 0x49
 800c75a:	e002      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
        case UINT64_C(8244605671674397475):  return SAIL_PIXEL_FORMAT_BPP64_YUVA;
 800c75c:	234a      	movs	r3, #74	; 0x4a
 800c75e:	e000      	b.n	800c762 <sail_pixel_format_from_string+0xbf6>
    }

    return SAIL_PIXEL_FORMAT_UNKNOWN;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bdb0      	pop	{r4, r5, r7, pc}
 800c76a:	bf00      	nop

0800c76c <sail_compression_from_string>:
    }

    return NULL;
}

enum SailCompression sail_compression_from_string(const char *str) {
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800c774:	f107 0308 	add.w	r3, r7, #8
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f004 f8c8 	bl	8010910 <sail_string_hash>
 800c780:	4603      	mov	r3, r0
 800c782:	82fb      	strh	r3, [r7, #22]
 800c784:	8afb      	ldrh	r3, [r7, #22]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf14      	ite	ne
 800c78a:	2301      	movne	r3, #1
 800c78c:	2300      	moveq	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <sail_compression_from_string+0x2c>
 800c794:	2300      	movs	r3, #0
 800c796:	e2b0      	b.n	800ccfa <sail_compression_from_string+0x58e>
                        /* cleanup */ return SAIL_COMPRESSION_UNKNOWN);

    switch (hash) {
 800c798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c79c:	48ba      	ldr	r0, [pc, #744]	; (800ca88 <sail_compression_from_string+0x31c>)
 800c79e:	49bb      	ldr	r1, [pc, #748]	; (800ca8c <sail_compression_from_string+0x320>)
 800c7a0:	428b      	cmp	r3, r1
 800c7a2:	bf08      	it	eq
 800c7a4:	4282      	cmpeq	r2, r0
 800c7a6:	f000 82a1 	beq.w	800ccec <sail_compression_from_string+0x580>
 800c7aa:	49b9      	ldr	r1, [pc, #740]	; (800ca90 <sail_compression_from_string+0x324>)
 800c7ac:	428a      	cmp	r2, r1
 800c7ae:	49b7      	ldr	r1, [pc, #732]	; (800ca8c <sail_compression_from_string+0x320>)
 800c7b0:	eb73 0101 	sbcs.w	r1, r3, r1
 800c7b4:	f080 82a0 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c7b8:	48b6      	ldr	r0, [pc, #728]	; (800ca94 <sail_compression_from_string+0x328>)
 800c7ba:	49b7      	ldr	r1, [pc, #732]	; (800ca98 <sail_compression_from_string+0x32c>)
 800c7bc:	428b      	cmp	r3, r1
 800c7be:	bf08      	it	eq
 800c7c0:	4282      	cmpeq	r2, r0
 800c7c2:	f000 8251 	beq.w	800cc68 <sail_compression_from_string+0x4fc>
 800c7c6:	49b5      	ldr	r1, [pc, #724]	; (800ca9c <sail_compression_from_string+0x330>)
 800c7c8:	428a      	cmp	r2, r1
 800c7ca:	49b3      	ldr	r1, [pc, #716]	; (800ca98 <sail_compression_from_string+0x32c>)
 800c7cc:	eb73 0101 	sbcs.w	r1, r3, r1
 800c7d0:	f080 8292 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c7d4:	48b2      	ldr	r0, [pc, #712]	; (800caa0 <sail_compression_from_string+0x334>)
 800c7d6:	49b3      	ldr	r1, [pc, #716]	; (800caa4 <sail_compression_from_string+0x338>)
 800c7d8:	428b      	cmp	r3, r1
 800c7da:	bf08      	it	eq
 800c7dc:	4282      	cmpeq	r2, r0
 800c7de:	f000 8275 	beq.w	800cccc <sail_compression_from_string+0x560>
 800c7e2:	49b1      	ldr	r1, [pc, #708]	; (800caa8 <sail_compression_from_string+0x33c>)
 800c7e4:	428a      	cmp	r2, r1
 800c7e6:	49af      	ldr	r1, [pc, #700]	; (800caa4 <sail_compression_from_string+0x338>)
 800c7e8:	eb73 0101 	sbcs.w	r1, r3, r1
 800c7ec:	f080 8284 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c7f0:	48ae      	ldr	r0, [pc, #696]	; (800caac <sail_compression_from_string+0x340>)
 800c7f2:	49af      	ldr	r1, [pc, #700]	; (800cab0 <sail_compression_from_string+0x344>)
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	bf08      	it	eq
 800c7f8:	4282      	cmpeq	r2, r0
 800c7fa:	f000 823f 	beq.w	800cc7c <sail_compression_from_string+0x510>
 800c7fe:	49ad      	ldr	r1, [pc, #692]	; (800cab4 <sail_compression_from_string+0x348>)
 800c800:	428a      	cmp	r2, r1
 800c802:	49ab      	ldr	r1, [pc, #684]	; (800cab0 <sail_compression_from_string+0x344>)
 800c804:	eb73 0101 	sbcs.w	r1, r3, r1
 800c808:	f080 8276 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c80c:	48aa      	ldr	r0, [pc, #680]	; (800cab8 <sail_compression_from_string+0x34c>)
 800c80e:	49a8      	ldr	r1, [pc, #672]	; (800cab0 <sail_compression_from_string+0x344>)
 800c810:	428b      	cmp	r3, r1
 800c812:	bf08      	it	eq
 800c814:	4282      	cmpeq	r2, r0
 800c816:	f000 822d 	beq.w	800cc74 <sail_compression_from_string+0x508>
 800c81a:	49a8      	ldr	r1, [pc, #672]	; (800cabc <sail_compression_from_string+0x350>)
 800c81c:	428a      	cmp	r2, r1
 800c81e:	49a4      	ldr	r1, [pc, #656]	; (800cab0 <sail_compression_from_string+0x344>)
 800c820:	eb73 0101 	sbcs.w	r1, r3, r1
 800c824:	f080 8268 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c828:	48a5      	ldr	r0, [pc, #660]	; (800cac0 <sail_compression_from_string+0x354>)
 800c82a:	49a1      	ldr	r1, [pc, #644]	; (800cab0 <sail_compression_from_string+0x344>)
 800c82c:	428b      	cmp	r3, r1
 800c82e:	bf08      	it	eq
 800c830:	4282      	cmpeq	r2, r0
 800c832:	f000 821d 	beq.w	800cc70 <sail_compression_from_string+0x504>
 800c836:	49a0      	ldr	r1, [pc, #640]	; (800cab8 <sail_compression_from_string+0x34c>)
 800c838:	428a      	cmp	r2, r1
 800c83a:	499d      	ldr	r1, [pc, #628]	; (800cab0 <sail_compression_from_string+0x344>)
 800c83c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c840:	f080 825a 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c844:	489f      	ldr	r0, [pc, #636]	; (800cac4 <sail_compression_from_string+0x358>)
 800c846:	49a0      	ldr	r1, [pc, #640]	; (800cac8 <sail_compression_from_string+0x35c>)
 800c848:	428b      	cmp	r3, r1
 800c84a:	bf08      	it	eq
 800c84c:	4282      	cmpeq	r2, r0
 800c84e:	f000 8247 	beq.w	800cce0 <sail_compression_from_string+0x574>
 800c852:	499e      	ldr	r1, [pc, #632]	; (800cacc <sail_compression_from_string+0x360>)
 800c854:	428a      	cmp	r2, r1
 800c856:	499c      	ldr	r1, [pc, #624]	; (800cac8 <sail_compression_from_string+0x35c>)
 800c858:	eb73 0101 	sbcs.w	r1, r3, r1
 800c85c:	f080 824c 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c860:	489b      	ldr	r0, [pc, #620]	; (800cad0 <sail_compression_from_string+0x364>)
 800c862:	499c      	ldr	r1, [pc, #624]	; (800cad4 <sail_compression_from_string+0x368>)
 800c864:	428b      	cmp	r3, r1
 800c866:	bf08      	it	eq
 800c868:	4282      	cmpeq	r2, r0
 800c86a:	f000 8231 	beq.w	800ccd0 <sail_compression_from_string+0x564>
 800c86e:	499a      	ldr	r1, [pc, #616]	; (800cad8 <sail_compression_from_string+0x36c>)
 800c870:	428a      	cmp	r2, r1
 800c872:	4998      	ldr	r1, [pc, #608]	; (800cad4 <sail_compression_from_string+0x368>)
 800c874:	eb73 0101 	sbcs.w	r1, r3, r1
 800c878:	f080 823e 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c87c:	4897      	ldr	r0, [pc, #604]	; (800cadc <sail_compression_from_string+0x370>)
 800c87e:	4998      	ldr	r1, [pc, #608]	; (800cae0 <sail_compression_from_string+0x374>)
 800c880:	428b      	cmp	r3, r1
 800c882:	bf08      	it	eq
 800c884:	4282      	cmpeq	r2, r0
 800c886:	f000 820f 	beq.w	800cca8 <sail_compression_from_string+0x53c>
 800c88a:	4996      	ldr	r1, [pc, #600]	; (800cae4 <sail_compression_from_string+0x378>)
 800c88c:	428a      	cmp	r2, r1
 800c88e:	4994      	ldr	r1, [pc, #592]	; (800cae0 <sail_compression_from_string+0x374>)
 800c890:	eb73 0101 	sbcs.w	r1, r3, r1
 800c894:	f080 8230 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c898:	4893      	ldr	r0, [pc, #588]	; (800cae8 <sail_compression_from_string+0x37c>)
 800c89a:	4994      	ldr	r1, [pc, #592]	; (800caec <sail_compression_from_string+0x380>)
 800c89c:	428b      	cmp	r3, r1
 800c89e:	bf08      	it	eq
 800c8a0:	4282      	cmpeq	r2, r0
 800c8a2:	f000 81f7 	beq.w	800cc94 <sail_compression_from_string+0x528>
 800c8a6:	4992      	ldr	r1, [pc, #584]	; (800caf0 <sail_compression_from_string+0x384>)
 800c8a8:	428a      	cmp	r2, r1
 800c8aa:	4990      	ldr	r1, [pc, #576]	; (800caec <sail_compression_from_string+0x380>)
 800c8ac:	eb73 0101 	sbcs.w	r1, r3, r1
 800c8b0:	f080 8222 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c8b4:	488f      	ldr	r0, [pc, #572]	; (800caf4 <sail_compression_from_string+0x388>)
 800c8b6:	4990      	ldr	r1, [pc, #576]	; (800caf8 <sail_compression_from_string+0x38c>)
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	bf08      	it	eq
 800c8bc:	4282      	cmpeq	r2, r0
 800c8be:	f000 81db 	beq.w	800cc78 <sail_compression_from_string+0x50c>
 800c8c2:	498e      	ldr	r1, [pc, #568]	; (800cafc <sail_compression_from_string+0x390>)
 800c8c4:	428a      	cmp	r2, r1
 800c8c6:	498c      	ldr	r1, [pc, #560]	; (800caf8 <sail_compression_from_string+0x38c>)
 800c8c8:	eb73 0101 	sbcs.w	r1, r3, r1
 800c8cc:	f080 8214 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c8d0:	488b      	ldr	r0, [pc, #556]	; (800cb00 <sail_compression_from_string+0x394>)
 800c8d2:	498c      	ldr	r1, [pc, #560]	; (800cb04 <sail_compression_from_string+0x398>)
 800c8d4:	428b      	cmp	r3, r1
 800c8d6:	bf08      	it	eq
 800c8d8:	4282      	cmpeq	r2, r0
 800c8da:	f000 81f5 	beq.w	800ccc8 <sail_compression_from_string+0x55c>
 800c8de:	498a      	ldr	r1, [pc, #552]	; (800cb08 <sail_compression_from_string+0x39c>)
 800c8e0:	428a      	cmp	r2, r1
 800c8e2:	4988      	ldr	r1, [pc, #544]	; (800cb04 <sail_compression_from_string+0x398>)
 800c8e4:	eb73 0101 	sbcs.w	r1, r3, r1
 800c8e8:	f080 8206 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c8ec:	4887      	ldr	r0, [pc, #540]	; (800cb0c <sail_compression_from_string+0x3a0>)
 800c8ee:	4988      	ldr	r1, [pc, #544]	; (800cb10 <sail_compression_from_string+0x3a4>)
 800c8f0:	428b      	cmp	r3, r1
 800c8f2:	bf08      	it	eq
 800c8f4:	4282      	cmpeq	r2, r0
 800c8f6:	f000 81c5 	beq.w	800cc84 <sail_compression_from_string+0x518>
 800c8fa:	4986      	ldr	r1, [pc, #536]	; (800cb14 <sail_compression_from_string+0x3a8>)
 800c8fc:	428a      	cmp	r2, r1
 800c8fe:	4984      	ldr	r1, [pc, #528]	; (800cb10 <sail_compression_from_string+0x3a4>)
 800c900:	eb73 0101 	sbcs.w	r1, r3, r1
 800c904:	f080 81f8 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c908:	4883      	ldr	r0, [pc, #524]	; (800cb18 <sail_compression_from_string+0x3ac>)
 800c90a:	4981      	ldr	r1, [pc, #516]	; (800cb10 <sail_compression_from_string+0x3a4>)
 800c90c:	428b      	cmp	r3, r1
 800c90e:	bf08      	it	eq
 800c910:	4282      	cmpeq	r2, r0
 800c912:	f000 81b5 	beq.w	800cc80 <sail_compression_from_string+0x514>
 800c916:	4981      	ldr	r1, [pc, #516]	; (800cb1c <sail_compression_from_string+0x3b0>)
 800c918:	428a      	cmp	r2, r1
 800c91a:	497d      	ldr	r1, [pc, #500]	; (800cb10 <sail_compression_from_string+0x3a4>)
 800c91c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c920:	f080 81ea 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c924:	487e      	ldr	r0, [pc, #504]	; (800cb20 <sail_compression_from_string+0x3b4>)
 800c926:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c92a:	428b      	cmp	r3, r1
 800c92c:	bf08      	it	eq
 800c92e:	4282      	cmpeq	r2, r0
 800c930:	f000 8196 	beq.w	800cc60 <sail_compression_from_string+0x4f4>
 800c934:	497b      	ldr	r1, [pc, #492]	; (800cb24 <sail_compression_from_string+0x3b8>)
 800c936:	428a      	cmp	r2, r1
 800c938:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800c93c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c940:	f080 81da 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c944:	4878      	ldr	r0, [pc, #480]	; (800cb28 <sail_compression_from_string+0x3bc>)
 800c946:	f24d 01ac 	movw	r1, #53420	; 0xd0ac
 800c94a:	428b      	cmp	r3, r1
 800c94c:	bf08      	it	eq
 800c94e:	4282      	cmpeq	r2, r0
 800c950:	f000 81c4 	beq.w	800ccdc <sail_compression_from_string+0x570>
 800c954:	4975      	ldr	r1, [pc, #468]	; (800cb2c <sail_compression_from_string+0x3c0>)
 800c956:	428a      	cmp	r2, r1
 800c958:	f24d 01ac 	movw	r1, #53420	; 0xd0ac
 800c95c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c960:	f080 81ca 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c964:	4872      	ldr	r0, [pc, #456]	; (800cb30 <sail_compression_from_string+0x3c4>)
 800c966:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c96a:	428b      	cmp	r3, r1
 800c96c:	bf08      	it	eq
 800c96e:	4282      	cmpeq	r2, r0
 800c970:	f000 819e 	beq.w	800ccb0 <sail_compression_from_string+0x544>
 800c974:	496f      	ldr	r1, [pc, #444]	; (800cb34 <sail_compression_from_string+0x3c8>)
 800c976:	428a      	cmp	r2, r1
 800c978:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c97c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c980:	f080 81ba 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c984:	486c      	ldr	r0, [pc, #432]	; (800cb38 <sail_compression_from_string+0x3cc>)
 800c986:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c98a:	428b      	cmp	r3, r1
 800c98c:	bf08      	it	eq
 800c98e:	4282      	cmpeq	r2, r0
 800c990:	f000 818c 	beq.w	800ccac <sail_compression_from_string+0x540>
 800c994:	4969      	ldr	r1, [pc, #420]	; (800cb3c <sail_compression_from_string+0x3d0>)
 800c996:	428a      	cmp	r2, r1
 800c998:	f24d 01aa 	movw	r1, #53418	; 0xd0aa
 800c99c:	eb73 0101 	sbcs.w	r1, r3, r1
 800c9a0:	f080 81aa 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c9a4:	4866      	ldr	r0, [pc, #408]	; (800cb40 <sail_compression_from_string+0x3d4>)
 800c9a6:	f24d 01a8 	movw	r1, #53416	; 0xd0a8
 800c9aa:	428b      	cmp	r3, r1
 800c9ac:	bf08      	it	eq
 800c9ae:	4282      	cmpeq	r2, r0
 800c9b0:	f000 816c 	beq.w	800cc8c <sail_compression_from_string+0x520>
 800c9b4:	4963      	ldr	r1, [pc, #396]	; (800cb44 <sail_compression_from_string+0x3d8>)
 800c9b6:	428a      	cmp	r2, r1
 800c9b8:	f24d 01a8 	movw	r1, #53416	; 0xd0a8
 800c9bc:	eb73 0101 	sbcs.w	r1, r3, r1
 800c9c0:	f080 819a 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c9c4:	4860      	ldr	r0, [pc, #384]	; (800cb48 <sail_compression_from_string+0x3dc>)
 800c9c6:	f240 6152 	movw	r1, #1618	; 0x652
 800c9ca:	428b      	cmp	r3, r1
 800c9cc:	bf08      	it	eq
 800c9ce:	4282      	cmpeq	r2, r0
 800c9d0:	f000 8164 	beq.w	800cc9c <sail_compression_from_string+0x530>
 800c9d4:	495d      	ldr	r1, [pc, #372]	; (800cb4c <sail_compression_from_string+0x3e0>)
 800c9d6:	428a      	cmp	r2, r1
 800c9d8:	f240 6152 	movw	r1, #1618	; 0x652
 800c9dc:	eb73 0101 	sbcs.w	r1, r3, r1
 800c9e0:	f080 818a 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800c9e4:	485a      	ldr	r0, [pc, #360]	; (800cb50 <sail_compression_from_string+0x3e4>)
 800c9e6:	f240 6152 	movw	r1, #1618	; 0x652
 800c9ea:	428b      	cmp	r3, r1
 800c9ec:	bf08      	it	eq
 800c9ee:	4282      	cmpeq	r2, r0
 800c9f0:	f000 8152 	beq.w	800cc98 <sail_compression_from_string+0x52c>
 800c9f4:	4957      	ldr	r1, [pc, #348]	; (800cb54 <sail_compression_from_string+0x3e8>)
 800c9f6:	428a      	cmp	r2, r1
 800c9f8:	f240 6152 	movw	r1, #1618	; 0x652
 800c9fc:	eb73 0101 	sbcs.w	r1, r3, r1
 800ca00:	f080 817a 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800ca04:	4854      	ldr	r0, [pc, #336]	; (800cb58 <sail_compression_from_string+0x3ec>)
 800ca06:	f240 6152 	movw	r1, #1618	; 0x652
 800ca0a:	428b      	cmp	r3, r1
 800ca0c:	bf08      	it	eq
 800ca0e:	4282      	cmpeq	r2, r0
 800ca10:	f000 813e 	beq.w	800cc90 <sail_compression_from_string+0x524>
 800ca14:	4951      	ldr	r1, [pc, #324]	; (800cb5c <sail_compression_from_string+0x3f0>)
 800ca16:	428a      	cmp	r2, r1
 800ca18:	f240 6152 	movw	r1, #1618	; 0x652
 800ca1c:	eb73 0101 	sbcs.w	r1, r3, r1
 800ca20:	f080 816a 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800ca24:	494e      	ldr	r1, [pc, #312]	; (800cb60 <sail_compression_from_string+0x3f4>)
 800ca26:	2b31      	cmp	r3, #49	; 0x31
 800ca28:	bf08      	it	eq
 800ca2a:	428a      	cmpeq	r2, r1
 800ca2c:	f000 814a 	beq.w	800ccc4 <sail_compression_from_string+0x558>
 800ca30:	494c      	ldr	r1, [pc, #304]	; (800cb64 <sail_compression_from_string+0x3f8>)
 800ca32:	428a      	cmp	r2, r1
 800ca34:	f173 0131 	sbcs.w	r1, r3, #49	; 0x31
 800ca38:	f080 815e 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800ca3c:	494a      	ldr	r1, [pc, #296]	; (800cb68 <sail_compression_from_string+0x3fc>)
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	bf08      	it	eq
 800ca42:	428a      	cmpeq	r2, r1
 800ca44:	f000 8156 	beq.w	800ccf4 <sail_compression_from_string+0x588>
 800ca48:	4948      	ldr	r1, [pc, #288]	; (800cb6c <sail_compression_from_string+0x400>)
 800ca4a:	428a      	cmp	r2, r1
 800ca4c:	f173 0101 	sbcs.w	r1, r3, #1
 800ca50:	f080 8152 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800ca54:	4946      	ldr	r1, [pc, #280]	; (800cb70 <sail_compression_from_string+0x404>)
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	bf08      	it	eq
 800ca5a:	428a      	cmpeq	r2, r1
 800ca5c:	f000 8148 	beq.w	800ccf0 <sail_compression_from_string+0x584>
 800ca60:	4944      	ldr	r1, [pc, #272]	; (800cb74 <sail_compression_from_string+0x408>)
 800ca62:	428a      	cmp	r2, r1
 800ca64:	f173 0101 	sbcs.w	r1, r3, #1
 800ca68:	f080 8146 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800ca6c:	4942      	ldr	r1, [pc, #264]	; (800cb78 <sail_compression_from_string+0x40c>)
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	bf08      	it	eq
 800ca72:	428a      	cmpeq	r2, r1
 800ca74:	f000 80f6 	beq.w	800cc64 <sail_compression_from_string+0x4f8>
 800ca78:	4940      	ldr	r1, [pc, #256]	; (800cb7c <sail_compression_from_string+0x410>)
 800ca7a:	428a      	cmp	r2, r1
 800ca7c:	f173 0101 	sbcs.w	r1, r3, #1
 800ca80:	f080 813a 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800ca84:	493e      	ldr	r1, [pc, #248]	; (800cb80 <sail_compression_from_string+0x414>)
 800ca86:	e07d      	b.n	800cb84 <sail_compression_from_string+0x418>
 800ca88:	93950d84 	.word	0x93950d84
 800ca8c:	c02285d1 	.word	0xc02285d1
 800ca90:	93950d85 	.word	0x93950d85
 800ca94:	ccbd5d62 	.word	0xccbd5d62
 800ca98:	98213c90 	.word	0x98213c90
 800ca9c:	ccbd5d63 	.word	0xccbd5d63
 800caa0:	353f029e 	.word	0x353f029e
 800caa4:	726cff80 	.word	0x726cff80
 800caa8:	353f029f 	.word	0x353f029f
 800caac:	2932f8c3 	.word	0x2932f8c3
 800cab0:	726ad286 	.word	0x726ad286
 800cab4:	2932f8c4 	.word	0x2932f8c4
 800cab8:	292c37bc 	.word	0x292c37bc
 800cabc:	292c37bd 	.word	0x292c37bd
 800cac0:	292c37bb 	.word	0x292c37bb
 800cac4:	9e967c9d 	.word	0x9e967c9d
 800cac8:	0377ae64 	.word	0x0377ae64
 800cacc:	9e967c9e 	.word	0x9e967c9e
 800cad0:	cb4f9678 	.word	0xcb4f9678
 800cad4:	0377aaa6 	.word	0x0377aaa6
 800cad8:	cb4f9679 	.word	0xcb4f9679
 800cadc:	db02ec1a 	.word	0xdb02ec1a
 800cae0:	0377a339 	.word	0x0377a339
 800cae4:	db02ec1b 	.word	0xdb02ec1b
 800cae8:	f3d3e2d3 	.word	0xf3d3e2d3
 800caec:	0377a215 	.word	0x0377a215
 800caf0:	f3d3e2d4 	.word	0xf3d3e2d4
 800caf4:	013f9aec 	.word	0x013f9aec
 800caf8:	037799c6 	.word	0x037799c6
 800cafc:	013f9aed 	.word	0x013f9aed
 800cb00:	7d8b7ff6 	.word	0x7d8b7ff6
 800cb04:	001ae621 	.word	0x001ae621
 800cb08:	7d8b7ff7 	.word	0x7d8b7ff7
 800cb0c:	26d361f3 	.word	0x26d361f3
 800cb10:	001ae5a1 	.word	0x001ae5a1
 800cb14:	26d361f4 	.word	0x26d361f4
 800cb18:	26d361f1 	.word	0x26d361f1
 800cb1c:	26d361f2 	.word	0x26d361f2
 800cb20:	4e417975 	.word	0x4e417975
 800cb24:	4e417976 	.word	0x4e417976
 800cb28:	a3c28c37 	.word	0xa3c28c37
 800cb2c:	a3c28c38 	.word	0xa3c28c38
 800cb30:	03ba3442 	.word	0x03ba3442
 800cb34:	03ba3443 	.word	0x03ba3443
 800cb38:	03ba343c 	.word	0x03ba343c
 800cb3c:	03ba343d 	.word	0x03ba343d
 800cb40:	1c4933ba 	.word	0x1c4933ba
 800cb44:	1c4933bb 	.word	0x1c4933bb
 800cb48:	b83723e4 	.word	0xb83723e4
 800cb4c:	b83723e5 	.word	0xb83723e5
 800cb50:	b83723ca 	.word	0xb83723ca
 800cb54:	b83723cb 	.word	0xb83723cb
 800cb58:	b8372275 	.word	0xb8372275
 800cb5c:	b8372276 	.word	0xb8372276
 800cb60:	0dbe817a 	.word	0x0dbe817a
 800cb64:	0dbe817b 	.word	0x0dbe817b
 800cb68:	7c8fd5ca 	.word	0x7c8fd5ca
 800cb6c:	7c8fd5cb 	.word	0x7c8fd5cb
 800cb70:	7c8df2d3 	.word	0x7c8df2d3
 800cb74:	7c8df2d4 	.word	0x7c8df2d4
 800cb78:	7c892f75 	.word	0x7c892f75
 800cb7c:	7c892f76 	.word	0x7c892f76
 800cb80:	7c890644 	.word	0x7c890644
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	bf08      	it	eq
 800cb88:	428a      	cmpeq	r2, r1
 800cb8a:	f000 8099 	beq.w	800ccc0 <sail_compression_from_string+0x554>
 800cb8e:	495d      	ldr	r1, [pc, #372]	; (800cd04 <sail_compression_from_string+0x598>)
 800cb90:	428a      	cmp	r2, r1
 800cb92:	f173 0101 	sbcs.w	r1, r3, #1
 800cb96:	f080 80af 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800cb9a:	495b      	ldr	r1, [pc, #364]	; (800cd08 <sail_compression_from_string+0x59c>)
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	bf08      	it	eq
 800cba0:	428a      	cmpeq	r2, r1
 800cba2:	f000 8089 	beq.w	800ccb8 <sail_compression_from_string+0x54c>
 800cba6:	4959      	ldr	r1, [pc, #356]	; (800cd0c <sail_compression_from_string+0x5a0>)
 800cba8:	428a      	cmp	r2, r1
 800cbaa:	f173 0101 	sbcs.w	r1, r3, #1
 800cbae:	f080 80a3 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800cbb2:	4957      	ldr	r1, [pc, #348]	; (800cd10 <sail_compression_from_string+0x5a4>)
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	bf08      	it	eq
 800cbb8:	428a      	cmpeq	r2, r1
 800cbba:	d07b      	beq.n	800ccb4 <sail_compression_from_string+0x548>
 800cbbc:	4955      	ldr	r1, [pc, #340]	; (800cd14 <sail_compression_from_string+0x5a8>)
 800cbbe:	428a      	cmp	r2, r1
 800cbc0:	f173 0101 	sbcs.w	r1, r3, #1
 800cbc4:	f080 8098 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800cbc8:	4953      	ldr	r1, [pc, #332]	; (800cd18 <sail_compression_from_string+0x5ac>)
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	bf08      	it	eq
 800cbce:	428a      	cmpeq	r2, r1
 800cbd0:	d068      	beq.n	800cca4 <sail_compression_from_string+0x538>
 800cbd2:	4952      	ldr	r1, [pc, #328]	; (800cd1c <sail_compression_from_string+0x5b0>)
 800cbd4:	428a      	cmp	r2, r1
 800cbd6:	f173 0101 	sbcs.w	r1, r3, #1
 800cbda:	f080 808d 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800cbde:	4950      	ldr	r1, [pc, #320]	; (800cd20 <sail_compression_from_string+0x5b4>)
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	bf08      	it	eq
 800cbe4:	428a      	cmpeq	r2, r1
 800cbe6:	d05b      	beq.n	800cca0 <sail_compression_from_string+0x534>
 800cbe8:	494e      	ldr	r1, [pc, #312]	; (800cd24 <sail_compression_from_string+0x5b8>)
 800cbea:	428a      	cmp	r2, r1
 800cbec:	f173 0101 	sbcs.w	r1, r3, #1
 800cbf0:	f080 8082 	bcs.w	800ccf8 <sail_compression_from_string+0x58c>
 800cbf4:	494c      	ldr	r1, [pc, #304]	; (800cd28 <sail_compression_from_string+0x5bc>)
 800cbf6:	4411      	add	r1, r2
 800cbf8:	4319      	orrs	r1, r3
 800cbfa:	d075      	beq.n	800cce8 <sail_compression_from_string+0x57c>
 800cbfc:	494b      	ldr	r1, [pc, #300]	; (800cd2c <sail_compression_from_string+0x5c0>)
 800cbfe:	428a      	cmp	r2, r1
 800cc00:	f173 0100 	sbcs.w	r1, r3, #0
 800cc04:	d278      	bcs.n	800ccf8 <sail_compression_from_string+0x58c>
 800cc06:	494a      	ldr	r1, [pc, #296]	; (800cd30 <sail_compression_from_string+0x5c4>)
 800cc08:	4411      	add	r1, r2
 800cc0a:	4319      	orrs	r1, r3
 800cc0c:	d06a      	beq.n	800cce4 <sail_compression_from_string+0x578>
 800cc0e:	4949      	ldr	r1, [pc, #292]	; (800cd34 <sail_compression_from_string+0x5c8>)
 800cc10:	428a      	cmp	r2, r1
 800cc12:	f173 0100 	sbcs.w	r1, r3, #0
 800cc16:	d26f      	bcs.n	800ccf8 <sail_compression_from_string+0x58c>
 800cc18:	4947      	ldr	r1, [pc, #284]	; (800cd38 <sail_compression_from_string+0x5cc>)
 800cc1a:	4411      	add	r1, r2
 800cc1c:	4319      	orrs	r1, r3
 800cc1e:	d05b      	beq.n	800ccd8 <sail_compression_from_string+0x56c>
 800cc20:	4946      	ldr	r1, [pc, #280]	; (800cd3c <sail_compression_from_string+0x5d0>)
 800cc22:	428a      	cmp	r2, r1
 800cc24:	f173 0100 	sbcs.w	r1, r3, #0
 800cc28:	d266      	bcs.n	800ccf8 <sail_compression_from_string+0x58c>
 800cc2a:	4945      	ldr	r1, [pc, #276]	; (800cd40 <sail_compression_from_string+0x5d4>)
 800cc2c:	4411      	add	r1, r2
 800cc2e:	4319      	orrs	r1, r3
 800cc30:	d050      	beq.n	800ccd4 <sail_compression_from_string+0x568>
 800cc32:	4944      	ldr	r1, [pc, #272]	; (800cd44 <sail_compression_from_string+0x5d8>)
 800cc34:	428a      	cmp	r2, r1
 800cc36:	f173 0100 	sbcs.w	r1, r3, #0
 800cc3a:	d25d      	bcs.n	800ccf8 <sail_compression_from_string+0x58c>
 800cc3c:	4942      	ldr	r1, [pc, #264]	; (800cd48 <sail_compression_from_string+0x5dc>)
 800cc3e:	4411      	add	r1, r2
 800cc40:	4319      	orrs	r1, r3
 800cc42:	d03b      	beq.n	800ccbc <sail_compression_from_string+0x550>
 800cc44:	4941      	ldr	r1, [pc, #260]	; (800cd4c <sail_compression_from_string+0x5e0>)
 800cc46:	428a      	cmp	r2, r1
 800cc48:	f173 0100 	sbcs.w	r1, r3, #0
 800cc4c:	d254      	bcs.n	800ccf8 <sail_compression_from_string+0x58c>
 800cc4e:	4940      	ldr	r1, [pc, #256]	; (800cd50 <sail_compression_from_string+0x5e4>)
 800cc50:	4411      	add	r1, r2
 800cc52:	4319      	orrs	r1, r3
 800cc54:	d00a      	beq.n	800cc6c <sail_compression_from_string+0x500>
 800cc56:	493f      	ldr	r1, [pc, #252]	; (800cd54 <sail_compression_from_string+0x5e8>)
 800cc58:	4411      	add	r1, r2
 800cc5a:	430b      	orrs	r3, r1
 800cc5c:	d014      	beq.n	800cc88 <sail_compression_from_string+0x51c>
 800cc5e:	e04b      	b.n	800ccf8 <sail_compression_from_string+0x58c>
        case UINT64_C(229442760833397):      return SAIL_COMPRESSION_UNKNOWN;
 800cc60:	2300      	movs	r3, #0
 800cc62:	e04a      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384332661):           return SAIL_COMPRESSION_NONE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	e048      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(10962109560604417378): return SAIL_COMPRESSION_ADOBE_DEFLATE;
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e046      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193450669):            return SAIL_COMPRESSION_AV1;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e044      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513328571):  return SAIL_COMPRESSION_CCITT_FAX3;
 800cc70:	2304      	movs	r3, #4
 800cc72:	e042      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513328572):  return SAIL_COMPRESSION_CCITT_FAX4;
 800cc74:	2305      	movs	r3, #5
 800cc76:	e040      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(249837380045871852):   return SAIL_COMPRESSION_CCITT_RLE;
 800cc78:	2306      	movs	r3, #6
 800cc7a:	e03e      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(8244633541513771203):  return SAIL_COMPRESSION_CCITT_RLEW;
 800cc7c:	2307      	movs	r3, #7
 800cc7e:	e03c      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(7570829698359793):     return SAIL_COMPRESSION_CCITT_T4;
 800cc80:	2308      	movs	r3, #8
 800cc82:	e03a      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(7570829698359795):     return SAIL_COMPRESSION_CCITT_T6;
 800cc84:	2309      	movs	r3, #9
 800cc86:	e038      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193453343):            return SAIL_COMPRESSION_DCS;
 800cc88:	230a      	movs	r3, #10
 800cc8a:	e036      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(229420447642554):      return SAIL_COMPRESSION_DEFLATE;
 800cc8c:	230b      	movs	r3, #11
 800cc8e:	e034      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6952347705973):        return SAIL_COMPRESSION_IT8_BL;
 800cc90:	230c      	movs	r3, #12
 800cc92:	e032      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(249846519511114451):   return SAIL_COMPRESSION_IT8_CTPAD;
 800cc94:	230d      	movs	r3, #13
 800cc96:	e030      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6952347706314):        return SAIL_COMPRESSION_IT8_LW;
 800cc98:	230e      	movs	r3, #14
 800cc9a:	e02e      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6952347706340):        return SAIL_COMPRESSION_IT8_MP;
 800cc9c:	230f      	movs	r3, #15
 800cc9e:	e02c      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384174593):           return SAIL_COMPRESSION_JBIG;
 800cca0:	2310      	movs	r3, #16
 800cca2:	e02a      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384189707):           return SAIL_COMPRESSION_JPEG;
 800cca4:	2311      	movs	r3, #17
 800cca6:	e028      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(249847773225217050):   return SAIL_COMPRESSION_JPEG_2000;
 800cca8:	2312      	movs	r3, #18
 800ccaa:	e026      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(229428625552444):      return SAIL_COMPRESSION_JPEG_XL;
 800ccac:	2313      	movs	r3, #19
 800ccae:	e024      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(229428625552450):      return SAIL_COMPRESSION_JPEG_XR;
 800ccb0:	2314      	movs	r3, #20
 800ccb2:	e022      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384250027):           return SAIL_COMPRESSION_LERC;
 800ccb4:	2315      	movs	r3, #21
 800ccb6:	e020      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384272729):           return SAIL_COMPRESSION_LZMA;
 800ccb8:	2316      	movs	r3, #22
 800ccba:	e01e      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193462818):            return SAIL_COMPRESSION_LZW;
 800ccbc:	2317      	movs	r3, #23
 800ccbe:	e01c      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384322116):           return SAIL_COMPRESSION_NEXT;
 800ccc0:	2318      	movs	r3, #24
 800ccc2:	e01a      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(210683986298):         return SAIL_COMPRESSION_OJPEG;
 800ccc4:	2319      	movs	r3, #25
 800ccc6:	e018      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(7571380909080566):     return SAIL_COMPRESSION_PACKBITS;
 800ccc8:	231a      	movs	r3, #26
 800ccca:	e016      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(8245245943922754206):  return SAIL_COMPRESSION_PIXAR_FILM;
 800cccc:	231b      	movs	r3, #27
 800ccce:	e014      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(249855937694635640):   return SAIL_COMPRESSION_PIXAR_LOG;
 800ccd0:	231c      	movs	r3, #28
 800ccd2:	e012      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193467886):            return SAIL_COMPRESSION_QOI;
 800ccd4:	231d      	movs	r3, #29
 800ccd6:	e010      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193468872):            return SAIL_COMPRESSION_RLE;
 800ccd8:	231e      	movs	r3, #30
 800ccda:	e00e      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(229439900388407):      return SAIL_COMPRESSION_SGI_LOG;
 800ccdc:	231f      	movs	r3, #31
 800ccde:	e00c      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(249860051522976925):   return SAIL_COMPRESSION_SGI_LOG24;
 800cce0:	2320      	movs	r3, #32
 800cce2:	e00a      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193470240):            return SAIL_COMPRESSION_T43;
 800cce4:	2321      	movs	r3, #33	; 0x21
 800cce6:	e008      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(193470374):            return SAIL_COMPRESSION_T85;
 800cce8:	2322      	movs	r3, #34	; 0x22
 800ccea:	e006      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(13844775339661004164): return SAIL_COMPRESSION_THUNDERSCAN;
 800ccec:	2323      	movs	r3, #35	; 0x23
 800ccee:	e004      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384644819):           return SAIL_COMPRESSION_WEBP;
 800ccf0:	2324      	movs	r3, #36	; 0x24
 800ccf2:	e002      	b.n	800ccfa <sail_compression_from_string+0x58e>
        case UINT64_C(6384768458):           return SAIL_COMPRESSION_ZSTD;
 800ccf4:	2325      	movs	r3, #37	; 0x25
 800ccf6:	e000      	b.n	800ccfa <sail_compression_from_string+0x58e>
    }

    return SAIL_COMPRESSION_UNKNOWN;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	7c890645 	.word	0x7c890645
 800cd08:	7c884559 	.word	0x7c884559
 800cd0c:	7c88455a 	.word	0x7c88455a
 800cd10:	7c87ecab 	.word	0x7c87ecab
 800cd14:	7c87ecac 	.word	0x7c87ecac
 800cd18:	7c87010b 	.word	0x7c87010b
 800cd1c:	7c87010c 	.word	0x7c87010c
 800cd20:	7c86c601 	.word	0x7c86c601
 800cd24:	7c86c602 	.word	0x7c86c602
 800cd28:	f477e05a 	.word	0xf477e05a
 800cd2c:	0b881fa7 	.word	0x0b881fa7
 800cd30:	f477e0e0 	.word	0xf477e0e0
 800cd34:	0b881f21 	.word	0x0b881f21
 800cd38:	f477e638 	.word	0xf477e638
 800cd3c:	0b8819c9 	.word	0x0b8819c9
 800cd40:	f477ea12 	.word	0xf477ea12
 800cd44:	0b8815ef 	.word	0x0b8815ef
 800cd48:	f477fdde 	.word	0xf477fdde
 800cd4c:	0b880223 	.word	0x0b880223
 800cd50:	f4782d53 	.word	0xf4782d53
 800cd54:	f47822e1 	.word	0xf47822e1

0800cd58 <sail_codec_feature_from_string>:
    }

    return NULL;
}

enum SailCodecFeature sail_codec_feature_from_string(const char *str) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]

    uint64_t hash;
    SAIL_TRY_OR_EXECUTE(sail_string_hash(str, &hash),
 800cd60:	f107 0308 	add.w	r3, r7, #8
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f003 fdd2 	bl	8010910 <sail_string_hash>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	82fb      	strh	r3, [r7, #22]
 800cd70:	8afb      	ldrh	r3, [r7, #22]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bf14      	ite	ne
 800cd76:	2301      	movne	r3, #1
 800cd78:	2300      	moveq	r3, #0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <sail_codec_feature_from_string+0x2c>
 800cd80:	2301      	movs	r3, #1
 800cd82:	e05b      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
                        /* cleanup */ return SAIL_CODEC_FEATURE_UNKNOWN);

    switch (hash) {
 800cd84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd88:	482e      	ldr	r0, [pc, #184]	; (800ce44 <sail_codec_feature_from_string+0xec>)
 800cd8a:	492f      	ldr	r1, [pc, #188]	; (800ce48 <sail_codec_feature_from_string+0xf0>)
 800cd8c:	428b      	cmp	r3, r1
 800cd8e:	bf08      	it	eq
 800cd90:	4282      	cmpeq	r2, r0
 800cd92:	d04a      	beq.n	800ce2a <sail_codec_feature_from_string+0xd2>
 800cd94:	492d      	ldr	r1, [pc, #180]	; (800ce4c <sail_codec_feature_from_string+0xf4>)
 800cd96:	428a      	cmp	r2, r1
 800cd98:	492b      	ldr	r1, [pc, #172]	; (800ce48 <sail_codec_feature_from_string+0xf0>)
 800cd9a:	eb73 0101 	sbcs.w	r1, r3, r1
 800cd9e:	d24c      	bcs.n	800ce3a <sail_codec_feature_from_string+0xe2>
 800cda0:	482b      	ldr	r0, [pc, #172]	; (800ce50 <sail_codec_feature_from_string+0xf8>)
 800cda2:	492c      	ldr	r1, [pc, #176]	; (800ce54 <sail_codec_feature_from_string+0xfc>)
 800cda4:	428b      	cmp	r3, r1
 800cda6:	bf08      	it	eq
 800cda8:	4282      	cmpeq	r2, r0
 800cdaa:	d042      	beq.n	800ce32 <sail_codec_feature_from_string+0xda>
 800cdac:	492a      	ldr	r1, [pc, #168]	; (800ce58 <sail_codec_feature_from_string+0x100>)
 800cdae:	428a      	cmp	r2, r1
 800cdb0:	4928      	ldr	r1, [pc, #160]	; (800ce54 <sail_codec_feature_from_string+0xfc>)
 800cdb2:	eb73 0101 	sbcs.w	r1, r3, r1
 800cdb6:	d240      	bcs.n	800ce3a <sail_codec_feature_from_string+0xe2>
 800cdb8:	4828      	ldr	r0, [pc, #160]	; (800ce5c <sail_codec_feature_from_string+0x104>)
 800cdba:	4929      	ldr	r1, [pc, #164]	; (800ce60 <sail_codec_feature_from_string+0x108>)
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	bf08      	it	eq
 800cdc0:	4282      	cmpeq	r2, r0
 800cdc2:	d034      	beq.n	800ce2e <sail_codec_feature_from_string+0xd6>
 800cdc4:	4927      	ldr	r1, [pc, #156]	; (800ce64 <sail_codec_feature_from_string+0x10c>)
 800cdc6:	428a      	cmp	r2, r1
 800cdc8:	4925      	ldr	r1, [pc, #148]	; (800ce60 <sail_codec_feature_from_string+0x108>)
 800cdca:	eb73 0101 	sbcs.w	r1, r3, r1
 800cdce:	d234      	bcs.n	800ce3a <sail_codec_feature_from_string+0xe2>
 800cdd0:	4825      	ldr	r0, [pc, #148]	; (800ce68 <sail_codec_feature_from_string+0x110>)
 800cdd2:	4926      	ldr	r1, [pc, #152]	; (800ce6c <sail_codec_feature_from_string+0x114>)
 800cdd4:	428b      	cmp	r3, r1
 800cdd6:	bf08      	it	eq
 800cdd8:	4282      	cmpeq	r2, r0
 800cdda:	d024      	beq.n	800ce26 <sail_codec_feature_from_string+0xce>
 800cddc:	4924      	ldr	r1, [pc, #144]	; (800ce70 <sail_codec_feature_from_string+0x118>)
 800cdde:	428a      	cmp	r2, r1
 800cde0:	4922      	ldr	r1, [pc, #136]	; (800ce6c <sail_codec_feature_from_string+0x114>)
 800cde2:	eb73 0101 	sbcs.w	r1, r3, r1
 800cde6:	d228      	bcs.n	800ce3a <sail_codec_feature_from_string+0xe2>
 800cde8:	4822      	ldr	r0, [pc, #136]	; (800ce74 <sail_codec_feature_from_string+0x11c>)
 800cdea:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800cdee:	428b      	cmp	r3, r1
 800cdf0:	bf08      	it	eq
 800cdf2:	4282      	cmpeq	r2, r0
 800cdf4:	d013      	beq.n	800ce1e <sail_codec_feature_from_string+0xc6>
 800cdf6:	4920      	ldr	r1, [pc, #128]	; (800ce78 <sail_codec_feature_from_string+0x120>)
 800cdf8:	428a      	cmp	r2, r1
 800cdfa:	f24d 01ad 	movw	r1, #53421	; 0xd0ad
 800cdfe:	eb73 0101 	sbcs.w	r1, r3, r1
 800ce02:	d21a      	bcs.n	800ce3a <sail_codec_feature_from_string+0xe2>
 800ce04:	491d      	ldr	r1, [pc, #116]	; (800ce7c <sail_codec_feature_from_string+0x124>)
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	bf08      	it	eq
 800ce0a:	428a      	cmpeq	r2, r1
 800ce0c:	d013      	beq.n	800ce36 <sail_codec_feature_from_string+0xde>
 800ce0e:	481c      	ldr	r0, [pc, #112]	; (800ce80 <sail_codec_feature_from_string+0x128>)
 800ce10:	f240 6152 	movw	r1, #1618	; 0x652
 800ce14:	428b      	cmp	r3, r1
 800ce16:	bf08      	it	eq
 800ce18:	4282      	cmpeq	r2, r0
 800ce1a:	d002      	beq.n	800ce22 <sail_codec_feature_from_string+0xca>
 800ce1c:	e00d      	b.n	800ce3a <sail_codec_feature_from_string+0xe2>
        case UINT64_C(229442760833397):      return SAIL_CODEC_FEATURE_UNKNOWN;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e00c      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
        case UINT64_C(6952739426029):        return SAIL_CODEC_FEATURE_STATIC;
 800ce22:	2302      	movs	r3, #2
 800ce24:	e00a      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
        case UINT64_C(7570758658679240):     return SAIL_CODEC_FEATURE_ANIMATED;
 800ce26:	2304      	movs	r3, #4
 800ce28:	e008      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
        case UINT64_C(13834645239609548286): return SAIL_CODEC_FEATURE_MULTI_PAGED;
 800ce2a:	2308      	movs	r3, #8
 800ce2c:	e006      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
        case UINT64_C(249851542786072787):   return SAIL_CODEC_FEATURE_META_DATA;
 800ce2e:	2310      	movs	r3, #16
 800ce30:	e004      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
        case UINT64_C(8244927930303708800):  return SAIL_CODEC_FEATURE_INTERLACED;
 800ce32:	2320      	movs	r3, #32
 800ce34:	e002      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
        case UINT64_C(6384139556):           return SAIL_CODEC_FEATURE_ICCP;
 800ce36:	2340      	movs	r3, #64	; 0x40
 800ce38:	e000      	b.n	800ce3c <sail_codec_feature_from_string+0xe4>
    }

    return SAIL_CODEC_FEATURE_UNKNOWN;
 800ce3a:	2301      	movs	r3, #1
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	dc79ddfe 	.word	0xdc79ddfe
 800ce48:	bffe888b 	.word	0xbffe888b
 800ce4c:	dc79ddff 	.word	0xdc79ddff
 800ce50:	e472fe80 	.word	0xe472fe80
 800ce54:	726bde44 	.word	0x726bde44
 800ce58:	e472fe81 	.word	0xe472fe81
 800ce5c:	8658e0d3 	.word	0x8658e0d3
 800ce60:	0377a6a7 	.word	0x0377a6a7
 800ce64:	8658e0d4 	.word	0x8658e0d4
 800ce68:	9c87e1c8 	.word	0x9c87e1c8
 800ce6c:	001ae590 	.word	0x001ae590
 800ce70:	9c87e1c9 	.word	0x9c87e1c9
 800ce74:	4e417975 	.word	0x4e417975
 800ce78:	4e417976 	.word	0x4e417976
 800ce7c:	7c863d24 	.word	0x7c863d24
 800ce80:	cf904eed 	.word	0xcf904eed

0800ce84 <sail_alloc_compression_level>:
    SOFTWARE.
*/

#include "sail-common.h"

sail_status_t sail_alloc_compression_level(struct sail_compression_level **compression_level) {
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af02      	add	r7, sp, #8
 800ce8a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(compression_level);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	bf0c      	ite	eq
 800ce92:	2301      	moveq	r3, #1
 800ce94:	2300      	movne	r3, #0
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d011      	beq.n	800cec0 <sail_alloc_compression_level+0x3c>
 800ce9c:	4b25      	ldr	r3, [pc, #148]	; (800cf34 <sail_alloc_compression_level+0xb0>)
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	4b25      	ldr	r3, [pc, #148]	; (800cf38 <sail_alloc_compression_level+0xb4>)
 800cea2:	221e      	movs	r2, #30
 800cea4:	4925      	ldr	r1, [pc, #148]	; (800cf3c <sail_alloc_compression_level+0xb8>)
 800cea6:	2001      	movs	r0, #1
 800cea8:	f002 f9bc 	bl	800f224 <sail_log>
 800ceac:	4b24      	ldr	r3, [pc, #144]	; (800cf40 <sail_alloc_compression_level+0xbc>)
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	4b24      	ldr	r3, [pc, #144]	; (800cf44 <sail_alloc_compression_level+0xc0>)
 800ceb2:	221e      	movs	r2, #30
 800ceb4:	4921      	ldr	r1, [pc, #132]	; (800cf3c <sail_alloc_compression_level+0xb8>)
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	f002 f9b4 	bl	800f224 <sail_log>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e035      	b.n	800cf2c <sail_alloc_compression_level+0xa8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_compression_level), &ptr));
 800cec0:	f107 0308 	add.w	r3, r7, #8
 800cec4:	4619      	mov	r1, r3
 800cec6:	2020      	movs	r0, #32
 800cec8:	f002 faa4 	bl	800f414 <sail_malloc>
 800cecc:	4603      	mov	r3, r0
 800cece:	81fb      	strh	r3, [r7, #14]
 800ced0:	89fb      	ldrh	r3, [r7, #14]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	bf14      	ite	ne
 800ced6:	2301      	movne	r3, #1
 800ced8:	2300      	moveq	r3, #0
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <sail_alloc_compression_level+0x60>
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	e023      	b.n	800cf2c <sail_alloc_compression_level+0xa8>
    *compression_level = ptr;
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]

    (*compression_level)->min_level     = 0;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6819      	ldr	r1, [r3, #0]
 800ceee:	f04f 0200 	mov.w	r2, #0
 800cef2:	f04f 0300 	mov.w	r3, #0
 800cef6:	e9c1 2300 	strd	r2, r3, [r1]
    (*compression_level)->max_level     = 0;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6819      	ldr	r1, [r3, #0]
 800cefe:	f04f 0200 	mov.w	r2, #0
 800cf02:	f04f 0300 	mov.w	r3, #0
 800cf06:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*compression_level)->default_level = 0;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6819      	ldr	r1, [r3, #0]
 800cf0e:	f04f 0200 	mov.w	r2, #0
 800cf12:	f04f 0300 	mov.w	r3, #0
 800cf16:	e9c1 2304 	strd	r2, r3, [r1, #16]
    (*compression_level)->step          = 0;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6819      	ldr	r1, [r3, #0]
 800cf1e:	f04f 0200 	mov.w	r2, #0
 800cf22:	f04f 0300 	mov.w	r3, #0
 800cf26:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return SAIL_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	08018e3c 	.word	0x08018e3c
 800cf38:	08018dc8 	.word	0x08018dc8
 800cf3c:	08018de0 	.word	0x08018de0
 800cf40:	08018e54 	.word	0x08018e54
 800cf44:	08018e50 	.word	0x08018e50

0800cf48 <sail_destroy_compression_level>:

void sail_destroy_compression_level(struct sail_compression_level *compression_level) {
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]

    if (compression_level == NULL) {
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <sail_destroy_compression_level+0x16>
        return;
    }

    sail_free(compression_level);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f002 fae4 	bl	800f524 <sail_free>
 800cf5c:	e000      	b.n	800cf60 <sail_destroy_compression_level+0x18>
        return;
 800cf5e:	bf00      	nop
}
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <alloc_context>:

    return SAIL_OK;
}
#endif

static sail_status_t alloc_context(struct sail_context **context) {
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bf0c      	ite	eq
 800cf76:	2301      	moveq	r3, #1
 800cf78:	2300      	movne	r3, #0
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d011      	beq.n	800cfa4 <alloc_context+0x3c>
 800cf80:	4b19      	ldr	r3, [pc, #100]	; (800cfe8 <alloc_context+0x80>)
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	4b19      	ldr	r3, [pc, #100]	; (800cfec <alloc_context+0x84>)
 800cf86:	22be      	movs	r2, #190	; 0xbe
 800cf88:	4919      	ldr	r1, [pc, #100]	; (800cff0 <alloc_context+0x88>)
 800cf8a:	2001      	movs	r0, #1
 800cf8c:	f002 f94a 	bl	800f224 <sail_log>
 800cf90:	4b18      	ldr	r3, [pc, #96]	; (800cff4 <alloc_context+0x8c>)
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	4b18      	ldr	r3, [pc, #96]	; (800cff8 <alloc_context+0x90>)
 800cf96:	22be      	movs	r2, #190	; 0xbe
 800cf98:	4915      	ldr	r1, [pc, #84]	; (800cff0 <alloc_context+0x88>)
 800cf9a:	2001      	movs	r0, #1
 800cf9c:	f002 f942 	bl	800f224 <sail_log>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e01d      	b.n	800cfe0 <alloc_context+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_context), &ptr));
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	2008      	movs	r0, #8
 800cfac:	f002 fa32 	bl	800f414 <sail_malloc>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	81fb      	strh	r3, [r7, #14]
 800cfb4:	89fb      	ldrh	r3, [r7, #14]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bf14      	ite	ne
 800cfba:	2301      	movne	r3, #1
 800cfbc:	2300      	moveq	r3, #0
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <alloc_context+0x60>
 800cfc4:	89fb      	ldrh	r3, [r7, #14]
 800cfc6:	e00b      	b.n	800cfe0 <alloc_context+0x78>
    *context = ptr;
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]

    (*context)->initialized     = false;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	701a      	strb	r2, [r3, #0]
    (*context)->codec_bundle_node = NULL;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	08018ed4 	.word	0x08018ed4
 800cfec:	08018e68 	.word	0x08018e68
 800cff0:	08018e80 	.word	0x08018e80
 800cff4:	08018ee0 	.word	0x08018ee0
 800cff8:	08018edc 	.word	0x08018edc

0800cffc <allocate_global_context>:

static sail_status_t allocate_global_context(struct sail_context **context) {
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af02      	add	r7, sp, #8
 800d002:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	bf0c      	ite	eq
 800d00a:	2301      	moveq	r3, #1
 800d00c:	2300      	movne	r3, #0
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d011      	beq.n	800d038 <allocate_global_context+0x3c>
 800d014:	4b1b      	ldr	r3, [pc, #108]	; (800d084 <allocate_global_context+0x88>)
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	4b1b      	ldr	r3, [pc, #108]	; (800d088 <allocate_global_context+0x8c>)
 800d01a:	22cc      	movs	r2, #204	; 0xcc
 800d01c:	491b      	ldr	r1, [pc, #108]	; (800d08c <allocate_global_context+0x90>)
 800d01e:	2001      	movs	r0, #1
 800d020:	f002 f900 	bl	800f224 <sail_log>
 800d024:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <allocate_global_context+0x94>)
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	4b1a      	ldr	r3, [pc, #104]	; (800d094 <allocate_global_context+0x98>)
 800d02a:	22cc      	movs	r2, #204	; 0xcc
 800d02c:	4917      	ldr	r1, [pc, #92]	; (800d08c <allocate_global_context+0x90>)
 800d02e:	2001      	movs	r0, #1
 800d030:	f002 f8f8 	bl	800f224 <sail_log>
 800d034:	2301      	movs	r3, #1
 800d036:	e020      	b.n	800d07a <allocate_global_context+0x7e>

    if (global_context == NULL) {
 800d038:	4b17      	ldr	r3, [pc, #92]	; (800d098 <allocate_global_context+0x9c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d117      	bne.n	800d070 <allocate_global_context+0x74>
        SAIL_TRY(alloc_context(&global_context));
 800d040:	4815      	ldr	r0, [pc, #84]	; (800d098 <allocate_global_context+0x9c>)
 800d042:	f7ff ff91 	bl	800cf68 <alloc_context>
 800d046:	4603      	mov	r3, r0
 800d048:	81fb      	strh	r3, [r7, #14]
 800d04a:	89fb      	ldrh	r3, [r7, #14]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bf14      	ite	ne
 800d050:	2301      	movne	r3, #1
 800d052:	2300      	moveq	r3, #0
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <allocate_global_context+0x62>
 800d05a:	89fb      	ldrh	r3, [r7, #14]
 800d05c:	e00d      	b.n	800d07a <allocate_global_context+0x7e>
        SAIL_LOG_DEBUG("Allocated new context %p", global_context);
 800d05e:	4b0e      	ldr	r3, [pc, #56]	; (800d098 <allocate_global_context+0x9c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	4b0d      	ldr	r3, [pc, #52]	; (800d09c <allocate_global_context+0xa0>)
 800d066:	22d0      	movs	r2, #208	; 0xd0
 800d068:	4908      	ldr	r1, [pc, #32]	; (800d08c <allocate_global_context+0x90>)
 800d06a:	2005      	movs	r0, #5
 800d06c:	f002 f8da 	bl	800f224 <sail_log>
    }

    *context = global_context;
 800d070:	4b09      	ldr	r3, [pc, #36]	; (800d098 <allocate_global_context+0x9c>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	08018ed4 	.word	0x08018ed4
 800d088:	08018e68 	.word	0x08018e68
 800d08c:	08018e80 	.word	0x08018e80
 800d090:	08018ee0 	.word	0x08018ee0
 800d094:	08018edc 	.word	0x08018edc
 800d098:	20003828 	.word	0x20003828
 800d09c:	08018ef4 	.word	0x08018ef4

0800d0a0 <preload_codecs>:
    sail_free(context);

    return SAIL_OK;
}

static sail_status_t preload_codecs(struct sail_context *context) {
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af02      	add	r7, sp, #8
 800d0a6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	bf0c      	ite	eq
 800d0ae:	2301      	moveq	r3, #1
 800d0b0:	2300      	movne	r3, #0
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d011      	beq.n	800d0dc <preload_codecs+0x3c>
 800d0b8:	4b25      	ldr	r3, [pc, #148]	; (800d150 <preload_codecs+0xb0>)
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	4b25      	ldr	r3, [pc, #148]	; (800d154 <preload_codecs+0xb4>)
 800d0be:	22e6      	movs	r2, #230	; 0xe6
 800d0c0:	4925      	ldr	r1, [pc, #148]	; (800d158 <preload_codecs+0xb8>)
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	f002 f8ae 	bl	800f224 <sail_log>
 800d0c8:	4b24      	ldr	r3, [pc, #144]	; (800d15c <preload_codecs+0xbc>)
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	4b24      	ldr	r3, [pc, #144]	; (800d160 <preload_codecs+0xc0>)
 800d0ce:	22e6      	movs	r2, #230	; 0xe6
 800d0d0:	4921      	ldr	r1, [pc, #132]	; (800d158 <preload_codecs+0xb8>)
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	f002 f8a6 	bl	800f224 <sail_log>
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e035      	b.n	800d148 <preload_codecs+0xa8>

    SAIL_TRY(lock_context());
 800d0dc:	f000 fb9a 	bl	800d814 <lock_context>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	827b      	strh	r3, [r7, #18]
 800d0e4:	8a7b      	ldrh	r3, [r7, #18]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	bf14      	ite	ne
 800d0ea:	2301      	movne	r3, #1
 800d0ec:	2300      	moveq	r3, #0
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <preload_codecs+0x58>
 800d0f4:	8a7b      	ldrh	r3, [r7, #18]
 800d0f6:	e027      	b.n	800d148 <preload_codecs+0xa8>

    SAIL_LOG_DEBUG("Preloading codecs");
 800d0f8:	4b1a      	ldr	r3, [pc, #104]	; (800d164 <preload_codecs+0xc4>)
 800d0fa:	22ea      	movs	r2, #234	; 0xea
 800d0fc:	4916      	ldr	r1, [pc, #88]	; (800d158 <preload_codecs+0xb8>)
 800d0fe:	2005      	movs	r0, #5
 800d100:	f002 f890 	bl	800f224 <sail_log>

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	617b      	str	r3, [r7, #20]
 800d10a:	e00b      	b.n	800d124 <preload_codecs+0x84>
        const struct sail_codec *codec;

        /* Ignore loading errors on purpose. */
        (void)load_codec_by_codec_info(codec_bundle_node->codec_bundle->codec_info, &codec);
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f107 020c 	add.w	r2, r7, #12
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f002 ff53 	bl	800ffc4 <load_codec_by_codec_info>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1f0      	bne.n	800d10c <preload_codecs+0x6c>
    }

    SAIL_TRY(unlock_context());
 800d12a:	f000 fb7b 	bl	800d824 <unlock_context>
 800d12e:	4603      	mov	r3, r0
 800d130:	823b      	strh	r3, [r7, #16]
 800d132:	8a3b      	ldrh	r3, [r7, #16]
 800d134:	2b00      	cmp	r3, #0
 800d136:	bf14      	ite	ne
 800d138:	2301      	movne	r3, #1
 800d13a:	2300      	moveq	r3, #0
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <preload_codecs+0xa6>
 800d142:	8a3b      	ldrh	r3, [r7, #16]
 800d144:	e000      	b.n	800d148 <preload_codecs+0xa8>

    return SAIL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	08018ed4 	.word	0x08018ed4
 800d154:	08018e68 	.word	0x08018e68
 800d158:	08018e80 	.word	0x08018e80
 800d15c:	08018ee0 	.word	0x08018ee0
 800d160:	08018edc 	.word	0x08018edc
 800d164:	08018f10 	.word	0x08018f10

0800d168 <codec_bundle_priority_comparator>:

static int codec_bundle_priority_comparator(const void *elem1, const void *elem2) {
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]

    const int priority1 = (*(struct sail_codec_bundle_node **)elem1)->codec_bundle->codec_info->priority;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	7a1b      	ldrb	r3, [r3, #8]
 800d17c:	60fb      	str	r3, [r7, #12]
    const int priority2 = (*(struct sail_codec_bundle_node **)elem2)->codec_bundle->codec_info->priority;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	7a1b      	ldrb	r3, [r3, #8]
 800d188:	60bb      	str	r3, [r7, #8]

    return priority1 - priority2;
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	1ad3      	subs	r3, r2, r3
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <sort_enumerated_codecs>:

/*
 * Space complexity: O(n)
 * Time complexity: O(n * log(n))
 */
static sail_status_t sort_enumerated_codecs(struct sail_context *context) {
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08c      	sub	sp, #48	; 0x30
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]

    /* 0 or 1 elements - nothing to sort. */
    if (context->codec_bundle_node == NULL || context->codec_bundle_node->next == NULL) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <sort_enumerated_codecs+0x1a>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <sort_enumerated_codecs+0x1e>
        return SAIL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e061      	b.n	800d27e <sort_enumerated_codecs+0xe2>
    }

    /* Count the number of codecs. */
    unsigned codecs_num = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c4:	e005      	b.n	800d1d2 <sort_enumerated_codecs+0x36>
        codecs_num++;
 800d1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1f6      	bne.n	800d1c6 <sort_enumerated_codecs+0x2a>
    }

    /* Copy codecs to an array. */
    struct sail_codec_bundle_node **codec_bundle_array;
    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_codec_bundle_node *) * codecs_num, &ptr));
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	f107 0208 	add.w	r2, r7, #8
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f002 f916 	bl	800f414 <sail_malloc>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	82fb      	strh	r3, [r7, #22]
 800d1ec:	8afb      	ldrh	r3, [r7, #22]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	bf14      	ite	ne
 800d1f2:	2301      	movne	r3, #1
 800d1f4:	2300      	moveq	r3, #0
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <sort_enumerated_codecs+0x64>
 800d1fc:	8afb      	ldrh	r3, [r7, #22]
 800d1fe:	e03e      	b.n	800d27e <sort_enumerated_codecs+0xe2>
    codec_bundle_array = ptr;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	613b      	str	r3, [r7, #16]

    {
        unsigned i = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	627b      	str	r3, [r7, #36]	; 0x24
        for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	623b      	str	r3, [r7, #32]
 800d20e:	e00a      	b.n	800d226 <sort_enumerated_codecs+0x8a>
            codec_bundle_array[i++] = codec_bundle_node;
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	627a      	str	r2, [r7, #36]	; 0x24
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	4413      	add	r3, r2
 800d21c:	6a3a      	ldr	r2, [r7, #32]
 800d21e:	601a      	str	r2, [r3, #0]
        for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	623b      	str	r3, [r7, #32]
 800d226:	6a3b      	ldr	r3, [r7, #32]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1f1      	bne.n	800d210 <sort_enumerated_codecs+0x74>
        }
    }

    /* Sort the array. */
    qsort(codec_bundle_array, codecs_num, sizeof(struct sail_codec_bundle_node *), codec_bundle_priority_comparator);
 800d22c:	4b16      	ldr	r3, [pc, #88]	; (800d288 <sort_enumerated_codecs+0xec>)
 800d22e:	2204      	movs	r2, #4
 800d230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d232:	6938      	ldr	r0, [r7, #16]
 800d234:	f006 fe22 	bl	8013e7c <qsort>

    /* Reconstruct the linked list. */
    struct sail_codec_bundle_node *codec_bundle_node_sorted_it = codec_bundle_array[0];
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	61fb      	str	r3, [r7, #28]
    struct sail_codec_bundle_node *codec_bundle_node_sorted = codec_bundle_node_sorted_it;
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	60fb      	str	r3, [r7, #12]

    for (unsigned i = 1; i < codecs_num; i++) {
 800d242:	2301      	movs	r3, #1
 800d244:	61bb      	str	r3, [r7, #24]
 800d246:	e00c      	b.n	800d262 <sort_enumerated_codecs+0xc6>
        codec_bundle_node_sorted_it->next = codec_bundle_array[i];
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	4413      	add	r3, r2
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	605a      	str	r2, [r3, #4]
        codec_bundle_node_sorted_it = codec_bundle_node_sorted_it->next;
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 1; i < codecs_num; i++) {
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	3301      	adds	r3, #1
 800d260:	61bb      	str	r3, [r7, #24]
 800d262:	69ba      	ldr	r2, [r7, #24]
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	429a      	cmp	r2, r3
 800d268:	d3ee      	bcc.n	800d248 <sort_enumerated_codecs+0xac>
    }

    codec_bundle_node_sorted_it->next = NULL;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	2200      	movs	r2, #0
 800d26e:	605a      	str	r2, [r3, #4]

    context->codec_bundle_node = codec_bundle_node_sorted;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	605a      	str	r2, [r3, #4]

    /* Cleanup */
    sail_free(codec_bundle_array);
 800d276:	6938      	ldr	r0, [r7, #16]
 800d278:	f002 f954 	bl	800f524 <sail_free>

    return SAIL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3730      	adds	r7, #48	; 0x30
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	0800d169 	.word	0x0800d169

0800d28c <print_enumerated_codecs>:

static sail_status_t print_enumerated_codecs(struct sail_context *context) {
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08c      	sub	sp, #48	; 0x30
 800d290:	af06      	add	r7, sp, #24
 800d292:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	bf0c      	ite	eq
 800d29a:	2301      	moveq	r3, #1
 800d29c:	2300      	movne	r3, #0
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d013      	beq.n	800d2cc <print_enumerated_codecs+0x40>
 800d2a4:	4b26      	ldr	r3, [pc, #152]	; (800d340 <print_enumerated_codecs+0xb4>)
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	4b26      	ldr	r3, [pc, #152]	; (800d344 <print_enumerated_codecs+0xb8>)
 800d2aa:	f240 1237 	movw	r2, #311	; 0x137
 800d2ae:	4926      	ldr	r1, [pc, #152]	; (800d348 <print_enumerated_codecs+0xbc>)
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	f001 ffb7 	bl	800f224 <sail_log>
 800d2b6:	4b25      	ldr	r3, [pc, #148]	; (800d34c <print_enumerated_codecs+0xc0>)
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	4b25      	ldr	r3, [pc, #148]	; (800d350 <print_enumerated_codecs+0xc4>)
 800d2bc:	f240 1237 	movw	r2, #311	; 0x137
 800d2c0:	4921      	ldr	r1, [pc, #132]	; (800d348 <print_enumerated_codecs+0xbc>)
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	f001 ffae 	bl	800f224 <sail_log>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e035      	b.n	800d338 <print_enumerated_codecs+0xac>

    const struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	617b      	str	r3, [r7, #20]

    if (codec_bundle_node == NULL) {
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d101      	bne.n	800d2dc <print_enumerated_codecs+0x50>
        return SAIL_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e02d      	b.n	800d338 <print_enumerated_codecs+0xac>
    }

    /* Print the found codec infos. */
    SAIL_LOG_DEBUG("Enumerated codecs:");
 800d2dc:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <print_enumerated_codecs+0xc8>)
 800d2de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d2e2:	4919      	ldr	r1, [pc, #100]	; (800d348 <print_enumerated_codecs+0xbc>)
 800d2e4:	2005      	movs	r0, #5
 800d2e6:	f001 ff9d 	bl	800f224 <sail_log>

    for (int counter = 1; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next, counter++) {
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	613b      	str	r3, [r7, #16]
 800d2ee:	e01f      	b.n	800d330 <print_enumerated_codecs+0xa4>
        const struct sail_codec_info *codec_info = codec_bundle_node->codec_bundle->codec_info;
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60fb      	str	r3, [r7, #12]

        SAIL_LOG_DEBUG("%d. [p%d] %s [%s] %s", counter, codec_info->priority, codec_info->name, codec_info->description, codec_info->version);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	7a1b      	ldrb	r3, [r3, #8]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	6952      	ldr	r2, [r2, #20]
 800d306:	68f9      	ldr	r1, [r7, #12]
 800d308:	68c9      	ldr	r1, [r1, #12]
 800d30a:	9104      	str	r1, [sp, #16]
 800d30c:	9203      	str	r2, [sp, #12]
 800d30e:	9302      	str	r3, [sp, #8]
 800d310:	9001      	str	r0, [sp, #4]
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	4b10      	ldr	r3, [pc, #64]	; (800d358 <print_enumerated_codecs+0xcc>)
 800d318:	f240 1245 	movw	r2, #325	; 0x145
 800d31c:	490a      	ldr	r1, [pc, #40]	; (800d348 <print_enumerated_codecs+0xbc>)
 800d31e:	2005      	movs	r0, #5
 800d320:	f001 ff80 	bl	800f224 <sail_log>
    for (int counter = 1; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next, counter++) {
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	617b      	str	r3, [r7, #20]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	3301      	adds	r3, #1
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1dc      	bne.n	800d2f0 <print_enumerated_codecs+0x64>
    }

    return SAIL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	08018ed4 	.word	0x08018ed4
 800d344:	08018e68 	.word	0x08018e68
 800d348:	08018e80 	.word	0x08018e80
 800d34c:	08018ee0 	.word	0x08018ee0
 800d350:	08018edc 	.word	0x08018edc
 800d354:	08018f24 	.word	0x08018f24
 800d358:	08018f38 	.word	0x08018f38

0800d35c <init_context_impl>:
}
#endif

/* Initializes the context and loads all the codec info files. */
#ifdef SAIL_COMBINE_CODECS
static sail_status_t init_context_impl(struct sail_context *context) {
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08a      	sub	sp, #40	; 0x28
 800d360:	af02      	add	r7, sp, #8
 800d362:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(context);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	bf0c      	ite	eq
 800d36a:	2301      	moveq	r3, #1
 800d36c:	2300      	movne	r3, #0
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d013      	beq.n	800d39c <init_context_impl+0x40>
 800d374:	4b35      	ldr	r3, [pc, #212]	; (800d44c <init_context_impl+0xf0>)
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	4b35      	ldr	r3, [pc, #212]	; (800d450 <init_context_impl+0xf4>)
 800d37a:	f240 2233 	movw	r2, #563	; 0x233
 800d37e:	4935      	ldr	r1, [pc, #212]	; (800d454 <init_context_impl+0xf8>)
 800d380:	2001      	movs	r0, #1
 800d382:	f001 ff4f 	bl	800f224 <sail_log>
 800d386:	4b34      	ldr	r3, [pc, #208]	; (800d458 <init_context_impl+0xfc>)
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	4b34      	ldr	r3, [pc, #208]	; (800d45c <init_context_impl+0x100>)
 800d38c:	f240 2233 	movw	r2, #563	; 0x233
 800d390:	4930      	ldr	r1, [pc, #192]	; (800d454 <init_context_impl+0xf8>)
 800d392:	2001      	movs	r0, #1
 800d394:	f001 ff46 	bl	800f224 <sail_log>
 800d398:	2301      	movs	r3, #1
 800d39a:	e053      	b.n	800d444 <init_context_impl+0xe8>
    SAIL_IMPORT extern const char * const sail_enabled_codecs[];
    SAIL_IMPORT extern const char * const sail_enabled_codecs_info[];
#endif

    /* Load codec info objects. */
    struct sail_codec_bundle_node **last_codec_bundle_node = &context->codec_bundle_node;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3304      	adds	r3, #4
 800d3a0:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61bb      	str	r3, [r7, #24]
 800d3a6:	e046      	b.n	800d436 <init_context_impl+0xda>
        const char *sail_codec_info = sail_enabled_codecs_info[i];
 800d3a8:	4a2d      	ldr	r2, [pc, #180]	; (800d460 <init_context_impl+0x104>)
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3b0:	617b      	str	r3, [r7, #20]

        /* Parse codec info. */
        struct sail_codec_bundle_node *codec_bundle_node;
        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle_node(&codec_bundle_node),
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fc fe40 	bl	800a03c <alloc_codec_bundle_node>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	827b      	strh	r3, [r7, #18]
 800d3c0:	8a7b      	ldrh	r3, [r7, #18]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	bf14      	ite	ne
 800d3c6:	2301      	movne	r3, #1
 800d3c8:	2300      	moveq	r3, #0
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d12e      	bne.n	800d42e <init_context_impl+0xd2>
                            /* on error */ continue);

        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle(&codec_bundle_node->codec_bundle),
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc fe58 	bl	800a088 <alloc_codec_bundle>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	823b      	strh	r3, [r7, #16]
 800d3dc:	8a3b      	ldrh	r3, [r7, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bf14      	ite	ne
 800d3e2:	2301      	movne	r3, #1
 800d3e4:	2300      	moveq	r3, #0
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d004      	beq.n	800d3f6 <init_context_impl+0x9a>
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fc fe3c 	bl	800a06c <destroy_codec_bundle_node>
 800d3f4:	e01c      	b.n	800d430 <init_context_impl+0xd4>
                            /* on error */ destroy_codec_bundle_node(codec_bundle_node);
                                           continue);

        SAIL_TRY_OR_EXECUTE(codec_read_info_from_string(sail_codec_info, &codec_bundle_node->codec_bundle->codec_info),
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6978      	ldr	r0, [r7, #20]
 800d3fe:	f7fe f97d 	bl	800b6fc <codec_read_info_from_string>
 800d402:	4603      	mov	r3, r0
 800d404:	81fb      	strh	r3, [r7, #14]
 800d406:	89fb      	ldrh	r3, [r7, #14]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	bf14      	ite	ne
 800d40c:	2301      	movne	r3, #1
 800d40e:	2300      	moveq	r3, #0
 800d410:	b2db      	uxtb	r3, r3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <init_context_impl+0xc4>
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fc fe27 	bl	800a06c <destroy_codec_bundle_node>
 800d41e:	e007      	b.n	800d430 <init_context_impl+0xd4>
                            /* on error */ destroy_codec_bundle_node(codec_bundle_node);
                                           continue);

        *last_codec_bundle_node = codec_bundle_node;
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	601a      	str	r2, [r3, #0]
        last_codec_bundle_node = &codec_bundle_node->next;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	3304      	adds	r3, #4
 800d42a:	61fb      	str	r3, [r7, #28]
 800d42c:	e000      	b.n	800d430 <init_context_impl+0xd4>
        SAIL_TRY_OR_EXECUTE(alloc_codec_bundle_node(&codec_bundle_node),
 800d42e:	bf00      	nop
    for (size_t i = 0; sail_enabled_codecs[i] != NULL; i++) {
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	3301      	adds	r3, #1
 800d434:	61bb      	str	r3, [r7, #24]
 800d436:	4a0b      	ldr	r2, [pc, #44]	; (800d464 <init_context_impl+0x108>)
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1b2      	bne.n	800d3a8 <init_context_impl+0x4c>
                        /* cleanup */ sail_destroy_string_node_chain(client_codecs_paths));

    sail_destroy_string_node_chain(client_codecs_paths);
#endif

    return SAIL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3720      	adds	r7, #32
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	08018ed4 	.word	0x08018ed4
 800d450:	08018e68 	.word	0x08018e68
 800d454:	08018e80 	.word	0x08018e80
 800d458:	08018ee0 	.word	0x08018ee0
 800d45c:	08018edc 	.word	0x08018edc
 800d460:	0801a608 	.word	0x0801a608
 800d464:	0801a604 	.word	0x0801a604

0800d468 <print_no_codecs_found>:

    return SAIL_OK;
}
#endif

static void print_no_codecs_found(void) {
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af02      	add	r7, sp, #8

    const char *message = "\n"
 800d46e:	4b07      	ldr	r3, [pc, #28]	; (800d48c <print_no_codecs_found+0x24>)
 800d470:	607b      	str	r3, [r7, #4]
#else
        "\n*** - Check the installation directory.                                      ***"
#endif
        "\n";

    SAIL_LOG_ERROR("%s", message);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	4b06      	ldr	r3, [pc, #24]	; (800d490 <print_no_codecs_found+0x28>)
 800d478:	f240 22c2 	movw	r2, #706	; 0x2c2
 800d47c:	4905      	ldr	r1, [pc, #20]	; (800d494 <print_no_codecs_found+0x2c>)
 800d47e:	2001      	movs	r0, #1
 800d480:	f001 fed0 	bl	800f224 <sail_log>
}
 800d484:	bf00      	nop
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	08018f50 	.word	0x08018f50
 800d490:	08018edc 	.word	0x08018edc
 800d494:	08018e80 	.word	0x08018e80

0800d498 <print_build_statistics>:

static void print_build_statistics(void) {
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af02      	add	r7, sp, #8

    SAIL_LOG_INFO("Version: %s", SAIL_VERSION_STRING);
 800d49e:	4b17      	ldr	r3, [pc, #92]	; (800d4fc <print_build_statistics+0x64>)
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	4b17      	ldr	r3, [pc, #92]	; (800d500 <print_build_statistics+0x68>)
 800d4a4:	f240 22c7 	movw	r2, #711	; 0x2c7
 800d4a8:	4916      	ldr	r1, [pc, #88]	; (800d504 <print_build_statistics+0x6c>)
 800d4aa:	2003      	movs	r0, #3
 800d4ac:	f001 feba 	bl	800f224 <sail_log>

#ifdef SAIL_VCPKG
    SAIL_LOG_INFO("Build type: VCPKG");
#else
    SAIL_LOG_INFO("Build type: Standalone");
 800d4b0:	4b15      	ldr	r3, [pc, #84]	; (800d508 <print_build_statistics+0x70>)
 800d4b2:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 800d4b6:	4913      	ldr	r1, [pc, #76]	; (800d504 <print_build_statistics+0x6c>)
 800d4b8:	2003      	movs	r0, #3
 800d4ba:	f001 feb3 	bl	800f224 <sail_log>
#endif

#ifdef SAIL_STATIC
    SAIL_LOG_INFO("Static build: yes");
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <print_build_statistics+0x74>)
 800d4c0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800d4c4:	490f      	ldr	r1, [pc, #60]	; (800d504 <print_build_statistics+0x6c>)
 800d4c6:	2003      	movs	r0, #3
 800d4c8:	f001 feac 	bl	800f224 <sail_log>
#else
    SAIL_LOG_INFO("Static build: no");
#endif

#ifdef SAIL_COMBINE_CODECS
    SAIL_LOG_INFO("Combine codecs: yes");
 800d4cc:	4b10      	ldr	r3, [pc, #64]	; (800d510 <print_build_statistics+0x78>)
 800d4ce:	f240 22d6 	movw	r2, #726	; 0x2d6
 800d4d2:	490c      	ldr	r1, [pc, #48]	; (800d504 <print_build_statistics+0x6c>)
 800d4d4:	2003      	movs	r0, #3
 800d4d6:	f001 fea5 	bl	800f224 <sail_log>
#endif

#ifdef SAIL_THREAD_SAFE
    SAIL_LOG_INFO("Thread-safe: yes");
#else
    SAIL_LOG_INFO("Thread-safe: no");
 800d4da:	4b0e      	ldr	r3, [pc, #56]	; (800d514 <print_build_statistics+0x7c>)
 800d4dc:	f240 22de 	movw	r2, #734	; 0x2de
 800d4e0:	4908      	ldr	r1, [pc, #32]	; (800d504 <print_build_statistics+0x6c>)
 800d4e2:	2003      	movs	r0, #3
 800d4e4:	f001 fe9e 	bl	800f224 <sail_log>
#endif

#ifdef SAIL_THIRD_PARTY_CODECS_PATH
    SAIL_LOG_INFO("SAIL_THIRD_PARTY_CODECS_PATH: enabled");
#else
    SAIL_LOG_INFO("SAIL_THIRD_PARTY_CODECS_PATH: disabled");
 800d4e8:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <print_build_statistics+0x80>)
 800d4ea:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d4ee:	4905      	ldr	r1, [pc, #20]	; (800d504 <print_build_statistics+0x6c>)
 800d4f0:	2003      	movs	r0, #3
 800d4f2:	f001 fe97 	bl	800f224 <sail_log>
#endif
}
 800d4f6:	bf00      	nop
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	080190a4 	.word	0x080190a4
 800d500:	08019098 	.word	0x08019098
 800d504:	08018e80 	.word	0x08018e80
 800d508:	080190ac 	.word	0x080190ac
 800d50c:	080190c4 	.word	0x080190c4
 800d510:	080190d8 	.word	0x080190d8
 800d514:	080190ec 	.word	0x080190ec
 800d518:	080190fc 	.word	0x080190fc

0800d51c <init_context>:

/* Initializes the context and loads all the codec info files if the context is not initialized. */
static sail_status_t init_context(struct sail_context *context, int flags) {
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af02      	add	r7, sp, #8
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	bf0c      	ite	eq
 800d52c:	2301      	moveq	r3, #1
 800d52e:	2300      	movne	r3, #0
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d013      	beq.n	800d55e <init_context+0x42>
 800d536:	4b3e      	ldr	r3, [pc, #248]	; (800d630 <init_context+0x114>)
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	4b3e      	ldr	r3, [pc, #248]	; (800d634 <init_context+0x118>)
 800d53c:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d540:	493d      	ldr	r1, [pc, #244]	; (800d638 <init_context+0x11c>)
 800d542:	2001      	movs	r0, #1
 800d544:	f001 fe6e 	bl	800f224 <sail_log>
 800d548:	4b3c      	ldr	r3, [pc, #240]	; (800d63c <init_context+0x120>)
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	4b3c      	ldr	r3, [pc, #240]	; (800d640 <init_context+0x124>)
 800d54e:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d552:	4939      	ldr	r1, [pc, #228]	; (800d638 <init_context+0x11c>)
 800d554:	2001      	movs	r0, #1
 800d556:	f001 fe65 	bl	800f224 <sail_log>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e064      	b.n	800d628 <init_context+0x10c>

    if (context->initialized) {
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <init_context+0x4e>
        return SAIL_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	e05e      	b.n	800d628 <init_context+0x10c>
    }

    context->initialized = true;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	701a      	strb	r2, [r3, #0]

    /* Time counter. */
    uint64_t start_time = sail_now();
 800d570:	f003 fd2a 	bl	8010fc8 <sail_now>
 800d574:	e9c7 0104 	strd	r0, r1, [r7, #16]

    print_build_statistics();
 800d578:	f7ff ff8e 	bl	800d498 <print_build_statistics>
    if (get_sail_dll_path(dll_path, sizeof(dll_path)) == SAIL_OK) {
        SAIL_TRY_OR_SUPPRESS(add_dll_directory(dll_path));
    }
#endif

    SAIL_TRY(init_context_impl(context));
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff feed 	bl	800d35c <init_context_impl>
 800d582:	4603      	mov	r3, r0
 800d584:	81fb      	strh	r3, [r7, #14]
 800d586:	89fb      	ldrh	r3, [r7, #14]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	bf14      	ite	ne
 800d58c:	2301      	movne	r3, #1
 800d58e:	2300      	moveq	r3, #0
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <init_context+0x7e>
 800d596:	89fb      	ldrh	r3, [r7, #14]
 800d598:	e046      	b.n	800d628 <init_context+0x10c>

    if (context->codec_bundle_node == NULL) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <init_context+0x8a>
        print_no_codecs_found();
 800d5a2:	f7ff ff61 	bl	800d468 <print_no_codecs_found>
    }

    SAIL_TRY(sort_enumerated_codecs(context));
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff fdf8 	bl	800d19c <sort_enumerated_codecs>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	81bb      	strh	r3, [r7, #12]
 800d5b0:	89bb      	ldrh	r3, [r7, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	bf14      	ite	ne
 800d5b6:	2301      	movne	r3, #1
 800d5b8:	2300      	moveq	r3, #0
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <init_context+0xa8>
 800d5c0:	89bb      	ldrh	r3, [r7, #12]
 800d5c2:	e031      	b.n	800d628 <init_context+0x10c>

    SAIL_TRY(print_enumerated_codecs(context));
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff fe61 	bl	800d28c <print_enumerated_codecs>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	817b      	strh	r3, [r7, #10]
 800d5ce:	897b      	ldrh	r3, [r7, #10]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	bf14      	ite	ne
 800d5d4:	2301      	movne	r3, #1
 800d5d6:	2300      	moveq	r3, #0
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <init_context+0xc6>
 800d5de:	897b      	ldrh	r3, [r7, #10]
 800d5e0:	e022      	b.n	800d628 <init_context+0x10c>

    if (flags & SAIL_FLAG_PRELOAD_CODECS) {
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00e      	beq.n	800d60a <init_context+0xee>
        SAIL_TRY(preload_codecs(context));
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff fd57 	bl	800d0a0 <preload_codecs>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	813b      	strh	r3, [r7, #8]
 800d5f6:	893b      	ldrh	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	bf14      	ite	ne
 800d5fc:	2301      	movne	r3, #1
 800d5fe:	2300      	moveq	r3, #0
 800d600:	b2db      	uxtb	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <init_context+0xee>
 800d606:	893b      	ldrh	r3, [r7, #8]
 800d608:	e00e      	b.n	800d628 <init_context+0x10c>
    }

    SAIL_LOG_DEBUG("Initialized in %lu ms.", (unsigned long)(sail_now() - start_time));
 800d60a:	f003 fcdd 	bl	8010fc8 <sail_now>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	1ad3      	subs	r3, r2, r3
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	4b0a      	ldr	r3, [pc, #40]	; (800d644 <init_context+0x128>)
 800d61a:	f240 320e 	movw	r2, #782	; 0x30e
 800d61e:	4906      	ldr	r1, [pc, #24]	; (800d638 <init_context+0x11c>)
 800d620:	2005      	movs	r0, #5
 800d622:	f001 fdff 	bl	800f224 <sail_log>

    return SAIL_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	08018ed4 	.word	0x08018ed4
 800d634:	08018e68 	.word	0x08018e68
 800d638:	08018e80 	.word	0x08018e80
 800d63c:	08018ee0 	.word	0x08018ee0
 800d640:	08018edc 	.word	0x08018edc
 800d644:	08019124 	.word	0x08019124

0800d648 <fetch_global_context_guarded>:
    SAIL_TRY(unlock_context());

    return SAIL_OK;
}

sail_status_t fetch_global_context_guarded(struct sail_context **context) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]

    SAIL_TRY(fetch_global_context_guarded_with_flags(context, /* flags */ 0));
 800d650:	2100      	movs	r1, #0
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f82a 	bl	800d6ac <fetch_global_context_guarded_with_flags>
 800d658:	4603      	mov	r3, r0
 800d65a:	81fb      	strh	r3, [r7, #14]
 800d65c:	89fb      	ldrh	r3, [r7, #14]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bf14      	ite	ne
 800d662:	2301      	movne	r3, #1
 800d664:	2300      	moveq	r3, #0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <fetch_global_context_guarded+0x28>
 800d66c:	89fb      	ldrh	r3, [r7, #14]
 800d66e:	e000      	b.n	800d672 <fetch_global_context_guarded+0x2a>

    return SAIL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <fetch_global_context_unsafe>:

sail_status_t fetch_global_context_unsafe(struct sail_context **context) {
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]

    SAIL_TRY(fetch_global_context_unsafe_with_flags(context, /* flags */ 0));
 800d682:	2100      	movs	r1, #0
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f86f 	bl	800d768 <fetch_global_context_unsafe_with_flags>
 800d68a:	4603      	mov	r3, r0
 800d68c:	81fb      	strh	r3, [r7, #14]
 800d68e:	89fb      	ldrh	r3, [r7, #14]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bf14      	ite	ne
 800d694:	2301      	movne	r3, #1
 800d696:	2300      	moveq	r3, #0
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <fetch_global_context_unsafe+0x28>
 800d69e:	89fb      	ldrh	r3, [r7, #14]
 800d6a0:	e000      	b.n	800d6a4 <fetch_global_context_unsafe+0x2a>

    return SAIL_OK;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <fetch_global_context_guarded_with_flags>:

sail_status_t fetch_global_context_guarded_with_flags(struct sail_context **context, int flags) {
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	bf0c      	ite	eq
 800d6bc:	2301      	moveq	r3, #1
 800d6be:	2300      	movne	r3, #0
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d013      	beq.n	800d6ee <fetch_global_context_guarded_with_flags+0x42>
 800d6c6:	4b23      	ldr	r3, [pc, #140]	; (800d754 <fetch_global_context_guarded_with_flags+0xa8>)
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	4b23      	ldr	r3, [pc, #140]	; (800d758 <fetch_global_context_guarded_with_flags+0xac>)
 800d6cc:	f44f 724d 	mov.w	r2, #820	; 0x334
 800d6d0:	4922      	ldr	r1, [pc, #136]	; (800d75c <fetch_global_context_guarded_with_flags+0xb0>)
 800d6d2:	2001      	movs	r0, #1
 800d6d4:	f001 fda6 	bl	800f224 <sail_log>
 800d6d8:	4b21      	ldr	r3, [pc, #132]	; (800d760 <fetch_global_context_guarded_with_flags+0xb4>)
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	4b21      	ldr	r3, [pc, #132]	; (800d764 <fetch_global_context_guarded_with_flags+0xb8>)
 800d6de:	f44f 724d 	mov.w	r2, #820	; 0x334
 800d6e2:	491e      	ldr	r1, [pc, #120]	; (800d75c <fetch_global_context_guarded_with_flags+0xb0>)
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	f001 fd9d 	bl	800f224 <sail_log>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e02e      	b.n	800d74c <fetch_global_context_guarded_with_flags+0xa0>

    SAIL_TRY(lock_context());
 800d6ee:	f000 f891 	bl	800d814 <lock_context>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	81fb      	strh	r3, [r7, #14]
 800d6f6:	89fb      	ldrh	r3, [r7, #14]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	bf14      	ite	ne
 800d6fc:	2301      	movne	r3, #1
 800d6fe:	2300      	moveq	r3, #0
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <fetch_global_context_guarded_with_flags+0x5e>
 800d706:	89fb      	ldrh	r3, [r7, #14]
 800d708:	e020      	b.n	800d74c <fetch_global_context_guarded_with_flags+0xa0>

    SAIL_TRY_OR_CLEANUP(fetch_global_context_unsafe_with_flags(context, flags),
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f82b 	bl	800d768 <fetch_global_context_unsafe_with_flags>
 800d712:	4603      	mov	r3, r0
 800d714:	81bb      	strh	r3, [r7, #12]
 800d716:	89bb      	ldrh	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	bf14      	ite	ne
 800d71c:	2301      	movne	r3, #1
 800d71e:	2300      	moveq	r3, #0
 800d720:	b2db      	uxtb	r3, r3
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <fetch_global_context_guarded_with_flags+0x82>
 800d726:	f000 f87d 	bl	800d824 <unlock_context>
 800d72a:	89bb      	ldrh	r3, [r7, #12]
 800d72c:	e00e      	b.n	800d74c <fetch_global_context_guarded_with_flags+0xa0>
                        /* cleanup */ unlock_context());

    SAIL_TRY(unlock_context());
 800d72e:	f000 f879 	bl	800d824 <unlock_context>
 800d732:	4603      	mov	r3, r0
 800d734:	817b      	strh	r3, [r7, #10]
 800d736:	897b      	ldrh	r3, [r7, #10]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	bf14      	ite	ne
 800d73c:	2301      	movne	r3, #1
 800d73e:	2300      	moveq	r3, #0
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <fetch_global_context_guarded_with_flags+0x9e>
 800d746:	897b      	ldrh	r3, [r7, #10]
 800d748:	e000      	b.n	800d74c <fetch_global_context_guarded_with_flags+0xa0>

    return SAIL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	08018ed4 	.word	0x08018ed4
 800d758:	08018e68 	.word	0x08018e68
 800d75c:	08018e80 	.word	0x08018e80
 800d760:	08018ee0 	.word	0x08018ee0
 800d764:	08018edc 	.word	0x08018edc

0800d768 <fetch_global_context_unsafe_with_flags>:

sail_status_t fetch_global_context_unsafe_with_flags(struct sail_context **context, int flags) {
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(context);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	bf0c      	ite	eq
 800d778:	2301      	moveq	r3, #1
 800d77a:	2300      	movne	r3, #0
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d013      	beq.n	800d7aa <fetch_global_context_unsafe_with_flags+0x42>
 800d782:	4b1f      	ldr	r3, [pc, #124]	; (800d800 <fetch_global_context_unsafe_with_flags+0x98>)
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	4b1f      	ldr	r3, [pc, #124]	; (800d804 <fetch_global_context_unsafe_with_flags+0x9c>)
 800d788:	f240 3242 	movw	r2, #834	; 0x342
 800d78c:	491e      	ldr	r1, [pc, #120]	; (800d808 <fetch_global_context_unsafe_with_flags+0xa0>)
 800d78e:	2001      	movs	r0, #1
 800d790:	f001 fd48 	bl	800f224 <sail_log>
 800d794:	4b1d      	ldr	r3, [pc, #116]	; (800d80c <fetch_global_context_unsafe_with_flags+0xa4>)
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <fetch_global_context_unsafe_with_flags+0xa8>)
 800d79a:	f240 3242 	movw	r2, #834	; 0x342
 800d79e:	491a      	ldr	r1, [pc, #104]	; (800d808 <fetch_global_context_unsafe_with_flags+0xa0>)
 800d7a0:	2001      	movs	r0, #1
 800d7a2:	f001 fd3f 	bl	800f224 <sail_log>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e025      	b.n	800d7f6 <fetch_global_context_unsafe_with_flags+0x8e>

    struct sail_context *local_context;

    SAIL_TRY(allocate_global_context(&local_context));
 800d7aa:	f107 0308 	add.w	r3, r7, #8
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fc24 	bl	800cffc <allocate_global_context>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	81fb      	strh	r3, [r7, #14]
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	bf14      	ite	ne
 800d7be:	2301      	movne	r3, #1
 800d7c0:	2300      	moveq	r3, #0
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <fetch_global_context_unsafe_with_flags+0x64>
 800d7c8:	89fb      	ldrh	r3, [r7, #14]
 800d7ca:	e014      	b.n	800d7f6 <fetch_global_context_unsafe_with_flags+0x8e>
    SAIL_TRY(init_context(local_context, flags));
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fea3 	bl	800d51c <init_context>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	81bb      	strh	r3, [r7, #12]
 800d7da:	89bb      	ldrh	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	bf14      	ite	ne
 800d7e0:	2301      	movne	r3, #1
 800d7e2:	2300      	moveq	r3, #0
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <fetch_global_context_unsafe_with_flags+0x86>
 800d7ea:	89bb      	ldrh	r3, [r7, #12]
 800d7ec:	e003      	b.n	800d7f6 <fetch_global_context_unsafe_with_flags+0x8e>

    *context = local_context;
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	08018ed4 	.word	0x08018ed4
 800d804:	08018e68 	.word	0x08018e68
 800d808:	08018e80 	.word	0x08018e80
 800d80c:	08018ee0 	.word	0x08018ee0
 800d810:	08018edc 	.word	0x08018edc

0800d814 <lock_context>:
    SAIL_LOG_DEBUG("Unloaded codecs number: %d", counter);

    return SAIL_OK;
}

sail_status_t lock_context(void) {
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
    SAIL_TRY(initialize_global_context_guard_mutex());

    SAIL_TRY(threading_lock_mutex(&global_context_guard_mutex));
#endif

    return SAIL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <unlock_context>:

sail_status_t unlock_context(void) {
 800d824:	b480      	push	{r7}
 800d826:	af00      	add	r7, sp, #0

#ifdef SAIL_THREAD_SAFE
    SAIL_TRY(threading_unlock_mutex(&global_context_guard_mutex));
#endif

    return SAIL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <sail_alloc_hash_map>:
}

/*
 * Public functions.
 */
sail_status_t sail_alloc_hash_map(struct sail_hash_map **hash_map) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af02      	add	r7, sp, #8
 800d83a:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(hash_map);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	bf0c      	ite	eq
 800d842:	2301      	moveq	r3, #1
 800d844:	2300      	movne	r3, #0
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d011      	beq.n	800d870 <sail_alloc_hash_map+0x3c>
 800d84c:	4b1d      	ldr	r3, [pc, #116]	; (800d8c4 <sail_alloc_hash_map+0x90>)
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	4b1d      	ldr	r3, [pc, #116]	; (800d8c8 <sail_alloc_hash_map+0x94>)
 800d852:	2232      	movs	r2, #50	; 0x32
 800d854:	491d      	ldr	r1, [pc, #116]	; (800d8cc <sail_alloc_hash_map+0x98>)
 800d856:	2001      	movs	r0, #1
 800d858:	f001 fce4 	bl	800f224 <sail_log>
 800d85c:	4b1c      	ldr	r3, [pc, #112]	; (800d8d0 <sail_alloc_hash_map+0x9c>)
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <sail_alloc_hash_map+0xa0>)
 800d862:	2232      	movs	r2, #50	; 0x32
 800d864:	4919      	ldr	r1, [pc, #100]	; (800d8cc <sail_alloc_hash_map+0x98>)
 800d866:	2001      	movs	r0, #1
 800d868:	f001 fcdc 	bl	800f224 <sail_log>
 800d86c:	2301      	movs	r3, #1
 800d86e:	e024      	b.n	800d8ba <sail_alloc_hash_map+0x86>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_hash_map), &ptr));
 800d870:	f107 030c 	add.w	r3, r7, #12
 800d874:	4619      	mov	r1, r3
 800d876:	2080      	movs	r0, #128	; 0x80
 800d878:	f001 fdcc 	bl	800f414 <sail_malloc>
 800d87c:	4603      	mov	r3, r0
 800d87e:	827b      	strh	r3, [r7, #18]
 800d880:	8a7b      	ldrh	r3, [r7, #18]
 800d882:	2b00      	cmp	r3, #0
 800d884:	bf14      	ite	ne
 800d886:	2301      	movne	r3, #1
 800d888:	2300      	moveq	r3, #0
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <sail_alloc_hash_map+0x60>
 800d890:	8a7b      	ldrh	r3, [r7, #18]
 800d892:	e012      	b.n	800d8ba <sail_alloc_hash_map+0x86>
    *hash_map = ptr;
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	601a      	str	r2, [r3, #0]

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d89a:	2300      	movs	r3, #0
 800d89c:	617b      	str	r3, [r7, #20]
 800d89e:	e008      	b.n	800d8b2 <sail_alloc_hash_map+0x7e>
        (*hash_map)->buckets[i] = NULL;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	617b      	str	r3, [r7, #20]
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b1f      	cmp	r3, #31
 800d8b6:	d9f3      	bls.n	800d8a0 <sail_alloc_hash_map+0x6c>
    }

    return SAIL_OK;
 800d8b8:	2300      	movs	r3, #0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	08019214 	.word	0x08019214
 800d8c8:	080191a8 	.word	0x080191a8
 800d8cc:	080191c0 	.word	0x080191c0
 800d8d0:	08019224 	.word	0x08019224
 800d8d4:	08019220 	.word	0x08019220

0800d8d8 <sail_destroy_hash_map>:

void sail_destroy_hash_map(struct sail_hash_map *hash_map) {
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]

    if (hash_map == NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d006      	beq.n	800d8f4 <sail_destroy_hash_map+0x1c>
        return;
    }

    sail_clear_hash_map(hash_map);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f808 	bl	800d8fc <sail_clear_hash_map>

    sail_free(hash_map);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f001 fe19 	bl	800f524 <sail_free>
 800d8f2:	e000      	b.n	800d8f6 <sail_destroy_hash_map+0x1e>
        return;
 800d8f4:	bf00      	nop
}
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <sail_clear_hash_map>:
            return;
        }
    }
}

void sail_clear_hash_map(struct sail_hash_map *hash_map) {
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d904:	2300      	movs	r3, #0
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	e00e      	b.n	800d928 <sail_clear_hash_map+0x2c>
        sail_destroy_variant_node_chain(hash_map->buckets[i]);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d912:	4618      	mov	r0, r3
 800d914:	f003 fd32 	bl	801137c <sail_destroy_variant_node_chain>
        hash_map->buckets[i] = NULL;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	2100      	movs	r1, #0
 800d91e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3301      	adds	r3, #1
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b1f      	cmp	r3, #31
 800d92c:	d9ed      	bls.n	800d90a <sail_clear_hash_map+0xe>
    }
}
 800d92e:	bf00      	nop
 800d930:	bf00      	nop
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <sail_copy_hash_map>:

sail_status_t sail_copy_hash_map(const struct sail_hash_map *source_hash_map, struct sail_hash_map **target_hash_map) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af02      	add	r7, sp, #8
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source_hash_map);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	bf0c      	ite	eq
 800d948:	2301      	moveq	r3, #1
 800d94a:	2300      	movne	r3, #0
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d011      	beq.n	800d976 <sail_copy_hash_map+0x3e>
 800d952:	4b34      	ldr	r3, [pc, #208]	; (800da24 <sail_copy_hash_map+0xec>)
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4b34      	ldr	r3, [pc, #208]	; (800da28 <sail_copy_hash_map+0xf0>)
 800d958:	22e3      	movs	r2, #227	; 0xe3
 800d95a:	4934      	ldr	r1, [pc, #208]	; (800da2c <sail_copy_hash_map+0xf4>)
 800d95c:	2001      	movs	r0, #1
 800d95e:	f001 fc61 	bl	800f224 <sail_log>
 800d962:	4b33      	ldr	r3, [pc, #204]	; (800da30 <sail_copy_hash_map+0xf8>)
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	4b33      	ldr	r3, [pc, #204]	; (800da34 <sail_copy_hash_map+0xfc>)
 800d968:	22e3      	movs	r2, #227	; 0xe3
 800d96a:	4930      	ldr	r1, [pc, #192]	; (800da2c <sail_copy_hash_map+0xf4>)
 800d96c:	2001      	movs	r0, #1
 800d96e:	f001 fc59 	bl	800f224 <sail_log>
 800d972:	2301      	movs	r3, #1
 800d974:	e052      	b.n	800da1c <sail_copy_hash_map+0xe4>
    SAIL_CHECK_PTR(target_hash_map);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	bf0c      	ite	eq
 800d97c:	2301      	moveq	r3, #1
 800d97e:	2300      	movne	r3, #0
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <sail_copy_hash_map+0x72>
 800d986:	4b2c      	ldr	r3, [pc, #176]	; (800da38 <sail_copy_hash_map+0x100>)
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	4b27      	ldr	r3, [pc, #156]	; (800da28 <sail_copy_hash_map+0xf0>)
 800d98c:	22e4      	movs	r2, #228	; 0xe4
 800d98e:	4927      	ldr	r1, [pc, #156]	; (800da2c <sail_copy_hash_map+0xf4>)
 800d990:	2001      	movs	r0, #1
 800d992:	f001 fc47 	bl	800f224 <sail_log>
 800d996:	4b26      	ldr	r3, [pc, #152]	; (800da30 <sail_copy_hash_map+0xf8>)
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	4b26      	ldr	r3, [pc, #152]	; (800da34 <sail_copy_hash_map+0xfc>)
 800d99c:	22e4      	movs	r2, #228	; 0xe4
 800d99e:	4923      	ldr	r1, [pc, #140]	; (800da2c <sail_copy_hash_map+0xf4>)
 800d9a0:	2001      	movs	r0, #1
 800d9a2:	f001 fc3f 	bl	800f224 <sail_log>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e038      	b.n	800da1c <sail_copy_hash_map+0xe4>

    struct sail_hash_map *hash_map_local;
    SAIL_TRY(sail_alloc_hash_map(&hash_map_local));
 800d9aa:	f107 030c 	add.w	r3, r7, #12
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff ff40 	bl	800d834 <sail_alloc_hash_map>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	827b      	strh	r3, [r7, #18]
 800d9b8:	8a7b      	ldrh	r3, [r7, #18]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	bf14      	ite	ne
 800d9be:	2301      	movne	r3, #1
 800d9c0:	2300      	moveq	r3, #0
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <sail_copy_hash_map+0x94>
 800d9c8:	8a7b      	ldrh	r3, [r7, #18]
 800d9ca:	e027      	b.n	800da1c <sail_copy_hash_map+0xe4>

    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	e01d      	b.n	800da0e <sail_copy_hash_map+0xd6>
        SAIL_TRY_OR_CLEANUP(sail_copy_variant_node_chain(source_hash_map->buckets[i], &hash_map_local->buckets[i]),
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	f003 fcd8 	bl	8011398 <sail_copy_variant_node_chain>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	823b      	strh	r3, [r7, #16]
 800d9ec:	8a3b      	ldrh	r3, [r7, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf14      	ite	ne
 800d9f2:	2301      	movne	r3, #1
 800d9f4:	2300      	moveq	r3, #0
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d005      	beq.n	800da08 <sail_copy_hash_map+0xd0>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7ff ff6a 	bl	800d8d8 <sail_destroy_hash_map>
 800da04:	8a3b      	ldrh	r3, [r7, #16]
 800da06:	e009      	b.n	800da1c <sail_copy_hash_map+0xe4>
    for (size_t i = 0; i < SAIL_HASH_MAP_SIZE; i++) {
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	3301      	adds	r3, #1
 800da0c:	617b      	str	r3, [r7, #20]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2b1f      	cmp	r3, #31
 800da12:	d9de      	bls.n	800d9d2 <sail_copy_hash_map+0x9a>
                            /* cleanup */ sail_destroy_hash_map(hash_map_local));
    }

    *target_hash_map = hash_map_local;
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	08019244 	.word	0x08019244
 800da28:	080191a8 	.word	0x080191a8
 800da2c:	080191c0 	.word	0x080191c0
 800da30:	08019224 	.word	0x08019224
 800da34:	08019220 	.word	0x08019220
 800da38:	08019254 	.word	0x08019254

0800da3c <sail_alloc_iccp>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_iccp(struct sail_iccp **iccp) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af02      	add	r7, sp, #8
 800da42:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(iccp);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	bf0c      	ite	eq
 800da4a:	2301      	moveq	r3, #1
 800da4c:	2300      	movne	r3, #0
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	d011      	beq.n	800da78 <sail_alloc_iccp+0x3c>
 800da54:	4b19      	ldr	r3, [pc, #100]	; (800dabc <sail_alloc_iccp+0x80>)
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	4b19      	ldr	r3, [pc, #100]	; (800dac0 <sail_alloc_iccp+0x84>)
 800da5a:	2222      	movs	r2, #34	; 0x22
 800da5c:	4919      	ldr	r1, [pc, #100]	; (800dac4 <sail_alloc_iccp+0x88>)
 800da5e:	2001      	movs	r0, #1
 800da60:	f001 fbe0 	bl	800f224 <sail_log>
 800da64:	4b18      	ldr	r3, [pc, #96]	; (800dac8 <sail_alloc_iccp+0x8c>)
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	4b18      	ldr	r3, [pc, #96]	; (800dacc <sail_alloc_iccp+0x90>)
 800da6a:	2222      	movs	r2, #34	; 0x22
 800da6c:	4915      	ldr	r1, [pc, #84]	; (800dac4 <sail_alloc_iccp+0x88>)
 800da6e:	2001      	movs	r0, #1
 800da70:	f001 fbd8 	bl	800f224 <sail_log>
 800da74:	2301      	movs	r3, #1
 800da76:	e01d      	b.n	800dab4 <sail_alloc_iccp+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_iccp), &ptr));
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	4619      	mov	r1, r3
 800da7e:	2008      	movs	r0, #8
 800da80:	f001 fcc8 	bl	800f414 <sail_malloc>
 800da84:	4603      	mov	r3, r0
 800da86:	81fb      	strh	r3, [r7, #14]
 800da88:	89fb      	ldrh	r3, [r7, #14]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bf14      	ite	ne
 800da8e:	2301      	movne	r3, #1
 800da90:	2300      	moveq	r3, #0
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <sail_alloc_iccp+0x60>
 800da98:	89fb      	ldrh	r3, [r7, #14]
 800da9a:	e00b      	b.n	800dab4 <sail_alloc_iccp+0x78>
    *iccp = ptr;
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	601a      	str	r2, [r3, #0]

    (*iccp)->data        = NULL;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]
    (*iccp)->data_length = 0;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2200      	movs	r2, #0
 800dab0:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	080192cc 	.word	0x080192cc
 800dac0:	08019264 	.word	0x08019264
 800dac4:	0801927c 	.word	0x0801927c
 800dac8:	080192d8 	.word	0x080192d8
 800dacc:	080192d4 	.word	0x080192d4

0800dad0 <sail_alloc_iccp_move_data>:
    *iccp = iccp_local;

    return SAIL_OK;
}

sail_status_t sail_alloc_iccp_move_data(void *data, unsigned data_length, struct sail_iccp **iccp) {
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(data);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	bf0c      	ite	eq
 800dae2:	2301      	moveq	r3, #1
 800dae4:	2300      	movne	r3, #0
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d011      	beq.n	800db10 <sail_alloc_iccp_move_data+0x40>
 800daec:	4b23      	ldr	r3, [pc, #140]	; (800db7c <sail_alloc_iccp_move_data+0xac>)
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	4b23      	ldr	r3, [pc, #140]	; (800db80 <sail_alloc_iccp_move_data+0xb0>)
 800daf2:	2243      	movs	r2, #67	; 0x43
 800daf4:	4923      	ldr	r1, [pc, #140]	; (800db84 <sail_alloc_iccp_move_data+0xb4>)
 800daf6:	2001      	movs	r0, #1
 800daf8:	f001 fb94 	bl	800f224 <sail_log>
 800dafc:	4b22      	ldr	r3, [pc, #136]	; (800db88 <sail_alloc_iccp_move_data+0xb8>)
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	4b22      	ldr	r3, [pc, #136]	; (800db8c <sail_alloc_iccp_move_data+0xbc>)
 800db02:	2243      	movs	r2, #67	; 0x43
 800db04:	491f      	ldr	r1, [pc, #124]	; (800db84 <sail_alloc_iccp_move_data+0xb4>)
 800db06:	2001      	movs	r0, #1
 800db08:	f001 fb8c 	bl	800f224 <sail_log>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e031      	b.n	800db74 <sail_alloc_iccp_move_data+0xa4>
    SAIL_CHECK_PTR(iccp);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	bf0c      	ite	eq
 800db16:	2301      	moveq	r3, #1
 800db18:	2300      	movne	r3, #0
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d011      	beq.n	800db44 <sail_alloc_iccp_move_data+0x74>
 800db20:	4b1b      	ldr	r3, [pc, #108]	; (800db90 <sail_alloc_iccp_move_data+0xc0>)
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	4b16      	ldr	r3, [pc, #88]	; (800db80 <sail_alloc_iccp_move_data+0xb0>)
 800db26:	2244      	movs	r2, #68	; 0x44
 800db28:	4916      	ldr	r1, [pc, #88]	; (800db84 <sail_alloc_iccp_move_data+0xb4>)
 800db2a:	2001      	movs	r0, #1
 800db2c:	f001 fb7a 	bl	800f224 <sail_log>
 800db30:	4b15      	ldr	r3, [pc, #84]	; (800db88 <sail_alloc_iccp_move_data+0xb8>)
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	4b15      	ldr	r3, [pc, #84]	; (800db8c <sail_alloc_iccp_move_data+0xbc>)
 800db36:	2244      	movs	r2, #68	; 0x44
 800db38:	4912      	ldr	r1, [pc, #72]	; (800db84 <sail_alloc_iccp_move_data+0xb4>)
 800db3a:	2001      	movs	r0, #1
 800db3c:	f001 fb72 	bl	800f224 <sail_log>
 800db40:	2301      	movs	r3, #1
 800db42:	e017      	b.n	800db74 <sail_alloc_iccp_move_data+0xa4>

    SAIL_TRY(sail_alloc_iccp(iccp));
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7ff ff79 	bl	800da3c <sail_alloc_iccp>
 800db4a:	4603      	mov	r3, r0
 800db4c:	82fb      	strh	r3, [r7, #22]
 800db4e:	8afb      	ldrh	r3, [r7, #22]
 800db50:	2b00      	cmp	r3, #0
 800db52:	bf14      	ite	ne
 800db54:	2301      	movne	r3, #1
 800db56:	2300      	moveq	r3, #0
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <sail_alloc_iccp_move_data+0x92>
 800db5e:	8afb      	ldrh	r3, [r7, #22]
 800db60:	e008      	b.n	800db74 <sail_alloc_iccp_move_data+0xa4>

    (*iccp)->data        = data;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	601a      	str	r2, [r3, #0]
    (*iccp)->data_length = data_length;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	080192ec 	.word	0x080192ec
 800db80:	08019264 	.word	0x08019264
 800db84:	0801927c 	.word	0x0801927c
 800db88:	080192d8 	.word	0x080192d8
 800db8c:	080192d4 	.word	0x080192d4
 800db90:	080192cc 	.word	0x080192cc

0800db94 <sail_destroy_iccp>:

void sail_destroy_iccp(struct sail_iccp *iccp) {
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]

    if (iccp == NULL) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d008      	beq.n	800dbb4 <sail_destroy_iccp+0x20>
        return;
    }

    sail_free(iccp->data);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f001 fcbc 	bl	800f524 <sail_free>
    sail_free(iccp);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f001 fcb9 	bl	800f524 <sail_free>
 800dbb2:	e000      	b.n	800dbb6 <sail_destroy_iccp+0x22>
        return;
 800dbb4:	bf00      	nop
}
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <sail_alloc_image>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_image(struct sail_image **image) {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af02      	add	r7, sp, #8
 800dbc2:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(image);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	bf0c      	ite	eq
 800dbca:	2301      	moveq	r3, #1
 800dbcc:	2300      	movne	r3, #0
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d011      	beq.n	800dbf8 <sail_alloc_image+0x3c>
 800dbd4:	4b31      	ldr	r3, [pc, #196]	; (800dc9c <sail_alloc_image+0xe0>)
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	4b31      	ldr	r3, [pc, #196]	; (800dca0 <sail_alloc_image+0xe4>)
 800dbda:	2222      	movs	r2, #34	; 0x22
 800dbdc:	4931      	ldr	r1, [pc, #196]	; (800dca4 <sail_alloc_image+0xe8>)
 800dbde:	2001      	movs	r0, #1
 800dbe0:	f001 fb20 	bl	800f224 <sail_log>
 800dbe4:	4b30      	ldr	r3, [pc, #192]	; (800dca8 <sail_alloc_image+0xec>)
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	4b30      	ldr	r3, [pc, #192]	; (800dcac <sail_alloc_image+0xf0>)
 800dbea:	2222      	movs	r2, #34	; 0x22
 800dbec:	492d      	ldr	r1, [pc, #180]	; (800dca4 <sail_alloc_image+0xe8>)
 800dbee:	2001      	movs	r0, #1
 800dbf0:	f001 fb18 	bl	800f224 <sail_log>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e04d      	b.n	800dc94 <sail_alloc_image+0xd8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_image), &ptr));
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	2038      	movs	r0, #56	; 0x38
 800dc00:	f001 fc08 	bl	800f414 <sail_malloc>
 800dc04:	4603      	mov	r3, r0
 800dc06:	81fb      	strh	r3, [r7, #14]
 800dc08:	89fb      	ldrh	r3, [r7, #14]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	bf14      	ite	ne
 800dc0e:	2301      	movne	r3, #1
 800dc10:	2300      	moveq	r3, #0
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d001      	beq.n	800dc1c <sail_alloc_image+0x60>
 800dc18:	89fb      	ldrh	r3, [r7, #14]
 800dc1a:	e03b      	b.n	800dc94 <sail_alloc_image+0xd8>
    *image = ptr;
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	601a      	str	r2, [r3, #0]

    (*image)->pixels                  = NULL;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]
    (*image)->width                   = 0;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	605a      	str	r2, [r3, #4]
    (*image)->height                  = 0;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2200      	movs	r2, #0
 800dc38:	609a      	str	r2, [r3, #8]
    (*image)->bytes_per_line          = 0;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	60da      	str	r2, [r3, #12]
    (*image)->resolution              = NULL;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2200      	movs	r2, #0
 800dc48:	611a      	str	r2, [r3, #16]
    (*image)->pixel_format            = SAIL_PIXEL_FORMAT_UNKNOWN;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	751a      	strb	r2, [r3, #20]
    (*image)->gamma                   = 1;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6819      	ldr	r1, [r3, #0]
 800dc56:	f04f 0200 	mov.w	r2, #0
 800dc5a:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <sail_alloc_image+0xf4>)
 800dc5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    (*image)->delay                   = -1;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc68:	621a      	str	r2, [r3, #32]
    (*image)->palette                 = NULL;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	625a      	str	r2, [r3, #36]	; 0x24
    (*image)->meta_data_node          = NULL;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2200      	movs	r2, #0
 800dc78:	629a      	str	r2, [r3, #40]	; 0x28
    (*image)->iccp                    = NULL;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	62da      	str	r2, [r3, #44]	; 0x2c
    (*image)->properties              = 0;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2200      	movs	r2, #0
 800dc88:	631a      	str	r2, [r3, #48]	; 0x30
    (*image)->source_image            = NULL;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	635a      	str	r2, [r3, #52]	; 0x34

    return SAIL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	08019374 	.word	0x08019374
 800dca0:	0801930c 	.word	0x0801930c
 800dca4:	08019324 	.word	0x08019324
 800dca8:	08019380 	.word	0x08019380
 800dcac:	0801937c 	.word	0x0801937c
 800dcb0:	3ff00000 	.word	0x3ff00000

0800dcb4 <sail_destroy_image>:

void sail_destroy_image(struct sail_image *image) {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]

    if (image == NULL) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d021      	beq.n	800dd06 <sail_destroy_image+0x52>
        return;
    }

    sail_free(image->pixels);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f001 fc2c 	bl	800f524 <sail_free>

    sail_destroy_resolution(image->resolution);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	691b      	ldr	r3, [r3, #16]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f001 fe61 	bl	800f998 <sail_destroy_resolution>
    sail_destroy_palette(image->palette);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f001 fca2 	bl	800f624 <sail_destroy_palette>
    sail_destroy_meta_data_node_chain(image->meta_data_node);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce4:	4618      	mov	r0, r3
 800dce6:	f001 fc41 	bl	800f56c <sail_destroy_meta_data_node_chain>
    sail_destroy_iccp(image->iccp);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7ff ff50 	bl	800db94 <sail_destroy_iccp>
    sail_destroy_source_image(image->source_image);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f002 fc2b 	bl	8010554 <sail_destroy_source_image>

    sail_free(image);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f001 fc10 	bl	800f524 <sail_free>
 800dd04:	e000      	b.n	800dd08 <sail_destroy_image+0x54>
        return;
 800dd06:	bf00      	nop
}
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
	...

0800dd10 <sail_check_image_skeleton_valid>:

    return SAIL_OK;
}

sail_status_t sail_check_image_skeleton_valid(const struct sail_image *image)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af02      	add	r7, sp, #8
 800dd16:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(image);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	bf0c      	ite	eq
 800dd1e:	2301      	moveq	r3, #1
 800dd20:	2300      	movne	r3, #0
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d011      	beq.n	800dd4c <sail_check_image_skeleton_valid+0x3c>
 800dd28:	4b22      	ldr	r3, [pc, #136]	; (800ddb4 <sail_check_image_skeleton_valid+0xa4>)
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	4b22      	ldr	r3, [pc, #136]	; (800ddb8 <sail_check_image_skeleton_valid+0xa8>)
 800dd2e:	2294      	movs	r2, #148	; 0x94
 800dd30:	4922      	ldr	r1, [pc, #136]	; (800ddbc <sail_check_image_skeleton_valid+0xac>)
 800dd32:	2001      	movs	r0, #1
 800dd34:	f001 fa76 	bl	800f224 <sail_log>
 800dd38:	4b21      	ldr	r3, [pc, #132]	; (800ddc0 <sail_check_image_skeleton_valid+0xb0>)
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	4b21      	ldr	r3, [pc, #132]	; (800ddc4 <sail_check_image_skeleton_valid+0xb4>)
 800dd3e:	2294      	movs	r2, #148	; 0x94
 800dd40:	491e      	ldr	r1, [pc, #120]	; (800ddbc <sail_check_image_skeleton_valid+0xac>)
 800dd42:	2001      	movs	r0, #1
 800dd44:	f001 fa6e 	bl	800f224 <sail_log>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e02e      	b.n	800ddaa <sail_check_image_skeleton_valid+0x9a>

    if (image->pixel_format == SAIL_PIXEL_FORMAT_UNKNOWN) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d109      	bne.n	800dd68 <sail_check_image_skeleton_valid+0x58>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_PIXEL_FORMAT);
 800dd54:	4b1c      	ldr	r3, [pc, #112]	; (800ddc8 <sail_check_image_skeleton_valid+0xb8>)
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	4b1a      	ldr	r3, [pc, #104]	; (800ddc4 <sail_check_image_skeleton_valid+0xb4>)
 800dd5a:	2297      	movs	r2, #151	; 0x97
 800dd5c:	4917      	ldr	r1, [pc, #92]	; (800ddbc <sail_check_image_skeleton_valid+0xac>)
 800dd5e:	2001      	movs	r0, #1
 800dd60:	f001 fa60 	bl	800f224 <sail_log>
 800dd64:	23ca      	movs	r3, #202	; 0xca
 800dd66:	e020      	b.n	800ddaa <sail_check_image_skeleton_valid+0x9a>
    }
    if (image->width == 0 || image->height == 0) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d003      	beq.n	800dd78 <sail_check_image_skeleton_valid+0x68>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d109      	bne.n	800dd8c <sail_check_image_skeleton_valid+0x7c>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCORRECT_IMAGE_DIMENSIONS);
 800dd78:	4b14      	ldr	r3, [pc, #80]	; (800ddcc <sail_check_image_skeleton_valid+0xbc>)
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	4b11      	ldr	r3, [pc, #68]	; (800ddc4 <sail_check_image_skeleton_valid+0xb4>)
 800dd7e:	229a      	movs	r2, #154	; 0x9a
 800dd80:	490e      	ldr	r1, [pc, #56]	; (800ddbc <sail_check_image_skeleton_valid+0xac>)
 800dd82:	2001      	movs	r0, #1
 800dd84:	f001 fa4e 	bl	800f224 <sail_log>
 800dd88:	23c8      	movs	r3, #200	; 0xc8
 800dd8a:	e00e      	b.n	800ddaa <sail_check_image_skeleton_valid+0x9a>
    }
    if (image->bytes_per_line == 0) {
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d109      	bne.n	800dda8 <sail_check_image_skeleton_valid+0x98>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INCORRECT_BYTES_PER_LINE);
 800dd94:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <sail_check_image_skeleton_valid+0xc0>)
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <sail_check_image_skeleton_valid+0xb4>)
 800dd9a:	229d      	movs	r2, #157	; 0x9d
 800dd9c:	4907      	ldr	r1, [pc, #28]	; (800ddbc <sail_check_image_skeleton_valid+0xac>)
 800dd9e:	2001      	movs	r0, #1
 800dda0:	f001 fa40 	bl	800f224 <sail_log>
 800dda4:	23d0      	movs	r3, #208	; 0xd0
 800dda6:	e000      	b.n	800ddaa <sail_check_image_skeleton_valid+0x9a>
    }

    return SAIL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	08019374 	.word	0x08019374
 800ddb8:	0801930c 	.word	0x0801930c
 800ddbc:	08019324 	.word	0x08019324
 800ddc0:	08019380 	.word	0x08019380
 800ddc4:	0801937c 	.word	0x0801937c
 800ddc8:	080193a4 	.word	0x080193a4
 800ddcc:	080193c4 	.word	0x080193c4
 800ddd0:	080193ec 	.word	0x080193ec

0800ddd4 <sail_check_image_valid>:

sail_status_t sail_check_image_valid(const struct sail_image *image)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af02      	add	r7, sp, #8
 800ddda:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(image);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bf0c      	ite	eq
 800dde2:	2301      	moveq	r3, #1
 800dde4:	2300      	movne	r3, #0
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d011      	beq.n	800de10 <sail_check_image_valid+0x3c>
 800ddec:	4b31      	ldr	r3, [pc, #196]	; (800deb4 <sail_check_image_valid+0xe0>)
 800ddee:	9300      	str	r3, [sp, #0]
 800ddf0:	4b31      	ldr	r3, [pc, #196]	; (800deb8 <sail_check_image_valid+0xe4>)
 800ddf2:	22a5      	movs	r2, #165	; 0xa5
 800ddf4:	4931      	ldr	r1, [pc, #196]	; (800debc <sail_check_image_valid+0xe8>)
 800ddf6:	2001      	movs	r0, #1
 800ddf8:	f001 fa14 	bl	800f224 <sail_log>
 800ddfc:	4b30      	ldr	r3, [pc, #192]	; (800dec0 <sail_check_image_valid+0xec>)
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	4b30      	ldr	r3, [pc, #192]	; (800dec4 <sail_check_image_valid+0xf0>)
 800de02:	22a5      	movs	r2, #165	; 0xa5
 800de04:	492d      	ldr	r1, [pc, #180]	; (800debc <sail_check_image_valid+0xe8>)
 800de06:	2001      	movs	r0, #1
 800de08:	f001 fa0c 	bl	800f224 <sail_log>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e04d      	b.n	800deac <sail_check_image_valid+0xd8>

    SAIL_TRY(sail_check_image_skeleton_valid(image));
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ff7d 	bl	800dd10 <sail_check_image_skeleton_valid>
 800de16:	4603      	mov	r3, r0
 800de18:	81fb      	strh	r3, [r7, #14]
 800de1a:	89fb      	ldrh	r3, [r7, #14]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	bf14      	ite	ne
 800de20:	2301      	movne	r3, #1
 800de22:	2300      	moveq	r3, #0
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <sail_check_image_valid+0x5a>
 800de2a:	89fb      	ldrh	r3, [r7, #14]
 800de2c:	e03e      	b.n	800deac <sail_check_image_valid+0xd8>

    if (sail_is_indexed(image->pixel_format)) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	7d1b      	ldrb	r3, [r3, #20]
 800de32:	4618      	mov	r0, r3
 800de34:	f003 f85a 	bl	8010eec <sail_is_indexed>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d01a      	beq.n	800de74 <sail_check_image_valid+0xa0>
        SAIL_CHECK_PTR(image->palette);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de42:	2b00      	cmp	r3, #0
 800de44:	bf0c      	ite	eq
 800de46:	2301      	moveq	r3, #1
 800de48:	2300      	movne	r3, #0
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d011      	beq.n	800de74 <sail_check_image_valid+0xa0>
 800de50:	4b1d      	ldr	r3, [pc, #116]	; (800dec8 <sail_check_image_valid+0xf4>)
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	4b18      	ldr	r3, [pc, #96]	; (800deb8 <sail_check_image_valid+0xe4>)
 800de56:	22aa      	movs	r2, #170	; 0xaa
 800de58:	4918      	ldr	r1, [pc, #96]	; (800debc <sail_check_image_valid+0xe8>)
 800de5a:	2001      	movs	r0, #1
 800de5c:	f001 f9e2 	bl	800f224 <sail_log>
 800de60:	4b17      	ldr	r3, [pc, #92]	; (800dec0 <sail_check_image_valid+0xec>)
 800de62:	9300      	str	r3, [sp, #0]
 800de64:	4b17      	ldr	r3, [pc, #92]	; (800dec4 <sail_check_image_valid+0xf0>)
 800de66:	22aa      	movs	r2, #170	; 0xaa
 800de68:	4914      	ldr	r1, [pc, #80]	; (800debc <sail_check_image_valid+0xe8>)
 800de6a:	2001      	movs	r0, #1
 800de6c:	f001 f9da 	bl	800f224 <sail_log>
 800de70:	2301      	movs	r3, #1
 800de72:	e01b      	b.n	800deac <sail_check_image_valid+0xd8>
    }

    SAIL_CHECK_PTR(image->pixels);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	bf0c      	ite	eq
 800de7c:	2301      	moveq	r3, #1
 800de7e:	2300      	movne	r3, #0
 800de80:	b2db      	uxtb	r3, r3
 800de82:	2b00      	cmp	r3, #0
 800de84:	d011      	beq.n	800deaa <sail_check_image_valid+0xd6>
 800de86:	4b11      	ldr	r3, [pc, #68]	; (800decc <sail_check_image_valid+0xf8>)
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	4b0b      	ldr	r3, [pc, #44]	; (800deb8 <sail_check_image_valid+0xe4>)
 800de8c:	22ad      	movs	r2, #173	; 0xad
 800de8e:	490b      	ldr	r1, [pc, #44]	; (800debc <sail_check_image_valid+0xe8>)
 800de90:	2001      	movs	r0, #1
 800de92:	f001 f9c7 	bl	800f224 <sail_log>
 800de96:	4b0a      	ldr	r3, [pc, #40]	; (800dec0 <sail_check_image_valid+0xec>)
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <sail_check_image_valid+0xf0>)
 800de9c:	22ad      	movs	r2, #173	; 0xad
 800de9e:	4907      	ldr	r1, [pc, #28]	; (800debc <sail_check_image_valid+0xe8>)
 800dea0:	2001      	movs	r0, #1
 800dea2:	f001 f9bf 	bl	800f224 <sail_log>
 800dea6:	2301      	movs	r3, #1
 800dea8:	e000      	b.n	800deac <sail_check_image_valid+0xd8>

    return SAIL_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	08019374 	.word	0x08019374
 800deb8:	0801930c 	.word	0x0801930c
 800debc:	08019324 	.word	0x08019324
 800dec0:	08019380 	.word	0x08019380
 800dec4:	0801937c 	.word	0x0801937c
 800dec8:	08019410 	.word	0x08019410
 800decc:	08019420 	.word	0x08019420

0800ded0 <rstrip>:
    size_t num_left;
} ini_parse_string_ctx;

/* Strip whitespace chars off end of given string, in place. Return s. */
static char* rstrip(char* s)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
    char* p = s + strlen(s);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7f2 fb0b 	bl	80004f4 <strlen>
 800dede:	4602      	mov	r2, r0
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4413      	add	r3, r2
 800dee4:	60fb      	str	r3, [r7, #12]
    while (p > s && isspace((unsigned char)(*--p)))
 800dee6:	e002      	b.n	800deee <rstrip+0x1e>
        *p = '\0';
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
    while (p > s && isspace((unsigned char)(*--p)))
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	429a      	cmp	r2, r3
 800def4:	d90c      	bls.n	800df10 <rstrip+0x40>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3b01      	subs	r3, #1
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	3301      	adds	r3, #1
 800df02:	4a06      	ldr	r2, [pc, #24]	; (800df1c <rstrip+0x4c>)
 800df04:	4413      	add	r3, r2
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	f003 0308 	and.w	r3, r3, #8
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1eb      	bne.n	800dee8 <rstrip+0x18>
    return s;
 800df10:	687b      	ldr	r3, [r7, #4]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	0801cef2 	.word	0x0801cef2

0800df20 <lskip>:

/* Return pointer to first non-whitespace char in given string. */
static char* lskip(const char* s)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800df28:	e002      	b.n	800df30 <lskip+0x10>
        s++;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3301      	adds	r3, #1
 800df2e:	607b      	str	r3, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d009      	beq.n	800df4c <lskip+0x2c>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	3301      	adds	r3, #1
 800df3e:	4a07      	ldr	r2, [pc, #28]	; (800df5c <lskip+0x3c>)
 800df40:	4413      	add	r3, r2
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	f003 0308 	and.w	r3, r3, #8
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1ee      	bne.n	800df2a <lskip+0xa>
    return (char*)s;
 800df4c:	687b      	ldr	r3, [r7, #4]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	0801cef2 	.word	0x0801cef2

0800df60 <find_chars_or_comment>:

/* Return pointer to first char (of chars) or inline comment in given string,
   or pointer to NUL at end of string if neither found. Inline comment must
   be prefixed by a whitespace character to register as a comment. */
static char* find_chars_or_comment(const char* s, const char* chars)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
#if INI_ALLOW_INLINE_COMMENTS
    int was_space = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800df6e:	e00b      	b.n	800df88 <find_chars_or_comment+0x28>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
        was_space = isspace((unsigned char)(*s));
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	3301      	adds	r3, #1
 800df76:	4a15      	ldr	r2, [pc, #84]	; (800dfcc <find_chars_or_comment+0x6c>)
 800df78:	4413      	add	r3, r2
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 0308 	and.w	r3, r3, #8
 800df80:	60fb      	str	r3, [r7, #12]
        s++;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	3301      	adds	r3, #1
 800df86:	607b      	str	r3, [r7, #4]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d017      	beq.n	800dfc0 <find_chars_or_comment+0x60>
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d008      	beq.n	800dfa8 <find_chars_or_comment+0x48>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6838      	ldr	r0, [r7, #0]
 800df9e:	f006 f966 	bl	801426e <strchr>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10b      	bne.n	800dfc0 <find_chars_or_comment+0x60>
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d0e0      	beq.n	800df70 <find_chars_or_comment+0x10>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4806      	ldr	r0, [pc, #24]	; (800dfd0 <find_chars_or_comment+0x70>)
 800dfb6:	f006 f95a 	bl	801426e <strchr>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0d7      	beq.n	800df70 <find_chars_or_comment+0x10>
#else
    while (*s && (!chars || !strchr(chars, *s))) {
        s++;
    }
#endif
    return (char*)s;
 800dfc0:	687b      	ldr	r3, [r7, #4]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	0801cef2 	.word	0x0801cef2
 800dfd0:	08019430 	.word	0x08019430

0800dfd4 <strncpy0>:

/* Similar to strncpy, but ensures dest (size bytes) is
   NUL-terminated, and doesn't pad with NULs. */
static char* strncpy0(char* dest, const char* src, size_t size)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
    strncpy(dest, src, size - 1);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f006 fb4f 	bl	801468c <strncpy>
    dest[size - 1] = '\0';
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	68fa      	ldr	r2, [r7, #12]
 800dff4:	4413      	add	r3, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	701a      	strb	r2, [r3, #0]

    return dest;
 800dffa:	68fb      	ldr	r3, [r7, #12]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <ini_parse_stream>:

/* See documentation in header file. */
int ini_parse_stream(ini_reader reader, void* stream, ini_handler handler,
                     void* user)
{
 800e004:	b590      	push	{r4, r7, lr}
 800e006:	b0d9      	sub	sp, #356	; 0x164
 800e008:	af00      	add	r7, sp, #0
 800e00a:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 800e00e:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 800e012:	6020      	str	r0, [r4, #0]
 800e014:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800e018:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 800e01c:	6001      	str	r1, [r0, #0]
 800e01e:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800e022:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 800e026:	600a      	str	r2, [r1, #0]
 800e028:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e02c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800e030:	6013      	str	r3, [r2, #0]
    /* Uses a fair bit of stack (use heap instead if you need to) */
#if INI_USE_STACK
    char line[INI_MAX_LINE];
    int max_line = INI_MAX_LINE;
 800e032:	23c8      	movs	r3, #200	; 0xc8
 800e034:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
#endif
#if INI_ALLOW_REALLOC && !INI_USE_STACK
    char* new_line;
    size_t offset;
#endif
    char section[MAX_SECTION] = "";
 800e038:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e03c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	3304      	adds	r3, #4
 800e046:	222e      	movs	r2, #46	; 0x2e
 800e048:	2100      	movs	r1, #0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f005 fa88 	bl	8013560 <memset>
    char prev_name[MAX_NAME] = "";
 800e050:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e054:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	3304      	adds	r3, #4
 800e05e:	222e      	movs	r2, #46	; 0x2e
 800e060:	2100      	movs	r1, #0
 800e062:	4618      	mov	r0, r3
 800e064:	f005 fa7c 	bl	8013560 <memset>

    char* start;
    char* end;
    char* name;
    char* value;
    int lineno = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    int error = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#else
#define HANDLER(u, s, n, v) handler(u, s, n, v)
#endif

    /* Scan through stream line by line */
    while (reader(line, (int)max_line, stream) != NULL) {
 800e074:	e104      	b.n	800e280 <ini_parse_stream+0x27c>
                break;
            offset += strlen(line + offset);
        }
#endif

        lineno++;
 800e076:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e07a:	3301      	adds	r3, #1
 800e07c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        start = line;
 800e080:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e084:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#if INI_ALLOW_BOM
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800e088:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d115      	bne.n	800e0bc <ini_parse_stream+0xb8>
 800e090:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2bef      	cmp	r3, #239	; 0xef
 800e098:	d110      	bne.n	800e0bc <ini_parse_stream+0xb8>
                           (unsigned char)start[1] == 0xBB &&
 800e09a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e09e:	3301      	adds	r3, #1
 800e0a0:	781b      	ldrb	r3, [r3, #0]
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800e0a2:	2bbb      	cmp	r3, #187	; 0xbb
 800e0a4:	d10a      	bne.n	800e0bc <ini_parse_stream+0xb8>
                           (unsigned char)start[2] == 0xBF) {
 800e0a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0aa:	3302      	adds	r3, #2
 800e0ac:	781b      	ldrb	r3, [r3, #0]
                           (unsigned char)start[1] == 0xBB &&
 800e0ae:	2bbf      	cmp	r3, #191	; 0xbf
 800e0b0:	d104      	bne.n	800e0bc <ini_parse_stream+0xb8>
            start += 3;
 800e0b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0b6:	3303      	adds	r3, #3
 800e0b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        }
#endif
        start = lskip(rstrip(start));
 800e0bc:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800e0c0:	f7ff ff06 	bl	800ded0 <rstrip>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff ff2a 	bl	800df20 <lskip>
 800e0cc:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

        if (strchr(INI_START_COMMENT_PREFIXES, *start)) {
 800e0d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4876      	ldr	r0, [pc, #472]	; (800e2b4 <ini_parse_stream+0x2b0>)
 800e0da:	f006 f8c8 	bl	801426e <strchr>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f040 80cd 	bne.w	800e280 <ini_parse_stream+0x27c>
            /* Start-of-line comment */
        }
#if INI_ALLOW_MULTILINE
        else if (*prev_name && *start && start > line) {
 800e0e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e0ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d029      	beq.n	800e148 <ini_parse_stream+0x144>
 800e0f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d024      	beq.n	800e148 <ini_parse_stream+0x144>
 800e0fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e102:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800e106:	429a      	cmp	r2, r3
 800e108:	d91e      	bls.n	800e148 <ini_parse_stream+0x144>
            /* Non-blank line with leading whitespace, treat as continuation
               of previous name's value (as per Python configparser). */
            if (!HANDLER(user, section, prev_name, start) && !error)
 800e10a:	f107 0214 	add.w	r2, r7, #20
 800e10e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800e112:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e116:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800e11a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e11e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e122:	681c      	ldr	r4, [r3, #0]
 800e124:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e128:	6800      	ldr	r0, [r0, #0]
 800e12a:	47a0      	blx	r4
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f040 80a6 	bne.w	800e280 <ini_parse_stream+0x27c>
 800e134:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f040 80a1 	bne.w	800e280 <ini_parse_stream+0x27c>
                error = lineno;
 800e13e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e142:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if (!HANDLER(user, section, prev_name, start) && !error)
 800e146:	e09b      	b.n	800e280 <ini_parse_stream+0x27c>
        }
#endif
        else if (*start == '[') {
 800e148:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b5b      	cmp	r3, #91	; 0x5b
 800e150:	d12a      	bne.n	800e1a8 <ini_parse_stream+0x1a4>
            /* A "[section]" line */
            end = find_chars_or_comment(start + 1, "]");
 800e152:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e156:	3301      	adds	r3, #1
 800e158:	4957      	ldr	r1, [pc, #348]	; (800e2b8 <ini_parse_stream+0x2b4>)
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7ff ff00 	bl	800df60 <find_chars_or_comment>
 800e160:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == ']') {
 800e164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	2b5d      	cmp	r3, #93	; 0x5d
 800e16c:	d113      	bne.n	800e196 <ini_parse_stream+0x192>
                *end = '\0';
 800e16e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e172:	2200      	movs	r2, #0
 800e174:	701a      	strb	r2, [r3, #0]
                strncpy0(section, start + 1, sizeof(section));
 800e176:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e17a:	1c59      	adds	r1, r3, #1
 800e17c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e180:	2232      	movs	r2, #50	; 0x32
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff ff26 	bl	800dfd4 <strncpy0>
                *prev_name = '\0';
 800e188:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e18c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e190:	2200      	movs	r2, #0
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	e074      	b.n	800e280 <ini_parse_stream+0x27c>
#if INI_CALL_HANDLER_ON_NEW_SECTION
                if (!HANDLER(user, section, NULL, NULL) && !error)
                    error = lineno;
#endif
            }
            else if (!error) {
 800e196:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d170      	bne.n	800e280 <ini_parse_stream+0x27c>
                /* No ']' found on section line */
                error = lineno;
 800e19e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e1a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e1a6:	e06b      	b.n	800e280 <ini_parse_stream+0x27c>
            }
        }
        else if (*start) {
 800e1a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d066      	beq.n	800e280 <ini_parse_stream+0x27c>
            /* Not a comment, must be a name[=:]value pair */
            end = find_chars_or_comment(start, "=:");
 800e1b2:	4942      	ldr	r1, [pc, #264]	; (800e2bc <ini_parse_stream+0x2b8>)
 800e1b4:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800e1b8:	f7ff fed2 	bl	800df60 <find_chars_or_comment>
 800e1bc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == '=' || *end == ':') {
 800e1c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b3d      	cmp	r3, #61	; 0x3d
 800e1c8:	d004      	beq.n	800e1d4 <ini_parse_stream+0x1d0>
 800e1ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b3a      	cmp	r3, #58	; 0x3a
 800e1d2:	d14d      	bne.n	800e270 <ini_parse_stream+0x26c>
                *end = '\0';
 800e1d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e1d8:	2200      	movs	r2, #0
 800e1da:	701a      	strb	r2, [r3, #0]
                name = rstrip(start);
 800e1dc:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800e1e0:	f7ff fe76 	bl	800ded0 <rstrip>
 800e1e4:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
                value = end + 1;
 800e1e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
#if INI_ALLOW_INLINE_COMMENTS
                end = find_chars_or_comment(value, NULL);
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800e1f8:	f7ff feb2 	bl	800df60 <find_chars_or_comment>
 800e1fc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                if (*end)
 800e200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d003      	beq.n	800e212 <ini_parse_stream+0x20e>
                    *end = '\0';
 800e20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e20e:	2200      	movs	r2, #0
 800e210:	701a      	strb	r2, [r3, #0]
#endif
                value = lskip(value);
 800e212:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800e216:	f7ff fe83 	bl	800df20 <lskip>
 800e21a:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
                rstrip(value);
 800e21e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800e222:	f7ff fe55 	bl	800ded0 <rstrip>

                /* Valid name[=:]value pair found, call handler */
                strncpy0(prev_name, name, sizeof(prev_name));
 800e226:	f107 0314 	add.w	r3, r7, #20
 800e22a:	2232      	movs	r2, #50	; 0x32
 800e22c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800e230:	4618      	mov	r0, r3
 800e232:	f7ff fecf 	bl	800dfd4 <strncpy0>
                if (!HANDLER(user, section, name, value) && !error)
 800e236:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800e23a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e23e:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800e242:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e246:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800e24a:	681c      	ldr	r4, [r3, #0]
 800e24c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e250:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e254:	6800      	ldr	r0, [r0, #0]
 800e256:	47a0      	blx	r4
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d110      	bne.n	800e280 <ini_parse_stream+0x27c>
 800e25e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10c      	bne.n	800e280 <ini_parse_stream+0x27c>
                    error = lineno;
 800e266:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e26a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                if (!HANDLER(user, section, name, value) && !error)
 800e26e:	e007      	b.n	800e280 <ini_parse_stream+0x27c>
            }
            else if (!error) {
 800e270:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e274:	2b00      	cmp	r3, #0
 800e276:	d103      	bne.n	800e280 <ini_parse_stream+0x27c>
                *end = '\0';
                name = rstrip(start);
                if (!HANDLER(user, section, name, NULL) && !error)
                    error = lineno;
#else
                error = lineno;
 800e278:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e27c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    while (reader(line, (int)max_line, stream) != NULL) {
 800e280:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e284:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800e288:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800e28c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800e290:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	6812      	ldr	r2, [r2, #0]
 800e298:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800e29c:	4798      	blx	r3
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f47f aee8 	bne.w	800e076 <ini_parse_stream+0x72>

#if !INI_USE_STACK
    sail_free(line);
#endif

    return error;
 800e2a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd90      	pop	{r4, r7, pc}
 800e2b4:	08019434 	.word	0x08019434
 800e2b8:	08019438 	.word	0x08019438
 800e2bc:	0801943c 	.word	0x0801943c

0800e2c0 <ini_reader_string>:
    return error;
}

/* An ini_reader function to read the next line from a string buffer. This
   is the fgets() equivalent used by ini_parse_string(). */
static char* ini_reader_string(char* str, int num, void* stream) {
 800e2c0:	b480      	push	{r7}
 800e2c2:	b08b      	sub	sp, #44	; 0x2c
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
    ini_parse_string_ctx* ctx = (ini_parse_string_ctx*)stream;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	61bb      	str	r3, [r7, #24]
    const char* ctx_ptr = ctx->ptr;
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ctx_num_left = ctx->num_left;
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	623b      	str	r3, [r7, #32]
    char* strp = str;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	61fb      	str	r3, [r7, #28]
    char c;

    if (ctx_num_left == 0 || num < 2)
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <ini_reader_string+0x2c>
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	dc14      	bgt.n	800e316 <ini_reader_string+0x56>
        return NULL;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e024      	b.n	800e33a <ini_reader_string+0x7a>

    while (num > 1 && ctx_num_left != 0) {
        c = *ctx_ptr++;
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	627a      	str	r2, [r7, #36]	; 0x24
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	75fb      	strb	r3, [r7, #23]
        ctx_num_left--;
 800e2fa:	6a3b      	ldr	r3, [r7, #32]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	623b      	str	r3, [r7, #32]
        *strp++ = c;
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	61fa      	str	r2, [r7, #28]
 800e306:	7dfa      	ldrb	r2, [r7, #23]
 800e308:	701a      	strb	r2, [r3, #0]
        if (c == '\n')
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
 800e30c:	2b0a      	cmp	r3, #10
 800e30e:	d009      	beq.n	800e324 <ini_reader_string+0x64>
            break;
        num--;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	3b01      	subs	r3, #1
 800e314:	60bb      	str	r3, [r7, #8]
    while (num > 1 && ctx_num_left != 0) {
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	dd04      	ble.n	800e326 <ini_reader_string+0x66>
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d1e6      	bne.n	800e2f0 <ini_reader_string+0x30>
 800e322:	e000      	b.n	800e326 <ini_reader_string+0x66>
            break;
 800e324:	bf00      	nop
    }

    *strp = '\0';
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	2200      	movs	r2, #0
 800e32a:	701a      	strb	r2, [r3, #0]
    ctx->ptr = ctx_ptr;
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e330:	601a      	str	r2, [r3, #0]
    ctx->num_left = ctx_num_left;
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	6a3a      	ldr	r2, [r7, #32]
 800e336:	605a      	str	r2, [r3, #4]
    return str;
 800e338:	68fb      	ldr	r3, [r7, #12]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	372c      	adds	r7, #44	; 0x2c
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
	...

0800e348 <ini_parse_string>:

/* See documentation in header file. */
int ini_parse_string(const char* string, ini_handler handler, void* user) {
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
    ini_parse_string_ctx ctx;

    ctx.ptr = string;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	613b      	str	r3, [r7, #16]
    ctx.num_left = strlen(string);
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f7f2 f8cb 	bl	80004f4 <strlen>
 800e35e:	4603      	mov	r3, r0
 800e360:	617b      	str	r3, [r7, #20]
    return ini_parse_stream((ini_reader)ini_reader_string, &ctx, handler,
 800e362:	f107 0110 	add.w	r1, r7, #16
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	4804      	ldr	r0, [pc, #16]	; (800e37c <ini_parse_string+0x34>)
 800e36c:	f7ff fe4a 	bl	800e004 <ini_parse_stream>
 800e370:	4603      	mov	r3, r0
                            user);
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	0800e2c1 	.word	0x0800e2c1

0800e380 <sail_alloc_io>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_io(struct sail_io **io) {
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af02      	add	r7, sp, #8
 800e386:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(io);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	bf0c      	ite	eq
 800e38e:	2301      	moveq	r3, #1
 800e390:	2300      	movne	r3, #0
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d011      	beq.n	800e3bc <sail_alloc_io+0x3c>
 800e398:	4b2f      	ldr	r3, [pc, #188]	; (800e458 <sail_alloc_io+0xd8>)
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	4b2f      	ldr	r3, [pc, #188]	; (800e45c <sail_alloc_io+0xdc>)
 800e39e:	2223      	movs	r2, #35	; 0x23
 800e3a0:	492f      	ldr	r1, [pc, #188]	; (800e460 <sail_alloc_io+0xe0>)
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	f000 ff3e 	bl	800f224 <sail_log>
 800e3a8:	4b2e      	ldr	r3, [pc, #184]	; (800e464 <sail_alloc_io+0xe4>)
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	4b2e      	ldr	r3, [pc, #184]	; (800e468 <sail_alloc_io+0xe8>)
 800e3ae:	2223      	movs	r2, #35	; 0x23
 800e3b0:	492b      	ldr	r1, [pc, #172]	; (800e460 <sail_alloc_io+0xe0>)
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	f000 ff36 	bl	800f224 <sail_log>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e049      	b.n	800e450 <sail_alloc_io+0xd0>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_io), &ptr));
 800e3bc:	f107 0308 	add.w	r3, r7, #8
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	2038      	movs	r0, #56	; 0x38
 800e3c4:	f001 f826 	bl	800f414 <sail_malloc>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	81fb      	strh	r3, [r7, #14]
 800e3cc:	89fb      	ldrh	r3, [r7, #14]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	bf14      	ite	ne
 800e3d2:	2301      	movne	r3, #1
 800e3d4:	2300      	moveq	r3, #0
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <sail_alloc_io+0x60>
 800e3dc:	89fb      	ldrh	r3, [r7, #14]
 800e3de:	e037      	b.n	800e450 <sail_alloc_io+0xd0>
    *io = ptr;
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]

    (*io)->id             = 0;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6819      	ldr	r1, [r3, #0]
 800e3ea:	f04f 0200 	mov.w	r2, #0
 800e3ee:	f04f 0300 	mov.w	r3, #0
 800e3f2:	e9c1 2300 	strd	r2, r3, [r1]
    (*io)->features       = 0;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	609a      	str	r2, [r3, #8]
    (*io)->stream         = NULL;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2200      	movs	r2, #0
 800e404:	60da      	str	r2, [r3, #12]
    (*io)->tolerant_read  = NULL;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2200      	movs	r2, #0
 800e40c:	611a      	str	r2, [r3, #16]
    (*io)->strict_read    = NULL;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2200      	movs	r2, #0
 800e414:	615a      	str	r2, [r3, #20]
    (*io)->tolerant_write = NULL;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2200      	movs	r2, #0
 800e41c:	619a      	str	r2, [r3, #24]
    (*io)->strict_write   = NULL;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2200      	movs	r2, #0
 800e424:	61da      	str	r2, [r3, #28]
    (*io)->seek           = NULL;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2200      	movs	r2, #0
 800e42c:	621a      	str	r2, [r3, #32]
    (*io)->tell           = NULL;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2200      	movs	r2, #0
 800e434:	625a      	str	r2, [r3, #36]	; 0x24
    (*io)->flush          = NULL;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	629a      	str	r2, [r3, #40]	; 0x28
    (*io)->close          = NULL;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2200      	movs	r2, #0
 800e444:	62da      	str	r2, [r3, #44]	; 0x2c
    (*io)->eof            = NULL;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2200      	movs	r2, #0
 800e44c:	631a      	str	r2, [r3, #48]	; 0x30

    return SAIL_OK;
 800e44e:	2300      	movs	r3, #0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	080194b0 	.word	0x080194b0
 800e45c:	08019444 	.word	0x08019444
 800e460:	0801945c 	.word	0x0801945c
 800e464:	080194b8 	.word	0x080194b8
 800e468:	080194b4 	.word	0x080194b4

0800e46c <sail_destroy_io>:

void sail_destroy_io(struct sail_io *io) {
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]

    if (io == NULL) {
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d01e      	beq.n	800e4b8 <sail_destroy_io+0x4c>
        return;
    }

    if (io->close != NULL && io->stream != NULL) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d016      	beq.n	800e4b0 <sail_destroy_io+0x44>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d012      	beq.n	800e4b0 <sail_destroy_io+0x44>
        SAIL_TRY_OR_EXECUTE(io->close(io->stream),
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	68d2      	ldr	r2, [r2, #12]
 800e492:	4610      	mov	r0, r2
 800e494:	4798      	blx	r3
 800e496:	4603      	mov	r3, r0
 800e498:	81fb      	strh	r3, [r7, #14]
 800e49a:	89fb      	ldrh	r3, [r7, #14]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	bf14      	ite	ne
 800e4a0:	2301      	movne	r3, #1
 800e4a2:	2300      	moveq	r3, #0
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d002      	beq.n	800e4b0 <sail_destroy_io+0x44>
 800e4aa:	4805      	ldr	r0, [pc, #20]	; (800e4c0 <sail_destroy_io+0x54>)
 800e4ac:	f002 fd30 	bl	8010f10 <sail_print_errno>
                            /* on error */ sail_print_errno("Failed to close the I/O stream: %s"));
    }

    sail_free(io);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f001 f837 	bl	800f524 <sail_free>
 800e4b6:	e000      	b.n	800e4ba <sail_destroy_io+0x4e>
        return;
 800e4b8:	bf00      	nop
}
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	080194cc 	.word	0x080194cc

0800e4c4 <sail_check_io_valid>:

sail_status_t sail_check_io_valid(const struct sail_io *io)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af02      	add	r7, sp, #8
 800e4ca:	6078      	str	r0, [r7, #4]
    SAIL_CHECK_PTR(io);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bf0c      	ite	eq
 800e4d2:	2301      	moveq	r3, #1
 800e4d4:	2300      	movne	r3, #0
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d011      	beq.n	800e500 <sail_check_io_valid+0x3c>
 800e4dc:	4b24      	ldr	r3, [pc, #144]	; (800e570 <sail_check_io_valid+0xac>)
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	4b24      	ldr	r3, [pc, #144]	; (800e574 <sail_check_io_valid+0xb0>)
 800e4e2:	2249      	movs	r2, #73	; 0x49
 800e4e4:	4924      	ldr	r1, [pc, #144]	; (800e578 <sail_check_io_valid+0xb4>)
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	f000 fe9c 	bl	800f224 <sail_log>
 800e4ec:	4b23      	ldr	r3, [pc, #140]	; (800e57c <sail_check_io_valid+0xb8>)
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	4b23      	ldr	r3, [pc, #140]	; (800e580 <sail_check_io_valid+0xbc>)
 800e4f2:	2249      	movs	r2, #73	; 0x49
 800e4f4:	4920      	ldr	r1, [pc, #128]	; (800e578 <sail_check_io_valid+0xb4>)
 800e4f6:	2001      	movs	r0, #1
 800e4f8:	f000 fe94 	bl	800f224 <sail_log>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e033      	b.n	800e568 <sail_check_io_valid+0xa4>

    if (io->id == 0U                   ||
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	4313      	orrs	r3, r2
 800e508:	d023      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->tolerant_read  == NULL ||
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	691b      	ldr	r3, [r3, #16]
    if (io->id == 0U                   ||
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01f      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->strict_read    == NULL ||
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	695b      	ldr	r3, [r3, #20]
            io->tolerant_read  == NULL ||
 800e516:	2b00      	cmp	r3, #0
 800e518:	d01b      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->tolerant_write == NULL ||
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
            io->strict_read    == NULL ||
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d017      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->strict_write   == NULL ||
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	69db      	ldr	r3, [r3, #28]
            io->tolerant_write == NULL ||
 800e526:	2b00      	cmp	r3, #0
 800e528:	d013      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->seek           == NULL ||
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a1b      	ldr	r3, [r3, #32]
            io->strict_write   == NULL ||
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00f      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->tell           == NULL ||
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            io->seek           == NULL ||
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->flush          == NULL ||
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            io->tell           == NULL ||
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d007      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->close          == NULL ||
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            io->flush          == NULL ||
 800e546:	2b00      	cmp	r3, #0
 800e548:	d003      	beq.n	800e552 <sail_check_io_valid+0x8e>
            io->eof            == NULL) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            io->close          == NULL ||
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d109      	bne.n	800e566 <sail_check_io_valid+0xa2>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_IO);
 800e552:	4b0c      	ldr	r3, [pc, #48]	; (800e584 <sail_check_io_valid+0xc0>)
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <sail_check_io_valid+0xbc>)
 800e558:	2255      	movs	r2, #85	; 0x55
 800e55a:	4907      	ldr	r1, [pc, #28]	; (800e578 <sail_check_io_valid+0xb4>)
 800e55c:	2001      	movs	r0, #1
 800e55e:	f000 fe61 	bl	800f224 <sail_log>
 800e562:	2364      	movs	r3, #100	; 0x64
 800e564:	e000      	b.n	800e568 <sail_check_io_valid+0xa4>
    }

    return SAIL_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	080194b0 	.word	0x080194b0
 800e574:	08019444 	.word	0x08019444
 800e578:	0801945c 	.word	0x0801945c
 800e57c:	080194b8 	.word	0x080194b8
 800e580:	080194b4 	.word	0x080194b4
 800e584:	080194f0 	.word	0x080194f0

0800e588 <io_memory_tolerant_read>:

/*
 * Private functions.
 */

static sail_status_t io_memory_tolerant_read(void *stream, void *buf, size_t size_to_read, size_t *read_size) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08a      	sub	sp, #40	; 0x28
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	bf0c      	ite	eq
 800e59c:	2301      	moveq	r3, #1
 800e59e:	2300      	movne	r3, #0
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d011      	beq.n	800e5ca <io_memory_tolerant_read+0x42>
 800e5a6:	4b42      	ldr	r3, [pc, #264]	; (800e6b0 <io_memory_tolerant_read+0x128>)
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	4b42      	ldr	r3, [pc, #264]	; (800e6b4 <io_memory_tolerant_read+0x12c>)
 800e5ac:	224c      	movs	r2, #76	; 0x4c
 800e5ae:	4942      	ldr	r1, [pc, #264]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	f000 fe37 	bl	800f224 <sail_log>
 800e5b6:	4b41      	ldr	r3, [pc, #260]	; (800e6bc <io_memory_tolerant_read+0x134>)
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	4b41      	ldr	r3, [pc, #260]	; (800e6c0 <io_memory_tolerant_read+0x138>)
 800e5bc:	224c      	movs	r2, #76	; 0x4c
 800e5be:	493e      	ldr	r1, [pc, #248]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	f000 fe2f 	bl	800f224 <sail_log>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e06e      	b.n	800e6a8 <io_memory_tolerant_read+0x120>
    SAIL_CHECK_PTR(buf);
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	bf0c      	ite	eq
 800e5d0:	2301      	moveq	r3, #1
 800e5d2:	2300      	movne	r3, #0
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d011      	beq.n	800e5fe <io_memory_tolerant_read+0x76>
 800e5da:	4b3a      	ldr	r3, [pc, #232]	; (800e6c4 <io_memory_tolerant_read+0x13c>)
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	4b35      	ldr	r3, [pc, #212]	; (800e6b4 <io_memory_tolerant_read+0x12c>)
 800e5e0:	224d      	movs	r2, #77	; 0x4d
 800e5e2:	4935      	ldr	r1, [pc, #212]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	f000 fe1d 	bl	800f224 <sail_log>
 800e5ea:	4b34      	ldr	r3, [pc, #208]	; (800e6bc <io_memory_tolerant_read+0x134>)
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	4b34      	ldr	r3, [pc, #208]	; (800e6c0 <io_memory_tolerant_read+0x138>)
 800e5f0:	224d      	movs	r2, #77	; 0x4d
 800e5f2:	4931      	ldr	r1, [pc, #196]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	f000 fe15 	bl	800f224 <sail_log>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e054      	b.n	800e6a8 <io_memory_tolerant_read+0x120>
    SAIL_CHECK_PTR(read_size);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	bf0c      	ite	eq
 800e604:	2301      	moveq	r3, #1
 800e606:	2300      	movne	r3, #0
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d011      	beq.n	800e632 <io_memory_tolerant_read+0xaa>
 800e60e:	4b2e      	ldr	r3, [pc, #184]	; (800e6c8 <io_memory_tolerant_read+0x140>)
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	4b28      	ldr	r3, [pc, #160]	; (800e6b4 <io_memory_tolerant_read+0x12c>)
 800e614:	224e      	movs	r2, #78	; 0x4e
 800e616:	4928      	ldr	r1, [pc, #160]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e618:	2001      	movs	r0, #1
 800e61a:	f000 fe03 	bl	800f224 <sail_log>
 800e61e:	4b27      	ldr	r3, [pc, #156]	; (800e6bc <io_memory_tolerant_read+0x134>)
 800e620:	9300      	str	r3, [sp, #0]
 800e622:	4b27      	ldr	r3, [pc, #156]	; (800e6c0 <io_memory_tolerant_read+0x138>)
 800e624:	224e      	movs	r2, #78	; 0x4e
 800e626:	4924      	ldr	r1, [pc, #144]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e628:	2001      	movs	r0, #1
 800e62a:	f000 fdfb 	bl	800f224 <sail_log>
 800e62e:	2301      	movs	r3, #1
 800e630:	e03a      	b.n	800e6a8 <io_memory_tolerant_read+0x120>

    struct mem_io_read_stream *mem_io_read_stream = (struct mem_io_read_stream *)stream;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	61fb      	str	r3, [r7, #28]
    struct mem_io_buffer_info *mem_io_buffer_info = &mem_io_read_stream->mem_io_buffer_info;
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	61bb      	str	r3, [r7, #24]

    *read_size = 0;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]

    if (mem_io_buffer_info->pos >= mem_io_buffer_info->accessible_length) {
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d309      	bcc.n	800e660 <io_memory_tolerant_read+0xd8>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_EOF);
 800e64c:	4b1f      	ldr	r3, [pc, #124]	; (800e6cc <io_memory_tolerant_read+0x144>)
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	4b1b      	ldr	r3, [pc, #108]	; (800e6c0 <io_memory_tolerant_read+0x138>)
 800e652:	2256      	movs	r2, #86	; 0x56
 800e654:	4918      	ldr	r1, [pc, #96]	; (800e6b8 <io_memory_tolerant_read+0x130>)
 800e656:	2001      	movs	r0, #1
 800e658:	f000 fde4 	bl	800f224 <sail_log>
 800e65c:	2310      	movs	r3, #16
 800e65e:	e023      	b.n	800e6a8 <io_memory_tolerant_read+0x120>
    }

    size_t actual_size_to_read = (mem_io_buffer_info->pos + size_to_read > mem_io_buffer_info->accessible_length)
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	689a      	ldr	r2, [r3, #8]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	441a      	add	r2, r3
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	685b      	ldr	r3, [r3, #4]
                                 ? mem_io_buffer_info->accessible_length - mem_io_buffer_info->pos
                                 : size_to_read;
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d905      	bls.n	800e67c <io_memory_tolerant_read+0xf4>
                                 ? mem_io_buffer_info->accessible_length - mem_io_buffer_info->pos
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	689b      	ldr	r3, [r3, #8]
                                 : size_to_read;
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	e000      	b.n	800e67e <io_memory_tolerant_read+0xf6>
 800e67c:	687b      	ldr	r3, [r7, #4]
    size_t actual_size_to_read = (mem_io_buffer_info->pos + size_to_read > mem_io_buffer_info->accessible_length)
 800e67e:	617b      	str	r3, [r7, #20]

    memcpy(buf, (const char *)mem_io_read_stream->buffer + mem_io_buffer_info->pos, actual_size_to_read);
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	4413      	add	r3, r2
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	4619      	mov	r1, r3
 800e68e:	68b8      	ldr	r0, [r7, #8]
 800e690:	f004 ff58 	bl	8013544 <memcpy>
    mem_io_buffer_info->pos += actual_size_to_read;
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	689a      	ldr	r2, [r3, #8]
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	441a      	add	r2, r3
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	609a      	str	r2, [r3, #8]

    *read_size = actual_size_to_read;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3720      	adds	r7, #32
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	080195ec 	.word	0x080195ec
 800e6b4:	08019588 	.word	0x08019588
 800e6b8:	080195a0 	.word	0x080195a0
 800e6bc:	080195f8 	.word	0x080195f8
 800e6c0:	080195f4 	.word	0x080195f4
 800e6c4:	0801960c 	.word	0x0801960c
 800e6c8:	08019610 	.word	0x08019610
 800e6cc:	0801961c 	.word	0x0801961c

0800e6d0 <io_memory_strict_read>:

static sail_status_t io_memory_strict_read(void *stream, void *buf, size_t size_to_read) {
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af02      	add	r7, sp, #8
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]

    size_t read_size;

    SAIL_TRY(io_memory_tolerant_read(stream, buf, size_to_read, &read_size));
 800e6dc:	f107 0310 	add.w	r3, r7, #16
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f7ff ff4f 	bl	800e588 <io_memory_tolerant_read>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	82fb      	strh	r3, [r7, #22]
 800e6ee:	8afb      	ldrh	r3, [r7, #22]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	bf14      	ite	ne
 800e6f4:	2301      	movne	r3, #1
 800e6f6:	2300      	moveq	r3, #0
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <io_memory_strict_read+0x32>
 800e6fe:	8afb      	ldrh	r3, [r7, #22]
 800e700:	e00e      	b.n	800e720 <io_memory_strict_read+0x50>

    if (read_size != size_to_read) {
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	429a      	cmp	r2, r3
 800e708:	d009      	beq.n	800e71e <io_memory_strict_read+0x4e>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_READ_IO);
 800e70a:	4b07      	ldr	r3, [pc, #28]	; (800e728 <io_memory_strict_read+0x58>)
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	4b07      	ldr	r3, [pc, #28]	; (800e72c <io_memory_strict_read+0x5c>)
 800e710:	226c      	movs	r2, #108	; 0x6c
 800e712:	4907      	ldr	r1, [pc, #28]	; (800e730 <io_memory_strict_read+0x60>)
 800e714:	2001      	movs	r0, #1
 800e716:	f000 fd85 	bl	800f224 <sail_log>
 800e71a:	230a      	movs	r3, #10
 800e71c:	e000      	b.n	800e720 <io_memory_strict_read+0x50>
    }

    return SAIL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	0801962c 	.word	0x0801962c
 800e72c:	080195f4 	.word	0x080195f4
 800e730:	080195a0 	.word	0x080195a0

0800e734 <io_memory_seek>:
    }

    return SAIL_OK;
}

static sail_status_t io_memory_seek(void *stream, long offset, int whence) {
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af02      	add	r7, sp, #8
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(stream);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	bf0c      	ite	eq
 800e746:	2301      	moveq	r3, #1
 800e748:	2300      	movne	r3, #0
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d011      	beq.n	800e774 <io_memory_seek+0x40>
 800e750:	4b2b      	ldr	r3, [pc, #172]	; (800e800 <io_memory_seek+0xcc>)
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	4b2b      	ldr	r3, [pc, #172]	; (800e804 <io_memory_seek+0xd0>)
 800e756:	22a1      	movs	r2, #161	; 0xa1
 800e758:	492b      	ldr	r1, [pc, #172]	; (800e808 <io_memory_seek+0xd4>)
 800e75a:	2001      	movs	r0, #1
 800e75c:	f000 fd62 	bl	800f224 <sail_log>
 800e760:	4b2a      	ldr	r3, [pc, #168]	; (800e80c <io_memory_seek+0xd8>)
 800e762:	9300      	str	r3, [sp, #0]
 800e764:	4b2a      	ldr	r3, [pc, #168]	; (800e810 <io_memory_seek+0xdc>)
 800e766:	22a1      	movs	r2, #161	; 0xa1
 800e768:	4927      	ldr	r1, [pc, #156]	; (800e808 <io_memory_seek+0xd4>)
 800e76a:	2001      	movs	r0, #1
 800e76c:	f000 fd5a 	bl	800f224 <sail_log>
 800e770:	2301      	movs	r3, #1
 800e772:	e041      	b.n	800e7f8 <io_memory_seek+0xc4>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	613b      	str	r3, [r7, #16]

    size_t new_pos;

    switch (whence) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d012      	beq.n	800e7a4 <io_memory_seek+0x70>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b02      	cmp	r3, #2
 800e782:	dc15      	bgt.n	800e7b0 <io_memory_seek+0x7c>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d003      	beq.n	800e792 <io_memory_seek+0x5e>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d003      	beq.n	800e798 <io_memory_seek+0x64>
 800e790:	e00e      	b.n	800e7b0 <io_memory_seek+0x7c>
        case SEEK_SET: {
            new_pos = offset;
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	617b      	str	r3, [r7, #20]
            break;
 800e796:	e015      	b.n	800e7c4 <io_memory_seek+0x90>
        }

        case SEEK_CUR: {
            new_pos = mem_io_buffer_info->pos + offset;
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	689a      	ldr	r2, [r3, #8]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	4413      	add	r3, r2
 800e7a0:	617b      	str	r3, [r7, #20]
            break;
 800e7a2:	e00f      	b.n	800e7c4 <io_memory_seek+0x90>
        }

        case SEEK_END: {
            new_pos = mem_io_buffer_info->accessible_length + offset;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	617b      	str	r3, [r7, #20]
            break;
 800e7ae:	e009      	b.n	800e7c4 <io_memory_seek+0x90>
        }

        default: {
            SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_SEEK_WHENCE);
 800e7b0:	4b18      	ldr	r3, [pc, #96]	; (800e814 <io_memory_seek+0xe0>)
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	4b16      	ldr	r3, [pc, #88]	; (800e810 <io_memory_seek+0xdc>)
 800e7b6:	22b8      	movs	r2, #184	; 0xb8
 800e7b8:	4913      	ldr	r1, [pc, #76]	; (800e808 <io_memory_seek+0xd4>)
 800e7ba:	2001      	movs	r0, #1
 800e7bc:	f000 fd32 	bl	800f224 <sail_log>
 800e7c0:	2312      	movs	r3, #18
 800e7c2:	e019      	b.n	800e7f8 <io_memory_seek+0xc4>
        }
    }

    /* Correct the value. */
    if (new_pos >= mem_io_buffer_info->length) {
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d307      	bcc.n	800e7de <io_memory_seek+0xaa>
        new_pos = mem_io_buffer_info->length;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	617b      	str	r3, [r7, #20]
        mem_io_buffer_info->accessible_length = mem_io_buffer_info->length;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	605a      	str	r2, [r3, #4]
 800e7dc:	e008      	b.n	800e7f0 <io_memory_seek+0xbc>
    } else if (new_pos >= mem_io_buffer_info->accessible_length) {
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	697a      	ldr	r2, [r7, #20]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d303      	bcc.n	800e7f0 <io_memory_seek+0xbc>
        mem_io_buffer_info->accessible_length = new_pos + 1;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	1c5a      	adds	r2, r3, #1
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	605a      	str	r2, [r3, #4]
    }

    mem_io_buffer_info->pos = new_pos;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	080195ec 	.word	0x080195ec
 800e804:	08019588 	.word	0x08019588
 800e808:	080195a0 	.word	0x080195a0
 800e80c:	080195f8 	.word	0x080195f8
 800e810:	080195f4 	.word	0x080195f4
 800e814:	08019664 	.word	0x08019664

0800e818 <io_memory_tell>:

static sail_status_t io_memory_tell(void *stream, size_t *offset) {
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af02      	add	r7, sp, #8
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	bf0c      	ite	eq
 800e828:	2301      	moveq	r3, #1
 800e82a:	2300      	movne	r3, #0
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d011      	beq.n	800e856 <io_memory_tell+0x3e>
 800e832:	4b1b      	ldr	r3, [pc, #108]	; (800e8a0 <io_memory_tell+0x88>)
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	4b1b      	ldr	r3, [pc, #108]	; (800e8a4 <io_memory_tell+0x8c>)
 800e838:	22cb      	movs	r2, #203	; 0xcb
 800e83a:	491b      	ldr	r1, [pc, #108]	; (800e8a8 <io_memory_tell+0x90>)
 800e83c:	2001      	movs	r0, #1
 800e83e:	f000 fcf1 	bl	800f224 <sail_log>
 800e842:	4b1a      	ldr	r3, [pc, #104]	; (800e8ac <io_memory_tell+0x94>)
 800e844:	9300      	str	r3, [sp, #0]
 800e846:	4b1a      	ldr	r3, [pc, #104]	; (800e8b0 <io_memory_tell+0x98>)
 800e848:	22cb      	movs	r2, #203	; 0xcb
 800e84a:	4917      	ldr	r1, [pc, #92]	; (800e8a8 <io_memory_tell+0x90>)
 800e84c:	2001      	movs	r0, #1
 800e84e:	f000 fce9 	bl	800f224 <sail_log>
 800e852:	2301      	movs	r3, #1
 800e854:	e020      	b.n	800e898 <io_memory_tell+0x80>
    SAIL_CHECK_PTR(offset);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	bf0c      	ite	eq
 800e85c:	2301      	moveq	r3, #1
 800e85e:	2300      	movne	r3, #0
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b00      	cmp	r3, #0
 800e864:	d011      	beq.n	800e88a <io_memory_tell+0x72>
 800e866:	4b13      	ldr	r3, [pc, #76]	; (800e8b4 <io_memory_tell+0x9c>)
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	4b0e      	ldr	r3, [pc, #56]	; (800e8a4 <io_memory_tell+0x8c>)
 800e86c:	22cc      	movs	r2, #204	; 0xcc
 800e86e:	490e      	ldr	r1, [pc, #56]	; (800e8a8 <io_memory_tell+0x90>)
 800e870:	2001      	movs	r0, #1
 800e872:	f000 fcd7 	bl	800f224 <sail_log>
 800e876:	4b0d      	ldr	r3, [pc, #52]	; (800e8ac <io_memory_tell+0x94>)
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	4b0d      	ldr	r3, [pc, #52]	; (800e8b0 <io_memory_tell+0x98>)
 800e87c:	22cc      	movs	r2, #204	; 0xcc
 800e87e:	490a      	ldr	r1, [pc, #40]	; (800e8a8 <io_memory_tell+0x90>)
 800e880:	2001      	movs	r0, #1
 800e882:	f000 fccf 	bl	800f224 <sail_log>
 800e886:	2301      	movs	r3, #1
 800e888:	e006      	b.n	800e898 <io_memory_tell+0x80>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	60fb      	str	r3, [r7, #12]

    *offset = mem_io_buffer_info->pos;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	689a      	ldr	r2, [r3, #8]
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	080195ec 	.word	0x080195ec
 800e8a4:	08019588 	.word	0x08019588
 800e8a8:	080195a0 	.word	0x080195a0
 800e8ac:	080195f8 	.word	0x080195f8
 800e8b0:	080195f4 	.word	0x080195f4
 800e8b4:	08019688 	.word	0x08019688

0800e8b8 <io_memory_close>:
    SAIL_CHECK_PTR(stream);

    return SAIL_OK;
}

static sail_status_t io_memory_close(void *stream) {
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af02      	add	r7, sp, #8
 800e8be:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(stream);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	bf0c      	ite	eq
 800e8c6:	2301      	moveq	r3, #1
 800e8c8:	2300      	movne	r3, #0
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d011      	beq.n	800e8f4 <io_memory_close+0x3c>
 800e8d0:	4b0c      	ldr	r3, [pc, #48]	; (800e904 <io_memory_close+0x4c>)
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <io_memory_close+0x50>)
 800e8d6:	22de      	movs	r2, #222	; 0xde
 800e8d8:	490c      	ldr	r1, [pc, #48]	; (800e90c <io_memory_close+0x54>)
 800e8da:	2001      	movs	r0, #1
 800e8dc:	f000 fca2 	bl	800f224 <sail_log>
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	; (800e910 <io_memory_close+0x58>)
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	4b0b      	ldr	r3, [pc, #44]	; (800e914 <io_memory_close+0x5c>)
 800e8e6:	22de      	movs	r2, #222	; 0xde
 800e8e8:	4908      	ldr	r1, [pc, #32]	; (800e90c <io_memory_close+0x54>)
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	f000 fc9a 	bl	800f224 <sail_log>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e003      	b.n	800e8fc <io_memory_close+0x44>

    sail_free(stream);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 fe15 	bl	800f524 <sail_free>

    return SAIL_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	080195ec 	.word	0x080195ec
 800e908:	08019588 	.word	0x08019588
 800e90c:	080195a0 	.word	0x080195a0
 800e910:	080195f8 	.word	0x080195f8
 800e914:	080195f4 	.word	0x080195f4

0800e918 <io_memory_eof>:

static sail_status_t io_memory_eof(void *stream, bool *result) {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(stream);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2b00      	cmp	r3, #0
 800e926:	bf0c      	ite	eq
 800e928:	2301      	moveq	r3, #1
 800e92a:	2300      	movne	r3, #0
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d011      	beq.n	800e956 <io_memory_eof+0x3e>
 800e932:	4b1f      	ldr	r3, [pc, #124]	; (800e9b0 <io_memory_eof+0x98>)
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	4b1f      	ldr	r3, [pc, #124]	; (800e9b4 <io_memory_eof+0x9c>)
 800e938:	22e7      	movs	r2, #231	; 0xe7
 800e93a:	491f      	ldr	r1, [pc, #124]	; (800e9b8 <io_memory_eof+0xa0>)
 800e93c:	2001      	movs	r0, #1
 800e93e:	f000 fc71 	bl	800f224 <sail_log>
 800e942:	4b1e      	ldr	r3, [pc, #120]	; (800e9bc <io_memory_eof+0xa4>)
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <io_memory_eof+0xa8>)
 800e948:	22e7      	movs	r2, #231	; 0xe7
 800e94a:	491b      	ldr	r1, [pc, #108]	; (800e9b8 <io_memory_eof+0xa0>)
 800e94c:	2001      	movs	r0, #1
 800e94e:	f000 fc69 	bl	800f224 <sail_log>
 800e952:	2301      	movs	r3, #1
 800e954:	e027      	b.n	800e9a6 <io_memory_eof+0x8e>
    SAIL_CHECK_PTR(result);
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	bf0c      	ite	eq
 800e95c:	2301      	moveq	r3, #1
 800e95e:	2300      	movne	r3, #0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	d011      	beq.n	800e98a <io_memory_eof+0x72>
 800e966:	4b17      	ldr	r3, [pc, #92]	; (800e9c4 <io_memory_eof+0xac>)
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	4b12      	ldr	r3, [pc, #72]	; (800e9b4 <io_memory_eof+0x9c>)
 800e96c:	22e8      	movs	r2, #232	; 0xe8
 800e96e:	4912      	ldr	r1, [pc, #72]	; (800e9b8 <io_memory_eof+0xa0>)
 800e970:	2001      	movs	r0, #1
 800e972:	f000 fc57 	bl	800f224 <sail_log>
 800e976:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <io_memory_eof+0xa4>)
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	4b11      	ldr	r3, [pc, #68]	; (800e9c0 <io_memory_eof+0xa8>)
 800e97c:	22e8      	movs	r2, #232	; 0xe8
 800e97e:	490e      	ldr	r1, [pc, #56]	; (800e9b8 <io_memory_eof+0xa0>)
 800e980:	2001      	movs	r0, #1
 800e982:	f000 fc4f 	bl	800f224 <sail_log>
 800e986:	2301      	movs	r3, #1
 800e988:	e00d      	b.n	800e9a6 <io_memory_eof+0x8e>

    struct mem_io_buffer_info *mem_io_buffer_info = (struct mem_io_buffer_info *)stream;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	60fb      	str	r3, [r7, #12]

    *result = mem_io_buffer_info->pos >= mem_io_buffer_info->accessible_length;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	689a      	ldr	r2, [r3, #8]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	429a      	cmp	r2, r3
 800e998:	bf2c      	ite	cs
 800e99a:	2301      	movcs	r3, #1
 800e99c:	2300      	movcc	r3, #0
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	701a      	strb	r2, [r3, #0]

    return SAIL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	080195ec 	.word	0x080195ec
 800e9b4:	08019588 	.word	0x08019588
 800e9b8:	080195a0 	.word	0x080195a0
 800e9bc:	080195f8 	.word	0x080195f8
 800e9c0:	080195f4 	.word	0x080195f4
 800e9c4:	08019690 	.word	0x08019690

0800e9c8 <sail_alloc_io_read_memory>:

/*
 * Public functions.
 */

sail_status_t sail_alloc_io_read_memory(const void *buffer, size_t length, struct sail_io **io) {
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	; 0x28
 800e9cc:	af02      	add	r7, sp, #8
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(buffer);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	bf0c      	ite	eq
 800e9da:	2301      	moveq	r3, #1
 800e9dc:	2300      	movne	r3, #0
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d011      	beq.n	800ea08 <sail_alloc_io_read_memory+0x40>
 800e9e4:	4b4c      	ldr	r3, [pc, #304]	; (800eb18 <sail_alloc_io_read_memory+0x150>)
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	4b4c      	ldr	r3, [pc, #304]	; (800eb1c <sail_alloc_io_read_memory+0x154>)
 800e9ea:	22f7      	movs	r2, #247	; 0xf7
 800e9ec:	494c      	ldr	r1, [pc, #304]	; (800eb20 <sail_alloc_io_read_memory+0x158>)
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	f000 fc18 	bl	800f224 <sail_log>
 800e9f4:	4b4b      	ldr	r3, [pc, #300]	; (800eb24 <sail_alloc_io_read_memory+0x15c>)
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4b4b      	ldr	r3, [pc, #300]	; (800eb28 <sail_alloc_io_read_memory+0x160>)
 800e9fa:	22f7      	movs	r2, #247	; 0xf7
 800e9fc:	4948      	ldr	r1, [pc, #288]	; (800eb20 <sail_alloc_io_read_memory+0x158>)
 800e9fe:	2001      	movs	r0, #1
 800ea00:	f000 fc10 	bl	800f224 <sail_log>
 800ea04:	2301      	movs	r3, #1
 800ea06:	e07e      	b.n	800eb06 <sail_alloc_io_read_memory+0x13e>
    SAIL_CHECK_PTR(io);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bf0c      	ite	eq
 800ea0e:	2301      	moveq	r3, #1
 800ea10:	2300      	movne	r3, #0
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d011      	beq.n	800ea3c <sail_alloc_io_read_memory+0x74>
 800ea18:	4b44      	ldr	r3, [pc, #272]	; (800eb2c <sail_alloc_io_read_memory+0x164>)
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	4b3f      	ldr	r3, [pc, #252]	; (800eb1c <sail_alloc_io_read_memory+0x154>)
 800ea1e:	22f8      	movs	r2, #248	; 0xf8
 800ea20:	493f      	ldr	r1, [pc, #252]	; (800eb20 <sail_alloc_io_read_memory+0x158>)
 800ea22:	2001      	movs	r0, #1
 800ea24:	f000 fbfe 	bl	800f224 <sail_log>
 800ea28:	4b3e      	ldr	r3, [pc, #248]	; (800eb24 <sail_alloc_io_read_memory+0x15c>)
 800ea2a:	9300      	str	r3, [sp, #0]
 800ea2c:	4b3e      	ldr	r3, [pc, #248]	; (800eb28 <sail_alloc_io_read_memory+0x160>)
 800ea2e:	22f8      	movs	r2, #248	; 0xf8
 800ea30:	493b      	ldr	r1, [pc, #236]	; (800eb20 <sail_alloc_io_read_memory+0x158>)
 800ea32:	2001      	movs	r0, #1
 800ea34:	f000 fbf6 	bl	800f224 <sail_log>
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e064      	b.n	800eb06 <sail_alloc_io_read_memory+0x13e>

    SAIL_LOG_DEBUG("Opening memory buffer of size %lu for reading", length);
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	4b3b      	ldr	r3, [pc, #236]	; (800eb30 <sail_alloc_io_read_memory+0x168>)
 800ea42:	22fa      	movs	r2, #250	; 0xfa
 800ea44:	4936      	ldr	r1, [pc, #216]	; (800eb20 <sail_alloc_io_read_memory+0x158>)
 800ea46:	2005      	movs	r0, #5
 800ea48:	f000 fbec 	bl	800f224 <sail_log>

    struct sail_io *io_local;
    SAIL_TRY(sail_alloc_io(&io_local));
 800ea4c:	f107 0314 	add.w	r3, r7, #20
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff fc95 	bl	800e380 <sail_alloc_io>
 800ea56:	4603      	mov	r3, r0
 800ea58:	83fb      	strh	r3, [r7, #30]
 800ea5a:	8bfb      	ldrh	r3, [r7, #30]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bf14      	ite	ne
 800ea60:	2301      	movne	r3, #1
 800ea62:	2300      	moveq	r3, #0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <sail_alloc_io_read_memory+0xa6>
 800ea6a:	8bfb      	ldrh	r3, [r7, #30]
 800ea6c:	e04b      	b.n	800eb06 <sail_alloc_io_read_memory+0x13e>

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct mem_io_read_stream), &ptr),
 800ea6e:	f107 0310 	add.w	r3, r7, #16
 800ea72:	4619      	mov	r1, r3
 800ea74:	2010      	movs	r0, #16
 800ea76:	f000 fccd 	bl	800f414 <sail_malloc>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	83bb      	strh	r3, [r7, #28]
 800ea7e:	8bbb      	ldrh	r3, [r7, #28]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bf14      	ite	ne
 800ea84:	2301      	movne	r3, #1
 800ea86:	2300      	moveq	r3, #0
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d005      	beq.n	800ea9a <sail_alloc_io_read_memory+0xd2>
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7ff fceb 	bl	800e46c <sail_destroy_io>
 800ea96:	8bbb      	ldrh	r3, [r7, #28]
 800ea98:	e035      	b.n	800eb06 <sail_alloc_io_read_memory+0x13e>
                        /* cleanup */ sail_destroy_io(io_local));
    struct mem_io_read_stream *mem_io_read_stream = ptr;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	61bb      	str	r3, [r7, #24]

    mem_io_read_stream->mem_io_buffer_info.length            = length;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	601a      	str	r2, [r3, #0]
    mem_io_read_stream->mem_io_buffer_info.accessible_length = length;
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	605a      	str	r2, [r3, #4]
    mem_io_read_stream->mem_io_buffer_info.pos               = 0;
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	2200      	movs	r2, #0
 800eaae:	609a      	str	r2, [r3, #8]
    mem_io_read_stream->buffer                               = buffer;
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	60da      	str	r2, [r3, #12]

    io_local->id             = SAIL_MEMORY_IO_ID;
 800eab6:	6979      	ldr	r1, [r7, #20]
 800eab8:	a315      	add	r3, pc, #84	; (adr r3, 800eb10 <sail_alloc_io_read_memory+0x148>)
 800eaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabe:	e9c1 2300 	strd	r2, r3, [r1]
    io_local->stream         = mem_io_read_stream;
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	60da      	str	r2, [r3, #12]
    io_local->tolerant_read  = io_memory_tolerant_read;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	4a1a      	ldr	r2, [pc, #104]	; (800eb34 <sail_alloc_io_read_memory+0x16c>)
 800eacc:	611a      	str	r2, [r3, #16]
    io_local->strict_read    = io_memory_strict_read;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	4a19      	ldr	r2, [pc, #100]	; (800eb38 <sail_alloc_io_read_memory+0x170>)
 800ead2:	615a      	str	r2, [r3, #20]
    io_local->tolerant_write = sail_io_noop_tolerant_write;
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	4a19      	ldr	r2, [pc, #100]	; (800eb3c <sail_alloc_io_read_memory+0x174>)
 800ead8:	619a      	str	r2, [r3, #24]
    io_local->strict_write   = sail_io_noop_strict_write;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	4a18      	ldr	r2, [pc, #96]	; (800eb40 <sail_alloc_io_read_memory+0x178>)
 800eade:	61da      	str	r2, [r3, #28]
    io_local->seek           = io_memory_seek;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	4a18      	ldr	r2, [pc, #96]	; (800eb44 <sail_alloc_io_read_memory+0x17c>)
 800eae4:	621a      	str	r2, [r3, #32]
    io_local->tell           = io_memory_tell;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	4a17      	ldr	r2, [pc, #92]	; (800eb48 <sail_alloc_io_read_memory+0x180>)
 800eaea:	625a      	str	r2, [r3, #36]	; 0x24
    io_local->flush          = sail_io_noop_flush;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	4a17      	ldr	r2, [pc, #92]	; (800eb4c <sail_alloc_io_read_memory+0x184>)
 800eaf0:	629a      	str	r2, [r3, #40]	; 0x28
    io_local->close          = io_memory_close;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	4a16      	ldr	r2, [pc, #88]	; (800eb50 <sail_alloc_io_read_memory+0x188>)
 800eaf6:	62da      	str	r2, [r3, #44]	; 0x2c
    io_local->eof            = io_memory_eof;
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	4a16      	ldr	r2, [pc, #88]	; (800eb54 <sail_alloc_io_read_memory+0x18c>)
 800eafc:	631a      	str	r2, [r3, #48]	; 0x30

    *io = io_local;
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3720      	adds	r7, #32
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	b238af93 	.word	0xb238af93
 800eb14:	a5ea23d2 	.word	0xa5ea23d2
 800eb18:	08019698 	.word	0x08019698
 800eb1c:	08019588 	.word	0x08019588
 800eb20:	080195a0 	.word	0x080195a0
 800eb24:	080195f8 	.word	0x080195f8
 800eb28:	080195f4 	.word	0x080195f4
 800eb2c:	080196a0 	.word	0x080196a0
 800eb30:	080196a4 	.word	0x080196a4
 800eb34:	0800e589 	.word	0x0800e589
 800eb38:	0800e6d1 	.word	0x0800e6d1
 800eb3c:	0800eb59 	.word	0x0800eb59
 800eb40:	0800eb8d 	.word	0x0800eb8d
 800eb44:	0800e735 	.word	0x0800e735
 800eb48:	0800e819 	.word	0x0800e819
 800eb4c:	0800ebc1 	.word	0x0800ebc1
 800eb50:	0800e8b9 	.word	0x0800e8b9
 800eb54:	0800e919 	.word	0x0800e919

0800eb58 <sail_io_noop_tolerant_write>:
    (void)offset;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
}

sail_status_t sail_io_noop_tolerant_write(void *stream, const void *buf, size_t size_to_write, size_t *written_size) {
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af02      	add	r7, sp, #8
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)size_to_write;
    (void)written_size;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800eb66:	4b06      	ldr	r3, [pc, #24]	; (800eb80 <sail_io_noop_tolerant_write+0x28>)
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	4b06      	ldr	r3, [pc, #24]	; (800eb84 <sail_io_noop_tolerant_write+0x2c>)
 800eb6c:	2249      	movs	r2, #73	; 0x49
 800eb6e:	4906      	ldr	r1, [pc, #24]	; (800eb88 <sail_io_noop_tolerant_write+0x30>)
 800eb70:	2001      	movs	r0, #1
 800eb72:	f000 fb57 	bl	800f224 <sail_log>
 800eb76:	2311      	movs	r3, #17
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	08019754 	.word	0x08019754
 800eb84:	08019704 	.word	0x08019704
 800eb88:	08019708 	.word	0x08019708

0800eb8c <sail_io_noop_strict_write>:

sail_status_t sail_io_noop_strict_write(void *stream, const void *buf, size_t size_to_write) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]

    (void)stream;
    (void)buf;
    (void)size_to_write;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800eb98:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <sail_io_noop_strict_write+0x28>)
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	4b06      	ldr	r3, [pc, #24]	; (800ebb8 <sail_io_noop_strict_write+0x2c>)
 800eb9e:	2252      	movs	r2, #82	; 0x52
 800eba0:	4906      	ldr	r1, [pc, #24]	; (800ebbc <sail_io_noop_strict_write+0x30>)
 800eba2:	2001      	movs	r0, #1
 800eba4:	f000 fb3e 	bl	800f224 <sail_log>
 800eba8:	2311      	movs	r3, #17
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08019754 	.word	0x08019754
 800ebb8:	08019704 	.word	0x08019704
 800ebbc:	08019708 	.word	0x08019708

0800ebc0 <sail_io_noop_flush>:

sail_status_t sail_io_noop_flush(void *stream) {
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af02      	add	r7, sp, #8
 800ebc6:	6078      	str	r0, [r7, #4]

    (void)stream;

    SAIL_LOG_AND_RETURN(SAIL_ERROR_NOT_IMPLEMENTED);
 800ebc8:	4b06      	ldr	r3, [pc, #24]	; (800ebe4 <sail_io_noop_flush+0x24>)
 800ebca:	9300      	str	r3, [sp, #0]
 800ebcc:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <sail_io_noop_flush+0x28>)
 800ebce:	2259      	movs	r2, #89	; 0x59
 800ebd0:	4906      	ldr	r1, [pc, #24]	; (800ebec <sail_io_noop_flush+0x2c>)
 800ebd2:	2001      	movs	r0, #1
 800ebd4:	f000 fb26 	bl	800f224 <sail_log>
 800ebd8:	2311      	movs	r3, #17
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	08019754 	.word	0x08019754
 800ebe8:	08019704 	.word	0x08019704
 800ebec:	08019708 	.word	0x08019708

0800ebf0 <sail_private_alloc_linked_list_node>:
    SOFTWARE.
*/

#include "sail-common.h"

sail_status_t sail_private_alloc_linked_list_node(struct linked_list_node **node) {
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af02      	add	r7, sp, #8
 800ebf6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(node);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	bf0c      	ite	eq
 800ebfe:	2301      	moveq	r3, #1
 800ec00:	2300      	movne	r3, #0
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d011      	beq.n	800ec2c <sail_private_alloc_linked_list_node+0x3c>
 800ec08:	4b19      	ldr	r3, [pc, #100]	; (800ec70 <sail_private_alloc_linked_list_node+0x80>)
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	4b19      	ldr	r3, [pc, #100]	; (800ec74 <sail_private_alloc_linked_list_node+0x84>)
 800ec0e:	221e      	movs	r2, #30
 800ec10:	4919      	ldr	r1, [pc, #100]	; (800ec78 <sail_private_alloc_linked_list_node+0x88>)
 800ec12:	2001      	movs	r0, #1
 800ec14:	f000 fb06 	bl	800f224 <sail_log>
 800ec18:	4b18      	ldr	r3, [pc, #96]	; (800ec7c <sail_private_alloc_linked_list_node+0x8c>)
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	4b18      	ldr	r3, [pc, #96]	; (800ec80 <sail_private_alloc_linked_list_node+0x90>)
 800ec1e:	221e      	movs	r2, #30
 800ec20:	4915      	ldr	r1, [pc, #84]	; (800ec78 <sail_private_alloc_linked_list_node+0x88>)
 800ec22:	2001      	movs	r0, #1
 800ec24:	f000 fafe 	bl	800f224 <sail_log>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e01d      	b.n	800ec68 <sail_private_alloc_linked_list_node+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct linked_list_node), &ptr));
 800ec2c:	f107 0308 	add.w	r3, r7, #8
 800ec30:	4619      	mov	r1, r3
 800ec32:	2008      	movs	r0, #8
 800ec34:	f000 fbee 	bl	800f414 <sail_malloc>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	81fb      	strh	r3, [r7, #14]
 800ec3c:	89fb      	ldrh	r3, [r7, #14]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	bf14      	ite	ne
 800ec42:	2301      	movne	r3, #1
 800ec44:	2300      	moveq	r3, #0
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <sail_private_alloc_linked_list_node+0x60>
 800ec4c:	89fb      	ldrh	r3, [r7, #14]
 800ec4e:	e00b      	b.n	800ec68 <sail_private_alloc_linked_list_node+0x78>
    *node = ptr;
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	601a      	str	r2, [r3, #0]

    (*node)->value = NULL;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	601a      	str	r2, [r3, #0]
    (*node)->next  = NULL;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2200      	movs	r2, #0
 800ec64:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	080197e4 	.word	0x080197e4
 800ec74:	08019770 	.word	0x08019770
 800ec78:	08019788 	.word	0x08019788
 800ec7c:	080197f0 	.word	0x080197f0
 800ec80:	080197ec 	.word	0x080197ec

0800ec84 <sail_private_destroy_linked_list_node>:

    return SAIL_OK;
}

void sail_private_destroy_linked_list_node(struct linked_list_node *node,
                                           linked_list_value_deallocator_t value_deallocator) {
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]

    if (node == NULL) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d008      	beq.n	800eca6 <sail_private_destroy_linked_list_node+0x22>
        return;
    }

    value_deallocator(node->value);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	4798      	blx	r3
    sail_free(node);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 fc40 	bl	800f524 <sail_free>
 800eca4:	e000      	b.n	800eca8 <sail_private_destroy_linked_list_node+0x24>
        return;
 800eca6:	bf00      	nop
}
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
	...

0800ecb0 <sail_private_copy_linked_list_node>:

sail_status_t sail_private_copy_linked_list_node(const struct linked_list_node *source,
                                                 struct linked_list_node **target,
                                                 linked_list_value_copier_t value_copier,
                                                 linked_list_value_deallocator_t value_deallocator) {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b08a      	sub	sp, #40	; 0x28
 800ecb4:	af02      	add	r7, sp, #8
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
 800ecbc:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(source);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	bf0c      	ite	eq
 800ecc4:	2301      	moveq	r3, #1
 800ecc6:	2300      	movne	r3, #0
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d011      	beq.n	800ecf2 <sail_private_copy_linked_list_node+0x42>
 800ecce:	4b30      	ldr	r3, [pc, #192]	; (800ed90 <sail_private_copy_linked_list_node+0xe0>)
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	4b30      	ldr	r3, [pc, #192]	; (800ed94 <sail_private_copy_linked_list_node+0xe4>)
 800ecd4:	224b      	movs	r2, #75	; 0x4b
 800ecd6:	4930      	ldr	r1, [pc, #192]	; (800ed98 <sail_private_copy_linked_list_node+0xe8>)
 800ecd8:	2001      	movs	r0, #1
 800ecda:	f000 faa3 	bl	800f224 <sail_log>
 800ecde:	4b2f      	ldr	r3, [pc, #188]	; (800ed9c <sail_private_copy_linked_list_node+0xec>)
 800ece0:	9300      	str	r3, [sp, #0]
 800ece2:	4b2f      	ldr	r3, [pc, #188]	; (800eda0 <sail_private_copy_linked_list_node+0xf0>)
 800ece4:	224b      	movs	r2, #75	; 0x4b
 800ece6:	492c      	ldr	r1, [pc, #176]	; (800ed98 <sail_private_copy_linked_list_node+0xe8>)
 800ece8:	2001      	movs	r0, #1
 800ecea:	f000 fa9b 	bl	800f224 <sail_log>
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e049      	b.n	800ed86 <sail_private_copy_linked_list_node+0xd6>
    SAIL_CHECK_PTR(target);
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	bf0c      	ite	eq
 800ecf8:	2301      	moveq	r3, #1
 800ecfa:	2300      	movne	r3, #0
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d011      	beq.n	800ed26 <sail_private_copy_linked_list_node+0x76>
 800ed02:	4b28      	ldr	r3, [pc, #160]	; (800eda4 <sail_private_copy_linked_list_node+0xf4>)
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	4b23      	ldr	r3, [pc, #140]	; (800ed94 <sail_private_copy_linked_list_node+0xe4>)
 800ed08:	224c      	movs	r2, #76	; 0x4c
 800ed0a:	4923      	ldr	r1, [pc, #140]	; (800ed98 <sail_private_copy_linked_list_node+0xe8>)
 800ed0c:	2001      	movs	r0, #1
 800ed0e:	f000 fa89 	bl	800f224 <sail_log>
 800ed12:	4b22      	ldr	r3, [pc, #136]	; (800ed9c <sail_private_copy_linked_list_node+0xec>)
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	4b22      	ldr	r3, [pc, #136]	; (800eda0 <sail_private_copy_linked_list_node+0xf0>)
 800ed18:	224c      	movs	r2, #76	; 0x4c
 800ed1a:	491f      	ldr	r1, [pc, #124]	; (800ed98 <sail_private_copy_linked_list_node+0xe8>)
 800ed1c:	2001      	movs	r0, #1
 800ed1e:	f000 fa81 	bl	800f224 <sail_log>
 800ed22:	2301      	movs	r3, #1
 800ed24:	e02f      	b.n	800ed86 <sail_private_copy_linked_list_node+0xd6>

    struct linked_list_node *node_local;
    SAIL_TRY(sail_private_alloc_linked_list_node(&node_local));
 800ed26:	f107 0318 	add.w	r3, r7, #24
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7ff ff60 	bl	800ebf0 <sail_private_alloc_linked_list_node>
 800ed30:	4603      	mov	r3, r0
 800ed32:	83fb      	strh	r3, [r7, #30]
 800ed34:	8bfb      	ldrh	r3, [r7, #30]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	bf14      	ite	ne
 800ed3a:	2301      	movne	r3, #1
 800ed3c:	2300      	moveq	r3, #0
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d001      	beq.n	800ed48 <sail_private_copy_linked_list_node+0x98>
 800ed44:	8bfb      	ldrh	r3, [r7, #30]
 800ed46:	e01e      	b.n	800ed86 <sail_private_copy_linked_list_node+0xd6>

    void *ptr;
    SAIL_TRY_OR_CLEANUP(value_copier(source->value, &ptr),
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	f107 0114 	add.w	r1, r7, #20
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4610      	mov	r0, r2
 800ed54:	4798      	blx	r3
 800ed56:	4603      	mov	r3, r0
 800ed58:	83bb      	strh	r3, [r7, #28]
 800ed5a:	8bbb      	ldrh	r3, [r7, #28]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bf14      	ite	ne
 800ed60:	2301      	movne	r3, #1
 800ed62:	2300      	moveq	r3, #0
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d006      	beq.n	800ed78 <sail_private_copy_linked_list_node+0xc8>
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff ff88 	bl	800ec84 <sail_private_destroy_linked_list_node>
 800ed74:	8bbb      	ldrh	r3, [r7, #28]
 800ed76:	e006      	b.n	800ed86 <sail_private_copy_linked_list_node+0xd6>
                        /* cleanup */ sail_private_destroy_linked_list_node(node_local, value_deallocator));
    node_local->value = ptr;
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	601a      	str	r2, [r3, #0]

    *target = node_local;
 800ed7e:	69ba      	ldr	r2, [r7, #24]
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3720      	adds	r7, #32
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	08019804 	.word	0x08019804
 800ed94:	08019770 	.word	0x08019770
 800ed98:	08019788 	.word	0x08019788
 800ed9c:	080197f0 	.word	0x080197f0
 800eda0:	080197ec 	.word	0x080197ec
 800eda4:	0801980c 	.word	0x0801980c

0800eda8 <sail_private_destroy_linked_list_node_chain>:

void sail_private_destroy_linked_list_node_chain(struct linked_list_node *node,
                                                 linked_list_value_deallocator_t value_deallocator) {
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]

    while (node != NULL) {
 800edb2:	e008      	b.n	800edc6 <sail_private_destroy_linked_list_node_chain+0x1e>
        struct linked_list_node *node_next = node->next;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	60fb      	str	r3, [r7, #12]

        sail_private_destroy_linked_list_node(node, value_deallocator);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff ff61 	bl	800ec84 <sail_private_destroy_linked_list_node>

        node = node_next;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	607b      	str	r3, [r7, #4]
    while (node != NULL) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f3      	bne.n	800edb4 <sail_private_destroy_linked_list_node_chain+0xc>
    }
}
 800edcc:	bf00      	nop
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <sail_private_copy_linked_list_node_chain>:

sail_status_t sail_private_copy_linked_list_node_chain(const struct linked_list_node *source,
                                                       struct linked_list_node **target,
                                                       linked_list_value_copier_t value_copier,
                                                       linked_list_value_deallocator_t value_deallocator) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08a      	sub	sp, #40	; 0x28
 800eddc:	af02      	add	r7, sp, #8
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(target);
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	bf0c      	ite	eq
 800edec:	2301      	moveq	r3, #1
 800edee:	2300      	movne	r3, #0
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d011      	beq.n	800ee1a <sail_private_copy_linked_list_node_chain+0x42>
 800edf6:	4b2a      	ldr	r3, [pc, #168]	; (800eea0 <sail_private_copy_linked_list_node_chain+0xc8>)
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	4b2a      	ldr	r3, [pc, #168]	; (800eea4 <sail_private_copy_linked_list_node_chain+0xcc>)
 800edfc:	226c      	movs	r2, #108	; 0x6c
 800edfe:	492a      	ldr	r1, [pc, #168]	; (800eea8 <sail_private_copy_linked_list_node_chain+0xd0>)
 800ee00:	2001      	movs	r0, #1
 800ee02:	f000 fa0f 	bl	800f224 <sail_log>
 800ee06:	4b29      	ldr	r3, [pc, #164]	; (800eeac <sail_private_copy_linked_list_node_chain+0xd4>)
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	4b29      	ldr	r3, [pc, #164]	; (800eeb0 <sail_private_copy_linked_list_node_chain+0xd8>)
 800ee0c:	226c      	movs	r2, #108	; 0x6c
 800ee0e:	4926      	ldr	r1, [pc, #152]	; (800eea8 <sail_private_copy_linked_list_node_chain+0xd0>)
 800ee10:	2001      	movs	r0, #1
 800ee12:	f000 fa07 	bl	800f224 <sail_log>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e03d      	b.n	800ee96 <sail_private_copy_linked_list_node_chain+0xbe>

    if (source == NULL) {
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d104      	bne.n	800ee2a <sail_private_copy_linked_list_node_chain+0x52>
        *target = NULL;
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2200      	movs	r2, #0
 800ee24:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e035      	b.n	800ee96 <sail_private_copy_linked_list_node_chain+0xbe>
    }

    struct linked_list_node *node_local = NULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
    struct linked_list_node *linked_list_node_current = NULL;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	61bb      	str	r3, [r7, #24]

    while (source != NULL) {
 800ee32:	e029      	b.n	800ee88 <sail_private_copy_linked_list_node_chain+0xb0>
        struct linked_list_node *linked_list_node = NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	613b      	str	r3, [r7, #16]

        SAIL_TRY_OR_CLEANUP(sail_private_copy_linked_list_node(source, &linked_list_node, value_copier, value_deallocator),
 800ee38:	f107 0110 	add.w	r1, r7, #16
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f7ff ff35 	bl	800ecb0 <sail_private_copy_linked_list_node>
 800ee46:	4603      	mov	r3, r0
 800ee48:	82fb      	strh	r3, [r7, #22]
 800ee4a:	8afb      	ldrh	r3, [r7, #22]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bf14      	ite	ne
 800ee50:	2301      	movne	r3, #1
 800ee52:	2300      	moveq	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d005      	beq.n	800ee66 <sail_private_copy_linked_list_node_chain+0x8e>
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	69f8      	ldr	r0, [r7, #28]
 800ee5e:	f7ff ffa3 	bl	800eda8 <sail_private_destroy_linked_list_node_chain>
 800ee62:	8afb      	ldrh	r3, [r7, #22]
 800ee64:	e017      	b.n	800ee96 <sail_private_copy_linked_list_node_chain+0xbe>
                            /* cleanup */ sail_private_destroy_linked_list_node_chain(node_local, value_deallocator));

        if (node_local == NULL) {
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d104      	bne.n	800ee76 <sail_private_copy_linked_list_node_chain+0x9e>
            node_local = linked_list_node;
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	61fb      	str	r3, [r7, #28]
            linked_list_node_current = node_local;
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	61bb      	str	r3, [r7, #24]
 800ee74:	e005      	b.n	800ee82 <sail_private_copy_linked_list_node_chain+0xaa>
        } else {
            linked_list_node_current->next = linked_list_node;
 800ee76:	693a      	ldr	r2, [r7, #16]
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	605a      	str	r2, [r3, #4]
            linked_list_node_current = linked_list_node_current->next;
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	61bb      	str	r3, [r7, #24]
        }

        source = source->next;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	60fb      	str	r3, [r7, #12]
    while (source != NULL) {
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d1d2      	bne.n	800ee34 <sail_private_copy_linked_list_node_chain+0x5c>
    }

    *target = node_local;
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	69fa      	ldr	r2, [r7, #28]
 800ee92:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3720      	adds	r7, #32
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	0801980c 	.word	0x0801980c
 800eea4:	08019770 	.word	0x08019770
 800eea8:	08019788 	.word	0x08019788
 800eeac:	080197f0 	.word	0x080197f0
 800eeb0:	080197ec 	.word	0x080197ec

0800eeb4 <sail_alloc_load_features>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_load_features(struct sail_load_features **load_features) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(load_features);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	bf0c      	ite	eq
 800eec2:	2301      	moveq	r3, #1
 800eec4:	2300      	movne	r3, #0
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d011      	beq.n	800eef0 <sail_alloc_load_features+0x3c>
 800eecc:	4b19      	ldr	r3, [pc, #100]	; (800ef34 <sail_alloc_load_features+0x80>)
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	4b19      	ldr	r3, [pc, #100]	; (800ef38 <sail_alloc_load_features+0x84>)
 800eed2:	2221      	movs	r2, #33	; 0x21
 800eed4:	4919      	ldr	r1, [pc, #100]	; (800ef3c <sail_alloc_load_features+0x88>)
 800eed6:	2001      	movs	r0, #1
 800eed8:	f000 f9a4 	bl	800f224 <sail_log>
 800eedc:	4b18      	ldr	r3, [pc, #96]	; (800ef40 <sail_alloc_load_features+0x8c>)
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4b18      	ldr	r3, [pc, #96]	; (800ef44 <sail_alloc_load_features+0x90>)
 800eee2:	2221      	movs	r2, #33	; 0x21
 800eee4:	4915      	ldr	r1, [pc, #84]	; (800ef3c <sail_alloc_load_features+0x88>)
 800eee6:	2001      	movs	r0, #1
 800eee8:	f000 f99c 	bl	800f224 <sail_log>
 800eeec:	2301      	movs	r3, #1
 800eeee:	e01d      	b.n	800ef2c <sail_alloc_load_features+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_load_features), &ptr));
 800eef0:	f107 0308 	add.w	r3, r7, #8
 800eef4:	4619      	mov	r1, r3
 800eef6:	2008      	movs	r0, #8
 800eef8:	f000 fa8c 	bl	800f414 <sail_malloc>
 800eefc:	4603      	mov	r3, r0
 800eefe:	81fb      	strh	r3, [r7, #14]
 800ef00:	89fb      	ldrh	r3, [r7, #14]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bf14      	ite	ne
 800ef06:	2301      	movne	r3, #1
 800ef08:	2300      	moveq	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <sail_alloc_load_features+0x60>
 800ef10:	89fb      	ldrh	r3, [r7, #14]
 800ef12:	e00b      	b.n	800ef2c <sail_alloc_load_features+0x78>
    *load_features = ptr;
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	601a      	str	r2, [r3, #0]

    (*load_features)->features = 0;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	601a      	str	r2, [r3, #0]
    (*load_features)->tuning   = NULL;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2200      	movs	r2, #0
 800ef28:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08019884 	.word	0x08019884
 800ef38:	08019814 	.word	0x08019814
 800ef3c:	0801982c 	.word	0x0801982c
 800ef40:	08019898 	.word	0x08019898
 800ef44:	08019894 	.word	0x08019894

0800ef48 <sail_destroy_load_features>:

void sail_destroy_load_features(struct sail_load_features *load_features) {
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]

    if (load_features == NULL) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d008      	beq.n	800ef68 <sail_destroy_load_features+0x20>
        return;
    }

    sail_destroy_string_node_chain(load_features->tuning);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f001 fb34 	bl	80105c8 <sail_destroy_string_node_chain>
    sail_free(load_features);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 fadf 	bl	800f524 <sail_free>
 800ef66:	e000      	b.n	800ef6a <sail_destroy_load_features+0x22>
        return;
 800ef68:	bf00      	nop
}
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <sail_alloc_load_options>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_load_options(struct sail_load_options **load_options) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af02      	add	r7, sp, #8
 800ef76:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(load_options);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	bf0c      	ite	eq
 800ef7e:	2301      	moveq	r3, #1
 800ef80:	2300      	movne	r3, #0
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d011      	beq.n	800efac <sail_alloc_load_options+0x3c>
 800ef88:	4b19      	ldr	r3, [pc, #100]	; (800eff0 <sail_alloc_load_options+0x80>)
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	4b19      	ldr	r3, [pc, #100]	; (800eff4 <sail_alloc_load_options+0x84>)
 800ef8e:	2221      	movs	r2, #33	; 0x21
 800ef90:	4919      	ldr	r1, [pc, #100]	; (800eff8 <sail_alloc_load_options+0x88>)
 800ef92:	2001      	movs	r0, #1
 800ef94:	f000 f946 	bl	800f224 <sail_log>
 800ef98:	4b18      	ldr	r3, [pc, #96]	; (800effc <sail_alloc_load_options+0x8c>)
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	4b18      	ldr	r3, [pc, #96]	; (800f000 <sail_alloc_load_options+0x90>)
 800ef9e:	2221      	movs	r2, #33	; 0x21
 800efa0:	4915      	ldr	r1, [pc, #84]	; (800eff8 <sail_alloc_load_options+0x88>)
 800efa2:	2001      	movs	r0, #1
 800efa4:	f000 f93e 	bl	800f224 <sail_log>
 800efa8:	2301      	movs	r3, #1
 800efaa:	e01d      	b.n	800efe8 <sail_alloc_load_options+0x78>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_load_options), &ptr));
 800efac:	f107 0308 	add.w	r3, r7, #8
 800efb0:	4619      	mov	r1, r3
 800efb2:	2008      	movs	r0, #8
 800efb4:	f000 fa2e 	bl	800f414 <sail_malloc>
 800efb8:	4603      	mov	r3, r0
 800efba:	81fb      	strh	r3, [r7, #14]
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	bf14      	ite	ne
 800efc2:	2301      	movne	r3, #1
 800efc4:	2300      	moveq	r3, #0
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <sail_alloc_load_options+0x60>
 800efcc:	89fb      	ldrh	r3, [r7, #14]
 800efce:	e00b      	b.n	800efe8 <sail_alloc_load_options+0x78>
    *load_options = ptr;
 800efd0:	68ba      	ldr	r2, [r7, #8]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	601a      	str	r2, [r3, #0]

    (*load_options)->options = 0;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2200      	movs	r2, #0
 800efdc:	601a      	str	r2, [r3, #0]
    (*load_options)->tuning  = NULL;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2200      	movs	r2, #0
 800efe4:	605a      	str	r2, [r3, #4]

    return SAIL_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	0801991c 	.word	0x0801991c
 800eff4:	080198ac 	.word	0x080198ac
 800eff8:	080198c4 	.word	0x080198c4
 800effc:	08019930 	.word	0x08019930
 800f000:	0801992c 	.word	0x0801992c

0800f004 <sail_destroy_load_options>:

void sail_destroy_load_options(struct sail_load_options *load_options) {
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]

    if (load_options == NULL) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d008      	beq.n	800f024 <sail_destroy_load_options+0x20>
        return;
    }

    sail_destroy_hash_map(load_options->tuning);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	4618      	mov	r0, r3
 800f018:	f7fe fc5e 	bl	800d8d8 <sail_destroy_hash_map>
    sail_free(load_options);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 fa81 	bl	800f524 <sail_free>
 800f022:	e000      	b.n	800f026 <sail_destroy_load_options+0x22>
        return;
 800f024:	bf00      	nop
}
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <sail_alloc_load_options_from_features>:

sail_status_t sail_alloc_load_options_from_features(const struct sail_load_features *load_features, struct sail_load_options **load_options) {
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af02      	add	r7, sp, #8
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(load_options);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	bf0c      	ite	eq
 800f03c:	2301      	moveq	r3, #1
 800f03e:	2300      	movne	r3, #0
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	d011      	beq.n	800f06a <sail_alloc_load_options_from_features+0x3e>
 800f046:	4b23      	ldr	r3, [pc, #140]	; (800f0d4 <sail_alloc_load_options_from_features+0xa8>)
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	4b23      	ldr	r3, [pc, #140]	; (800f0d8 <sail_alloc_load_options_from_features+0xac>)
 800f04c:	2239      	movs	r2, #57	; 0x39
 800f04e:	4923      	ldr	r1, [pc, #140]	; (800f0dc <sail_alloc_load_options_from_features+0xb0>)
 800f050:	2001      	movs	r0, #1
 800f052:	f000 f8e7 	bl	800f224 <sail_log>
 800f056:	4b22      	ldr	r3, [pc, #136]	; (800f0e0 <sail_alloc_load_options_from_features+0xb4>)
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	4b22      	ldr	r3, [pc, #136]	; (800f0e4 <sail_alloc_load_options_from_features+0xb8>)
 800f05c:	2239      	movs	r2, #57	; 0x39
 800f05e:	491f      	ldr	r1, [pc, #124]	; (800f0dc <sail_alloc_load_options_from_features+0xb0>)
 800f060:	2001      	movs	r0, #1
 800f062:	f000 f8df 	bl	800f224 <sail_log>
 800f066:	2301      	movs	r3, #1
 800f068:	e02f      	b.n	800f0ca <sail_alloc_load_options_from_features+0x9e>

    struct sail_load_options *load_options_local;
    SAIL_TRY(sail_alloc_load_options(&load_options_local));
 800f06a:	f107 0308 	add.w	r3, r7, #8
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff ff7e 	bl	800ef70 <sail_alloc_load_options>
 800f074:	4603      	mov	r3, r0
 800f076:	81fb      	strh	r3, [r7, #14]
 800f078:	89fb      	ldrh	r3, [r7, #14]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bf14      	ite	ne
 800f07e:	2301      	movne	r3, #1
 800f080:	2300      	moveq	r3, #0
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <sail_alloc_load_options_from_features+0x60>
 800f088:	89fb      	ldrh	r3, [r7, #14]
 800f08a:	e01e      	b.n	800f0ca <sail_alloc_load_options_from_features+0x9e>

    load_options_local->options = 0;
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]

    if (load_features->features & SAIL_CODEC_FEATURE_META_DATA) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f003 0310 	and.w	r3, r3, #16
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <sail_alloc_load_options_from_features+0x7e>
        load_options_local->options |= SAIL_OPTION_META_DATA;
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	f042 0201 	orr.w	r2, r2, #1
 800f0a8:	601a      	str	r2, [r3, #0]
    }

    if (load_features->features & SAIL_CODEC_FEATURE_ICCP) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d005      	beq.n	800f0c2 <sail_alloc_load_options_from_features+0x96>
        load_options_local->options |= SAIL_OPTION_ICCP;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	f042 0204 	orr.w	r2, r2, #4
 800f0c0:	601a      	str	r2, [r3, #0]
    }

    *load_options = load_options_local;
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	0801991c 	.word	0x0801991c
 800f0d8:	080198ac 	.word	0x080198ac
 800f0dc:	080198c4 	.word	0x080198c4
 800f0e0:	08019930 	.word	0x08019930
 800f0e4:	0801992c 	.word	0x0801992c

0800f0e8 <sail_copy_load_options>:

sail_status_t sail_copy_load_options(const struct sail_load_options *source, struct sail_load_options **target) {
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af02      	add	r7, sp, #8
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	bf0c      	ite	eq
 800f0f8:	2301      	moveq	r3, #1
 800f0fa:	2300      	movne	r3, #0
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d011      	beq.n	800f126 <sail_copy_load_options+0x3e>
 800f102:	4b32      	ldr	r3, [pc, #200]	; (800f1cc <sail_copy_load_options+0xe4>)
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	4b32      	ldr	r3, [pc, #200]	; (800f1d0 <sail_copy_load_options+0xe8>)
 800f108:	224f      	movs	r2, #79	; 0x4f
 800f10a:	4932      	ldr	r1, [pc, #200]	; (800f1d4 <sail_copy_load_options+0xec>)
 800f10c:	2001      	movs	r0, #1
 800f10e:	f000 f889 	bl	800f224 <sail_log>
 800f112:	4b31      	ldr	r3, [pc, #196]	; (800f1d8 <sail_copy_load_options+0xf0>)
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	4b31      	ldr	r3, [pc, #196]	; (800f1dc <sail_copy_load_options+0xf4>)
 800f118:	224f      	movs	r2, #79	; 0x4f
 800f11a:	492e      	ldr	r1, [pc, #184]	; (800f1d4 <sail_copy_load_options+0xec>)
 800f11c:	2001      	movs	r0, #1
 800f11e:	f000 f881 	bl	800f224 <sail_log>
 800f122:	2301      	movs	r3, #1
 800f124:	e04e      	b.n	800f1c4 <sail_copy_load_options+0xdc>
    SAIL_CHECK_PTR(target);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	bf0c      	ite	eq
 800f12c:	2301      	moveq	r3, #1
 800f12e:	2300      	movne	r3, #0
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d011      	beq.n	800f15a <sail_copy_load_options+0x72>
 800f136:	4b2a      	ldr	r3, [pc, #168]	; (800f1e0 <sail_copy_load_options+0xf8>)
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <sail_copy_load_options+0xe8>)
 800f13c:	2250      	movs	r2, #80	; 0x50
 800f13e:	4925      	ldr	r1, [pc, #148]	; (800f1d4 <sail_copy_load_options+0xec>)
 800f140:	2001      	movs	r0, #1
 800f142:	f000 f86f 	bl	800f224 <sail_log>
 800f146:	4b24      	ldr	r3, [pc, #144]	; (800f1d8 <sail_copy_load_options+0xf0>)
 800f148:	9300      	str	r3, [sp, #0]
 800f14a:	4b24      	ldr	r3, [pc, #144]	; (800f1dc <sail_copy_load_options+0xf4>)
 800f14c:	2250      	movs	r2, #80	; 0x50
 800f14e:	4921      	ldr	r1, [pc, #132]	; (800f1d4 <sail_copy_load_options+0xec>)
 800f150:	2001      	movs	r0, #1
 800f152:	f000 f867 	bl	800f224 <sail_log>
 800f156:	2301      	movs	r3, #1
 800f158:	e034      	b.n	800f1c4 <sail_copy_load_options+0xdc>

    struct sail_load_options *target_local;
    SAIL_TRY(sail_alloc_load_options(&target_local));
 800f15a:	f107 0308 	add.w	r3, r7, #8
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff ff06 	bl	800ef70 <sail_alloc_load_options>
 800f164:	4603      	mov	r3, r0
 800f166:	81fb      	strh	r3, [r7, #14]
 800f168:	89fb      	ldrh	r3, [r7, #14]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	bf14      	ite	ne
 800f16e:	2301      	movne	r3, #1
 800f170:	2300      	moveq	r3, #0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d001      	beq.n	800f17c <sail_copy_load_options+0x94>
 800f178:	89fb      	ldrh	r3, [r7, #14]
 800f17a:	e023      	b.n	800f1c4 <sail_copy_load_options+0xdc>

    target_local->options = source->options;
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	6812      	ldr	r2, [r2, #0]
 800f182:	601a      	str	r2, [r3, #0]

    if (source->tuning != NULL) {
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d017      	beq.n	800f1bc <sail_copy_load_options+0xd4>
        SAIL_TRY_OR_CLEANUP(sail_copy_hash_map(source->tuning, &target_local->tuning),
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	3304      	adds	r3, #4
 800f194:	4619      	mov	r1, r3
 800f196:	4610      	mov	r0, r2
 800f198:	f7fe fbce 	bl	800d938 <sail_copy_hash_map>
 800f19c:	4603      	mov	r3, r0
 800f19e:	81bb      	strh	r3, [r7, #12]
 800f1a0:	89bb      	ldrh	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	bf14      	ite	ne
 800f1a6:	2301      	movne	r3, #1
 800f1a8:	2300      	moveq	r3, #0
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d005      	beq.n	800f1bc <sail_copy_load_options+0xd4>
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff ff26 	bl	800f004 <sail_destroy_load_options>
 800f1b8:	89bb      	ldrh	r3, [r7, #12]
 800f1ba:	e003      	b.n	800f1c4 <sail_copy_load_options+0xdc>
                            /* cleanup */ sail_destroy_load_options(target_local));
    }

    *target = target_local;
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	08019944 	.word	0x08019944
 800f1d0:	080198ac 	.word	0x080198ac
 800f1d4:	080198c4 	.word	0x080198c4
 800f1d8:	08019930 	.word	0x08019930
 800f1dc:	0801992c 	.word	0x0801992c
 800f1e0:	0801994c 	.word	0x0801994c

0800f1e4 <check_ansi_colors_supported>:

static enum SailLogLevel sail_max_log_level = SAIL_LOG_LEVEL_DEBUG;

static sail_logger sail_external_logger = NULL;

static bool check_ansi_colors_supported(void) {
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0

    static SAIL_THREAD_LOCAL bool ansi_colors_supported_called = false;
    static SAIL_THREAD_LOCAL bool ansi_colors_supported = false;

    if (ansi_colors_supported_called) {
 800f1e8:	480c      	ldr	r0, [pc, #48]	; (800f21c <check_ansi_colors_supported+0x38>)
 800f1ea:	f7f1 ffe7 	bl	80011bc <__emutls_get_address>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d005      	beq.n	800f202 <check_ansi_colors_supported+0x1e>
        return ansi_colors_supported;
 800f1f6:	480a      	ldr	r0, [pc, #40]	; (800f220 <check_ansi_colors_supported+0x3c>)
 800f1f8:	f7f1 ffe0 	bl	80011bc <__emutls_get_address>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	e00a      	b.n	800f218 <check_ansi_colors_supported+0x34>
    }

    ansi_colors_supported_called = true;
 800f202:	4806      	ldr	r0, [pc, #24]	; (800f21c <check_ansi_colors_supported+0x38>)
 800f204:	f7f1 ffda 	bl	80011bc <__emutls_get_address>
 800f208:	4603      	mov	r3, r0
 800f20a:	2201      	movs	r2, #1
 800f20c:	701a      	strb	r2, [r3, #0]
            ansi_colors_supported = true;
        #endif
    }
#endif

    return ansi_colors_supported;
 800f20e:	4804      	ldr	r0, [pc, #16]	; (800f220 <check_ansi_colors_supported+0x3c>)
 800f210:	f7f1 ffd4 	bl	80011bc <__emutls_get_address>
 800f214:	4603      	mov	r3, r0
 800f216:	781b      	ldrb	r3, [r3, #0]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	20000074 	.word	0x20000074
 800f220:	20000064 	.word	0x20000064

0800f224 <sail_log>:

void sail_log(enum SailLogLevel level, const char *file, int line, const char *format, ...) {
 800f224:	b408      	push	{r3}
 800f226:	b590      	push	{r4, r7, lr}
 800f228:	b08c      	sub	sp, #48	; 0x30
 800f22a:	af02      	add	r7, sp, #8
 800f22c:	4603      	mov	r3, r0
 800f22e:	60b9      	str	r1, [r7, #8]
 800f230:	607a      	str	r2, [r7, #4]
 800f232:	73fb      	strb	r3, [r7, #15]

    /* Filter out. */
    if (level > sail_max_log_level) {
 800f234:	4b66      	ldr	r3, [pc, #408]	; (800f3d0 <sail_log+0x1ac>)
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	7bfa      	ldrb	r2, [r7, #15]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	f200 80c0 	bhi.w	800f3c0 <sail_log+0x19c>
        return;
    }

    if (sail_external_logger != NULL) {
 800f240:	4b64      	ldr	r3, [pc, #400]	; (800f3d4 <sail_log+0x1b0>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00c      	beq.n	800f262 <sail_log+0x3e>
        va_list args;
        va_start(args, format);
 800f248:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f24c:	617b      	str	r3, [r7, #20]

        sail_external_logger(level, file, line, format, args);
 800f24e:	4b61      	ldr	r3, [pc, #388]	; (800f3d4 <sail_log+0x1b0>)
 800f250:	681c      	ldr	r4, [r3, #0]
 800f252:	7bf8      	ldrb	r0, [r7, #15]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	68b9      	ldr	r1, [r7, #8]
 800f25e:	47a0      	blx	r4
 800f260:	e0af      	b.n	800f3c2 <sail_log+0x19e>

        va_end(args);
        return;
    }

    const char *level_string = NULL;
 800f262:	2300      	movs	r3, #0
 800f264:	627b      	str	r3, [r7, #36]	; 0x24

    switch (level) {
 800f266:	7bfb      	ldrb	r3, [r7, #15]
 800f268:	2b06      	cmp	r3, #6
 800f26a:	d823      	bhi.n	800f2b4 <sail_log+0x90>
 800f26c:	a201      	add	r2, pc, #4	; (adr r2, 800f274 <sail_log+0x50>)
 800f26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f272:	bf00      	nop
 800f274:	0800f2b5 	.word	0x0800f2b5
 800f278:	0800f291 	.word	0x0800f291
 800f27c:	0800f297 	.word	0x0800f297
 800f280:	0800f29d 	.word	0x0800f29d
 800f284:	0800f2a3 	.word	0x0800f2a3
 800f288:	0800f2a9 	.word	0x0800f2a9
 800f28c:	0800f2af 	.word	0x0800f2af
        /* Something weird. */
        case SAIL_LOG_LEVEL_SILENCE: break;

        /* Normal log levels. */
        case SAIL_LOG_LEVEL_ERROR:   level_string = "E"; break;
 800f290:	4b51      	ldr	r3, [pc, #324]	; (800f3d8 <sail_log+0x1b4>)
 800f292:	627b      	str	r3, [r7, #36]	; 0x24
 800f294:	e00e      	b.n	800f2b4 <sail_log+0x90>
        case SAIL_LOG_LEVEL_WARNING: level_string = "W"; break;
 800f296:	4b51      	ldr	r3, [pc, #324]	; (800f3dc <sail_log+0x1b8>)
 800f298:	627b      	str	r3, [r7, #36]	; 0x24
 800f29a:	e00b      	b.n	800f2b4 <sail_log+0x90>
        case SAIL_LOG_LEVEL_INFO:    level_string = "I"; break;
 800f29c:	4b50      	ldr	r3, [pc, #320]	; (800f3e0 <sail_log+0x1bc>)
 800f29e:	627b      	str	r3, [r7, #36]	; 0x24
 800f2a0:	e008      	b.n	800f2b4 <sail_log+0x90>
        case SAIL_LOG_LEVEL_MESSAGE: level_string = "M"; break;
 800f2a2:	4b50      	ldr	r3, [pc, #320]	; (800f3e4 <sail_log+0x1c0>)
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f2a6:	e005      	b.n	800f2b4 <sail_log+0x90>
        case SAIL_LOG_LEVEL_DEBUG:   level_string = "D"; break;
 800f2a8:	4b4f      	ldr	r3, [pc, #316]	; (800f3e8 <sail_log+0x1c4>)
 800f2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ac:	e002      	b.n	800f2b4 <sail_log+0x90>
        case SAIL_LOG_LEVEL_TRACE:   level_string = "T"; break;
 800f2ae:	4b4f      	ldr	r3, [pc, #316]	; (800f3ec <sail_log+0x1c8>)
 800f2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800f2b2:	bf00      	nop
    }

    const bool ansi_colors_supported = check_ansi_colors_supported();
 800f2b4:	f7ff ff96 	bl	800f1e4 <check_ansi_colors_supported>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (ansi_colors_supported) {
 800f2be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d041      	beq.n	800f34a <sail_log+0x126>
        switch (level) {
 800f2c6:	7bfb      	ldrb	r3, [r7, #15]
 800f2c8:	2b06      	cmp	r3, #6
 800f2ca:	d83f      	bhi.n	800f34c <sail_log+0x128>
 800f2cc:	a201      	add	r2, pc, #4	; (adr r2, 800f2d4 <sail_log+0xb0>)
 800f2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d2:	bf00      	nop
 800f2d4:	0800f34d 	.word	0x0800f34d
 800f2d8:	0800f2f1 	.word	0x0800f2f1
 800f2dc:	0800f303 	.word	0x0800f303
 800f2e0:	0800f315 	.word	0x0800f315
 800f2e4:	0800f34d 	.word	0x0800f34d
 800f2e8:	0800f327 	.word	0x0800f327
 800f2ec:	0800f339 	.word	0x0800f339
            case SAIL_LOG_LEVEL_SILENCE: break;

            case SAIL_LOG_LEVEL_ERROR:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_RED);    break;
 800f2f0:	4b3f      	ldr	r3, [pc, #252]	; (800f3f0 <sail_log+0x1cc>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	2207      	movs	r2, #7
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	483e      	ldr	r0, [pc, #248]	; (800f3f4 <sail_log+0x1d0>)
 800f2fc:	f004 f868 	bl	80133d0 <fwrite>
 800f300:	e024      	b.n	800f34c <sail_log+0x128>
            case SAIL_LOG_LEVEL_WARNING: fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_YELLOW); break;
 800f302:	4b3b      	ldr	r3, [pc, #236]	; (800f3f0 <sail_log+0x1cc>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	2207      	movs	r2, #7
 800f30a:	2101      	movs	r1, #1
 800f30c:	483a      	ldr	r0, [pc, #232]	; (800f3f8 <sail_log+0x1d4>)
 800f30e:	f004 f85f 	bl	80133d0 <fwrite>
 800f312:	e01b      	b.n	800f34c <sail_log+0x128>
            case SAIL_LOG_LEVEL_INFO:    fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_CYAN);   break;
 800f314:	4b36      	ldr	r3, [pc, #216]	; (800f3f0 <sail_log+0x1cc>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	2207      	movs	r2, #7
 800f31c:	2101      	movs	r1, #1
 800f31e:	4837      	ldr	r0, [pc, #220]	; (800f3fc <sail_log+0x1d8>)
 800f320:	f004 f856 	bl	80133d0 <fwrite>
 800f324:	e012      	b.n	800f34c <sail_log+0x128>
            case SAIL_LOG_LEVEL_MESSAGE:                                                       break;
            case SAIL_LOG_LEVEL_DEBUG:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_BLUE);   break;
 800f326:	4b32      	ldr	r3, [pc, #200]	; (800f3f0 <sail_log+0x1cc>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68db      	ldr	r3, [r3, #12]
 800f32c:	2207      	movs	r2, #7
 800f32e:	2101      	movs	r1, #1
 800f330:	4833      	ldr	r0, [pc, #204]	; (800f400 <sail_log+0x1dc>)
 800f332:	f004 f84d 	bl	80133d0 <fwrite>
 800f336:	e009      	b.n	800f34c <sail_log+0x128>
            case SAIL_LOG_LEVEL_TRACE:   fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_BOLD_WHITE);  break;
 800f338:	4b2d      	ldr	r3, [pc, #180]	; (800f3f0 <sail_log+0x1cc>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	2207      	movs	r2, #7
 800f340:	2101      	movs	r1, #1
 800f342:	4830      	ldr	r0, [pc, #192]	; (800f404 <sail_log+0x1e0>)
 800f344:	f004 f844 	bl	80133d0 <fwrite>
 800f348:	e000      	b.n	800f34c <sail_log+0x128>
        }
    }
 800f34a:	bf00      	nop

    /* Print log level. */
    va_list args;
    va_start(args, format);
 800f34c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f350:	61bb      	str	r3, [r7, #24]

    fprintf(SAIL_LOG_FPTR, "SAIL: [%s] ", level_string);
 800f352:	4b27      	ldr	r3, [pc, #156]	; (800f3f0 <sail_log+0x1cc>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f35a:	492b      	ldr	r1, [pc, #172]	; (800f408 <sail_log+0x1e4>)
 800f35c:	4618      	mov	r0, r3
 800f35e:	f003 ff65 	bl	801322c <fiprintf>

    /* Print file and line. */
#ifdef SAIL_WIN32
    const char *name = strrchr(file, '\\');
#else
    const char *name = strrchr(file, '/');
 800f362:	212f      	movs	r1, #47	; 0x2f
 800f364:	68b8      	ldr	r0, [r7, #8]
 800f366:	f005 f9a4 	bl	80146b2 <strrchr>
 800f36a:	61f8      	str	r0, [r7, #28]
#endif

    fprintf(SAIL_LOG_FPTR, "[%s:%d] ", name == NULL ? file : name+1, line);
 800f36c:	4b20      	ldr	r3, [pc, #128]	; (800f3f0 <sail_log+0x1cc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68d8      	ldr	r0, [r3, #12]
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <sail_log+0x15a>
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	1c5a      	adds	r2, r3, #1
 800f37c:	e000      	b.n	800f380 <sail_log+0x15c>
 800f37e:	68ba      	ldr	r2, [r7, #8]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4922      	ldr	r1, [pc, #136]	; (800f40c <sail_log+0x1e8>)
 800f384:	f003 ff52 	bl	801322c <fiprintf>

    /* Print the rest of arguments. */
    vfprintf(SAIL_LOG_FPTR, format, args);
 800f388:	4b19      	ldr	r3, [pc, #100]	; (800f3f0 <sail_log+0x1cc>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f392:	4618      	mov	r0, r3
 800f394:	f004 fb3c 	bl	8013a10 <vfiprintf>

    if (ansi_colors_supported) {
 800f398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d007      	beq.n	800f3b0 <sail_log+0x18c>
        fprintf(SAIL_LOG_FPTR, "%s", SAIL_COLOR_RESET);
 800f3a0:	4b13      	ldr	r3, [pc, #76]	; (800f3f0 <sail_log+0x1cc>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	2204      	movs	r2, #4
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	4819      	ldr	r0, [pc, #100]	; (800f410 <sail_log+0x1ec>)
 800f3ac:	f004 f810 	bl	80133d0 <fwrite>
    }

    fprintf(SAIL_LOG_FPTR, "\n");
 800f3b0:	4b0f      	ldr	r3, [pc, #60]	; (800f3f0 <sail_log+0x1cc>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	200a      	movs	r0, #10
 800f3ba:	f003 ff81 	bl	80132c0 <fputc>
 800f3be:	e000      	b.n	800f3c2 <sail_log+0x19e>
        return;
 800f3c0:	bf00      	nop

    va_end(args);
}
 800f3c2:	3728      	adds	r7, #40	; 0x28
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800f3ca:	b001      	add	sp, #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	20000061 	.word	0x20000061
 800f3d4:	2000382c 	.word	0x2000382c
 800f3d8:	08019954 	.word	0x08019954
 800f3dc:	08019958 	.word	0x08019958
 800f3e0:	0801995c 	.word	0x0801995c
 800f3e4:	08019960 	.word	0x08019960
 800f3e8:	08019964 	.word	0x08019964
 800f3ec:	08019968 	.word	0x08019968
 800f3f0:	20000088 	.word	0x20000088
 800f3f4:	0801996c 	.word	0x0801996c
 800f3f8:	08019974 	.word	0x08019974
 800f3fc:	0801997c 	.word	0x0801997c
 800f400:	08019984 	.word	0x08019984
 800f404:	0801998c 	.word	0x0801998c
 800f408:	08019994 	.word	0x08019994
 800f40c:	080199a0 	.word	0x080199a0
 800f410:	080199ac 	.word	0x080199ac

0800f414 <sail_malloc>:
#include "tx_api.h"
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_malloc(size_t size, void **ptr) {
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af02      	add	r7, sp, #8
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]

	UINT ret = TX_SUCCESS;
 800f41e:	2300      	movs	r3, #0
 800f420:	60fb      	str	r3, [r7, #12]
	TX_BYTE_POOL *sail_pool = (TX_BYTE_POOL*)ptr;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	60bb      	str	r3, [r7, #8]
    SAIL_CHECK_PTR(ptr);
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	bf0c      	ite	eq
 800f42c:	2301      	moveq	r3, #1
 800f42e:	2300      	movne	r3, #0
 800f430:	b2db      	uxtb	r3, r3
 800f432:	2b00      	cmp	r3, #0
 800f434:	d011      	beq.n	800f45a <sail_malloc+0x46>
 800f436:	4b12      	ldr	r3, [pc, #72]	; (800f480 <sail_malloc+0x6c>)
 800f438:	9300      	str	r3, [sp, #0]
 800f43a:	4b12      	ldr	r3, [pc, #72]	; (800f484 <sail_malloc+0x70>)
 800f43c:	2224      	movs	r2, #36	; 0x24
 800f43e:	4912      	ldr	r1, [pc, #72]	; (800f488 <sail_malloc+0x74>)
 800f440:	2001      	movs	r0, #1
 800f442:	f7ff feef 	bl	800f224 <sail_log>
 800f446:	4b11      	ldr	r3, [pc, #68]	; (800f48c <sail_malloc+0x78>)
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	4b11      	ldr	r3, [pc, #68]	; (800f490 <sail_malloc+0x7c>)
 800f44c:	2224      	movs	r2, #36	; 0x24
 800f44e:	490e      	ldr	r1, [pc, #56]	; (800f488 <sail_malloc+0x74>)
 800f450:	2001      	movs	r0, #1
 800f452:	f7ff fee7 	bl	800f224 <sail_log>
 800f456:	2301      	movs	r3, #1
 800f458:	e00e      	b.n	800f478 <sail_malloc+0x64>

    //tx_byte_allocate(byte_pool, (VOID **) &pointer, APP_STACK_SIZE, TX_NO_WAIT)
    //void *ptr_local = tx_byte_allocate(&sail_pool , ptr, size, TX_NO_WAIT);

    if (tx_byte_allocate(sail_pool, (VOID **) &ptr, size, TX_NO_WAIT) != TX_SUCCESS)
 800f45a:	4639      	mov	r1, r7
 800f45c:	2300      	movs	r3, #0
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	68b8      	ldr	r0, [r7, #8]
 800f462:	f003 fb19 	bl	8012a98 <_txe_byte_allocate>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <sail_malloc+0x5c>
    {
      ret = TX_POOL_ERROR;
 800f46c:	2302      	movs	r3, #2
 800f46e:	60fb      	str	r3, [r7, #12]

   /* if (ptr_local == NULL) {
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
    }*/

    *ptr = (void *)ret;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	08019a1c 	.word	0x08019a1c
 800f484:	080199b4 	.word	0x080199b4
 800f488:	080199cc 	.word	0x080199cc
 800f48c:	08019a24 	.word	0x08019a24
 800f490:	08019a20 	.word	0x08019a20

0800f494 <sail_realloc>:

sail_status_t sail_realloc(size_t size, void **ptr) {
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af02      	add	r7, sp, #8
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(ptr);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	bf0c      	ite	eq
 800f4a4:	2301      	moveq	r3, #1
 800f4a6:	2300      	movne	r3, #0
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d011      	beq.n	800f4d2 <sail_realloc+0x3e>
 800f4ae:	4b17      	ldr	r3, [pc, #92]	; (800f50c <sail_realloc+0x78>)
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	4b17      	ldr	r3, [pc, #92]	; (800f510 <sail_realloc+0x7c>)
 800f4b4:	2239      	movs	r2, #57	; 0x39
 800f4b6:	4917      	ldr	r1, [pc, #92]	; (800f514 <sail_realloc+0x80>)
 800f4b8:	2001      	movs	r0, #1
 800f4ba:	f7ff feb3 	bl	800f224 <sail_log>
 800f4be:	4b16      	ldr	r3, [pc, #88]	; (800f518 <sail_realloc+0x84>)
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	4b16      	ldr	r3, [pc, #88]	; (800f51c <sail_realloc+0x88>)
 800f4c4:	2239      	movs	r2, #57	; 0x39
 800f4c6:	4913      	ldr	r1, [pc, #76]	; (800f514 <sail_realloc+0x80>)
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	f7ff feab 	bl	800f224 <sail_log>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e017      	b.n	800f502 <sail_realloc+0x6e>

    void *ptr_local = realloc(*ptr, size);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	6879      	ldr	r1, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f004 fe1f 	bl	801411c <realloc>
 800f4de:	60f8      	str	r0, [r7, #12]

    if (ptr_local == NULL) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d109      	bne.n	800f4fa <sail_realloc+0x66>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_MEMORY_ALLOCATION);
 800f4e6:	4b0e      	ldr	r3, [pc, #56]	; (800f520 <sail_realloc+0x8c>)
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	4b0c      	ldr	r3, [pc, #48]	; (800f51c <sail_realloc+0x88>)
 800f4ec:	223e      	movs	r2, #62	; 0x3e
 800f4ee:	4909      	ldr	r1, [pc, #36]	; (800f514 <sail_realloc+0x80>)
 800f4f0:	2001      	movs	r0, #1
 800f4f2:	f7ff fe97 	bl	800f224 <sail_log>
 800f4f6:	2302      	movs	r3, #2
 800f4f8:	e003      	b.n	800f502 <sail_realloc+0x6e>
    }

    *ptr = ptr_local;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	08019a1c 	.word	0x08019a1c
 800f510:	080199b4 	.word	0x080199b4
 800f514:	080199cc 	.word	0x080199cc
 800f518:	08019a24 	.word	0x08019a24
 800f51c:	08019a20 	.word	0x08019a20
 800f520:	08019a38 	.word	0x08019a38

0800f524 <sail_free>:
    *ptr = ptr_local;

    return SAIL_OK;
}

void sail_free(void *ptr) {
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]

    free(ptr);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f003 fff1 	bl	8013514 <free>
}
 800f532:	bf00      	nop
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <sail_destroy_meta_data>:
    *meta_data = meta_data_local;

    return SAIL_OK;
}

void sail_destroy_meta_data(struct sail_meta_data *meta_data) {
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]

    if (meta_data == NULL) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00d      	beq.n	800f564 <sail_destroy_meta_data+0x2a>
        return;
    }

    sail_free(meta_data->key_unknown);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7ff ffe9 	bl	800f524 <sail_free>
    sail_destroy_variant(meta_data->value);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	4618      	mov	r0, r3
 800f558:	f001 fe98 	bl	801128c <sail_destroy_variant>
    sail_free(meta_data);
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff ffe1 	bl	800f524 <sail_free>
 800f562:	e000      	b.n	800f566 <sail_destroy_meta_data+0x2c>
        return;
 800f564:	bf00      	nop
}
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <sail_destroy_meta_data_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_destroy_meta_data));

    return SAIL_OK;
}

void sail_destroy_meta_data_node_chain(struct sail_meta_data_node *node) {
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 800f574:	4903      	ldr	r1, [pc, #12]	; (800f584 <sail_destroy_meta_data_node_chain+0x18>)
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7ff fc16 	bl	800eda8 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_destroy_meta_data);
}
 800f57c:	bf00      	nop
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	0800f53b 	.word	0x0800f53b

0800f588 <sail_alloc_palette>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_palette(struct sail_palette **palette) {
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af02      	add	r7, sp, #8
 800f58e:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(palette);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	bf0c      	ite	eq
 800f596:	2301      	moveq	r3, #1
 800f598:	2300      	movne	r3, #0
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d011      	beq.n	800f5c4 <sail_alloc_palette+0x3c>
 800f5a0:	4b1b      	ldr	r3, [pc, #108]	; (800f610 <sail_alloc_palette+0x88>)
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	4b1b      	ldr	r3, [pc, #108]	; (800f614 <sail_alloc_palette+0x8c>)
 800f5a6:	2222      	movs	r2, #34	; 0x22
 800f5a8:	491b      	ldr	r1, [pc, #108]	; (800f618 <sail_alloc_palette+0x90>)
 800f5aa:	2001      	movs	r0, #1
 800f5ac:	f7ff fe3a 	bl	800f224 <sail_log>
 800f5b0:	4b1a      	ldr	r3, [pc, #104]	; (800f61c <sail_alloc_palette+0x94>)
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	4b1a      	ldr	r3, [pc, #104]	; (800f620 <sail_alloc_palette+0x98>)
 800f5b6:	2222      	movs	r2, #34	; 0x22
 800f5b8:	4917      	ldr	r1, [pc, #92]	; (800f618 <sail_alloc_palette+0x90>)
 800f5ba:	2001      	movs	r0, #1
 800f5bc:	f7ff fe32 	bl	800f224 <sail_log>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e021      	b.n	800f608 <sail_alloc_palette+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_palette), &ptr));
 800f5c4:	f107 0308 	add.w	r3, r7, #8
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	200c      	movs	r0, #12
 800f5cc:	f7ff ff22 	bl	800f414 <sail_malloc>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	81fb      	strh	r3, [r7, #14]
 800f5d4:	89fb      	ldrh	r3, [r7, #14]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	bf14      	ite	ne
 800f5da:	2301      	movne	r3, #1
 800f5dc:	2300      	moveq	r3, #0
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d001      	beq.n	800f5e8 <sail_alloc_palette+0x60>
 800f5e4:	89fb      	ldrh	r3, [r7, #14]
 800f5e6:	e00f      	b.n	800f608 <sail_alloc_palette+0x80>
    *palette = ptr;
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	601a      	str	r2, [r3, #0]

    (*palette)->pixel_format = SAIL_PIXEL_FORMAT_UNKNOWN;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	701a      	strb	r2, [r3, #0]
    (*palette)->data         = NULL;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	605a      	str	r2, [r3, #4]
    (*palette)->color_count  = 0;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2200      	movs	r2, #0
 800f604:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 800f606:	2300      	movs	r3, #0
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	08019ac4 	.word	0x08019ac4
 800f614:	08019a58 	.word	0x08019a58
 800f618:	08019a70 	.word	0x08019a70
 800f61c:	08019ad0 	.word	0x08019ad0
 800f620:	08019acc 	.word	0x08019acc

0800f624 <sail_destroy_palette>:

void sail_destroy_palette(struct sail_palette *palette) {
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]

    if (palette == NULL) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d008      	beq.n	800f644 <sail_destroy_palette+0x20>
        return;
    }

    sail_free(palette->data);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	4618      	mov	r0, r3
 800f638:	f7ff ff74 	bl	800f524 <sail_free>
    sail_free(palette);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff ff71 	bl	800f524 <sail_free>
 800f642:	e000      	b.n	800f646 <sail_destroy_palette+0x22>
        return;
 800f644:	bf00      	nop
}
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <sail_alloc_palette_for_data>:
    *target_palette = palette_local;

    return SAIL_OK;
}

sail_status_t sail_alloc_palette_for_data(enum SailPixelFormat pixel_format, unsigned color_count, struct sail_palette **palette) {
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b08c      	sub	sp, #48	; 0x30
 800f650:	af02      	add	r7, sp, #8
 800f652:	4603      	mov	r3, r0
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	73fb      	strb	r3, [r7, #15]

    SAIL_CHECK_PTR(palette);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	bf0c      	ite	eq
 800f660:	2301      	moveq	r3, #1
 800f662:	2300      	movne	r3, #0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d011      	beq.n	800f68e <sail_alloc_palette_for_data+0x42>
 800f66a:	4b31      	ldr	r3, [pc, #196]	; (800f730 <sail_alloc_palette_for_data+0xe4>)
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	4b31      	ldr	r3, [pc, #196]	; (800f734 <sail_alloc_palette_for_data+0xe8>)
 800f670:	2256      	movs	r2, #86	; 0x56
 800f672:	4931      	ldr	r1, [pc, #196]	; (800f738 <sail_alloc_palette_for_data+0xec>)
 800f674:	2001      	movs	r0, #1
 800f676:	f7ff fdd5 	bl	800f224 <sail_log>
 800f67a:	4b30      	ldr	r3, [pc, #192]	; (800f73c <sail_alloc_palette_for_data+0xf0>)
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4b30      	ldr	r3, [pc, #192]	; (800f740 <sail_alloc_palette_for_data+0xf4>)
 800f680:	2256      	movs	r2, #86	; 0x56
 800f682:	492d      	ldr	r1, [pc, #180]	; (800f738 <sail_alloc_palette_for_data+0xec>)
 800f684:	2001      	movs	r0, #1
 800f686:	f7ff fdcd 	bl	800f224 <sail_log>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e04b      	b.n	800f726 <sail_alloc_palette_for_data+0xda>

    struct sail_palette *palette_local;
    SAIL_TRY(sail_alloc_palette(&palette_local));
 800f68e:	f107 031c 	add.w	r3, r7, #28
 800f692:	4618      	mov	r0, r3
 800f694:	f7ff ff78 	bl	800f588 <sail_alloc_palette>
 800f698:	4603      	mov	r3, r0
 800f69a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f69c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	bf14      	ite	ne
 800f6a2:	2301      	movne	r3, #1
 800f6a4:	2300      	moveq	r3, #0
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d001      	beq.n	800f6b0 <sail_alloc_palette_for_data+0x64>
 800f6ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f6ae:	e03a      	b.n	800f726 <sail_alloc_palette_for_data+0xda>

    palette_local->pixel_format = pixel_format;
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	7bfa      	ldrb	r2, [r7, #15]
 800f6b4:	701a      	strb	r2, [r3, #0]
    palette_local->color_count = color_count;
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	609a      	str	r2, [r3, #8]

    unsigned palette_size;
    SAIL_TRY_OR_CLEANUP(sail_bytes_per_line(color_count, pixel_format, &palette_size),
 800f6bc:	f107 0218 	add.w	r2, r7, #24
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	68b8      	ldr	r0, [r7, #8]
 800f6c6:	f001 fb85 	bl	8010dd4 <sail_bytes_per_line>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f6ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	bf14      	ite	ne
 800f6d4:	2301      	movne	r3, #1
 800f6d6:	2300      	moveq	r3, #0
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d005      	beq.n	800f6ea <sail_alloc_palette_for_data+0x9e>
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff ff9f 	bl	800f624 <sail_destroy_palette>
 800f6e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6e8:	e01d      	b.n	800f726 <sail_alloc_palette_for_data+0xda>
                        /* cleanup */ sail_destroy_palette(palette_local));

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(palette_size, &ptr),
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	f107 0214 	add.w	r2, r7, #20
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7ff fe8e 	bl	800f414 <sail_malloc>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	847b      	strh	r3, [r7, #34]	; 0x22
 800f6fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	bf14      	ite	ne
 800f702:	2301      	movne	r3, #1
 800f704:	2300      	moveq	r3, #0
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d005      	beq.n	800f718 <sail_alloc_palette_for_data+0xcc>
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff ff88 	bl	800f624 <sail_destroy_palette>
 800f714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f716:	e006      	b.n	800f726 <sail_alloc_palette_for_data+0xda>
                        /* cleanup */ sail_destroy_palette(palette_local));
    palette_local->data = ptr;
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	605a      	str	r2, [r3, #4]

    *palette = palette_local;
 800f71e:	69fa      	ldr	r2, [r7, #28]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3728      	adds	r7, #40	; 0x28
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	08019ac4 	.word	0x08019ac4
 800f734:	08019a58 	.word	0x08019a58
 800f738:	08019a70 	.word	0x08019a70
 800f73c:	08019ad0 	.word	0x08019ad0
 800f740:	08019acc 	.word	0x08019acc

0800f744 <sail_read_pixel3_uint8>:

#include <string.h>

#include "sail-common.h"

sail_status_t sail_read_pixel3_uint8(struct sail_io *io, struct sail_pixel3_uint8 *pixel) {
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af02      	add	r7, sp, #8
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	bf0c      	ite	eq
 800f754:	2301      	moveq	r3, #1
 800f756:	2300      	movne	r3, #0
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d011      	beq.n	800f782 <sail_read_pixel3_uint8+0x3e>
 800f75e:	4b27      	ldr	r3, [pc, #156]	; (800f7fc <sail_read_pixel3_uint8+0xb8>)
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	4b27      	ldr	r3, [pc, #156]	; (800f800 <sail_read_pixel3_uint8+0xbc>)
 800f764:	2220      	movs	r2, #32
 800f766:	4927      	ldr	r1, [pc, #156]	; (800f804 <sail_read_pixel3_uint8+0xc0>)
 800f768:	2001      	movs	r0, #1
 800f76a:	f7ff fd5b 	bl	800f224 <sail_log>
 800f76e:	4b26      	ldr	r3, [pc, #152]	; (800f808 <sail_read_pixel3_uint8+0xc4>)
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	4b26      	ldr	r3, [pc, #152]	; (800f80c <sail_read_pixel3_uint8+0xc8>)
 800f774:	2220      	movs	r2, #32
 800f776:	4923      	ldr	r1, [pc, #140]	; (800f804 <sail_read_pixel3_uint8+0xc0>)
 800f778:	2001      	movs	r0, #1
 800f77a:	f7ff fd53 	bl	800f224 <sail_log>
 800f77e:	2301      	movs	r3, #1
 800f780:	e037      	b.n	800f7f2 <sail_read_pixel3_uint8+0xae>
    SAIL_CHECK_PTR(pixel);
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	bf0c      	ite	eq
 800f788:	2301      	moveq	r3, #1
 800f78a:	2300      	movne	r3, #0
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d011      	beq.n	800f7b6 <sail_read_pixel3_uint8+0x72>
 800f792:	4b1f      	ldr	r3, [pc, #124]	; (800f810 <sail_read_pixel3_uint8+0xcc>)
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	4b1a      	ldr	r3, [pc, #104]	; (800f800 <sail_read_pixel3_uint8+0xbc>)
 800f798:	2221      	movs	r2, #33	; 0x21
 800f79a:	491a      	ldr	r1, [pc, #104]	; (800f804 <sail_read_pixel3_uint8+0xc0>)
 800f79c:	2001      	movs	r0, #1
 800f79e:	f7ff fd41 	bl	800f224 <sail_log>
 800f7a2:	4b19      	ldr	r3, [pc, #100]	; (800f808 <sail_read_pixel3_uint8+0xc4>)
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	4b19      	ldr	r3, [pc, #100]	; (800f80c <sail_read_pixel3_uint8+0xc8>)
 800f7a8:	2221      	movs	r2, #33	; 0x21
 800f7aa:	4916      	ldr	r1, [pc, #88]	; (800f804 <sail_read_pixel3_uint8+0xc0>)
 800f7ac:	2001      	movs	r0, #1
 800f7ae:	f7ff fd39 	bl	800f224 <sail_log>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e01d      	b.n	800f7f2 <sail_read_pixel3_uint8+0xae>

    uint8_t a[3];

    SAIL_TRY(io->strict_read(io->stream, a, sizeof(a)));
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	695b      	ldr	r3, [r3, #20]
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	68d0      	ldr	r0, [r2, #12]
 800f7be:	f107 0108 	add.w	r1, r7, #8
 800f7c2:	2203      	movs	r2, #3
 800f7c4:	4798      	blx	r3
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	81fb      	strh	r3, [r7, #14]
 800f7ca:	89fb      	ldrh	r3, [r7, #14]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bf14      	ite	ne
 800f7d0:	2301      	movne	r3, #1
 800f7d2:	2300      	moveq	r3, #0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <sail_read_pixel3_uint8+0x9a>
 800f7da:	89fb      	ldrh	r3, [r7, #14]
 800f7dc:	e009      	b.n	800f7f2 <sail_read_pixel3_uint8+0xae>

    pixel->component1 = a[0];
 800f7de:	7a3a      	ldrb	r2, [r7, #8]
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	701a      	strb	r2, [r3, #0]
    pixel->component2 = a[1];
 800f7e4:	7a7a      	ldrb	r2, [r7, #9]
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	705a      	strb	r2, [r3, #1]
    pixel->component3 = a[2];
 800f7ea:	7aba      	ldrb	r2, [r7, #10]
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	709a      	strb	r2, [r3, #2]

    return SAIL_OK;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08019b6c 	.word	0x08019b6c
 800f800:	08019b04 	.word	0x08019b04
 800f804:	08019b1c 	.word	0x08019b1c
 800f808:	08019b74 	.word	0x08019b74
 800f80c:	08019b70 	.word	0x08019b70
 800f810:	08019b88 	.word	0x08019b88

0800f814 <sail_read_pixel4_uint8>:

sail_status_t sail_read_pixel4_uint8(struct sail_io *io, struct sail_pixel4_uint8 *pixel) {
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af02      	add	r7, sp, #8
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(io);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	bf0c      	ite	eq
 800f824:	2301      	moveq	r3, #1
 800f826:	2300      	movne	r3, #0
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d011      	beq.n	800f852 <sail_read_pixel4_uint8+0x3e>
 800f82e:	4b28      	ldr	r3, [pc, #160]	; (800f8d0 <sail_read_pixel4_uint8+0xbc>)
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	4b28      	ldr	r3, [pc, #160]	; (800f8d4 <sail_read_pixel4_uint8+0xc0>)
 800f834:	2230      	movs	r2, #48	; 0x30
 800f836:	4928      	ldr	r1, [pc, #160]	; (800f8d8 <sail_read_pixel4_uint8+0xc4>)
 800f838:	2001      	movs	r0, #1
 800f83a:	f7ff fcf3 	bl	800f224 <sail_log>
 800f83e:	4b27      	ldr	r3, [pc, #156]	; (800f8dc <sail_read_pixel4_uint8+0xc8>)
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	4b27      	ldr	r3, [pc, #156]	; (800f8e0 <sail_read_pixel4_uint8+0xcc>)
 800f844:	2230      	movs	r2, #48	; 0x30
 800f846:	4924      	ldr	r1, [pc, #144]	; (800f8d8 <sail_read_pixel4_uint8+0xc4>)
 800f848:	2001      	movs	r0, #1
 800f84a:	f7ff fceb 	bl	800f224 <sail_log>
 800f84e:	2301      	movs	r3, #1
 800f850:	e03a      	b.n	800f8c8 <sail_read_pixel4_uint8+0xb4>
    SAIL_CHECK_PTR(pixel);
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	bf0c      	ite	eq
 800f858:	2301      	moveq	r3, #1
 800f85a:	2300      	movne	r3, #0
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d011      	beq.n	800f886 <sail_read_pixel4_uint8+0x72>
 800f862:	4b20      	ldr	r3, [pc, #128]	; (800f8e4 <sail_read_pixel4_uint8+0xd0>)
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	4b1b      	ldr	r3, [pc, #108]	; (800f8d4 <sail_read_pixel4_uint8+0xc0>)
 800f868:	2231      	movs	r2, #49	; 0x31
 800f86a:	491b      	ldr	r1, [pc, #108]	; (800f8d8 <sail_read_pixel4_uint8+0xc4>)
 800f86c:	2001      	movs	r0, #1
 800f86e:	f7ff fcd9 	bl	800f224 <sail_log>
 800f872:	4b1a      	ldr	r3, [pc, #104]	; (800f8dc <sail_read_pixel4_uint8+0xc8>)
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	4b1a      	ldr	r3, [pc, #104]	; (800f8e0 <sail_read_pixel4_uint8+0xcc>)
 800f878:	2231      	movs	r2, #49	; 0x31
 800f87a:	4917      	ldr	r1, [pc, #92]	; (800f8d8 <sail_read_pixel4_uint8+0xc4>)
 800f87c:	2001      	movs	r0, #1
 800f87e:	f7ff fcd1 	bl	800f224 <sail_log>
 800f882:	2301      	movs	r3, #1
 800f884:	e020      	b.n	800f8c8 <sail_read_pixel4_uint8+0xb4>

    uint8_t a[4];

    SAIL_TRY(io->strict_read(io->stream, a, sizeof(a)));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	695b      	ldr	r3, [r3, #20]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	68d0      	ldr	r0, [r2, #12]
 800f88e:	f107 0108 	add.w	r1, r7, #8
 800f892:	2204      	movs	r2, #4
 800f894:	4798      	blx	r3
 800f896:	4603      	mov	r3, r0
 800f898:	81fb      	strh	r3, [r7, #14]
 800f89a:	89fb      	ldrh	r3, [r7, #14]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bf14      	ite	ne
 800f8a0:	2301      	movne	r3, #1
 800f8a2:	2300      	moveq	r3, #0
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <sail_read_pixel4_uint8+0x9a>
 800f8aa:	89fb      	ldrh	r3, [r7, #14]
 800f8ac:	e00c      	b.n	800f8c8 <sail_read_pixel4_uint8+0xb4>

    pixel->component1 = a[0];
 800f8ae:	7a3a      	ldrb	r2, [r7, #8]
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	701a      	strb	r2, [r3, #0]
    pixel->component2 = a[1];
 800f8b4:	7a7a      	ldrb	r2, [r7, #9]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	705a      	strb	r2, [r3, #1]
    pixel->component3 = a[2];
 800f8ba:	7aba      	ldrb	r2, [r7, #10]
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	709a      	strb	r2, [r3, #2]
    pixel->component4 = a[3];
 800f8c0:	7afa      	ldrb	r2, [r7, #11]
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	70da      	strb	r2, [r3, #3]

    return SAIL_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3710      	adds	r7, #16
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	08019b6c 	.word	0x08019b6c
 800f8d4:	08019b04 	.word	0x08019b04
 800f8d8:	08019b1c 	.word	0x08019b1c
 800f8dc:	08019b74 	.word	0x08019b74
 800f8e0:	08019b70 	.word	0x08019b70
 800f8e4:	08019b88 	.word	0x08019b88

0800f8e8 <sail_alloc_resolution_from_data>:
    SAIL_TRY(sail_alloc_resolution_from_data(SAIL_RESOLUTION_UNIT_UNKNOWN, 0, 0, resolution));

    return SAIL_OK;
}

sail_status_t sail_alloc_resolution_from_data(enum SailResolutionUnit unit, double x, double y, struct sail_resolution **resolution) {
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af02      	add	r7, sp, #8
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	ed87 0b02 	vstr	d0, [r7, #8]
 800f8f4:	ed87 1b00 	vstr	d1, [r7]
 800f8f8:	6139      	str	r1, [r7, #16]
 800f8fa:	75fb      	strb	r3, [r7, #23]

    SAIL_CHECK_PTR(resolution);
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	bf0c      	ite	eq
 800f902:	2301      	moveq	r3, #1
 800f904:	2300      	movne	r3, #0
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d011      	beq.n	800f930 <sail_alloc_resolution_from_data+0x48>
 800f90c:	4b1d      	ldr	r3, [pc, #116]	; (800f984 <sail_alloc_resolution_from_data+0x9c>)
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	4b1d      	ldr	r3, [pc, #116]	; (800f988 <sail_alloc_resolution_from_data+0xa0>)
 800f912:	2228      	movs	r2, #40	; 0x28
 800f914:	491d      	ldr	r1, [pc, #116]	; (800f98c <sail_alloc_resolution_from_data+0xa4>)
 800f916:	2001      	movs	r0, #1
 800f918:	f7ff fc84 	bl	800f224 <sail_log>
 800f91c:	4b1c      	ldr	r3, [pc, #112]	; (800f990 <sail_alloc_resolution_from_data+0xa8>)
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	4b1c      	ldr	r3, [pc, #112]	; (800f994 <sail_alloc_resolution_from_data+0xac>)
 800f922:	2228      	movs	r2, #40	; 0x28
 800f924:	4919      	ldr	r1, [pc, #100]	; (800f98c <sail_alloc_resolution_from_data+0xa4>)
 800f926:	2001      	movs	r0, #1
 800f928:	f7ff fc7c 	bl	800f224 <sail_log>
 800f92c:	2301      	movs	r3, #1
 800f92e:	e025      	b.n	800f97c <sail_alloc_resolution_from_data+0x94>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_resolution), &ptr));
 800f930:	f107 0318 	add.w	r3, r7, #24
 800f934:	4619      	mov	r1, r3
 800f936:	2018      	movs	r0, #24
 800f938:	f7ff fd6c 	bl	800f414 <sail_malloc>
 800f93c:	4603      	mov	r3, r0
 800f93e:	83fb      	strh	r3, [r7, #30]
 800f940:	8bfb      	ldrh	r3, [r7, #30]
 800f942:	2b00      	cmp	r3, #0
 800f944:	bf14      	ite	ne
 800f946:	2301      	movne	r3, #1
 800f948:	2300      	moveq	r3, #0
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d001      	beq.n	800f954 <sail_alloc_resolution_from_data+0x6c>
 800f950:	8bfb      	ldrh	r3, [r7, #30]
 800f952:	e013      	b.n	800f97c <sail_alloc_resolution_from_data+0x94>
    *resolution = ptr;
 800f954:	69ba      	ldr	r2, [r7, #24]
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	601a      	str	r2, [r3, #0]

    (*resolution)->unit = unit;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	7dfa      	ldrb	r2, [r7, #23]
 800f960:	701a      	strb	r2, [r3, #0]
    (*resolution)->x    = x;
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	6819      	ldr	r1, [r3, #0]
 800f966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f96a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*resolution)->y    = y;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	6819      	ldr	r1, [r3, #0]
 800f972:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f976:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return SAIL_OK;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3720      	adds	r7, #32
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	08019bfc 	.word	0x08019bfc
 800f988:	08019b90 	.word	0x08019b90
 800f98c:	08019ba8 	.word	0x08019ba8
 800f990:	08019c0c 	.word	0x08019c0c
 800f994:	08019c08 	.word	0x08019c08

0800f998 <sail_destroy_resolution>:

void sail_destroy_resolution(struct sail_resolution *resolution) {
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]

    if (resolution == NULL) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d003      	beq.n	800f9ae <sail_destroy_resolution+0x16>
        return;
    }

    sail_free(resolution);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff fdbc 	bl	800f524 <sail_free>
 800f9ac:	e000      	b.n	800f9b0 <sail_destroy_resolution+0x18>
        return;
 800f9ae:	bf00      	nop
}
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <sail_start_loading_memory>:
    SAIL_TRY(sail_start_loading_file_with_options(path, codec_info, NULL, state));

    return SAIL_OK;
}

sail_status_t sail_start_loading_memory(const void *buffer, size_t buffer_length, const struct sail_codec_info *codec_info, void **state) {
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b088      	sub	sp, #32
 800f9ba:	af02      	add	r7, sp, #8
 800f9bc:	60f8      	str	r0, [r7, #12]
 800f9be:	60b9      	str	r1, [r7, #8]
 800f9c0:	607a      	str	r2, [r7, #4]
 800f9c2:	603b      	str	r3, [r7, #0]

    SAIL_TRY(sail_start_loading_memory_with_options(buffer, buffer_length, codec_info, NULL, state));
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	68b9      	ldr	r1, [r7, #8]
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f000 f950 	bl	800fc74 <sail_start_loading_memory_with_options>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	82fb      	strh	r3, [r7, #22]
 800f9d8:	8afb      	ldrh	r3, [r7, #22]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	bf14      	ite	ne
 800f9de:	2301      	movne	r3, #1
 800f9e0:	2300      	moveq	r3, #0
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d001      	beq.n	800f9ec <sail_start_loading_memory+0x36>
 800f9e8:	8afb      	ldrh	r3, [r7, #22]
 800f9ea:	e000      	b.n	800f9ee <sail_start_loading_memory+0x38>

    return SAIL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3718      	adds	r7, #24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
	...

0800f9f8 <sail_load_next_frame>:

sail_status_t sail_load_next_frame(void *state, struct sail_image **image) {
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	; 0x28
 800f9fc:	af02      	add	r7, sp, #8
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(state);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bf0c      	ite	eq
 800fa08:	2301      	moveq	r3, #1
 800fa0a:	2300      	movne	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d011      	beq.n	800fa36 <sail_load_next_frame+0x3e>
 800fa12:	4b73      	ldr	r3, [pc, #460]	; (800fbe0 <sail_load_next_frame+0x1e8>)
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	4b73      	ldr	r3, [pc, #460]	; (800fbe4 <sail_load_next_frame+0x1ec>)
 800fa18:	2263      	movs	r2, #99	; 0x63
 800fa1a:	4973      	ldr	r1, [pc, #460]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fa1c:	2001      	movs	r0, #1
 800fa1e:	f7ff fc01 	bl	800f224 <sail_log>
 800fa22:	4b72      	ldr	r3, [pc, #456]	; (800fbec <sail_load_next_frame+0x1f4>)
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	4b72      	ldr	r3, [pc, #456]	; (800fbf0 <sail_load_next_frame+0x1f8>)
 800fa28:	2263      	movs	r2, #99	; 0x63
 800fa2a:	496f      	ldr	r1, [pc, #444]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	f7ff fbf9 	bl	800f224 <sail_log>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e0d0      	b.n	800fbd8 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(image);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	bf0c      	ite	eq
 800fa3c:	2301      	moveq	r3, #1
 800fa3e:	2300      	movne	r3, #0
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d011      	beq.n	800fa6a <sail_load_next_frame+0x72>
 800fa46:	4b6b      	ldr	r3, [pc, #428]	; (800fbf4 <sail_load_next_frame+0x1fc>)
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	4b66      	ldr	r3, [pc, #408]	; (800fbe4 <sail_load_next_frame+0x1ec>)
 800fa4c:	2264      	movs	r2, #100	; 0x64
 800fa4e:	4966      	ldr	r1, [pc, #408]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fa50:	2001      	movs	r0, #1
 800fa52:	f7ff fbe7 	bl	800f224 <sail_log>
 800fa56:	4b65      	ldr	r3, [pc, #404]	; (800fbec <sail_load_next_frame+0x1f4>)
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	4b65      	ldr	r3, [pc, #404]	; (800fbf0 <sail_load_next_frame+0x1f8>)
 800fa5c:	2264      	movs	r2, #100	; 0x64
 800fa5e:	4962      	ldr	r1, [pc, #392]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fa60:	2001      	movs	r0, #1
 800fa62:	f7ff fbdf 	bl	800f224 <sail_log>
 800fa66:	2301      	movs	r3, #1
 800fa68:	e0b6      	b.n	800fbd8 <sail_load_next_frame+0x1e0>

    struct hidden_state *state_of_mind = (struct hidden_state *)state;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	61fb      	str	r3, [r7, #28]

    SAIL_TRY(sail_check_io_valid(state_of_mind->io));
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fe fd26 	bl	800e4c4 <sail_check_io_valid>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	837b      	strh	r3, [r7, #26]
 800fa7c:	8b7b      	ldrh	r3, [r7, #26]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	bf14      	ite	ne
 800fa82:	2301      	movne	r3, #1
 800fa84:	2300      	moveq	r3, #0
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d001      	beq.n	800fa90 <sail_load_next_frame+0x98>
 800fa8c:	8b7b      	ldrh	r3, [r7, #26]
 800fa8e:	e0a3      	b.n	800fbd8 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(state_of_mind->state);
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	bf0c      	ite	eq
 800fa98:	2301      	moveq	r3, #1
 800fa9a:	2300      	movne	r3, #0
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d011      	beq.n	800fac6 <sail_load_next_frame+0xce>
 800faa2:	4b55      	ldr	r3, [pc, #340]	; (800fbf8 <sail_load_next_frame+0x200>)
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	4b4f      	ldr	r3, [pc, #316]	; (800fbe4 <sail_load_next_frame+0x1ec>)
 800faa8:	2269      	movs	r2, #105	; 0x69
 800faaa:	494f      	ldr	r1, [pc, #316]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800faac:	2001      	movs	r0, #1
 800faae:	f7ff fbb9 	bl	800f224 <sail_log>
 800fab2:	4b4e      	ldr	r3, [pc, #312]	; (800fbec <sail_load_next_frame+0x1f4>)
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	4b4e      	ldr	r3, [pc, #312]	; (800fbf0 <sail_load_next_frame+0x1f8>)
 800fab8:	2269      	movs	r2, #105	; 0x69
 800faba:	494b      	ldr	r1, [pc, #300]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fabc:	2001      	movs	r0, #1
 800fabe:	f7ff fbb1 	bl	800f224 <sail_log>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e088      	b.n	800fbd8 <sail_load_next_frame+0x1e0>
    SAIL_CHECK_PTR(state_of_mind->codec);
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	695b      	ldr	r3, [r3, #20]
 800faca:	2b00      	cmp	r3, #0
 800facc:	bf0c      	ite	eq
 800face:	2301      	moveq	r3, #1
 800fad0:	2300      	movne	r3, #0
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d011      	beq.n	800fafc <sail_load_next_frame+0x104>
 800fad8:	4b48      	ldr	r3, [pc, #288]	; (800fbfc <sail_load_next_frame+0x204>)
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	4b41      	ldr	r3, [pc, #260]	; (800fbe4 <sail_load_next_frame+0x1ec>)
 800fade:	226a      	movs	r2, #106	; 0x6a
 800fae0:	4941      	ldr	r1, [pc, #260]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fae2:	2001      	movs	r0, #1
 800fae4:	f7ff fb9e 	bl	800f224 <sail_log>
 800fae8:	4b40      	ldr	r3, [pc, #256]	; (800fbec <sail_load_next_frame+0x1f4>)
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	4b40      	ldr	r3, [pc, #256]	; (800fbf0 <sail_load_next_frame+0x1f8>)
 800faee:	226a      	movs	r2, #106	; 0x6a
 800faf0:	493d      	ldr	r1, [pc, #244]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800faf2:	2001      	movs	r0, #1
 800faf4:	f7ff fb96 	bl	800f224 <sail_log>
 800faf8:	2301      	movs	r3, #1
 800fafa:	e06d      	b.n	800fbd8 <sail_load_next_frame+0x1e0>

    struct sail_image *image_local;
    SAIL_TRY(state_of_mind->codec->v7->load_seek_next_frame(state_of_mind->state, state_of_mind->io, &image_local));
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	69fa      	ldr	r2, [r7, #28]
 800fb06:	68d0      	ldr	r0, [r2, #12]
 800fb08:	69fa      	ldr	r2, [r7, #28]
 800fb0a:	6811      	ldr	r1, [r2, #0]
 800fb0c:	f107 020c 	add.w	r2, r7, #12
 800fb10:	4798      	blx	r3
 800fb12:	4603      	mov	r3, r0
 800fb14:	833b      	strh	r3, [r7, #24]
 800fb16:	8b3b      	ldrh	r3, [r7, #24]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	bf14      	ite	ne
 800fb1c:	2301      	movne	r3, #1
 800fb1e:	2300      	moveq	r3, #0
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d001      	beq.n	800fb2a <sail_load_next_frame+0x132>
 800fb26:	8b3b      	ldrh	r3, [r7, #24]
 800fb28:	e056      	b.n	800fbd8 <sail_load_next_frame+0x1e0>

    if (image_local->pixels != NULL) {
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d018      	beq.n	800fb64 <sail_load_next_frame+0x16c>
        SAIL_LOG_ERROR("Internal error in %s codec: codecs must not allocate pixels", state_of_mind->codec_info->name);
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	691b      	ldr	r3, [r3, #16]
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	4b31      	ldr	r3, [pc, #196]	; (800fc00 <sail_load_next_frame+0x208>)
 800fb3c:	2270      	movs	r2, #112	; 0x70
 800fb3e:	492a      	ldr	r1, [pc, #168]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fb40:	2001      	movs	r0, #1
 800fb42:	f7ff fb6f 	bl	800f224 <sail_log>
        sail_destroy_image(image_local);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fe f8b3 	bl	800dcb4 <sail_destroy_image>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CONFLICTING_OPERATION);
 800fb4e:	4b2d      	ldr	r3, [pc, #180]	; (800fc04 <sail_load_next_frame+0x20c>)
 800fb50:	9300      	str	r3, [sp, #0]
 800fb52:	4b27      	ldr	r3, [pc, #156]	; (800fbf0 <sail_load_next_frame+0x1f8>)
 800fb54:	2272      	movs	r2, #114	; 0x72
 800fb56:	4924      	ldr	r1, [pc, #144]	; (800fbe8 <sail_load_next_frame+0x1f0>)
 800fb58:	2001      	movs	r0, #1
 800fb5a:	f7ff fb63 	bl	800f224 <sail_log>
 800fb5e:	f240 1393 	movw	r3, #403	; 0x193
 800fb62:	e039      	b.n	800fbd8 <sail_load_next_frame+0x1e0>
    }

    /* Allocate pixels. */
    const size_t pixels_size = (size_t)image_local->height * image_local->bytes_per_line;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	68d2      	ldr	r2, [r2, #12]
 800fb6c:	fb02 f303 	mul.w	r3, r2, r3
 800fb70:	617b      	str	r3, [r7, #20]
    SAIL_TRY_OR_CLEANUP(sail_malloc(pixels_size, &image_local->pixels),
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	4619      	mov	r1, r3
 800fb76:	6978      	ldr	r0, [r7, #20]
 800fb78:	f7ff fc4c 	bl	800f414 <sail_malloc>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	827b      	strh	r3, [r7, #18]
 800fb80:	8a7b      	ldrh	r3, [r7, #18]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	bf14      	ite	ne
 800fb86:	2301      	movne	r3, #1
 800fb88:	2300      	moveq	r3, #0
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d005      	beq.n	800fb9c <sail_load_next_frame+0x1a4>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fe f88e 	bl	800dcb4 <sail_destroy_image>
 800fb98:	8a7b      	ldrh	r3, [r7, #18]
 800fb9a:	e01d      	b.n	800fbd8 <sail_load_next_frame+0x1e0>
                        /* cleanup */ sail_destroy_image(image_local));

    SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_frame(state_of_mind->state, state_of_mind->io, image_local),
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	695b      	ldr	r3, [r3, #20]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	69fa      	ldr	r2, [r7, #28]
 800fba6:	68d0      	ldr	r0, [r2, #12]
 800fba8:	69fa      	ldr	r2, [r7, #28]
 800fbaa:	6811      	ldr	r1, [r2, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	4798      	blx	r3
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	823b      	strh	r3, [r7, #16]
 800fbb4:	8a3b      	ldrh	r3, [r7, #16]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	bf14      	ite	ne
 800fbba:	2301      	movne	r3, #1
 800fbbc:	2300      	moveq	r3, #0
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d005      	beq.n	800fbd0 <sail_load_next_frame+0x1d8>
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fe f874 	bl	800dcb4 <sail_destroy_image>
 800fbcc:	8a3b      	ldrh	r3, [r7, #16]
 800fbce:	e003      	b.n	800fbd8 <sail_load_next_frame+0x1e0>
                        /* cleanup */ sail_destroy_image(image_local));

    *image = image_local;
 800fbd0:	68fa      	ldr	r2, [r7, #12]
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3720      	adds	r7, #32
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	08019cbc 	.word	0x08019cbc
 800fbe4:	08019c30 	.word	0x08019c30
 800fbe8:	08019c48 	.word	0x08019c48
 800fbec:	08019ca0 	.word	0x08019ca0
 800fbf0:	08019c9c 	.word	0x08019c9c
 800fbf4:	08019cc4 	.word	0x08019cc4
 800fbf8:	08019ccc 	.word	0x08019ccc
 800fbfc:	08019ce4 	.word	0x08019ce4
 800fc00:	08019cfc 	.word	0x08019cfc
 800fc04:	08019d38 	.word	0x08019d38

0800fc08 <sail_stop_loading>:

sail_status_t sail_stop_loading(void *state) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]

    /* Not an error. */
    if (state == NULL) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d101      	bne.n	800fc1a <sail_stop_loading+0x12>
        return SAIL_OK;
 800fc16:	2300      	movs	r3, #0
 800fc18:	e028      	b.n	800fc6c <sail_stop_loading+0x64>
    }

    struct hidden_state *state_of_mind = (struct hidden_state *)state;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	60fb      	str	r3, [r7, #12]

    /* Not an error. */
    if (state_of_mind->codec == NULL) {
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	695b      	ldr	r3, [r3, #20]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d104      	bne.n	800fc30 <sail_stop_loading+0x28>
        destroy_hidden_state(state_of_mind);
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f000 fa44 	bl	80100b4 <destroy_hidden_state>
        return SAIL_OK;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e01d      	b.n	800fc6c <sail_stop_loading+0x64>
    }

    SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	f102 000c 	add.w	r0, r2, #12
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	6812      	ldr	r2, [r2, #0]
 800fc42:	4611      	mov	r1, r2
 800fc44:	4798      	blx	r3
 800fc46:	4603      	mov	r3, r0
 800fc48:	817b      	strh	r3, [r7, #10]
 800fc4a:	897b      	ldrh	r3, [r7, #10]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	bf14      	ite	ne
 800fc50:	2301      	movne	r3, #1
 800fc52:	2300      	moveq	r3, #0
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d004      	beq.n	800fc64 <sail_stop_loading+0x5c>
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f000 fa2a 	bl	80100b4 <destroy_hidden_state>
 800fc60:	897b      	ldrh	r3, [r7, #10]
 800fc62:	e003      	b.n	800fc6c <sail_stop_loading+0x64>
                        /* cleanup */ destroy_hidden_state(state_of_mind));

    destroy_hidden_state(state_of_mind);
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 fa25 	bl	80100b4 <destroy_hidden_state>

    return SAIL_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <sail_start_loading_memory_with_options>:
    return SAIL_OK;
}

sail_status_t sail_start_loading_memory_with_options(const void *buffer, size_t buffer_length,
                                                     const struct sail_codec_info *codec_info,
                                                     const struct sail_load_options *load_options, void **state) {
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b08a      	sub	sp, #40	; 0x28
 800fc78:	af02      	add	r7, sp, #8
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
 800fc80:	603b      	str	r3, [r7, #0]

    SAIL_CHECK_PTR(buffer);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bf0c      	ite	eq
 800fc88:	2301      	moveq	r3, #1
 800fc8a:	2300      	movne	r3, #0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d011      	beq.n	800fcb6 <sail_start_loading_memory_with_options+0x42>
 800fc92:	4b2b      	ldr	r3, [pc, #172]	; (800fd40 <sail_start_loading_memory_with_options+0xcc>)
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	4b2b      	ldr	r3, [pc, #172]	; (800fd44 <sail_start_loading_memory_with_options+0xd0>)
 800fc98:	223a      	movs	r2, #58	; 0x3a
 800fc9a:	492b      	ldr	r1, [pc, #172]	; (800fd48 <sail_start_loading_memory_with_options+0xd4>)
 800fc9c:	2001      	movs	r0, #1
 800fc9e:	f7ff fac1 	bl	800f224 <sail_log>
 800fca2:	4b2a      	ldr	r3, [pc, #168]	; (800fd4c <sail_start_loading_memory_with_options+0xd8>)
 800fca4:	9300      	str	r3, [sp, #0]
 800fca6:	4b2a      	ldr	r3, [pc, #168]	; (800fd50 <sail_start_loading_memory_with_options+0xdc>)
 800fca8:	223a      	movs	r2, #58	; 0x3a
 800fcaa:	4927      	ldr	r1, [pc, #156]	; (800fd48 <sail_start_loading_memory_with_options+0xd4>)
 800fcac:	2001      	movs	r0, #1
 800fcae:	f7ff fab9 	bl	800f224 <sail_log>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e03f      	b.n	800fd36 <sail_start_loading_memory_with_options+0xc2>

    const struct sail_codec_info *codec_info_local;

    if (codec_info == NULL) {
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d112      	bne.n	800fce2 <sail_start_loading_memory_with_options+0x6e>
        SAIL_TRY(sail_codec_info_by_magic_number_from_memory(buffer, buffer_length, &codec_info_local));
 800fcbc:	f107 0314 	add.w	r3, r7, #20
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	68b9      	ldr	r1, [r7, #8]
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f7fa fa43 	bl	800a150 <sail_codec_info_by_magic_number_from_memory>
 800fcca:	4603      	mov	r3, r0
 800fccc:	83fb      	strh	r3, [r7, #30]
 800fcce:	8bfb      	ldrh	r3, [r7, #30]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	bf14      	ite	ne
 800fcd4:	2301      	movne	r3, #1
 800fcd6:	2300      	moveq	r3, #0
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <sail_start_loading_memory_with_options+0x72>
 800fcde:	8bfb      	ldrh	r3, [r7, #30]
 800fce0:	e029      	b.n	800fd36 <sail_start_loading_memory_with_options+0xc2>
    } else {
        codec_info_local = codec_info;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	617b      	str	r3, [r7, #20]
    }

    struct sail_io *io;
    SAIL_TRY(sail_alloc_io_read_memory(buffer, buffer_length, &io));
 800fce6:	f107 0310 	add.w	r3, r7, #16
 800fcea:	461a      	mov	r2, r3
 800fcec:	68b9      	ldr	r1, [r7, #8]
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f7fe fe6a 	bl	800e9c8 <sail_alloc_io_read_memory>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	83bb      	strh	r3, [r7, #28]
 800fcf8:	8bbb      	ldrh	r3, [r7, #28]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	bf14      	ite	ne
 800fcfe:	2301      	movne	r3, #1
 800fd00:	2300      	moveq	r3, #0
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <sail_start_loading_memory_with_options+0x98>
 800fd08:	8bbb      	ldrh	r3, [r7, #28]
 800fd0a:	e014      	b.n	800fd36 <sail_start_loading_memory_with_options+0xc2>

    SAIL_TRY(start_loading_io_with_options(io, true, codec_info_local, load_options, state));
 800fd0c:	6938      	ldr	r0, [r7, #16]
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	2101      	movs	r1, #1
 800fd18:	f000 fa56 	bl	80101c8 <start_loading_io_with_options>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	837b      	strh	r3, [r7, #26]
 800fd20:	8b7b      	ldrh	r3, [r7, #26]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	bf14      	ite	ne
 800fd26:	2301      	movne	r3, #1
 800fd28:	2300      	moveq	r3, #0
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d001      	beq.n	800fd34 <sail_start_loading_memory_with_options+0xc0>
 800fd30:	8b7b      	ldrh	r3, [r7, #26]
 800fd32:	e000      	b.n	800fd36 <sail_start_loading_memory_with_options+0xc2>

    return SAIL_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3720      	adds	r7, #32
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	08019e04 	.word	0x08019e04
 800fd44:	08019d78 	.word	0x08019d78
 800fd48:	08019d90 	.word	0x08019d90
 800fd4c:	08019df0 	.word	0x08019df0
 800fd50:	08019dec 	.word	0x08019dec

0800fd54 <sail_load_image_from_memory>:
    *image = image_local;

    return SAIL_OK;
}

sail_status_t sail_load_image_from_memory(const void *buffer, size_t buffer_length, struct sail_image **image) {
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b08a      	sub	sp, #40	; 0x28
 800fd58:	af02      	add	r7, sp, #8
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(buffer);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	bf0c      	ite	eq
 800fd66:	2301      	moveq	r3, #1
 800fd68:	2300      	movne	r3, #0
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d011      	beq.n	800fd94 <sail_load_image_from_memory+0x40>
 800fd70:	4b39      	ldr	r3, [pc, #228]	; (800fe58 <sail_load_image_from_memory+0x104>)
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	4b39      	ldr	r3, [pc, #228]	; (800fe5c <sail_load_image_from_memory+0x108>)
 800fd76:	227c      	movs	r2, #124	; 0x7c
 800fd78:	4939      	ldr	r1, [pc, #228]	; (800fe60 <sail_load_image_from_memory+0x10c>)
 800fd7a:	2001      	movs	r0, #1
 800fd7c:	f7ff fa52 	bl	800f224 <sail_log>
 800fd80:	4b38      	ldr	r3, [pc, #224]	; (800fe64 <sail_load_image_from_memory+0x110>)
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	4b38      	ldr	r3, [pc, #224]	; (800fe68 <sail_load_image_from_memory+0x114>)
 800fd86:	227c      	movs	r2, #124	; 0x7c
 800fd88:	4935      	ldr	r1, [pc, #212]	; (800fe60 <sail_load_image_from_memory+0x10c>)
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	f7ff fa4a 	bl	800f224 <sail_log>
 800fd90:	2301      	movs	r3, #1
 800fd92:	e05d      	b.n	800fe50 <sail_load_image_from_memory+0xfc>
    SAIL_CHECK_PTR(image);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	bf0c      	ite	eq
 800fd9a:	2301      	moveq	r3, #1
 800fd9c:	2300      	movne	r3, #0
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d011      	beq.n	800fdc8 <sail_load_image_from_memory+0x74>
 800fda4:	4b31      	ldr	r3, [pc, #196]	; (800fe6c <sail_load_image_from_memory+0x118>)
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	4b2c      	ldr	r3, [pc, #176]	; (800fe5c <sail_load_image_from_memory+0x108>)
 800fdaa:	227d      	movs	r2, #125	; 0x7d
 800fdac:	492c      	ldr	r1, [pc, #176]	; (800fe60 <sail_load_image_from_memory+0x10c>)
 800fdae:	2001      	movs	r0, #1
 800fdb0:	f7ff fa38 	bl	800f224 <sail_log>
 800fdb4:	4b2b      	ldr	r3, [pc, #172]	; (800fe64 <sail_load_image_from_memory+0x110>)
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	4b2b      	ldr	r3, [pc, #172]	; (800fe68 <sail_load_image_from_memory+0x114>)
 800fdba:	227d      	movs	r2, #125	; 0x7d
 800fdbc:	4928      	ldr	r1, [pc, #160]	; (800fe60 <sail_load_image_from_memory+0x10c>)
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	f7ff fa30 	bl	800f224 <sail_log>
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e043      	b.n	800fe50 <sail_load_image_from_memory+0xfc>

    void *state = NULL;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	617b      	str	r3, [r7, #20]

    SAIL_TRY_OR_CLEANUP(sail_start_loading_memory(buffer, buffer_length, NULL /* codec info */, &state),
 800fdcc:	f107 0314 	add.w	r3, r7, #20
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	68b9      	ldr	r1, [r7, #8]
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f7ff fdee 	bl	800f9b6 <sail_start_loading_memory>
 800fdda:	4603      	mov	r3, r0
 800fddc:	83fb      	strh	r3, [r7, #30]
 800fdde:	8bfb      	ldrh	r3, [r7, #30]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	bf14      	ite	ne
 800fde4:	2301      	movne	r3, #1
 800fde6:	2300      	moveq	r3, #0
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d005      	beq.n	800fdfa <sail_load_image_from_memory+0xa6>
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff ff09 	bl	800fc08 <sail_stop_loading>
 800fdf6:	8bfb      	ldrh	r3, [r7, #30]
 800fdf8:	e02a      	b.n	800fe50 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_stop_loading(state));

    SAIL_TRY_OR_CLEANUP(sail_load_next_frame(state, image),
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	6879      	ldr	r1, [r7, #4]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff fdfa 	bl	800f9f8 <sail_load_next_frame>
 800fe04:	4603      	mov	r3, r0
 800fe06:	83bb      	strh	r3, [r7, #28]
 800fe08:	8bbb      	ldrh	r3, [r7, #28]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	bf14      	ite	ne
 800fe0e:	2301      	movne	r3, #1
 800fe10:	2300      	moveq	r3, #0
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d005      	beq.n	800fe24 <sail_load_image_from_memory+0xd0>
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff fef4 	bl	800fc08 <sail_stop_loading>
 800fe20:	8bbb      	ldrh	r3, [r7, #28]
 800fe22:	e015      	b.n	800fe50 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_stop_loading(state));

    SAIL_TRY_OR_CLEANUP(sail_stop_loading(state),
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff feee 	bl	800fc08 <sail_stop_loading>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	837b      	strh	r3, [r7, #26]
 800fe30:	8b7b      	ldrh	r3, [r7, #26]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	bf14      	ite	ne
 800fe36:	2301      	movne	r3, #1
 800fe38:	2300      	moveq	r3, #0
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d006      	beq.n	800fe4e <sail_load_image_from_memory+0xfa>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fd ff35 	bl	800dcb4 <sail_destroy_image>
 800fe4a:	8b7b      	ldrh	r3, [r7, #26]
 800fe4c:	e000      	b.n	800fe50 <sail_load_image_from_memory+0xfc>
                        /* cleanup */ sail_destroy_image(*image));

    return SAIL_OK;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3720      	adds	r7, #32
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	08019ea8 	.word	0x08019ea8
 800fe5c:	08019e18 	.word	0x08019e18
 800fe60:	08019e30 	.word	0x08019e30
 800fe64:	08019e8c 	.word	0x08019e8c
 800fe68:	08019e88 	.word	0x08019e88
 800fe6c:	08019ea0 	.word	0x08019ea0

0800fe70 <load_codec_by_codec_info_unsafe>:

    SAIL_LOG_ERROR("This codec cannot save %s pixels. Use its save features to get the list of supported pixel formats for saving",
                    sail_pixel_format_to_string(pixel_format));
}

static sail_status_t load_codec_by_codec_info_unsafe(const struct sail_codec_info *codec_info, const struct sail_codec **codec) {
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b08a      	sub	sp, #40	; 0x28
 800fe74:	af02      	add	r7, sp, #8
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	bf0c      	ite	eq
 800fe80:	2301      	moveq	r3, #1
 800fe82:	2300      	movne	r3, #0
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d011      	beq.n	800feae <load_codec_by_codec_info_unsafe+0x3e>
 800fe8a:	4b47      	ldr	r3, [pc, #284]	; (800ffa8 <load_codec_by_codec_info_unsafe+0x138>)
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	4b47      	ldr	r3, [pc, #284]	; (800ffac <load_codec_by_codec_info_unsafe+0x13c>)
 800fe90:	2228      	movs	r2, #40	; 0x28
 800fe92:	4947      	ldr	r1, [pc, #284]	; (800ffb0 <load_codec_by_codec_info_unsafe+0x140>)
 800fe94:	2001      	movs	r0, #1
 800fe96:	f7ff f9c5 	bl	800f224 <sail_log>
 800fe9a:	4b46      	ldr	r3, [pc, #280]	; (800ffb4 <load_codec_by_codec_info_unsafe+0x144>)
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	4b46      	ldr	r3, [pc, #280]	; (800ffb8 <load_codec_by_codec_info_unsafe+0x148>)
 800fea0:	2228      	movs	r2, #40	; 0x28
 800fea2:	4943      	ldr	r1, [pc, #268]	; (800ffb0 <load_codec_by_codec_info_unsafe+0x140>)
 800fea4:	2001      	movs	r0, #1
 800fea6:	f7ff f9bd 	bl	800f224 <sail_log>
 800feaa:	2301      	movs	r3, #1
 800feac:	e077      	b.n	800ff9e <load_codec_by_codec_info_unsafe+0x12e>
    SAIL_CHECK_PTR(codec);
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	bf0c      	ite	eq
 800feb4:	2301      	moveq	r3, #1
 800feb6:	2300      	movne	r3, #0
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d011      	beq.n	800fee2 <load_codec_by_codec_info_unsafe+0x72>
 800febe:	4b3f      	ldr	r3, [pc, #252]	; (800ffbc <load_codec_by_codec_info_unsafe+0x14c>)
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	4b3a      	ldr	r3, [pc, #232]	; (800ffac <load_codec_by_codec_info_unsafe+0x13c>)
 800fec4:	2229      	movs	r2, #41	; 0x29
 800fec6:	493a      	ldr	r1, [pc, #232]	; (800ffb0 <load_codec_by_codec_info_unsafe+0x140>)
 800fec8:	2001      	movs	r0, #1
 800feca:	f7ff f9ab 	bl	800f224 <sail_log>
 800fece:	4b39      	ldr	r3, [pc, #228]	; (800ffb4 <load_codec_by_codec_info_unsafe+0x144>)
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	4b39      	ldr	r3, [pc, #228]	; (800ffb8 <load_codec_by_codec_info_unsafe+0x148>)
 800fed4:	2229      	movs	r2, #41	; 0x29
 800fed6:	4936      	ldr	r1, [pc, #216]	; (800ffb0 <load_codec_by_codec_info_unsafe+0x140>)
 800fed8:	2001      	movs	r0, #1
 800feda:	f7ff f9a3 	bl	800f224 <sail_log>
 800fede:	2301      	movs	r3, #1
 800fee0:	e05d      	b.n	800ff9e <load_codec_by_codec_info_unsafe+0x12e>

    struct sail_context *context;
    SAIL_TRY(fetch_global_context_unsafe(&context));
 800fee2:	f107 0308 	add.w	r3, r7, #8
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fd fbc7 	bl	800d67a <fetch_global_context_unsafe>
 800feec:	4603      	mov	r3, r0
 800feee:	82fb      	strh	r3, [r7, #22]
 800fef0:	8afb      	ldrh	r3, [r7, #22]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	bf14      	ite	ne
 800fef6:	2301      	movne	r3, #1
 800fef8:	2300      	moveq	r3, #0
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <load_codec_by_codec_info_unsafe+0x94>
 800ff00:	8afb      	ldrh	r3, [r7, #22]
 800ff02:	e04c      	b.n	800ff9e <load_codec_by_codec_info_unsafe+0x12e>

    /* Find the codec in the cache. */
    struct sail_codec_bundle *found_codec_bundle = NULL;
 800ff04:	2300      	movs	r3, #0
 800ff06:	61fb      	str	r3, [r7, #28]

    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	61bb      	str	r3, [r7, #24]
 800ff0e:	e018      	b.n	800ff42 <load_codec_by_codec_info_unsafe+0xd2>
        struct sail_codec_bundle *codec_bundle = codec_bundle_node->codec_bundle;
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	613b      	str	r3, [r7, #16]

        if (codec_bundle->codec_info == codec_info) {
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d10d      	bne.n	800ff3c <load_codec_by_codec_info_unsafe+0xcc>
            if (codec_bundle->codec != NULL) {
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d005      	beq.n	800ff34 <load_codec_by_codec_info_unsafe+0xc4>
                *codec = codec_bundle->codec;
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	685a      	ldr	r2, [r3, #4]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	601a      	str	r2, [r3, #0]
                return SAIL_OK;
 800ff30:	2300      	movs	r3, #0
 800ff32:	e034      	b.n	800ff9e <load_codec_by_codec_info_unsafe+0x12e>
            }

            found_codec_bundle = codec_bundle_node->codec_bundle;
 800ff34:	69bb      	ldr	r3, [r7, #24]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	61fb      	str	r3, [r7, #28]
            break;
 800ff3a:	e005      	b.n	800ff48 <load_codec_by_codec_info_unsafe+0xd8>
    for (struct sail_codec_bundle_node *codec_bundle_node = context->codec_bundle_node; codec_bundle_node != NULL; codec_bundle_node = codec_bundle_node->next) {
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	61bb      	str	r3, [r7, #24]
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1e3      	bne.n	800ff10 <load_codec_by_codec_info_unsafe+0xa0>
        }
    }

    /* Something weird. The pointer to the codec info is not found in the cache. */
    if (found_codec_bundle == NULL) {
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10a      	bne.n	800ff64 <load_codec_by_codec_info_unsafe+0xf4>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_CODEC_NOT_FOUND);
 800ff4e:	4b1c      	ldr	r3, [pc, #112]	; (800ffc0 <load_codec_by_codec_info_unsafe+0x150>)
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	4b19      	ldr	r3, [pc, #100]	; (800ffb8 <load_codec_by_codec_info_unsafe+0x148>)
 800ff54:	2241      	movs	r2, #65	; 0x41
 800ff56:	4916      	ldr	r1, [pc, #88]	; (800ffb0 <load_codec_by_codec_info_unsafe+0x140>)
 800ff58:	2001      	movs	r0, #1
 800ff5a:	f7ff f963 	bl	800f224 <sail_log>
 800ff5e:	f240 132d 	movw	r3, #301	; 0x12d
 800ff62:	e01c      	b.n	800ff9e <load_codec_by_codec_info_unsafe+0x12e>
    }

    if (found_codec_bundle->codec == NULL) {
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d113      	bne.n	800ff94 <load_codec_by_codec_info_unsafe+0x124>
        SAIL_TRY(alloc_and_load_codec(found_codec_bundle->codec_info, &found_codec_bundle->codec));
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	3304      	adds	r3, #4
 800ff74:	4619      	mov	r1, r3
 800ff76:	4610      	mov	r0, r2
 800ff78:	f7f9 ff66 	bl	8009e48 <alloc_and_load_codec>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	81fb      	strh	r3, [r7, #14]
 800ff80:	89fb      	ldrh	r3, [r7, #14]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	bf14      	ite	ne
 800ff86:	2301      	movne	r3, #1
 800ff88:	2300      	moveq	r3, #0
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d001      	beq.n	800ff94 <load_codec_by_codec_info_unsafe+0x124>
 800ff90:	89fb      	ldrh	r3, [r7, #14]
 800ff92:	e004      	b.n	800ff9e <load_codec_by_codec_info_unsafe+0x12e>
    }

    *codec = found_codec_bundle->codec;
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	685a      	ldr	r2, [r3, #4]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3720      	adds	r7, #32
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	08019f88 	.word	0x08019f88
 800ffac:	08019f70 	.word	0x08019f70
 800ffb0:	08019f20 	.word	0x08019f20
 800ffb4:	08019f98 	.word	0x08019f98
 800ffb8:	08019f94 	.word	0x08019f94
 800ffbc:	08019fac 	.word	0x08019fac
 800ffc0:	08019fb4 	.word	0x08019fb4

0800ffc4 <load_codec_by_codec_info>:

/*
 * Public functions.
 */

sail_status_t load_codec_by_codec_info(const struct sail_codec_info *codec_info, const struct sail_codec **codec) {
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af02      	add	r7, sp, #8
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(codec_info);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	bf0c      	ite	eq
 800ffd4:	2301      	moveq	r3, #1
 800ffd6:	2300      	movne	r3, #0
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d011      	beq.n	8010002 <load_codec_by_codec_info+0x3e>
 800ffde:	4b2f      	ldr	r3, [pc, #188]	; (801009c <load_codec_by_codec_info+0xd8>)
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	4b2f      	ldr	r3, [pc, #188]	; (80100a0 <load_codec_by_codec_info+0xdc>)
 800ffe4:	2253      	movs	r2, #83	; 0x53
 800ffe6:	492f      	ldr	r1, [pc, #188]	; (80100a4 <load_codec_by_codec_info+0xe0>)
 800ffe8:	2001      	movs	r0, #1
 800ffea:	f7ff f91b 	bl	800f224 <sail_log>
 800ffee:	4b2e      	ldr	r3, [pc, #184]	; (80100a8 <load_codec_by_codec_info+0xe4>)
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	4b2e      	ldr	r3, [pc, #184]	; (80100ac <load_codec_by_codec_info+0xe8>)
 800fff4:	2253      	movs	r2, #83	; 0x53
 800fff6:	492b      	ldr	r1, [pc, #172]	; (80100a4 <load_codec_by_codec_info+0xe0>)
 800fff8:	2001      	movs	r0, #1
 800fffa:	f7ff f913 	bl	800f224 <sail_log>
 800fffe:	2301      	movs	r3, #1
 8010000:	e048      	b.n	8010094 <load_codec_by_codec_info+0xd0>
    SAIL_CHECK_PTR(codec);
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	bf0c      	ite	eq
 8010008:	2301      	moveq	r3, #1
 801000a:	2300      	movne	r3, #0
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d011      	beq.n	8010036 <load_codec_by_codec_info+0x72>
 8010012:	4b27      	ldr	r3, [pc, #156]	; (80100b0 <load_codec_by_codec_info+0xec>)
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	4b22      	ldr	r3, [pc, #136]	; (80100a0 <load_codec_by_codec_info+0xdc>)
 8010018:	2254      	movs	r2, #84	; 0x54
 801001a:	4922      	ldr	r1, [pc, #136]	; (80100a4 <load_codec_by_codec_info+0xe0>)
 801001c:	2001      	movs	r0, #1
 801001e:	f7ff f901 	bl	800f224 <sail_log>
 8010022:	4b21      	ldr	r3, [pc, #132]	; (80100a8 <load_codec_by_codec_info+0xe4>)
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	4b21      	ldr	r3, [pc, #132]	; (80100ac <load_codec_by_codec_info+0xe8>)
 8010028:	2254      	movs	r2, #84	; 0x54
 801002a:	491e      	ldr	r1, [pc, #120]	; (80100a4 <load_codec_by_codec_info+0xe0>)
 801002c:	2001      	movs	r0, #1
 801002e:	f7ff f8f9 	bl	800f224 <sail_log>
 8010032:	2301      	movs	r3, #1
 8010034:	e02e      	b.n	8010094 <load_codec_by_codec_info+0xd0>

    SAIL_TRY(lock_context());
 8010036:	f7fd fbed 	bl	800d814 <lock_context>
 801003a:	4603      	mov	r3, r0
 801003c:	81fb      	strh	r3, [r7, #14]
 801003e:	89fb      	ldrh	r3, [r7, #14]
 8010040:	2b00      	cmp	r3, #0
 8010042:	bf14      	ite	ne
 8010044:	2301      	movne	r3, #1
 8010046:	2300      	moveq	r3, #0
 8010048:	b2db      	uxtb	r3, r3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <load_codec_by_codec_info+0x8e>
 801004e:	89fb      	ldrh	r3, [r7, #14]
 8010050:	e020      	b.n	8010094 <load_codec_by_codec_info+0xd0>

    SAIL_TRY_OR_CLEANUP(load_codec_by_codec_info_unsafe(codec_info, codec),
 8010052:	6839      	ldr	r1, [r7, #0]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7ff ff0b 	bl	800fe70 <load_codec_by_codec_info_unsafe>
 801005a:	4603      	mov	r3, r0
 801005c:	81bb      	strh	r3, [r7, #12]
 801005e:	89bb      	ldrh	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	bf14      	ite	ne
 8010064:	2301      	movne	r3, #1
 8010066:	2300      	moveq	r3, #0
 8010068:	b2db      	uxtb	r3, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <load_codec_by_codec_info+0xb2>
 801006e:	f7fd fbd9 	bl	800d824 <unlock_context>
 8010072:	89bb      	ldrh	r3, [r7, #12]
 8010074:	e00e      	b.n	8010094 <load_codec_by_codec_info+0xd0>
                        /* cleanup */ unlock_context());

    SAIL_TRY(unlock_context());
 8010076:	f7fd fbd5 	bl	800d824 <unlock_context>
 801007a:	4603      	mov	r3, r0
 801007c:	817b      	strh	r3, [r7, #10]
 801007e:	897b      	ldrh	r3, [r7, #10]
 8010080:	2b00      	cmp	r3, #0
 8010082:	bf14      	ite	ne
 8010084:	2301      	movne	r3, #1
 8010086:	2300      	moveq	r3, #0
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b00      	cmp	r3, #0
 801008c:	d001      	beq.n	8010092 <load_codec_by_codec_info+0xce>
 801008e:	897b      	ldrh	r3, [r7, #10]
 8010090:	e000      	b.n	8010094 <load_codec_by_codec_info+0xd0>

    return SAIL_OK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	4618      	mov	r0, r3
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	08019f88 	.word	0x08019f88
 80100a0:	08019f70 	.word	0x08019f70
 80100a4:	08019f20 	.word	0x08019f20
 80100a8:	08019f98 	.word	0x08019f98
 80100ac:	08019f94 	.word	0x08019f94
 80100b0:	08019fac 	.word	0x08019fac

080100b4 <destroy_hidden_state>:

void destroy_hidden_state(struct hidden_state *state) {
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]

    if (state == NULL) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d016      	beq.n	80100f0 <destroy_hidden_state+0x3c>
        return;
    }

    if (state->own_io) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	791b      	ldrb	r3, [r3, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d004      	beq.n	80100d4 <destroy_hidden_state+0x20>
        sail_destroy_io(state->io);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe f9cc 	bl	800e46c <sail_destroy_io>
    }

    sail_destroy_save_options(state->save_options);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	4618      	mov	r0, r3
 80100da:	f000 f9d6 	bl	801048a <sail_destroy_save_options>

    /* This state must be freed and zeroed by codecs. We free it just in case to avoid memory leaks. */
    sail_free(state->state);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff fa1e 	bl	800f524 <sail_free>

    sail_free(state);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff fa1b 	bl	800f524 <sail_free>
 80100ee:	e000      	b.n	80100f2 <destroy_hidden_state+0x3e>
        return;
 80100f0:	bf00      	nop
}
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <check_io_arguments>:
 * Private functions.
 */

static sail_status_t check_io_arguments(struct sail_io *io,
                                        const struct sail_codec_info *codec_info,
                                        void **state) {
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]

    SAIL_CHECK_PTR(io);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	bf0c      	ite	eq
 801010a:	2301      	moveq	r3, #1
 801010c:	2300      	movne	r3, #0
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d011      	beq.n	8010138 <check_io_arguments+0x40>
 8010114:	4b25      	ldr	r3, [pc, #148]	; (80101ac <check_io_arguments+0xb4>)
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	4b25      	ldr	r3, [pc, #148]	; (80101b0 <check_io_arguments+0xb8>)
 801011a:	2229      	movs	r2, #41	; 0x29
 801011c:	4925      	ldr	r1, [pc, #148]	; (80101b4 <check_io_arguments+0xbc>)
 801011e:	2001      	movs	r0, #1
 8010120:	f7ff f880 	bl	800f224 <sail_log>
 8010124:	4b24      	ldr	r3, [pc, #144]	; (80101b8 <check_io_arguments+0xc0>)
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	4b24      	ldr	r3, [pc, #144]	; (80101bc <check_io_arguments+0xc4>)
 801012a:	2229      	movs	r2, #41	; 0x29
 801012c:	4921      	ldr	r1, [pc, #132]	; (80101b4 <check_io_arguments+0xbc>)
 801012e:	2001      	movs	r0, #1
 8010130:	f7ff f878 	bl	800f224 <sail_log>
 8010134:	2301      	movs	r3, #1
 8010136:	e034      	b.n	80101a2 <check_io_arguments+0xaa>
    SAIL_CHECK_PTR(codec_info);
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	bf0c      	ite	eq
 801013e:	2301      	moveq	r3, #1
 8010140:	2300      	movne	r3, #0
 8010142:	b2db      	uxtb	r3, r3
 8010144:	2b00      	cmp	r3, #0
 8010146:	d011      	beq.n	801016c <check_io_arguments+0x74>
 8010148:	4b1d      	ldr	r3, [pc, #116]	; (80101c0 <check_io_arguments+0xc8>)
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	4b18      	ldr	r3, [pc, #96]	; (80101b0 <check_io_arguments+0xb8>)
 801014e:	222a      	movs	r2, #42	; 0x2a
 8010150:	4918      	ldr	r1, [pc, #96]	; (80101b4 <check_io_arguments+0xbc>)
 8010152:	2001      	movs	r0, #1
 8010154:	f7ff f866 	bl	800f224 <sail_log>
 8010158:	4b17      	ldr	r3, [pc, #92]	; (80101b8 <check_io_arguments+0xc0>)
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	4b17      	ldr	r3, [pc, #92]	; (80101bc <check_io_arguments+0xc4>)
 801015e:	222a      	movs	r2, #42	; 0x2a
 8010160:	4914      	ldr	r1, [pc, #80]	; (80101b4 <check_io_arguments+0xbc>)
 8010162:	2001      	movs	r0, #1
 8010164:	f7ff f85e 	bl	800f224 <sail_log>
 8010168:	2301      	movs	r3, #1
 801016a:	e01a      	b.n	80101a2 <check_io_arguments+0xaa>
    SAIL_CHECK_PTR(state);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	bf0c      	ite	eq
 8010172:	2301      	moveq	r3, #1
 8010174:	2300      	movne	r3, #0
 8010176:	b2db      	uxtb	r3, r3
 8010178:	2b00      	cmp	r3, #0
 801017a:	d011      	beq.n	80101a0 <check_io_arguments+0xa8>
 801017c:	4b11      	ldr	r3, [pc, #68]	; (80101c4 <check_io_arguments+0xcc>)
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	4b0b      	ldr	r3, [pc, #44]	; (80101b0 <check_io_arguments+0xb8>)
 8010182:	222b      	movs	r2, #43	; 0x2b
 8010184:	490b      	ldr	r1, [pc, #44]	; (80101b4 <check_io_arguments+0xbc>)
 8010186:	2001      	movs	r0, #1
 8010188:	f7ff f84c 	bl	800f224 <sail_log>
 801018c:	4b0a      	ldr	r3, [pc, #40]	; (80101b8 <check_io_arguments+0xc0>)
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	4b0a      	ldr	r3, [pc, #40]	; (80101bc <check_io_arguments+0xc4>)
 8010192:	222b      	movs	r2, #43	; 0x2b
 8010194:	4907      	ldr	r1, [pc, #28]	; (80101b4 <check_io_arguments+0xbc>)
 8010196:	2001      	movs	r0, #1
 8010198:	f7ff f844 	bl	800f224 <sail_log>
 801019c:	2301      	movs	r3, #1
 801019e:	e000      	b.n	80101a2 <check_io_arguments+0xaa>

    return SAIL_OK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	0801a07c 	.word	0x0801a07c
 80101b0:	0801a004 	.word	0x0801a004
 80101b4:	0801a01c 	.word	0x0801a01c
 80101b8:	0801a084 	.word	0x0801a084
 80101bc:	0801a080 	.word	0x0801a080
 80101c0:	0801a098 	.word	0x0801a098
 80101c4:	0801a0a4 	.word	0x0801a0a4

080101c8 <start_loading_io_with_options>:
 * Public functions.
 */

sail_status_t start_loading_io_with_options(struct sail_io *io, bool own_io,
                                            const struct sail_codec_info *codec_info,
                                            const struct sail_load_options *load_options, void **state) {
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	607a      	str	r2, [r7, #4]
 80101d2:	603b      	str	r3, [r7, #0]
 80101d4:	460b      	mov	r3, r1
 80101d6:	72fb      	strb	r3, [r7, #11]

    SAIL_TRY_OR_CLEANUP(check_io_arguments(io, codec_info, state),
 80101d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101da:	6879      	ldr	r1, [r7, #4]
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f7ff ff8b 	bl	80100f8 <check_io_arguments>
 80101e2:	4603      	mov	r3, r0
 80101e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80101e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	bf14      	ite	ne
 80101ec:	2301      	movne	r3, #1
 80101ee:	2300      	moveq	r3, #0
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d007      	beq.n	8010206 <start_loading_io_with_options+0x3e>
 80101f6:	7afb      	ldrb	r3, [r7, #11]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <start_loading_io_with_options+0x3a>
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7fe f935 	bl	800e46c <sail_destroy_io>
 8010202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010204:	e0b7      	b.n	8010376 <start_loading_io_with_options+0x1ae>
                        /* cleanup */ if (own_io) sail_destroy_io(io));

    *state = NULL;
 8010206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010208:	2200      	movs	r2, #0
 801020a:	601a      	str	r2, [r3, #0]

    void *ptr;
    SAIL_TRY_OR_CLEANUP(sail_malloc(sizeof(struct hidden_state), &ptr),
 801020c:	f107 0314 	add.w	r3, r7, #20
 8010210:	4619      	mov	r1, r3
 8010212:	2018      	movs	r0, #24
 8010214:	f7ff f8fe 	bl	800f414 <sail_malloc>
 8010218:	4603      	mov	r3, r0
 801021a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801021c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801021e:	2b00      	cmp	r3, #0
 8010220:	bf14      	ite	ne
 8010222:	2301      	movne	r3, #1
 8010224:	2300      	moveq	r3, #0
 8010226:	b2db      	uxtb	r3, r3
 8010228:	2b00      	cmp	r3, #0
 801022a:	d007      	beq.n	801023c <start_loading_io_with_options+0x74>
 801022c:	7afb      	ldrb	r3, [r7, #11]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <start_loading_io_with_options+0x70>
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f7fe f91a 	bl	800e46c <sail_destroy_io>
 8010238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801023a:	e09c      	b.n	8010376 <start_loading_io_with_options+0x1ae>
                        /* cleanup */ if (own_io) sail_destroy_io(io));
    struct hidden_state *state_of_mind = ptr;
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	623b      	str	r3, [r7, #32]

    state_of_mind->io           = io;
 8010240:	6a3b      	ldr	r3, [r7, #32]
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	601a      	str	r2, [r3, #0]
    state_of_mind->own_io       = own_io;
 8010246:	6a3b      	ldr	r3, [r7, #32]
 8010248:	7afa      	ldrb	r2, [r7, #11]
 801024a:	711a      	strb	r2, [r3, #4]
    state_of_mind->save_options = NULL;
 801024c:	6a3b      	ldr	r3, [r7, #32]
 801024e:	2200      	movs	r2, #0
 8010250:	609a      	str	r2, [r3, #8]
    state_of_mind->state        = NULL;
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	2200      	movs	r2, #0
 8010256:	60da      	str	r2, [r3, #12]
    state_of_mind->codec_info   = codec_info;
 8010258:	6a3b      	ldr	r3, [r7, #32]
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	611a      	str	r2, [r3, #16]
    state_of_mind->codec        = NULL;
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	2200      	movs	r2, #0
 8010262:	615a      	str	r2, [r3, #20]

    SAIL_TRY_OR_CLEANUP(load_codec_by_codec_info(state_of_mind->codec_info, &state_of_mind->codec),
 8010264:	6a3b      	ldr	r3, [r7, #32]
 8010266:	691a      	ldr	r2, [r3, #16]
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	3314      	adds	r3, #20
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7ff fea8 	bl	800ffc4 <load_codec_by_codec_info>
 8010274:	4603      	mov	r3, r0
 8010276:	83fb      	strh	r3, [r7, #30]
 8010278:	8bfb      	ldrh	r3, [r7, #30]
 801027a:	2b00      	cmp	r3, #0
 801027c:	bf14      	ite	ne
 801027e:	2301      	movne	r3, #1
 8010280:	2300      	moveq	r3, #0
 8010282:	b2db      	uxtb	r3, r3
 8010284:	2b00      	cmp	r3, #0
 8010286:	d004      	beq.n	8010292 <start_loading_io_with_options+0xca>
 8010288:	6a38      	ldr	r0, [r7, #32]
 801028a:	f7ff ff13 	bl	80100b4 <destroy_hidden_state>
 801028e:	8bfb      	ldrh	r3, [r7, #30]
 8010290:	e071      	b.n	8010376 <start_loading_io_with_options+0x1ae>
                        /* cleanup */ destroy_hidden_state(state_of_mind));

    if (load_options == NULL) {
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d146      	bne.n	8010326 <start_loading_io_with_options+0x15e>
        struct sail_load_options *load_options_local = NULL;
 8010298:	2300      	movs	r3, #0
 801029a:	613b      	str	r3, [r7, #16]

        SAIL_TRY_OR_CLEANUP(sail_alloc_load_options_from_features(state_of_mind->codec_info->load_features, &load_options_local),
 801029c:	6a3b      	ldr	r3, [r7, #32]
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a2:	f107 0210 	add.w	r2, r7, #16
 80102a6:	4611      	mov	r1, r2
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fe febf 	bl	800f02c <sail_alloc_load_options_from_features>
 80102ae:	4603      	mov	r3, r0
 80102b0:	837b      	strh	r3, [r7, #26]
 80102b2:	8b7b      	ldrh	r3, [r7, #26]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	bf14      	ite	ne
 80102b8:	2301      	movne	r3, #1
 80102ba:	2300      	moveq	r3, #0
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d004      	beq.n	80102cc <start_loading_io_with_options+0x104>
 80102c2:	6a38      	ldr	r0, [r7, #32]
 80102c4:	f7ff fef6 	bl	80100b4 <destroy_hidden_state>
 80102c8:	8b7b      	ldrh	r3, [r7, #26]
 80102ca:	e054      	b.n	8010376 <start_loading_io_with_options+0x1ae>
                            /* cleanup */ destroy_hidden_state(state_of_mind));
        SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_init(state_of_mind->io, load_options_local, &state_of_mind->state),
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	695b      	ldr	r3, [r3, #20]
 80102d0:	689b      	ldr	r3, [r3, #8]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	6a3a      	ldr	r2, [r7, #32]
 80102d6:	6810      	ldr	r0, [r2, #0]
 80102d8:	6939      	ldr	r1, [r7, #16]
 80102da:	6a3a      	ldr	r2, [r7, #32]
 80102dc:	320c      	adds	r2, #12
 80102de:	4798      	blx	r3
 80102e0:	4603      	mov	r3, r0
 80102e2:	833b      	strh	r3, [r7, #24]
 80102e4:	8b3b      	ldrh	r3, [r7, #24]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	bf14      	ite	ne
 80102ea:	2301      	movne	r3, #1
 80102ec:	2300      	moveq	r3, #0
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d013      	beq.n	801031c <start_loading_io_with_options+0x154>
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fe fe84 	bl	800f004 <sail_destroy_load_options>
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	695b      	ldr	r3, [r3, #20]
 8010300:	689b      	ldr	r3, [r3, #8]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	6a3a      	ldr	r2, [r7, #32]
 8010306:	f102 000c 	add.w	r0, r2, #12
 801030a:	6a3a      	ldr	r2, [r7, #32]
 801030c:	6812      	ldr	r2, [r2, #0]
 801030e:	4611      	mov	r1, r2
 8010310:	4798      	blx	r3
 8010312:	6a38      	ldr	r0, [r7, #32]
 8010314:	f7ff fece 	bl	80100b4 <destroy_hidden_state>
 8010318:	8b3b      	ldrh	r3, [r7, #24]
 801031a:	e02c      	b.n	8010376 <start_loading_io_with_options+0x1ae>
                            /* cleanup */ sail_destroy_load_options(load_options_local),
                                          state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
                                          destroy_hidden_state(state_of_mind));
        sail_destroy_load_options(load_options_local);
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe fe70 	bl	800f004 <sail_destroy_load_options>
 8010324:	e023      	b.n	801036e <start_loading_io_with_options+0x1a6>
    } else {
        SAIL_TRY_OR_CLEANUP(state_of_mind->codec->v7->load_init(state_of_mind->io, load_options, &state_of_mind->state),
 8010326:	6a3b      	ldr	r3, [r7, #32]
 8010328:	695b      	ldr	r3, [r3, #20]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	6a3a      	ldr	r2, [r7, #32]
 8010330:	6810      	ldr	r0, [r2, #0]
 8010332:	6a3a      	ldr	r2, [r7, #32]
 8010334:	320c      	adds	r2, #12
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	4798      	blx	r3
 801033a:	4603      	mov	r3, r0
 801033c:	83bb      	strh	r3, [r7, #28]
 801033e:	8bbb      	ldrh	r3, [r7, #28]
 8010340:	2b00      	cmp	r3, #0
 8010342:	bf14      	ite	ne
 8010344:	2301      	movne	r3, #1
 8010346:	2300      	moveq	r3, #0
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00f      	beq.n	801036e <start_loading_io_with_options+0x1a6>
 801034e:	6a3b      	ldr	r3, [r7, #32]
 8010350:	695b      	ldr	r3, [r3, #20]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	6a3a      	ldr	r2, [r7, #32]
 8010358:	f102 000c 	add.w	r0, r2, #12
 801035c:	6a3a      	ldr	r2, [r7, #32]
 801035e:	6812      	ldr	r2, [r2, #0]
 8010360:	4611      	mov	r1, r2
 8010362:	4798      	blx	r3
 8010364:	6a38      	ldr	r0, [r7, #32]
 8010366:	f7ff fea5 	bl	80100b4 <destroy_hidden_state>
 801036a:	8bbb      	ldrh	r3, [r7, #28]
 801036c:	e003      	b.n	8010376 <start_loading_io_with_options+0x1ae>
                            /* cleanup */ state_of_mind->codec->v7->load_finish(&state_of_mind->state, state_of_mind->io),
                                          destroy_hidden_state(state_of_mind));
    }

    *state = state_of_mind;
 801036e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010370:	6a3a      	ldr	r2, [r7, #32]
 8010372:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8010374:	2300      	movs	r3, #0
}
 8010376:	4618      	mov	r0, r3
 8010378:	3728      	adds	r7, #40	; 0x28
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
	...

08010380 <sail_alloc_save_features>:
#include <stdio.h>
#include <stdlib.h>

#include "sail-common.h"

sail_status_t sail_alloc_save_features(struct sail_save_features **save_features) {
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af02      	add	r7, sp, #8
 8010386:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(save_features);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	bf0c      	ite	eq
 801038e:	2301      	moveq	r3, #1
 8010390:	2300      	movne	r3, #0
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d011      	beq.n	80103bc <sail_alloc_save_features+0x3c>
 8010398:	4b25      	ldr	r3, [pc, #148]	; (8010430 <sail_alloc_save_features+0xb0>)
 801039a:	9300      	str	r3, [sp, #0]
 801039c:	4b25      	ldr	r3, [pc, #148]	; (8010434 <sail_alloc_save_features+0xb4>)
 801039e:	2221      	movs	r2, #33	; 0x21
 80103a0:	4925      	ldr	r1, [pc, #148]	; (8010438 <sail_alloc_save_features+0xb8>)
 80103a2:	2001      	movs	r0, #1
 80103a4:	f7fe ff3e 	bl	800f224 <sail_log>
 80103a8:	4b24      	ldr	r3, [pc, #144]	; (801043c <sail_alloc_save_features+0xbc>)
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	4b24      	ldr	r3, [pc, #144]	; (8010440 <sail_alloc_save_features+0xc0>)
 80103ae:	2221      	movs	r2, #33	; 0x21
 80103b0:	4921      	ldr	r1, [pc, #132]	; (8010438 <sail_alloc_save_features+0xb8>)
 80103b2:	2001      	movs	r0, #1
 80103b4:	f7fe ff36 	bl	800f224 <sail_log>
 80103b8:	2301      	movs	r3, #1
 80103ba:	e035      	b.n	8010428 <sail_alloc_save_features+0xa8>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_save_features), &ptr));
 80103bc:	f107 0308 	add.w	r3, r7, #8
 80103c0:	4619      	mov	r1, r3
 80103c2:	2020      	movs	r0, #32
 80103c4:	f7ff f826 	bl	800f414 <sail_malloc>
 80103c8:	4603      	mov	r3, r0
 80103ca:	81fb      	strh	r3, [r7, #14]
 80103cc:	89fb      	ldrh	r3, [r7, #14]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	bf14      	ite	ne
 80103d2:	2301      	movne	r3, #1
 80103d4:	2300      	moveq	r3, #0
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d001      	beq.n	80103e0 <sail_alloc_save_features+0x60>
 80103dc:	89fb      	ldrh	r3, [r7, #14]
 80103de:	e023      	b.n	8010428 <sail_alloc_save_features+0xa8>
    *save_features = ptr;
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	601a      	str	r2, [r3, #0]

    (*save_features)->pixel_formats        = NULL;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2200      	movs	r2, #0
 80103ec:	601a      	str	r2, [r3, #0]
    (*save_features)->pixel_formats_length = 0;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2200      	movs	r2, #0
 80103f4:	605a      	str	r2, [r3, #4]
    (*save_features)->features             = 0;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2200      	movs	r2, #0
 80103fc:	609a      	str	r2, [r3, #8]
    (*save_features)->compressions         = NULL;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2200      	movs	r2, #0
 8010404:	60da      	str	r2, [r3, #12]
    (*save_features)->compressions_length  = 0;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2200      	movs	r2, #0
 801040c:	611a      	str	r2, [r3, #16]
    (*save_features)->default_compression  = SAIL_COMPRESSION_UNKNOWN;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2200      	movs	r2, #0
 8010414:	751a      	strb	r2, [r3, #20]
    (*save_features)->compression_level    = NULL;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2200      	movs	r2, #0
 801041c:	619a      	str	r2, [r3, #24]
    (*save_features)->tuning               = NULL;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2200      	movs	r2, #0
 8010424:	61da      	str	r2, [r3, #28]

    return SAIL_OK;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	0801a150 	.word	0x0801a150
 8010434:	0801a0e0 	.word	0x0801a0e0
 8010438:	0801a0f8 	.word	0x0801a0f8
 801043c:	0801a164 	.word	0x0801a164
 8010440:	0801a160 	.word	0x0801a160

08010444 <sail_destroy_save_features>:

void sail_destroy_save_features(struct sail_save_features *save_features) {
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]

    if (save_features == NULL) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d017      	beq.n	8010482 <sail_destroy_save_features+0x3e>
        return;
    }

    sail_free(save_features->pixel_formats);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff f864 	bl	800f524 <sail_free>
    sail_free(save_features->compressions);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff f85f 	bl	800f524 <sail_free>
    sail_destroy_compression_level(save_features->compression_level);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	4618      	mov	r0, r3
 801046c:	f7fc fd6c 	bl	800cf48 <sail_destroy_compression_level>
    sail_destroy_string_node_chain(save_features->tuning);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	69db      	ldr	r3, [r3, #28]
 8010474:	4618      	mov	r0, r3
 8010476:	f000 f8a7 	bl	80105c8 <sail_destroy_string_node_chain>
    sail_free(save_features);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7ff f852 	bl	800f524 <sail_free>
 8010480:	e000      	b.n	8010484 <sail_destroy_save_features+0x40>
        return;
 8010482:	bf00      	nop
}
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <sail_destroy_save_options>:
    (*save_options)->tuning            = NULL;

    return SAIL_OK;
}

void sail_destroy_save_options(struct sail_save_options *save_options) {
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]

    if (save_options == NULL) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d003      	beq.n	80104a0 <sail_destroy_save_options+0x16>
        return;
    }

    sail_free(save_options);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7ff f843 	bl	800f524 <sail_free>
 801049e:	e000      	b.n	80104a2 <sail_destroy_save_options+0x18>
        return;
 80104a0:	bf00      	nop
}
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <sail_alloc_source_image>:
#include <stdlib.h>
#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_source_image(struct sail_source_image **source_image) {
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(source_image);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	bf0c      	ite	eq
 80104b6:	2301      	moveq	r3, #1
 80104b8:	2300      	movne	r3, #0
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d011      	beq.n	80104e4 <sail_alloc_source_image+0x3c>
 80104c0:	4b1f      	ldr	r3, [pc, #124]	; (8010540 <sail_alloc_source_image+0x98>)
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	4b1f      	ldr	r3, [pc, #124]	; (8010544 <sail_alloc_source_image+0x9c>)
 80104c6:	2222      	movs	r2, #34	; 0x22
 80104c8:	491f      	ldr	r1, [pc, #124]	; (8010548 <sail_alloc_source_image+0xa0>)
 80104ca:	2001      	movs	r0, #1
 80104cc:	f7fe feaa 	bl	800f224 <sail_log>
 80104d0:	4b1e      	ldr	r3, [pc, #120]	; (801054c <sail_alloc_source_image+0xa4>)
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	4b1e      	ldr	r3, [pc, #120]	; (8010550 <sail_alloc_source_image+0xa8>)
 80104d6:	2222      	movs	r2, #34	; 0x22
 80104d8:	491b      	ldr	r1, [pc, #108]	; (8010548 <sail_alloc_source_image+0xa0>)
 80104da:	2001      	movs	r0, #1
 80104dc:	f7fe fea2 	bl	800f224 <sail_log>
 80104e0:	2301      	movs	r3, #1
 80104e2:	e029      	b.n	8010538 <sail_alloc_source_image+0x90>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_source_image), &ptr));
 80104e4:	f107 0308 	add.w	r3, r7, #8
 80104e8:	4619      	mov	r1, r3
 80104ea:	2010      	movs	r0, #16
 80104ec:	f7fe ff92 	bl	800f414 <sail_malloc>
 80104f0:	4603      	mov	r3, r0
 80104f2:	81fb      	strh	r3, [r7, #14]
 80104f4:	89fb      	ldrh	r3, [r7, #14]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bf14      	ite	ne
 80104fa:	2301      	movne	r3, #1
 80104fc:	2300      	moveq	r3, #0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <sail_alloc_source_image+0x60>
 8010504:	89fb      	ldrh	r3, [r7, #14]
 8010506:	e017      	b.n	8010538 <sail_alloc_source_image+0x90>
    *source_image = ptr;
 8010508:	68ba      	ldr	r2, [r7, #8]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	601a      	str	r2, [r3, #0]

    (*source_image)->pixel_format       = SAIL_PIXEL_FORMAT_UNKNOWN;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2200      	movs	r2, #0
 8010514:	701a      	strb	r2, [r3, #0]
    (*source_image)->chroma_subsampling = SAIL_CHROMA_SUBSAMPLING_UNKNOWN;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	705a      	strb	r2, [r3, #1]
    (*source_image)->properties         = 0;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2200      	movs	r2, #0
 8010524:	605a      	str	r2, [r3, #4]
    (*source_image)->compression        = SAIL_COMPRESSION_UNKNOWN;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2200      	movs	r2, #0
 801052c:	721a      	strb	r2, [r3, #8]
    (*source_image)->special_properties = NULL;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2200      	movs	r2, #0
 8010534:	60da      	str	r2, [r3, #12]

    return SAIL_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	0801a1e8 	.word	0x0801a1e8
 8010544:	0801a178 	.word	0x0801a178
 8010548:	0801a190 	.word	0x0801a190
 801054c:	0801a1fc 	.word	0x0801a1fc
 8010550:	0801a1f8 	.word	0x0801a1f8

08010554 <sail_destroy_source_image>:

void sail_destroy_source_image(struct sail_source_image *source_image) {
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]

    if (source_image == NULL) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d008      	beq.n	8010574 <sail_destroy_source_image+0x20>
        return;
    }

    sail_destroy_hash_map(source_image->special_properties);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	4618      	mov	r0, r3
 8010568:	f7fd f9b6 	bl	800d8d8 <sail_destroy_hash_map>
    sail_free(source_image);
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7fe ffd9 	bl	800f524 <sail_free>
 8010572:	e000      	b.n	8010576 <sail_destroy_source_image+0x22>
        return;
 8010574:	bf00      	nop
}
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <sail_alloc_string_node>:

#include <string.h>

#include "sail-common.h"

sail_status_t sail_alloc_string_node(struct sail_string_node **node) {
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]

    SAIL_TRY(sail_private_alloc_linked_list_node((struct linked_list_node **)node));
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7fe fb33 	bl	800ebf0 <sail_private_alloc_linked_list_node>
 801058a:	4603      	mov	r3, r0
 801058c:	81fb      	strh	r3, [r7, #14]
 801058e:	89fb      	ldrh	r3, [r7, #14]
 8010590:	2b00      	cmp	r3, #0
 8010592:	bf14      	ite	ne
 8010594:	2301      	movne	r3, #1
 8010596:	2300      	moveq	r3, #0
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <sail_alloc_string_node+0x26>
 801059e:	89fb      	ldrh	r3, [r7, #14]
 80105a0:	e000      	b.n	80105a4 <sail_alloc_string_node+0x28>

    return SAIL_OK;
 80105a2:	2300      	movs	r3, #0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <sail_destroy_string_node>:

void sail_destroy_string_node(struct sail_string_node *node) {
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node((struct linked_list_node *)node,
 80105b4:	4903      	ldr	r1, [pc, #12]	; (80105c4 <sail_destroy_string_node+0x18>)
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7fe fb64 	bl	800ec84 <sail_private_destroy_linked_list_node>
                                          (linked_list_value_deallocator_t)&sail_free);
}
 80105bc:	bf00      	nop
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	0800f525 	.word	0x0800f525

080105c8 <sail_destroy_string_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_free));

    return SAIL_OK;
}

void sail_destroy_string_node_chain(struct sail_string_node *node) {
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 80105d0:	4903      	ldr	r1, [pc, #12]	; (80105e0 <sail_destroy_string_node_chain+0x18>)
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7fe fbe8 	bl	800eda8 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_free);
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	0800f525 	.word	0x0800f525

080105e4 <sail_split_into_string_node_chain>:
                                                      (linked_list_value_deallocator_t)&sail_free));

    return SAIL_OK;
}

sail_status_t sail_split_into_string_node_chain(const char *value, struct sail_string_node **target_string_node) {
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b08a      	sub	sp, #40	; 0x28
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(value);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	bf0c      	ite	eq
 80105f4:	2301      	moveq	r3, #1
 80105f6:	2300      	movne	r3, #0
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d011      	beq.n	8010622 <sail_split_into_string_node_chain+0x3e>
 80105fe:	4b41      	ldr	r3, [pc, #260]	; (8010704 <sail_split_into_string_node_chain+0x120>)
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	4b41      	ldr	r3, [pc, #260]	; (8010708 <sail_split_into_string_node_chain+0x124>)
 8010604:	2247      	movs	r2, #71	; 0x47
 8010606:	4941      	ldr	r1, [pc, #260]	; (801070c <sail_split_into_string_node_chain+0x128>)
 8010608:	2001      	movs	r0, #1
 801060a:	f7fe fe0b 	bl	800f224 <sail_log>
 801060e:	4b40      	ldr	r3, [pc, #256]	; (8010710 <sail_split_into_string_node_chain+0x12c>)
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	4b40      	ldr	r3, [pc, #256]	; (8010714 <sail_split_into_string_node_chain+0x130>)
 8010614:	2247      	movs	r2, #71	; 0x47
 8010616:	493d      	ldr	r1, [pc, #244]	; (801070c <sail_split_into_string_node_chain+0x128>)
 8010618:	2001      	movs	r0, #1
 801061a:	f7fe fe03 	bl	800f224 <sail_log>
 801061e:	2301      	movs	r3, #1
 8010620:	e06b      	b.n	80106fa <sail_split_into_string_node_chain+0x116>
    SAIL_CHECK_PTR(target_string_node);
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	bf0c      	ite	eq
 8010628:	2301      	moveq	r3, #1
 801062a:	2300      	movne	r3, #0
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d011      	beq.n	8010656 <sail_split_into_string_node_chain+0x72>
 8010632:	4b39      	ldr	r3, [pc, #228]	; (8010718 <sail_split_into_string_node_chain+0x134>)
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	4b34      	ldr	r3, [pc, #208]	; (8010708 <sail_split_into_string_node_chain+0x124>)
 8010638:	2248      	movs	r2, #72	; 0x48
 801063a:	4934      	ldr	r1, [pc, #208]	; (801070c <sail_split_into_string_node_chain+0x128>)
 801063c:	2001      	movs	r0, #1
 801063e:	f7fe fdf1 	bl	800f224 <sail_log>
 8010642:	4b33      	ldr	r3, [pc, #204]	; (8010710 <sail_split_into_string_node_chain+0x12c>)
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	4b33      	ldr	r3, [pc, #204]	; (8010714 <sail_split_into_string_node_chain+0x130>)
 8010648:	2248      	movs	r2, #72	; 0x48
 801064a:	4930      	ldr	r1, [pc, #192]	; (801070c <sail_split_into_string_node_chain+0x128>)
 801064c:	2001      	movs	r0, #1
 801064e:	f7fe fde9 	bl	800f224 <sail_log>
 8010652:	2301      	movs	r3, #1
 8010654:	e051      	b.n	80106fa <sail_split_into_string_node_chain+0x116>

    struct sail_string_node *result_string_node = NULL;
 8010656:	2300      	movs	r3, #0
 8010658:	60fb      	str	r3, [r7, #12]
    struct sail_string_node **last_string_node = &result_string_node;
 801065a:	f107 030c 	add.w	r3, r7, #12
 801065e:	61fb      	str	r3, [r7, #28]

    const char *separator = ";";
 8010660:	4b2e      	ldr	r3, [pc, #184]	; (801071c <sail_split_into_string_node_chain+0x138>)
 8010662:	61bb      	str	r3, [r7, #24]

    while (*(value += strspn(value, separator)) != '\0') {
 8010664:	e039      	b.n	80106da <sail_split_into_string_node_chain+0xf6>
        size_t length = strcspn(value, separator);
 8010666:	69b9      	ldr	r1, [r7, #24]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f003 fe0d 	bl	8014288 <strcspn>
 801066e:	6178      	str	r0, [r7, #20]

        struct sail_string_node *string_node;
        SAIL_TRY(sail_alloc_string_node(&string_node));
 8010670:	f107 0308 	add.w	r3, r7, #8
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff ff81 	bl	801057c <sail_alloc_string_node>
 801067a:	4603      	mov	r3, r0
 801067c:	827b      	strh	r3, [r7, #18]
 801067e:	8a7b      	ldrh	r3, [r7, #18]
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <sail_split_into_string_node_chain+0xae>
 801068e:	8a7b      	ldrh	r3, [r7, #18]
 8010690:	e033      	b.n	80106fa <sail_split_into_string_node_chain+0x116>

        SAIL_TRY_OR_CLEANUP(sail_strdup_length(value, length, &string_node->string),
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	461a      	mov	r2, r3
 8010696:	6979      	ldr	r1, [r7, #20]
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f000 f8b3 	bl	8010804 <sail_strdup_length>
 801069e:	4603      	mov	r3, r0
 80106a0:	823b      	strh	r3, [r7, #16]
 80106a2:	8a3b      	ldrh	r3, [r7, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	bf14      	ite	ne
 80106a8:	2301      	movne	r3, #1
 80106aa:	2300      	moveq	r3, #0
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d009      	beq.n	80106c6 <sail_split_into_string_node_chain+0xe2>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff ff87 	bl	80105c8 <sail_destroy_string_node_chain>
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff ff75 	bl	80105ac <sail_destroy_string_node>
 80106c2:	8a3b      	ldrh	r3, [r7, #16]
 80106c4:	e019      	b.n	80106fa <sail_split_into_string_node_chain+0x116>
                            /* cleanup */ sail_destroy_string_node_chain(result_string_node),
                                          sail_destroy_string_node(string_node));

        *last_string_node = string_node;
 80106c6:	68ba      	ldr	r2, [r7, #8]
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	601a      	str	r2, [r3, #0]
        last_string_node = &string_node->next;
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	3304      	adds	r3, #4
 80106d0:	61fb      	str	r3, [r7, #28]

        value += length;
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	4413      	add	r3, r2
 80106d8:	607b      	str	r3, [r7, #4]
    while (*(value += strspn(value, separator)) != '\0') {
 80106da:	69b9      	ldr	r1, [r7, #24]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f003 fffc 	bl	80146da <strspn>
 80106e2:	4602      	mov	r2, r0
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	4413      	add	r3, r2
 80106e8:	607b      	str	r3, [r7, #4]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1b9      	bne.n	8010666 <sail_split_into_string_node_chain+0x82>
    }

    *target_string_node = result_string_node;
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3720      	adds	r7, #32
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	0801a290 	.word	0x0801a290
 8010708:	0801a220 	.word	0x0801a220
 801070c:	0801a238 	.word	0x0801a238
 8010710:	0801a29c 	.word	0x0801a29c
 8010714:	0801a298 	.word	0x0801a298
 8010718:	0801a2b0 	.word	0x0801a2b0
 801071c:	0801a2c4 	.word	0x0801a2c4

08010720 <sail_memdup>:

/*
 * Public functions.
 */

sail_status_t sail_memdup(const void *input, size_t input_size, void **output) {
 8010720:	b580      	push	{r7, lr}
 8010722:	b088      	sub	sp, #32
 8010724:	af02      	add	r7, sp, #8
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]

    if (input == NULL) {
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d104      	bne.n	801073c <sail_memdup+0x1c>
        *output = NULL;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	e02a      	b.n	8010792 <sail_memdup+0x72>
    }

    if (input_size == 0) {
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10f      	bne.n	8010762 <sail_memdup+0x42>
        SAIL_LOG_ERROR("Cannot duplicate 0 bytes");
 8010742:	4b16      	ldr	r3, [pc, #88]	; (801079c <sail_memdup+0x7c>)
 8010744:	2254      	movs	r2, #84	; 0x54
 8010746:	4916      	ldr	r1, [pc, #88]	; (80107a0 <sail_memdup+0x80>)
 8010748:	2001      	movs	r0, #1
 801074a:	f7fe fd6b 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 801074e:	4b15      	ldr	r3, [pc, #84]	; (80107a4 <sail_memdup+0x84>)
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	4b15      	ldr	r3, [pc, #84]	; (80107a8 <sail_memdup+0x88>)
 8010754:	2255      	movs	r2, #85	; 0x55
 8010756:	4912      	ldr	r1, [pc, #72]	; (80107a0 <sail_memdup+0x80>)
 8010758:	2001      	movs	r0, #1
 801075a:	f7fe fd63 	bl	800f224 <sail_log>
 801075e:	2309      	movs	r3, #9
 8010760:	e017      	b.n	8010792 <sail_memdup+0x72>
    }

    SAIL_TRY(sail_malloc(input_size, output));
 8010762:	6879      	ldr	r1, [r7, #4]
 8010764:	68b8      	ldr	r0, [r7, #8]
 8010766:	f7fe fe55 	bl	800f414 <sail_malloc>
 801076a:	4603      	mov	r3, r0
 801076c:	82fb      	strh	r3, [r7, #22]
 801076e:	8afb      	ldrh	r3, [r7, #22]
 8010770:	2b00      	cmp	r3, #0
 8010772:	bf14      	ite	ne
 8010774:	2301      	movne	r3, #1
 8010776:	2300      	moveq	r3, #0
 8010778:	b2db      	uxtb	r3, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	d001      	beq.n	8010782 <sail_memdup+0x62>
 801077e:	8afb      	ldrh	r3, [r7, #22]
 8010780:	e007      	b.n	8010792 <sail_memdup+0x72>

    memcpy(*output, input, input_size);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	68f9      	ldr	r1, [r7, #12]
 801078a:	4618      	mov	r0, r3
 801078c:	f002 feda 	bl	8013544 <memcpy>

    return SAIL_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3718      	adds	r7, #24
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	0801a2d0 	.word	0x0801a2d0
 80107a0:	0801a2ec 	.word	0x0801a2ec
 80107a4:	0801a340 	.word	0x0801a340
 80107a8:	0801a33c 	.word	0x0801a33c

080107ac <sail_strdup>:

sail_status_t sail_strdup(const char *input, char **output) {
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]

    if (input == NULL) {
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d104      	bne.n	80107c6 <sail_strdup+0x1a>
        *output = NULL;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2200      	movs	r2, #0
 80107c0:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e01a      	b.n	80107fc <sail_strdup+0x50>
    }

    void *ptr;
    SAIL_TRY(sail_memdup(input, strlen(input) + 1, &ptr));
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f7ef fe94 	bl	80004f4 <strlen>
 80107cc:	4603      	mov	r3, r0
 80107ce:	3301      	adds	r3, #1
 80107d0:	f107 0208 	add.w	r2, r7, #8
 80107d4:	4619      	mov	r1, r3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f7ff ffa2 	bl	8010720 <sail_memdup>
 80107dc:	4603      	mov	r3, r0
 80107de:	81fb      	strh	r3, [r7, #14]
 80107e0:	89fb      	ldrh	r3, [r7, #14]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	bf14      	ite	ne
 80107e6:	2301      	movne	r3, #1
 80107e8:	2300      	moveq	r3, #0
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <sail_strdup+0x48>
 80107f0:	89fb      	ldrh	r3, [r7, #14]
 80107f2:	e003      	b.n	80107fc <sail_strdup+0x50>
    *output = ptr;
 80107f4:	68ba      	ldr	r2, [r7, #8]
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80107fa:	2300      	movs	r3, #0
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3710      	adds	r7, #16
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <sail_strdup_length>:

sail_status_t sail_strdup_length(const char *input, size_t length, char **output) {
 8010804:	b580      	push	{r7, lr}
 8010806:	b088      	sub	sp, #32
 8010808:	af02      	add	r7, sp, #8
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]

    if (input == NULL) {
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d104      	bne.n	8010820 <sail_strdup_length+0x1c>
        *output = NULL;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	601a      	str	r2, [r3, #0]
        return SAIL_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	e037      	b.n	8010890 <sail_strdup_length+0x8c>
    }

    if (length == 0) {
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10f      	bne.n	8010846 <sail_strdup_length+0x42>
        SAIL_LOG_ERROR("Cannot duplicate 0 characters");
 8010826:	4b1c      	ldr	r3, [pc, #112]	; (8010898 <sail_strdup_length+0x94>)
 8010828:	2275      	movs	r2, #117	; 0x75
 801082a:	491c      	ldr	r1, [pc, #112]	; (801089c <sail_strdup_length+0x98>)
 801082c:	2001      	movs	r0, #1
 801082e:	f7fe fcf9 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 8010832:	4b1b      	ldr	r3, [pc, #108]	; (80108a0 <sail_strdup_length+0x9c>)
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	4b1b      	ldr	r3, [pc, #108]	; (80108a4 <sail_strdup_length+0xa0>)
 8010838:	2276      	movs	r2, #118	; 0x76
 801083a:	4918      	ldr	r1, [pc, #96]	; (801089c <sail_strdup_length+0x98>)
 801083c:	2001      	movs	r0, #1
 801083e:	f7fe fcf1 	bl	800f224 <sail_log>
 8010842:	2309      	movs	r3, #9
 8010844:	e024      	b.n	8010890 <sail_strdup_length+0x8c>
    }

    void *ptr;
    SAIL_TRY(sail_malloc(length+1, &ptr));
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	3301      	adds	r3, #1
 801084a:	f107 0210 	add.w	r2, r7, #16
 801084e:	4611      	mov	r1, r2
 8010850:	4618      	mov	r0, r3
 8010852:	f7fe fddf 	bl	800f414 <sail_malloc>
 8010856:	4603      	mov	r3, r0
 8010858:	82fb      	strh	r3, [r7, #22]
 801085a:	8afb      	ldrh	r3, [r7, #22]
 801085c:	2b00      	cmp	r3, #0
 801085e:	bf14      	ite	ne
 8010860:	2301      	movne	r3, #1
 8010862:	2300      	moveq	r3, #0
 8010864:	b2db      	uxtb	r3, r3
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <sail_strdup_length+0x6a>
 801086a:	8afb      	ldrh	r3, [r7, #22]
 801086c:	e010      	b.n	8010890 <sail_strdup_length+0x8c>
    *output = ptr;
 801086e:	693a      	ldr	r2, [r7, #16]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	601a      	str	r2, [r3, #0]

    memcpy(*output, input, length);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	68ba      	ldr	r2, [r7, #8]
 801087a:	68f9      	ldr	r1, [r7, #12]
 801087c:	4618      	mov	r0, r3
 801087e:	f002 fe61 	bl	8013544 <memcpy>
    (*output)[length] = '\0';
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	4413      	add	r3, r2
 801088a:	2200      	movs	r2, #0
 801088c:	701a      	strb	r2, [r3, #0]

    return SAIL_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3718      	adds	r7, #24
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0801a35c 	.word	0x0801a35c
 801089c:	0801a2ec 	.word	0x0801a2ec
 80108a0:	0801a340 	.word	0x0801a340
 80108a4:	0801a33c 	.word	0x0801a33c

080108a8 <sail_to_lower>:
    va_end(args);

    return SAIL_OK;
}

void sail_to_lower(char *str) {
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b086      	sub	sp, #24
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]

    if (str == NULL) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d025      	beq.n	8010902 <sail_to_lower+0x5a>
        return;
    }

    size_t length = strlen(str);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f7ef fe1c 	bl	80004f4 <strlen>
 80108bc:	6138      	str	r0, [r7, #16]

    for (size_t i = 0; i < length; i++) {
 80108be:	2300      	movs	r3, #0
 80108c0:	617b      	str	r3, [r7, #20]
 80108c2:	e019      	b.n	80108f8 <sail_to_lower+0x50>
        str[i] = (char)tolower(str[i]);
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	4413      	add	r3, r2
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	73fb      	strb	r3, [r7, #15]
 80108ce:	7bfb      	ldrb	r3, [r7, #15]
 80108d0:	3301      	adds	r3, #1
 80108d2:	4a0e      	ldr	r2, [pc, #56]	; (801090c <sail_to_lower+0x64>)
 80108d4:	4413      	add	r3, r2
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	f003 0303 	and.w	r3, r3, #3
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d102      	bne.n	80108e6 <sail_to_lower+0x3e>
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
 80108e2:	3320      	adds	r3, #32
 80108e4:	e000      	b.n	80108e8 <sail_to_lower+0x40>
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
 80108e8:	6879      	ldr	r1, [r7, #4]
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	440a      	add	r2, r1
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	7013      	strb	r3, [r2, #0]
    for (size_t i = 0; i < length; i++) {
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	3301      	adds	r3, #1
 80108f6:	617b      	str	r3, [r7, #20]
 80108f8:	697a      	ldr	r2, [r7, #20]
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d3e1      	bcc.n	80108c4 <sail_to_lower+0x1c>
 8010900:	e000      	b.n	8010904 <sail_to_lower+0x5c>
        return;
 8010902:	bf00      	nop
    }
}
 8010904:	3718      	adds	r7, #24
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	0801cef2 	.word	0x0801cef2

08010910 <sail_string_hash>:
    *output = output_local;

    return SAIL_OK;
}

sail_status_t sail_string_hash(const char *str, uint64_t *hash) {
 8010910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010914:	b086      	sub	sp, #24
 8010916:	af02      	add	r7, sp, #8
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(str);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	bf0c      	ite	eq
 8010922:	2301      	moveq	r3, #1
 8010924:	2300      	movne	r3, #0
 8010926:	b2db      	uxtb	r3, r3
 8010928:	2b00      	cmp	r3, #0
 801092a:	d011      	beq.n	8010950 <sail_string_hash+0x40>
 801092c:	4b36      	ldr	r3, [pc, #216]	; (8010a08 <sail_string_hash+0xf8>)
 801092e:	9300      	str	r3, [sp, #0]
 8010930:	4b36      	ldr	r3, [pc, #216]	; (8010a0c <sail_string_hash+0xfc>)
 8010932:	22e2      	movs	r2, #226	; 0xe2
 8010934:	4936      	ldr	r1, [pc, #216]	; (8010a10 <sail_string_hash+0x100>)
 8010936:	2001      	movs	r0, #1
 8010938:	f7fe fc74 	bl	800f224 <sail_log>
 801093c:	4b35      	ldr	r3, [pc, #212]	; (8010a14 <sail_string_hash+0x104>)
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	4b35      	ldr	r3, [pc, #212]	; (8010a18 <sail_string_hash+0x108>)
 8010942:	22e2      	movs	r2, #226	; 0xe2
 8010944:	4932      	ldr	r1, [pc, #200]	; (8010a10 <sail_string_hash+0x100>)
 8010946:	2001      	movs	r0, #1
 8010948:	f7fe fc6c 	bl	800f224 <sail_log>
 801094c:	2301      	movs	r3, #1
 801094e:	e056      	b.n	80109fe <sail_string_hash+0xee>
    SAIL_CHECK_PTR(hash);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	bf0c      	ite	eq
 8010956:	2301      	moveq	r3, #1
 8010958:	2300      	movne	r3, #0
 801095a:	b2db      	uxtb	r3, r3
 801095c:	2b00      	cmp	r3, #0
 801095e:	d011      	beq.n	8010984 <sail_string_hash+0x74>
 8010960:	4b2e      	ldr	r3, [pc, #184]	; (8010a1c <sail_string_hash+0x10c>)
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	4b29      	ldr	r3, [pc, #164]	; (8010a0c <sail_string_hash+0xfc>)
 8010966:	22e3      	movs	r2, #227	; 0xe3
 8010968:	4929      	ldr	r1, [pc, #164]	; (8010a10 <sail_string_hash+0x100>)
 801096a:	2001      	movs	r0, #1
 801096c:	f7fe fc5a 	bl	800f224 <sail_log>
 8010970:	4b28      	ldr	r3, [pc, #160]	; (8010a14 <sail_string_hash+0x104>)
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	4b28      	ldr	r3, [pc, #160]	; (8010a18 <sail_string_hash+0x108>)
 8010976:	22e3      	movs	r2, #227	; 0xe3
 8010978:	4925      	ldr	r1, [pc, #148]	; (8010a10 <sail_string_hash+0x100>)
 801097a:	2001      	movs	r0, #1
 801097c:	f7fe fc52 	bl	800f224 <sail_log>
 8010980:	2301      	movs	r3, #1
 8010982:	e03c      	b.n	80109fe <sail_string_hash+0xee>

    const unsigned char *ustr = (const unsigned char *)str;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	60fb      	str	r3, [r7, #12]

    if (*ustr == '\0') {
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d109      	bne.n	80109a4 <sail_string_hash+0x94>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_EMPTY_STRING);
 8010990:	4b23      	ldr	r3, [pc, #140]	; (8010a20 <sail_string_hash+0x110>)
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	4b20      	ldr	r3, [pc, #128]	; (8010a18 <sail_string_hash+0x108>)
 8010996:	22e8      	movs	r2, #232	; 0xe8
 8010998:	491d      	ldr	r1, [pc, #116]	; (8010a10 <sail_string_hash+0x100>)
 801099a:	2001      	movs	r0, #1
 801099c:	f7fe fc42 	bl	800f224 <sail_log>
 80109a0:	2313      	movs	r3, #19
 80109a2:	e02c      	b.n	80109fe <sail_string_hash+0xee>
    }

    *hash = 5381; /* Magic number, never explained. */
 80109a4:	6839      	ldr	r1, [r7, #0]
 80109a6:	f241 5205 	movw	r2, #5381	; 0x1505
 80109aa:	f04f 0300 	mov.w	r3, #0
 80109ae:	e9c1 2300 	strd	r2, r3, [r1]
    unsigned c;

    while ((c = *ustr++) != 0) {
 80109b2:	e01b      	b.n	80109ec <sail_string_hash+0xdc>
        *hash = ((*hash << 5) + *hash) + c; /* hash * 33 + c */
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109ba:	f04f 0200 	mov.w	r2, #0
 80109be:	f04f 0300 	mov.w	r3, #0
 80109c2:	014b      	lsls	r3, r1, #5
 80109c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80109c8:	0142      	lsls	r2, r0, #5
 80109ca:	6839      	ldr	r1, [r7, #0]
 80109cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109d0:	1814      	adds	r4, r2, r0
 80109d2:	eb43 0501 	adc.w	r5, r3, r1
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	2200      	movs	r2, #0
 80109da:	4698      	mov	r8, r3
 80109dc:	4691      	mov	r9, r2
 80109de:	eb14 0a08 	adds.w	sl, r4, r8
 80109e2:	eb45 0b09 	adc.w	fp, r5, r9
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	e9c3 ab00 	strd	sl, fp, [r3]
    while ((c = *ustr++) != 0) {
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	60fa      	str	r2, [r7, #12]
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	60bb      	str	r3, [r7, #8]
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1db      	bne.n	80109b4 <sail_string_hash+0xa4>
    }

    return SAIL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a08:	0801a400 	.word	0x0801a400
 8010a0c:	0801a3a8 	.word	0x0801a3a8
 8010a10:	0801a2ec 	.word	0x0801a2ec
 8010a14:	0801a3c8 	.word	0x0801a3c8
 8010a18:	0801a33c 	.word	0x0801a33c
 8010a1c:	0801a404 	.word	0x0801a404
 8010a20:	0801a40c 	.word	0x0801a40c

08010a24 <sail_bits_per_pixel>:

sail_status_t sail_bits_per_pixel(enum SailPixelFormat pixel_format, unsigned *result) {
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af02      	add	r7, sp, #8
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	6039      	str	r1, [r7, #0]
 8010a2e:	71fb      	strb	r3, [r7, #7]

    SAIL_CHECK_PTR(result);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	bf0c      	ite	eq
 8010a36:	2301      	moveq	r3, #1
 8010a38:	2300      	movne	r3, #0
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d011      	beq.n	8010a64 <sail_bits_per_pixel+0x40>
 8010a40:	4bbb      	ldr	r3, [pc, #748]	; (8010d30 <sail_bits_per_pixel+0x30c>)
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	4bbb      	ldr	r3, [pc, #748]	; (8010d34 <sail_bits_per_pixel+0x310>)
 8010a46:	22f7      	movs	r2, #247	; 0xf7
 8010a48:	49bb      	ldr	r1, [pc, #748]	; (8010d38 <sail_bits_per_pixel+0x314>)
 8010a4a:	2001      	movs	r0, #1
 8010a4c:	f7fe fbea 	bl	800f224 <sail_log>
 8010a50:	4bba      	ldr	r3, [pc, #744]	; (8010d3c <sail_bits_per_pixel+0x318>)
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	4bba      	ldr	r3, [pc, #744]	; (8010d40 <sail_bits_per_pixel+0x31c>)
 8010a56:	22f7      	movs	r2, #247	; 0xf7
 8010a58:	49b7      	ldr	r1, [pc, #732]	; (8010d38 <sail_bits_per_pixel+0x314>)
 8010a5a:	2001      	movs	r0, #1
 8010a5c:	f7fe fbe2 	bl	800f224 <sail_log>
 8010a60:	2301      	movs	r3, #1
 8010a62:	e1ad      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

    switch (pixel_format) {
 8010a64:	79fb      	ldrb	r3, [r7, #7]
 8010a66:	2b4a      	cmp	r3, #74	; 0x4a
 8010a68:	f200 81a0 	bhi.w	8010dac <sail_bits_per_pixel+0x388>
 8010a6c:	a201      	add	r2, pc, #4	; (adr r2, 8010a74 <sail_bits_per_pixel+0x50>)
 8010a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a72:	bf00      	nop
 8010a74:	08010ba1 	.word	0x08010ba1
 8010a78:	08010bb5 	.word	0x08010bb5
 8010a7c:	08010bbf 	.word	0x08010bbf
 8010a80:	08010bc9 	.word	0x08010bc9
 8010a84:	08010bd3 	.word	0x08010bd3
 8010a88:	08010bdd 	.word	0x08010bdd
 8010a8c:	08010be7 	.word	0x08010be7
 8010a90:	08010bf1 	.word	0x08010bf1
 8010a94:	08010bfb 	.word	0x08010bfb
 8010a98:	08010c05 	.word	0x08010c05
 8010a9c:	08010c0f 	.word	0x08010c0f
 8010aa0:	08010c19 	.word	0x08010c19
 8010aa4:	08010c23 	.word	0x08010c23
 8010aa8:	08010c2d 	.word	0x08010c2d
 8010aac:	08010c37 	.word	0x08010c37
 8010ab0:	08010c41 	.word	0x08010c41
 8010ab4:	08010c4b 	.word	0x08010c4b
 8010ab8:	08010c55 	.word	0x08010c55
 8010abc:	08010c5f 	.word	0x08010c5f
 8010ac0:	08010c69 	.word	0x08010c69
 8010ac4:	08010c73 	.word	0x08010c73
 8010ac8:	08010c7d 	.word	0x08010c7d
 8010acc:	08010c87 	.word	0x08010c87
 8010ad0:	08010c91 	.word	0x08010c91
 8010ad4:	08010c9b 	.word	0x08010c9b
 8010ad8:	08010ca5 	.word	0x08010ca5
 8010adc:	08010caf 	.word	0x08010caf
 8010ae0:	08010cb9 	.word	0x08010cb9
 8010ae4:	08010cb9 	.word	0x08010cb9
 8010ae8:	08010cb9 	.word	0x08010cb9
 8010aec:	08010cb9 	.word	0x08010cb9
 8010af0:	08010cc3 	.word	0x08010cc3
 8010af4:	08010cc3 	.word	0x08010cc3
 8010af8:	08010ccd 	.word	0x08010ccd
 8010afc:	08010ccd 	.word	0x08010ccd
 8010b00:	08010cd7 	.word	0x08010cd7
 8010b04:	08010cd7 	.word	0x08010cd7
 8010b08:	08010cd7 	.word	0x08010cd7
 8010b0c:	08010cd7 	.word	0x08010cd7
 8010b10:	08010cd7 	.word	0x08010cd7
 8010b14:	08010cd7 	.word	0x08010cd7
 8010b18:	08010cd7 	.word	0x08010cd7
 8010b1c:	08010cd7 	.word	0x08010cd7
 8010b20:	08010ce1 	.word	0x08010ce1
 8010b24:	08010ce1 	.word	0x08010ce1
 8010b28:	08010ce1 	.word	0x08010ce1
 8010b2c:	08010ce1 	.word	0x08010ce1
 8010b30:	08010ce1 	.word	0x08010ce1
 8010b34:	08010ce1 	.word	0x08010ce1
 8010b38:	08010ce1 	.word	0x08010ce1
 8010b3c:	08010ce1 	.word	0x08010ce1
 8010b40:	08010ceb 	.word	0x08010ceb
 8010b44:	08010ceb 	.word	0x08010ceb
 8010b48:	08010ceb 	.word	0x08010ceb
 8010b4c:	08010ceb 	.word	0x08010ceb
 8010b50:	08010ceb 	.word	0x08010ceb
 8010b54:	08010ceb 	.word	0x08010ceb
 8010b58:	08010ceb 	.word	0x08010ceb
 8010b5c:	08010ceb 	.word	0x08010ceb
 8010b60:	08010cf5 	.word	0x08010cf5
 8010b64:	08010cff 	.word	0x08010cff
 8010b68:	08010d09 	.word	0x08010d09
 8010b6c:	08010d13 	.word	0x08010d13
 8010b70:	08010d1d 	.word	0x08010d1d
 8010b74:	08010d27 	.word	0x08010d27
 8010b78:	08010d49 	.word	0x08010d49
 8010b7c:	08010d53 	.word	0x08010d53
 8010b80:	08010d5d 	.word	0x08010d5d
 8010b84:	08010d67 	.word	0x08010d67
 8010b88:	08010d71 	.word	0x08010d71
 8010b8c:	08010d7b 	.word	0x08010d7b
 8010b90:	08010d85 	.word	0x08010d85
 8010b94:	08010d8f 	.word	0x08010d8f
 8010b98:	08010d99 	.word	0x08010d99
 8010b9c:	08010da3 	.word	0x08010da3
        case SAIL_PIXEL_FORMAT_UNKNOWN: SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_PIXEL_FORMAT);
 8010ba0:	4b68      	ldr	r3, [pc, #416]	; (8010d44 <sail_bits_per_pixel+0x320>)
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	4b66      	ldr	r3, [pc, #408]	; (8010d40 <sail_bits_per_pixel+0x31c>)
 8010ba6:	22fa      	movs	r2, #250	; 0xfa
 8010ba8:	4963      	ldr	r1, [pc, #396]	; (8010d38 <sail_bits_per_pixel+0x314>)
 8010baa:	2001      	movs	r0, #1
 8010bac:	f7fe fb3a 	bl	800f224 <sail_log>
 8010bb0:	23c9      	movs	r3, #201	; 0xc9
 8010bb2:	e105      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1:   *result = 1;   return SAIL_OK;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	2300      	movs	r3, #0
 8010bbc:	e100      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2:   *result = 2;   return SAIL_OK;
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	2202      	movs	r2, #2
 8010bc2:	601a      	str	r2, [r3, #0]
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	e0fb      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4:   *result = 4;   return SAIL_OK;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	2204      	movs	r2, #4
 8010bcc:	601a      	str	r2, [r3, #0]
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e0f6      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8:   *result = 8;   return SAIL_OK;
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	2208      	movs	r2, #8
 8010bd6:	601a      	str	r2, [r3, #0]
 8010bd8:	2300      	movs	r3, #0
 8010bda:	e0f1      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16:  *result = 16;  return SAIL_OK;
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2210      	movs	r2, #16
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	2300      	movs	r3, #0
 8010be4:	e0ec      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP24:  *result = 24;  return SAIL_OK;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	2218      	movs	r2, #24
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	2300      	movs	r3, #0
 8010bee:	e0e7      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32:  *result = 32;  return SAIL_OK;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	2220      	movs	r2, #32
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e0e2      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48:  *result = 48;  return SAIL_OK;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2230      	movs	r2, #48	; 0x30
 8010bfe:	601a      	str	r2, [r3, #0]
 8010c00:	2300      	movs	r3, #0
 8010c02:	e0dd      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64:  *result = 64;  return SAIL_OK;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	2240      	movs	r2, #64	; 0x40
 8010c08:	601a      	str	r2, [r3, #0]
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	e0d8      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP72:  *result = 72;  return SAIL_OK;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	2248      	movs	r2, #72	; 0x48
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	2300      	movs	r3, #0
 8010c16:	e0d3      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP96:  *result = 96;  return SAIL_OK;
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	2260      	movs	r2, #96	; 0x60
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e0ce      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP128: *result = 128; return SAIL_OK;
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	2280      	movs	r2, #128	; 0x80
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	2300      	movs	r3, #0
 8010c2a:	e0c9      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:  *result = 1; return SAIL_OK;
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	601a      	str	r2, [r3, #0]
 8010c32:	2300      	movs	r3, #0
 8010c34:	e0c4      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:  *result = 2; return SAIL_OK;
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	2202      	movs	r2, #2
 8010c3a:	601a      	str	r2, [r3, #0]
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	e0bf      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:  *result = 4; return SAIL_OK;
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2204      	movs	r2, #4
 8010c44:	601a      	str	r2, [r3, #0]
 8010c46:	2300      	movs	r3, #0
 8010c48:	e0ba      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:  *result = 8; return SAIL_OK;
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	2208      	movs	r2, #8
 8010c4e:	601a      	str	r2, [r3, #0]
 8010c50:	2300      	movs	r3, #0
 8010c52:	e0b5      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED: *result = 16; return SAIL_OK;
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	2210      	movs	r2, #16
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e0b0      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP1_GRAYSCALE:  *result = 1; return SAIL_OK;
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2201      	movs	r2, #1
 8010c62:	601a      	str	r2, [r3, #0]
 8010c64:	2300      	movs	r3, #0
 8010c66:	e0ab      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP2_GRAYSCALE:  *result = 2; return SAIL_OK;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2202      	movs	r2, #2
 8010c6c:	601a      	str	r2, [r3, #0]
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e0a6      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE:  *result = 4; return SAIL_OK;
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	2204      	movs	r2, #4
 8010c76:	601a      	str	r2, [r3, #0]
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e0a1      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE:  *result = 8; return SAIL_OK;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	2208      	movs	r2, #8
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	2300      	movs	r3, #0
 8010c84:	e09c      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE: *result = 16; return SAIL_OK;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	2210      	movs	r2, #16
 8010c8a:	601a      	str	r2, [r3, #0]
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	e097      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP4_GRAYSCALE_ALPHA:  *result = 4; return SAIL_OK;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	2204      	movs	r2, #4
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	2300      	movs	r3, #0
 8010c98:	e092      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP8_GRAYSCALE_ALPHA:  *result = 8; return SAIL_OK;
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	2208      	movs	r2, #8
 8010c9e:	601a      	str	r2, [r3, #0]
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	e08d      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_GRAYSCALE_ALPHA: *result = 16; return SAIL_OK;
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2210      	movs	r2, #16
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	2300      	movs	r3, #0
 8010cac:	e088      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32_GRAYSCALE_ALPHA: *result = 32; return SAIL_OK;
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	2220      	movs	r2, #32
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	e083      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP16_RGB555:
        case SAIL_PIXEL_FORMAT_BPP16_BGR555:
        case SAIL_PIXEL_FORMAT_BPP16_RGB565:
        case SAIL_PIXEL_FORMAT_BPP16_BGR565: *result = 16; return SAIL_OK;
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	2210      	movs	r2, #16
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	e07e      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_RGB:
        case SAIL_PIXEL_FORMAT_BPP24_BGR: *result = 24; return SAIL_OK;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	2218      	movs	r2, #24
 8010cc6:	601a      	str	r2, [r3, #0]
 8010cc8:	2300      	movs	r3, #0
 8010cca:	e079      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP48_RGB:
        case SAIL_PIXEL_FORMAT_BPP48_BGR: *result = 48; return SAIL_OK;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	2230      	movs	r2, #48	; 0x30
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	e074      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP16_XRGB:
        case SAIL_PIXEL_FORMAT_BPP16_XBGR:
        case SAIL_PIXEL_FORMAT_BPP16_RGBA:
        case SAIL_PIXEL_FORMAT_BPP16_BGRA:
        case SAIL_PIXEL_FORMAT_BPP16_ARGB:
        case SAIL_PIXEL_FORMAT_BPP16_ABGR: *result = 16; return SAIL_OK;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	2210      	movs	r2, #16
 8010cda:	601a      	str	r2, [r3, #0]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	e06f      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP32_XRGB:
        case SAIL_PIXEL_FORMAT_BPP32_XBGR:
        case SAIL_PIXEL_FORMAT_BPP32_RGBA:
        case SAIL_PIXEL_FORMAT_BPP32_BGRA:
        case SAIL_PIXEL_FORMAT_BPP32_ARGB:
        case SAIL_PIXEL_FORMAT_BPP32_ABGR: *result = 32; return SAIL_OK;
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	2220      	movs	r2, #32
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	e06a      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_XRGB:
        case SAIL_PIXEL_FORMAT_BPP64_XBGR:
        case SAIL_PIXEL_FORMAT_BPP64_RGBA:
        case SAIL_PIXEL_FORMAT_BPP64_BGRA:
        case SAIL_PIXEL_FORMAT_BPP64_ARGB:
        case SAIL_PIXEL_FORMAT_BPP64_ABGR: *result = 64; return SAIL_OK;
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	2240      	movs	r2, #64	; 0x40
 8010cee:	601a      	str	r2, [r3, #0]
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	e065      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_CMYK: *result = 32; return SAIL_OK;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	2220      	movs	r2, #32
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	e060      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_CMYK: *result = 64; return SAIL_OK;
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2240      	movs	r2, #64	; 0x40
 8010d02:	601a      	str	r2, [r3, #0]
 8010d04:	2300      	movs	r3, #0
 8010d06:	e05b      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_YCBCR: *result = 24; return SAIL_OK;
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	2218      	movs	r2, #24
 8010d0c:	601a      	str	r2, [r3, #0]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	e056      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_YCCK: *result = 32; return SAIL_OK;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	2220      	movs	r2, #32
 8010d16:	601a      	str	r2, [r3, #0]
 8010d18:	2300      	movs	r3, #0
 8010d1a:	e051      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LAB: *result = 24; return SAIL_OK;
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	2218      	movs	r2, #24
 8010d20:	601a      	str	r2, [r3, #0]
 8010d22:	2300      	movs	r3, #0
 8010d24:	e04c      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LAB: *result = 40; return SAIL_OK;
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	2228      	movs	r2, #40	; 0x28
 8010d2a:	601a      	str	r2, [r3, #0]
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e047      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
 8010d30:	0801a424 	.word	0x0801a424
 8010d34:	0801a3a8 	.word	0x0801a3a8
 8010d38:	0801a2ec 	.word	0x0801a2ec
 8010d3c:	0801a3c8 	.word	0x0801a3c8
 8010d40:	0801a33c 	.word	0x0801a33c
 8010d44:	0801a42c 	.word	0x0801a42c

        case SAIL_PIXEL_FORMAT_BPP24_CIE_LUV: *result = 24; return SAIL_OK;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	2218      	movs	r2, #24
 8010d4c:	601a      	str	r2, [r3, #0]
 8010d4e:	2300      	movs	r3, #0
 8010d50:	e036      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_CIE_LUV: *result = 40; return SAIL_OK;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	2228      	movs	r2, #40	; 0x28
 8010d56:	601a      	str	r2, [r3, #0]
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e031      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP24_YUV: *result = 24; return SAIL_OK;
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	2218      	movs	r2, #24
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	2300      	movs	r3, #0
 8010d64:	e02c      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP30_YUV: *result = 30; return SAIL_OK;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	221e      	movs	r2, #30
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	e027      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP36_YUV: *result = 36; return SAIL_OK;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	2224      	movs	r2, #36	; 0x24
 8010d74:	601a      	str	r2, [r3, #0]
 8010d76:	2300      	movs	r3, #0
 8010d78:	e022      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48_YUV: *result = 48; return SAIL_OK;
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	2230      	movs	r2, #48	; 0x30
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	2300      	movs	r3, #0
 8010d82:	e01d      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>

        case SAIL_PIXEL_FORMAT_BPP32_YUVA: *result = 32; return SAIL_OK;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	2220      	movs	r2, #32
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e018      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP40_YUVA: *result = 40; return SAIL_OK;
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	2228      	movs	r2, #40	; 0x28
 8010d92:	601a      	str	r2, [r3, #0]
 8010d94:	2300      	movs	r3, #0
 8010d96:	e013      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP48_YUVA: *result = 48; return SAIL_OK;
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	2230      	movs	r2, #48	; 0x30
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e00e      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
        case SAIL_PIXEL_FORMAT_BPP64_YUVA: *result = 64; return SAIL_OK;
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	2240      	movs	r2, #64	; 0x40
 8010da6:	601a      	str	r2, [r3, #0]
 8010da8:	2300      	movs	r3, #0
 8010daa:	e009      	b.n	8010dc0 <sail_bits_per_pixel+0x39c>
    }

    SAIL_LOG_AND_RETURN(SAIL_ERROR_UNSUPPORTED_PIXEL_FORMAT);
 8010dac:	4b06      	ldr	r3, [pc, #24]	; (8010dc8 <sail_bits_per_pixel+0x3a4>)
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <sail_bits_per_pixel+0x3a8>)
 8010db2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010db6:	4906      	ldr	r1, [pc, #24]	; (8010dd0 <sail_bits_per_pixel+0x3ac>)
 8010db8:	2001      	movs	r0, #1
 8010dba:	f7fe fa33 	bl	800f224 <sail_log>
 8010dbe:	23c9      	movs	r3, #201	; 0xc9
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	0801a42c 	.word	0x0801a42c
 8010dcc:	0801a33c 	.word	0x0801a33c
 8010dd0:	0801a2ec 	.word	0x0801a2ec

08010dd4 <sail_bytes_per_line>:
    SAIL_TRY(sail_compare_bits_per_pixel(pixel_format1, pixel_format2, SAIL_PIXEL_FORMAT_COMPARISON_PRIVATE_GREATER, result));

    return SAIL_OK;
}

sail_status_t sail_bytes_per_line(unsigned width, enum SailPixelFormat pixel_format, unsigned *result) {
 8010dd4:	b5b0      	push	{r4, r5, r7, lr}
 8010dd6:	b088      	sub	sp, #32
 8010dd8:	af02      	add	r7, sp, #8
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	607a      	str	r2, [r7, #4]
 8010de0:	72fb      	strb	r3, [r7, #11]

    if (width == 0) {
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d111      	bne.n	8010e0c <sail_bytes_per_line+0x38>
        SAIL_LOG_ERROR("Line width is 0");
 8010de8:	4b37      	ldr	r3, [pc, #220]	; (8010ec8 <sail_bytes_per_line+0xf4>)
 8010dea:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010dee:	4937      	ldr	r1, [pc, #220]	; (8010ecc <sail_bytes_per_line+0xf8>)
 8010df0:	2001      	movs	r0, #1
 8010df2:	f7fe fa17 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 8010df6:	4b36      	ldr	r3, [pc, #216]	; (8010ed0 <sail_bytes_per_line+0xfc>)
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	4b36      	ldr	r3, [pc, #216]	; (8010ed4 <sail_bytes_per_line+0x100>)
 8010dfc:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010e00:	4932      	ldr	r1, [pc, #200]	; (8010ecc <sail_bytes_per_line+0xf8>)
 8010e02:	2001      	movs	r0, #1
 8010e04:	f7fe fa0e 	bl	800f224 <sail_log>
 8010e08:	2309      	movs	r3, #9
 8010e0a:	e059      	b.n	8010ec0 <sail_bytes_per_line+0xec>
    }

    SAIL_CHECK_PTR(result);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	bf0c      	ite	eq
 8010e12:	2301      	moveq	r3, #1
 8010e14:	2300      	movne	r3, #0
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d013      	beq.n	8010e44 <sail_bytes_per_line+0x70>
 8010e1c:	4b2e      	ldr	r3, [pc, #184]	; (8010ed8 <sail_bytes_per_line+0x104>)
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	4b2e      	ldr	r3, [pc, #184]	; (8010edc <sail_bytes_per_line+0x108>)
 8010e22:	f240 12b1 	movw	r2, #433	; 0x1b1
 8010e26:	4929      	ldr	r1, [pc, #164]	; (8010ecc <sail_bytes_per_line+0xf8>)
 8010e28:	2001      	movs	r0, #1
 8010e2a:	f7fe f9fb 	bl	800f224 <sail_log>
 8010e2e:	4b2c      	ldr	r3, [pc, #176]	; (8010ee0 <sail_bytes_per_line+0x10c>)
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	4b28      	ldr	r3, [pc, #160]	; (8010ed4 <sail_bytes_per_line+0x100>)
 8010e34:	f240 12b1 	movw	r2, #433	; 0x1b1
 8010e38:	4924      	ldr	r1, [pc, #144]	; (8010ecc <sail_bytes_per_line+0xf8>)
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	f7fe f9f2 	bl	800f224 <sail_log>
 8010e40:	2301      	movs	r3, #1
 8010e42:	e03d      	b.n	8010ec0 <sail_bytes_per_line+0xec>

    unsigned bits_per_pixel;
    SAIL_TRY(sail_bits_per_pixel(pixel_format, &bits_per_pixel));
 8010e44:	f107 0210 	add.w	r2, r7, #16
 8010e48:	7afb      	ldrb	r3, [r7, #11]
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7ff fde9 	bl	8010a24 <sail_bits_per_pixel>
 8010e52:	4603      	mov	r3, r0
 8010e54:	82fb      	strh	r3, [r7, #22]
 8010e56:	8afb      	ldrh	r3, [r7, #22]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	bf14      	ite	ne
 8010e5c:	2301      	movne	r3, #1
 8010e5e:	2300      	moveq	r3, #0
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <sail_bytes_per_line+0x96>
 8010e66:	8afb      	ldrh	r3, [r7, #22]
 8010e68:	e02a      	b.n	8010ec0 <sail_bytes_per_line+0xec>

    *result = (unsigned)(((double)width * bits_per_pixel + 7) / 8);
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ef fc8c 	bl	8000788 <__aeabi_ui2d>
 8010e70:	4604      	mov	r4, r0
 8010e72:	460d      	mov	r5, r1
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7ef fc86 	bl	8000788 <__aeabi_ui2d>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4620      	mov	r0, r4
 8010e82:	4629      	mov	r1, r5
 8010e84:	f7ef fcfa 	bl	800087c <__aeabi_dmul>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	4619      	mov	r1, r3
 8010e90:	f04f 0200 	mov.w	r2, #0
 8010e94:	4b13      	ldr	r3, [pc, #76]	; (8010ee4 <sail_bytes_per_line+0x110>)
 8010e96:	f7ef fb3b 	bl	8000510 <__adddf3>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4610      	mov	r0, r2
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	f04f 0200 	mov.w	r2, #0
 8010ea6:	4b10      	ldr	r3, [pc, #64]	; (8010ee8 <sail_bytes_per_line+0x114>)
 8010ea8:	f7ef fe12 	bl	8000ad0 <__aeabi_ddiv>
 8010eac:	4602      	mov	r2, r0
 8010eae:	460b      	mov	r3, r1
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	f7ef ff7c 	bl	8000db0 <__aeabi_d2uiz>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3718      	adds	r7, #24
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8010ec8:	0801a450 	.word	0x0801a450
 8010ecc:	0801a2ec 	.word	0x0801a2ec
 8010ed0:	0801a340 	.word	0x0801a340
 8010ed4:	0801a33c 	.word	0x0801a33c
 8010ed8:	0801a424 	.word	0x0801a424
 8010edc:	0801a3a8 	.word	0x0801a3a8
 8010ee0:	0801a3c8 	.word	0x0801a3c8
 8010ee4:	401c0000 	.word	0x401c0000
 8010ee8:	40200000 	.word	0x40200000

08010eec <sail_is_indexed>:

bool sail_is_indexed(enum SailPixelFormat pixel_format) {
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	71fb      	strb	r3, [r7, #7]

    switch (pixel_format) {
 8010ef6:	79fb      	ldrb	r3, [r7, #7]
 8010ef8:	3b0d      	subs	r3, #13
 8010efa:	2b04      	cmp	r3, #4
 8010efc:	d801      	bhi.n	8010f02 <sail_is_indexed+0x16>
        case SAIL_PIXEL_FORMAT_BPP1_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP2_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP4_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP8_INDEXED:
        case SAIL_PIXEL_FORMAT_BPP16_INDEXED: {
            return true;
 8010efe:	2301      	movs	r3, #1
 8010f00:	e000      	b.n	8010f04 <sail_is_indexed+0x18>
        }
        default: {
            return false;
 8010f02:	2300      	movs	r3, #0
        }
    }
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <sail_print_errno>:
            return false;
        }
    }
}

sail_status_t sail_print_errno(const char *format) {
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af02      	add	r7, sp, #8
 8010f16:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(format);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	bf0c      	ite	eq
 8010f1e:	2301      	moveq	r3, #1
 8010f20:	2300      	movne	r3, #0
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d013      	beq.n	8010f50 <sail_print_errno+0x40>
 8010f28:	4b20      	ldr	r3, [pc, #128]	; (8010fac <sail_print_errno+0x9c>)
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	4b20      	ldr	r3, [pc, #128]	; (8010fb0 <sail_print_errno+0xa0>)
 8010f2e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8010f32:	4920      	ldr	r1, [pc, #128]	; (8010fb4 <sail_print_errno+0xa4>)
 8010f34:	2001      	movs	r0, #1
 8010f36:	f7fe f975 	bl	800f224 <sail_log>
 8010f3a:	4b1f      	ldr	r3, [pc, #124]	; (8010fb8 <sail_print_errno+0xa8>)
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	4b1f      	ldr	r3, [pc, #124]	; (8010fbc <sail_print_errno+0xac>)
 8010f40:	f44f 7202 	mov.w	r2, #520	; 0x208
 8010f44:	491b      	ldr	r1, [pc, #108]	; (8010fb4 <sail_print_errno+0xa4>)
 8010f46:	2001      	movs	r0, #1
 8010f48:	f7fe f96c 	bl	800f224 <sail_log>
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	e029      	b.n	8010fa4 <sail_print_errno+0x94>

    if (strstr(format, "%s") == NULL) {
 8010f50:	491a      	ldr	r1, [pc, #104]	; (8010fbc <sail_print_errno+0xac>)
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f003 fbd1 	bl	80146fa <strstr>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d111      	bne.n	8010f82 <sail_print_errno+0x72>
        SAIL_LOG_ERROR("Format argument must contain %%s");
 8010f5e:	4b18      	ldr	r3, [pc, #96]	; (8010fc0 <sail_print_errno+0xb0>)
 8010f60:	f240 220b 	movw	r2, #523	; 0x20b
 8010f64:	4913      	ldr	r1, [pc, #76]	; (8010fb4 <sail_print_errno+0xa4>)
 8010f66:	2001      	movs	r0, #1
 8010f68:	f7fe f95c 	bl	800f224 <sail_log>
        SAIL_LOG_AND_RETURN(SAIL_ERROR_INVALID_ARGUMENT);
 8010f6c:	4b15      	ldr	r3, [pc, #84]	; (8010fc4 <sail_print_errno+0xb4>)
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4b12      	ldr	r3, [pc, #72]	; (8010fbc <sail_print_errno+0xac>)
 8010f72:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8010f76:	490f      	ldr	r1, [pc, #60]	; (8010fb4 <sail_print_errno+0xa4>)
 8010f78:	2001      	movs	r0, #1
 8010f7a:	f7fe f953 	bl	800f224 <sail_log>
 8010f7e:	2309      	movs	r3, #9
 8010f80:	e010      	b.n	8010fa4 <sail_print_errno+0x94>
#ifdef _MSC_VER
    char buffer[80];
    strerror_s(buffer, sizeof(buffer), errno);
    SAIL_LOG_ERROR(format, buffer);
#else
    SAIL_LOG_ERROR(format, strerror(errno));
 8010f82:	f001 ffb5 	bl	8012ef0 <__errno>
 8010f86:	4603      	mov	r3, r0
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f003 fb74 	bl	8014678 <strerror>
 8010f90:	4603      	mov	r3, r0
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f44f 7205 	mov.w	r2, #532	; 0x214
 8010f9a:	4906      	ldr	r1, [pc, #24]	; (8010fb4 <sail_print_errno+0xa4>)
 8010f9c:	2001      	movs	r0, #1
 8010f9e:	f7fe f941 	bl	800f224 <sail_log>
#endif

    return SAIL_OK;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	0801a460 	.word	0x0801a460
 8010fb0:	0801a3a8 	.word	0x0801a3a8
 8010fb4:	0801a2ec 	.word	0x0801a2ec
 8010fb8:	0801a3c8 	.word	0x0801a3c8
 8010fbc:	0801a33c 	.word	0x0801a33c
 8010fc0:	0801a468 	.word	0x0801a468
 8010fc4:	0801a340 	.word	0x0801a340

08010fc8 <sail_now>:

uint64_t sail_now(void) {
 8010fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010fcc:	b088      	sub	sp, #32
 8010fce:	af00      	add	r7, sp, #0

    return (uint64_t)((double)li.QuadPart / frequency);
#else
    struct timeval tv;

    if (gettimeofday(&tv, NULL) != 0) {
 8010fd0:	f107 0310 	add.w	r3, r7, #16
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f004 fa62 	bl	80154a0 <gettimeofday>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d009      	beq.n	8010ff6 <sail_now+0x2e>
        sail_print_errno("Failed to get the current time: %s");
 8010fe2:	482b      	ldr	r0, [pc, #172]	; (8011090 <sail_now+0xc8>)
 8010fe4:	f7ff ff94 	bl	8010f10 <sail_print_errno>
        return 0;
 8010fe8:	f04f 0300 	mov.w	r3, #0
 8010fec:	f04f 0400 	mov.w	r4, #0
 8010ff0:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8010ff4:	e043      	b.n	801107e <sail_now+0xb6>
    }

    return (uint64_t)tv.tv_sec * 1000 + (uint64_t)tv.tv_usec / 1000;
 8010ff6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	f04f 0a00 	mov.w	sl, #0
 8011006:	f04f 0b00 	mov.w	fp, #0
 801100a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 801100e:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8011012:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8011016:	4652      	mov	r2, sl
 8011018:	465b      	mov	r3, fp
 801101a:	1a14      	subs	r4, r2, r0
 801101c:	eb63 0501 	sbc.w	r5, r3, r1
 8011020:	f04f 0200 	mov.w	r2, #0
 8011024:	f04f 0300 	mov.w	r3, #0
 8011028:	00ab      	lsls	r3, r5, #2
 801102a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801102e:	00a2      	lsls	r2, r4, #2
 8011030:	4614      	mov	r4, r2
 8011032:	461d      	mov	r5, r3
 8011034:	eb14 0800 	adds.w	r8, r4, r0
 8011038:	eb45 0901 	adc.w	r9, r5, r1
 801103c:	f04f 0200 	mov.w	r2, #0
 8011040:	f04f 0300 	mov.w	r3, #0
 8011044:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011048:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801104c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011050:	4690      	mov	r8, r2
 8011052:	4699      	mov	r9, r3
 8011054:	4644      	mov	r4, r8
 8011056:	464d      	mov	r5, r9
 8011058:	69bb      	ldr	r3, [r7, #24]
 801105a:	17da      	asrs	r2, r3, #31
 801105c:	603b      	str	r3, [r7, #0]
 801105e:	607a      	str	r2, [r7, #4]
 8011060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011064:	f04f 0300 	mov.w	r3, #0
 8011068:	e9d7 0100 	ldrd	r0, r1, [r7]
 801106c:	f7ef fec0 	bl	8000df0 <__aeabi_uldivmod>
 8011070:	4602      	mov	r2, r0
 8011072:	460b      	mov	r3, r1
 8011074:	18a1      	adds	r1, r4, r2
 8011076:	60b9      	str	r1, [r7, #8]
 8011078:	eb45 0303 	adc.w	r3, r5, r3
 801107c:	60fb      	str	r3, [r7, #12]
#endif
}
 801107e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011082:	4610      	mov	r0, r2
 8011084:	4619      	mov	r1, r3
 8011086:	3720      	adds	r7, #32
 8011088:	46bd      	mov	sp, r7
 801108a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801108e:	bf00      	nop
 8011090:	0801a48c 	.word	0x0801a48c

08011094 <set_variant_value>:
#include "sail-common.h"

/*
 * Private functions.
 */
static sail_status_t set_variant_value(struct sail_variant *variant, enum SailVariantType type, const void *value, const size_t size) {
 8011094:	b580      	push	{r7, lr}
 8011096:	b088      	sub	sp, #32
 8011098:	af02      	add	r7, sp, #8
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	607a      	str	r2, [r7, #4]
 801109e:	603b      	str	r3, [r7, #0]
 80110a0:	460b      	mov	r3, r1
 80110a2:	72fb      	strb	r3, [r7, #11]

    SAIL_CHECK_PTR(variant);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	bf0c      	ite	eq
 80110aa:	2301      	moveq	r3, #1
 80110ac:	2300      	movne	r3, #0
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d011      	beq.n	80110d8 <set_variant_value+0x44>
 80110b4:	4b1b      	ldr	r3, [pc, #108]	; (8011124 <set_variant_value+0x90>)
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	4b1b      	ldr	r3, [pc, #108]	; (8011128 <set_variant_value+0x94>)
 80110ba:	2223      	movs	r2, #35	; 0x23
 80110bc:	491b      	ldr	r1, [pc, #108]	; (801112c <set_variant_value+0x98>)
 80110be:	2001      	movs	r0, #1
 80110c0:	f7fe f8b0 	bl	800f224 <sail_log>
 80110c4:	4b1a      	ldr	r3, [pc, #104]	; (8011130 <set_variant_value+0x9c>)
 80110c6:	9300      	str	r3, [sp, #0]
 80110c8:	4b1a      	ldr	r3, [pc, #104]	; (8011134 <set_variant_value+0xa0>)
 80110ca:	2223      	movs	r2, #35	; 0x23
 80110cc:	4917      	ldr	r1, [pc, #92]	; (801112c <set_variant_value+0x98>)
 80110ce:	2001      	movs	r0, #1
 80110d0:	f7fe f8a8 	bl	800f224 <sail_log>
 80110d4:	2301      	movs	r3, #1
 80110d6:	e020      	b.n	801111a <set_variant_value+0x86>

    void **ptr = &variant->value;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	3304      	adds	r3, #4
 80110dc:	617b      	str	r3, [r7, #20]
    SAIL_TRY(sail_realloc(size, ptr));
 80110de:	6979      	ldr	r1, [r7, #20]
 80110e0:	6838      	ldr	r0, [r7, #0]
 80110e2:	f7fe f9d7 	bl	800f494 <sail_realloc>
 80110e6:	4603      	mov	r3, r0
 80110e8:	827b      	strh	r3, [r7, #18]
 80110ea:	8a7b      	ldrh	r3, [r7, #18]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	bf14      	ite	ne
 80110f0:	2301      	movne	r3, #1
 80110f2:	2300      	moveq	r3, #0
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d001      	beq.n	80110fe <set_variant_value+0x6a>
 80110fa:	8a7b      	ldrh	r3, [r7, #18]
 80110fc:	e00d      	b.n	801111a <set_variant_value+0x86>
    memcpy(variant->value, value, size);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	683a      	ldr	r2, [r7, #0]
 8011104:	6879      	ldr	r1, [r7, #4]
 8011106:	4618      	mov	r0, r3
 8011108:	f002 fa1c 	bl	8013544 <memcpy>

    variant->type = type;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	7afa      	ldrb	r2, [r7, #11]
 8011110:	701a      	strb	r2, [r3, #0]
    variant->size = size;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3718      	adds	r7, #24
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	0801a598 	.word	0x0801a598
 8011128:	0801a52c 	.word	0x0801a52c
 801112c:	0801a544 	.word	0x0801a544
 8011130:	0801a5a4 	.word	0x0801a5a4
 8011134:	0801a5a0 	.word	0x0801a5a0

08011138 <alloc_variant>:

static sail_status_t alloc_variant(enum SailVariantType type, const void *value, const size_t size, struct sail_variant **variant) {
 8011138:	b580      	push	{r7, lr}
 801113a:	b088      	sub	sp, #32
 801113c:	af02      	add	r7, sp, #8
 801113e:	60b9      	str	r1, [r7, #8]
 8011140:	607a      	str	r2, [r7, #4]
 8011142:	603b      	str	r3, [r7, #0]
 8011144:	4603      	mov	r3, r0
 8011146:	73fb      	strb	r3, [r7, #15]

    SAIL_CHECK_PTR(variant);
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	bf0c      	ite	eq
 801114e:	2301      	moveq	r3, #1
 8011150:	2300      	movne	r3, #0
 8011152:	b2db      	uxtb	r3, r3
 8011154:	2b00      	cmp	r3, #0
 8011156:	d011      	beq.n	801117c <alloc_variant+0x44>
 8011158:	4b20      	ldr	r3, [pc, #128]	; (80111dc <alloc_variant+0xa4>)
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	4b20      	ldr	r3, [pc, #128]	; (80111e0 <alloc_variant+0xa8>)
 801115e:	2231      	movs	r2, #49	; 0x31
 8011160:	4920      	ldr	r1, [pc, #128]	; (80111e4 <alloc_variant+0xac>)
 8011162:	2001      	movs	r0, #1
 8011164:	f7fe f85e 	bl	800f224 <sail_log>
 8011168:	4b1f      	ldr	r3, [pc, #124]	; (80111e8 <alloc_variant+0xb0>)
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	4b1f      	ldr	r3, [pc, #124]	; (80111ec <alloc_variant+0xb4>)
 801116e:	2231      	movs	r2, #49	; 0x31
 8011170:	491c      	ldr	r1, [pc, #112]	; (80111e4 <alloc_variant+0xac>)
 8011172:	2001      	movs	r0, #1
 8011174:	f7fe f856 	bl	800f224 <sail_log>
 8011178:	2301      	movs	r3, #1
 801117a:	e02a      	b.n	80111d2 <alloc_variant+0x9a>

    struct sail_variant *variant_local;
    SAIL_TRY(sail_alloc_variant(&variant_local));
 801117c:	f107 0310 	add.w	r3, r7, #16
 8011180:	4618      	mov	r0, r3
 8011182:	f000 f835 	bl	80111f0 <sail_alloc_variant>
 8011186:	4603      	mov	r3, r0
 8011188:	82fb      	strh	r3, [r7, #22]
 801118a:	8afb      	ldrh	r3, [r7, #22]
 801118c:	2b00      	cmp	r3, #0
 801118e:	bf14      	ite	ne
 8011190:	2301      	movne	r3, #1
 8011192:	2300      	moveq	r3, #0
 8011194:	b2db      	uxtb	r3, r3
 8011196:	2b00      	cmp	r3, #0
 8011198:	d001      	beq.n	801119e <alloc_variant+0x66>
 801119a:	8afb      	ldrh	r3, [r7, #22]
 801119c:	e019      	b.n	80111d2 <alloc_variant+0x9a>

    SAIL_TRY_OR_CLEANUP(set_variant_value(variant_local, type, value, size),
 801119e:	6938      	ldr	r0, [r7, #16]
 80111a0:	7bf9      	ldrb	r1, [r7, #15]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	f7ff ff75 	bl	8011094 <set_variant_value>
 80111aa:	4603      	mov	r3, r0
 80111ac:	82bb      	strh	r3, [r7, #20]
 80111ae:	8abb      	ldrh	r3, [r7, #20]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	bf14      	ite	ne
 80111b4:	2301      	movne	r3, #1
 80111b6:	2300      	moveq	r3, #0
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d005      	beq.n	80111ca <alloc_variant+0x92>
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	4618      	mov	r0, r3
 80111c2:	f000 f863 	bl	801128c <sail_destroy_variant>
 80111c6:	8abb      	ldrh	r3, [r7, #20]
 80111c8:	e003      	b.n	80111d2 <alloc_variant+0x9a>
                        /* on error */ sail_destroy_variant(variant_local));

    *variant = variant_local;
 80111ca:	693a      	ldr	r2, [r7, #16]
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	601a      	str	r2, [r3, #0]

    return SAIL_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3718      	adds	r7, #24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	0801a598 	.word	0x0801a598
 80111e0:	0801a52c 	.word	0x0801a52c
 80111e4:	0801a544 	.word	0x0801a544
 80111e8:	0801a5a4 	.word	0x0801a5a4
 80111ec:	0801a5a0 	.word	0x0801a5a0

080111f0 <sail_alloc_variant>:

/*
 * Public functions.
 */
sail_status_t sail_alloc_variant(struct sail_variant **variant) {
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af02      	add	r7, sp, #8
 80111f6:	6078      	str	r0, [r7, #4]

    SAIL_CHECK_PTR(variant);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	bf0c      	ite	eq
 80111fe:	2301      	moveq	r3, #1
 8011200:	2300      	movne	r3, #0
 8011202:	b2db      	uxtb	r3, r3
 8011204:	2b00      	cmp	r3, #0
 8011206:	d011      	beq.n	801122c <sail_alloc_variant+0x3c>
 8011208:	4b1b      	ldr	r3, [pc, #108]	; (8011278 <sail_alloc_variant+0x88>)
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	4b1b      	ldr	r3, [pc, #108]	; (801127c <sail_alloc_variant+0x8c>)
 801120e:	2243      	movs	r2, #67	; 0x43
 8011210:	491b      	ldr	r1, [pc, #108]	; (8011280 <sail_alloc_variant+0x90>)
 8011212:	2001      	movs	r0, #1
 8011214:	f7fe f806 	bl	800f224 <sail_log>
 8011218:	4b1a      	ldr	r3, [pc, #104]	; (8011284 <sail_alloc_variant+0x94>)
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	4b1a      	ldr	r3, [pc, #104]	; (8011288 <sail_alloc_variant+0x98>)
 801121e:	2243      	movs	r2, #67	; 0x43
 8011220:	4917      	ldr	r1, [pc, #92]	; (8011280 <sail_alloc_variant+0x90>)
 8011222:	2001      	movs	r0, #1
 8011224:	f7fd fffe 	bl	800f224 <sail_log>
 8011228:	2301      	movs	r3, #1
 801122a:	e021      	b.n	8011270 <sail_alloc_variant+0x80>

    void *ptr;
    SAIL_TRY(sail_malloc(sizeof(struct sail_variant), &ptr));
 801122c:	f107 0308 	add.w	r3, r7, #8
 8011230:	4619      	mov	r1, r3
 8011232:	200c      	movs	r0, #12
 8011234:	f7fe f8ee 	bl	800f414 <sail_malloc>
 8011238:	4603      	mov	r3, r0
 801123a:	81fb      	strh	r3, [r7, #14]
 801123c:	89fb      	ldrh	r3, [r7, #14]
 801123e:	2b00      	cmp	r3, #0
 8011240:	bf14      	ite	ne
 8011242:	2301      	movne	r3, #1
 8011244:	2300      	moveq	r3, #0
 8011246:	b2db      	uxtb	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <sail_alloc_variant+0x60>
 801124c:	89fb      	ldrh	r3, [r7, #14]
 801124e:	e00f      	b.n	8011270 <sail_alloc_variant+0x80>
    *variant = ptr;
 8011250:	68ba      	ldr	r2, [r7, #8]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	601a      	str	r2, [r3, #0]

    (*variant)->type  = SAIL_VARIANT_TYPE_INVALID;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	220d      	movs	r2, #13
 801125c:	701a      	strb	r2, [r3, #0]
    (*variant)->value = NULL;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2200      	movs	r2, #0
 8011264:	605a      	str	r2, [r3, #4]
    (*variant)->size  = 0;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2200      	movs	r2, #0
 801126c:	609a      	str	r2, [r3, #8]

    return SAIL_OK;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3710      	adds	r7, #16
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	0801a598 	.word	0x0801a598
 801127c:	0801a52c 	.word	0x0801a52c
 8011280:	0801a544 	.word	0x0801a544
 8011284:	0801a5a4 	.word	0x0801a5a4
 8011288:	0801a5a0 	.word	0x0801a5a0

0801128c <sail_destroy_variant>:

void sail_destroy_variant(struct sail_variant *variant) {
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]

    if (variant == NULL) {
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d008      	beq.n	80112ac <sail_destroy_variant+0x20>
        return;
    }

    sail_free(variant->value);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fe f940 	bl	800f524 <sail_free>
    sail_free(variant);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7fe f93d 	bl	800f524 <sail_free>
 80112aa:	e000      	b.n	80112ae <sail_destroy_variant+0x22>
        return;
 80112ac:	bf00      	nop
}
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <sail_copy_variant>:
    }

    return SAIL_OK;
}

sail_status_t sail_copy_variant(const struct sail_variant *source, struct sail_variant **target) {
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b086      	sub	sp, #24
 80112b8:	af02      	add	r7, sp, #8
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]

    SAIL_CHECK_PTR(source);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	bf0c      	ite	eq
 80112c4:	2301      	moveq	r3, #1
 80112c6:	2300      	movne	r3, #0
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d013      	beq.n	80112f6 <sail_copy_variant+0x42>
 80112ce:	4b25      	ldr	r3, [pc, #148]	; (8011364 <sail_copy_variant+0xb0>)
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	4b25      	ldr	r3, [pc, #148]	; (8011368 <sail_copy_variant+0xb4>)
 80112d4:	f240 1227 	movw	r2, #295	; 0x127
 80112d8:	4924      	ldr	r1, [pc, #144]	; (801136c <sail_copy_variant+0xb8>)
 80112da:	2001      	movs	r0, #1
 80112dc:	f7fd ffa2 	bl	800f224 <sail_log>
 80112e0:	4b23      	ldr	r3, [pc, #140]	; (8011370 <sail_copy_variant+0xbc>)
 80112e2:	9300      	str	r3, [sp, #0]
 80112e4:	4b23      	ldr	r3, [pc, #140]	; (8011374 <sail_copy_variant+0xc0>)
 80112e6:	f240 1227 	movw	r2, #295	; 0x127
 80112ea:	4920      	ldr	r1, [pc, #128]	; (801136c <sail_copy_variant+0xb8>)
 80112ec:	2001      	movs	r0, #1
 80112ee:	f7fd ff99 	bl	800f224 <sail_log>
 80112f2:	2301      	movs	r3, #1
 80112f4:	e031      	b.n	801135a <sail_copy_variant+0xa6>
    SAIL_CHECK_PTR(target);
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	bf0c      	ite	eq
 80112fc:	2301      	moveq	r3, #1
 80112fe:	2300      	movne	r3, #0
 8011300:	b2db      	uxtb	r3, r3
 8011302:	2b00      	cmp	r3, #0
 8011304:	d013      	beq.n	801132e <sail_copy_variant+0x7a>
 8011306:	4b1c      	ldr	r3, [pc, #112]	; (8011378 <sail_copy_variant+0xc4>)
 8011308:	9300      	str	r3, [sp, #0]
 801130a:	4b17      	ldr	r3, [pc, #92]	; (8011368 <sail_copy_variant+0xb4>)
 801130c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011310:	4916      	ldr	r1, [pc, #88]	; (801136c <sail_copy_variant+0xb8>)
 8011312:	2001      	movs	r0, #1
 8011314:	f7fd ff86 	bl	800f224 <sail_log>
 8011318:	4b15      	ldr	r3, [pc, #84]	; (8011370 <sail_copy_variant+0xbc>)
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	4b15      	ldr	r3, [pc, #84]	; (8011374 <sail_copy_variant+0xc0>)
 801131e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011322:	4912      	ldr	r1, [pc, #72]	; (801136c <sail_copy_variant+0xb8>)
 8011324:	2001      	movs	r0, #1
 8011326:	f7fd ff7d 	bl	800f224 <sail_log>
 801132a:	2301      	movs	r3, #1
 801132c:	e015      	b.n	801135a <sail_copy_variant+0xa6>

    SAIL_TRY(alloc_variant(source->type, source->value, source->size, target));
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	7818      	ldrb	r0, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6859      	ldr	r1, [r3, #4]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	689a      	ldr	r2, [r3, #8]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	f7ff fefc 	bl	8011138 <alloc_variant>
 8011340:	4603      	mov	r3, r0
 8011342:	81fb      	strh	r3, [r7, #14]
 8011344:	89fb      	ldrh	r3, [r7, #14]
 8011346:	2b00      	cmp	r3, #0
 8011348:	bf14      	ite	ne
 801134a:	2301      	movne	r3, #1
 801134c:	2300      	moveq	r3, #0
 801134e:	b2db      	uxtb	r3, r3
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <sail_copy_variant+0xa4>
 8011354:	89fb      	ldrh	r3, [r7, #14]
 8011356:	e000      	b.n	801135a <sail_copy_variant+0xa6>

    return SAIL_OK;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	0801a5d4 	.word	0x0801a5d4
 8011368:	0801a52c 	.word	0x0801a52c
 801136c:	0801a544 	.word	0x0801a544
 8011370:	0801a5a4 	.word	0x0801a5a4
 8011374:	0801a5a0 	.word	0x0801a5a0
 8011378:	0801a5dc 	.word	0x0801a5dc

0801137c <sail_destroy_variant_node_chain>:
                                                (linked_list_value_deallocator_t)&sail_destroy_variant));

    return SAIL_OK;
}

void sail_destroy_variant_node_chain(struct sail_variant_node *node) {
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]

    sail_private_destroy_linked_list_node_chain((struct linked_list_node *)node,
 8011384:	4903      	ldr	r1, [pc, #12]	; (8011394 <sail_destroy_variant_node_chain+0x18>)
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7fd fd0e 	bl	800eda8 <sail_private_destroy_linked_list_node_chain>
                                                (linked_list_value_deallocator_t)&sail_destroy_variant);
}
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	0801128d 	.word	0x0801128d

08011398 <sail_copy_variant_node_chain>:

sail_status_t sail_copy_variant_node_chain(const struct sail_variant_node *source, struct sail_variant_node **target) {
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]

    SAIL_TRY(sail_private_copy_linked_list_node_chain((const struct linked_list_node *)source,
 80113a2:	4b0b      	ldr	r3, [pc, #44]	; (80113d0 <sail_copy_variant_node_chain+0x38>)
 80113a4:	4a0b      	ldr	r2, [pc, #44]	; (80113d4 <sail_copy_variant_node_chain+0x3c>)
 80113a6:	6839      	ldr	r1, [r7, #0]
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7fd fd15 	bl	800edd8 <sail_private_copy_linked_list_node_chain>
 80113ae:	4603      	mov	r3, r0
 80113b0:	81fb      	strh	r3, [r7, #14]
 80113b2:	89fb      	ldrh	r3, [r7, #14]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	bf14      	ite	ne
 80113b8:	2301      	movne	r3, #1
 80113ba:	2300      	moveq	r3, #0
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <sail_copy_variant_node_chain+0x2e>
 80113c2:	89fb      	ldrh	r3, [r7, #14]
 80113c4:	e000      	b.n	80113c8 <sail_copy_variant_node_chain+0x30>
                                                      (struct linked_list_node **)target,
                                                      (linked_list_value_copier_t)sail_copy_variant,
                                                      (linked_list_value_deallocator_t)&sail_destroy_variant));

    return SAIL_OK;
 80113c6:	2300      	movs	r3, #0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	0801128d 	.word	0x0801128d
 80113d4:	080112b5 	.word	0x080112b5

080113d8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b096      	sub	sp, #88	; 0x58
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
 80113e4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3303      	adds	r3, #3
 80113ea:	f023 0303 	bic.w	r3, r3, #3
 80113ee:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113f0:	f3ef 8310 	mrs	r3, PRIMASK
 80113f4:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 80113f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80113f8:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80113fa:	b672      	cpsid	i
#endif
    return(int_posture);
 80113fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80113fe:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011400:	4b55      	ldr	r3, [pc, #340]	; (8011558 <_tx_byte_allocate+0x180>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8011406:	2300      	movs	r3, #0
 8011408:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801140e:	621a      	str	r2, [r3, #32]
 8011410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011412:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	f383 8810 	msr	PRIMASK, r3
}
 801141a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 801141c:	6879      	ldr	r1, [r7, #4]
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	f000 f9b2 	bl	8011788 <_tx_byte_pool_search>
 8011424:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011426:	f3ef 8310 	mrs	r3, PRIMASK
 801142a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801142e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011430:	b672      	cpsid	i
    return(int_posture);
 8011432:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011434:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8011436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011438:	2b00      	cmp	r3, #0
 801143a:	d002      	beq.n	8011442 <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 801143c:	2301      	movs	r3, #1
 801143e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011440:	e006      	b.n	8011450 <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6a1b      	ldr	r3, [r3, #32]
 8011446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011448:	429a      	cmp	r2, r3
 801144a:	d101      	bne.n	8011450 <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 801144c:	2301      	movs	r3, #1
 801144e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8011450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011452:	2b00      	cmp	r3, #0
 8011454:	d0d9      	beq.n	801140a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801145a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 801145c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801145e:	2b00      	cmp	r3, #0
 8011460:	d008      	beq.n	8011474 <_tx_byte_allocate+0x9c>
 8011462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011464:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011466:	6a3b      	ldr	r3, [r7, #32]
 8011468:	f383 8810 	msr	PRIMASK, r3
}
 801146c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801146e:	2300      	movs	r3, #0
 8011470:	653b      	str	r3, [r7, #80]	; 0x50
 8011472:	e06c      	b.n	801154e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d061      	beq.n	801153e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801147a:	4b38      	ldr	r3, [pc, #224]	; (801155c <_tx_byte_allocate+0x184>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d007      	beq.n	8011492 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8011482:	2310      	movs	r3, #16
 8011484:	653b      	str	r3, [r7, #80]	; 0x50
 8011486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011488:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	f383 8810 	msr	PRIMASK, r3
}
 8011490:	e05d      	b.n	801154e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8011492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011494:	4a32      	ldr	r2, [pc, #200]	; (8011560 <_tx_byte_allocate+0x188>)
 8011496:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8011498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801149a:	68fa      	ldr	r2, [r7, #12]
 801149c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 801149e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114a0:	68ba      	ldr	r2, [r7, #8]
 80114a2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80114a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80114aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80114b0:	1c5a      	adds	r2, r3, #1
 80114b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114bc:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c2:	1c5a      	adds	r2, r3, #1
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80114c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d109      	bne.n	80114e2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114d2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80114d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114d8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80114da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114de:	675a      	str	r2, [r3, #116]	; 0x74
 80114e0:	e011      	b.n	8011506 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80114e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80114ec:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80114ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114f2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80114f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114f8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80114fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114fe:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011504:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8011506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011508:	2209      	movs	r2, #9
 801150a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801150c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801150e:	2201      	movs	r2, #1
 8011510:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011518:	4b10      	ldr	r3, [pc, #64]	; (801155c <_tx_byte_allocate+0x184>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3301      	adds	r3, #1
 801151e:	4a0f      	ldr	r2, [pc, #60]	; (801155c <_tx_byte_allocate+0x184>)
 8011520:	6013      	str	r3, [r2, #0]
 8011522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011524:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	f383 8810 	msr	PRIMASK, r3
}
 801152c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801152e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011530:	f000 fdfa 	bl	8012128 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801153a:	653b      	str	r3, [r7, #80]	; 0x50
 801153c:	e007      	b.n	801154e <_tx_byte_allocate+0x176>
 801153e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011540:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	f383 8810 	msr	PRIMASK, r3
}
 8011548:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801154a:	2310      	movs	r3, #16
 801154c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 801154e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011550:	4618      	mov	r0, r3
 8011552:	3758      	adds	r7, #88	; 0x58
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	20003868 	.word	0x20003868
 801155c:	20003904 	.word	0x20003904
 8011560:	08011565 	.word	0x08011565

08011564 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b08e      	sub	sp, #56	; 0x38
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801156e:	f3ef 8310 	mrs	r3, PRIMASK
 8011572:	623b      	str	r3, [r7, #32]
    return(posture);
 8011574:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011576:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011578:	b672      	cpsid	i
    return(int_posture);
 801157a:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 801157c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011582:	4a33      	ldr	r2, [pc, #204]	; (8011650 <_tx_byte_pool_cleanup+0xec>)
 8011584:	4293      	cmp	r3, r2
 8011586:	d158      	bne.n	801163a <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	429a      	cmp	r2, r3
 8011592:	d152      	bne.n	801163a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011598:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	2b00      	cmp	r3, #0
 801159e:	d04c      	beq.n	801163a <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80115a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a2b      	ldr	r2, [pc, #172]	; (8011654 <_tx_byte_pool_cleanup+0xf0>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d147      	bne.n	801163a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80115aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d043      	beq.n	801163a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80115b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115bc:	1e5a      	subs	r2, r3, #1
 80115be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c0:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80115c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80115c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d103      	bne.n	80115d6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80115ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d0:	2200      	movs	r2, #0
 80115d2:	625a      	str	r2, [r3, #36]	; 0x24
 80115d4:	e013      	b.n	80115fe <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115da:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115e0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115e6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115ec:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80115ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d102      	bne.n	80115fe <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80115f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115fc:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011602:	2b09      	cmp	r3, #9
 8011604:	d119      	bne.n	801163a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2210      	movs	r2, #16
 801160a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801160e:	4b12      	ldr	r3, [pc, #72]	; (8011658 <_tx_byte_pool_cleanup+0xf4>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	3301      	adds	r3, #1
 8011614:	4a10      	ldr	r2, [pc, #64]	; (8011658 <_tx_byte_pool_cleanup+0xf4>)
 8011616:	6013      	str	r3, [r2, #0]
 8011618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801161a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	f383 8810 	msr	PRIMASK, r3
}
 8011622:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fc6b 	bl	8011f00 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801162a:	f3ef 8310 	mrs	r3, PRIMASK
 801162e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011630:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011632:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011634:	b672      	cpsid	i
    return(int_posture);
 8011636:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011638:	637b      	str	r3, [r7, #52]	; 0x34
 801163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801163c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f383 8810 	msr	PRIMASK, r3
}
 8011644:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011646:	bf00      	nop
 8011648:	3738      	adds	r7, #56	; 0x38
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	08011565 	.word	0x08011565
 8011654:	42595445 	.word	0x42595445
 8011658:	20003904 	.word	0x20003904

0801165c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b08e      	sub	sp, #56	; 0x38
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
 8011668:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801166a:	2234      	movs	r2, #52	; 0x34
 801166c:	2100      	movs	r1, #0
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	f001 ff76 	bl	8013560 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	f023 0303 	bic.w	r3, r3, #3
 801167a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	f1a3 0208 	sub.w	r2, r3, #8
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2202      	movs	r2, #2
 80116a8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80116ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	4413      	add	r3, r2
 80116b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80116b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b8:	3b04      	subs	r3, #4
 80116ba:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80116c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80116c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116c8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80116ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116cc:	3b04      	subs	r3, #4
 80116ce:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80116d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80116e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116e6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80116ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ee:	3304      	adds	r3, #4
 80116f0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80116f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80116f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f8:	4a1f      	ldr	r2, [pc, #124]	; (8011778 <_tx_byte_pool_create+0x11c>)
 80116fa:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2200      	movs	r2, #0
 8011700:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011702:	f3ef 8310 	mrs	r3, PRIMASK
 8011706:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011708:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801170a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801170c:	b672      	cpsid	i
    return(int_posture);
 801170e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8011710:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	4a19      	ldr	r2, [pc, #100]	; (801177c <_tx_byte_pool_create+0x120>)
 8011716:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8011718:	4b19      	ldr	r3, [pc, #100]	; (8011780 <_tx_byte_pool_create+0x124>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d109      	bne.n	8011734 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8011720:	4a18      	ldr	r2, [pc, #96]	; (8011784 <_tx_byte_pool_create+0x128>)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	631a      	str	r2, [r3, #48]	; 0x30
 8011732:	e011      	b.n	8011758 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011734:	4b13      	ldr	r3, [pc, #76]	; (8011784 <_tx_byte_pool_create+0x128>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801173e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8011740:	6a3b      	ldr	r3, [r7, #32]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	69fa      	ldr	r2, [r7, #28]
 8011750:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	6a3a      	ldr	r2, [r7, #32]
 8011756:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8011758:	4b09      	ldr	r3, [pc, #36]	; (8011780 <_tx_byte_pool_create+0x124>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	3301      	adds	r3, #1
 801175e:	4a08      	ldr	r2, [pc, #32]	; (8011780 <_tx_byte_pool_create+0x124>)
 8011760:	6013      	str	r3, [r2, #0]
 8011762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011764:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	f383 8810 	msr	PRIMASK, r3
}
 801176c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801176e:	2300      	movs	r3, #0
}
 8011770:	4618      	mov	r0, r3
 8011772:	3738      	adds	r7, #56	; 0x38
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	ffffeeee 	.word	0xffffeeee
 801177c:	42595445 	.word	0x42595445
 8011780:	2000385c 	.word	0x2000385c
 8011784:	20003858 	.word	0x20003858

08011788 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8011788:	b480      	push	{r7}
 801178a:	b097      	sub	sp, #92	; 0x5c
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8011792:	2300      	movs	r3, #0
 8011794:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011796:	f3ef 8310 	mrs	r3, PRIMASK
 801179a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801179e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117a0:	b672      	cpsid	i
    return(int_posture);
 80117a2:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80117a4:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	689a      	ldr	r2, [r3, #8]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	3b02      	subs	r3, #2
 80117b0:	00db      	lsls	r3, r3, #3
 80117b2:	4413      	add	r3, r2
 80117b4:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d308      	bcc.n	80117d0 <_tx_byte_pool_search+0x48>
 80117be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	f383 8810 	msr	PRIMASK, r3
}
 80117c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80117ca:	2300      	movs	r3, #0
 80117cc:	653b      	str	r3, [r7, #80]	; 0x50
 80117ce:	e0dd      	b.n	801198c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80117d0:	4b72      	ldr	r3, [pc, #456]	; (801199c <_tx_byte_pool_search+0x214>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117da:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	695b      	ldr	r3, [r3, #20]
 80117e0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	3301      	adds	r3, #1
 80117e8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80117ea:	2300      	movs	r3, #0
 80117ec:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80117ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f0:	3304      	adds	r3, #4
 80117f2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80117f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80117f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4a68      	ldr	r2, [pc, #416]	; (80119a0 <_tx_byte_pool_search+0x218>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d143      	bne.n	801188a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8011802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011804:	2b00      	cmp	r3, #0
 8011806:	d104      	bne.n	8011812 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801180c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801180e:	2301      	movs	r3, #1
 8011810:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011814:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8011816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801181c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801181e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011826:	3b08      	subs	r3, #8
 8011828:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801182a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	429a      	cmp	r2, r3
 8011830:	d257      	bcs.n	80118e2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8011832:	2300      	movs	r3, #0
 8011834:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	3304      	adds	r3, #4
 801183a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a56      	ldr	r2, [pc, #344]	; (80119a0 <_tx_byte_pool_search+0x218>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d113      	bne.n	8011872 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011854:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	1e5a      	subs	r2, r3, #1
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	695b      	ldr	r3, [r3, #20]
 8011864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011866:	429a      	cmp	r2, r3
 8011868:	d114      	bne.n	8011894 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801186e:	615a      	str	r2, [r3, #20]
 8011870:	e010      	b.n	8011894 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011874:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8011876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801187c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801187e:	2b00      	cmp	r3, #0
 8011880:	d008      	beq.n	8011894 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8011882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011884:	3b01      	subs	r3, #1
 8011886:	64bb      	str	r3, [r7, #72]	; 0x48
 8011888:	e004      	b.n	8011894 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801188a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801188c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8011894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011896:	2b00      	cmp	r3, #0
 8011898:	d002      	beq.n	80118a0 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801189a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801189c:	3b01      	subs	r3, #1
 801189e:	64bb      	str	r3, [r7, #72]	; 0x48
 80118a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	f383 8810 	msr	PRIMASK, r3
}
 80118aa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118ac:	f3ef 8310 	mrs	r3, PRIMASK
 80118b0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80118b2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80118b4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80118b6:	b672      	cpsid	i
    return(int_posture);
 80118b8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80118ba:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6a1b      	ldr	r3, [r3, #32]
 80118c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d009      	beq.n	80118da <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	695b      	ldr	r3, [r3, #20]
 80118ca:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	3301      	adds	r3, #1
 80118d2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118d8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80118da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d186      	bne.n	80117ee <_tx_byte_pool_search+0x66>
 80118e0:	e000      	b.n	80118e4 <_tx_byte_pool_search+0x15c>
                    break;
 80118e2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80118e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d048      	beq.n	801197c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80118ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	2b13      	cmp	r3, #19
 80118f2:	d91e      	bls.n	8011932 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	3308      	adds	r3, #8
 80118f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80118fa:	4413      	add	r3, r2
 80118fc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80118fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011900:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011904:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8011906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	3304      	adds	r3, #4
 8011912:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8011918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801191a:	4a21      	ldr	r2, [pc, #132]	; (80119a0 <_tx_byte_pool_search+0x218>)
 801191c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	1c5a      	adds	r2, r3, #1
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8011928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801192a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801192c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011934:	3304      	adds	r3, #4
 8011936:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8011938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	689a      	ldr	r2, [r3, #8]
 8011946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	f1a3 0208 	sub.w	r2, r3, #8
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	695b      	ldr	r3, [r3, #20]
 8011956:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011958:	429a      	cmp	r2, r3
 801195a:	d105      	bne.n	8011968 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801195c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801195e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8011960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	615a      	str	r2, [r3, #20]
 8011968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801196a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f383 8810 	msr	PRIMASK, r3
}
 8011972:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8011974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011976:	3308      	adds	r3, #8
 8011978:	653b      	str	r3, [r7, #80]	; 0x50
 801197a:	e007      	b.n	801198c <_tx_byte_pool_search+0x204>
 801197c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801197e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	f383 8810 	msr	PRIMASK, r3
}
 8011986:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8011988:	2300      	movs	r3, #0
 801198a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801198e:	4618      	mov	r0, r3
 8011990:	375c      	adds	r7, #92	; 0x5c
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	20003868 	.word	0x20003868
 80119a0:	ffffeeee 	.word	0xffffeeee

080119a4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80119a8:	f000 f9c0 	bl	8011d2c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80119ac:	f000 fe60 	bl	8012670 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80119b0:	4b12      	ldr	r3, [pc, #72]	; (80119fc <_tx_initialize_high_level+0x58>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	4b12      	ldr	r3, [pc, #72]	; (8011a00 <_tx_initialize_high_level+0x5c>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80119bc:	4b11      	ldr	r3, [pc, #68]	; (8011a04 <_tx_initialize_high_level+0x60>)
 80119be:	2200      	movs	r2, #0
 80119c0:	601a      	str	r2, [r3, #0]
 80119c2:	4b11      	ldr	r3, [pc, #68]	; (8011a08 <_tx_initialize_high_level+0x64>)
 80119c4:	2200      	movs	r2, #0
 80119c6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80119c8:	4b10      	ldr	r3, [pc, #64]	; (8011a0c <_tx_initialize_high_level+0x68>)
 80119ca:	2200      	movs	r2, #0
 80119cc:	601a      	str	r2, [r3, #0]
 80119ce:	4b10      	ldr	r3, [pc, #64]	; (8011a10 <_tx_initialize_high_level+0x6c>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80119d4:	4b0f      	ldr	r3, [pc, #60]	; (8011a14 <_tx_initialize_high_level+0x70>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	601a      	str	r2, [r3, #0]
 80119da:	4b0f      	ldr	r3, [pc, #60]	; (8011a18 <_tx_initialize_high_level+0x74>)
 80119dc:	2200      	movs	r2, #0
 80119de:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80119e0:	4b0e      	ldr	r3, [pc, #56]	; (8011a1c <_tx_initialize_high_level+0x78>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	4b0e      	ldr	r3, [pc, #56]	; (8011a20 <_tx_initialize_high_level+0x7c>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80119ec:	4b0d      	ldr	r3, [pc, #52]	; (8011a24 <_tx_initialize_high_level+0x80>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	601a      	str	r2, [r3, #0]
 80119f2:	4b0d      	ldr	r3, [pc, #52]	; (8011a28 <_tx_initialize_high_level+0x84>)
 80119f4:	2200      	movs	r2, #0
 80119f6:	601a      	str	r2, [r3, #0]
#endif
}
 80119f8:	bf00      	nop
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	20003830 	.word	0x20003830
 8011a00:	20003834 	.word	0x20003834
 8011a04:	20003838 	.word	0x20003838
 8011a08:	2000383c 	.word	0x2000383c
 8011a0c:	20003840 	.word	0x20003840
 8011a10:	20003844 	.word	0x20003844
 8011a14:	20003850 	.word	0x20003850
 8011a18:	20003854 	.word	0x20003854
 8011a1c:	20003858 	.word	0x20003858
 8011a20:	2000385c 	.word	0x2000385c
 8011a24:	20003848 	.word	0x20003848
 8011a28:	2000384c 	.word	0x2000384c

08011a2c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8011a30:	4b10      	ldr	r3, [pc, #64]	; (8011a74 <_tx_initialize_kernel_enter+0x48>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8011a38:	d00c      	beq.n	8011a54 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011a3a:	4b0e      	ldr	r3, [pc, #56]	; (8011a74 <_tx_initialize_kernel_enter+0x48>)
 8011a3c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011a40:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8011a42:	f7ee fbdd 	bl	8000200 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 8011a46:	f7ff ffad 	bl	80119a4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8011a4a:	4b0b      	ldr	r3, [pc, #44]	; (8011a78 <_tx_initialize_kernel_enter+0x4c>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	4a09      	ldr	r2, [pc, #36]	; (8011a78 <_tx_initialize_kernel_enter+0x4c>)
 8011a52:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011a54:	4b07      	ldr	r3, [pc, #28]	; (8011a74 <_tx_initialize_kernel_enter+0x48>)
 8011a56:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011a5a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8011a5c:	4b07      	ldr	r3, [pc, #28]	; (8011a7c <_tx_initialize_kernel_enter+0x50>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7ef fbd1 	bl	8001208 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8011a66:	4b03      	ldr	r3, [pc, #12]	; (8011a74 <_tx_initialize_kernel_enter+0x48>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8011a6c:	f7ee fc08 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011a70:	bf00      	nop
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	20000084 	.word	0x20000084
 8011a78:	20003904 	.word	0x20003904
 8011a7c:	20003860 	.word	0x20003860

08011a80 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b08c      	sub	sp, #48	; 0x30
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a88:	f3ef 8310 	mrs	r3, PRIMASK
 8011a8c:	617b      	str	r3, [r7, #20]
    return(posture);
 8011a8e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011a90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a92:	b672      	cpsid	i
    return(int_posture);
 8011a94:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8011a96:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8011a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d114      	bne.n	8011ace <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	1c5a      	adds	r2, r3, #1
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	69db      	ldr	r3, [r3, #28]
 8011ab2:	61bb      	str	r3, [r7, #24]
 8011ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f383 8810 	msr	PRIMASK, r3
}
 8011abe:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d040      	beq.n	8011b48 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	4798      	blx	r3
 8011acc:	e03c      	b.n	8011b48 <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8011ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d103      	bne.n	8011ae8 <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	60da      	str	r2, [r3, #12]
 8011ae6:	e00e      	b.n	8011b06 <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aec:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a3a      	ldr	r2, [r7, #32]
 8011af2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011af8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011afa:	6a3b      	ldr	r3, [r7, #32]
 8011afc:	69fa      	ldr	r2, [r7, #28]
 8011afe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	6a3a      	ldr	r2, [r7, #32]
 8011b04:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b0a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	2200      	movs	r2, #0
 8011b10:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	69db      	ldr	r3, [r3, #28]
 8011b16:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011b20:	4b0c      	ldr	r3, [pc, #48]	; (8011b54 <_tx_semaphore_put+0xd4>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	3301      	adds	r3, #1
 8011b26:	4a0b      	ldr	r2, [pc, #44]	; (8011b54 <_tx_semaphore_put+0xd4>)
 8011b28:	6013      	str	r3, [r2, #0]
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	f383 8810 	msr	PRIMASK, r3
}
 8011b34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b38:	f000 f9e2 	bl	8011f00 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d002      	beq.n	8011b48 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3730      	adds	r7, #48	; 0x30
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	20003904 	.word	0x20003904

08011b58 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b092      	sub	sp, #72	; 0x48
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	60b9      	str	r1, [r7, #8]
 8011b62:	607a      	str	r2, [r7, #4]
 8011b64:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8011b66:	2300      	movs	r3, #0
 8011b68:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011b6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b6c:	21ef      	movs	r1, #239	; 0xef
 8011b6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011b70:	f001 fcf6 	bl	8013560 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011b74:	22b4      	movs	r2, #180	; 0xb4
 8011b76:	2100      	movs	r1, #0
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	f001 fcf1 	bl	8013560 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	68ba      	ldr	r2, [r7, #8]
 8011b82:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b94:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b9a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011bae:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011bb4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2220      	movs	r2, #32
 8011bba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bc4:	3b01      	subs	r3, #1
 8011bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bc8:	4413      	add	r3, r2
 8011bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bd0:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011bdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2203      	movs	r2, #3
 8011be4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	4a48      	ldr	r2, [pc, #288]	; (8011d0c <_tx_thread_create+0x1b4>)
 8011bea:	655a      	str	r2, [r3, #84]	; 0x54
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011bf2:	4947      	ldr	r1, [pc, #284]	; (8011d10 <_tx_thread_create+0x1b8>)
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f7ee fba3 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8011bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011c02:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c04:	b672      	cpsid	i
    return(int_posture);
 8011c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011c08:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	4a41      	ldr	r2, [pc, #260]	; (8011d14 <_tx_thread_create+0x1bc>)
 8011c0e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011c10:	4b41      	ldr	r3, [pc, #260]	; (8011d18 <_tx_thread_create+0x1c0>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d10b      	bne.n	8011c30 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011c18:	4a40      	ldr	r2, [pc, #256]	; (8011d1c <_tx_thread_create+0x1c4>)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	68fa      	ldr	r2, [r7, #12]
 8011c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8011c2e:	e016      	b.n	8011c5e <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011c30:	4b3a      	ldr	r3, [pc, #232]	; (8011d1c <_tx_thread_create+0x1c4>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c3c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8011c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011c5e:	4b2e      	ldr	r3, [pc, #184]	; (8011d18 <_tx_thread_create+0x1c0>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	3301      	adds	r3, #1
 8011c64:	4a2c      	ldr	r2, [pc, #176]	; (8011d18 <_tx_thread_create+0x1c0>)
 8011c66:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011c68:	4b2d      	ldr	r3, [pc, #180]	; (8011d20 <_tx_thread_create+0x1c8>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	4a2c      	ldr	r2, [pc, #176]	; (8011d20 <_tx_thread_create+0x1c8>)
 8011c70:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8011c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d129      	bne.n	8011ccc <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c78:	f3ef 8305 	mrs	r3, IPSR
 8011c7c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8011c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011c80:	4b28      	ldr	r3, [pc, #160]	; (8011d24 <_tx_thread_create+0x1cc>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	4313      	orrs	r3, r2
 8011c86:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011c8a:	d30d      	bcc.n	8011ca8 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011c8c:	4b26      	ldr	r3, [pc, #152]	; (8011d28 <_tx_thread_create+0x1d0>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d009      	beq.n	8011cac <_tx_thread_create+0x154>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c9c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8011ca6:	e001      	b.n	8011cac <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	647b      	str	r3, [r7, #68]	; 0x44
 8011cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cb0:	6a3b      	ldr	r3, [r7, #32]
 8011cb2:	f383 8810 	msr	PRIMASK, r3
}
 8011cb6:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f000 f921 	bl	8011f00 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d01e      	beq.n	8011d02 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8011cca:	e01a      	b.n	8011d02 <_tx_thread_create+0x1aa>
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f383 8810 	msr	PRIMASK, r3
}
 8011cd6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8011cdc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011cde:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011ce0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ce2:	b672      	cpsid	i
    return(int_posture);
 8011ce4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8011ce6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8011ce8:	4b0d      	ldr	r3, [pc, #52]	; (8011d20 <_tx_thread_create+0x1c8>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	3b01      	subs	r3, #1
 8011cee:	4a0c      	ldr	r2, [pc, #48]	; (8011d20 <_tx_thread_create+0x1c8>)
 8011cf0:	6013      	str	r3, [r2, #0]
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	f383 8810 	msr	PRIMASK, r3
}
 8011cfc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011cfe:	f000 f8c5 	bl	8011e8c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8011d02:	2300      	movs	r3, #0
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3748      	adds	r7, #72	; 0x48
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	080124ed 	.word	0x080124ed
 8011d10:	08011dad 	.word	0x08011dad
 8011d14:	54485244 	.word	0x54485244
 8011d18:	20003874 	.word	0x20003874
 8011d1c:	20003870 	.word	0x20003870
 8011d20:	20003904 	.word	0x20003904
 8011d24:	20000084 	.word	0x20000084
 8011d28:	2000386c 	.word	0x2000386c

08011d2c <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8011d30:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <_tx_thread_initialize+0x54>)
 8011d32:	2200      	movs	r2, #0
 8011d34:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8011d36:	4b13      	ldr	r3, [pc, #76]	; (8011d84 <_tx_thread_initialize+0x58>)
 8011d38:	2200      	movs	r2, #0
 8011d3a:	601a      	str	r2, [r3, #0]
 8011d3c:	4b12      	ldr	r3, [pc, #72]	; (8011d88 <_tx_thread_initialize+0x5c>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	601a      	str	r2, [r3, #0]
 8011d42:	4b12      	ldr	r3, [pc, #72]	; (8011d8c <_tx_thread_initialize+0x60>)
 8011d44:	2200      	movs	r2, #0
 8011d46:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011d48:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <_tx_thread_initialize+0x64>)
 8011d4a:	2220      	movs	r2, #32
 8011d4c:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8011d4e:	2280      	movs	r2, #128	; 0x80
 8011d50:	2100      	movs	r1, #0
 8011d52:	4810      	ldr	r0, [pc, #64]	; (8011d94 <_tx_thread_initialize+0x68>)
 8011d54:	f001 fc04 	bl	8013560 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8011d58:	4b0f      	ldr	r3, [pc, #60]	; (8011d98 <_tx_thread_initialize+0x6c>)
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011d5e:	4b0f      	ldr	r3, [pc, #60]	; (8011d9c <_tx_thread_initialize+0x70>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8011d64:	4b0e      	ldr	r3, [pc, #56]	; (8011da0 <_tx_thread_initialize+0x74>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8011d6a:	4b0e      	ldr	r3, [pc, #56]	; (8011da4 <_tx_thread_initialize+0x78>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 8011d70:	4b0d      	ldr	r3, [pc, #52]	; (8011da8 <_tx_thread_initialize+0x7c>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 8011d78:	4a0b      	ldr	r2, [pc, #44]	; (8011da8 <_tx_thread_initialize+0x7c>)
 8011d7a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011d7c:	bf00      	nop
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	20003868 	.word	0x20003868
 8011d84:	2000386c 	.word	0x2000386c
 8011d88:	20003878 	.word	0x20003878
 8011d8c:	2000387c 	.word	0x2000387c
 8011d90:	20003880 	.word	0x20003880
 8011d94:	20003884 	.word	0x20003884
 8011d98:	20003870 	.word	0x20003870
 8011d9c:	20003874 	.word	0x20003874
 8011da0:	20003904 	.word	0x20003904
 8011da4:	20003908 	.word	0x20003908
 8011da8:	2000390c 	.word	0x2000390c

08011dac <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b08c      	sub	sp, #48	; 0x30
 8011db0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011db2:	4b33      	ldr	r3, [pc, #204]	; (8011e80 <_tx_thread_shell_entry+0xd4>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011db8:	f3ef 8310 	mrs	r3, PRIMASK
 8011dbc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011dbe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011dc0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011dc2:	b672      	cpsid	i
    return(int_posture);
 8011dc4:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 8011dc6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8011dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011dce:	627b      	str	r3, [r7, #36]	; 0x24
 8011dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	f383 8810 	msr	PRIMASK, r3
}
 8011dda:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	2100      	movs	r1, #0
 8011de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011de8:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8011dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011df2:	4610      	mov	r0, r2
 8011df4:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8011df6:	4b23      	ldr	r3, [pc, #140]	; (8011e84 <_tx_thread_shell_entry+0xd8>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d003      	beq.n	8011e06 <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011dfe:	4b21      	ldr	r3, [pc, #132]	; (8011e84 <_tx_thread_shell_entry+0xd8>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e04:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e06:	f3ef 8310 	mrs	r3, PRIMASK
 8011e0a:	607b      	str	r3, [r7, #4]
    return(posture);
 8011e0c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011e0e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e10:	b672      	cpsid	i
    return(int_posture);
 8011e12:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8011e14:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8011e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011e1c:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e20:	2201      	movs	r2, #1
 8011e22:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	2201      	movs	r2, #1
 8011e28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011e30:	4b15      	ldr	r3, [pc, #84]	; (8011e88 <_tx_thread_shell_entry+0xdc>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3301      	adds	r3, #1
 8011e36:	4a14      	ldr	r2, [pc, #80]	; (8011e88 <_tx_thread_shell_entry+0xdc>)
 8011e38:	6013      	str	r3, [r2, #0]
 8011e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	f383 8810 	msr	PRIMASK, r3
}
 8011e44:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8011e46:	f3ef 8314 	mrs	r3, CONTROL
 8011e4a:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8011e4c:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8011e4e:	623b      	str	r3, [r7, #32]
 8011e50:	6a3b      	ldr	r3, [r7, #32]
 8011e52:	f023 0304 	bic.w	r3, r3, #4
 8011e56:	623b      	str	r3, [r7, #32]
 8011e58:	6a3b      	ldr	r3, [r7, #32]
 8011e5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	f383 8814 	msr	CONTROL, r3
}
 8011e62:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d003      	beq.n	8011e72 <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	2101      	movs	r1, #1
 8011e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e70:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8011e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e74:	f000 f958 	bl	8012128 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011e78:	bf00      	nop
 8011e7a:	3730      	adds	r7, #48	; 0x30
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	20003868 	.word	0x20003868
 8011e84:	20003908 	.word	0x20003908
 8011e88:	20003904 	.word	0x20003904

08011e8c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b089      	sub	sp, #36	; 0x24
 8011e90:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011e92:	4b17      	ldr	r3, [pc, #92]	; (8011ef0 <_tx_thread_system_preempt_check+0x64>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d121      	bne.n	8011ee2 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011e9e:	4b15      	ldr	r3, [pc, #84]	; (8011ef4 <_tx_thread_system_preempt_check+0x68>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8011ea4:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <_tx_thread_system_preempt_check+0x6c>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011eaa:	69ba      	ldr	r2, [r7, #24]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d017      	beq.n	8011ee2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011eb2:	4b12      	ldr	r3, [pc, #72]	; (8011efc <_tx_thread_system_preempt_check+0x70>)
 8011eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011eba:	f3ef 8305 	mrs	r3, IPSR
 8011ebe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011ec0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d10c      	bne.n	8011ee0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8011eca:	60fb      	str	r3, [r7, #12]
    return(posture);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8011ece:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011ed0:	b662      	cpsie	i
}
 8011ed2:	bf00      	nop
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f383 8810 	msr	PRIMASK, r3
}
 8011ede:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8011ee0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8011ee2:	bf00      	nop
 8011ee4:	3724      	adds	r7, #36	; 0x24
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	20003904 	.word	0x20003904
 8011ef4:	20003868 	.word	0x20003868
 8011ef8:	2000386c 	.word	0x2000386c
 8011efc:	e000ed04 	.word	0xe000ed04

08011f00 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b096      	sub	sp, #88	; 0x58
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f08:	f3ef 8310 	mrs	r3, PRIMASK
 8011f0c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011f10:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f12:	b672      	cpsid	i
    return(int_posture);
 8011f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011f16:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d005      	beq.n	8011f2c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	334c      	adds	r3, #76	; 0x4c
 8011f24:	4618      	mov	r0, r3
 8011f26:	f000 fc81 	bl	801282c <_tx_timer_system_deactivate>
 8011f2a:	e002      	b.n	8011f32 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011f32:	4b75      	ldr	r3, [pc, #468]	; (8012108 <_tx_thread_system_resume+0x208>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3b01      	subs	r3, #1
 8011f38:	4a73      	ldr	r2, [pc, #460]	; (8012108 <_tx_thread_system_resume+0x208>)
 8011f3a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f040 8096 	bne.w	8012072 <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f000 80aa 	beq.w	80120a4 <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f040 8085 	bne.w	8012064 <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f64:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011f66:	4a69      	ldr	r2, [pc, #420]	; (801210c <_tx_thread_system_resume+0x20c>)
 8011f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8011f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d166      	bne.n	8012044 <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011f76:	4965      	ldr	r1, [pc, #404]	; (801210c <_tx_thread_system_resume+0x20c>)
 8011f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f90:	fa02 f303 	lsl.w	r3, r2, r3
 8011f94:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011f96:	4b5e      	ldr	r3, [pc, #376]	; (8012110 <_tx_thread_system_resume+0x210>)
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	4a5c      	ldr	r2, [pc, #368]	; (8012110 <_tx_thread_system_resume+0x210>)
 8011fa0:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8011fa2:	4b5c      	ldr	r3, [pc, #368]	; (8012114 <_tx_thread_system_resume+0x214>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d27b      	bcs.n	80120a4 <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011fac:	4a59      	ldr	r2, [pc, #356]	; (8012114 <_tx_thread_system_resume+0x214>)
 8011fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb0:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8011fb2:	4b59      	ldr	r3, [pc, #356]	; (8012118 <_tx_thread_system_resume+0x218>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8011fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d103      	bne.n	8011fc6 <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011fbe:	4a56      	ldr	r2, [pc, #344]	; (8012118 <_tx_thread_system_resume+0x218>)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6013      	str	r3, [r2, #0]
 8011fc4:	e06e      	b.n	80120a4 <_tx_thread_system_resume+0x1a4>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8011fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d269      	bcs.n	80120a4 <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8011fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d00b      	beq.n	8011ff4 <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8011fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe6:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8011fe8:	4b4c      	ldr	r3, [pc, #304]	; (801211c <_tx_thread_system_resume+0x21c>)
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	4a4a      	ldr	r2, [pc, #296]	; (801211c <_tx_thread_system_resume+0x21c>)
 8011ff2:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8011ff4:	4a48      	ldr	r2, [pc, #288]	; (8012118 <_tx_thread_system_resume+0x218>)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6013      	str	r3, [r2, #0]
 8011ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012000:	f383 8810 	msr	PRIMASK, r3
}
 8012004:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012006:	4b40      	ldr	r3, [pc, #256]	; (8012108 <_tx_thread_system_resume+0x208>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801200c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801200e:	2b00      	cmp	r3, #0
 8012010:	d174      	bne.n	80120fc <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012012:	4b43      	ldr	r3, [pc, #268]	; (8012120 <_tx_thread_system_resume+0x220>)
 8012014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012018:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801201a:	f3ef 8305 	mrs	r3, IPSR
 801201e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8012020:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8012022:	2b00      	cmp	r3, #0
 8012024:	d10c      	bne.n	8012040 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012026:	f3ef 8310 	mrs	r3, PRIMASK
 801202a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 801202e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012030:	b662      	cpsie	i
}
 8012032:	bf00      	nop
 8012034:	6a3b      	ldr	r3, [r7, #32]
 8012036:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	f383 8810 	msr	PRIMASK, r3
}
 801203e:	bf00      	nop
}
 8012040:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8012042:	e05b      	b.n	80120fc <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8012044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012048:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801204a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8012050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801205a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012060:	621a      	str	r2, [r3, #32]
 8012062:	e01f      	b.n	80120a4 <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2203      	movs	r2, #3
 801206e:	631a      	str	r2, [r3, #48]	; 0x30
 8012070:	e018      	b.n	80120a4 <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012076:	2b01      	cmp	r3, #1
 8012078:	d014      	beq.n	80120a4 <_tx_thread_system_resume+0x1a4>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801207e:	2b02      	cmp	r3, #2
 8012080:	d010      	beq.n	80120a4 <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012086:	2b00      	cmp	r3, #0
 8012088:	d106      	bne.n	8012098 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2200      	movs	r2, #0
 801208e:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2200      	movs	r2, #0
 8012094:	631a      	str	r2, [r3, #48]	; 0x30
 8012096:	e005      	b.n	80120a4 <_tx_thread_system_resume+0x1a4>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2203      	movs	r2, #3
 80120a2:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80120a4:	4b1f      	ldr	r3, [pc, #124]	; (8012124 <_tx_thread_system_resume+0x224>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80120aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	f383 8810 	msr	PRIMASK, r3
}
 80120b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80120b6:	4b18      	ldr	r3, [pc, #96]	; (8012118 <_tx_thread_system_resume+0x218>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120bc:	429a      	cmp	r2, r3
 80120be:	d020      	beq.n	8012102 <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80120c0:	4b11      	ldr	r3, [pc, #68]	; (8012108 <_tx_thread_system_resume+0x208>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80120c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d11a      	bne.n	8012102 <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80120cc:	4b14      	ldr	r3, [pc, #80]	; (8012120 <_tx_thread_system_resume+0x220>)
 80120ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120d2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80120d4:	f3ef 8305 	mrs	r3, IPSR
 80120d8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80120da:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10f      	bne.n	8012100 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120e0:	f3ef 8310 	mrs	r3, PRIMASK
 80120e4:	613b      	str	r3, [r7, #16]
    return(posture);
 80120e6:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80120e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80120ea:	b662      	cpsie	i
}
 80120ec:	bf00      	nop
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	f383 8810 	msr	PRIMASK, r3
}
 80120f8:	bf00      	nop
}
 80120fa:	e001      	b.n	8012100 <_tx_thread_system_resume+0x200>
                                return;
 80120fc:	bf00      	nop
 80120fe:	e000      	b.n	8012102 <_tx_thread_system_resume+0x202>
 8012100:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012102:	3758      	adds	r7, #88	; 0x58
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	20003904 	.word	0x20003904
 801210c:	20003884 	.word	0x20003884
 8012110:	20003878 	.word	0x20003878
 8012114:	20003880 	.word	0x20003880
 8012118:	2000386c 	.word	0x2000386c
 801211c:	2000387c 	.word	0x2000387c
 8012120:	e000ed04 	.word	0xe000ed04
 8012124:	20003868 	.word	0x20003868

08012128 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b0a0      	sub	sp, #128	; 0x80
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012130:	4b5a      	ldr	r3, [pc, #360]	; (801229c <_tx_thread_system_suspend+0x174>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012136:	f3ef 8310 	mrs	r3, PRIMASK
 801213a:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 801213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 801213e:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8012140:	b672      	cpsid	i
    return(int_posture);
 8012142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012144:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801214a:	429a      	cmp	r2, r3
 801214c:	d112      	bne.n	8012174 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012152:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8012154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012156:	2b00      	cmp	r3, #0
 8012158:	d008      	beq.n	801216c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801215a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801215c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012160:	d004      	beq.n	801216c <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	334c      	adds	r3, #76	; 0x4c
 8012166:	4618      	mov	r0, r3
 8012168:	f000 fafe 	bl	8012768 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	69db      	ldr	r3, [r3, #28]
 8012170:	4a4b      	ldr	r2, [pc, #300]	; (80122a0 <_tx_thread_system_suspend+0x178>)
 8012172:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012174:	4b4b      	ldr	r3, [pc, #300]	; (80122a4 <_tx_thread_system_suspend+0x17c>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	3b01      	subs	r3, #1
 801217a:	4a4a      	ldr	r2, [pc, #296]	; (80122a4 <_tx_thread_system_suspend+0x17c>)
 801217c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012182:	2b01      	cmp	r3, #1
 8012184:	f040 8122 	bne.w	80123cc <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012192:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6a1b      	ldr	r3, [r3, #32]
 8012198:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801219a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d027      	beq.n	80121f2 <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a6:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80121a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80121ac:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80121ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80121b2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80121b4:	4a3c      	ldr	r2, [pc, #240]	; (80122a8 <_tx_thread_system_suspend+0x180>)
 80121b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	429a      	cmp	r2, r3
 80121c0:	f040 808b 	bne.w	80122da <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80121c4:	4938      	ldr	r1, [pc, #224]	; (80122a8 <_tx_thread_system_suspend+0x180>)
 80121c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80121ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80121ce:	4b37      	ldr	r3, [pc, #220]	; (80122ac <_tx_thread_system_suspend+0x184>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f000 8081 	beq.w	80122da <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80121d8:	2201      	movs	r2, #1
 80121da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121dc:	fa02 f303 	lsl.w	r3, r2, r3
 80121e0:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80121e2:	4b32      	ldr	r3, [pc, #200]	; (80122ac <_tx_thread_system_suspend+0x184>)
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80121e8:	43db      	mvns	r3, r3
 80121ea:	4013      	ands	r3, r2
 80121ec:	4a2f      	ldr	r2, [pc, #188]	; (80122ac <_tx_thread_system_suspend+0x184>)
 80121ee:	6013      	str	r3, [r2, #0]
 80121f0:	e073      	b.n	80122da <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80121f2:	4a2d      	ldr	r2, [pc, #180]	; (80122a8 <_tx_thread_system_suspend+0x180>)
 80121f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121f6:	2100      	movs	r1, #0
 80121f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80121fc:	2201      	movs	r2, #1
 80121fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012200:	fa02 f303 	lsl.w	r3, r2, r3
 8012204:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8012206:	4b2a      	ldr	r3, [pc, #168]	; (80122b0 <_tx_thread_system_suspend+0x188>)
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801220c:	43db      	mvns	r3, r3
 801220e:	4013      	ands	r3, r2
 8012210:	4a27      	ldr	r2, [pc, #156]	; (80122b0 <_tx_thread_system_suspend+0x188>)
 8012212:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8012214:	4b25      	ldr	r3, [pc, #148]	; (80122ac <_tx_thread_system_suspend+0x184>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00b      	beq.n	8012234 <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 801221c:	2201      	movs	r2, #1
 801221e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012220:	fa02 f303 	lsl.w	r3, r2, r3
 8012224:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8012226:	4b21      	ldr	r3, [pc, #132]	; (80122ac <_tx_thread_system_suspend+0x184>)
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801222c:	43db      	mvns	r3, r3
 801222e:	4013      	ands	r3, r2
 8012230:	4a1e      	ldr	r2, [pc, #120]	; (80122ac <_tx_thread_system_suspend+0x184>)
 8012232:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8012234:	2300      	movs	r3, #0
 8012236:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8012238:	4b1d      	ldr	r3, [pc, #116]	; (80122b0 <_tx_thread_system_suspend+0x188>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801223e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012240:	2b00      	cmp	r3, #0
 8012242:	d13d      	bne.n	80122c0 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012244:	4b1b      	ldr	r3, [pc, #108]	; (80122b4 <_tx_thread_system_suspend+0x18c>)
 8012246:	2220      	movs	r2, #32
 8012248:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801224a:	4b1b      	ldr	r3, [pc, #108]	; (80122b8 <_tx_thread_system_suspend+0x190>)
 801224c:	2200      	movs	r2, #0
 801224e:	601a      	str	r2, [r3, #0]
 8012250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012252:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012256:	f383 8810 	msr	PRIMASK, r3
}
 801225a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801225c:	4b11      	ldr	r3, [pc, #68]	; (80122a4 <_tx_thread_system_suspend+0x17c>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8012262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012264:	2b00      	cmp	r3, #0
 8012266:	f040 80db 	bne.w	8012420 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801226a:	4b14      	ldr	r3, [pc, #80]	; (80122bc <_tx_thread_system_suspend+0x194>)
 801226c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012270:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012272:	f3ef 8305 	mrs	r3, IPSR
 8012276:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8012278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 801227a:	2b00      	cmp	r3, #0
 801227c:	d10c      	bne.n	8012298 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801227e:	f3ef 8310 	mrs	r3, PRIMASK
 8012282:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8012284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 8012286:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012288:	b662      	cpsie	i
}
 801228a:	bf00      	nop
 801228c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801228e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012292:	f383 8810 	msr	PRIMASK, r3
}
 8012296:	bf00      	nop
}
 8012298:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801229a:	e0c1      	b.n	8012420 <_tx_thread_system_suspend+0x2f8>
 801229c:	20003868 	.word	0x20003868
 80122a0:	20003e74 	.word	0x20003e74
 80122a4:	20003904 	.word	0x20003904
 80122a8:	20003884 	.word	0x20003884
 80122ac:	2000387c 	.word	0x2000387c
 80122b0:	20003878 	.word	0x20003878
 80122b4:	20003880 	.word	0x20003880
 80122b8:	2000386c 	.word	0x2000386c
 80122bc:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80122c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122c2:	fa93 f3a3 	rbit	r3, r3
 80122c6:	663b      	str	r3, [r7, #96]	; 0x60
 80122c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122ca:	fab3 f383 	clz	r3, r3
 80122ce:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80122d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80122d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122d4:	4413      	add	r3, r2
 80122d6:	4a56      	ldr	r2, [pc, #344]	; (8012430 <_tx_thread_system_suspend+0x308>)
 80122d8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80122da:	4b56      	ldr	r3, [pc, #344]	; (8012434 <_tx_thread_system_suspend+0x30c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d173      	bne.n	80123cc <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80122e4:	4b52      	ldr	r3, [pc, #328]	; (8012430 <_tx_thread_system_suspend+0x308>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	4a53      	ldr	r2, [pc, #332]	; (8012438 <_tx_thread_system_suspend+0x310>)
 80122ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ee:	4a51      	ldr	r2, [pc, #324]	; (8012434 <_tx_thread_system_suspend+0x30c>)
 80122f0:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80122f2:	4b52      	ldr	r3, [pc, #328]	; (801243c <_tx_thread_system_suspend+0x314>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d043      	beq.n	8012382 <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80122fa:	4b51      	ldr	r3, [pc, #324]	; (8012440 <_tx_thread_system_suspend+0x318>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	3301      	adds	r3, #1
 8012300:	4a4f      	ldr	r2, [pc, #316]	; (8012440 <_tx_thread_system_suspend+0x318>)
 8012302:	6013      	str	r3, [r2, #0]
 8012304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012306:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230a:	f383 8810 	msr	PRIMASK, r3
}
 801230e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012310:	f3ef 8310 	mrs	r3, PRIMASK
 8012314:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012318:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801231a:	b672      	cpsid	i
    return(int_posture);
 801231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 801231e:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8012320:	4b47      	ldr	r3, [pc, #284]	; (8012440 <_tx_thread_system_suspend+0x318>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3b01      	subs	r3, #1
 8012326:	4a46      	ldr	r2, [pc, #280]	; (8012440 <_tx_thread_system_suspend+0x318>)
 8012328:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 801232a:	2300      	movs	r3, #0
 801232c:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 801232e:	4b43      	ldr	r3, [pc, #268]	; (801243c <_tx_thread_system_suspend+0x314>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8012334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012336:	fa93 f3a3 	rbit	r3, r3
 801233a:	663b      	str	r3, [r7, #96]	; 0x60
 801233c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801233e:	fab3 f383 	clz	r3, r3
 8012342:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8012344:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012348:	4413      	add	r3, r2
 801234a:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 801234c:	4a3a      	ldr	r2, [pc, #232]	; (8012438 <_tx_thread_system_suspend+0x310>)
 801234e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012356:	4b36      	ldr	r3, [pc, #216]	; (8012430 <_tx_thread_system_suspend+0x308>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	429a      	cmp	r2, r3
 801235c:	d811      	bhi.n	8012382 <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its 
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 801235e:	4a36      	ldr	r2, [pc, #216]	; (8012438 <_tx_thread_system_suspend+0x310>)
 8012360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012366:	4a33      	ldr	r2, [pc, #204]	; (8012434 <_tx_thread_system_suspend+0x30c>)
 8012368:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801236a:	2201      	movs	r2, #1
 801236c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801236e:	fa02 f303 	lsl.w	r3, r2, r3
 8012372:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8012374:	4b31      	ldr	r3, [pc, #196]	; (801243c <_tx_thread_system_suspend+0x314>)
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801237a:	43db      	mvns	r3, r3
 801237c:	4013      	ands	r3, r2
 801237e:	4a2f      	ldr	r2, [pc, #188]	; (801243c <_tx_thread_system_suspend+0x314>)
 8012380:	6013      	str	r3, [r2, #0]
 8012382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012384:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012388:	f383 8810 	msr	PRIMASK, r3
}
 801238c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801238e:	4b2c      	ldr	r3, [pc, #176]	; (8012440 <_tx_thread_system_suspend+0x318>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 8012394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012396:	2b00      	cmp	r3, #0
 8012398:	d144      	bne.n	8012424 <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801239a:	4b2a      	ldr	r3, [pc, #168]	; (8012444 <_tx_thread_system_suspend+0x31c>)
 801239c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123a2:	f3ef 8305 	mrs	r3, IPSR
 80123a6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80123a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d10c      	bne.n	80123c8 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80123ae:	f3ef 8310 	mrs	r3, PRIMASK
 80123b2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80123b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80123b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80123b8:	b662      	cpsie	i
}
 80123ba:	bf00      	nop
 80123bc:	6a3b      	ldr	r3, [r7, #32]
 80123be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	f383 8810 	msr	PRIMASK, r3
}
 80123c6:	bf00      	nop
}
 80123c8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80123ca:	e02b      	b.n	8012424 <_tx_thread_system_suspend+0x2fc>
 80123cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80123ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	f383 8810 	msr	PRIMASK, r3
}
 80123d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80123d8:	4b16      	ldr	r3, [pc, #88]	; (8012434 <_tx_thread_system_suspend+0x30c>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80123de:	429a      	cmp	r2, r3
 80123e0:	d022      	beq.n	8012428 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80123e2:	4b17      	ldr	r3, [pc, #92]	; (8012440 <_tx_thread_system_suspend+0x318>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 80123e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d11c      	bne.n	8012428 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80123ee:	4b15      	ldr	r3, [pc, #84]	; (8012444 <_tx_thread_system_suspend+0x31c>)
 80123f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123f6:	f3ef 8305 	mrs	r3, IPSR
 80123fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80123fc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10c      	bne.n	801241c <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012402:	f3ef 8310 	mrs	r3, PRIMASK
 8012406:	613b      	str	r3, [r7, #16]
    return(posture);
 8012408:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801240a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801240c:	b662      	cpsie	i
}
 801240e:	bf00      	nop
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	f383 8810 	msr	PRIMASK, r3
}
 801241a:	bf00      	nop
}
 801241c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801241e:	e003      	b.n	8012428 <_tx_thread_system_suspend+0x300>
                return;
 8012420:	bf00      	nop
 8012422:	e002      	b.n	801242a <_tx_thread_system_suspend+0x302>
            return;
 8012424:	bf00      	nop
 8012426:	e000      	b.n	801242a <_tx_thread_system_suspend+0x302>
    return;
 8012428:	bf00      	nop
}
 801242a:	3780      	adds	r7, #128	; 0x80
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	20003880 	.word	0x20003880
 8012434:	2000386c 	.word	0x2000386c
 8012438:	20003884 	.word	0x20003884
 801243c:	2000387c 	.word	0x2000387c
 8012440:	20003904 	.word	0x20003904
 8012444:	e000ed04 	.word	0xe000ed04

08012448 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012448:	b480      	push	{r7}
 801244a:	b087      	sub	sp, #28
 801244c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801244e:	4b21      	ldr	r3, [pc, #132]	; (80124d4 <_tx_thread_time_slice+0x8c>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012454:	f3ef 8310 	mrs	r3, PRIMASK
 8012458:	60fb      	str	r3, [r7, #12]
    return(posture);
 801245a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801245c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801245e:	b672      	cpsid	i
    return(int_posture);
 8012460:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8012462:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012464:	4b1c      	ldr	r3, [pc, #112]	; (80124d8 <_tx_thread_time_slice+0x90>)
 8012466:	2200      	movs	r2, #0
 8012468:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d024      	beq.n	80124ba <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012474:	2b00      	cmp	r3, #0
 8012476:	d120      	bne.n	80124ba <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	69da      	ldr	r2, [r3, #28]
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	699b      	ldr	r3, [r3, #24]
 8012484:	4a15      	ldr	r2, [pc, #84]	; (80124dc <_tx_thread_time_slice+0x94>)
 8012486:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	6a1b      	ldr	r3, [r3, #32]
 801248c:	697a      	ldr	r2, [r7, #20]
 801248e:	429a      	cmp	r2, r3
 8012490:	d013      	beq.n	80124ba <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801249a:	429a      	cmp	r2, r3
 801249c:	d10d      	bne.n	80124ba <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a2:	697a      	ldr	r2, [r7, #20]
 80124a4:	6a12      	ldr	r2, [r2, #32]
 80124a6:	490e      	ldr	r1, [pc, #56]	; (80124e0 <_tx_thread_time_slice+0x98>)
 80124a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80124ac:	4b0d      	ldr	r3, [pc, #52]	; (80124e4 <_tx_thread_time_slice+0x9c>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	4a0b      	ldr	r2, [pc, #44]	; (80124e0 <_tx_thread_time_slice+0x98>)
 80124b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124b6:	4a0c      	ldr	r2, [pc, #48]	; (80124e8 <_tx_thread_time_slice+0xa0>)
 80124b8:	6013      	str	r3, [r2, #0]
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f383 8810 	msr	PRIMASK, r3
}
 80124c4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80124c6:	bf00      	nop
 80124c8:	371c      	adds	r7, #28
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop
 80124d4:	20003868 	.word	0x20003868
 80124d8:	20003914 	.word	0x20003914
 80124dc:	20003e74 	.word	0x20003e74
 80124e0:	20003884 	.word	0x20003884
 80124e4:	20003880 	.word	0x20003880
 80124e8:	2000386c 	.word	0x2000386c

080124ec <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b08a      	sub	sp, #40	; 0x28
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80124f8:	f3ef 8310 	mrs	r3, PRIMASK
 80124fc:	617b      	str	r3, [r7, #20]
    return(posture);
 80124fe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012500:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012502:	b672      	cpsid	i
    return(int_posture);
 8012504:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8012506:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801250c:	2b04      	cmp	r3, #4
 801250e:	d10e      	bne.n	801252e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8012510:	4b13      	ldr	r3, [pc, #76]	; (8012560 <_tx_thread_timeout+0x74>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	3301      	adds	r3, #1
 8012516:	4a12      	ldr	r2, [pc, #72]	; (8012560 <_tx_thread_timeout+0x74>)
 8012518:	6013      	str	r3, [r2, #0]
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f383 8810 	msr	PRIMASK, r3
}
 8012524:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012528:	f7ff fcea 	bl	8011f00 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801252c:	e013      	b.n	8012556 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012532:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801253a:	61bb      	str	r3, [r7, #24]
 801253c:	6a3b      	ldr	r3, [r7, #32]
 801253e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	f383 8810 	msr	PRIMASK, r3
}
 8012546:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d003      	beq.n	8012556 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	69b9      	ldr	r1, [r7, #24]
 8012552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012554:	4798      	blx	r3
}
 8012556:	bf00      	nop
 8012558:	3728      	adds	r7, #40	; 0x28
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	20003904 	.word	0x20003904

08012564 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b08a      	sub	sp, #40	; 0x28
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
 8012570:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8012572:	222c      	movs	r2, #44	; 0x2c
 8012574:	2100      	movs	r1, #0
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f000 fff2 	bl	8013560 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	68ba      	ldr	r2, [r7, #8]
 8012580:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012586:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801258c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801259a:	f3ef 8310 	mrs	r3, PRIMASK
 801259e:	61bb      	str	r3, [r7, #24]
    return(posture);
 80125a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80125a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125a4:	b672      	cpsid	i
    return(int_posture);
 80125a6:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80125a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	4a1c      	ldr	r2, [pc, #112]	; (8012620 <_tx_timer_create+0xbc>)
 80125ae:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80125b0:	4b1c      	ldr	r3, [pc, #112]	; (8012624 <_tx_timer_create+0xc0>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d109      	bne.n	80125cc <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 80125b8:	4a1b      	ldr	r2, [pc, #108]	; (8012628 <_tx_timer_create+0xc4>)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	68fa      	ldr	r2, [r7, #12]
 80125c8:	629a      	str	r2, [r3, #40]	; 0x28
 80125ca:	e011      	b.n	80125f0 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 80125cc:	4b16      	ldr	r3, [pc, #88]	; (8012628 <_tx_timer_create+0xc4>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 80125d2:	6a3b      	ldr	r3, [r7, #32]
 80125d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125d6:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 80125d8:	6a3b      	ldr	r3, [r7, #32]
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	69fa      	ldr	r2, [r7, #28]
 80125e8:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6a3a      	ldr	r2, [r7, #32]
 80125ee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 80125f0:	4b0c      	ldr	r3, [pc, #48]	; (8012624 <_tx_timer_create+0xc0>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	3301      	adds	r3, #1
 80125f6:	4a0b      	ldr	r2, [pc, #44]	; (8012624 <_tx_timer_create+0xc0>)
 80125f8:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 80125fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d104      	bne.n	801260a <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	3308      	adds	r3, #8
 8012604:	4618      	mov	r0, r3
 8012606:	f000 f8af 	bl	8012768 <_tx_timer_system_activate>
 801260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	f383 8810 	msr	PRIMASK, r3
}
 8012614:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012616:	2300      	movs	r3, #0
}
 8012618:	4618      	mov	r0, r3
 801261a:	3728      	adds	r7, #40	; 0x28
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	4154494d 	.word	0x4154494d
 8012624:	200039ac 	.word	0x200039ac
 8012628:	200039a8 	.word	0x200039a8

0801262c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012632:	f3ef 8310 	mrs	r3, PRIMASK
 8012636:	607b      	str	r3, [r7, #4]
    return(posture);
 8012638:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801263a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801263c:	b672      	cpsid	i
    return(int_posture);
 801263e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012640:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8012642:	4b09      	ldr	r3, [pc, #36]	; (8012668 <_tx_timer_expiration_process+0x3c>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	3301      	adds	r3, #1
 8012648:	4a07      	ldr	r2, [pc, #28]	; (8012668 <_tx_timer_expiration_process+0x3c>)
 801264a:	6013      	str	r3, [r2, #0]
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	f383 8810 	msr	PRIMASK, r3
}
 8012656:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012658:	4804      	ldr	r0, [pc, #16]	; (801266c <_tx_timer_expiration_process+0x40>)
 801265a:	f7ff fc51 	bl	8011f00 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801265e:	bf00      	nop
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	20003904 	.word	0x20003904
 801266c:	200039b4 	.word	0x200039b4

08012670 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012670:	b590      	push	{r4, r7, lr}
 8012672:	b089      	sub	sp, #36	; 0x24
 8012674:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8012676:	4b28      	ldr	r3, [pc, #160]	; (8012718 <_tx_timer_initialize+0xa8>)
 8012678:	2200      	movs	r2, #0
 801267a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801267c:	4b27      	ldr	r3, [pc, #156]	; (801271c <_tx_timer_initialize+0xac>)
 801267e:	2200      	movs	r2, #0
 8012680:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012682:	4b27      	ldr	r3, [pc, #156]	; (8012720 <_tx_timer_initialize+0xb0>)
 8012684:	2200      	movs	r2, #0
 8012686:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012688:	4b26      	ldr	r3, [pc, #152]	; (8012724 <_tx_timer_initialize+0xb4>)
 801268a:	2200      	movs	r2, #0
 801268c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801268e:	4b26      	ldr	r3, [pc, #152]	; (8012728 <_tx_timer_initialize+0xb8>)
 8012690:	2200      	movs	r2, #0
 8012692:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8012694:	2280      	movs	r2, #128	; 0x80
 8012696:	2100      	movs	r1, #0
 8012698:	4824      	ldr	r0, [pc, #144]	; (801272c <_tx_timer_initialize+0xbc>)
 801269a:	f000 ff61 	bl	8013560 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801269e:	4b24      	ldr	r3, [pc, #144]	; (8012730 <_tx_timer_initialize+0xc0>)
 80126a0:	4a22      	ldr	r2, [pc, #136]	; (801272c <_tx_timer_initialize+0xbc>)
 80126a2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80126a4:	4b23      	ldr	r3, [pc, #140]	; (8012734 <_tx_timer_initialize+0xc4>)
 80126a6:	4a21      	ldr	r2, [pc, #132]	; (801272c <_tx_timer_initialize+0xbc>)
 80126a8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80126aa:	4b23      	ldr	r3, [pc, #140]	; (8012738 <_tx_timer_initialize+0xc8>)
 80126ac:	4a23      	ldr	r2, [pc, #140]	; (801273c <_tx_timer_initialize+0xcc>)
 80126ae:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80126b0:	4b21      	ldr	r3, [pc, #132]	; (8012738 <_tx_timer_initialize+0xc8>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	3304      	adds	r3, #4
 80126b6:	4a20      	ldr	r2, [pc, #128]	; (8012738 <_tx_timer_initialize+0xc8>)
 80126b8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80126ba:	4b21      	ldr	r3, [pc, #132]	; (8012740 <_tx_timer_initialize+0xd0>)
 80126bc:	4a21      	ldr	r2, [pc, #132]	; (8012744 <_tx_timer_initialize+0xd4>)
 80126be:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80126c0:	4b21      	ldr	r3, [pc, #132]	; (8012748 <_tx_timer_initialize+0xd8>)
 80126c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80126c6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80126c8:	4b20      	ldr	r3, [pc, #128]	; (801274c <_tx_timer_initialize+0xdc>)
 80126ca:	2200      	movs	r2, #0
 80126cc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 80126ce:	4b1c      	ldr	r3, [pc, #112]	; (8012740 <_tx_timer_initialize+0xd0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	4a1d      	ldr	r2, [pc, #116]	; (8012748 <_tx_timer_initialize+0xd8>)
 80126d4:	6812      	ldr	r2, [r2, #0]
 80126d6:	491d      	ldr	r1, [pc, #116]	; (801274c <_tx_timer_initialize+0xdc>)
 80126d8:	6809      	ldr	r1, [r1, #0]
 80126da:	481c      	ldr	r0, [pc, #112]	; (801274c <_tx_timer_initialize+0xdc>)
 80126dc:	6800      	ldr	r0, [r0, #0]
 80126de:	2400      	movs	r4, #0
 80126e0:	9405      	str	r4, [sp, #20]
 80126e2:	2400      	movs	r4, #0
 80126e4:	9404      	str	r4, [sp, #16]
 80126e6:	9003      	str	r0, [sp, #12]
 80126e8:	9102      	str	r1, [sp, #8]
 80126ea:	9201      	str	r2, [sp, #4]
 80126ec:	9300      	str	r3, [sp, #0]
 80126ee:	4b18      	ldr	r3, [pc, #96]	; (8012750 <_tx_timer_initialize+0xe0>)
 80126f0:	4a18      	ldr	r2, [pc, #96]	; (8012754 <_tx_timer_initialize+0xe4>)
 80126f2:	4919      	ldr	r1, [pc, #100]	; (8012758 <_tx_timer_initialize+0xe8>)
 80126f4:	4819      	ldr	r0, [pc, #100]	; (801275c <_tx_timer_initialize+0xec>)
 80126f6:	f7ff fa2f 	bl	8011b58 <_tx_thread_create>
 80126fa:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1e5      	bne.n	80126ce <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8012702:	4b17      	ldr	r3, [pc, #92]	; (8012760 <_tx_timer_initialize+0xf0>)
 8012704:	2200      	movs	r2, #0
 8012706:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8012708:	4b16      	ldr	r3, [pc, #88]	; (8012764 <_tx_timer_initialize+0xf4>)
 801270a:	2200      	movs	r2, #0
 801270c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801270e:	bf00      	nop
 8012710:	370c      	adds	r7, #12
 8012712:	46bd      	mov	sp, r7
 8012714:	bd90      	pop	{r4, r7, pc}
 8012716:	bf00      	nop
 8012718:	20003910 	.word	0x20003910
 801271c:	20003e74 	.word	0x20003e74
 8012720:	20003914 	.word	0x20003914
 8012724:	200039a4 	.word	0x200039a4
 8012728:	200039b0 	.word	0x200039b0
 801272c:	20003918 	.word	0x20003918
 8012730:	20003998 	.word	0x20003998
 8012734:	200039a0 	.word	0x200039a0
 8012738:	2000399c 	.word	0x2000399c
 801273c:	20003994 	.word	0x20003994
 8012740:	20003a68 	.word	0x20003a68
 8012744:	20003a74 	.word	0x20003a74
 8012748:	20003a6c 	.word	0x20003a6c
 801274c:	20003a70 	.word	0x20003a70
 8012750:	4154494d 	.word	0x4154494d
 8012754:	0801289d 	.word	0x0801289d
 8012758:	0801a5e4 	.word	0x0801a5e4
 801275c:	200039b4 	.word	0x200039b4
 8012760:	200039a8 	.word	0x200039a8
 8012764:	200039ac 	.word	0x200039ac

08012768 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012768:	b480      	push	{r7}
 801276a:	b089      	sub	sp, #36	; 0x24
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d04a      	beq.n	8012812 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012782:	d046      	beq.n	8012812 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d142      	bne.n	8012812 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	2b20      	cmp	r3, #32
 8012790:	d902      	bls.n	8012798 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8012792:	231f      	movs	r3, #31
 8012794:	61bb      	str	r3, [r7, #24]
 8012796:	e002      	b.n	801279e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	3b01      	subs	r3, #1
 801279c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801279e:	4b20      	ldr	r3, [pc, #128]	; (8012820 <_tx_timer_system_activate+0xb8>)
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	4413      	add	r3, r2
 80127a8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80127aa:	4b1e      	ldr	r3, [pc, #120]	; (8012824 <_tx_timer_system_activate+0xbc>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	69fa      	ldr	r2, [r7, #28]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d30b      	bcc.n	80127cc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80127b4:	4b1b      	ldr	r3, [pc, #108]	; (8012824 <_tx_timer_system_activate+0xbc>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	69fa      	ldr	r2, [r7, #28]
 80127ba:	1ad3      	subs	r3, r2, r3
 80127bc:	109b      	asrs	r3, r3, #2
 80127be:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80127c0:	4b19      	ldr	r3, [pc, #100]	; (8012828 <_tx_timer_system_activate+0xc0>)
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	4413      	add	r3, r2
 80127ca:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d109      	bne.n	80127e8 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	601a      	str	r2, [r3, #0]
 80127e6:	e011      	b.n	801280c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	695b      	ldr	r3, [r3, #20]
 80127f2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	687a      	ldr	r2, [r7, #4]
 80127f8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	68fa      	ldr	r2, [r7, #12]
 8012804:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	68ba      	ldr	r2, [r7, #8]
 801280a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	69fa      	ldr	r2, [r7, #28]
 8012810:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8012812:	bf00      	nop
 8012814:	3724      	adds	r7, #36	; 0x24
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	200039a0 	.word	0x200039a0
 8012824:	2000399c 	.word	0x2000399c
 8012828:	20003998 	.word	0x20003998

0801282c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 801282c:	b480      	push	{r7}
 801282e:	b087      	sub	sp, #28
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	699b      	ldr	r3, [r3, #24]
 8012838:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d026      	beq.n	801288e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	429a      	cmp	r2, r3
 801284c:	d108      	bne.n	8012860 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	429a      	cmp	r2, r3
 8012856:	d117      	bne.n	8012888 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	2200      	movs	r2, #0
 801285c:	601a      	str	r2, [r3, #0]
 801285e:	e013      	b.n	8012888 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	695b      	ldr	r3, [r3, #20]
 8012864:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	429a      	cmp	r2, r3
 801287a:	d105      	bne.n	8012888 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	697a      	ldr	r2, [r7, #20]
 8012880:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	693a      	ldr	r2, [r7, #16]
 8012886:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2200      	movs	r2, #0
 801288c:	619a      	str	r2, [r3, #24]
    }
}
 801288e:	bf00      	nop
 8012890:	371c      	adds	r7, #28
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
	...

0801289c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b098      	sub	sp, #96	; 0x60
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80128a4:	2300      	movs	r3, #0
 80128a6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4a73      	ldr	r2, [pc, #460]	; (8012a78 <_tx_timer_thread_entry+0x1dc>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	f040 80de 	bne.w	8012a6e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128b2:	f3ef 8310 	mrs	r3, PRIMASK
 80128b6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80128b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80128ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80128bc:	b672      	cpsid	i
    return(int_posture);
 80128be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80128c0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80128c2:	4b6e      	ldr	r3, [pc, #440]	; (8012a7c <_tx_timer_thread_entry+0x1e0>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d003      	beq.n	80128d8 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f107 020c 	add.w	r2, r7, #12
 80128d6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80128d8:	4b68      	ldr	r3, [pc, #416]	; (8012a7c <_tx_timer_thread_entry+0x1e0>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2200      	movs	r2, #0
 80128de:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80128e0:	4b66      	ldr	r3, [pc, #408]	; (8012a7c <_tx_timer_thread_entry+0x1e0>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3304      	adds	r3, #4
 80128e6:	4a65      	ldr	r2, [pc, #404]	; (8012a7c <_tx_timer_thread_entry+0x1e0>)
 80128e8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80128ea:	4b64      	ldr	r3, [pc, #400]	; (8012a7c <_tx_timer_thread_entry+0x1e0>)
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	4b64      	ldr	r3, [pc, #400]	; (8012a80 <_tx_timer_thread_entry+0x1e4>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d103      	bne.n	80128fe <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80128f6:	4b63      	ldr	r3, [pc, #396]	; (8012a84 <_tx_timer_thread_entry+0x1e8>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	4a60      	ldr	r2, [pc, #384]	; (8012a7c <_tx_timer_thread_entry+0x1e0>)
 80128fc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80128fe:	4b62      	ldr	r3, [pc, #392]	; (8012a88 <_tx_timer_thread_entry+0x1ec>)
 8012900:	2200      	movs	r2, #0
 8012902:	601a      	str	r2, [r3, #0]
 8012904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012906:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290a:	f383 8810 	msr	PRIMASK, r3
}
 801290e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012910:	f3ef 8310 	mrs	r3, PRIMASK
 8012914:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012918:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801291a:	b672      	cpsid	i
    return(int_posture);
 801291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801291e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8012920:	e07f      	b.n	8012a22 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	691b      	ldr	r3, [r3, #16]
 801292a:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8012930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012934:	429a      	cmp	r2, r3
 8012936:	d102      	bne.n	801293e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012938:	2300      	movs	r3, #0
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	e00e      	b.n	801295c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801293e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012940:	695b      	ldr	r3, [r3, #20]
 8012942:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012948:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801294a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801294c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801294e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012952:	f107 020c 	add.w	r2, r7, #12
 8012956:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801295a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b20      	cmp	r3, #32
 8012962:	d911      	bls.n	8012988 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 801296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801296e:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012970:	2300      	movs	r3, #0
 8012972:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012976:	f107 0208 	add.w	r2, r7, #8
 801297a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801297c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801297e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012980:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8012982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012984:	60bb      	str	r3, [r7, #8]
 8012986:	e01a      	b.n	80129be <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8012994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012996:	685a      	ldr	r2, [r3, #4]
 8012998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801299a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d009      	beq.n	80129b8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80129a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129a6:	f107 0208 	add.w	r2, r7, #8
 80129aa:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80129ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129b0:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80129b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129b4:	60bb      	str	r3, [r7, #8]
 80129b6:	e002      	b.n	80129be <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80129b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129ba:	2200      	movs	r2, #0
 80129bc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80129be:	4a33      	ldr	r2, [pc, #204]	; (8012a8c <_tx_timer_thread_entry+0x1f0>)
 80129c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129c2:	6013      	str	r3, [r2, #0]
 80129c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ca:	f383 8810 	msr	PRIMASK, r3
}
 80129ce:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80129d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d002      	beq.n	80129dc <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 80129d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80129da:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80129dc:	f3ef 8310 	mrs	r3, PRIMASK
 80129e0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80129e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80129e4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80129e6:	b672      	cpsid	i
    return(int_posture);
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80129ea:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80129ec:	4b27      	ldr	r3, [pc, #156]	; (8012a8c <_tx_timer_thread_entry+0x1f0>)
 80129ee:	2200      	movs	r2, #0
 80129f0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d105      	bne.n	8012a06 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80129fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129fc:	2200      	movs	r2, #0
 80129fe:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8012a00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012a02:	f7ff feb1 	bl	8012768 <_tx_timer_system_activate>
 8012a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	f383 8810 	msr	PRIMASK, r3
}
 8012a10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a12:	f3ef 8310 	mrs	r3, PRIMASK
 8012a16:	623b      	str	r3, [r7, #32]
    return(posture);
 8012a18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012a1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a1c:	b672      	cpsid	i
    return(int_posture);
 8012a1e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012a20:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	f47f af7c 	bne.w	8012922 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012a2a:	4b17      	ldr	r3, [pc, #92]	; (8012a88 <_tx_timer_thread_entry+0x1ec>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d116      	bne.n	8012a60 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8012a32:	4b17      	ldr	r3, [pc, #92]	; (8012a90 <_tx_timer_thread_entry+0x1f4>)
 8012a34:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a38:	2203      	movs	r2, #3
 8012a3a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a3e:	2201      	movs	r2, #1
 8012a40:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8012a42:	4b14      	ldr	r3, [pc, #80]	; (8012a94 <_tx_timer_thread_entry+0x1f8>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	3301      	adds	r3, #1
 8012a48:	4a12      	ldr	r2, [pc, #72]	; (8012a94 <_tx_timer_thread_entry+0x1f8>)
 8012a4a:	6013      	str	r3, [r2, #0]
 8012a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a4e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	f383 8810 	msr	PRIMASK, r3
}
 8012a56:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012a58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012a5a:	f7ff fb65 	bl	8012128 <_tx_thread_system_suspend>
 8012a5e:	e728      	b.n	80128b2 <_tx_timer_thread_entry+0x16>
 8012a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	f383 8810 	msr	PRIMASK, r3
}
 8012a6a:	bf00      	nop
            TX_DISABLE
 8012a6c:	e721      	b.n	80128b2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012a6e:	bf00      	nop
 8012a70:	3760      	adds	r7, #96	; 0x60
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	4154494d 	.word	0x4154494d
 8012a7c:	200039a0 	.word	0x200039a0
 8012a80:	2000399c 	.word	0x2000399c
 8012a84:	20003998 	.word	0x20003998
 8012a88:	200039a4 	.word	0x200039a4
 8012a8c:	200039b0 	.word	0x200039b0
 8012a90:	200039b4 	.word	0x200039b4
 8012a94:	20003904 	.word	0x20003904

08012a98 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b08a      	sub	sp, #40	; 0x28
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
 8012aa4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d102      	bne.n	8012ab6 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ab0:	2302      	movs	r3, #2
 8012ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ab4:	e029      	b.n	8012b0a <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	4a2d      	ldr	r2, [pc, #180]	; (8012b70 <_txe_byte_allocate+0xd8>)
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d002      	beq.n	8012ac6 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ac0:	2302      	movs	r3, #2
 8012ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ac4:	e021      	b.n	8012b0a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d102      	bne.n	8012ad2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012acc:	2303      	movs	r3, #3
 8012ace:	627b      	str	r3, [r7, #36]	; 0x24
 8012ad0:	e01b      	b.n	8012b0a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d102      	bne.n	8012ade <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012ad8:	2305      	movs	r3, #5
 8012ada:	627b      	str	r3, [r7, #36]	; 0x24
 8012adc:	e015      	b.n	8012b0a <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	69db      	ldr	r3, [r3, #28]
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d902      	bls.n	8012aee <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012ae8:	2305      	movs	r3, #5
 8012aea:	627b      	str	r3, [r7, #36]	; 0x24
 8012aec:	e00d      	b.n	8012b0a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00a      	beq.n	8012b0a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012af4:	f3ef 8305 	mrs	r3, IPSR
 8012af8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8012afa:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012afc:	4b1d      	ldr	r3, [pc, #116]	; (8012b74 <_txe_byte_allocate+0xdc>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4313      	orrs	r3, r2
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d001      	beq.n	8012b0a <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012b06:	2304      	movs	r3, #4
 8012b08:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d108      	bne.n	8012b22 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012b10:	4b19      	ldr	r3, [pc, #100]	; (8012b78 <_txe_byte_allocate+0xe0>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8012b16:	6a3b      	ldr	r3, [r7, #32]
 8012b18:	4a18      	ldr	r2, [pc, #96]	; (8012b7c <_txe_byte_allocate+0xe4>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d101      	bne.n	8012b22 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8012b1e:	2313      	movs	r3, #19
 8012b20:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8012b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d114      	bne.n	8012b52 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b28:	f3ef 8305 	mrs	r3, IPSR
 8012b2c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012b2e:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012b30:	4b10      	ldr	r3, [pc, #64]	; (8012b74 <_txe_byte_allocate+0xdc>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4313      	orrs	r3, r2
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00b      	beq.n	8012b52 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b3a:	f3ef 8305 	mrs	r3, IPSR
 8012b3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012b40:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012b42:	4b0c      	ldr	r3, [pc, #48]	; (8012b74 <_txe_byte_allocate+0xdc>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4313      	orrs	r3, r2
 8012b48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012b4c:	d201      	bcs.n	8012b52 <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012b4e:	2313      	movs	r3, #19
 8012b50:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d106      	bne.n	8012b66 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	68b9      	ldr	r1, [r7, #8]
 8012b5e:	68f8      	ldr	r0, [r7, #12]
 8012b60:	f7fe fc3a 	bl	80113d8 <_tx_byte_allocate>
 8012b64:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3728      	adds	r7, #40	; 0x28
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	42595445 	.word	0x42595445
 8012b74:	20000084 	.word	0x20000084
 8012b78:	20003868 	.word	0x20003868
 8012b7c:	200039b4 	.word	0x200039b4

08012b80 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b092      	sub	sp, #72	; 0x48
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d102      	bne.n	8012b9e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012b98:	2302      	movs	r3, #2
 8012b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8012b9c:	e075      	b.n	8012c8a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba0:	2b34      	cmp	r3, #52	; 0x34
 8012ba2:	d002      	beq.n	8012baa <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ba4:	2302      	movs	r3, #2
 8012ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8012ba8:	e06f      	b.n	8012c8a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012baa:	f3ef 8310 	mrs	r3, PRIMASK
 8012bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012bb4:	b672      	cpsid	i
    return(int_posture);
 8012bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8012bb8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012bba:	4b3b      	ldr	r3, [pc, #236]	; (8012ca8 <_txe_byte_pool_create+0x128>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	4a39      	ldr	r2, [pc, #228]	; (8012ca8 <_txe_byte_pool_create+0x128>)
 8012bc2:	6013      	str	r3, [r2, #0]
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bca:	f383 8810 	msr	PRIMASK, r3
}
 8012bce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8012bd0:	4b36      	ldr	r3, [pc, #216]	; (8012cac <_txe_byte_pool_create+0x12c>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8012bda:	e009      	b.n	8012bf0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8012bdc:	68fa      	ldr	r2, [r7, #12]
 8012bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d00b      	beq.n	8012bfc <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8012be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8012bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bec:	3301      	adds	r3, #1
 8012bee:	643b      	str	r3, [r7, #64]	; 0x40
 8012bf0:	4b2f      	ldr	r3, [pc, #188]	; (8012cb0 <_txe_byte_pool_create+0x130>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d3f0      	bcc.n	8012bdc <_txe_byte_pool_create+0x5c>
 8012bfa:	e000      	b.n	8012bfe <_txe_byte_pool_create+0x7e>
                break;
 8012bfc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8012c02:	623b      	str	r3, [r7, #32]
    return(posture);
 8012c04:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012c06:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c08:	b672      	cpsid	i
    return(int_posture);
 8012c0a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012c0c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012c0e:	4b26      	ldr	r3, [pc, #152]	; (8012ca8 <_txe_byte_pool_create+0x128>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	3b01      	subs	r3, #1
 8012c14:	4a24      	ldr	r2, [pc, #144]	; (8012ca8 <_txe_byte_pool_create+0x128>)
 8012c16:	6013      	str	r3, [r2, #0]
 8012c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1e:	f383 8810 	msr	PRIMASK, r3
}
 8012c22:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012c24:	f7ff f932 	bl	8011e8c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d102      	bne.n	8012c36 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012c30:	2302      	movs	r3, #2
 8012c32:	647b      	str	r3, [r7, #68]	; 0x44
 8012c34:	e029      	b.n	8012c8a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d102      	bne.n	8012c42 <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012c3c:	2303      	movs	r3, #3
 8012c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8012c40:	e023      	b.n	8012c8a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	2b63      	cmp	r3, #99	; 0x63
 8012c46:	d802      	bhi.n	8012c4e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8012c48:	2305      	movs	r3, #5
 8012c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8012c4c:	e01d      	b.n	8012c8a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012c4e:	4b19      	ldr	r3, [pc, #100]	; (8012cb4 <_txe_byte_pool_create+0x134>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c56:	4a18      	ldr	r2, [pc, #96]	; (8012cb8 <_txe_byte_pool_create+0x138>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d101      	bne.n	8012c60 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012c5c:	2313      	movs	r3, #19
 8012c5e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c60:	f3ef 8305 	mrs	r3, IPSR
 8012c64:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012c66:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012c68:	4b14      	ldr	r3, [pc, #80]	; (8012cbc <_txe_byte_pool_create+0x13c>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d00b      	beq.n	8012c8a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c72:	f3ef 8305 	mrs	r3, IPSR
 8012c76:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012c78:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012c7a:	4b10      	ldr	r3, [pc, #64]	; (8012cbc <_txe_byte_pool_create+0x13c>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012c84:	d201      	bcs.n	8012c8a <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012c86:	2313      	movs	r3, #19
 8012c88:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d106      	bne.n	8012c9e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	68b9      	ldr	r1, [r7, #8]
 8012c96:	68f8      	ldr	r0, [r7, #12]
 8012c98:	f7fe fce0 	bl	801165c <_tx_byte_pool_create>
 8012c9c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8012c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3748      	adds	r7, #72	; 0x48
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	20003904 	.word	0x20003904
 8012cac:	20003858 	.word	0x20003858
 8012cb0:	2000385c 	.word	0x2000385c
 8012cb4:	20003868 	.word	0x20003868
 8012cb8:	200039b4 	.word	0x200039b4
 8012cbc:	20000084 	.word	0x20000084

08012cc0 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d102      	bne.n	8012cd4 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012cce:	230c      	movs	r3, #12
 8012cd0:	60fb      	str	r3, [r7, #12]
 8012cd2:	e00b      	b.n	8012cec <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a07      	ldr	r2, [pc, #28]	; (8012cf8 <_txe_semaphore_put+0x38>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d002      	beq.n	8012ce4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012cde:	230c      	movs	r3, #12
 8012ce0:	60fb      	str	r3, [r7, #12]
 8012ce2:	e003      	b.n	8012cec <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7fe fecb 	bl	8011a80 <_tx_semaphore_put>
 8012cea:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012cec:	68fb      	ldr	r3, [r7, #12]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	53454d41 	.word	0x53454d41

08012cfc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b09a      	sub	sp, #104	; 0x68
 8012d00:	af06      	add	r7, sp, #24
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
 8012d08:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d102      	bne.n	8012d1a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012d14:	230e      	movs	r3, #14
 8012d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d18:	e0bb      	b.n	8012e92 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8012d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d1c:	2bb4      	cmp	r3, #180	; 0xb4
 8012d1e:	d002      	beq.n	8012d26 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012d20:	230e      	movs	r3, #14
 8012d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d24:	e0b5      	b.n	8012e92 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d26:	f3ef 8310 	mrs	r3, PRIMASK
 8012d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8012d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012d30:	b672      	cpsid	i
    return(int_posture);
 8012d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012d34:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012d36:	4b64      	ldr	r3, [pc, #400]	; (8012ec8 <_txe_thread_create+0x1cc>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	4a62      	ldr	r2, [pc, #392]	; (8012ec8 <_txe_thread_create+0x1cc>)
 8012d3e:	6013      	str	r3, [r2, #0]
 8012d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d46:	f383 8810 	msr	PRIMASK, r3
}
 8012d4a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8012d50:	4b5e      	ldr	r3, [pc, #376]	; (8012ecc <_txe_thread_create+0x1d0>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8012d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d58:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8012d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d5c:	3b01      	subs	r3, #1
 8012d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d60:	4413      	add	r3, r2
 8012d62:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8012d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d66:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012d68:	2300      	movs	r3, #0
 8012d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8012d6c:	e02b      	b.n	8012dc6 <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d101      	bne.n	8012d7a <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8012d76:	2301      	movs	r3, #1
 8012d78:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8012d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d028      	beq.n	8012dd2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8012d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d308      	bcc.n	8012d9c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8012d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d8c:	691b      	ldr	r3, [r3, #16]
 8012d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d203      	bcs.n	8012d9c <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012d94:	2300      	movs	r3, #0
 8012d96:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8012d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d308      	bcc.n	8012db8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8012da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012da8:	691b      	ldr	r3, [r3, #16]
 8012daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d203      	bcs.n	8012db8 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012db0:	2300      	movs	r3, #0
 8012db2:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012db4:	2301      	movs	r3, #1
 8012db6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8012db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012dbe:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8012dc6:	4b42      	ldr	r3, [pc, #264]	; (8012ed0 <_txe_thread_create+0x1d4>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d3ce      	bcc.n	8012d6e <_txe_thread_create+0x72>
 8012dd0:	e000      	b.n	8012dd4 <_txe_thread_create+0xd8>
                break;
 8012dd2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8012dd8:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012dda:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012ddc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012dde:	b672      	cpsid	i
    return(int_posture);
 8012de0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012de2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012de4:	4b38      	ldr	r3, [pc, #224]	; (8012ec8 <_txe_thread_create+0x1cc>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3b01      	subs	r3, #1
 8012dea:	4a37      	ldr	r2, [pc, #220]	; (8012ec8 <_txe_thread_create+0x1cc>)
 8012dec:	6013      	str	r3, [r2, #0]
 8012dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012df2:	6a3b      	ldr	r3, [r7, #32]
 8012df4:	f383 8810 	msr	PRIMASK, r3
}
 8012df8:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012dfa:	f7ff f847 	bl	8011e8c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8012dfe:	68fa      	ldr	r2, [r7, #12]
 8012e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d102      	bne.n	8012e0c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8012e06:	230e      	movs	r3, #14
 8012e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e0a:	e042      	b.n	8012e92 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8012e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d102      	bne.n	8012e18 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8012e12:	2303      	movs	r3, #3
 8012e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e16:	e03c      	b.n	8012e92 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d102      	bne.n	8012e24 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8012e1e:	2303      	movs	r3, #3
 8012e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e22:	e036      	b.n	8012e92 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8012e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e26:	2bc7      	cmp	r3, #199	; 0xc7
 8012e28:	d802      	bhi.n	8012e30 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8012e2a:	2305      	movs	r3, #5
 8012e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e2e:	e030      	b.n	8012e92 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8012e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e32:	2b1f      	cmp	r3, #31
 8012e34:	d902      	bls.n	8012e3c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8012e36:	230f      	movs	r3, #15
 8012e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e3a:	e02a      	b.n	8012e92 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8012e3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d902      	bls.n	8012e4a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8012e44:	2318      	movs	r3, #24
 8012e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e48:	e023      	b.n	8012e92 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8012e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d902      	bls.n	8012e56 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8012e50:	2310      	movs	r3, #16
 8012e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e54:	e01d      	b.n	8012e92 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8012e56:	4b1f      	ldr	r3, [pc, #124]	; (8012ed4 <_txe_thread_create+0x1d8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5e:	4a1e      	ldr	r2, [pc, #120]	; (8012ed8 <_txe_thread_create+0x1dc>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d101      	bne.n	8012e68 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012e64:	2313      	movs	r3, #19
 8012e66:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e68:	f3ef 8305 	mrs	r3, IPSR
 8012e6c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012e6e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012e70:	4b1a      	ldr	r3, [pc, #104]	; (8012edc <_txe_thread_create+0x1e0>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4313      	orrs	r3, r2
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00b      	beq.n	8012e92 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e7a:	f3ef 8305 	mrs	r3, IPSR
 8012e7e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012e80:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012e82:	4b16      	ldr	r3, [pc, #88]	; (8012edc <_txe_thread_create+0x1e0>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4313      	orrs	r3, r2
 8012e88:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012e8c:	d201      	bcs.n	8012e92 <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012e8e:	2313      	movs	r3, #19
 8012e90:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d112      	bne.n	8012ebe <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8012e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e9a:	9305      	str	r3, [sp, #20]
 8012e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e9e:	9304      	str	r3, [sp, #16]
 8012ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ea2:	9303      	str	r3, [sp, #12]
 8012ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ea6:	9302      	str	r3, [sp, #8]
 8012ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012eaa:	9301      	str	r3, [sp, #4]
 8012eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	68b9      	ldr	r1, [r7, #8]
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f7fe fe4e 	bl	8011b58 <_tx_thread_create>
 8012ebc:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8012ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3750      	adds	r7, #80	; 0x50
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	20003904 	.word	0x20003904
 8012ecc:	20003870 	.word	0x20003870
 8012ed0:	20003874 	.word	0x20003874
 8012ed4:	20003868 	.word	0x20003868
 8012ed8:	200039b4 	.word	0x200039b4
 8012edc:	20000084 	.word	0x20000084

08012ee0 <atof>:
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	f002 ba43 	b.w	801536c <strtod>

08012ee6 <atoi>:
 8012ee6:	220a      	movs	r2, #10
 8012ee8:	2100      	movs	r1, #0
 8012eea:	f002 bacf 	b.w	801548c <strtol>
	...

08012ef0 <__errno>:
 8012ef0:	4b01      	ldr	r3, [pc, #4]	; (8012ef8 <__errno+0x8>)
 8012ef2:	6818      	ldr	r0, [r3, #0]
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	20000088 	.word	0x20000088

08012efc <__sflush_r>:
 8012efc:	898a      	ldrh	r2, [r1, #12]
 8012efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f02:	4605      	mov	r5, r0
 8012f04:	0710      	lsls	r0, r2, #28
 8012f06:	460c      	mov	r4, r1
 8012f08:	d458      	bmi.n	8012fbc <__sflush_r+0xc0>
 8012f0a:	684b      	ldr	r3, [r1, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	dc05      	bgt.n	8012f1c <__sflush_r+0x20>
 8012f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	dc02      	bgt.n	8012f1c <__sflush_r+0x20>
 8012f16:	2000      	movs	r0, #0
 8012f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f1e:	2e00      	cmp	r6, #0
 8012f20:	d0f9      	beq.n	8012f16 <__sflush_r+0x1a>
 8012f22:	2300      	movs	r3, #0
 8012f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f28:	682f      	ldr	r7, [r5, #0]
 8012f2a:	602b      	str	r3, [r5, #0]
 8012f2c:	d032      	beq.n	8012f94 <__sflush_r+0x98>
 8012f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f30:	89a3      	ldrh	r3, [r4, #12]
 8012f32:	075a      	lsls	r2, r3, #29
 8012f34:	d505      	bpl.n	8012f42 <__sflush_r+0x46>
 8012f36:	6863      	ldr	r3, [r4, #4]
 8012f38:	1ac0      	subs	r0, r0, r3
 8012f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f3c:	b10b      	cbz	r3, 8012f42 <__sflush_r+0x46>
 8012f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f40:	1ac0      	subs	r0, r0, r3
 8012f42:	2300      	movs	r3, #0
 8012f44:	4602      	mov	r2, r0
 8012f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f48:	6a21      	ldr	r1, [r4, #32]
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	47b0      	blx	r6
 8012f4e:	1c43      	adds	r3, r0, #1
 8012f50:	89a3      	ldrh	r3, [r4, #12]
 8012f52:	d106      	bne.n	8012f62 <__sflush_r+0x66>
 8012f54:	6829      	ldr	r1, [r5, #0]
 8012f56:	291d      	cmp	r1, #29
 8012f58:	d82c      	bhi.n	8012fb4 <__sflush_r+0xb8>
 8012f5a:	4a2a      	ldr	r2, [pc, #168]	; (8013004 <__sflush_r+0x108>)
 8012f5c:	40ca      	lsrs	r2, r1
 8012f5e:	07d6      	lsls	r6, r2, #31
 8012f60:	d528      	bpl.n	8012fb4 <__sflush_r+0xb8>
 8012f62:	2200      	movs	r2, #0
 8012f64:	6062      	str	r2, [r4, #4]
 8012f66:	04d9      	lsls	r1, r3, #19
 8012f68:	6922      	ldr	r2, [r4, #16]
 8012f6a:	6022      	str	r2, [r4, #0]
 8012f6c:	d504      	bpl.n	8012f78 <__sflush_r+0x7c>
 8012f6e:	1c42      	adds	r2, r0, #1
 8012f70:	d101      	bne.n	8012f76 <__sflush_r+0x7a>
 8012f72:	682b      	ldr	r3, [r5, #0]
 8012f74:	b903      	cbnz	r3, 8012f78 <__sflush_r+0x7c>
 8012f76:	6560      	str	r0, [r4, #84]	; 0x54
 8012f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f7a:	602f      	str	r7, [r5, #0]
 8012f7c:	2900      	cmp	r1, #0
 8012f7e:	d0ca      	beq.n	8012f16 <__sflush_r+0x1a>
 8012f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f84:	4299      	cmp	r1, r3
 8012f86:	d002      	beq.n	8012f8e <__sflush_r+0x92>
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f000 fb07 	bl	801359c <_free_r>
 8012f8e:	2000      	movs	r0, #0
 8012f90:	6360      	str	r0, [r4, #52]	; 0x34
 8012f92:	e7c1      	b.n	8012f18 <__sflush_r+0x1c>
 8012f94:	6a21      	ldr	r1, [r4, #32]
 8012f96:	2301      	movs	r3, #1
 8012f98:	4628      	mov	r0, r5
 8012f9a:	47b0      	blx	r6
 8012f9c:	1c41      	adds	r1, r0, #1
 8012f9e:	d1c7      	bne.n	8012f30 <__sflush_r+0x34>
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d0c4      	beq.n	8012f30 <__sflush_r+0x34>
 8012fa6:	2b1d      	cmp	r3, #29
 8012fa8:	d001      	beq.n	8012fae <__sflush_r+0xb2>
 8012faa:	2b16      	cmp	r3, #22
 8012fac:	d101      	bne.n	8012fb2 <__sflush_r+0xb6>
 8012fae:	602f      	str	r7, [r5, #0]
 8012fb0:	e7b1      	b.n	8012f16 <__sflush_r+0x1a>
 8012fb2:	89a3      	ldrh	r3, [r4, #12]
 8012fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fb8:	81a3      	strh	r3, [r4, #12]
 8012fba:	e7ad      	b.n	8012f18 <__sflush_r+0x1c>
 8012fbc:	690f      	ldr	r7, [r1, #16]
 8012fbe:	2f00      	cmp	r7, #0
 8012fc0:	d0a9      	beq.n	8012f16 <__sflush_r+0x1a>
 8012fc2:	0793      	lsls	r3, r2, #30
 8012fc4:	680e      	ldr	r6, [r1, #0]
 8012fc6:	bf08      	it	eq
 8012fc8:	694b      	ldreq	r3, [r1, #20]
 8012fca:	600f      	str	r7, [r1, #0]
 8012fcc:	bf18      	it	ne
 8012fce:	2300      	movne	r3, #0
 8012fd0:	eba6 0807 	sub.w	r8, r6, r7
 8012fd4:	608b      	str	r3, [r1, #8]
 8012fd6:	f1b8 0f00 	cmp.w	r8, #0
 8012fda:	dd9c      	ble.n	8012f16 <__sflush_r+0x1a>
 8012fdc:	6a21      	ldr	r1, [r4, #32]
 8012fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012fe0:	4643      	mov	r3, r8
 8012fe2:	463a      	mov	r2, r7
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	47b0      	blx	r6
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	dc06      	bgt.n	8012ffa <__sflush_r+0xfe>
 8012fec:	89a3      	ldrh	r3, [r4, #12]
 8012fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ff2:	81a3      	strh	r3, [r4, #12]
 8012ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ff8:	e78e      	b.n	8012f18 <__sflush_r+0x1c>
 8012ffa:	4407      	add	r7, r0
 8012ffc:	eba8 0800 	sub.w	r8, r8, r0
 8013000:	e7e9      	b.n	8012fd6 <__sflush_r+0xda>
 8013002:	bf00      	nop
 8013004:	20400001 	.word	0x20400001

08013008 <_fflush_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	690b      	ldr	r3, [r1, #16]
 801300c:	4605      	mov	r5, r0
 801300e:	460c      	mov	r4, r1
 8013010:	b913      	cbnz	r3, 8013018 <_fflush_r+0x10>
 8013012:	2500      	movs	r5, #0
 8013014:	4628      	mov	r0, r5
 8013016:	bd38      	pop	{r3, r4, r5, pc}
 8013018:	b118      	cbz	r0, 8013022 <_fflush_r+0x1a>
 801301a:	6983      	ldr	r3, [r0, #24]
 801301c:	b90b      	cbnz	r3, 8013022 <_fflush_r+0x1a>
 801301e:	f000 f887 	bl	8013130 <__sinit>
 8013022:	4b14      	ldr	r3, [pc, #80]	; (8013074 <_fflush_r+0x6c>)
 8013024:	429c      	cmp	r4, r3
 8013026:	d11b      	bne.n	8013060 <_fflush_r+0x58>
 8013028:	686c      	ldr	r4, [r5, #4]
 801302a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d0ef      	beq.n	8013012 <_fflush_r+0xa>
 8013032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013034:	07d0      	lsls	r0, r2, #31
 8013036:	d404      	bmi.n	8013042 <_fflush_r+0x3a>
 8013038:	0599      	lsls	r1, r3, #22
 801303a:	d402      	bmi.n	8013042 <_fflush_r+0x3a>
 801303c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801303e:	f000 f9fa 	bl	8013436 <__retarget_lock_acquire_recursive>
 8013042:	4628      	mov	r0, r5
 8013044:	4621      	mov	r1, r4
 8013046:	f7ff ff59 	bl	8012efc <__sflush_r>
 801304a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801304c:	07da      	lsls	r2, r3, #31
 801304e:	4605      	mov	r5, r0
 8013050:	d4e0      	bmi.n	8013014 <_fflush_r+0xc>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	059b      	lsls	r3, r3, #22
 8013056:	d4dd      	bmi.n	8013014 <_fflush_r+0xc>
 8013058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801305a:	f000 f9ed 	bl	8013438 <__retarget_lock_release_recursive>
 801305e:	e7d9      	b.n	8013014 <_fflush_r+0xc>
 8013060:	4b05      	ldr	r3, [pc, #20]	; (8013078 <_fflush_r+0x70>)
 8013062:	429c      	cmp	r4, r3
 8013064:	d101      	bne.n	801306a <_fflush_r+0x62>
 8013066:	68ac      	ldr	r4, [r5, #8]
 8013068:	e7df      	b.n	801302a <_fflush_r+0x22>
 801306a:	4b04      	ldr	r3, [pc, #16]	; (801307c <_fflush_r+0x74>)
 801306c:	429c      	cmp	r4, r3
 801306e:	bf08      	it	eq
 8013070:	68ec      	ldreq	r4, [r5, #12]
 8013072:	e7da      	b.n	801302a <_fflush_r+0x22>
 8013074:	0801d014 	.word	0x0801d014
 8013078:	0801d034 	.word	0x0801d034
 801307c:	0801cff4 	.word	0x0801cff4

08013080 <std>:
 8013080:	2300      	movs	r3, #0
 8013082:	b510      	push	{r4, lr}
 8013084:	4604      	mov	r4, r0
 8013086:	e9c0 3300 	strd	r3, r3, [r0]
 801308a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801308e:	6083      	str	r3, [r0, #8]
 8013090:	8181      	strh	r1, [r0, #12]
 8013092:	6643      	str	r3, [r0, #100]	; 0x64
 8013094:	81c2      	strh	r2, [r0, #14]
 8013096:	6183      	str	r3, [r0, #24]
 8013098:	4619      	mov	r1, r3
 801309a:	2208      	movs	r2, #8
 801309c:	305c      	adds	r0, #92	; 0x5c
 801309e:	f000 fa5f 	bl	8013560 <memset>
 80130a2:	4b05      	ldr	r3, [pc, #20]	; (80130b8 <std+0x38>)
 80130a4:	6263      	str	r3, [r4, #36]	; 0x24
 80130a6:	4b05      	ldr	r3, [pc, #20]	; (80130bc <std+0x3c>)
 80130a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80130aa:	4b05      	ldr	r3, [pc, #20]	; (80130c0 <std+0x40>)
 80130ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80130ae:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <std+0x44>)
 80130b0:	6224      	str	r4, [r4, #32]
 80130b2:	6323      	str	r3, [r4, #48]	; 0x30
 80130b4:	bd10      	pop	{r4, pc}
 80130b6:	bf00      	nop
 80130b8:	080141e5 	.word	0x080141e5
 80130bc:	0801420b 	.word	0x0801420b
 80130c0:	08014243 	.word	0x08014243
 80130c4:	08014267 	.word	0x08014267

080130c8 <_cleanup_r>:
 80130c8:	4901      	ldr	r1, [pc, #4]	; (80130d0 <_cleanup_r+0x8>)
 80130ca:	f000 b901 	b.w	80132d0 <_fwalk_reent>
 80130ce:	bf00      	nop
 80130d0:	08013009 	.word	0x08013009

080130d4 <__sfmoreglue>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	2268      	movs	r2, #104	; 0x68
 80130d8:	1e4d      	subs	r5, r1, #1
 80130da:	4355      	muls	r5, r2
 80130dc:	460e      	mov	r6, r1
 80130de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130e2:	f000 fac7 	bl	8013674 <_malloc_r>
 80130e6:	4604      	mov	r4, r0
 80130e8:	b140      	cbz	r0, 80130fc <__sfmoreglue+0x28>
 80130ea:	2100      	movs	r1, #0
 80130ec:	e9c0 1600 	strd	r1, r6, [r0]
 80130f0:	300c      	adds	r0, #12
 80130f2:	60a0      	str	r0, [r4, #8]
 80130f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130f8:	f000 fa32 	bl	8013560 <memset>
 80130fc:	4620      	mov	r0, r4
 80130fe:	bd70      	pop	{r4, r5, r6, pc}

08013100 <__sfp_lock_acquire>:
 8013100:	4801      	ldr	r0, [pc, #4]	; (8013108 <__sfp_lock_acquire+0x8>)
 8013102:	f000 b998 	b.w	8013436 <__retarget_lock_acquire_recursive>
 8013106:	bf00      	nop
 8013108:	20003e79 	.word	0x20003e79

0801310c <__sfp_lock_release>:
 801310c:	4801      	ldr	r0, [pc, #4]	; (8013114 <__sfp_lock_release+0x8>)
 801310e:	f000 b993 	b.w	8013438 <__retarget_lock_release_recursive>
 8013112:	bf00      	nop
 8013114:	20003e79 	.word	0x20003e79

08013118 <__sinit_lock_acquire>:
 8013118:	4801      	ldr	r0, [pc, #4]	; (8013120 <__sinit_lock_acquire+0x8>)
 801311a:	f000 b98c 	b.w	8013436 <__retarget_lock_acquire_recursive>
 801311e:	bf00      	nop
 8013120:	20003e7a 	.word	0x20003e7a

08013124 <__sinit_lock_release>:
 8013124:	4801      	ldr	r0, [pc, #4]	; (801312c <__sinit_lock_release+0x8>)
 8013126:	f000 b987 	b.w	8013438 <__retarget_lock_release_recursive>
 801312a:	bf00      	nop
 801312c:	20003e7a 	.word	0x20003e7a

08013130 <__sinit>:
 8013130:	b510      	push	{r4, lr}
 8013132:	4604      	mov	r4, r0
 8013134:	f7ff fff0 	bl	8013118 <__sinit_lock_acquire>
 8013138:	69a3      	ldr	r3, [r4, #24]
 801313a:	b11b      	cbz	r3, 8013144 <__sinit+0x14>
 801313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013140:	f7ff bff0 	b.w	8013124 <__sinit_lock_release>
 8013144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013148:	6523      	str	r3, [r4, #80]	; 0x50
 801314a:	4b13      	ldr	r3, [pc, #76]	; (8013198 <__sinit+0x68>)
 801314c:	4a13      	ldr	r2, [pc, #76]	; (801319c <__sinit+0x6c>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	62a2      	str	r2, [r4, #40]	; 0x28
 8013152:	42a3      	cmp	r3, r4
 8013154:	bf04      	itt	eq
 8013156:	2301      	moveq	r3, #1
 8013158:	61a3      	streq	r3, [r4, #24]
 801315a:	4620      	mov	r0, r4
 801315c:	f000 f820 	bl	80131a0 <__sfp>
 8013160:	6060      	str	r0, [r4, #4]
 8013162:	4620      	mov	r0, r4
 8013164:	f000 f81c 	bl	80131a0 <__sfp>
 8013168:	60a0      	str	r0, [r4, #8]
 801316a:	4620      	mov	r0, r4
 801316c:	f000 f818 	bl	80131a0 <__sfp>
 8013170:	2200      	movs	r2, #0
 8013172:	60e0      	str	r0, [r4, #12]
 8013174:	2104      	movs	r1, #4
 8013176:	6860      	ldr	r0, [r4, #4]
 8013178:	f7ff ff82 	bl	8013080 <std>
 801317c:	68a0      	ldr	r0, [r4, #8]
 801317e:	2201      	movs	r2, #1
 8013180:	2109      	movs	r1, #9
 8013182:	f7ff ff7d 	bl	8013080 <std>
 8013186:	68e0      	ldr	r0, [r4, #12]
 8013188:	2202      	movs	r2, #2
 801318a:	2112      	movs	r1, #18
 801318c:	f7ff ff78 	bl	8013080 <std>
 8013190:	2301      	movs	r3, #1
 8013192:	61a3      	str	r3, [r4, #24]
 8013194:	e7d2      	b.n	801313c <__sinit+0xc>
 8013196:	bf00      	nop
 8013198:	0801d054 	.word	0x0801d054
 801319c:	080130c9 	.word	0x080130c9

080131a0 <__sfp>:
 80131a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a2:	4607      	mov	r7, r0
 80131a4:	f7ff ffac 	bl	8013100 <__sfp_lock_acquire>
 80131a8:	4b1e      	ldr	r3, [pc, #120]	; (8013224 <__sfp+0x84>)
 80131aa:	681e      	ldr	r6, [r3, #0]
 80131ac:	69b3      	ldr	r3, [r6, #24]
 80131ae:	b913      	cbnz	r3, 80131b6 <__sfp+0x16>
 80131b0:	4630      	mov	r0, r6
 80131b2:	f7ff ffbd 	bl	8013130 <__sinit>
 80131b6:	3648      	adds	r6, #72	; 0x48
 80131b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80131bc:	3b01      	subs	r3, #1
 80131be:	d503      	bpl.n	80131c8 <__sfp+0x28>
 80131c0:	6833      	ldr	r3, [r6, #0]
 80131c2:	b30b      	cbz	r3, 8013208 <__sfp+0x68>
 80131c4:	6836      	ldr	r6, [r6, #0]
 80131c6:	e7f7      	b.n	80131b8 <__sfp+0x18>
 80131c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80131cc:	b9d5      	cbnz	r5, 8013204 <__sfp+0x64>
 80131ce:	4b16      	ldr	r3, [pc, #88]	; (8013228 <__sfp+0x88>)
 80131d0:	60e3      	str	r3, [r4, #12]
 80131d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80131d6:	6665      	str	r5, [r4, #100]	; 0x64
 80131d8:	f000 f92c 	bl	8013434 <__retarget_lock_init_recursive>
 80131dc:	f7ff ff96 	bl	801310c <__sfp_lock_release>
 80131e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80131e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80131e8:	6025      	str	r5, [r4, #0]
 80131ea:	61a5      	str	r5, [r4, #24]
 80131ec:	2208      	movs	r2, #8
 80131ee:	4629      	mov	r1, r5
 80131f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80131f4:	f000 f9b4 	bl	8013560 <memset>
 80131f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80131fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013200:	4620      	mov	r0, r4
 8013202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013204:	3468      	adds	r4, #104	; 0x68
 8013206:	e7d9      	b.n	80131bc <__sfp+0x1c>
 8013208:	2104      	movs	r1, #4
 801320a:	4638      	mov	r0, r7
 801320c:	f7ff ff62 	bl	80130d4 <__sfmoreglue>
 8013210:	4604      	mov	r4, r0
 8013212:	6030      	str	r0, [r6, #0]
 8013214:	2800      	cmp	r0, #0
 8013216:	d1d5      	bne.n	80131c4 <__sfp+0x24>
 8013218:	f7ff ff78 	bl	801310c <__sfp_lock_release>
 801321c:	230c      	movs	r3, #12
 801321e:	603b      	str	r3, [r7, #0]
 8013220:	e7ee      	b.n	8013200 <__sfp+0x60>
 8013222:	bf00      	nop
 8013224:	0801d054 	.word	0x0801d054
 8013228:	ffff0001 	.word	0xffff0001

0801322c <fiprintf>:
 801322c:	b40e      	push	{r1, r2, r3}
 801322e:	b503      	push	{r0, r1, lr}
 8013230:	4601      	mov	r1, r0
 8013232:	ab03      	add	r3, sp, #12
 8013234:	4805      	ldr	r0, [pc, #20]	; (801324c <fiprintf+0x20>)
 8013236:	f853 2b04 	ldr.w	r2, [r3], #4
 801323a:	6800      	ldr	r0, [r0, #0]
 801323c:	9301      	str	r3, [sp, #4]
 801323e:	f000 fab7 	bl	80137b0 <_vfiprintf_r>
 8013242:	b002      	add	sp, #8
 8013244:	f85d eb04 	ldr.w	lr, [sp], #4
 8013248:	b003      	add	sp, #12
 801324a:	4770      	bx	lr
 801324c:	20000088 	.word	0x20000088

08013250 <_fputc_r>:
 8013250:	b570      	push	{r4, r5, r6, lr}
 8013252:	460e      	mov	r6, r1
 8013254:	4614      	mov	r4, r2
 8013256:	4605      	mov	r5, r0
 8013258:	b118      	cbz	r0, 8013262 <_fputc_r+0x12>
 801325a:	6983      	ldr	r3, [r0, #24]
 801325c:	b90b      	cbnz	r3, 8013262 <_fputc_r+0x12>
 801325e:	f7ff ff67 	bl	8013130 <__sinit>
 8013262:	4b14      	ldr	r3, [pc, #80]	; (80132b4 <_fputc_r+0x64>)
 8013264:	429c      	cmp	r4, r3
 8013266:	d11a      	bne.n	801329e <_fputc_r+0x4e>
 8013268:	686c      	ldr	r4, [r5, #4]
 801326a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801326c:	07d8      	lsls	r0, r3, #31
 801326e:	d405      	bmi.n	801327c <_fputc_r+0x2c>
 8013270:	89a3      	ldrh	r3, [r4, #12]
 8013272:	0599      	lsls	r1, r3, #22
 8013274:	d402      	bmi.n	801327c <_fputc_r+0x2c>
 8013276:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013278:	f000 f8dd 	bl	8013436 <__retarget_lock_acquire_recursive>
 801327c:	4622      	mov	r2, r4
 801327e:	4628      	mov	r0, r5
 8013280:	4631      	mov	r1, r6
 8013282:	f000 fd7b 	bl	8013d7c <_putc_r>
 8013286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013288:	07da      	lsls	r2, r3, #31
 801328a:	4605      	mov	r5, r0
 801328c:	d405      	bmi.n	801329a <_fputc_r+0x4a>
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	059b      	lsls	r3, r3, #22
 8013292:	d402      	bmi.n	801329a <_fputc_r+0x4a>
 8013294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013296:	f000 f8cf 	bl	8013438 <__retarget_lock_release_recursive>
 801329a:	4628      	mov	r0, r5
 801329c:	bd70      	pop	{r4, r5, r6, pc}
 801329e:	4b06      	ldr	r3, [pc, #24]	; (80132b8 <_fputc_r+0x68>)
 80132a0:	429c      	cmp	r4, r3
 80132a2:	d101      	bne.n	80132a8 <_fputc_r+0x58>
 80132a4:	68ac      	ldr	r4, [r5, #8]
 80132a6:	e7e0      	b.n	801326a <_fputc_r+0x1a>
 80132a8:	4b04      	ldr	r3, [pc, #16]	; (80132bc <_fputc_r+0x6c>)
 80132aa:	429c      	cmp	r4, r3
 80132ac:	bf08      	it	eq
 80132ae:	68ec      	ldreq	r4, [r5, #12]
 80132b0:	e7db      	b.n	801326a <_fputc_r+0x1a>
 80132b2:	bf00      	nop
 80132b4:	0801d014 	.word	0x0801d014
 80132b8:	0801d034 	.word	0x0801d034
 80132bc:	0801cff4 	.word	0x0801cff4

080132c0 <fputc>:
 80132c0:	4b02      	ldr	r3, [pc, #8]	; (80132cc <fputc+0xc>)
 80132c2:	460a      	mov	r2, r1
 80132c4:	4601      	mov	r1, r0
 80132c6:	6818      	ldr	r0, [r3, #0]
 80132c8:	f7ff bfc2 	b.w	8013250 <_fputc_r>
 80132cc:	20000088 	.word	0x20000088

080132d0 <_fwalk_reent>:
 80132d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132d4:	4606      	mov	r6, r0
 80132d6:	4688      	mov	r8, r1
 80132d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132dc:	2700      	movs	r7, #0
 80132de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132e2:	f1b9 0901 	subs.w	r9, r9, #1
 80132e6:	d505      	bpl.n	80132f4 <_fwalk_reent+0x24>
 80132e8:	6824      	ldr	r4, [r4, #0]
 80132ea:	2c00      	cmp	r4, #0
 80132ec:	d1f7      	bne.n	80132de <_fwalk_reent+0xe>
 80132ee:	4638      	mov	r0, r7
 80132f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132f4:	89ab      	ldrh	r3, [r5, #12]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d907      	bls.n	801330a <_fwalk_reent+0x3a>
 80132fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132fe:	3301      	adds	r3, #1
 8013300:	d003      	beq.n	801330a <_fwalk_reent+0x3a>
 8013302:	4629      	mov	r1, r5
 8013304:	4630      	mov	r0, r6
 8013306:	47c0      	blx	r8
 8013308:	4307      	orrs	r7, r0
 801330a:	3568      	adds	r5, #104	; 0x68
 801330c:	e7e9      	b.n	80132e2 <_fwalk_reent+0x12>
	...

08013310 <_fwrite_r>:
 8013310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013314:	9c08      	ldr	r4, [sp, #32]
 8013316:	468a      	mov	sl, r1
 8013318:	4690      	mov	r8, r2
 801331a:	fb02 f903 	mul.w	r9, r2, r3
 801331e:	4605      	mov	r5, r0
 8013320:	b118      	cbz	r0, 801332a <_fwrite_r+0x1a>
 8013322:	6983      	ldr	r3, [r0, #24]
 8013324:	b90b      	cbnz	r3, 801332a <_fwrite_r+0x1a>
 8013326:	f7ff ff03 	bl	8013130 <__sinit>
 801332a:	4b26      	ldr	r3, [pc, #152]	; (80133c4 <_fwrite_r+0xb4>)
 801332c:	429c      	cmp	r4, r3
 801332e:	d123      	bne.n	8013378 <_fwrite_r+0x68>
 8013330:	686c      	ldr	r4, [r5, #4]
 8013332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013334:	07de      	lsls	r6, r3, #31
 8013336:	d405      	bmi.n	8013344 <_fwrite_r+0x34>
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	0598      	lsls	r0, r3, #22
 801333c:	d402      	bmi.n	8013344 <_fwrite_r+0x34>
 801333e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013340:	f000 f879 	bl	8013436 <__retarget_lock_acquire_recursive>
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	0719      	lsls	r1, r3, #28
 8013348:	d520      	bpl.n	801338c <_fwrite_r+0x7c>
 801334a:	6923      	ldr	r3, [r4, #16]
 801334c:	b1f3      	cbz	r3, 801338c <_fwrite_r+0x7c>
 801334e:	2600      	movs	r6, #0
 8013350:	454e      	cmp	r6, r9
 8013352:	d029      	beq.n	80133a8 <_fwrite_r+0x98>
 8013354:	68a7      	ldr	r7, [r4, #8]
 8013356:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801335a:	3f01      	subs	r7, #1
 801335c:	2f00      	cmp	r7, #0
 801335e:	60a7      	str	r7, [r4, #8]
 8013360:	da04      	bge.n	801336c <_fwrite_r+0x5c>
 8013362:	69a3      	ldr	r3, [r4, #24]
 8013364:	429f      	cmp	r7, r3
 8013366:	db19      	blt.n	801339c <_fwrite_r+0x8c>
 8013368:	290a      	cmp	r1, #10
 801336a:	d017      	beq.n	801339c <_fwrite_r+0x8c>
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	1c5a      	adds	r2, r3, #1
 8013370:	6022      	str	r2, [r4, #0]
 8013372:	7019      	strb	r1, [r3, #0]
 8013374:	3601      	adds	r6, #1
 8013376:	e7eb      	b.n	8013350 <_fwrite_r+0x40>
 8013378:	4b13      	ldr	r3, [pc, #76]	; (80133c8 <_fwrite_r+0xb8>)
 801337a:	429c      	cmp	r4, r3
 801337c:	d101      	bne.n	8013382 <_fwrite_r+0x72>
 801337e:	68ac      	ldr	r4, [r5, #8]
 8013380:	e7d7      	b.n	8013332 <_fwrite_r+0x22>
 8013382:	4b12      	ldr	r3, [pc, #72]	; (80133cc <_fwrite_r+0xbc>)
 8013384:	429c      	cmp	r4, r3
 8013386:	bf08      	it	eq
 8013388:	68ec      	ldreq	r4, [r5, #12]
 801338a:	e7d2      	b.n	8013332 <_fwrite_r+0x22>
 801338c:	4621      	mov	r1, r4
 801338e:	4628      	mov	r0, r5
 8013390:	f002 f8f4 	bl	801557c <__swsetup_r>
 8013394:	2800      	cmp	r0, #0
 8013396:	d0da      	beq.n	801334e <_fwrite_r+0x3e>
 8013398:	2600      	movs	r6, #0
 801339a:	e005      	b.n	80133a8 <_fwrite_r+0x98>
 801339c:	4622      	mov	r2, r4
 801339e:	4628      	mov	r0, r5
 80133a0:	f002 f888 	bl	80154b4 <__swbuf_r>
 80133a4:	3001      	adds	r0, #1
 80133a6:	d1e5      	bne.n	8013374 <_fwrite_r+0x64>
 80133a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133aa:	07da      	lsls	r2, r3, #31
 80133ac:	d405      	bmi.n	80133ba <_fwrite_r+0xaa>
 80133ae:	89a3      	ldrh	r3, [r4, #12]
 80133b0:	059b      	lsls	r3, r3, #22
 80133b2:	d402      	bmi.n	80133ba <_fwrite_r+0xaa>
 80133b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133b6:	f000 f83f 	bl	8013438 <__retarget_lock_release_recursive>
 80133ba:	fbb6 f0f8 	udiv	r0, r6, r8
 80133be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c2:	bf00      	nop
 80133c4:	0801d014 	.word	0x0801d014
 80133c8:	0801d034 	.word	0x0801d034
 80133cc:	0801cff4 	.word	0x0801cff4

080133d0 <fwrite>:
 80133d0:	b507      	push	{r0, r1, r2, lr}
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	4613      	mov	r3, r2
 80133d6:	460a      	mov	r2, r1
 80133d8:	4601      	mov	r1, r0
 80133da:	4803      	ldr	r0, [pc, #12]	; (80133e8 <fwrite+0x18>)
 80133dc:	6800      	ldr	r0, [r0, #0]
 80133de:	f7ff ff97 	bl	8013310 <_fwrite_r>
 80133e2:	b003      	add	sp, #12
 80133e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80133e8:	20000088 	.word	0x20000088

080133ec <__libc_init_array>:
 80133ec:	b570      	push	{r4, r5, r6, lr}
 80133ee:	4d0d      	ldr	r5, [pc, #52]	; (8013424 <__libc_init_array+0x38>)
 80133f0:	4c0d      	ldr	r4, [pc, #52]	; (8013428 <__libc_init_array+0x3c>)
 80133f2:	1b64      	subs	r4, r4, r5
 80133f4:	10a4      	asrs	r4, r4, #2
 80133f6:	2600      	movs	r6, #0
 80133f8:	42a6      	cmp	r6, r4
 80133fa:	d109      	bne.n	8013410 <__libc_init_array+0x24>
 80133fc:	4d0b      	ldr	r5, [pc, #44]	; (801342c <__libc_init_array+0x40>)
 80133fe:	4c0c      	ldr	r4, [pc, #48]	; (8013430 <__libc_init_array+0x44>)
 8013400:	f004 f834 	bl	801746c <_init>
 8013404:	1b64      	subs	r4, r4, r5
 8013406:	10a4      	asrs	r4, r4, #2
 8013408:	2600      	movs	r6, #0
 801340a:	42a6      	cmp	r6, r4
 801340c:	d105      	bne.n	801341a <__libc_init_array+0x2e>
 801340e:	bd70      	pop	{r4, r5, r6, pc}
 8013410:	f855 3b04 	ldr.w	r3, [r5], #4
 8013414:	4798      	blx	r3
 8013416:	3601      	adds	r6, #1
 8013418:	e7ee      	b.n	80133f8 <__libc_init_array+0xc>
 801341a:	f855 3b04 	ldr.w	r3, [r5], #4
 801341e:	4798      	blx	r3
 8013420:	3601      	adds	r6, #1
 8013422:	e7f2      	b.n	801340a <__libc_init_array+0x1e>
 8013424:	0801d9dc 	.word	0x0801d9dc
 8013428:	0801d9dc 	.word	0x0801d9dc
 801342c:	0801d9dc 	.word	0x0801d9dc
 8013430:	0801d9e0 	.word	0x0801d9e0

08013434 <__retarget_lock_init_recursive>:
 8013434:	4770      	bx	lr

08013436 <__retarget_lock_acquire_recursive>:
 8013436:	4770      	bx	lr

08013438 <__retarget_lock_release_recursive>:
 8013438:	4770      	bx	lr

0801343a <__swhatbuf_r>:
 801343a:	b570      	push	{r4, r5, r6, lr}
 801343c:	460e      	mov	r6, r1
 801343e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013442:	2900      	cmp	r1, #0
 8013444:	b096      	sub	sp, #88	; 0x58
 8013446:	4614      	mov	r4, r2
 8013448:	461d      	mov	r5, r3
 801344a:	da08      	bge.n	801345e <__swhatbuf_r+0x24>
 801344c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013450:	2200      	movs	r2, #0
 8013452:	602a      	str	r2, [r5, #0]
 8013454:	061a      	lsls	r2, r3, #24
 8013456:	d410      	bmi.n	801347a <__swhatbuf_r+0x40>
 8013458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801345c:	e00e      	b.n	801347c <__swhatbuf_r+0x42>
 801345e:	466a      	mov	r2, sp
 8013460:	f002 f90a 	bl	8015678 <_fstat_r>
 8013464:	2800      	cmp	r0, #0
 8013466:	dbf1      	blt.n	801344c <__swhatbuf_r+0x12>
 8013468:	9a01      	ldr	r2, [sp, #4]
 801346a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801346e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013472:	425a      	negs	r2, r3
 8013474:	415a      	adcs	r2, r3
 8013476:	602a      	str	r2, [r5, #0]
 8013478:	e7ee      	b.n	8013458 <__swhatbuf_r+0x1e>
 801347a:	2340      	movs	r3, #64	; 0x40
 801347c:	2000      	movs	r0, #0
 801347e:	6023      	str	r3, [r4, #0]
 8013480:	b016      	add	sp, #88	; 0x58
 8013482:	bd70      	pop	{r4, r5, r6, pc}

08013484 <__smakebuf_r>:
 8013484:	898b      	ldrh	r3, [r1, #12]
 8013486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013488:	079d      	lsls	r5, r3, #30
 801348a:	4606      	mov	r6, r0
 801348c:	460c      	mov	r4, r1
 801348e:	d507      	bpl.n	80134a0 <__smakebuf_r+0x1c>
 8013490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013494:	6023      	str	r3, [r4, #0]
 8013496:	6123      	str	r3, [r4, #16]
 8013498:	2301      	movs	r3, #1
 801349a:	6163      	str	r3, [r4, #20]
 801349c:	b002      	add	sp, #8
 801349e:	bd70      	pop	{r4, r5, r6, pc}
 80134a0:	ab01      	add	r3, sp, #4
 80134a2:	466a      	mov	r2, sp
 80134a4:	f7ff ffc9 	bl	801343a <__swhatbuf_r>
 80134a8:	9900      	ldr	r1, [sp, #0]
 80134aa:	4605      	mov	r5, r0
 80134ac:	4630      	mov	r0, r6
 80134ae:	f000 f8e1 	bl	8013674 <_malloc_r>
 80134b2:	b948      	cbnz	r0, 80134c8 <__smakebuf_r+0x44>
 80134b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134b8:	059a      	lsls	r2, r3, #22
 80134ba:	d4ef      	bmi.n	801349c <__smakebuf_r+0x18>
 80134bc:	f023 0303 	bic.w	r3, r3, #3
 80134c0:	f043 0302 	orr.w	r3, r3, #2
 80134c4:	81a3      	strh	r3, [r4, #12]
 80134c6:	e7e3      	b.n	8013490 <__smakebuf_r+0xc>
 80134c8:	4b0d      	ldr	r3, [pc, #52]	; (8013500 <__smakebuf_r+0x7c>)
 80134ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80134cc:	89a3      	ldrh	r3, [r4, #12]
 80134ce:	6020      	str	r0, [r4, #0]
 80134d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134d4:	81a3      	strh	r3, [r4, #12]
 80134d6:	9b00      	ldr	r3, [sp, #0]
 80134d8:	6163      	str	r3, [r4, #20]
 80134da:	9b01      	ldr	r3, [sp, #4]
 80134dc:	6120      	str	r0, [r4, #16]
 80134de:	b15b      	cbz	r3, 80134f8 <__smakebuf_r+0x74>
 80134e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134e4:	4630      	mov	r0, r6
 80134e6:	f002 fc5b 	bl	8015da0 <_isatty_r>
 80134ea:	b128      	cbz	r0, 80134f8 <__smakebuf_r+0x74>
 80134ec:	89a3      	ldrh	r3, [r4, #12]
 80134ee:	f023 0303 	bic.w	r3, r3, #3
 80134f2:	f043 0301 	orr.w	r3, r3, #1
 80134f6:	81a3      	strh	r3, [r4, #12]
 80134f8:	89a0      	ldrh	r0, [r4, #12]
 80134fa:	4305      	orrs	r5, r0
 80134fc:	81a5      	strh	r5, [r4, #12]
 80134fe:	e7cd      	b.n	801349c <__smakebuf_r+0x18>
 8013500:	080130c9 	.word	0x080130c9

08013504 <malloc>:
 8013504:	4b02      	ldr	r3, [pc, #8]	; (8013510 <malloc+0xc>)
 8013506:	4601      	mov	r1, r0
 8013508:	6818      	ldr	r0, [r3, #0]
 801350a:	f000 b8b3 	b.w	8013674 <_malloc_r>
 801350e:	bf00      	nop
 8013510:	20000088 	.word	0x20000088

08013514 <free>:
 8013514:	4b02      	ldr	r3, [pc, #8]	; (8013520 <free+0xc>)
 8013516:	4601      	mov	r1, r0
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	f000 b83f 	b.w	801359c <_free_r>
 801351e:	bf00      	nop
 8013520:	20000088 	.word	0x20000088

08013524 <memcmp>:
 8013524:	b510      	push	{r4, lr}
 8013526:	3901      	subs	r1, #1
 8013528:	4402      	add	r2, r0
 801352a:	4290      	cmp	r0, r2
 801352c:	d101      	bne.n	8013532 <memcmp+0xe>
 801352e:	2000      	movs	r0, #0
 8013530:	e005      	b.n	801353e <memcmp+0x1a>
 8013532:	7803      	ldrb	r3, [r0, #0]
 8013534:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013538:	42a3      	cmp	r3, r4
 801353a:	d001      	beq.n	8013540 <memcmp+0x1c>
 801353c:	1b18      	subs	r0, r3, r4
 801353e:	bd10      	pop	{r4, pc}
 8013540:	3001      	adds	r0, #1
 8013542:	e7f2      	b.n	801352a <memcmp+0x6>

08013544 <memcpy>:
 8013544:	440a      	add	r2, r1
 8013546:	4291      	cmp	r1, r2
 8013548:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801354c:	d100      	bne.n	8013550 <memcpy+0xc>
 801354e:	4770      	bx	lr
 8013550:	b510      	push	{r4, lr}
 8013552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013556:	f803 4f01 	strb.w	r4, [r3, #1]!
 801355a:	4291      	cmp	r1, r2
 801355c:	d1f9      	bne.n	8013552 <memcpy+0xe>
 801355e:	bd10      	pop	{r4, pc}

08013560 <memset>:
 8013560:	4402      	add	r2, r0
 8013562:	4603      	mov	r3, r0
 8013564:	4293      	cmp	r3, r2
 8013566:	d100      	bne.n	801356a <memset+0xa>
 8013568:	4770      	bx	lr
 801356a:	f803 1b01 	strb.w	r1, [r3], #1
 801356e:	e7f9      	b.n	8013564 <memset+0x4>

08013570 <_calloc_r>:
 8013570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013572:	fba1 2402 	umull	r2, r4, r1, r2
 8013576:	b94c      	cbnz	r4, 801358c <_calloc_r+0x1c>
 8013578:	4611      	mov	r1, r2
 801357a:	9201      	str	r2, [sp, #4]
 801357c:	f000 f87a 	bl	8013674 <_malloc_r>
 8013580:	9a01      	ldr	r2, [sp, #4]
 8013582:	4605      	mov	r5, r0
 8013584:	b930      	cbnz	r0, 8013594 <_calloc_r+0x24>
 8013586:	4628      	mov	r0, r5
 8013588:	b003      	add	sp, #12
 801358a:	bd30      	pop	{r4, r5, pc}
 801358c:	220c      	movs	r2, #12
 801358e:	6002      	str	r2, [r0, #0]
 8013590:	2500      	movs	r5, #0
 8013592:	e7f8      	b.n	8013586 <_calloc_r+0x16>
 8013594:	4621      	mov	r1, r4
 8013596:	f7ff ffe3 	bl	8013560 <memset>
 801359a:	e7f4      	b.n	8013586 <_calloc_r+0x16>

0801359c <_free_r>:
 801359c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801359e:	2900      	cmp	r1, #0
 80135a0:	d044      	beq.n	801362c <_free_r+0x90>
 80135a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135a6:	9001      	str	r0, [sp, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f1a1 0404 	sub.w	r4, r1, #4
 80135ae:	bfb8      	it	lt
 80135b0:	18e4      	addlt	r4, r4, r3
 80135b2:	f002 fc43 	bl	8015e3c <__malloc_lock>
 80135b6:	4a1e      	ldr	r2, [pc, #120]	; (8013630 <_free_r+0x94>)
 80135b8:	9801      	ldr	r0, [sp, #4]
 80135ba:	6813      	ldr	r3, [r2, #0]
 80135bc:	b933      	cbnz	r3, 80135cc <_free_r+0x30>
 80135be:	6063      	str	r3, [r4, #4]
 80135c0:	6014      	str	r4, [r2, #0]
 80135c2:	b003      	add	sp, #12
 80135c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135c8:	f002 bc3e 	b.w	8015e48 <__malloc_unlock>
 80135cc:	42a3      	cmp	r3, r4
 80135ce:	d908      	bls.n	80135e2 <_free_r+0x46>
 80135d0:	6825      	ldr	r5, [r4, #0]
 80135d2:	1961      	adds	r1, r4, r5
 80135d4:	428b      	cmp	r3, r1
 80135d6:	bf01      	itttt	eq
 80135d8:	6819      	ldreq	r1, [r3, #0]
 80135da:	685b      	ldreq	r3, [r3, #4]
 80135dc:	1949      	addeq	r1, r1, r5
 80135de:	6021      	streq	r1, [r4, #0]
 80135e0:	e7ed      	b.n	80135be <_free_r+0x22>
 80135e2:	461a      	mov	r2, r3
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	b10b      	cbz	r3, 80135ec <_free_r+0x50>
 80135e8:	42a3      	cmp	r3, r4
 80135ea:	d9fa      	bls.n	80135e2 <_free_r+0x46>
 80135ec:	6811      	ldr	r1, [r2, #0]
 80135ee:	1855      	adds	r5, r2, r1
 80135f0:	42a5      	cmp	r5, r4
 80135f2:	d10b      	bne.n	801360c <_free_r+0x70>
 80135f4:	6824      	ldr	r4, [r4, #0]
 80135f6:	4421      	add	r1, r4
 80135f8:	1854      	adds	r4, r2, r1
 80135fa:	42a3      	cmp	r3, r4
 80135fc:	6011      	str	r1, [r2, #0]
 80135fe:	d1e0      	bne.n	80135c2 <_free_r+0x26>
 8013600:	681c      	ldr	r4, [r3, #0]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	6053      	str	r3, [r2, #4]
 8013606:	4421      	add	r1, r4
 8013608:	6011      	str	r1, [r2, #0]
 801360a:	e7da      	b.n	80135c2 <_free_r+0x26>
 801360c:	d902      	bls.n	8013614 <_free_r+0x78>
 801360e:	230c      	movs	r3, #12
 8013610:	6003      	str	r3, [r0, #0]
 8013612:	e7d6      	b.n	80135c2 <_free_r+0x26>
 8013614:	6825      	ldr	r5, [r4, #0]
 8013616:	1961      	adds	r1, r4, r5
 8013618:	428b      	cmp	r3, r1
 801361a:	bf04      	itt	eq
 801361c:	6819      	ldreq	r1, [r3, #0]
 801361e:	685b      	ldreq	r3, [r3, #4]
 8013620:	6063      	str	r3, [r4, #4]
 8013622:	bf04      	itt	eq
 8013624:	1949      	addeq	r1, r1, r5
 8013626:	6021      	streq	r1, [r4, #0]
 8013628:	6054      	str	r4, [r2, #4]
 801362a:	e7ca      	b.n	80135c2 <_free_r+0x26>
 801362c:	b003      	add	sp, #12
 801362e:	bd30      	pop	{r4, r5, pc}
 8013630:	20003e7c 	.word	0x20003e7c

08013634 <sbrk_aligned>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	4e0e      	ldr	r6, [pc, #56]	; (8013670 <sbrk_aligned+0x3c>)
 8013638:	460c      	mov	r4, r1
 801363a:	6831      	ldr	r1, [r6, #0]
 801363c:	4605      	mov	r5, r0
 801363e:	b911      	cbnz	r1, 8013646 <sbrk_aligned+0x12>
 8013640:	f000 fd74 	bl	801412c <_sbrk_r>
 8013644:	6030      	str	r0, [r6, #0]
 8013646:	4621      	mov	r1, r4
 8013648:	4628      	mov	r0, r5
 801364a:	f000 fd6f 	bl	801412c <_sbrk_r>
 801364e:	1c43      	adds	r3, r0, #1
 8013650:	d00a      	beq.n	8013668 <sbrk_aligned+0x34>
 8013652:	1cc4      	adds	r4, r0, #3
 8013654:	f024 0403 	bic.w	r4, r4, #3
 8013658:	42a0      	cmp	r0, r4
 801365a:	d007      	beq.n	801366c <sbrk_aligned+0x38>
 801365c:	1a21      	subs	r1, r4, r0
 801365e:	4628      	mov	r0, r5
 8013660:	f000 fd64 	bl	801412c <_sbrk_r>
 8013664:	3001      	adds	r0, #1
 8013666:	d101      	bne.n	801366c <sbrk_aligned+0x38>
 8013668:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801366c:	4620      	mov	r0, r4
 801366e:	bd70      	pop	{r4, r5, r6, pc}
 8013670:	20003e80 	.word	0x20003e80

08013674 <_malloc_r>:
 8013674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013678:	1ccd      	adds	r5, r1, #3
 801367a:	f025 0503 	bic.w	r5, r5, #3
 801367e:	3508      	adds	r5, #8
 8013680:	2d0c      	cmp	r5, #12
 8013682:	bf38      	it	cc
 8013684:	250c      	movcc	r5, #12
 8013686:	2d00      	cmp	r5, #0
 8013688:	4607      	mov	r7, r0
 801368a:	db01      	blt.n	8013690 <_malloc_r+0x1c>
 801368c:	42a9      	cmp	r1, r5
 801368e:	d905      	bls.n	801369c <_malloc_r+0x28>
 8013690:	230c      	movs	r3, #12
 8013692:	603b      	str	r3, [r7, #0]
 8013694:	2600      	movs	r6, #0
 8013696:	4630      	mov	r0, r6
 8013698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369c:	4e2e      	ldr	r6, [pc, #184]	; (8013758 <_malloc_r+0xe4>)
 801369e:	f002 fbcd 	bl	8015e3c <__malloc_lock>
 80136a2:	6833      	ldr	r3, [r6, #0]
 80136a4:	461c      	mov	r4, r3
 80136a6:	bb34      	cbnz	r4, 80136f6 <_malloc_r+0x82>
 80136a8:	4629      	mov	r1, r5
 80136aa:	4638      	mov	r0, r7
 80136ac:	f7ff ffc2 	bl	8013634 <sbrk_aligned>
 80136b0:	1c43      	adds	r3, r0, #1
 80136b2:	4604      	mov	r4, r0
 80136b4:	d14d      	bne.n	8013752 <_malloc_r+0xde>
 80136b6:	6834      	ldr	r4, [r6, #0]
 80136b8:	4626      	mov	r6, r4
 80136ba:	2e00      	cmp	r6, #0
 80136bc:	d140      	bne.n	8013740 <_malloc_r+0xcc>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	4631      	mov	r1, r6
 80136c2:	4638      	mov	r0, r7
 80136c4:	eb04 0803 	add.w	r8, r4, r3
 80136c8:	f000 fd30 	bl	801412c <_sbrk_r>
 80136cc:	4580      	cmp	r8, r0
 80136ce:	d13a      	bne.n	8013746 <_malloc_r+0xd2>
 80136d0:	6821      	ldr	r1, [r4, #0]
 80136d2:	3503      	adds	r5, #3
 80136d4:	1a6d      	subs	r5, r5, r1
 80136d6:	f025 0503 	bic.w	r5, r5, #3
 80136da:	3508      	adds	r5, #8
 80136dc:	2d0c      	cmp	r5, #12
 80136de:	bf38      	it	cc
 80136e0:	250c      	movcc	r5, #12
 80136e2:	4629      	mov	r1, r5
 80136e4:	4638      	mov	r0, r7
 80136e6:	f7ff ffa5 	bl	8013634 <sbrk_aligned>
 80136ea:	3001      	adds	r0, #1
 80136ec:	d02b      	beq.n	8013746 <_malloc_r+0xd2>
 80136ee:	6823      	ldr	r3, [r4, #0]
 80136f0:	442b      	add	r3, r5
 80136f2:	6023      	str	r3, [r4, #0]
 80136f4:	e00e      	b.n	8013714 <_malloc_r+0xa0>
 80136f6:	6822      	ldr	r2, [r4, #0]
 80136f8:	1b52      	subs	r2, r2, r5
 80136fa:	d41e      	bmi.n	801373a <_malloc_r+0xc6>
 80136fc:	2a0b      	cmp	r2, #11
 80136fe:	d916      	bls.n	801372e <_malloc_r+0xba>
 8013700:	1961      	adds	r1, r4, r5
 8013702:	42a3      	cmp	r3, r4
 8013704:	6025      	str	r5, [r4, #0]
 8013706:	bf18      	it	ne
 8013708:	6059      	strne	r1, [r3, #4]
 801370a:	6863      	ldr	r3, [r4, #4]
 801370c:	bf08      	it	eq
 801370e:	6031      	streq	r1, [r6, #0]
 8013710:	5162      	str	r2, [r4, r5]
 8013712:	604b      	str	r3, [r1, #4]
 8013714:	4638      	mov	r0, r7
 8013716:	f104 060b 	add.w	r6, r4, #11
 801371a:	f002 fb95 	bl	8015e48 <__malloc_unlock>
 801371e:	f026 0607 	bic.w	r6, r6, #7
 8013722:	1d23      	adds	r3, r4, #4
 8013724:	1af2      	subs	r2, r6, r3
 8013726:	d0b6      	beq.n	8013696 <_malloc_r+0x22>
 8013728:	1b9b      	subs	r3, r3, r6
 801372a:	50a3      	str	r3, [r4, r2]
 801372c:	e7b3      	b.n	8013696 <_malloc_r+0x22>
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	42a3      	cmp	r3, r4
 8013732:	bf0c      	ite	eq
 8013734:	6032      	streq	r2, [r6, #0]
 8013736:	605a      	strne	r2, [r3, #4]
 8013738:	e7ec      	b.n	8013714 <_malloc_r+0xa0>
 801373a:	4623      	mov	r3, r4
 801373c:	6864      	ldr	r4, [r4, #4]
 801373e:	e7b2      	b.n	80136a6 <_malloc_r+0x32>
 8013740:	4634      	mov	r4, r6
 8013742:	6876      	ldr	r6, [r6, #4]
 8013744:	e7b9      	b.n	80136ba <_malloc_r+0x46>
 8013746:	230c      	movs	r3, #12
 8013748:	603b      	str	r3, [r7, #0]
 801374a:	4638      	mov	r0, r7
 801374c:	f002 fb7c 	bl	8015e48 <__malloc_unlock>
 8013750:	e7a1      	b.n	8013696 <_malloc_r+0x22>
 8013752:	6025      	str	r5, [r4, #0]
 8013754:	e7de      	b.n	8013714 <_malloc_r+0xa0>
 8013756:	bf00      	nop
 8013758:	20003e7c 	.word	0x20003e7c

0801375c <__sfputc_r>:
 801375c:	6893      	ldr	r3, [r2, #8]
 801375e:	3b01      	subs	r3, #1
 8013760:	2b00      	cmp	r3, #0
 8013762:	b410      	push	{r4}
 8013764:	6093      	str	r3, [r2, #8]
 8013766:	da08      	bge.n	801377a <__sfputc_r+0x1e>
 8013768:	6994      	ldr	r4, [r2, #24]
 801376a:	42a3      	cmp	r3, r4
 801376c:	db01      	blt.n	8013772 <__sfputc_r+0x16>
 801376e:	290a      	cmp	r1, #10
 8013770:	d103      	bne.n	801377a <__sfputc_r+0x1e>
 8013772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013776:	f001 be9d 	b.w	80154b4 <__swbuf_r>
 801377a:	6813      	ldr	r3, [r2, #0]
 801377c:	1c58      	adds	r0, r3, #1
 801377e:	6010      	str	r0, [r2, #0]
 8013780:	7019      	strb	r1, [r3, #0]
 8013782:	4608      	mov	r0, r1
 8013784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013788:	4770      	bx	lr

0801378a <__sfputs_r>:
 801378a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378c:	4606      	mov	r6, r0
 801378e:	460f      	mov	r7, r1
 8013790:	4614      	mov	r4, r2
 8013792:	18d5      	adds	r5, r2, r3
 8013794:	42ac      	cmp	r4, r5
 8013796:	d101      	bne.n	801379c <__sfputs_r+0x12>
 8013798:	2000      	movs	r0, #0
 801379a:	e007      	b.n	80137ac <__sfputs_r+0x22>
 801379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137a0:	463a      	mov	r2, r7
 80137a2:	4630      	mov	r0, r6
 80137a4:	f7ff ffda 	bl	801375c <__sfputc_r>
 80137a8:	1c43      	adds	r3, r0, #1
 80137aa:	d1f3      	bne.n	8013794 <__sfputs_r+0xa>
 80137ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137b0 <_vfiprintf_r>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	460d      	mov	r5, r1
 80137b6:	b09d      	sub	sp, #116	; 0x74
 80137b8:	4614      	mov	r4, r2
 80137ba:	4698      	mov	r8, r3
 80137bc:	4606      	mov	r6, r0
 80137be:	b118      	cbz	r0, 80137c8 <_vfiprintf_r+0x18>
 80137c0:	6983      	ldr	r3, [r0, #24]
 80137c2:	b90b      	cbnz	r3, 80137c8 <_vfiprintf_r+0x18>
 80137c4:	f7ff fcb4 	bl	8013130 <__sinit>
 80137c8:	4b89      	ldr	r3, [pc, #548]	; (80139f0 <_vfiprintf_r+0x240>)
 80137ca:	429d      	cmp	r5, r3
 80137cc:	d11b      	bne.n	8013806 <_vfiprintf_r+0x56>
 80137ce:	6875      	ldr	r5, [r6, #4]
 80137d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137d2:	07d9      	lsls	r1, r3, #31
 80137d4:	d405      	bmi.n	80137e2 <_vfiprintf_r+0x32>
 80137d6:	89ab      	ldrh	r3, [r5, #12]
 80137d8:	059a      	lsls	r2, r3, #22
 80137da:	d402      	bmi.n	80137e2 <_vfiprintf_r+0x32>
 80137dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137de:	f7ff fe2a 	bl	8013436 <__retarget_lock_acquire_recursive>
 80137e2:	89ab      	ldrh	r3, [r5, #12]
 80137e4:	071b      	lsls	r3, r3, #28
 80137e6:	d501      	bpl.n	80137ec <_vfiprintf_r+0x3c>
 80137e8:	692b      	ldr	r3, [r5, #16]
 80137ea:	b9eb      	cbnz	r3, 8013828 <_vfiprintf_r+0x78>
 80137ec:	4629      	mov	r1, r5
 80137ee:	4630      	mov	r0, r6
 80137f0:	f001 fec4 	bl	801557c <__swsetup_r>
 80137f4:	b1c0      	cbz	r0, 8013828 <_vfiprintf_r+0x78>
 80137f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137f8:	07dc      	lsls	r4, r3, #31
 80137fa:	d50e      	bpl.n	801381a <_vfiprintf_r+0x6a>
 80137fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013800:	b01d      	add	sp, #116	; 0x74
 8013802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013806:	4b7b      	ldr	r3, [pc, #492]	; (80139f4 <_vfiprintf_r+0x244>)
 8013808:	429d      	cmp	r5, r3
 801380a:	d101      	bne.n	8013810 <_vfiprintf_r+0x60>
 801380c:	68b5      	ldr	r5, [r6, #8]
 801380e:	e7df      	b.n	80137d0 <_vfiprintf_r+0x20>
 8013810:	4b79      	ldr	r3, [pc, #484]	; (80139f8 <_vfiprintf_r+0x248>)
 8013812:	429d      	cmp	r5, r3
 8013814:	bf08      	it	eq
 8013816:	68f5      	ldreq	r5, [r6, #12]
 8013818:	e7da      	b.n	80137d0 <_vfiprintf_r+0x20>
 801381a:	89ab      	ldrh	r3, [r5, #12]
 801381c:	0598      	lsls	r0, r3, #22
 801381e:	d4ed      	bmi.n	80137fc <_vfiprintf_r+0x4c>
 8013820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013822:	f7ff fe09 	bl	8013438 <__retarget_lock_release_recursive>
 8013826:	e7e9      	b.n	80137fc <_vfiprintf_r+0x4c>
 8013828:	2300      	movs	r3, #0
 801382a:	9309      	str	r3, [sp, #36]	; 0x24
 801382c:	2320      	movs	r3, #32
 801382e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013832:	f8cd 800c 	str.w	r8, [sp, #12]
 8013836:	2330      	movs	r3, #48	; 0x30
 8013838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80139fc <_vfiprintf_r+0x24c>
 801383c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013840:	f04f 0901 	mov.w	r9, #1
 8013844:	4623      	mov	r3, r4
 8013846:	469a      	mov	sl, r3
 8013848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801384c:	b10a      	cbz	r2, 8013852 <_vfiprintf_r+0xa2>
 801384e:	2a25      	cmp	r2, #37	; 0x25
 8013850:	d1f9      	bne.n	8013846 <_vfiprintf_r+0x96>
 8013852:	ebba 0b04 	subs.w	fp, sl, r4
 8013856:	d00b      	beq.n	8013870 <_vfiprintf_r+0xc0>
 8013858:	465b      	mov	r3, fp
 801385a:	4622      	mov	r2, r4
 801385c:	4629      	mov	r1, r5
 801385e:	4630      	mov	r0, r6
 8013860:	f7ff ff93 	bl	801378a <__sfputs_r>
 8013864:	3001      	adds	r0, #1
 8013866:	f000 80aa 	beq.w	80139be <_vfiprintf_r+0x20e>
 801386a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801386c:	445a      	add	r2, fp
 801386e:	9209      	str	r2, [sp, #36]	; 0x24
 8013870:	f89a 3000 	ldrb.w	r3, [sl]
 8013874:	2b00      	cmp	r3, #0
 8013876:	f000 80a2 	beq.w	80139be <_vfiprintf_r+0x20e>
 801387a:	2300      	movs	r3, #0
 801387c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013884:	f10a 0a01 	add.w	sl, sl, #1
 8013888:	9304      	str	r3, [sp, #16]
 801388a:	9307      	str	r3, [sp, #28]
 801388c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013890:	931a      	str	r3, [sp, #104]	; 0x68
 8013892:	4654      	mov	r4, sl
 8013894:	2205      	movs	r2, #5
 8013896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801389a:	4858      	ldr	r0, [pc, #352]	; (80139fc <_vfiprintf_r+0x24c>)
 801389c:	f7ec fdd0 	bl	8000440 <memchr>
 80138a0:	9a04      	ldr	r2, [sp, #16]
 80138a2:	b9d8      	cbnz	r0, 80138dc <_vfiprintf_r+0x12c>
 80138a4:	06d1      	lsls	r1, r2, #27
 80138a6:	bf44      	itt	mi
 80138a8:	2320      	movmi	r3, #32
 80138aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138ae:	0713      	lsls	r3, r2, #28
 80138b0:	bf44      	itt	mi
 80138b2:	232b      	movmi	r3, #43	; 0x2b
 80138b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138b8:	f89a 3000 	ldrb.w	r3, [sl]
 80138bc:	2b2a      	cmp	r3, #42	; 0x2a
 80138be:	d015      	beq.n	80138ec <_vfiprintf_r+0x13c>
 80138c0:	9a07      	ldr	r2, [sp, #28]
 80138c2:	4654      	mov	r4, sl
 80138c4:	2000      	movs	r0, #0
 80138c6:	f04f 0c0a 	mov.w	ip, #10
 80138ca:	4621      	mov	r1, r4
 80138cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138d0:	3b30      	subs	r3, #48	; 0x30
 80138d2:	2b09      	cmp	r3, #9
 80138d4:	d94e      	bls.n	8013974 <_vfiprintf_r+0x1c4>
 80138d6:	b1b0      	cbz	r0, 8013906 <_vfiprintf_r+0x156>
 80138d8:	9207      	str	r2, [sp, #28]
 80138da:	e014      	b.n	8013906 <_vfiprintf_r+0x156>
 80138dc:	eba0 0308 	sub.w	r3, r0, r8
 80138e0:	fa09 f303 	lsl.w	r3, r9, r3
 80138e4:	4313      	orrs	r3, r2
 80138e6:	9304      	str	r3, [sp, #16]
 80138e8:	46a2      	mov	sl, r4
 80138ea:	e7d2      	b.n	8013892 <_vfiprintf_r+0xe2>
 80138ec:	9b03      	ldr	r3, [sp, #12]
 80138ee:	1d19      	adds	r1, r3, #4
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	9103      	str	r1, [sp, #12]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	bfbb      	ittet	lt
 80138f8:	425b      	neglt	r3, r3
 80138fa:	f042 0202 	orrlt.w	r2, r2, #2
 80138fe:	9307      	strge	r3, [sp, #28]
 8013900:	9307      	strlt	r3, [sp, #28]
 8013902:	bfb8      	it	lt
 8013904:	9204      	strlt	r2, [sp, #16]
 8013906:	7823      	ldrb	r3, [r4, #0]
 8013908:	2b2e      	cmp	r3, #46	; 0x2e
 801390a:	d10c      	bne.n	8013926 <_vfiprintf_r+0x176>
 801390c:	7863      	ldrb	r3, [r4, #1]
 801390e:	2b2a      	cmp	r3, #42	; 0x2a
 8013910:	d135      	bne.n	801397e <_vfiprintf_r+0x1ce>
 8013912:	9b03      	ldr	r3, [sp, #12]
 8013914:	1d1a      	adds	r2, r3, #4
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	9203      	str	r2, [sp, #12]
 801391a:	2b00      	cmp	r3, #0
 801391c:	bfb8      	it	lt
 801391e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013922:	3402      	adds	r4, #2
 8013924:	9305      	str	r3, [sp, #20]
 8013926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a0c <_vfiprintf_r+0x25c>
 801392a:	7821      	ldrb	r1, [r4, #0]
 801392c:	2203      	movs	r2, #3
 801392e:	4650      	mov	r0, sl
 8013930:	f7ec fd86 	bl	8000440 <memchr>
 8013934:	b140      	cbz	r0, 8013948 <_vfiprintf_r+0x198>
 8013936:	2340      	movs	r3, #64	; 0x40
 8013938:	eba0 000a 	sub.w	r0, r0, sl
 801393c:	fa03 f000 	lsl.w	r0, r3, r0
 8013940:	9b04      	ldr	r3, [sp, #16]
 8013942:	4303      	orrs	r3, r0
 8013944:	3401      	adds	r4, #1
 8013946:	9304      	str	r3, [sp, #16]
 8013948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801394c:	482c      	ldr	r0, [pc, #176]	; (8013a00 <_vfiprintf_r+0x250>)
 801394e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013952:	2206      	movs	r2, #6
 8013954:	f7ec fd74 	bl	8000440 <memchr>
 8013958:	2800      	cmp	r0, #0
 801395a:	d03f      	beq.n	80139dc <_vfiprintf_r+0x22c>
 801395c:	4b29      	ldr	r3, [pc, #164]	; (8013a04 <_vfiprintf_r+0x254>)
 801395e:	bb1b      	cbnz	r3, 80139a8 <_vfiprintf_r+0x1f8>
 8013960:	9b03      	ldr	r3, [sp, #12]
 8013962:	3307      	adds	r3, #7
 8013964:	f023 0307 	bic.w	r3, r3, #7
 8013968:	3308      	adds	r3, #8
 801396a:	9303      	str	r3, [sp, #12]
 801396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801396e:	443b      	add	r3, r7
 8013970:	9309      	str	r3, [sp, #36]	; 0x24
 8013972:	e767      	b.n	8013844 <_vfiprintf_r+0x94>
 8013974:	fb0c 3202 	mla	r2, ip, r2, r3
 8013978:	460c      	mov	r4, r1
 801397a:	2001      	movs	r0, #1
 801397c:	e7a5      	b.n	80138ca <_vfiprintf_r+0x11a>
 801397e:	2300      	movs	r3, #0
 8013980:	3401      	adds	r4, #1
 8013982:	9305      	str	r3, [sp, #20]
 8013984:	4619      	mov	r1, r3
 8013986:	f04f 0c0a 	mov.w	ip, #10
 801398a:	4620      	mov	r0, r4
 801398c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013990:	3a30      	subs	r2, #48	; 0x30
 8013992:	2a09      	cmp	r2, #9
 8013994:	d903      	bls.n	801399e <_vfiprintf_r+0x1ee>
 8013996:	2b00      	cmp	r3, #0
 8013998:	d0c5      	beq.n	8013926 <_vfiprintf_r+0x176>
 801399a:	9105      	str	r1, [sp, #20]
 801399c:	e7c3      	b.n	8013926 <_vfiprintf_r+0x176>
 801399e:	fb0c 2101 	mla	r1, ip, r1, r2
 80139a2:	4604      	mov	r4, r0
 80139a4:	2301      	movs	r3, #1
 80139a6:	e7f0      	b.n	801398a <_vfiprintf_r+0x1da>
 80139a8:	ab03      	add	r3, sp, #12
 80139aa:	9300      	str	r3, [sp, #0]
 80139ac:	462a      	mov	r2, r5
 80139ae:	4b16      	ldr	r3, [pc, #88]	; (8013a08 <_vfiprintf_r+0x258>)
 80139b0:	a904      	add	r1, sp, #16
 80139b2:	4630      	mov	r0, r6
 80139b4:	f3af 8000 	nop.w
 80139b8:	4607      	mov	r7, r0
 80139ba:	1c78      	adds	r0, r7, #1
 80139bc:	d1d6      	bne.n	801396c <_vfiprintf_r+0x1bc>
 80139be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139c0:	07d9      	lsls	r1, r3, #31
 80139c2:	d405      	bmi.n	80139d0 <_vfiprintf_r+0x220>
 80139c4:	89ab      	ldrh	r3, [r5, #12]
 80139c6:	059a      	lsls	r2, r3, #22
 80139c8:	d402      	bmi.n	80139d0 <_vfiprintf_r+0x220>
 80139ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139cc:	f7ff fd34 	bl	8013438 <__retarget_lock_release_recursive>
 80139d0:	89ab      	ldrh	r3, [r5, #12]
 80139d2:	065b      	lsls	r3, r3, #25
 80139d4:	f53f af12 	bmi.w	80137fc <_vfiprintf_r+0x4c>
 80139d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139da:	e711      	b.n	8013800 <_vfiprintf_r+0x50>
 80139dc:	ab03      	add	r3, sp, #12
 80139de:	9300      	str	r3, [sp, #0]
 80139e0:	462a      	mov	r2, r5
 80139e2:	4b09      	ldr	r3, [pc, #36]	; (8013a08 <_vfiprintf_r+0x258>)
 80139e4:	a904      	add	r1, sp, #16
 80139e6:	4630      	mov	r0, r6
 80139e8:	f000 f88a 	bl	8013b00 <_printf_i>
 80139ec:	e7e4      	b.n	80139b8 <_vfiprintf_r+0x208>
 80139ee:	bf00      	nop
 80139f0:	0801d014 	.word	0x0801d014
 80139f4:	0801d034 	.word	0x0801d034
 80139f8:	0801cff4 	.word	0x0801cff4
 80139fc:	0801d058 	.word	0x0801d058
 8013a00:	0801d062 	.word	0x0801d062
 8013a04:	00000000 	.word	0x00000000
 8013a08:	0801378b 	.word	0x0801378b
 8013a0c:	0801d05e 	.word	0x0801d05e

08013a10 <vfiprintf>:
 8013a10:	4613      	mov	r3, r2
 8013a12:	460a      	mov	r2, r1
 8013a14:	4601      	mov	r1, r0
 8013a16:	4802      	ldr	r0, [pc, #8]	; (8013a20 <vfiprintf+0x10>)
 8013a18:	6800      	ldr	r0, [r0, #0]
 8013a1a:	f7ff bec9 	b.w	80137b0 <_vfiprintf_r>
 8013a1e:	bf00      	nop
 8013a20:	20000088 	.word	0x20000088

08013a24 <_printf_common>:
 8013a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a28:	4616      	mov	r6, r2
 8013a2a:	4699      	mov	r9, r3
 8013a2c:	688a      	ldr	r2, [r1, #8]
 8013a2e:	690b      	ldr	r3, [r1, #16]
 8013a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a34:	4293      	cmp	r3, r2
 8013a36:	bfb8      	it	lt
 8013a38:	4613      	movlt	r3, r2
 8013a3a:	6033      	str	r3, [r6, #0]
 8013a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a40:	4607      	mov	r7, r0
 8013a42:	460c      	mov	r4, r1
 8013a44:	b10a      	cbz	r2, 8013a4a <_printf_common+0x26>
 8013a46:	3301      	adds	r3, #1
 8013a48:	6033      	str	r3, [r6, #0]
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	0699      	lsls	r1, r3, #26
 8013a4e:	bf42      	ittt	mi
 8013a50:	6833      	ldrmi	r3, [r6, #0]
 8013a52:	3302      	addmi	r3, #2
 8013a54:	6033      	strmi	r3, [r6, #0]
 8013a56:	6825      	ldr	r5, [r4, #0]
 8013a58:	f015 0506 	ands.w	r5, r5, #6
 8013a5c:	d106      	bne.n	8013a6c <_printf_common+0x48>
 8013a5e:	f104 0a19 	add.w	sl, r4, #25
 8013a62:	68e3      	ldr	r3, [r4, #12]
 8013a64:	6832      	ldr	r2, [r6, #0]
 8013a66:	1a9b      	subs	r3, r3, r2
 8013a68:	42ab      	cmp	r3, r5
 8013a6a:	dc26      	bgt.n	8013aba <_printf_common+0x96>
 8013a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a70:	1e13      	subs	r3, r2, #0
 8013a72:	6822      	ldr	r2, [r4, #0]
 8013a74:	bf18      	it	ne
 8013a76:	2301      	movne	r3, #1
 8013a78:	0692      	lsls	r2, r2, #26
 8013a7a:	d42b      	bmi.n	8013ad4 <_printf_common+0xb0>
 8013a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a80:	4649      	mov	r1, r9
 8013a82:	4638      	mov	r0, r7
 8013a84:	47c0      	blx	r8
 8013a86:	3001      	adds	r0, #1
 8013a88:	d01e      	beq.n	8013ac8 <_printf_common+0xa4>
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	68e5      	ldr	r5, [r4, #12]
 8013a8e:	6832      	ldr	r2, [r6, #0]
 8013a90:	f003 0306 	and.w	r3, r3, #6
 8013a94:	2b04      	cmp	r3, #4
 8013a96:	bf08      	it	eq
 8013a98:	1aad      	subeq	r5, r5, r2
 8013a9a:	68a3      	ldr	r3, [r4, #8]
 8013a9c:	6922      	ldr	r2, [r4, #16]
 8013a9e:	bf0c      	ite	eq
 8013aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013aa4:	2500      	movne	r5, #0
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	bfc4      	itt	gt
 8013aaa:	1a9b      	subgt	r3, r3, r2
 8013aac:	18ed      	addgt	r5, r5, r3
 8013aae:	2600      	movs	r6, #0
 8013ab0:	341a      	adds	r4, #26
 8013ab2:	42b5      	cmp	r5, r6
 8013ab4:	d11a      	bne.n	8013aec <_printf_common+0xc8>
 8013ab6:	2000      	movs	r0, #0
 8013ab8:	e008      	b.n	8013acc <_printf_common+0xa8>
 8013aba:	2301      	movs	r3, #1
 8013abc:	4652      	mov	r2, sl
 8013abe:	4649      	mov	r1, r9
 8013ac0:	4638      	mov	r0, r7
 8013ac2:	47c0      	blx	r8
 8013ac4:	3001      	adds	r0, #1
 8013ac6:	d103      	bne.n	8013ad0 <_printf_common+0xac>
 8013ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad0:	3501      	adds	r5, #1
 8013ad2:	e7c6      	b.n	8013a62 <_printf_common+0x3e>
 8013ad4:	18e1      	adds	r1, r4, r3
 8013ad6:	1c5a      	adds	r2, r3, #1
 8013ad8:	2030      	movs	r0, #48	; 0x30
 8013ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ade:	4422      	add	r2, r4
 8013ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ae8:	3302      	adds	r3, #2
 8013aea:	e7c7      	b.n	8013a7c <_printf_common+0x58>
 8013aec:	2301      	movs	r3, #1
 8013aee:	4622      	mov	r2, r4
 8013af0:	4649      	mov	r1, r9
 8013af2:	4638      	mov	r0, r7
 8013af4:	47c0      	blx	r8
 8013af6:	3001      	adds	r0, #1
 8013af8:	d0e6      	beq.n	8013ac8 <_printf_common+0xa4>
 8013afa:	3601      	adds	r6, #1
 8013afc:	e7d9      	b.n	8013ab2 <_printf_common+0x8e>
	...

08013b00 <_printf_i>:
 8013b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b04:	7e0f      	ldrb	r7, [r1, #24]
 8013b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013b08:	2f78      	cmp	r7, #120	; 0x78
 8013b0a:	4691      	mov	r9, r2
 8013b0c:	4680      	mov	r8, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	469a      	mov	sl, r3
 8013b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013b16:	d807      	bhi.n	8013b28 <_printf_i+0x28>
 8013b18:	2f62      	cmp	r7, #98	; 0x62
 8013b1a:	d80a      	bhi.n	8013b32 <_printf_i+0x32>
 8013b1c:	2f00      	cmp	r7, #0
 8013b1e:	f000 80d8 	beq.w	8013cd2 <_printf_i+0x1d2>
 8013b22:	2f58      	cmp	r7, #88	; 0x58
 8013b24:	f000 80a3 	beq.w	8013c6e <_printf_i+0x16e>
 8013b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013b30:	e03a      	b.n	8013ba8 <_printf_i+0xa8>
 8013b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013b36:	2b15      	cmp	r3, #21
 8013b38:	d8f6      	bhi.n	8013b28 <_printf_i+0x28>
 8013b3a:	a101      	add	r1, pc, #4	; (adr r1, 8013b40 <_printf_i+0x40>)
 8013b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b40:	08013b99 	.word	0x08013b99
 8013b44:	08013bad 	.word	0x08013bad
 8013b48:	08013b29 	.word	0x08013b29
 8013b4c:	08013b29 	.word	0x08013b29
 8013b50:	08013b29 	.word	0x08013b29
 8013b54:	08013b29 	.word	0x08013b29
 8013b58:	08013bad 	.word	0x08013bad
 8013b5c:	08013b29 	.word	0x08013b29
 8013b60:	08013b29 	.word	0x08013b29
 8013b64:	08013b29 	.word	0x08013b29
 8013b68:	08013b29 	.word	0x08013b29
 8013b6c:	08013cb9 	.word	0x08013cb9
 8013b70:	08013bdd 	.word	0x08013bdd
 8013b74:	08013c9b 	.word	0x08013c9b
 8013b78:	08013b29 	.word	0x08013b29
 8013b7c:	08013b29 	.word	0x08013b29
 8013b80:	08013cdb 	.word	0x08013cdb
 8013b84:	08013b29 	.word	0x08013b29
 8013b88:	08013bdd 	.word	0x08013bdd
 8013b8c:	08013b29 	.word	0x08013b29
 8013b90:	08013b29 	.word	0x08013b29
 8013b94:	08013ca3 	.word	0x08013ca3
 8013b98:	682b      	ldr	r3, [r5, #0]
 8013b9a:	1d1a      	adds	r2, r3, #4
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	602a      	str	r2, [r5, #0]
 8013ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ba8:	2301      	movs	r3, #1
 8013baa:	e0a3      	b.n	8013cf4 <_printf_i+0x1f4>
 8013bac:	6820      	ldr	r0, [r4, #0]
 8013bae:	6829      	ldr	r1, [r5, #0]
 8013bb0:	0606      	lsls	r6, r0, #24
 8013bb2:	f101 0304 	add.w	r3, r1, #4
 8013bb6:	d50a      	bpl.n	8013bce <_printf_i+0xce>
 8013bb8:	680e      	ldr	r6, [r1, #0]
 8013bba:	602b      	str	r3, [r5, #0]
 8013bbc:	2e00      	cmp	r6, #0
 8013bbe:	da03      	bge.n	8013bc8 <_printf_i+0xc8>
 8013bc0:	232d      	movs	r3, #45	; 0x2d
 8013bc2:	4276      	negs	r6, r6
 8013bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bc8:	485e      	ldr	r0, [pc, #376]	; (8013d44 <_printf_i+0x244>)
 8013bca:	230a      	movs	r3, #10
 8013bcc:	e019      	b.n	8013c02 <_printf_i+0x102>
 8013bce:	680e      	ldr	r6, [r1, #0]
 8013bd0:	602b      	str	r3, [r5, #0]
 8013bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013bd6:	bf18      	it	ne
 8013bd8:	b236      	sxthne	r6, r6
 8013bda:	e7ef      	b.n	8013bbc <_printf_i+0xbc>
 8013bdc:	682b      	ldr	r3, [r5, #0]
 8013bde:	6820      	ldr	r0, [r4, #0]
 8013be0:	1d19      	adds	r1, r3, #4
 8013be2:	6029      	str	r1, [r5, #0]
 8013be4:	0601      	lsls	r1, r0, #24
 8013be6:	d501      	bpl.n	8013bec <_printf_i+0xec>
 8013be8:	681e      	ldr	r6, [r3, #0]
 8013bea:	e002      	b.n	8013bf2 <_printf_i+0xf2>
 8013bec:	0646      	lsls	r6, r0, #25
 8013bee:	d5fb      	bpl.n	8013be8 <_printf_i+0xe8>
 8013bf0:	881e      	ldrh	r6, [r3, #0]
 8013bf2:	4854      	ldr	r0, [pc, #336]	; (8013d44 <_printf_i+0x244>)
 8013bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8013bf6:	bf0c      	ite	eq
 8013bf8:	2308      	moveq	r3, #8
 8013bfa:	230a      	movne	r3, #10
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c02:	6865      	ldr	r5, [r4, #4]
 8013c04:	60a5      	str	r5, [r4, #8]
 8013c06:	2d00      	cmp	r5, #0
 8013c08:	bfa2      	ittt	ge
 8013c0a:	6821      	ldrge	r1, [r4, #0]
 8013c0c:	f021 0104 	bicge.w	r1, r1, #4
 8013c10:	6021      	strge	r1, [r4, #0]
 8013c12:	b90e      	cbnz	r6, 8013c18 <_printf_i+0x118>
 8013c14:	2d00      	cmp	r5, #0
 8013c16:	d04d      	beq.n	8013cb4 <_printf_i+0x1b4>
 8013c18:	4615      	mov	r5, r2
 8013c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8013c22:	5dc7      	ldrb	r7, [r0, r7]
 8013c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013c28:	4637      	mov	r7, r6
 8013c2a:	42bb      	cmp	r3, r7
 8013c2c:	460e      	mov	r6, r1
 8013c2e:	d9f4      	bls.n	8013c1a <_printf_i+0x11a>
 8013c30:	2b08      	cmp	r3, #8
 8013c32:	d10b      	bne.n	8013c4c <_printf_i+0x14c>
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	07de      	lsls	r6, r3, #31
 8013c38:	d508      	bpl.n	8013c4c <_printf_i+0x14c>
 8013c3a:	6923      	ldr	r3, [r4, #16]
 8013c3c:	6861      	ldr	r1, [r4, #4]
 8013c3e:	4299      	cmp	r1, r3
 8013c40:	bfde      	ittt	le
 8013c42:	2330      	movle	r3, #48	; 0x30
 8013c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013c48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013c4c:	1b52      	subs	r2, r2, r5
 8013c4e:	6122      	str	r2, [r4, #16]
 8013c50:	f8cd a000 	str.w	sl, [sp]
 8013c54:	464b      	mov	r3, r9
 8013c56:	aa03      	add	r2, sp, #12
 8013c58:	4621      	mov	r1, r4
 8013c5a:	4640      	mov	r0, r8
 8013c5c:	f7ff fee2 	bl	8013a24 <_printf_common>
 8013c60:	3001      	adds	r0, #1
 8013c62:	d14c      	bne.n	8013cfe <_printf_i+0x1fe>
 8013c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c68:	b004      	add	sp, #16
 8013c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c6e:	4835      	ldr	r0, [pc, #212]	; (8013d44 <_printf_i+0x244>)
 8013c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013c74:	6829      	ldr	r1, [r5, #0]
 8013c76:	6823      	ldr	r3, [r4, #0]
 8013c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8013c7c:	6029      	str	r1, [r5, #0]
 8013c7e:	061d      	lsls	r5, r3, #24
 8013c80:	d514      	bpl.n	8013cac <_printf_i+0x1ac>
 8013c82:	07df      	lsls	r7, r3, #31
 8013c84:	bf44      	itt	mi
 8013c86:	f043 0320 	orrmi.w	r3, r3, #32
 8013c8a:	6023      	strmi	r3, [r4, #0]
 8013c8c:	b91e      	cbnz	r6, 8013c96 <_printf_i+0x196>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	f023 0320 	bic.w	r3, r3, #32
 8013c94:	6023      	str	r3, [r4, #0]
 8013c96:	2310      	movs	r3, #16
 8013c98:	e7b0      	b.n	8013bfc <_printf_i+0xfc>
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	f043 0320 	orr.w	r3, r3, #32
 8013ca0:	6023      	str	r3, [r4, #0]
 8013ca2:	2378      	movs	r3, #120	; 0x78
 8013ca4:	4828      	ldr	r0, [pc, #160]	; (8013d48 <_printf_i+0x248>)
 8013ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013caa:	e7e3      	b.n	8013c74 <_printf_i+0x174>
 8013cac:	0659      	lsls	r1, r3, #25
 8013cae:	bf48      	it	mi
 8013cb0:	b2b6      	uxthmi	r6, r6
 8013cb2:	e7e6      	b.n	8013c82 <_printf_i+0x182>
 8013cb4:	4615      	mov	r5, r2
 8013cb6:	e7bb      	b.n	8013c30 <_printf_i+0x130>
 8013cb8:	682b      	ldr	r3, [r5, #0]
 8013cba:	6826      	ldr	r6, [r4, #0]
 8013cbc:	6961      	ldr	r1, [r4, #20]
 8013cbe:	1d18      	adds	r0, r3, #4
 8013cc0:	6028      	str	r0, [r5, #0]
 8013cc2:	0635      	lsls	r5, r6, #24
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	d501      	bpl.n	8013ccc <_printf_i+0x1cc>
 8013cc8:	6019      	str	r1, [r3, #0]
 8013cca:	e002      	b.n	8013cd2 <_printf_i+0x1d2>
 8013ccc:	0670      	lsls	r0, r6, #25
 8013cce:	d5fb      	bpl.n	8013cc8 <_printf_i+0x1c8>
 8013cd0:	8019      	strh	r1, [r3, #0]
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	6123      	str	r3, [r4, #16]
 8013cd6:	4615      	mov	r5, r2
 8013cd8:	e7ba      	b.n	8013c50 <_printf_i+0x150>
 8013cda:	682b      	ldr	r3, [r5, #0]
 8013cdc:	1d1a      	adds	r2, r3, #4
 8013cde:	602a      	str	r2, [r5, #0]
 8013ce0:	681d      	ldr	r5, [r3, #0]
 8013ce2:	6862      	ldr	r2, [r4, #4]
 8013ce4:	2100      	movs	r1, #0
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f7ec fbaa 	bl	8000440 <memchr>
 8013cec:	b108      	cbz	r0, 8013cf2 <_printf_i+0x1f2>
 8013cee:	1b40      	subs	r0, r0, r5
 8013cf0:	6060      	str	r0, [r4, #4]
 8013cf2:	6863      	ldr	r3, [r4, #4]
 8013cf4:	6123      	str	r3, [r4, #16]
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cfc:	e7a8      	b.n	8013c50 <_printf_i+0x150>
 8013cfe:	6923      	ldr	r3, [r4, #16]
 8013d00:	462a      	mov	r2, r5
 8013d02:	4649      	mov	r1, r9
 8013d04:	4640      	mov	r0, r8
 8013d06:	47d0      	blx	sl
 8013d08:	3001      	adds	r0, #1
 8013d0a:	d0ab      	beq.n	8013c64 <_printf_i+0x164>
 8013d0c:	6823      	ldr	r3, [r4, #0]
 8013d0e:	079b      	lsls	r3, r3, #30
 8013d10:	d413      	bmi.n	8013d3a <_printf_i+0x23a>
 8013d12:	68e0      	ldr	r0, [r4, #12]
 8013d14:	9b03      	ldr	r3, [sp, #12]
 8013d16:	4298      	cmp	r0, r3
 8013d18:	bfb8      	it	lt
 8013d1a:	4618      	movlt	r0, r3
 8013d1c:	e7a4      	b.n	8013c68 <_printf_i+0x168>
 8013d1e:	2301      	movs	r3, #1
 8013d20:	4632      	mov	r2, r6
 8013d22:	4649      	mov	r1, r9
 8013d24:	4640      	mov	r0, r8
 8013d26:	47d0      	blx	sl
 8013d28:	3001      	adds	r0, #1
 8013d2a:	d09b      	beq.n	8013c64 <_printf_i+0x164>
 8013d2c:	3501      	adds	r5, #1
 8013d2e:	68e3      	ldr	r3, [r4, #12]
 8013d30:	9903      	ldr	r1, [sp, #12]
 8013d32:	1a5b      	subs	r3, r3, r1
 8013d34:	42ab      	cmp	r3, r5
 8013d36:	dcf2      	bgt.n	8013d1e <_printf_i+0x21e>
 8013d38:	e7eb      	b.n	8013d12 <_printf_i+0x212>
 8013d3a:	2500      	movs	r5, #0
 8013d3c:	f104 0619 	add.w	r6, r4, #25
 8013d40:	e7f5      	b.n	8013d2e <_printf_i+0x22e>
 8013d42:	bf00      	nop
 8013d44:	0801d069 	.word	0x0801d069
 8013d48:	0801d07a 	.word	0x0801d07a

08013d4c <iprintf>:
 8013d4c:	b40f      	push	{r0, r1, r2, r3}
 8013d4e:	4b0a      	ldr	r3, [pc, #40]	; (8013d78 <iprintf+0x2c>)
 8013d50:	b513      	push	{r0, r1, r4, lr}
 8013d52:	681c      	ldr	r4, [r3, #0]
 8013d54:	b124      	cbz	r4, 8013d60 <iprintf+0x14>
 8013d56:	69a3      	ldr	r3, [r4, #24]
 8013d58:	b913      	cbnz	r3, 8013d60 <iprintf+0x14>
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f7ff f9e8 	bl	8013130 <__sinit>
 8013d60:	ab05      	add	r3, sp, #20
 8013d62:	9a04      	ldr	r2, [sp, #16]
 8013d64:	68a1      	ldr	r1, [r4, #8]
 8013d66:	9301      	str	r3, [sp, #4]
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f7ff fd21 	bl	80137b0 <_vfiprintf_r>
 8013d6e:	b002      	add	sp, #8
 8013d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d74:	b004      	add	sp, #16
 8013d76:	4770      	bx	lr
 8013d78:	20000088 	.word	0x20000088

08013d7c <_putc_r>:
 8013d7c:	b570      	push	{r4, r5, r6, lr}
 8013d7e:	460d      	mov	r5, r1
 8013d80:	4614      	mov	r4, r2
 8013d82:	4606      	mov	r6, r0
 8013d84:	b118      	cbz	r0, 8013d8e <_putc_r+0x12>
 8013d86:	6983      	ldr	r3, [r0, #24]
 8013d88:	b90b      	cbnz	r3, 8013d8e <_putc_r+0x12>
 8013d8a:	f7ff f9d1 	bl	8013130 <__sinit>
 8013d8e:	4b1c      	ldr	r3, [pc, #112]	; (8013e00 <_putc_r+0x84>)
 8013d90:	429c      	cmp	r4, r3
 8013d92:	d124      	bne.n	8013dde <_putc_r+0x62>
 8013d94:	6874      	ldr	r4, [r6, #4]
 8013d96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d98:	07d8      	lsls	r0, r3, #31
 8013d9a:	d405      	bmi.n	8013da8 <_putc_r+0x2c>
 8013d9c:	89a3      	ldrh	r3, [r4, #12]
 8013d9e:	0599      	lsls	r1, r3, #22
 8013da0:	d402      	bmi.n	8013da8 <_putc_r+0x2c>
 8013da2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013da4:	f7ff fb47 	bl	8013436 <__retarget_lock_acquire_recursive>
 8013da8:	68a3      	ldr	r3, [r4, #8]
 8013daa:	3b01      	subs	r3, #1
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	60a3      	str	r3, [r4, #8]
 8013db0:	da05      	bge.n	8013dbe <_putc_r+0x42>
 8013db2:	69a2      	ldr	r2, [r4, #24]
 8013db4:	4293      	cmp	r3, r2
 8013db6:	db1c      	blt.n	8013df2 <_putc_r+0x76>
 8013db8:	b2eb      	uxtb	r3, r5
 8013dba:	2b0a      	cmp	r3, #10
 8013dbc:	d019      	beq.n	8013df2 <_putc_r+0x76>
 8013dbe:	6823      	ldr	r3, [r4, #0]
 8013dc0:	1c5a      	adds	r2, r3, #1
 8013dc2:	6022      	str	r2, [r4, #0]
 8013dc4:	701d      	strb	r5, [r3, #0]
 8013dc6:	b2ed      	uxtb	r5, r5
 8013dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013dca:	07da      	lsls	r2, r3, #31
 8013dcc:	d405      	bmi.n	8013dda <_putc_r+0x5e>
 8013dce:	89a3      	ldrh	r3, [r4, #12]
 8013dd0:	059b      	lsls	r3, r3, #22
 8013dd2:	d402      	bmi.n	8013dda <_putc_r+0x5e>
 8013dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dd6:	f7ff fb2f 	bl	8013438 <__retarget_lock_release_recursive>
 8013dda:	4628      	mov	r0, r5
 8013ddc:	bd70      	pop	{r4, r5, r6, pc}
 8013dde:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <_putc_r+0x88>)
 8013de0:	429c      	cmp	r4, r3
 8013de2:	d101      	bne.n	8013de8 <_putc_r+0x6c>
 8013de4:	68b4      	ldr	r4, [r6, #8]
 8013de6:	e7d6      	b.n	8013d96 <_putc_r+0x1a>
 8013de8:	4b07      	ldr	r3, [pc, #28]	; (8013e08 <_putc_r+0x8c>)
 8013dea:	429c      	cmp	r4, r3
 8013dec:	bf08      	it	eq
 8013dee:	68f4      	ldreq	r4, [r6, #12]
 8013df0:	e7d1      	b.n	8013d96 <_putc_r+0x1a>
 8013df2:	4629      	mov	r1, r5
 8013df4:	4622      	mov	r2, r4
 8013df6:	4630      	mov	r0, r6
 8013df8:	f001 fb5c 	bl	80154b4 <__swbuf_r>
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	e7e3      	b.n	8013dc8 <_putc_r+0x4c>
 8013e00:	0801d014 	.word	0x0801d014
 8013e04:	0801d034 	.word	0x0801d034
 8013e08:	0801cff4 	.word	0x0801cff4

08013e0c <swapfunc>:
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	b510      	push	{r4, lr}
 8013e10:	d00a      	beq.n	8013e28 <swapfunc+0x1c>
 8013e12:	0892      	lsrs	r2, r2, #2
 8013e14:	3a01      	subs	r2, #1
 8013e16:	6803      	ldr	r3, [r0, #0]
 8013e18:	680c      	ldr	r4, [r1, #0]
 8013e1a:	f840 4b04 	str.w	r4, [r0], #4
 8013e1e:	2a00      	cmp	r2, #0
 8013e20:	f841 3b04 	str.w	r3, [r1], #4
 8013e24:	dcf6      	bgt.n	8013e14 <swapfunc+0x8>
 8013e26:	bd10      	pop	{r4, pc}
 8013e28:	4402      	add	r2, r0
 8013e2a:	780c      	ldrb	r4, [r1, #0]
 8013e2c:	7803      	ldrb	r3, [r0, #0]
 8013e2e:	f800 4b01 	strb.w	r4, [r0], #1
 8013e32:	f801 3b01 	strb.w	r3, [r1], #1
 8013e36:	1a13      	subs	r3, r2, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	dcf6      	bgt.n	8013e2a <swapfunc+0x1e>
 8013e3c:	e7f3      	b.n	8013e26 <swapfunc+0x1a>

08013e3e <med3.constprop.0>:
 8013e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e40:	460c      	mov	r4, r1
 8013e42:	4615      	mov	r5, r2
 8013e44:	4607      	mov	r7, r0
 8013e46:	461e      	mov	r6, r3
 8013e48:	4798      	blx	r3
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	4620      	mov	r0, r4
 8013e50:	da0a      	bge.n	8013e68 <med3.constprop.0+0x2a>
 8013e52:	47b0      	blx	r6
 8013e54:	2800      	cmp	r0, #0
 8013e56:	db05      	blt.n	8013e64 <med3.constprop.0+0x26>
 8013e58:	4629      	mov	r1, r5
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	47b0      	blx	r6
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	db0a      	blt.n	8013e78 <med3.constprop.0+0x3a>
 8013e62:	463c      	mov	r4, r7
 8013e64:	4620      	mov	r0, r4
 8013e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e68:	47b0      	blx	r6
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	dcfa      	bgt.n	8013e64 <med3.constprop.0+0x26>
 8013e6e:	4629      	mov	r1, r5
 8013e70:	4638      	mov	r0, r7
 8013e72:	47b0      	blx	r6
 8013e74:	2800      	cmp	r0, #0
 8013e76:	dbf4      	blt.n	8013e62 <med3.constprop.0+0x24>
 8013e78:	462c      	mov	r4, r5
 8013e7a:	e7f3      	b.n	8013e64 <med3.constprop.0+0x26>

08013e7c <qsort>:
 8013e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e80:	469a      	mov	sl, r3
 8013e82:	ea40 0302 	orr.w	r3, r0, r2
 8013e86:	079b      	lsls	r3, r3, #30
 8013e88:	b097      	sub	sp, #92	; 0x5c
 8013e8a:	4606      	mov	r6, r0
 8013e8c:	4614      	mov	r4, r2
 8013e8e:	d11a      	bne.n	8013ec6 <qsort+0x4a>
 8013e90:	f1b2 0804 	subs.w	r8, r2, #4
 8013e94:	bf18      	it	ne
 8013e96:	f04f 0801 	movne.w	r8, #1
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	9302      	str	r3, [sp, #8]
 8013e9e:	1933      	adds	r3, r6, r4
 8013ea0:	fb04 f701 	mul.w	r7, r4, r1
 8013ea4:	9301      	str	r3, [sp, #4]
 8013ea6:	2906      	cmp	r1, #6
 8013ea8:	eb06 0307 	add.w	r3, r6, r7
 8013eac:	9303      	str	r3, [sp, #12]
 8013eae:	d82a      	bhi.n	8013f06 <qsort+0x8a>
 8013eb0:	9b01      	ldr	r3, [sp, #4]
 8013eb2:	9a03      	ldr	r2, [sp, #12]
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d310      	bcc.n	8013eda <qsort+0x5e>
 8013eb8:	9b02      	ldr	r3, [sp, #8]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f040 811e 	bne.w	80140fc <qsort+0x280>
 8013ec0:	b017      	add	sp, #92	; 0x5c
 8013ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec6:	f04f 0802 	mov.w	r8, #2
 8013eca:	e7e6      	b.n	8013e9a <qsort+0x1e>
 8013ecc:	4643      	mov	r3, r8
 8013ece:	4622      	mov	r2, r4
 8013ed0:	4639      	mov	r1, r7
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f7ff ff9a 	bl	8013e0c <swapfunc>
 8013ed8:	e00e      	b.n	8013ef8 <qsort+0x7c>
 8013eda:	9d01      	ldr	r5, [sp, #4]
 8013edc:	e00d      	b.n	8013efa <qsort+0x7e>
 8013ede:	1b2f      	subs	r7, r5, r4
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	47d0      	blx	sl
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	dd09      	ble.n	8013efe <qsort+0x82>
 8013eea:	f1b8 0f00 	cmp.w	r8, #0
 8013eee:	d1ed      	bne.n	8013ecc <qsort+0x50>
 8013ef0:	682b      	ldr	r3, [r5, #0]
 8013ef2:	683a      	ldr	r2, [r7, #0]
 8013ef4:	602a      	str	r2, [r5, #0]
 8013ef6:	603b      	str	r3, [r7, #0]
 8013ef8:	463d      	mov	r5, r7
 8013efa:	42ae      	cmp	r6, r5
 8013efc:	d3ef      	bcc.n	8013ede <qsort+0x62>
 8013efe:	9b01      	ldr	r3, [sp, #4]
 8013f00:	4423      	add	r3, r4
 8013f02:	9301      	str	r3, [sp, #4]
 8013f04:	e7d4      	b.n	8013eb0 <qsort+0x34>
 8013f06:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8013f0a:	1b3f      	subs	r7, r7, r4
 8013f0c:	2907      	cmp	r1, #7
 8013f0e:	fb04 6909 	mla	r9, r4, r9, r6
 8013f12:	4437      	add	r7, r6
 8013f14:	d022      	beq.n	8013f5c <qsort+0xe0>
 8013f16:	2928      	cmp	r1, #40	; 0x28
 8013f18:	d945      	bls.n	8013fa6 <qsort+0x12a>
 8013f1a:	08c9      	lsrs	r1, r1, #3
 8013f1c:	fb04 f501 	mul.w	r5, r4, r1
 8013f20:	4653      	mov	r3, sl
 8013f22:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8013f26:	1971      	adds	r1, r6, r5
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f7ff ff88 	bl	8013e3e <med3.constprop.0>
 8013f2e:	4649      	mov	r1, r9
 8013f30:	eb09 0205 	add.w	r2, r9, r5
 8013f34:	4653      	mov	r3, sl
 8013f36:	4683      	mov	fp, r0
 8013f38:	1b48      	subs	r0, r1, r5
 8013f3a:	f7ff ff80 	bl	8013e3e <med3.constprop.0>
 8013f3e:	463a      	mov	r2, r7
 8013f40:	4681      	mov	r9, r0
 8013f42:	4653      	mov	r3, sl
 8013f44:	1b79      	subs	r1, r7, r5
 8013f46:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8013f4a:	f7ff ff78 	bl	8013e3e <med3.constprop.0>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	4649      	mov	r1, r9
 8013f52:	4653      	mov	r3, sl
 8013f54:	4658      	mov	r0, fp
 8013f56:	f7ff ff72 	bl	8013e3e <med3.constprop.0>
 8013f5a:	4681      	mov	r9, r0
 8013f5c:	f1b8 0f00 	cmp.w	r8, #0
 8013f60:	d124      	bne.n	8013fac <qsort+0x130>
 8013f62:	6833      	ldr	r3, [r6, #0]
 8013f64:	f8d9 2000 	ldr.w	r2, [r9]
 8013f68:	6032      	str	r2, [r6, #0]
 8013f6a:	f8c9 3000 	str.w	r3, [r9]
 8013f6e:	eb06 0b04 	add.w	fp, r6, r4
 8013f72:	46b9      	mov	r9, r7
 8013f74:	465d      	mov	r5, fp
 8013f76:	2300      	movs	r3, #0
 8013f78:	45bb      	cmp	fp, r7
 8013f7a:	d835      	bhi.n	8013fe8 <qsort+0x16c>
 8013f7c:	4631      	mov	r1, r6
 8013f7e:	4658      	mov	r0, fp
 8013f80:	9304      	str	r3, [sp, #16]
 8013f82:	47d0      	blx	sl
 8013f84:	2800      	cmp	r0, #0
 8013f86:	9b04      	ldr	r3, [sp, #16]
 8013f88:	dc3e      	bgt.n	8014008 <qsort+0x18c>
 8013f8a:	d10a      	bne.n	8013fa2 <qsort+0x126>
 8013f8c:	f1b8 0f00 	cmp.w	r8, #0
 8013f90:	d113      	bne.n	8013fba <qsort+0x13e>
 8013f92:	682b      	ldr	r3, [r5, #0]
 8013f94:	f8db 2000 	ldr.w	r2, [fp]
 8013f98:	602a      	str	r2, [r5, #0]
 8013f9a:	f8cb 3000 	str.w	r3, [fp]
 8013f9e:	4425      	add	r5, r4
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	44a3      	add	fp, r4
 8013fa4:	e7e8      	b.n	8013f78 <qsort+0xfc>
 8013fa6:	463a      	mov	r2, r7
 8013fa8:	46b3      	mov	fp, r6
 8013faa:	e7d1      	b.n	8013f50 <qsort+0xd4>
 8013fac:	4643      	mov	r3, r8
 8013fae:	4622      	mov	r2, r4
 8013fb0:	4649      	mov	r1, r9
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f7ff ff2a 	bl	8013e0c <swapfunc>
 8013fb8:	e7d9      	b.n	8013f6e <qsort+0xf2>
 8013fba:	4643      	mov	r3, r8
 8013fbc:	4622      	mov	r2, r4
 8013fbe:	4659      	mov	r1, fp
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f7ff ff23 	bl	8013e0c <swapfunc>
 8013fc6:	e7ea      	b.n	8013f9e <qsort+0x122>
 8013fc8:	d10b      	bne.n	8013fe2 <qsort+0x166>
 8013fca:	f1b8 0f00 	cmp.w	r8, #0
 8013fce:	d114      	bne.n	8013ffa <qsort+0x17e>
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	f8d9 2000 	ldr.w	r2, [r9]
 8013fd6:	603a      	str	r2, [r7, #0]
 8013fd8:	f8c9 3000 	str.w	r3, [r9]
 8013fdc:	eba9 0904 	sub.w	r9, r9, r4
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	9f04      	ldr	r7, [sp, #16]
 8013fe4:	45bb      	cmp	fp, r7
 8013fe6:	d90f      	bls.n	8014008 <qsort+0x18c>
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d143      	bne.n	8014074 <qsort+0x1f8>
 8013fec:	9b01      	ldr	r3, [sp, #4]
 8013fee:	9a03      	ldr	r2, [sp, #12]
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	f4bf af61 	bcs.w	8013eb8 <qsort+0x3c>
 8013ff6:	9d01      	ldr	r5, [sp, #4]
 8013ff8:	e036      	b.n	8014068 <qsort+0x1ec>
 8013ffa:	4643      	mov	r3, r8
 8013ffc:	4622      	mov	r2, r4
 8013ffe:	4649      	mov	r1, r9
 8014000:	4638      	mov	r0, r7
 8014002:	f7ff ff03 	bl	8013e0c <swapfunc>
 8014006:	e7e9      	b.n	8013fdc <qsort+0x160>
 8014008:	4631      	mov	r1, r6
 801400a:	4638      	mov	r0, r7
 801400c:	9305      	str	r3, [sp, #20]
 801400e:	47d0      	blx	sl
 8014010:	1b3b      	subs	r3, r7, r4
 8014012:	2800      	cmp	r0, #0
 8014014:	9304      	str	r3, [sp, #16]
 8014016:	9b05      	ldr	r3, [sp, #20]
 8014018:	dad6      	bge.n	8013fc8 <qsort+0x14c>
 801401a:	f1b8 0f00 	cmp.w	r8, #0
 801401e:	d006      	beq.n	801402e <qsort+0x1b2>
 8014020:	4643      	mov	r3, r8
 8014022:	4622      	mov	r2, r4
 8014024:	4639      	mov	r1, r7
 8014026:	4658      	mov	r0, fp
 8014028:	f7ff fef0 	bl	8013e0c <swapfunc>
 801402c:	e005      	b.n	801403a <qsort+0x1be>
 801402e:	f8db 3000 	ldr.w	r3, [fp]
 8014032:	683a      	ldr	r2, [r7, #0]
 8014034:	f8cb 2000 	str.w	r2, [fp]
 8014038:	603b      	str	r3, [r7, #0]
 801403a:	9f04      	ldr	r7, [sp, #16]
 801403c:	e7b0      	b.n	8013fa0 <qsort+0x124>
 801403e:	4643      	mov	r3, r8
 8014040:	4622      	mov	r2, r4
 8014042:	4639      	mov	r1, r7
 8014044:	4628      	mov	r0, r5
 8014046:	f7ff fee1 	bl	8013e0c <swapfunc>
 801404a:	e00c      	b.n	8014066 <qsort+0x1ea>
 801404c:	1b2f      	subs	r7, r5, r4
 801404e:	4629      	mov	r1, r5
 8014050:	4638      	mov	r0, r7
 8014052:	47d0      	blx	sl
 8014054:	2800      	cmp	r0, #0
 8014056:	dd09      	ble.n	801406c <qsort+0x1f0>
 8014058:	f1b8 0f00 	cmp.w	r8, #0
 801405c:	d1ef      	bne.n	801403e <qsort+0x1c2>
 801405e:	682b      	ldr	r3, [r5, #0]
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	602a      	str	r2, [r5, #0]
 8014064:	603b      	str	r3, [r7, #0]
 8014066:	463d      	mov	r5, r7
 8014068:	42ae      	cmp	r6, r5
 801406a:	d3ef      	bcc.n	801404c <qsort+0x1d0>
 801406c:	9b01      	ldr	r3, [sp, #4]
 801406e:	4423      	add	r3, r4
 8014070:	9301      	str	r3, [sp, #4]
 8014072:	e7bb      	b.n	8013fec <qsort+0x170>
 8014074:	ebab 0305 	sub.w	r3, fp, r5
 8014078:	1baa      	subs	r2, r5, r6
 801407a:	429a      	cmp	r2, r3
 801407c:	bfa8      	it	ge
 801407e:	461a      	movge	r2, r3
 8014080:	9301      	str	r3, [sp, #4]
 8014082:	b12a      	cbz	r2, 8014090 <qsort+0x214>
 8014084:	4643      	mov	r3, r8
 8014086:	ebab 0102 	sub.w	r1, fp, r2
 801408a:	4630      	mov	r0, r6
 801408c:	f7ff febe 	bl	8013e0c <swapfunc>
 8014090:	9b03      	ldr	r3, [sp, #12]
 8014092:	eba3 0209 	sub.w	r2, r3, r9
 8014096:	eba9 0707 	sub.w	r7, r9, r7
 801409a:	1b12      	subs	r2, r2, r4
 801409c:	42ba      	cmp	r2, r7
 801409e:	bf28      	it	cs
 80140a0:	463a      	movcs	r2, r7
 80140a2:	b12a      	cbz	r2, 80140b0 <qsort+0x234>
 80140a4:	9903      	ldr	r1, [sp, #12]
 80140a6:	4643      	mov	r3, r8
 80140a8:	1a89      	subs	r1, r1, r2
 80140aa:	4658      	mov	r0, fp
 80140ac:	f7ff feae 	bl	8013e0c <swapfunc>
 80140b0:	9d01      	ldr	r5, [sp, #4]
 80140b2:	9b03      	ldr	r3, [sp, #12]
 80140b4:	42af      	cmp	r7, r5
 80140b6:	eba3 0007 	sub.w	r0, r3, r7
 80140ba:	d904      	bls.n	80140c6 <qsort+0x24a>
 80140bc:	4633      	mov	r3, r6
 80140be:	463d      	mov	r5, r7
 80140c0:	9f01      	ldr	r7, [sp, #4]
 80140c2:	4606      	mov	r6, r0
 80140c4:	4618      	mov	r0, r3
 80140c6:	42a7      	cmp	r7, r4
 80140c8:	d921      	bls.n	801410e <qsort+0x292>
 80140ca:	fbb7 f1f4 	udiv	r1, r7, r4
 80140ce:	9b02      	ldr	r3, [sp, #8]
 80140d0:	2b07      	cmp	r3, #7
 80140d2:	d80d      	bhi.n	80140f0 <qsort+0x274>
 80140d4:	fbb5 f5f4 	udiv	r5, r5, r4
 80140d8:	aa16      	add	r2, sp, #88	; 0x58
 80140da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80140de:	f843 6c40 	str.w	r6, [r3, #-64]
 80140e2:	f843 5c3c 	str.w	r5, [r3, #-60]
 80140e6:	9b02      	ldr	r3, [sp, #8]
 80140e8:	3301      	adds	r3, #1
 80140ea:	9302      	str	r3, [sp, #8]
 80140ec:	4606      	mov	r6, r0
 80140ee:	e6d6      	b.n	8013e9e <qsort+0x22>
 80140f0:	4653      	mov	r3, sl
 80140f2:	4622      	mov	r2, r4
 80140f4:	f7ff fec2 	bl	8013e7c <qsort>
 80140f8:	42a5      	cmp	r5, r4
 80140fa:	d80b      	bhi.n	8014114 <qsort+0x298>
 80140fc:	9b02      	ldr	r3, [sp, #8]
 80140fe:	aa16      	add	r2, sp, #88	; 0x58
 8014100:	3b01      	subs	r3, #1
 8014102:	9302      	str	r3, [sp, #8]
 8014104:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014108:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 801410c:	e7ee      	b.n	80140ec <qsort+0x270>
 801410e:	42a5      	cmp	r5, r4
 8014110:	f67f aed2 	bls.w	8013eb8 <qsort+0x3c>
 8014114:	fbb5 f1f4 	udiv	r1, r5, r4
 8014118:	4630      	mov	r0, r6
 801411a:	e7e7      	b.n	80140ec <qsort+0x270>

0801411c <realloc>:
 801411c:	4b02      	ldr	r3, [pc, #8]	; (8014128 <realloc+0xc>)
 801411e:	460a      	mov	r2, r1
 8014120:	4601      	mov	r1, r0
 8014122:	6818      	ldr	r0, [r3, #0]
 8014124:	f002 bb57 	b.w	80167d6 <_realloc_r>
 8014128:	20000088 	.word	0x20000088

0801412c <_sbrk_r>:
 801412c:	b538      	push	{r3, r4, r5, lr}
 801412e:	4d06      	ldr	r5, [pc, #24]	; (8014148 <_sbrk_r+0x1c>)
 8014130:	2300      	movs	r3, #0
 8014132:	4604      	mov	r4, r0
 8014134:	4608      	mov	r0, r1
 8014136:	602b      	str	r3, [r5, #0]
 8014138:	f7ed fb7e 	bl	8001838 <_sbrk>
 801413c:	1c43      	adds	r3, r0, #1
 801413e:	d102      	bne.n	8014146 <_sbrk_r+0x1a>
 8014140:	682b      	ldr	r3, [r5, #0]
 8014142:	b103      	cbz	r3, 8014146 <_sbrk_r+0x1a>
 8014144:	6023      	str	r3, [r4, #0]
 8014146:	bd38      	pop	{r3, r4, r5, pc}
 8014148:	20003e84 	.word	0x20003e84

0801414c <siprintf>:
 801414c:	b40e      	push	{r1, r2, r3}
 801414e:	b500      	push	{lr}
 8014150:	b09c      	sub	sp, #112	; 0x70
 8014152:	ab1d      	add	r3, sp, #116	; 0x74
 8014154:	9002      	str	r0, [sp, #8]
 8014156:	9006      	str	r0, [sp, #24]
 8014158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801415c:	4809      	ldr	r0, [pc, #36]	; (8014184 <siprintf+0x38>)
 801415e:	9107      	str	r1, [sp, #28]
 8014160:	9104      	str	r1, [sp, #16]
 8014162:	4909      	ldr	r1, [pc, #36]	; (8014188 <siprintf+0x3c>)
 8014164:	f853 2b04 	ldr.w	r2, [r3], #4
 8014168:	9105      	str	r1, [sp, #20]
 801416a:	6800      	ldr	r0, [r0, #0]
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	a902      	add	r1, sp, #8
 8014170:	f002 fbbc 	bl	80168ec <_svfiprintf_r>
 8014174:	9b02      	ldr	r3, [sp, #8]
 8014176:	2200      	movs	r2, #0
 8014178:	701a      	strb	r2, [r3, #0]
 801417a:	b01c      	add	sp, #112	; 0x70
 801417c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014180:	b003      	add	sp, #12
 8014182:	4770      	bx	lr
 8014184:	20000088 	.word	0x20000088
 8014188:	ffff0208 	.word	0xffff0208

0801418c <siscanf>:
 801418c:	b40e      	push	{r1, r2, r3}
 801418e:	b510      	push	{r4, lr}
 8014190:	b09f      	sub	sp, #124	; 0x7c
 8014192:	ac21      	add	r4, sp, #132	; 0x84
 8014194:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014198:	f854 2b04 	ldr.w	r2, [r4], #4
 801419c:	9201      	str	r2, [sp, #4]
 801419e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80141a2:	9004      	str	r0, [sp, #16]
 80141a4:	9008      	str	r0, [sp, #32]
 80141a6:	f7ec f9a5 	bl	80004f4 <strlen>
 80141aa:	4b0c      	ldr	r3, [pc, #48]	; (80141dc <siscanf+0x50>)
 80141ac:	9005      	str	r0, [sp, #20]
 80141ae:	9009      	str	r0, [sp, #36]	; 0x24
 80141b0:	930d      	str	r3, [sp, #52]	; 0x34
 80141b2:	480b      	ldr	r0, [pc, #44]	; (80141e0 <siscanf+0x54>)
 80141b4:	9a01      	ldr	r2, [sp, #4]
 80141b6:	6800      	ldr	r0, [r0, #0]
 80141b8:	9403      	str	r4, [sp, #12]
 80141ba:	2300      	movs	r3, #0
 80141bc:	9311      	str	r3, [sp, #68]	; 0x44
 80141be:	9316      	str	r3, [sp, #88]	; 0x58
 80141c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80141c8:	a904      	add	r1, sp, #16
 80141ca:	4623      	mov	r3, r4
 80141cc:	f002 fce8 	bl	8016ba0 <__ssvfiscanf_r>
 80141d0:	b01f      	add	sp, #124	; 0x7c
 80141d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141d6:	b003      	add	sp, #12
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop
 80141dc:	08014207 	.word	0x08014207
 80141e0:	20000088 	.word	0x20000088

080141e4 <__sread>:
 80141e4:	b510      	push	{r4, lr}
 80141e6:	460c      	mov	r4, r1
 80141e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141ec:	f002 ffa2 	bl	8017134 <_read_r>
 80141f0:	2800      	cmp	r0, #0
 80141f2:	bfab      	itete	ge
 80141f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141f6:	89a3      	ldrhlt	r3, [r4, #12]
 80141f8:	181b      	addge	r3, r3, r0
 80141fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80141fe:	bfac      	ite	ge
 8014200:	6563      	strge	r3, [r4, #84]	; 0x54
 8014202:	81a3      	strhlt	r3, [r4, #12]
 8014204:	bd10      	pop	{r4, pc}

08014206 <__seofread>:
 8014206:	2000      	movs	r0, #0
 8014208:	4770      	bx	lr

0801420a <__swrite>:
 801420a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801420e:	461f      	mov	r7, r3
 8014210:	898b      	ldrh	r3, [r1, #12]
 8014212:	05db      	lsls	r3, r3, #23
 8014214:	4605      	mov	r5, r0
 8014216:	460c      	mov	r4, r1
 8014218:	4616      	mov	r6, r2
 801421a:	d505      	bpl.n	8014228 <__swrite+0x1e>
 801421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014220:	2302      	movs	r3, #2
 8014222:	2200      	movs	r2, #0
 8014224:	f001 fdcc 	bl	8015dc0 <_lseek_r>
 8014228:	89a3      	ldrh	r3, [r4, #12]
 801422a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801422e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014232:	81a3      	strh	r3, [r4, #12]
 8014234:	4632      	mov	r2, r6
 8014236:	463b      	mov	r3, r7
 8014238:	4628      	mov	r0, r5
 801423a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801423e:	f001 b98b 	b.w	8015558 <_write_r>

08014242 <__sseek>:
 8014242:	b510      	push	{r4, lr}
 8014244:	460c      	mov	r4, r1
 8014246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801424a:	f001 fdb9 	bl	8015dc0 <_lseek_r>
 801424e:	1c43      	adds	r3, r0, #1
 8014250:	89a3      	ldrh	r3, [r4, #12]
 8014252:	bf15      	itete	ne
 8014254:	6560      	strne	r0, [r4, #84]	; 0x54
 8014256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801425a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801425e:	81a3      	strheq	r3, [r4, #12]
 8014260:	bf18      	it	ne
 8014262:	81a3      	strhne	r3, [r4, #12]
 8014264:	bd10      	pop	{r4, pc}

08014266 <__sclose>:
 8014266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801426a:	f001 b9f5 	b.w	8015658 <_close_r>

0801426e <strchr>:
 801426e:	b2c9      	uxtb	r1, r1
 8014270:	4603      	mov	r3, r0
 8014272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014276:	b11a      	cbz	r2, 8014280 <strchr+0x12>
 8014278:	428a      	cmp	r2, r1
 801427a:	d1f9      	bne.n	8014270 <strchr+0x2>
 801427c:	4618      	mov	r0, r3
 801427e:	4770      	bx	lr
 8014280:	2900      	cmp	r1, #0
 8014282:	bf18      	it	ne
 8014284:	2300      	movne	r3, #0
 8014286:	e7f9      	b.n	801427c <strchr+0xe>

08014288 <strcspn>:
 8014288:	b570      	push	{r4, r5, r6, lr}
 801428a:	4603      	mov	r3, r0
 801428c:	461e      	mov	r6, r3
 801428e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8014292:	b144      	cbz	r4, 80142a6 <strcspn+0x1e>
 8014294:	1e4a      	subs	r2, r1, #1
 8014296:	e001      	b.n	801429c <strcspn+0x14>
 8014298:	42a5      	cmp	r5, r4
 801429a:	d004      	beq.n	80142a6 <strcspn+0x1e>
 801429c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80142a0:	2d00      	cmp	r5, #0
 80142a2:	d1f9      	bne.n	8014298 <strcspn+0x10>
 80142a4:	e7f2      	b.n	801428c <strcspn+0x4>
 80142a6:	1a30      	subs	r0, r6, r0
 80142a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080142ac <_strerror_r>:
 80142ac:	b510      	push	{r4, lr}
 80142ae:	4604      	mov	r4, r0
 80142b0:	4608      	mov	r0, r1
 80142b2:	4611      	mov	r1, r2
 80142b4:	288e      	cmp	r0, #142	; 0x8e
 80142b6:	f200 8130 	bhi.w	801451a <_strerror_r+0x26e>
 80142ba:	e8df f010 	tbh	[pc, r0, lsl #1]
 80142be:	0139      	.short	0x0139
 80142c0:	0092008f 	.word	0x0092008f
 80142c4:	00960094 	.word	0x00960094
 80142c8:	009a0098 	.word	0x009a0098
 80142cc:	009e009c 	.word	0x009e009c
 80142d0:	00a400a2 	.word	0x00a400a2
 80142d4:	00aa00a8 	.word	0x00aa00a8
 80142d8:	00ae00ac 	.word	0x00ae00ac
 80142dc:	00b0012e 	.word	0x00b0012e
 80142e0:	00b400b2 	.word	0x00b400b2
 80142e4:	00b800b6 	.word	0x00b800b6
 80142e8:	00c000be 	.word	0x00c000be
 80142ec:	00c800c6 	.word	0x00c800c6
 80142f0:	00cc00ca 	.word	0x00cc00ca
 80142f4:	00d200ce 	.word	0x00d200ce
 80142f8:	00d800d6 	.word	0x00d800d6
 80142fc:	00dc00da 	.word	0x00dc00da
 8014300:	00e000de 	.word	0x00e000de
 8014304:	00e400e2 	.word	0x00e400e2
 8014308:	012e012e 	.word	0x012e012e
 801430c:	012e012e 	.word	0x012e012e
 8014310:	012e012e 	.word	0x012e012e
 8014314:	012e012e 	.word	0x012e012e
 8014318:	00ec00e8 	.word	0x00ec00e8
 801431c:	012e012e 	.word	0x012e012e
 8014320:	012e012e 	.word	0x012e012e
 8014324:	012e012e 	.word	0x012e012e
 8014328:	012e012e 	.word	0x012e012e
 801432c:	012e012e 	.word	0x012e012e
 8014330:	012e012e 	.word	0x012e012e
 8014334:	00ee012e 	.word	0x00ee012e
 8014338:	00f00108 	.word	0x00f00108
 801433c:	012e00f2 	.word	0x012e00f2
 8014340:	012e012e 	.word	0x012e012e
 8014344:	012e00f4 	.word	0x012e00f4
 8014348:	012e012e 	.word	0x012e012e
 801434c:	012e00f6 	.word	0x012e00f6
 8014350:	00fa012e 	.word	0x00fa012e
 8014354:	012e012e 	.word	0x012e012e
 8014358:	012e00fc 	.word	0x012e00fc
 801435c:	012e012e 	.word	0x012e012e
 8014360:	012e012e 	.word	0x012e012e
 8014364:	012e012e 	.word	0x012e012e
 8014368:	012e012e 	.word	0x012e012e
 801436c:	00fe012e 	.word	0x00fe012e
 8014370:	0100012e 	.word	0x0100012e
 8014374:	01040102 	.word	0x01040102
 8014378:	012e012e 	.word	0x012e012e
 801437c:	012e0126 	.word	0x012e0126
 8014380:	012e012e 	.word	0x012e012e
 8014384:	012e012e 	.word	0x012e012e
 8014388:	012e012e 	.word	0x012e012e
 801438c:	0114012e 	.word	0x0114012e
 8014390:	010a0106 	.word	0x010a0106
 8014394:	010e010c 	.word	0x010e010c
 8014398:	012e0110 	.word	0x012e0110
 801439c:	01160112 	.word	0x01160112
 80143a0:	00ea011a 	.word	0x00ea011a
 80143a4:	012c00c2 	.word	0x012c00c2
 80143a8:	00d000ba 	.word	0x00d000ba
 80143ac:	00a000bc 	.word	0x00a000bc
 80143b0:	012a00a6 	.word	0x012a00a6
 80143b4:	012e00f8 	.word	0x012e00f8
 80143b8:	00c40118 	.word	0x00c40118
 80143bc:	011c011e 	.word	0x011c011e
 80143c0:	012e012e 	.word	0x012e012e
 80143c4:	012e012e 	.word	0x012e012e
 80143c8:	00d4012e 	.word	0x00d4012e
 80143cc:	012e012e 	.word	0x012e012e
 80143d0:	00e6012e 	.word	0x00e6012e
 80143d4:	01200128 	.word	0x01200128
 80143d8:	01240122 	.word	0x01240122
 80143dc:	4b55      	ldr	r3, [pc, #340]	; (8014534 <_strerror_r+0x288>)
 80143de:	4618      	mov	r0, r3
 80143e0:	bd10      	pop	{r4, pc}
 80143e2:	4b55      	ldr	r3, [pc, #340]	; (8014538 <_strerror_r+0x28c>)
 80143e4:	e7fb      	b.n	80143de <_strerror_r+0x132>
 80143e6:	4b55      	ldr	r3, [pc, #340]	; (801453c <_strerror_r+0x290>)
 80143e8:	e7f9      	b.n	80143de <_strerror_r+0x132>
 80143ea:	4b55      	ldr	r3, [pc, #340]	; (8014540 <_strerror_r+0x294>)
 80143ec:	e7f7      	b.n	80143de <_strerror_r+0x132>
 80143ee:	4b55      	ldr	r3, [pc, #340]	; (8014544 <_strerror_r+0x298>)
 80143f0:	e7f5      	b.n	80143de <_strerror_r+0x132>
 80143f2:	4b55      	ldr	r3, [pc, #340]	; (8014548 <_strerror_r+0x29c>)
 80143f4:	e7f3      	b.n	80143de <_strerror_r+0x132>
 80143f6:	4b55      	ldr	r3, [pc, #340]	; (801454c <_strerror_r+0x2a0>)
 80143f8:	e7f1      	b.n	80143de <_strerror_r+0x132>
 80143fa:	4b55      	ldr	r3, [pc, #340]	; (8014550 <_strerror_r+0x2a4>)
 80143fc:	e7ef      	b.n	80143de <_strerror_r+0x132>
 80143fe:	4b55      	ldr	r3, [pc, #340]	; (8014554 <_strerror_r+0x2a8>)
 8014400:	e7ed      	b.n	80143de <_strerror_r+0x132>
 8014402:	4b55      	ldr	r3, [pc, #340]	; (8014558 <_strerror_r+0x2ac>)
 8014404:	e7eb      	b.n	80143de <_strerror_r+0x132>
 8014406:	4b55      	ldr	r3, [pc, #340]	; (801455c <_strerror_r+0x2b0>)
 8014408:	e7e9      	b.n	80143de <_strerror_r+0x132>
 801440a:	4b55      	ldr	r3, [pc, #340]	; (8014560 <_strerror_r+0x2b4>)
 801440c:	e7e7      	b.n	80143de <_strerror_r+0x132>
 801440e:	4b55      	ldr	r3, [pc, #340]	; (8014564 <_strerror_r+0x2b8>)
 8014410:	e7e5      	b.n	80143de <_strerror_r+0x132>
 8014412:	4b55      	ldr	r3, [pc, #340]	; (8014568 <_strerror_r+0x2bc>)
 8014414:	e7e3      	b.n	80143de <_strerror_r+0x132>
 8014416:	4b55      	ldr	r3, [pc, #340]	; (801456c <_strerror_r+0x2c0>)
 8014418:	e7e1      	b.n	80143de <_strerror_r+0x132>
 801441a:	4b55      	ldr	r3, [pc, #340]	; (8014570 <_strerror_r+0x2c4>)
 801441c:	e7df      	b.n	80143de <_strerror_r+0x132>
 801441e:	4b55      	ldr	r3, [pc, #340]	; (8014574 <_strerror_r+0x2c8>)
 8014420:	e7dd      	b.n	80143de <_strerror_r+0x132>
 8014422:	4b55      	ldr	r3, [pc, #340]	; (8014578 <_strerror_r+0x2cc>)
 8014424:	e7db      	b.n	80143de <_strerror_r+0x132>
 8014426:	4b55      	ldr	r3, [pc, #340]	; (801457c <_strerror_r+0x2d0>)
 8014428:	e7d9      	b.n	80143de <_strerror_r+0x132>
 801442a:	4b55      	ldr	r3, [pc, #340]	; (8014580 <_strerror_r+0x2d4>)
 801442c:	e7d7      	b.n	80143de <_strerror_r+0x132>
 801442e:	4b55      	ldr	r3, [pc, #340]	; (8014584 <_strerror_r+0x2d8>)
 8014430:	e7d5      	b.n	80143de <_strerror_r+0x132>
 8014432:	4b55      	ldr	r3, [pc, #340]	; (8014588 <_strerror_r+0x2dc>)
 8014434:	e7d3      	b.n	80143de <_strerror_r+0x132>
 8014436:	4b55      	ldr	r3, [pc, #340]	; (801458c <_strerror_r+0x2e0>)
 8014438:	e7d1      	b.n	80143de <_strerror_r+0x132>
 801443a:	4b55      	ldr	r3, [pc, #340]	; (8014590 <_strerror_r+0x2e4>)
 801443c:	e7cf      	b.n	80143de <_strerror_r+0x132>
 801443e:	4b55      	ldr	r3, [pc, #340]	; (8014594 <_strerror_r+0x2e8>)
 8014440:	e7cd      	b.n	80143de <_strerror_r+0x132>
 8014442:	4b55      	ldr	r3, [pc, #340]	; (8014598 <_strerror_r+0x2ec>)
 8014444:	e7cb      	b.n	80143de <_strerror_r+0x132>
 8014446:	4b55      	ldr	r3, [pc, #340]	; (801459c <_strerror_r+0x2f0>)
 8014448:	e7c9      	b.n	80143de <_strerror_r+0x132>
 801444a:	4b55      	ldr	r3, [pc, #340]	; (80145a0 <_strerror_r+0x2f4>)
 801444c:	e7c7      	b.n	80143de <_strerror_r+0x132>
 801444e:	4b55      	ldr	r3, [pc, #340]	; (80145a4 <_strerror_r+0x2f8>)
 8014450:	e7c5      	b.n	80143de <_strerror_r+0x132>
 8014452:	4b55      	ldr	r3, [pc, #340]	; (80145a8 <_strerror_r+0x2fc>)
 8014454:	e7c3      	b.n	80143de <_strerror_r+0x132>
 8014456:	4b55      	ldr	r3, [pc, #340]	; (80145ac <_strerror_r+0x300>)
 8014458:	e7c1      	b.n	80143de <_strerror_r+0x132>
 801445a:	4b55      	ldr	r3, [pc, #340]	; (80145b0 <_strerror_r+0x304>)
 801445c:	e7bf      	b.n	80143de <_strerror_r+0x132>
 801445e:	4b55      	ldr	r3, [pc, #340]	; (80145b4 <_strerror_r+0x308>)
 8014460:	e7bd      	b.n	80143de <_strerror_r+0x132>
 8014462:	4b55      	ldr	r3, [pc, #340]	; (80145b8 <_strerror_r+0x30c>)
 8014464:	e7bb      	b.n	80143de <_strerror_r+0x132>
 8014466:	4b55      	ldr	r3, [pc, #340]	; (80145bc <_strerror_r+0x310>)
 8014468:	e7b9      	b.n	80143de <_strerror_r+0x132>
 801446a:	4b55      	ldr	r3, [pc, #340]	; (80145c0 <_strerror_r+0x314>)
 801446c:	e7b7      	b.n	80143de <_strerror_r+0x132>
 801446e:	4b55      	ldr	r3, [pc, #340]	; (80145c4 <_strerror_r+0x318>)
 8014470:	e7b5      	b.n	80143de <_strerror_r+0x132>
 8014472:	4b55      	ldr	r3, [pc, #340]	; (80145c8 <_strerror_r+0x31c>)
 8014474:	e7b3      	b.n	80143de <_strerror_r+0x132>
 8014476:	4b55      	ldr	r3, [pc, #340]	; (80145cc <_strerror_r+0x320>)
 8014478:	e7b1      	b.n	80143de <_strerror_r+0x132>
 801447a:	4b55      	ldr	r3, [pc, #340]	; (80145d0 <_strerror_r+0x324>)
 801447c:	e7af      	b.n	80143de <_strerror_r+0x132>
 801447e:	4b55      	ldr	r3, [pc, #340]	; (80145d4 <_strerror_r+0x328>)
 8014480:	e7ad      	b.n	80143de <_strerror_r+0x132>
 8014482:	4b55      	ldr	r3, [pc, #340]	; (80145d8 <_strerror_r+0x32c>)
 8014484:	e7ab      	b.n	80143de <_strerror_r+0x132>
 8014486:	4b55      	ldr	r3, [pc, #340]	; (80145dc <_strerror_r+0x330>)
 8014488:	e7a9      	b.n	80143de <_strerror_r+0x132>
 801448a:	4b55      	ldr	r3, [pc, #340]	; (80145e0 <_strerror_r+0x334>)
 801448c:	e7a7      	b.n	80143de <_strerror_r+0x132>
 801448e:	4b55      	ldr	r3, [pc, #340]	; (80145e4 <_strerror_r+0x338>)
 8014490:	e7a5      	b.n	80143de <_strerror_r+0x132>
 8014492:	4b55      	ldr	r3, [pc, #340]	; (80145e8 <_strerror_r+0x33c>)
 8014494:	e7a3      	b.n	80143de <_strerror_r+0x132>
 8014496:	4b55      	ldr	r3, [pc, #340]	; (80145ec <_strerror_r+0x340>)
 8014498:	e7a1      	b.n	80143de <_strerror_r+0x132>
 801449a:	4b55      	ldr	r3, [pc, #340]	; (80145f0 <_strerror_r+0x344>)
 801449c:	e79f      	b.n	80143de <_strerror_r+0x132>
 801449e:	4b55      	ldr	r3, [pc, #340]	; (80145f4 <_strerror_r+0x348>)
 80144a0:	e79d      	b.n	80143de <_strerror_r+0x132>
 80144a2:	4b55      	ldr	r3, [pc, #340]	; (80145f8 <_strerror_r+0x34c>)
 80144a4:	e79b      	b.n	80143de <_strerror_r+0x132>
 80144a6:	4b55      	ldr	r3, [pc, #340]	; (80145fc <_strerror_r+0x350>)
 80144a8:	e799      	b.n	80143de <_strerror_r+0x132>
 80144aa:	4b55      	ldr	r3, [pc, #340]	; (8014600 <_strerror_r+0x354>)
 80144ac:	e797      	b.n	80143de <_strerror_r+0x132>
 80144ae:	4b55      	ldr	r3, [pc, #340]	; (8014604 <_strerror_r+0x358>)
 80144b0:	e795      	b.n	80143de <_strerror_r+0x132>
 80144b2:	4b55      	ldr	r3, [pc, #340]	; (8014608 <_strerror_r+0x35c>)
 80144b4:	e793      	b.n	80143de <_strerror_r+0x132>
 80144b6:	4b55      	ldr	r3, [pc, #340]	; (801460c <_strerror_r+0x360>)
 80144b8:	e791      	b.n	80143de <_strerror_r+0x132>
 80144ba:	4b55      	ldr	r3, [pc, #340]	; (8014610 <_strerror_r+0x364>)
 80144bc:	e78f      	b.n	80143de <_strerror_r+0x132>
 80144be:	4b55      	ldr	r3, [pc, #340]	; (8014614 <_strerror_r+0x368>)
 80144c0:	e78d      	b.n	80143de <_strerror_r+0x132>
 80144c2:	4b55      	ldr	r3, [pc, #340]	; (8014618 <_strerror_r+0x36c>)
 80144c4:	e78b      	b.n	80143de <_strerror_r+0x132>
 80144c6:	4b55      	ldr	r3, [pc, #340]	; (801461c <_strerror_r+0x370>)
 80144c8:	e789      	b.n	80143de <_strerror_r+0x132>
 80144ca:	4b55      	ldr	r3, [pc, #340]	; (8014620 <_strerror_r+0x374>)
 80144cc:	e787      	b.n	80143de <_strerror_r+0x132>
 80144ce:	4b55      	ldr	r3, [pc, #340]	; (8014624 <_strerror_r+0x378>)
 80144d0:	e785      	b.n	80143de <_strerror_r+0x132>
 80144d2:	4b55      	ldr	r3, [pc, #340]	; (8014628 <_strerror_r+0x37c>)
 80144d4:	e783      	b.n	80143de <_strerror_r+0x132>
 80144d6:	4b55      	ldr	r3, [pc, #340]	; (801462c <_strerror_r+0x380>)
 80144d8:	e781      	b.n	80143de <_strerror_r+0x132>
 80144da:	4b55      	ldr	r3, [pc, #340]	; (8014630 <_strerror_r+0x384>)
 80144dc:	e77f      	b.n	80143de <_strerror_r+0x132>
 80144de:	4b55      	ldr	r3, [pc, #340]	; (8014634 <_strerror_r+0x388>)
 80144e0:	e77d      	b.n	80143de <_strerror_r+0x132>
 80144e2:	4b55      	ldr	r3, [pc, #340]	; (8014638 <_strerror_r+0x38c>)
 80144e4:	e77b      	b.n	80143de <_strerror_r+0x132>
 80144e6:	4b55      	ldr	r3, [pc, #340]	; (801463c <_strerror_r+0x390>)
 80144e8:	e779      	b.n	80143de <_strerror_r+0x132>
 80144ea:	4b55      	ldr	r3, [pc, #340]	; (8014640 <_strerror_r+0x394>)
 80144ec:	e777      	b.n	80143de <_strerror_r+0x132>
 80144ee:	4b55      	ldr	r3, [pc, #340]	; (8014644 <_strerror_r+0x398>)
 80144f0:	e775      	b.n	80143de <_strerror_r+0x132>
 80144f2:	4b55      	ldr	r3, [pc, #340]	; (8014648 <_strerror_r+0x39c>)
 80144f4:	e773      	b.n	80143de <_strerror_r+0x132>
 80144f6:	4b55      	ldr	r3, [pc, #340]	; (801464c <_strerror_r+0x3a0>)
 80144f8:	e771      	b.n	80143de <_strerror_r+0x132>
 80144fa:	4b55      	ldr	r3, [pc, #340]	; (8014650 <_strerror_r+0x3a4>)
 80144fc:	e76f      	b.n	80143de <_strerror_r+0x132>
 80144fe:	4b55      	ldr	r3, [pc, #340]	; (8014654 <_strerror_r+0x3a8>)
 8014500:	e76d      	b.n	80143de <_strerror_r+0x132>
 8014502:	4b55      	ldr	r3, [pc, #340]	; (8014658 <_strerror_r+0x3ac>)
 8014504:	e76b      	b.n	80143de <_strerror_r+0x132>
 8014506:	4b55      	ldr	r3, [pc, #340]	; (801465c <_strerror_r+0x3b0>)
 8014508:	e769      	b.n	80143de <_strerror_r+0x132>
 801450a:	4b55      	ldr	r3, [pc, #340]	; (8014660 <_strerror_r+0x3b4>)
 801450c:	e767      	b.n	80143de <_strerror_r+0x132>
 801450e:	4b55      	ldr	r3, [pc, #340]	; (8014664 <_strerror_r+0x3b8>)
 8014510:	e765      	b.n	80143de <_strerror_r+0x132>
 8014512:	4b55      	ldr	r3, [pc, #340]	; (8014668 <_strerror_r+0x3bc>)
 8014514:	e763      	b.n	80143de <_strerror_r+0x132>
 8014516:	4b55      	ldr	r3, [pc, #340]	; (801466c <_strerror_r+0x3c0>)
 8014518:	e761      	b.n	80143de <_strerror_r+0x132>
 801451a:	2b00      	cmp	r3, #0
 801451c:	bf14      	ite	ne
 801451e:	461a      	movne	r2, r3
 8014520:	4622      	moveq	r2, r4
 8014522:	f000 ffc5 	bl	80154b0 <_user_strerror>
 8014526:	4b52      	ldr	r3, [pc, #328]	; (8014670 <_strerror_r+0x3c4>)
 8014528:	2800      	cmp	r0, #0
 801452a:	bf18      	it	ne
 801452c:	4603      	movne	r3, r0
 801452e:	e756      	b.n	80143de <_strerror_r+0x132>
 8014530:	4b50      	ldr	r3, [pc, #320]	; (8014674 <_strerror_r+0x3c8>)
 8014532:	e754      	b.n	80143de <_strerror_r+0x132>
 8014534:	0801d08b 	.word	0x0801d08b
 8014538:	0801d095 	.word	0x0801d095
 801453c:	0801d0af 	.word	0x0801d0af
 8014540:	0801d0bf 	.word	0x0801d0bf
 8014544:	0801d0d7 	.word	0x0801d0d7
 8014548:	0801d0e1 	.word	0x0801d0e1
 801454c:	0801d0fb 	.word	0x0801d0fb
 8014550:	0801d10d 	.word	0x0801d10d
 8014554:	0801d11f 	.word	0x0801d11f
 8014558:	0801d138 	.word	0x0801d138
 801455c:	0801d148 	.word	0x0801d148
 8014560:	0801d154 	.word	0x0801d154
 8014564:	0801d171 	.word	0x0801d171
 8014568:	0801d183 	.word	0x0801d183
 801456c:	0801d194 	.word	0x0801d194
 8014570:	0801d1a6 	.word	0x0801d1a6
 8014574:	0801d1b2 	.word	0x0801d1b2
 8014578:	0801d1ca 	.word	0x0801d1ca
 801457c:	0801d1d6 	.word	0x0801d1d6
 8014580:	0801d1e8 	.word	0x0801d1e8
 8014584:	0801d1f7 	.word	0x0801d1f7
 8014588:	0801d207 	.word	0x0801d207
 801458c:	0801d214 	.word	0x0801d214
 8014590:	0801d233 	.word	0x0801d233
 8014594:	0801d242 	.word	0x0801d242
 8014598:	0801d253 	.word	0x0801d253
 801459c:	0801d277 	.word	0x0801d277
 80145a0:	0801d295 	.word	0x0801d295
 80145a4:	0801d2b3 	.word	0x0801d2b3
 80145a8:	0801d2d3 	.word	0x0801d2d3
 80145ac:	0801d2ea 	.word	0x0801d2ea
 80145b0:	0801d2f9 	.word	0x0801d2f9
 80145b4:	0801d308 	.word	0x0801d308
 80145b8:	0801d31c 	.word	0x0801d31c
 80145bc:	0801d334 	.word	0x0801d334
 80145c0:	0801d342 	.word	0x0801d342
 80145c4:	0801d34f 	.word	0x0801d34f
 80145c8:	0801d365 	.word	0x0801d365
 80145cc:	0801d374 	.word	0x0801d374
 80145d0:	0801d380 	.word	0x0801d380
 80145d4:	0801d3af 	.word	0x0801d3af
 80145d8:	0801d3c0 	.word	0x0801d3c0
 80145dc:	0801d3db 	.word	0x0801d3db
 80145e0:	0801d3ee 	.word	0x0801d3ee
 80145e4:	0801d404 	.word	0x0801d404
 80145e8:	0801d40d 	.word	0x0801d40d
 80145ec:	0801d424 	.word	0x0801d424
 80145f0:	0801d42c 	.word	0x0801d42c
 80145f4:	0801d439 	.word	0x0801d439
 80145f8:	0801d44e 	.word	0x0801d44e
 80145fc:	0801d462 	.word	0x0801d462
 8014600:	0801d47a 	.word	0x0801d47a
 8014604:	0801d489 	.word	0x0801d489
 8014608:	0801d49a 	.word	0x0801d49a
 801460c:	0801d4ad 	.word	0x0801d4ad
 8014610:	0801d4b9 	.word	0x0801d4b9
 8014614:	0801d4d2 	.word	0x0801d4d2
 8014618:	0801d4e6 	.word	0x0801d4e6
 801461c:	0801d501 	.word	0x0801d501
 8014620:	0801d519 	.word	0x0801d519
 8014624:	0801d533 	.word	0x0801d533
 8014628:	0801d53b 	.word	0x0801d53b
 801462c:	0801d56b 	.word	0x0801d56b
 8014630:	0801d58a 	.word	0x0801d58a
 8014634:	0801d5a9 	.word	0x0801d5a9
 8014638:	0801d5c0 	.word	0x0801d5c0
 801463c:	0801d5d3 	.word	0x0801d5d3
 8014640:	0801d5ec 	.word	0x0801d5ec
 8014644:	0801d603 	.word	0x0801d603
 8014648:	0801d619 	.word	0x0801d619
 801464c:	0801d63a 	.word	0x0801d63a
 8014650:	0801d652 	.word	0x0801d652
 8014654:	0801d66e 	.word	0x0801d66e
 8014658:	0801d681 	.word	0x0801d681
 801465c:	0801d697 	.word	0x0801d697
 8014660:	0801d6ab 	.word	0x0801d6ab
 8014664:	0801d6cd 	.word	0x0801d6cd
 8014668:	0801d6f3 	.word	0x0801d6f3
 801466c:	0801d704 	.word	0x0801d704
 8014670:	0801d9d2 	.word	0x0801d9d2
 8014674:	0801d719 	.word	0x0801d719

08014678 <strerror>:
 8014678:	4601      	mov	r1, r0
 801467a:	4803      	ldr	r0, [pc, #12]	; (8014688 <strerror+0x10>)
 801467c:	2300      	movs	r3, #0
 801467e:	6800      	ldr	r0, [r0, #0]
 8014680:	461a      	mov	r2, r3
 8014682:	f7ff be13 	b.w	80142ac <_strerror_r>
 8014686:	bf00      	nop
 8014688:	20000088 	.word	0x20000088

0801468c <strncpy>:
 801468c:	b510      	push	{r4, lr}
 801468e:	3901      	subs	r1, #1
 8014690:	4603      	mov	r3, r0
 8014692:	b132      	cbz	r2, 80146a2 <strncpy+0x16>
 8014694:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014698:	f803 4b01 	strb.w	r4, [r3], #1
 801469c:	3a01      	subs	r2, #1
 801469e:	2c00      	cmp	r4, #0
 80146a0:	d1f7      	bne.n	8014692 <strncpy+0x6>
 80146a2:	441a      	add	r2, r3
 80146a4:	2100      	movs	r1, #0
 80146a6:	4293      	cmp	r3, r2
 80146a8:	d100      	bne.n	80146ac <strncpy+0x20>
 80146aa:	bd10      	pop	{r4, pc}
 80146ac:	f803 1b01 	strb.w	r1, [r3], #1
 80146b0:	e7f9      	b.n	80146a6 <strncpy+0x1a>

080146b2 <strrchr>:
 80146b2:	b538      	push	{r3, r4, r5, lr}
 80146b4:	4603      	mov	r3, r0
 80146b6:	460c      	mov	r4, r1
 80146b8:	b969      	cbnz	r1, 80146d6 <strrchr+0x24>
 80146ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146be:	f7ff bdd6 	b.w	801426e <strchr>
 80146c2:	1c43      	adds	r3, r0, #1
 80146c4:	4605      	mov	r5, r0
 80146c6:	4621      	mov	r1, r4
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff fdd0 	bl	801426e <strchr>
 80146ce:	2800      	cmp	r0, #0
 80146d0:	d1f7      	bne.n	80146c2 <strrchr+0x10>
 80146d2:	4628      	mov	r0, r5
 80146d4:	bd38      	pop	{r3, r4, r5, pc}
 80146d6:	2500      	movs	r5, #0
 80146d8:	e7f5      	b.n	80146c6 <strrchr+0x14>

080146da <strspn>:
 80146da:	b570      	push	{r4, r5, r6, lr}
 80146dc:	4603      	mov	r3, r0
 80146de:	461e      	mov	r6, r3
 80146e0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80146e4:	b13c      	cbz	r4, 80146f6 <strspn+0x1c>
 80146e6:	1e4a      	subs	r2, r1, #1
 80146e8:	e001      	b.n	80146ee <strspn+0x14>
 80146ea:	42a5      	cmp	r5, r4
 80146ec:	d0f7      	beq.n	80146de <strspn+0x4>
 80146ee:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80146f2:	2d00      	cmp	r5, #0
 80146f4:	d1f9      	bne.n	80146ea <strspn+0x10>
 80146f6:	1a30      	subs	r0, r6, r0
 80146f8:	bd70      	pop	{r4, r5, r6, pc}

080146fa <strstr>:
 80146fa:	780a      	ldrb	r2, [r1, #0]
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	b96a      	cbnz	r2, 801471c <strstr+0x22>
 8014700:	bd70      	pop	{r4, r5, r6, pc}
 8014702:	429a      	cmp	r2, r3
 8014704:	d109      	bne.n	801471a <strstr+0x20>
 8014706:	460c      	mov	r4, r1
 8014708:	4605      	mov	r5, r0
 801470a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801470e:	2b00      	cmp	r3, #0
 8014710:	d0f6      	beq.n	8014700 <strstr+0x6>
 8014712:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014716:	429e      	cmp	r6, r3
 8014718:	d0f7      	beq.n	801470a <strstr+0x10>
 801471a:	3001      	adds	r0, #1
 801471c:	7803      	ldrb	r3, [r0, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1ef      	bne.n	8014702 <strstr+0x8>
 8014722:	4618      	mov	r0, r3
 8014724:	e7ec      	b.n	8014700 <strstr+0x6>

08014726 <sulp>:
 8014726:	b570      	push	{r4, r5, r6, lr}
 8014728:	4604      	mov	r4, r0
 801472a:	460d      	mov	r5, r1
 801472c:	ec45 4b10 	vmov	d0, r4, r5
 8014730:	4616      	mov	r6, r2
 8014732:	f001 ff01 	bl	8016538 <__ulp>
 8014736:	ec51 0b10 	vmov	r0, r1, d0
 801473a:	b17e      	cbz	r6, 801475c <sulp+0x36>
 801473c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014740:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014744:	2b00      	cmp	r3, #0
 8014746:	dd09      	ble.n	801475c <sulp+0x36>
 8014748:	051b      	lsls	r3, r3, #20
 801474a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801474e:	2400      	movs	r4, #0
 8014750:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014754:	4622      	mov	r2, r4
 8014756:	462b      	mov	r3, r5
 8014758:	f7ec f890 	bl	800087c <__aeabi_dmul>
 801475c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014760 <_strtod_l>:
 8014760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014764:	ed2d 8b02 	vpush	{d8}
 8014768:	b09d      	sub	sp, #116	; 0x74
 801476a:	461f      	mov	r7, r3
 801476c:	2300      	movs	r3, #0
 801476e:	9318      	str	r3, [sp, #96]	; 0x60
 8014770:	4ba2      	ldr	r3, [pc, #648]	; (80149fc <_strtod_l+0x29c>)
 8014772:	9213      	str	r2, [sp, #76]	; 0x4c
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	9305      	str	r3, [sp, #20]
 8014778:	4604      	mov	r4, r0
 801477a:	4618      	mov	r0, r3
 801477c:	4688      	mov	r8, r1
 801477e:	f7eb feb9 	bl	80004f4 <strlen>
 8014782:	f04f 0a00 	mov.w	sl, #0
 8014786:	4605      	mov	r5, r0
 8014788:	f04f 0b00 	mov.w	fp, #0
 801478c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014792:	781a      	ldrb	r2, [r3, #0]
 8014794:	2a2b      	cmp	r2, #43	; 0x2b
 8014796:	d04e      	beq.n	8014836 <_strtod_l+0xd6>
 8014798:	d83b      	bhi.n	8014812 <_strtod_l+0xb2>
 801479a:	2a0d      	cmp	r2, #13
 801479c:	d834      	bhi.n	8014808 <_strtod_l+0xa8>
 801479e:	2a08      	cmp	r2, #8
 80147a0:	d834      	bhi.n	801480c <_strtod_l+0xac>
 80147a2:	2a00      	cmp	r2, #0
 80147a4:	d03e      	beq.n	8014824 <_strtod_l+0xc4>
 80147a6:	2300      	movs	r3, #0
 80147a8:	930a      	str	r3, [sp, #40]	; 0x28
 80147aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80147ac:	7833      	ldrb	r3, [r6, #0]
 80147ae:	2b30      	cmp	r3, #48	; 0x30
 80147b0:	f040 80b0 	bne.w	8014914 <_strtod_l+0x1b4>
 80147b4:	7873      	ldrb	r3, [r6, #1]
 80147b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80147ba:	2b58      	cmp	r3, #88	; 0x58
 80147bc:	d168      	bne.n	8014890 <_strtod_l+0x130>
 80147be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147c0:	9301      	str	r3, [sp, #4]
 80147c2:	ab18      	add	r3, sp, #96	; 0x60
 80147c4:	9702      	str	r7, [sp, #8]
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	4a8d      	ldr	r2, [pc, #564]	; (8014a00 <_strtod_l+0x2a0>)
 80147ca:	ab19      	add	r3, sp, #100	; 0x64
 80147cc:	a917      	add	r1, sp, #92	; 0x5c
 80147ce:	4620      	mov	r0, r4
 80147d0:	f000 ffcc 	bl	801576c <__gethex>
 80147d4:	f010 0707 	ands.w	r7, r0, #7
 80147d8:	4605      	mov	r5, r0
 80147da:	d005      	beq.n	80147e8 <_strtod_l+0x88>
 80147dc:	2f06      	cmp	r7, #6
 80147de:	d12c      	bne.n	801483a <_strtod_l+0xda>
 80147e0:	3601      	adds	r6, #1
 80147e2:	2300      	movs	r3, #0
 80147e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80147e6:	930a      	str	r3, [sp, #40]	; 0x28
 80147e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f040 8590 	bne.w	8015310 <_strtod_l+0xbb0>
 80147f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147f2:	b1eb      	cbz	r3, 8014830 <_strtod_l+0xd0>
 80147f4:	4652      	mov	r2, sl
 80147f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80147fa:	ec43 2b10 	vmov	d0, r2, r3
 80147fe:	b01d      	add	sp, #116	; 0x74
 8014800:	ecbd 8b02 	vpop	{d8}
 8014804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014808:	2a20      	cmp	r2, #32
 801480a:	d1cc      	bne.n	80147a6 <_strtod_l+0x46>
 801480c:	3301      	adds	r3, #1
 801480e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014810:	e7be      	b.n	8014790 <_strtod_l+0x30>
 8014812:	2a2d      	cmp	r2, #45	; 0x2d
 8014814:	d1c7      	bne.n	80147a6 <_strtod_l+0x46>
 8014816:	2201      	movs	r2, #1
 8014818:	920a      	str	r2, [sp, #40]	; 0x28
 801481a:	1c5a      	adds	r2, r3, #1
 801481c:	9217      	str	r2, [sp, #92]	; 0x5c
 801481e:	785b      	ldrb	r3, [r3, #1]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d1c2      	bne.n	80147aa <_strtod_l+0x4a>
 8014824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014826:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801482a:	2b00      	cmp	r3, #0
 801482c:	f040 856e 	bne.w	801530c <_strtod_l+0xbac>
 8014830:	4652      	mov	r2, sl
 8014832:	465b      	mov	r3, fp
 8014834:	e7e1      	b.n	80147fa <_strtod_l+0x9a>
 8014836:	2200      	movs	r2, #0
 8014838:	e7ee      	b.n	8014818 <_strtod_l+0xb8>
 801483a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801483c:	b13a      	cbz	r2, 801484e <_strtod_l+0xee>
 801483e:	2135      	movs	r1, #53	; 0x35
 8014840:	a81a      	add	r0, sp, #104	; 0x68
 8014842:	f001 ff84 	bl	801674e <__copybits>
 8014846:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014848:	4620      	mov	r0, r4
 801484a:	f001 fb43 	bl	8015ed4 <_Bfree>
 801484e:	3f01      	subs	r7, #1
 8014850:	2f04      	cmp	r7, #4
 8014852:	d806      	bhi.n	8014862 <_strtod_l+0x102>
 8014854:	e8df f007 	tbb	[pc, r7]
 8014858:	1714030a 	.word	0x1714030a
 801485c:	0a          	.byte	0x0a
 801485d:	00          	.byte	0x00
 801485e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014862:	0728      	lsls	r0, r5, #28
 8014864:	d5c0      	bpl.n	80147e8 <_strtod_l+0x88>
 8014866:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801486a:	e7bd      	b.n	80147e8 <_strtod_l+0x88>
 801486c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014870:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014872:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014876:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801487a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801487e:	e7f0      	b.n	8014862 <_strtod_l+0x102>
 8014880:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014a04 <_strtod_l+0x2a4>
 8014884:	e7ed      	b.n	8014862 <_strtod_l+0x102>
 8014886:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801488a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801488e:	e7e8      	b.n	8014862 <_strtod_l+0x102>
 8014890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014892:	1c5a      	adds	r2, r3, #1
 8014894:	9217      	str	r2, [sp, #92]	; 0x5c
 8014896:	785b      	ldrb	r3, [r3, #1]
 8014898:	2b30      	cmp	r3, #48	; 0x30
 801489a:	d0f9      	beq.n	8014890 <_strtod_l+0x130>
 801489c:	2b00      	cmp	r3, #0
 801489e:	d0a3      	beq.n	80147e8 <_strtod_l+0x88>
 80148a0:	2301      	movs	r3, #1
 80148a2:	f04f 0900 	mov.w	r9, #0
 80148a6:	9304      	str	r3, [sp, #16]
 80148a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148aa:	9308      	str	r3, [sp, #32]
 80148ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80148b0:	464f      	mov	r7, r9
 80148b2:	220a      	movs	r2, #10
 80148b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80148b6:	7806      	ldrb	r6, [r0, #0]
 80148b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80148bc:	b2d9      	uxtb	r1, r3
 80148be:	2909      	cmp	r1, #9
 80148c0:	d92a      	bls.n	8014918 <_strtod_l+0x1b8>
 80148c2:	9905      	ldr	r1, [sp, #20]
 80148c4:	462a      	mov	r2, r5
 80148c6:	f002 fc87 	bl	80171d8 <strncmp>
 80148ca:	b398      	cbz	r0, 8014934 <_strtod_l+0x1d4>
 80148cc:	2000      	movs	r0, #0
 80148ce:	4632      	mov	r2, r6
 80148d0:	463d      	mov	r5, r7
 80148d2:	9005      	str	r0, [sp, #20]
 80148d4:	4603      	mov	r3, r0
 80148d6:	2a65      	cmp	r2, #101	; 0x65
 80148d8:	d001      	beq.n	80148de <_strtod_l+0x17e>
 80148da:	2a45      	cmp	r2, #69	; 0x45
 80148dc:	d118      	bne.n	8014910 <_strtod_l+0x1b0>
 80148de:	b91d      	cbnz	r5, 80148e8 <_strtod_l+0x188>
 80148e0:	9a04      	ldr	r2, [sp, #16]
 80148e2:	4302      	orrs	r2, r0
 80148e4:	d09e      	beq.n	8014824 <_strtod_l+0xc4>
 80148e6:	2500      	movs	r5, #0
 80148e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80148ec:	f108 0201 	add.w	r2, r8, #1
 80148f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80148f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80148f6:	2a2b      	cmp	r2, #43	; 0x2b
 80148f8:	d075      	beq.n	80149e6 <_strtod_l+0x286>
 80148fa:	2a2d      	cmp	r2, #45	; 0x2d
 80148fc:	d07b      	beq.n	80149f6 <_strtod_l+0x296>
 80148fe:	f04f 0c00 	mov.w	ip, #0
 8014902:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014906:	2909      	cmp	r1, #9
 8014908:	f240 8082 	bls.w	8014a10 <_strtod_l+0x2b0>
 801490c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014910:	2600      	movs	r6, #0
 8014912:	e09d      	b.n	8014a50 <_strtod_l+0x2f0>
 8014914:	2300      	movs	r3, #0
 8014916:	e7c4      	b.n	80148a2 <_strtod_l+0x142>
 8014918:	2f08      	cmp	r7, #8
 801491a:	bfd8      	it	le
 801491c:	9907      	ldrle	r1, [sp, #28]
 801491e:	f100 0001 	add.w	r0, r0, #1
 8014922:	bfda      	itte	le
 8014924:	fb02 3301 	mlale	r3, r2, r1, r3
 8014928:	9307      	strle	r3, [sp, #28]
 801492a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801492e:	3701      	adds	r7, #1
 8014930:	9017      	str	r0, [sp, #92]	; 0x5c
 8014932:	e7bf      	b.n	80148b4 <_strtod_l+0x154>
 8014934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014936:	195a      	adds	r2, r3, r5
 8014938:	9217      	str	r2, [sp, #92]	; 0x5c
 801493a:	5d5a      	ldrb	r2, [r3, r5]
 801493c:	2f00      	cmp	r7, #0
 801493e:	d037      	beq.n	80149b0 <_strtod_l+0x250>
 8014940:	9005      	str	r0, [sp, #20]
 8014942:	463d      	mov	r5, r7
 8014944:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014948:	2b09      	cmp	r3, #9
 801494a:	d912      	bls.n	8014972 <_strtod_l+0x212>
 801494c:	2301      	movs	r3, #1
 801494e:	e7c2      	b.n	80148d6 <_strtod_l+0x176>
 8014950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014952:	1c5a      	adds	r2, r3, #1
 8014954:	9217      	str	r2, [sp, #92]	; 0x5c
 8014956:	785a      	ldrb	r2, [r3, #1]
 8014958:	3001      	adds	r0, #1
 801495a:	2a30      	cmp	r2, #48	; 0x30
 801495c:	d0f8      	beq.n	8014950 <_strtod_l+0x1f0>
 801495e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014962:	2b08      	cmp	r3, #8
 8014964:	f200 84d9 	bhi.w	801531a <_strtod_l+0xbba>
 8014968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801496a:	9005      	str	r0, [sp, #20]
 801496c:	2000      	movs	r0, #0
 801496e:	9308      	str	r3, [sp, #32]
 8014970:	4605      	mov	r5, r0
 8014972:	3a30      	subs	r2, #48	; 0x30
 8014974:	f100 0301 	add.w	r3, r0, #1
 8014978:	d014      	beq.n	80149a4 <_strtod_l+0x244>
 801497a:	9905      	ldr	r1, [sp, #20]
 801497c:	4419      	add	r1, r3
 801497e:	9105      	str	r1, [sp, #20]
 8014980:	462b      	mov	r3, r5
 8014982:	eb00 0e05 	add.w	lr, r0, r5
 8014986:	210a      	movs	r1, #10
 8014988:	4573      	cmp	r3, lr
 801498a:	d113      	bne.n	80149b4 <_strtod_l+0x254>
 801498c:	182b      	adds	r3, r5, r0
 801498e:	2b08      	cmp	r3, #8
 8014990:	f105 0501 	add.w	r5, r5, #1
 8014994:	4405      	add	r5, r0
 8014996:	dc1c      	bgt.n	80149d2 <_strtod_l+0x272>
 8014998:	9907      	ldr	r1, [sp, #28]
 801499a:	230a      	movs	r3, #10
 801499c:	fb03 2301 	mla	r3, r3, r1, r2
 80149a0:	9307      	str	r3, [sp, #28]
 80149a2:	2300      	movs	r3, #0
 80149a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80149a6:	1c51      	adds	r1, r2, #1
 80149a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80149aa:	7852      	ldrb	r2, [r2, #1]
 80149ac:	4618      	mov	r0, r3
 80149ae:	e7c9      	b.n	8014944 <_strtod_l+0x1e4>
 80149b0:	4638      	mov	r0, r7
 80149b2:	e7d2      	b.n	801495a <_strtod_l+0x1fa>
 80149b4:	2b08      	cmp	r3, #8
 80149b6:	dc04      	bgt.n	80149c2 <_strtod_l+0x262>
 80149b8:	9e07      	ldr	r6, [sp, #28]
 80149ba:	434e      	muls	r6, r1
 80149bc:	9607      	str	r6, [sp, #28]
 80149be:	3301      	adds	r3, #1
 80149c0:	e7e2      	b.n	8014988 <_strtod_l+0x228>
 80149c2:	f103 0c01 	add.w	ip, r3, #1
 80149c6:	f1bc 0f10 	cmp.w	ip, #16
 80149ca:	bfd8      	it	le
 80149cc:	fb01 f909 	mulle.w	r9, r1, r9
 80149d0:	e7f5      	b.n	80149be <_strtod_l+0x25e>
 80149d2:	2d10      	cmp	r5, #16
 80149d4:	bfdc      	itt	le
 80149d6:	230a      	movle	r3, #10
 80149d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80149dc:	e7e1      	b.n	80149a2 <_strtod_l+0x242>
 80149de:	2300      	movs	r3, #0
 80149e0:	9305      	str	r3, [sp, #20]
 80149e2:	2301      	movs	r3, #1
 80149e4:	e77c      	b.n	80148e0 <_strtod_l+0x180>
 80149e6:	f04f 0c00 	mov.w	ip, #0
 80149ea:	f108 0202 	add.w	r2, r8, #2
 80149ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80149f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80149f4:	e785      	b.n	8014902 <_strtod_l+0x1a2>
 80149f6:	f04f 0c01 	mov.w	ip, #1
 80149fa:	e7f6      	b.n	80149ea <_strtod_l+0x28a>
 80149fc:	0801d7f8 	.word	0x0801d7f8
 8014a00:	0801d730 	.word	0x0801d730
 8014a04:	7ff00000 	.word	0x7ff00000
 8014a08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a0a:	1c51      	adds	r1, r2, #1
 8014a0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8014a0e:	7852      	ldrb	r2, [r2, #1]
 8014a10:	2a30      	cmp	r2, #48	; 0x30
 8014a12:	d0f9      	beq.n	8014a08 <_strtod_l+0x2a8>
 8014a14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014a18:	2908      	cmp	r1, #8
 8014a1a:	f63f af79 	bhi.w	8014910 <_strtod_l+0x1b0>
 8014a1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014a22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a24:	9206      	str	r2, [sp, #24]
 8014a26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a28:	1c51      	adds	r1, r2, #1
 8014a2a:	9117      	str	r1, [sp, #92]	; 0x5c
 8014a2c:	7852      	ldrb	r2, [r2, #1]
 8014a2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014a32:	2e09      	cmp	r6, #9
 8014a34:	d937      	bls.n	8014aa6 <_strtod_l+0x346>
 8014a36:	9e06      	ldr	r6, [sp, #24]
 8014a38:	1b89      	subs	r1, r1, r6
 8014a3a:	2908      	cmp	r1, #8
 8014a3c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014a40:	dc02      	bgt.n	8014a48 <_strtod_l+0x2e8>
 8014a42:	4576      	cmp	r6, lr
 8014a44:	bfa8      	it	ge
 8014a46:	4676      	movge	r6, lr
 8014a48:	f1bc 0f00 	cmp.w	ip, #0
 8014a4c:	d000      	beq.n	8014a50 <_strtod_l+0x2f0>
 8014a4e:	4276      	negs	r6, r6
 8014a50:	2d00      	cmp	r5, #0
 8014a52:	d14d      	bne.n	8014af0 <_strtod_l+0x390>
 8014a54:	9904      	ldr	r1, [sp, #16]
 8014a56:	4301      	orrs	r1, r0
 8014a58:	f47f aec6 	bne.w	80147e8 <_strtod_l+0x88>
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	f47f aee1 	bne.w	8014824 <_strtod_l+0xc4>
 8014a62:	2a69      	cmp	r2, #105	; 0x69
 8014a64:	d027      	beq.n	8014ab6 <_strtod_l+0x356>
 8014a66:	dc24      	bgt.n	8014ab2 <_strtod_l+0x352>
 8014a68:	2a49      	cmp	r2, #73	; 0x49
 8014a6a:	d024      	beq.n	8014ab6 <_strtod_l+0x356>
 8014a6c:	2a4e      	cmp	r2, #78	; 0x4e
 8014a6e:	f47f aed9 	bne.w	8014824 <_strtod_l+0xc4>
 8014a72:	499f      	ldr	r1, [pc, #636]	; (8014cf0 <_strtod_l+0x590>)
 8014a74:	a817      	add	r0, sp, #92	; 0x5c
 8014a76:	f001 f8d1 	bl	8015c1c <__match>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	f43f aed2 	beq.w	8014824 <_strtod_l+0xc4>
 8014a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	2b28      	cmp	r3, #40	; 0x28
 8014a86:	d12d      	bne.n	8014ae4 <_strtod_l+0x384>
 8014a88:	499a      	ldr	r1, [pc, #616]	; (8014cf4 <_strtod_l+0x594>)
 8014a8a:	aa1a      	add	r2, sp, #104	; 0x68
 8014a8c:	a817      	add	r0, sp, #92	; 0x5c
 8014a8e:	f001 f8d9 	bl	8015c44 <__hexnan>
 8014a92:	2805      	cmp	r0, #5
 8014a94:	d126      	bne.n	8014ae4 <_strtod_l+0x384>
 8014a96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014a9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014aa0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014aa4:	e6a0      	b.n	80147e8 <_strtod_l+0x88>
 8014aa6:	210a      	movs	r1, #10
 8014aa8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014aac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014ab0:	e7b9      	b.n	8014a26 <_strtod_l+0x2c6>
 8014ab2:	2a6e      	cmp	r2, #110	; 0x6e
 8014ab4:	e7db      	b.n	8014a6e <_strtod_l+0x30e>
 8014ab6:	4990      	ldr	r1, [pc, #576]	; (8014cf8 <_strtod_l+0x598>)
 8014ab8:	a817      	add	r0, sp, #92	; 0x5c
 8014aba:	f001 f8af 	bl	8015c1c <__match>
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	f43f aeb0 	beq.w	8014824 <_strtod_l+0xc4>
 8014ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ac6:	498d      	ldr	r1, [pc, #564]	; (8014cfc <_strtod_l+0x59c>)
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	a817      	add	r0, sp, #92	; 0x5c
 8014acc:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ace:	f001 f8a5 	bl	8015c1c <__match>
 8014ad2:	b910      	cbnz	r0, 8014ada <_strtod_l+0x37a>
 8014ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ada:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014d0c <_strtod_l+0x5ac>
 8014ade:	f04f 0a00 	mov.w	sl, #0
 8014ae2:	e681      	b.n	80147e8 <_strtod_l+0x88>
 8014ae4:	4886      	ldr	r0, [pc, #536]	; (8014d00 <_strtod_l+0x5a0>)
 8014ae6:	f002 fb37 	bl	8017158 <nan>
 8014aea:	ec5b ab10 	vmov	sl, fp, d0
 8014aee:	e67b      	b.n	80147e8 <_strtod_l+0x88>
 8014af0:	9b05      	ldr	r3, [sp, #20]
 8014af2:	9807      	ldr	r0, [sp, #28]
 8014af4:	1af3      	subs	r3, r6, r3
 8014af6:	2f00      	cmp	r7, #0
 8014af8:	bf08      	it	eq
 8014afa:	462f      	moveq	r7, r5
 8014afc:	2d10      	cmp	r5, #16
 8014afe:	9306      	str	r3, [sp, #24]
 8014b00:	46a8      	mov	r8, r5
 8014b02:	bfa8      	it	ge
 8014b04:	f04f 0810 	movge.w	r8, #16
 8014b08:	f7eb fe3e 	bl	8000788 <__aeabi_ui2d>
 8014b0c:	2d09      	cmp	r5, #9
 8014b0e:	4682      	mov	sl, r0
 8014b10:	468b      	mov	fp, r1
 8014b12:	dd13      	ble.n	8014b3c <_strtod_l+0x3dc>
 8014b14:	4b7b      	ldr	r3, [pc, #492]	; (8014d04 <_strtod_l+0x5a4>)
 8014b16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014b1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014b1e:	f7eb fead 	bl	800087c <__aeabi_dmul>
 8014b22:	4682      	mov	sl, r0
 8014b24:	4648      	mov	r0, r9
 8014b26:	468b      	mov	fp, r1
 8014b28:	f7eb fe2e 	bl	8000788 <__aeabi_ui2d>
 8014b2c:	4602      	mov	r2, r0
 8014b2e:	460b      	mov	r3, r1
 8014b30:	4650      	mov	r0, sl
 8014b32:	4659      	mov	r1, fp
 8014b34:	f7eb fcec 	bl	8000510 <__adddf3>
 8014b38:	4682      	mov	sl, r0
 8014b3a:	468b      	mov	fp, r1
 8014b3c:	2d0f      	cmp	r5, #15
 8014b3e:	dc38      	bgt.n	8014bb2 <_strtod_l+0x452>
 8014b40:	9b06      	ldr	r3, [sp, #24]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	f43f ae50 	beq.w	80147e8 <_strtod_l+0x88>
 8014b48:	dd24      	ble.n	8014b94 <_strtod_l+0x434>
 8014b4a:	2b16      	cmp	r3, #22
 8014b4c:	dc0b      	bgt.n	8014b66 <_strtod_l+0x406>
 8014b4e:	496d      	ldr	r1, [pc, #436]	; (8014d04 <_strtod_l+0x5a4>)
 8014b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b58:	4652      	mov	r2, sl
 8014b5a:	465b      	mov	r3, fp
 8014b5c:	f7eb fe8e 	bl	800087c <__aeabi_dmul>
 8014b60:	4682      	mov	sl, r0
 8014b62:	468b      	mov	fp, r1
 8014b64:	e640      	b.n	80147e8 <_strtod_l+0x88>
 8014b66:	9a06      	ldr	r2, [sp, #24]
 8014b68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	db20      	blt.n	8014bb2 <_strtod_l+0x452>
 8014b70:	4c64      	ldr	r4, [pc, #400]	; (8014d04 <_strtod_l+0x5a4>)
 8014b72:	f1c5 050f 	rsb	r5, r5, #15
 8014b76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014b7a:	4652      	mov	r2, sl
 8014b7c:	465b      	mov	r3, fp
 8014b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b82:	f7eb fe7b 	bl	800087c <__aeabi_dmul>
 8014b86:	9b06      	ldr	r3, [sp, #24]
 8014b88:	1b5d      	subs	r5, r3, r5
 8014b8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014b8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014b92:	e7e3      	b.n	8014b5c <_strtod_l+0x3fc>
 8014b94:	9b06      	ldr	r3, [sp, #24]
 8014b96:	3316      	adds	r3, #22
 8014b98:	db0b      	blt.n	8014bb2 <_strtod_l+0x452>
 8014b9a:	9b05      	ldr	r3, [sp, #20]
 8014b9c:	1b9e      	subs	r6, r3, r6
 8014b9e:	4b59      	ldr	r3, [pc, #356]	; (8014d04 <_strtod_l+0x5a4>)
 8014ba0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8014ba4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014ba8:	4650      	mov	r0, sl
 8014baa:	4659      	mov	r1, fp
 8014bac:	f7eb ff90 	bl	8000ad0 <__aeabi_ddiv>
 8014bb0:	e7d6      	b.n	8014b60 <_strtod_l+0x400>
 8014bb2:	9b06      	ldr	r3, [sp, #24]
 8014bb4:	eba5 0808 	sub.w	r8, r5, r8
 8014bb8:	4498      	add	r8, r3
 8014bba:	f1b8 0f00 	cmp.w	r8, #0
 8014bbe:	dd74      	ble.n	8014caa <_strtod_l+0x54a>
 8014bc0:	f018 030f 	ands.w	r3, r8, #15
 8014bc4:	d00a      	beq.n	8014bdc <_strtod_l+0x47c>
 8014bc6:	494f      	ldr	r1, [pc, #316]	; (8014d04 <_strtod_l+0x5a4>)
 8014bc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014bcc:	4652      	mov	r2, sl
 8014bce:	465b      	mov	r3, fp
 8014bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bd4:	f7eb fe52 	bl	800087c <__aeabi_dmul>
 8014bd8:	4682      	mov	sl, r0
 8014bda:	468b      	mov	fp, r1
 8014bdc:	f038 080f 	bics.w	r8, r8, #15
 8014be0:	d04f      	beq.n	8014c82 <_strtod_l+0x522>
 8014be2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014be6:	dd22      	ble.n	8014c2e <_strtod_l+0x4ce>
 8014be8:	2500      	movs	r5, #0
 8014bea:	462e      	mov	r6, r5
 8014bec:	9507      	str	r5, [sp, #28]
 8014bee:	9505      	str	r5, [sp, #20]
 8014bf0:	2322      	movs	r3, #34	; 0x22
 8014bf2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8014d0c <_strtod_l+0x5ac>
 8014bf6:	6023      	str	r3, [r4, #0]
 8014bf8:	f04f 0a00 	mov.w	sl, #0
 8014bfc:	9b07      	ldr	r3, [sp, #28]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	f43f adf2 	beq.w	80147e8 <_strtod_l+0x88>
 8014c04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c06:	4620      	mov	r0, r4
 8014c08:	f001 f964 	bl	8015ed4 <_Bfree>
 8014c0c:	9905      	ldr	r1, [sp, #20]
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f001 f960 	bl	8015ed4 <_Bfree>
 8014c14:	4631      	mov	r1, r6
 8014c16:	4620      	mov	r0, r4
 8014c18:	f001 f95c 	bl	8015ed4 <_Bfree>
 8014c1c:	9907      	ldr	r1, [sp, #28]
 8014c1e:	4620      	mov	r0, r4
 8014c20:	f001 f958 	bl	8015ed4 <_Bfree>
 8014c24:	4629      	mov	r1, r5
 8014c26:	4620      	mov	r0, r4
 8014c28:	f001 f954 	bl	8015ed4 <_Bfree>
 8014c2c:	e5dc      	b.n	80147e8 <_strtod_l+0x88>
 8014c2e:	4b36      	ldr	r3, [pc, #216]	; (8014d08 <_strtod_l+0x5a8>)
 8014c30:	9304      	str	r3, [sp, #16]
 8014c32:	2300      	movs	r3, #0
 8014c34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014c38:	4650      	mov	r0, sl
 8014c3a:	4659      	mov	r1, fp
 8014c3c:	4699      	mov	r9, r3
 8014c3e:	f1b8 0f01 	cmp.w	r8, #1
 8014c42:	dc21      	bgt.n	8014c88 <_strtod_l+0x528>
 8014c44:	b10b      	cbz	r3, 8014c4a <_strtod_l+0x4ea>
 8014c46:	4682      	mov	sl, r0
 8014c48:	468b      	mov	fp, r1
 8014c4a:	4b2f      	ldr	r3, [pc, #188]	; (8014d08 <_strtod_l+0x5a8>)
 8014c4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014c50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014c54:	4652      	mov	r2, sl
 8014c56:	465b      	mov	r3, fp
 8014c58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014c5c:	f7eb fe0e 	bl	800087c <__aeabi_dmul>
 8014c60:	4b2a      	ldr	r3, [pc, #168]	; (8014d0c <_strtod_l+0x5ac>)
 8014c62:	460a      	mov	r2, r1
 8014c64:	400b      	ands	r3, r1
 8014c66:	492a      	ldr	r1, [pc, #168]	; (8014d10 <_strtod_l+0x5b0>)
 8014c68:	428b      	cmp	r3, r1
 8014c6a:	4682      	mov	sl, r0
 8014c6c:	d8bc      	bhi.n	8014be8 <_strtod_l+0x488>
 8014c6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014c72:	428b      	cmp	r3, r1
 8014c74:	bf86      	itte	hi
 8014c76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8014d14 <_strtod_l+0x5b4>
 8014c7a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8014c7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014c82:	2300      	movs	r3, #0
 8014c84:	9304      	str	r3, [sp, #16]
 8014c86:	e084      	b.n	8014d92 <_strtod_l+0x632>
 8014c88:	f018 0f01 	tst.w	r8, #1
 8014c8c:	d005      	beq.n	8014c9a <_strtod_l+0x53a>
 8014c8e:	9b04      	ldr	r3, [sp, #16]
 8014c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c94:	f7eb fdf2 	bl	800087c <__aeabi_dmul>
 8014c98:	2301      	movs	r3, #1
 8014c9a:	9a04      	ldr	r2, [sp, #16]
 8014c9c:	3208      	adds	r2, #8
 8014c9e:	f109 0901 	add.w	r9, r9, #1
 8014ca2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014ca6:	9204      	str	r2, [sp, #16]
 8014ca8:	e7c9      	b.n	8014c3e <_strtod_l+0x4de>
 8014caa:	d0ea      	beq.n	8014c82 <_strtod_l+0x522>
 8014cac:	f1c8 0800 	rsb	r8, r8, #0
 8014cb0:	f018 020f 	ands.w	r2, r8, #15
 8014cb4:	d00a      	beq.n	8014ccc <_strtod_l+0x56c>
 8014cb6:	4b13      	ldr	r3, [pc, #76]	; (8014d04 <_strtod_l+0x5a4>)
 8014cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cbc:	4650      	mov	r0, sl
 8014cbe:	4659      	mov	r1, fp
 8014cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc4:	f7eb ff04 	bl	8000ad0 <__aeabi_ddiv>
 8014cc8:	4682      	mov	sl, r0
 8014cca:	468b      	mov	fp, r1
 8014ccc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014cd0:	d0d7      	beq.n	8014c82 <_strtod_l+0x522>
 8014cd2:	f1b8 0f1f 	cmp.w	r8, #31
 8014cd6:	dd1f      	ble.n	8014d18 <_strtod_l+0x5b8>
 8014cd8:	2500      	movs	r5, #0
 8014cda:	462e      	mov	r6, r5
 8014cdc:	9507      	str	r5, [sp, #28]
 8014cde:	9505      	str	r5, [sp, #20]
 8014ce0:	2322      	movs	r3, #34	; 0x22
 8014ce2:	f04f 0a00 	mov.w	sl, #0
 8014ce6:	f04f 0b00 	mov.w	fp, #0
 8014cea:	6023      	str	r3, [r4, #0]
 8014cec:	e786      	b.n	8014bfc <_strtod_l+0x49c>
 8014cee:	bf00      	nop
 8014cf0:	0801d72a 	.word	0x0801d72a
 8014cf4:	0801d744 	.word	0x0801d744
 8014cf8:	0801d721 	.word	0x0801d721
 8014cfc:	0801d724 	.word	0x0801d724
 8014d00:	0801d9d2 	.word	0x0801d9d2
 8014d04:	0801d8a8 	.word	0x0801d8a8
 8014d08:	0801d880 	.word	0x0801d880
 8014d0c:	7ff00000 	.word	0x7ff00000
 8014d10:	7ca00000 	.word	0x7ca00000
 8014d14:	7fefffff 	.word	0x7fefffff
 8014d18:	f018 0310 	ands.w	r3, r8, #16
 8014d1c:	bf18      	it	ne
 8014d1e:	236a      	movne	r3, #106	; 0x6a
 8014d20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80150d0 <_strtod_l+0x970>
 8014d24:	9304      	str	r3, [sp, #16]
 8014d26:	4650      	mov	r0, sl
 8014d28:	4659      	mov	r1, fp
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	f018 0f01 	tst.w	r8, #1
 8014d30:	d004      	beq.n	8014d3c <_strtod_l+0x5dc>
 8014d32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014d36:	f7eb fda1 	bl	800087c <__aeabi_dmul>
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014d40:	f109 0908 	add.w	r9, r9, #8
 8014d44:	d1f2      	bne.n	8014d2c <_strtod_l+0x5cc>
 8014d46:	b10b      	cbz	r3, 8014d4c <_strtod_l+0x5ec>
 8014d48:	4682      	mov	sl, r0
 8014d4a:	468b      	mov	fp, r1
 8014d4c:	9b04      	ldr	r3, [sp, #16]
 8014d4e:	b1c3      	cbz	r3, 8014d82 <_strtod_l+0x622>
 8014d50:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014d54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	4659      	mov	r1, fp
 8014d5c:	dd11      	ble.n	8014d82 <_strtod_l+0x622>
 8014d5e:	2b1f      	cmp	r3, #31
 8014d60:	f340 8124 	ble.w	8014fac <_strtod_l+0x84c>
 8014d64:	2b34      	cmp	r3, #52	; 0x34
 8014d66:	bfde      	ittt	le
 8014d68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014d6c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8014d70:	fa03 f202 	lslle.w	r2, r3, r2
 8014d74:	f04f 0a00 	mov.w	sl, #0
 8014d78:	bfcc      	ite	gt
 8014d7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014d7e:	ea02 0b01 	andle.w	fp, r2, r1
 8014d82:	2200      	movs	r2, #0
 8014d84:	2300      	movs	r3, #0
 8014d86:	4650      	mov	r0, sl
 8014d88:	4659      	mov	r1, fp
 8014d8a:	f7eb ffdf 	bl	8000d4c <__aeabi_dcmpeq>
 8014d8e:	2800      	cmp	r0, #0
 8014d90:	d1a2      	bne.n	8014cd8 <_strtod_l+0x578>
 8014d92:	9b07      	ldr	r3, [sp, #28]
 8014d94:	9300      	str	r3, [sp, #0]
 8014d96:	9908      	ldr	r1, [sp, #32]
 8014d98:	462b      	mov	r3, r5
 8014d9a:	463a      	mov	r2, r7
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f001 f901 	bl	8015fa4 <__s2b>
 8014da2:	9007      	str	r0, [sp, #28]
 8014da4:	2800      	cmp	r0, #0
 8014da6:	f43f af1f 	beq.w	8014be8 <_strtod_l+0x488>
 8014daa:	9b05      	ldr	r3, [sp, #20]
 8014dac:	1b9e      	subs	r6, r3, r6
 8014dae:	9b06      	ldr	r3, [sp, #24]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	bfb4      	ite	lt
 8014db4:	4633      	movlt	r3, r6
 8014db6:	2300      	movge	r3, #0
 8014db8:	930c      	str	r3, [sp, #48]	; 0x30
 8014dba:	9b06      	ldr	r3, [sp, #24]
 8014dbc:	2500      	movs	r5, #0
 8014dbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8014dc4:	462e      	mov	r6, r5
 8014dc6:	9b07      	ldr	r3, [sp, #28]
 8014dc8:	4620      	mov	r0, r4
 8014dca:	6859      	ldr	r1, [r3, #4]
 8014dcc:	f001 f842 	bl	8015e54 <_Balloc>
 8014dd0:	9005      	str	r0, [sp, #20]
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	f43f af0c 	beq.w	8014bf0 <_strtod_l+0x490>
 8014dd8:	9b07      	ldr	r3, [sp, #28]
 8014dda:	691a      	ldr	r2, [r3, #16]
 8014ddc:	3202      	adds	r2, #2
 8014dde:	f103 010c 	add.w	r1, r3, #12
 8014de2:	0092      	lsls	r2, r2, #2
 8014de4:	300c      	adds	r0, #12
 8014de6:	f7fe fbad 	bl	8013544 <memcpy>
 8014dea:	ec4b ab10 	vmov	d0, sl, fp
 8014dee:	aa1a      	add	r2, sp, #104	; 0x68
 8014df0:	a919      	add	r1, sp, #100	; 0x64
 8014df2:	4620      	mov	r0, r4
 8014df4:	f001 fc1c 	bl	8016630 <__d2b>
 8014df8:	ec4b ab18 	vmov	d8, sl, fp
 8014dfc:	9018      	str	r0, [sp, #96]	; 0x60
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	f43f aef6 	beq.w	8014bf0 <_strtod_l+0x490>
 8014e04:	2101      	movs	r1, #1
 8014e06:	4620      	mov	r0, r4
 8014e08:	f001 f966 	bl	80160d8 <__i2b>
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	f43f aeee 	beq.w	8014bf0 <_strtod_l+0x490>
 8014e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e16:	9904      	ldr	r1, [sp, #16]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	bfab      	itete	ge
 8014e1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014e1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014e20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014e22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8014e26:	bfac      	ite	ge
 8014e28:	eb03 0902 	addge.w	r9, r3, r2
 8014e2c:	1ad7      	sublt	r7, r2, r3
 8014e2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014e30:	eba3 0801 	sub.w	r8, r3, r1
 8014e34:	4490      	add	r8, r2
 8014e36:	4ba1      	ldr	r3, [pc, #644]	; (80150bc <_strtod_l+0x95c>)
 8014e38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014e3c:	4598      	cmp	r8, r3
 8014e3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014e42:	f280 80c7 	bge.w	8014fd4 <_strtod_l+0x874>
 8014e46:	eba3 0308 	sub.w	r3, r3, r8
 8014e4a:	2b1f      	cmp	r3, #31
 8014e4c:	eba2 0203 	sub.w	r2, r2, r3
 8014e50:	f04f 0101 	mov.w	r1, #1
 8014e54:	f300 80b1 	bgt.w	8014fba <_strtod_l+0x85a>
 8014e58:	fa01 f303 	lsl.w	r3, r1, r3
 8014e5c:	930d      	str	r3, [sp, #52]	; 0x34
 8014e5e:	2300      	movs	r3, #0
 8014e60:	9308      	str	r3, [sp, #32]
 8014e62:	eb09 0802 	add.w	r8, r9, r2
 8014e66:	9b04      	ldr	r3, [sp, #16]
 8014e68:	45c1      	cmp	r9, r8
 8014e6a:	4417      	add	r7, r2
 8014e6c:	441f      	add	r7, r3
 8014e6e:	464b      	mov	r3, r9
 8014e70:	bfa8      	it	ge
 8014e72:	4643      	movge	r3, r8
 8014e74:	42bb      	cmp	r3, r7
 8014e76:	bfa8      	it	ge
 8014e78:	463b      	movge	r3, r7
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	bfc2      	ittt	gt
 8014e7e:	eba8 0803 	subgt.w	r8, r8, r3
 8014e82:	1aff      	subgt	r7, r7, r3
 8014e84:	eba9 0903 	subgt.w	r9, r9, r3
 8014e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	dd17      	ble.n	8014ebe <_strtod_l+0x75e>
 8014e8e:	4631      	mov	r1, r6
 8014e90:	461a      	mov	r2, r3
 8014e92:	4620      	mov	r0, r4
 8014e94:	f001 f9e0 	bl	8016258 <__pow5mult>
 8014e98:	4606      	mov	r6, r0
 8014e9a:	2800      	cmp	r0, #0
 8014e9c:	f43f aea8 	beq.w	8014bf0 <_strtod_l+0x490>
 8014ea0:	4601      	mov	r1, r0
 8014ea2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	f001 f92d 	bl	8016104 <__multiply>
 8014eaa:	900b      	str	r0, [sp, #44]	; 0x2c
 8014eac:	2800      	cmp	r0, #0
 8014eae:	f43f ae9f 	beq.w	8014bf0 <_strtod_l+0x490>
 8014eb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	f001 f80d 	bl	8015ed4 <_Bfree>
 8014eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ebc:	9318      	str	r3, [sp, #96]	; 0x60
 8014ebe:	f1b8 0f00 	cmp.w	r8, #0
 8014ec2:	f300 808c 	bgt.w	8014fde <_strtod_l+0x87e>
 8014ec6:	9b06      	ldr	r3, [sp, #24]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	dd08      	ble.n	8014ede <_strtod_l+0x77e>
 8014ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ece:	9905      	ldr	r1, [sp, #20]
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f001 f9c1 	bl	8016258 <__pow5mult>
 8014ed6:	9005      	str	r0, [sp, #20]
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	f43f ae89 	beq.w	8014bf0 <_strtod_l+0x490>
 8014ede:	2f00      	cmp	r7, #0
 8014ee0:	dd08      	ble.n	8014ef4 <_strtod_l+0x794>
 8014ee2:	9905      	ldr	r1, [sp, #20]
 8014ee4:	463a      	mov	r2, r7
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f001 fa10 	bl	801630c <__lshift>
 8014eec:	9005      	str	r0, [sp, #20]
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	f43f ae7e 	beq.w	8014bf0 <_strtod_l+0x490>
 8014ef4:	f1b9 0f00 	cmp.w	r9, #0
 8014ef8:	dd08      	ble.n	8014f0c <_strtod_l+0x7ac>
 8014efa:	4631      	mov	r1, r6
 8014efc:	464a      	mov	r2, r9
 8014efe:	4620      	mov	r0, r4
 8014f00:	f001 fa04 	bl	801630c <__lshift>
 8014f04:	4606      	mov	r6, r0
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f43f ae72 	beq.w	8014bf0 <_strtod_l+0x490>
 8014f0c:	9a05      	ldr	r2, [sp, #20]
 8014f0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014f10:	4620      	mov	r0, r4
 8014f12:	f001 fa87 	bl	8016424 <__mdiff>
 8014f16:	4605      	mov	r5, r0
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	f43f ae69 	beq.w	8014bf0 <_strtod_l+0x490>
 8014f1e:	68c3      	ldr	r3, [r0, #12]
 8014f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f22:	2300      	movs	r3, #0
 8014f24:	60c3      	str	r3, [r0, #12]
 8014f26:	4631      	mov	r1, r6
 8014f28:	f001 fa60 	bl	80163ec <__mcmp>
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	da60      	bge.n	8014ff2 <_strtod_l+0x892>
 8014f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f32:	ea53 030a 	orrs.w	r3, r3, sl
 8014f36:	f040 8082 	bne.w	801503e <_strtod_l+0x8de>
 8014f3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d17d      	bne.n	801503e <_strtod_l+0x8de>
 8014f42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014f46:	0d1b      	lsrs	r3, r3, #20
 8014f48:	051b      	lsls	r3, r3, #20
 8014f4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014f4e:	d976      	bls.n	801503e <_strtod_l+0x8de>
 8014f50:	696b      	ldr	r3, [r5, #20]
 8014f52:	b913      	cbnz	r3, 8014f5a <_strtod_l+0x7fa>
 8014f54:	692b      	ldr	r3, [r5, #16]
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	dd71      	ble.n	801503e <_strtod_l+0x8de>
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f001 f9d4 	bl	801630c <__lshift>
 8014f64:	4631      	mov	r1, r6
 8014f66:	4605      	mov	r5, r0
 8014f68:	f001 fa40 	bl	80163ec <__mcmp>
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	dd66      	ble.n	801503e <_strtod_l+0x8de>
 8014f70:	9904      	ldr	r1, [sp, #16]
 8014f72:	4a53      	ldr	r2, [pc, #332]	; (80150c0 <_strtod_l+0x960>)
 8014f74:	465b      	mov	r3, fp
 8014f76:	2900      	cmp	r1, #0
 8014f78:	f000 8081 	beq.w	801507e <_strtod_l+0x91e>
 8014f7c:	ea02 010b 	and.w	r1, r2, fp
 8014f80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014f84:	dc7b      	bgt.n	801507e <_strtod_l+0x91e>
 8014f86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014f8a:	f77f aea9 	ble.w	8014ce0 <_strtod_l+0x580>
 8014f8e:	4b4d      	ldr	r3, [pc, #308]	; (80150c4 <_strtod_l+0x964>)
 8014f90:	4650      	mov	r0, sl
 8014f92:	4659      	mov	r1, fp
 8014f94:	2200      	movs	r2, #0
 8014f96:	f7eb fc71 	bl	800087c <__aeabi_dmul>
 8014f9a:	460b      	mov	r3, r1
 8014f9c:	4303      	orrs	r3, r0
 8014f9e:	bf08      	it	eq
 8014fa0:	2322      	moveq	r3, #34	; 0x22
 8014fa2:	4682      	mov	sl, r0
 8014fa4:	468b      	mov	fp, r1
 8014fa6:	bf08      	it	eq
 8014fa8:	6023      	streq	r3, [r4, #0]
 8014faa:	e62b      	b.n	8014c04 <_strtod_l+0x4a4>
 8014fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8014fb4:	ea03 0a0a 	and.w	sl, r3, sl
 8014fb8:	e6e3      	b.n	8014d82 <_strtod_l+0x622>
 8014fba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014fbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014fc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014fc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014fca:	fa01 f308 	lsl.w	r3, r1, r8
 8014fce:	9308      	str	r3, [sp, #32]
 8014fd0:	910d      	str	r1, [sp, #52]	; 0x34
 8014fd2:	e746      	b.n	8014e62 <_strtod_l+0x702>
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	9308      	str	r3, [sp, #32]
 8014fd8:	2301      	movs	r3, #1
 8014fda:	930d      	str	r3, [sp, #52]	; 0x34
 8014fdc:	e741      	b.n	8014e62 <_strtod_l+0x702>
 8014fde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014fe0:	4642      	mov	r2, r8
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f001 f992 	bl	801630c <__lshift>
 8014fe8:	9018      	str	r0, [sp, #96]	; 0x60
 8014fea:	2800      	cmp	r0, #0
 8014fec:	f47f af6b 	bne.w	8014ec6 <_strtod_l+0x766>
 8014ff0:	e5fe      	b.n	8014bf0 <_strtod_l+0x490>
 8014ff2:	465f      	mov	r7, fp
 8014ff4:	d16e      	bne.n	80150d4 <_strtod_l+0x974>
 8014ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014ffc:	b342      	cbz	r2, 8015050 <_strtod_l+0x8f0>
 8014ffe:	4a32      	ldr	r2, [pc, #200]	; (80150c8 <_strtod_l+0x968>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d128      	bne.n	8015056 <_strtod_l+0x8f6>
 8015004:	9b04      	ldr	r3, [sp, #16]
 8015006:	4651      	mov	r1, sl
 8015008:	b1eb      	cbz	r3, 8015046 <_strtod_l+0x8e6>
 801500a:	4b2d      	ldr	r3, [pc, #180]	; (80150c0 <_strtod_l+0x960>)
 801500c:	403b      	ands	r3, r7
 801500e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015016:	d819      	bhi.n	801504c <_strtod_l+0x8ec>
 8015018:	0d1b      	lsrs	r3, r3, #20
 801501a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801501e:	fa02 f303 	lsl.w	r3, r2, r3
 8015022:	4299      	cmp	r1, r3
 8015024:	d117      	bne.n	8015056 <_strtod_l+0x8f6>
 8015026:	4b29      	ldr	r3, [pc, #164]	; (80150cc <_strtod_l+0x96c>)
 8015028:	429f      	cmp	r7, r3
 801502a:	d102      	bne.n	8015032 <_strtod_l+0x8d2>
 801502c:	3101      	adds	r1, #1
 801502e:	f43f addf 	beq.w	8014bf0 <_strtod_l+0x490>
 8015032:	4b23      	ldr	r3, [pc, #140]	; (80150c0 <_strtod_l+0x960>)
 8015034:	403b      	ands	r3, r7
 8015036:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801503a:	f04f 0a00 	mov.w	sl, #0
 801503e:	9b04      	ldr	r3, [sp, #16]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d1a4      	bne.n	8014f8e <_strtod_l+0x82e>
 8015044:	e5de      	b.n	8014c04 <_strtod_l+0x4a4>
 8015046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801504a:	e7ea      	b.n	8015022 <_strtod_l+0x8c2>
 801504c:	4613      	mov	r3, r2
 801504e:	e7e8      	b.n	8015022 <_strtod_l+0x8c2>
 8015050:	ea53 030a 	orrs.w	r3, r3, sl
 8015054:	d08c      	beq.n	8014f70 <_strtod_l+0x810>
 8015056:	9b08      	ldr	r3, [sp, #32]
 8015058:	b1db      	cbz	r3, 8015092 <_strtod_l+0x932>
 801505a:	423b      	tst	r3, r7
 801505c:	d0ef      	beq.n	801503e <_strtod_l+0x8de>
 801505e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015060:	9a04      	ldr	r2, [sp, #16]
 8015062:	4650      	mov	r0, sl
 8015064:	4659      	mov	r1, fp
 8015066:	b1c3      	cbz	r3, 801509a <_strtod_l+0x93a>
 8015068:	f7ff fb5d 	bl	8014726 <sulp>
 801506c:	4602      	mov	r2, r0
 801506e:	460b      	mov	r3, r1
 8015070:	ec51 0b18 	vmov	r0, r1, d8
 8015074:	f7eb fa4c 	bl	8000510 <__adddf3>
 8015078:	4682      	mov	sl, r0
 801507a:	468b      	mov	fp, r1
 801507c:	e7df      	b.n	801503e <_strtod_l+0x8de>
 801507e:	4013      	ands	r3, r2
 8015080:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015084:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015088:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801508c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015090:	e7d5      	b.n	801503e <_strtod_l+0x8de>
 8015092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015094:	ea13 0f0a 	tst.w	r3, sl
 8015098:	e7e0      	b.n	801505c <_strtod_l+0x8fc>
 801509a:	f7ff fb44 	bl	8014726 <sulp>
 801509e:	4602      	mov	r2, r0
 80150a0:	460b      	mov	r3, r1
 80150a2:	ec51 0b18 	vmov	r0, r1, d8
 80150a6:	f7eb fa31 	bl	800050c <__aeabi_dsub>
 80150aa:	2200      	movs	r2, #0
 80150ac:	2300      	movs	r3, #0
 80150ae:	4682      	mov	sl, r0
 80150b0:	468b      	mov	fp, r1
 80150b2:	f7eb fe4b 	bl	8000d4c <__aeabi_dcmpeq>
 80150b6:	2800      	cmp	r0, #0
 80150b8:	d0c1      	beq.n	801503e <_strtod_l+0x8de>
 80150ba:	e611      	b.n	8014ce0 <_strtod_l+0x580>
 80150bc:	fffffc02 	.word	0xfffffc02
 80150c0:	7ff00000 	.word	0x7ff00000
 80150c4:	39500000 	.word	0x39500000
 80150c8:	000fffff 	.word	0x000fffff
 80150cc:	7fefffff 	.word	0x7fefffff
 80150d0:	0801d758 	.word	0x0801d758
 80150d4:	4631      	mov	r1, r6
 80150d6:	4628      	mov	r0, r5
 80150d8:	f001 fb06 	bl	80166e8 <__ratio>
 80150dc:	ec59 8b10 	vmov	r8, r9, d0
 80150e0:	ee10 0a10 	vmov	r0, s0
 80150e4:	2200      	movs	r2, #0
 80150e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80150ea:	4649      	mov	r1, r9
 80150ec:	f7eb fe42 	bl	8000d74 <__aeabi_dcmple>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d07a      	beq.n	80151ea <_strtod_l+0xa8a>
 80150f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d04a      	beq.n	8015190 <_strtod_l+0xa30>
 80150fa:	4b95      	ldr	r3, [pc, #596]	; (8015350 <_strtod_l+0xbf0>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015102:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015350 <_strtod_l+0xbf0>
 8015106:	f04f 0800 	mov.w	r8, #0
 801510a:	4b92      	ldr	r3, [pc, #584]	; (8015354 <_strtod_l+0xbf4>)
 801510c:	403b      	ands	r3, r7
 801510e:	930d      	str	r3, [sp, #52]	; 0x34
 8015110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015112:	4b91      	ldr	r3, [pc, #580]	; (8015358 <_strtod_l+0xbf8>)
 8015114:	429a      	cmp	r2, r3
 8015116:	f040 80b0 	bne.w	801527a <_strtod_l+0xb1a>
 801511a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801511e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8015122:	ec4b ab10 	vmov	d0, sl, fp
 8015126:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801512a:	f001 fa05 	bl	8016538 <__ulp>
 801512e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015132:	ec53 2b10 	vmov	r2, r3, d0
 8015136:	f7eb fba1 	bl	800087c <__aeabi_dmul>
 801513a:	4652      	mov	r2, sl
 801513c:	465b      	mov	r3, fp
 801513e:	f7eb f9e7 	bl	8000510 <__adddf3>
 8015142:	460b      	mov	r3, r1
 8015144:	4983      	ldr	r1, [pc, #524]	; (8015354 <_strtod_l+0xbf4>)
 8015146:	4a85      	ldr	r2, [pc, #532]	; (801535c <_strtod_l+0xbfc>)
 8015148:	4019      	ands	r1, r3
 801514a:	4291      	cmp	r1, r2
 801514c:	4682      	mov	sl, r0
 801514e:	d960      	bls.n	8015212 <_strtod_l+0xab2>
 8015150:	ee18 3a90 	vmov	r3, s17
 8015154:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015158:	4293      	cmp	r3, r2
 801515a:	d104      	bne.n	8015166 <_strtod_l+0xa06>
 801515c:	ee18 3a10 	vmov	r3, s16
 8015160:	3301      	adds	r3, #1
 8015162:	f43f ad45 	beq.w	8014bf0 <_strtod_l+0x490>
 8015166:	f8df b200 	ldr.w	fp, [pc, #512]	; 8015368 <_strtod_l+0xc08>
 801516a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801516e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015170:	4620      	mov	r0, r4
 8015172:	f000 feaf 	bl	8015ed4 <_Bfree>
 8015176:	9905      	ldr	r1, [sp, #20]
 8015178:	4620      	mov	r0, r4
 801517a:	f000 feab 	bl	8015ed4 <_Bfree>
 801517e:	4631      	mov	r1, r6
 8015180:	4620      	mov	r0, r4
 8015182:	f000 fea7 	bl	8015ed4 <_Bfree>
 8015186:	4629      	mov	r1, r5
 8015188:	4620      	mov	r0, r4
 801518a:	f000 fea3 	bl	8015ed4 <_Bfree>
 801518e:	e61a      	b.n	8014dc6 <_strtod_l+0x666>
 8015190:	f1ba 0f00 	cmp.w	sl, #0
 8015194:	d11b      	bne.n	80151ce <_strtod_l+0xa6e>
 8015196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801519a:	b9f3      	cbnz	r3, 80151da <_strtod_l+0xa7a>
 801519c:	4b6c      	ldr	r3, [pc, #432]	; (8015350 <_strtod_l+0xbf0>)
 801519e:	2200      	movs	r2, #0
 80151a0:	4640      	mov	r0, r8
 80151a2:	4649      	mov	r1, r9
 80151a4:	f7eb fddc 	bl	8000d60 <__aeabi_dcmplt>
 80151a8:	b9d0      	cbnz	r0, 80151e0 <_strtod_l+0xa80>
 80151aa:	4640      	mov	r0, r8
 80151ac:	4649      	mov	r1, r9
 80151ae:	4b6c      	ldr	r3, [pc, #432]	; (8015360 <_strtod_l+0xc00>)
 80151b0:	2200      	movs	r2, #0
 80151b2:	f7eb fb63 	bl	800087c <__aeabi_dmul>
 80151b6:	4680      	mov	r8, r0
 80151b8:	4689      	mov	r9, r1
 80151ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80151be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80151c2:	9315      	str	r3, [sp, #84]	; 0x54
 80151c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80151c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80151cc:	e79d      	b.n	801510a <_strtod_l+0x9aa>
 80151ce:	f1ba 0f01 	cmp.w	sl, #1
 80151d2:	d102      	bne.n	80151da <_strtod_l+0xa7a>
 80151d4:	2f00      	cmp	r7, #0
 80151d6:	f43f ad83 	beq.w	8014ce0 <_strtod_l+0x580>
 80151da:	4b62      	ldr	r3, [pc, #392]	; (8015364 <_strtod_l+0xc04>)
 80151dc:	2200      	movs	r2, #0
 80151de:	e78e      	b.n	80150fe <_strtod_l+0x99e>
 80151e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8015360 <_strtod_l+0xc00>
 80151e4:	f04f 0800 	mov.w	r8, #0
 80151e8:	e7e7      	b.n	80151ba <_strtod_l+0xa5a>
 80151ea:	4b5d      	ldr	r3, [pc, #372]	; (8015360 <_strtod_l+0xc00>)
 80151ec:	4640      	mov	r0, r8
 80151ee:	4649      	mov	r1, r9
 80151f0:	2200      	movs	r2, #0
 80151f2:	f7eb fb43 	bl	800087c <__aeabi_dmul>
 80151f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151f8:	4680      	mov	r8, r0
 80151fa:	4689      	mov	r9, r1
 80151fc:	b933      	cbnz	r3, 801520c <_strtod_l+0xaac>
 80151fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015202:	900e      	str	r0, [sp, #56]	; 0x38
 8015204:	930f      	str	r3, [sp, #60]	; 0x3c
 8015206:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801520a:	e7dd      	b.n	80151c8 <_strtod_l+0xa68>
 801520c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8015210:	e7f9      	b.n	8015206 <_strtod_l+0xaa6>
 8015212:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015216:	9b04      	ldr	r3, [sp, #16]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d1a8      	bne.n	801516e <_strtod_l+0xa0e>
 801521c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015222:	0d1b      	lsrs	r3, r3, #20
 8015224:	051b      	lsls	r3, r3, #20
 8015226:	429a      	cmp	r2, r3
 8015228:	d1a1      	bne.n	801516e <_strtod_l+0xa0e>
 801522a:	4640      	mov	r0, r8
 801522c:	4649      	mov	r1, r9
 801522e:	f7eb fdf7 	bl	8000e20 <__aeabi_d2lz>
 8015232:	f7eb faf5 	bl	8000820 <__aeabi_l2d>
 8015236:	4602      	mov	r2, r0
 8015238:	460b      	mov	r3, r1
 801523a:	4640      	mov	r0, r8
 801523c:	4649      	mov	r1, r9
 801523e:	f7eb f965 	bl	800050c <__aeabi_dsub>
 8015242:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015244:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015248:	ea43 030a 	orr.w	r3, r3, sl
 801524c:	4313      	orrs	r3, r2
 801524e:	4680      	mov	r8, r0
 8015250:	4689      	mov	r9, r1
 8015252:	d055      	beq.n	8015300 <_strtod_l+0xba0>
 8015254:	a336      	add	r3, pc, #216	; (adr r3, 8015330 <_strtod_l+0xbd0>)
 8015256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525a:	f7eb fd81 	bl	8000d60 <__aeabi_dcmplt>
 801525e:	2800      	cmp	r0, #0
 8015260:	f47f acd0 	bne.w	8014c04 <_strtod_l+0x4a4>
 8015264:	a334      	add	r3, pc, #208	; (adr r3, 8015338 <_strtod_l+0xbd8>)
 8015266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526a:	4640      	mov	r0, r8
 801526c:	4649      	mov	r1, r9
 801526e:	f7eb fd95 	bl	8000d9c <__aeabi_dcmpgt>
 8015272:	2800      	cmp	r0, #0
 8015274:	f43f af7b 	beq.w	801516e <_strtod_l+0xa0e>
 8015278:	e4c4      	b.n	8014c04 <_strtod_l+0x4a4>
 801527a:	9b04      	ldr	r3, [sp, #16]
 801527c:	b333      	cbz	r3, 80152cc <_strtod_l+0xb6c>
 801527e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015280:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015284:	d822      	bhi.n	80152cc <_strtod_l+0xb6c>
 8015286:	a32e      	add	r3, pc, #184	; (adr r3, 8015340 <_strtod_l+0xbe0>)
 8015288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528c:	4640      	mov	r0, r8
 801528e:	4649      	mov	r1, r9
 8015290:	f7eb fd70 	bl	8000d74 <__aeabi_dcmple>
 8015294:	b1a0      	cbz	r0, 80152c0 <_strtod_l+0xb60>
 8015296:	4649      	mov	r1, r9
 8015298:	4640      	mov	r0, r8
 801529a:	f7eb fd89 	bl	8000db0 <__aeabi_d2uiz>
 801529e:	2801      	cmp	r0, #1
 80152a0:	bf38      	it	cc
 80152a2:	2001      	movcc	r0, #1
 80152a4:	f7eb fa70 	bl	8000788 <__aeabi_ui2d>
 80152a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152aa:	4680      	mov	r8, r0
 80152ac:	4689      	mov	r9, r1
 80152ae:	bb23      	cbnz	r3, 80152fa <_strtod_l+0xb9a>
 80152b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152b4:	9010      	str	r0, [sp, #64]	; 0x40
 80152b6:	9311      	str	r3, [sp, #68]	; 0x44
 80152b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80152bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80152c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80152c8:	1a9b      	subs	r3, r3, r2
 80152ca:	9309      	str	r3, [sp, #36]	; 0x24
 80152cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80152d0:	eeb0 0a48 	vmov.f32	s0, s16
 80152d4:	eef0 0a68 	vmov.f32	s1, s17
 80152d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80152dc:	f001 f92c 	bl	8016538 <__ulp>
 80152e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80152e4:	ec53 2b10 	vmov	r2, r3, d0
 80152e8:	f7eb fac8 	bl	800087c <__aeabi_dmul>
 80152ec:	ec53 2b18 	vmov	r2, r3, d8
 80152f0:	f7eb f90e 	bl	8000510 <__adddf3>
 80152f4:	4682      	mov	sl, r0
 80152f6:	468b      	mov	fp, r1
 80152f8:	e78d      	b.n	8015216 <_strtod_l+0xab6>
 80152fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80152fe:	e7db      	b.n	80152b8 <_strtod_l+0xb58>
 8015300:	a311      	add	r3, pc, #68	; (adr r3, 8015348 <_strtod_l+0xbe8>)
 8015302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015306:	f7eb fd2b 	bl	8000d60 <__aeabi_dcmplt>
 801530a:	e7b2      	b.n	8015272 <_strtod_l+0xb12>
 801530c:	2300      	movs	r3, #0
 801530e:	930a      	str	r3, [sp, #40]	; 0x28
 8015310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015314:	6013      	str	r3, [r2, #0]
 8015316:	f7ff ba6b 	b.w	80147f0 <_strtod_l+0x90>
 801531a:	2a65      	cmp	r2, #101	; 0x65
 801531c:	f43f ab5f 	beq.w	80149de <_strtod_l+0x27e>
 8015320:	2a45      	cmp	r2, #69	; 0x45
 8015322:	f43f ab5c 	beq.w	80149de <_strtod_l+0x27e>
 8015326:	2301      	movs	r3, #1
 8015328:	f7ff bb94 	b.w	8014a54 <_strtod_l+0x2f4>
 801532c:	f3af 8000 	nop.w
 8015330:	94a03595 	.word	0x94a03595
 8015334:	3fdfffff 	.word	0x3fdfffff
 8015338:	35afe535 	.word	0x35afe535
 801533c:	3fe00000 	.word	0x3fe00000
 8015340:	ffc00000 	.word	0xffc00000
 8015344:	41dfffff 	.word	0x41dfffff
 8015348:	94a03595 	.word	0x94a03595
 801534c:	3fcfffff 	.word	0x3fcfffff
 8015350:	3ff00000 	.word	0x3ff00000
 8015354:	7ff00000 	.word	0x7ff00000
 8015358:	7fe00000 	.word	0x7fe00000
 801535c:	7c9fffff 	.word	0x7c9fffff
 8015360:	3fe00000 	.word	0x3fe00000
 8015364:	bff00000 	.word	0xbff00000
 8015368:	7fefffff 	.word	0x7fefffff

0801536c <strtod>:
 801536c:	460a      	mov	r2, r1
 801536e:	4601      	mov	r1, r0
 8015370:	4802      	ldr	r0, [pc, #8]	; (801537c <strtod+0x10>)
 8015372:	4b03      	ldr	r3, [pc, #12]	; (8015380 <strtod+0x14>)
 8015374:	6800      	ldr	r0, [r0, #0]
 8015376:	f7ff b9f3 	b.w	8014760 <_strtod_l>
 801537a:	bf00      	nop
 801537c:	20000088 	.word	0x20000088
 8015380:	200000f0 	.word	0x200000f0

08015384 <_strtol_l.constprop.0>:
 8015384:	2b01      	cmp	r3, #1
 8015386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801538a:	d001      	beq.n	8015390 <_strtol_l.constprop.0+0xc>
 801538c:	2b24      	cmp	r3, #36	; 0x24
 801538e:	d906      	bls.n	801539e <_strtol_l.constprop.0+0x1a>
 8015390:	f7fd fdae 	bl	8012ef0 <__errno>
 8015394:	2316      	movs	r3, #22
 8015396:	6003      	str	r3, [r0, #0]
 8015398:	2000      	movs	r0, #0
 801539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801539e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015484 <_strtol_l.constprop.0+0x100>
 80153a2:	460d      	mov	r5, r1
 80153a4:	462e      	mov	r6, r5
 80153a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80153aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80153ae:	f017 0708 	ands.w	r7, r7, #8
 80153b2:	d1f7      	bne.n	80153a4 <_strtol_l.constprop.0+0x20>
 80153b4:	2c2d      	cmp	r4, #45	; 0x2d
 80153b6:	d132      	bne.n	801541e <_strtol_l.constprop.0+0x9a>
 80153b8:	782c      	ldrb	r4, [r5, #0]
 80153ba:	2701      	movs	r7, #1
 80153bc:	1cb5      	adds	r5, r6, #2
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d05b      	beq.n	801547a <_strtol_l.constprop.0+0xf6>
 80153c2:	2b10      	cmp	r3, #16
 80153c4:	d109      	bne.n	80153da <_strtol_l.constprop.0+0x56>
 80153c6:	2c30      	cmp	r4, #48	; 0x30
 80153c8:	d107      	bne.n	80153da <_strtol_l.constprop.0+0x56>
 80153ca:	782c      	ldrb	r4, [r5, #0]
 80153cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80153d0:	2c58      	cmp	r4, #88	; 0x58
 80153d2:	d14d      	bne.n	8015470 <_strtol_l.constprop.0+0xec>
 80153d4:	786c      	ldrb	r4, [r5, #1]
 80153d6:	2310      	movs	r3, #16
 80153d8:	3502      	adds	r5, #2
 80153da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80153de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80153e2:	f04f 0c00 	mov.w	ip, #0
 80153e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80153ea:	4666      	mov	r6, ip
 80153ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80153f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80153f4:	f1be 0f09 	cmp.w	lr, #9
 80153f8:	d816      	bhi.n	8015428 <_strtol_l.constprop.0+0xa4>
 80153fa:	4674      	mov	r4, lr
 80153fc:	42a3      	cmp	r3, r4
 80153fe:	dd24      	ble.n	801544a <_strtol_l.constprop.0+0xc6>
 8015400:	f1bc 0f00 	cmp.w	ip, #0
 8015404:	db1e      	blt.n	8015444 <_strtol_l.constprop.0+0xc0>
 8015406:	45b1      	cmp	r9, r6
 8015408:	d31c      	bcc.n	8015444 <_strtol_l.constprop.0+0xc0>
 801540a:	d101      	bne.n	8015410 <_strtol_l.constprop.0+0x8c>
 801540c:	45a2      	cmp	sl, r4
 801540e:	db19      	blt.n	8015444 <_strtol_l.constprop.0+0xc0>
 8015410:	fb06 4603 	mla	r6, r6, r3, r4
 8015414:	f04f 0c01 	mov.w	ip, #1
 8015418:	f815 4b01 	ldrb.w	r4, [r5], #1
 801541c:	e7e8      	b.n	80153f0 <_strtol_l.constprop.0+0x6c>
 801541e:	2c2b      	cmp	r4, #43	; 0x2b
 8015420:	bf04      	itt	eq
 8015422:	782c      	ldrbeq	r4, [r5, #0]
 8015424:	1cb5      	addeq	r5, r6, #2
 8015426:	e7ca      	b.n	80153be <_strtol_l.constprop.0+0x3a>
 8015428:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801542c:	f1be 0f19 	cmp.w	lr, #25
 8015430:	d801      	bhi.n	8015436 <_strtol_l.constprop.0+0xb2>
 8015432:	3c37      	subs	r4, #55	; 0x37
 8015434:	e7e2      	b.n	80153fc <_strtol_l.constprop.0+0x78>
 8015436:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801543a:	f1be 0f19 	cmp.w	lr, #25
 801543e:	d804      	bhi.n	801544a <_strtol_l.constprop.0+0xc6>
 8015440:	3c57      	subs	r4, #87	; 0x57
 8015442:	e7db      	b.n	80153fc <_strtol_l.constprop.0+0x78>
 8015444:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015448:	e7e6      	b.n	8015418 <_strtol_l.constprop.0+0x94>
 801544a:	f1bc 0f00 	cmp.w	ip, #0
 801544e:	da05      	bge.n	801545c <_strtol_l.constprop.0+0xd8>
 8015450:	2322      	movs	r3, #34	; 0x22
 8015452:	6003      	str	r3, [r0, #0]
 8015454:	4646      	mov	r6, r8
 8015456:	b942      	cbnz	r2, 801546a <_strtol_l.constprop.0+0xe6>
 8015458:	4630      	mov	r0, r6
 801545a:	e79e      	b.n	801539a <_strtol_l.constprop.0+0x16>
 801545c:	b107      	cbz	r7, 8015460 <_strtol_l.constprop.0+0xdc>
 801545e:	4276      	negs	r6, r6
 8015460:	2a00      	cmp	r2, #0
 8015462:	d0f9      	beq.n	8015458 <_strtol_l.constprop.0+0xd4>
 8015464:	f1bc 0f00 	cmp.w	ip, #0
 8015468:	d000      	beq.n	801546c <_strtol_l.constprop.0+0xe8>
 801546a:	1e69      	subs	r1, r5, #1
 801546c:	6011      	str	r1, [r2, #0]
 801546e:	e7f3      	b.n	8015458 <_strtol_l.constprop.0+0xd4>
 8015470:	2430      	movs	r4, #48	; 0x30
 8015472:	2b00      	cmp	r3, #0
 8015474:	d1b1      	bne.n	80153da <_strtol_l.constprop.0+0x56>
 8015476:	2308      	movs	r3, #8
 8015478:	e7af      	b.n	80153da <_strtol_l.constprop.0+0x56>
 801547a:	2c30      	cmp	r4, #48	; 0x30
 801547c:	d0a5      	beq.n	80153ca <_strtol_l.constprop.0+0x46>
 801547e:	230a      	movs	r3, #10
 8015480:	e7ab      	b.n	80153da <_strtol_l.constprop.0+0x56>
 8015482:	bf00      	nop
 8015484:	0801cef3 	.word	0x0801cef3

08015488 <_strtol_r>:
 8015488:	f7ff bf7c 	b.w	8015384 <_strtol_l.constprop.0>

0801548c <strtol>:
 801548c:	4613      	mov	r3, r2
 801548e:	460a      	mov	r2, r1
 8015490:	4601      	mov	r1, r0
 8015492:	4802      	ldr	r0, [pc, #8]	; (801549c <strtol+0x10>)
 8015494:	6800      	ldr	r0, [r0, #0]
 8015496:	f7ff bf75 	b.w	8015384 <_strtol_l.constprop.0>
 801549a:	bf00      	nop
 801549c:	20000088 	.word	0x20000088

080154a0 <gettimeofday>:
 80154a0:	4b02      	ldr	r3, [pc, #8]	; (80154ac <gettimeofday+0xc>)
 80154a2:	460a      	mov	r2, r1
 80154a4:	4601      	mov	r1, r0
 80154a6:	6818      	ldr	r0, [r3, #0]
 80154a8:	f000 bc68 	b.w	8015d7c <_gettimeofday_r>
 80154ac:	20000088 	.word	0x20000088

080154b0 <_user_strerror>:
 80154b0:	2000      	movs	r0, #0
 80154b2:	4770      	bx	lr

080154b4 <__swbuf_r>:
 80154b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154b6:	460e      	mov	r6, r1
 80154b8:	4614      	mov	r4, r2
 80154ba:	4605      	mov	r5, r0
 80154bc:	b118      	cbz	r0, 80154c6 <__swbuf_r+0x12>
 80154be:	6983      	ldr	r3, [r0, #24]
 80154c0:	b90b      	cbnz	r3, 80154c6 <__swbuf_r+0x12>
 80154c2:	f7fd fe35 	bl	8013130 <__sinit>
 80154c6:	4b21      	ldr	r3, [pc, #132]	; (801554c <__swbuf_r+0x98>)
 80154c8:	429c      	cmp	r4, r3
 80154ca:	d12b      	bne.n	8015524 <__swbuf_r+0x70>
 80154cc:	686c      	ldr	r4, [r5, #4]
 80154ce:	69a3      	ldr	r3, [r4, #24]
 80154d0:	60a3      	str	r3, [r4, #8]
 80154d2:	89a3      	ldrh	r3, [r4, #12]
 80154d4:	071a      	lsls	r2, r3, #28
 80154d6:	d52f      	bpl.n	8015538 <__swbuf_r+0x84>
 80154d8:	6923      	ldr	r3, [r4, #16]
 80154da:	b36b      	cbz	r3, 8015538 <__swbuf_r+0x84>
 80154dc:	6923      	ldr	r3, [r4, #16]
 80154de:	6820      	ldr	r0, [r4, #0]
 80154e0:	1ac0      	subs	r0, r0, r3
 80154e2:	6963      	ldr	r3, [r4, #20]
 80154e4:	b2f6      	uxtb	r6, r6
 80154e6:	4283      	cmp	r3, r0
 80154e8:	4637      	mov	r7, r6
 80154ea:	dc04      	bgt.n	80154f6 <__swbuf_r+0x42>
 80154ec:	4621      	mov	r1, r4
 80154ee:	4628      	mov	r0, r5
 80154f0:	f7fd fd8a 	bl	8013008 <_fflush_r>
 80154f4:	bb30      	cbnz	r0, 8015544 <__swbuf_r+0x90>
 80154f6:	68a3      	ldr	r3, [r4, #8]
 80154f8:	3b01      	subs	r3, #1
 80154fa:	60a3      	str	r3, [r4, #8]
 80154fc:	6823      	ldr	r3, [r4, #0]
 80154fe:	1c5a      	adds	r2, r3, #1
 8015500:	6022      	str	r2, [r4, #0]
 8015502:	701e      	strb	r6, [r3, #0]
 8015504:	6963      	ldr	r3, [r4, #20]
 8015506:	3001      	adds	r0, #1
 8015508:	4283      	cmp	r3, r0
 801550a:	d004      	beq.n	8015516 <__swbuf_r+0x62>
 801550c:	89a3      	ldrh	r3, [r4, #12]
 801550e:	07db      	lsls	r3, r3, #31
 8015510:	d506      	bpl.n	8015520 <__swbuf_r+0x6c>
 8015512:	2e0a      	cmp	r6, #10
 8015514:	d104      	bne.n	8015520 <__swbuf_r+0x6c>
 8015516:	4621      	mov	r1, r4
 8015518:	4628      	mov	r0, r5
 801551a:	f7fd fd75 	bl	8013008 <_fflush_r>
 801551e:	b988      	cbnz	r0, 8015544 <__swbuf_r+0x90>
 8015520:	4638      	mov	r0, r7
 8015522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015524:	4b0a      	ldr	r3, [pc, #40]	; (8015550 <__swbuf_r+0x9c>)
 8015526:	429c      	cmp	r4, r3
 8015528:	d101      	bne.n	801552e <__swbuf_r+0x7a>
 801552a:	68ac      	ldr	r4, [r5, #8]
 801552c:	e7cf      	b.n	80154ce <__swbuf_r+0x1a>
 801552e:	4b09      	ldr	r3, [pc, #36]	; (8015554 <__swbuf_r+0xa0>)
 8015530:	429c      	cmp	r4, r3
 8015532:	bf08      	it	eq
 8015534:	68ec      	ldreq	r4, [r5, #12]
 8015536:	e7ca      	b.n	80154ce <__swbuf_r+0x1a>
 8015538:	4621      	mov	r1, r4
 801553a:	4628      	mov	r0, r5
 801553c:	f000 f81e 	bl	801557c <__swsetup_r>
 8015540:	2800      	cmp	r0, #0
 8015542:	d0cb      	beq.n	80154dc <__swbuf_r+0x28>
 8015544:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015548:	e7ea      	b.n	8015520 <__swbuf_r+0x6c>
 801554a:	bf00      	nop
 801554c:	0801d014 	.word	0x0801d014
 8015550:	0801d034 	.word	0x0801d034
 8015554:	0801cff4 	.word	0x0801cff4

08015558 <_write_r>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	4d07      	ldr	r5, [pc, #28]	; (8015578 <_write_r+0x20>)
 801555c:	4604      	mov	r4, r0
 801555e:	4608      	mov	r0, r1
 8015560:	4611      	mov	r1, r2
 8015562:	2200      	movs	r2, #0
 8015564:	602a      	str	r2, [r5, #0]
 8015566:	461a      	mov	r2, r3
 8015568:	f7ec f915 	bl	8001796 <_write>
 801556c:	1c43      	adds	r3, r0, #1
 801556e:	d102      	bne.n	8015576 <_write_r+0x1e>
 8015570:	682b      	ldr	r3, [r5, #0]
 8015572:	b103      	cbz	r3, 8015576 <_write_r+0x1e>
 8015574:	6023      	str	r3, [r4, #0]
 8015576:	bd38      	pop	{r3, r4, r5, pc}
 8015578:	20003e84 	.word	0x20003e84

0801557c <__swsetup_r>:
 801557c:	4b32      	ldr	r3, [pc, #200]	; (8015648 <__swsetup_r+0xcc>)
 801557e:	b570      	push	{r4, r5, r6, lr}
 8015580:	681d      	ldr	r5, [r3, #0]
 8015582:	4606      	mov	r6, r0
 8015584:	460c      	mov	r4, r1
 8015586:	b125      	cbz	r5, 8015592 <__swsetup_r+0x16>
 8015588:	69ab      	ldr	r3, [r5, #24]
 801558a:	b913      	cbnz	r3, 8015592 <__swsetup_r+0x16>
 801558c:	4628      	mov	r0, r5
 801558e:	f7fd fdcf 	bl	8013130 <__sinit>
 8015592:	4b2e      	ldr	r3, [pc, #184]	; (801564c <__swsetup_r+0xd0>)
 8015594:	429c      	cmp	r4, r3
 8015596:	d10f      	bne.n	80155b8 <__swsetup_r+0x3c>
 8015598:	686c      	ldr	r4, [r5, #4]
 801559a:	89a3      	ldrh	r3, [r4, #12]
 801559c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155a0:	0719      	lsls	r1, r3, #28
 80155a2:	d42c      	bmi.n	80155fe <__swsetup_r+0x82>
 80155a4:	06dd      	lsls	r5, r3, #27
 80155a6:	d411      	bmi.n	80155cc <__swsetup_r+0x50>
 80155a8:	2309      	movs	r3, #9
 80155aa:	6033      	str	r3, [r6, #0]
 80155ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80155b0:	81a3      	strh	r3, [r4, #12]
 80155b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155b6:	e03e      	b.n	8015636 <__swsetup_r+0xba>
 80155b8:	4b25      	ldr	r3, [pc, #148]	; (8015650 <__swsetup_r+0xd4>)
 80155ba:	429c      	cmp	r4, r3
 80155bc:	d101      	bne.n	80155c2 <__swsetup_r+0x46>
 80155be:	68ac      	ldr	r4, [r5, #8]
 80155c0:	e7eb      	b.n	801559a <__swsetup_r+0x1e>
 80155c2:	4b24      	ldr	r3, [pc, #144]	; (8015654 <__swsetup_r+0xd8>)
 80155c4:	429c      	cmp	r4, r3
 80155c6:	bf08      	it	eq
 80155c8:	68ec      	ldreq	r4, [r5, #12]
 80155ca:	e7e6      	b.n	801559a <__swsetup_r+0x1e>
 80155cc:	0758      	lsls	r0, r3, #29
 80155ce:	d512      	bpl.n	80155f6 <__swsetup_r+0x7a>
 80155d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155d2:	b141      	cbz	r1, 80155e6 <__swsetup_r+0x6a>
 80155d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155d8:	4299      	cmp	r1, r3
 80155da:	d002      	beq.n	80155e2 <__swsetup_r+0x66>
 80155dc:	4630      	mov	r0, r6
 80155de:	f7fd ffdd 	bl	801359c <_free_r>
 80155e2:	2300      	movs	r3, #0
 80155e4:	6363      	str	r3, [r4, #52]	; 0x34
 80155e6:	89a3      	ldrh	r3, [r4, #12]
 80155e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80155ec:	81a3      	strh	r3, [r4, #12]
 80155ee:	2300      	movs	r3, #0
 80155f0:	6063      	str	r3, [r4, #4]
 80155f2:	6923      	ldr	r3, [r4, #16]
 80155f4:	6023      	str	r3, [r4, #0]
 80155f6:	89a3      	ldrh	r3, [r4, #12]
 80155f8:	f043 0308 	orr.w	r3, r3, #8
 80155fc:	81a3      	strh	r3, [r4, #12]
 80155fe:	6923      	ldr	r3, [r4, #16]
 8015600:	b94b      	cbnz	r3, 8015616 <__swsetup_r+0x9a>
 8015602:	89a3      	ldrh	r3, [r4, #12]
 8015604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801560c:	d003      	beq.n	8015616 <__swsetup_r+0x9a>
 801560e:	4621      	mov	r1, r4
 8015610:	4630      	mov	r0, r6
 8015612:	f7fd ff37 	bl	8013484 <__smakebuf_r>
 8015616:	89a0      	ldrh	r0, [r4, #12]
 8015618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801561c:	f010 0301 	ands.w	r3, r0, #1
 8015620:	d00a      	beq.n	8015638 <__swsetup_r+0xbc>
 8015622:	2300      	movs	r3, #0
 8015624:	60a3      	str	r3, [r4, #8]
 8015626:	6963      	ldr	r3, [r4, #20]
 8015628:	425b      	negs	r3, r3
 801562a:	61a3      	str	r3, [r4, #24]
 801562c:	6923      	ldr	r3, [r4, #16]
 801562e:	b943      	cbnz	r3, 8015642 <__swsetup_r+0xc6>
 8015630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015634:	d1ba      	bne.n	80155ac <__swsetup_r+0x30>
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	0781      	lsls	r1, r0, #30
 801563a:	bf58      	it	pl
 801563c:	6963      	ldrpl	r3, [r4, #20]
 801563e:	60a3      	str	r3, [r4, #8]
 8015640:	e7f4      	b.n	801562c <__swsetup_r+0xb0>
 8015642:	2000      	movs	r0, #0
 8015644:	e7f7      	b.n	8015636 <__swsetup_r+0xba>
 8015646:	bf00      	nop
 8015648:	20000088 	.word	0x20000088
 801564c:	0801d014 	.word	0x0801d014
 8015650:	0801d034 	.word	0x0801d034
 8015654:	0801cff4 	.word	0x0801cff4

08015658 <_close_r>:
 8015658:	b538      	push	{r3, r4, r5, lr}
 801565a:	4d06      	ldr	r5, [pc, #24]	; (8015674 <_close_r+0x1c>)
 801565c:	2300      	movs	r3, #0
 801565e:	4604      	mov	r4, r0
 8015660:	4608      	mov	r0, r1
 8015662:	602b      	str	r3, [r5, #0]
 8015664:	f7ec f8b3 	bl	80017ce <_close>
 8015668:	1c43      	adds	r3, r0, #1
 801566a:	d102      	bne.n	8015672 <_close_r+0x1a>
 801566c:	682b      	ldr	r3, [r5, #0]
 801566e:	b103      	cbz	r3, 8015672 <_close_r+0x1a>
 8015670:	6023      	str	r3, [r4, #0]
 8015672:	bd38      	pop	{r3, r4, r5, pc}
 8015674:	20003e84 	.word	0x20003e84

08015678 <_fstat_r>:
 8015678:	b538      	push	{r3, r4, r5, lr}
 801567a:	4d07      	ldr	r5, [pc, #28]	; (8015698 <_fstat_r+0x20>)
 801567c:	2300      	movs	r3, #0
 801567e:	4604      	mov	r4, r0
 8015680:	4608      	mov	r0, r1
 8015682:	4611      	mov	r1, r2
 8015684:	602b      	str	r3, [r5, #0]
 8015686:	f7ec f8ae 	bl	80017e6 <_fstat>
 801568a:	1c43      	adds	r3, r0, #1
 801568c:	d102      	bne.n	8015694 <_fstat_r+0x1c>
 801568e:	682b      	ldr	r3, [r5, #0]
 8015690:	b103      	cbz	r3, 8015694 <_fstat_r+0x1c>
 8015692:	6023      	str	r3, [r4, #0]
 8015694:	bd38      	pop	{r3, r4, r5, pc}
 8015696:	bf00      	nop
 8015698:	20003e84 	.word	0x20003e84

0801569c <rshift>:
 801569c:	6903      	ldr	r3, [r0, #16]
 801569e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80156a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80156aa:	f100 0414 	add.w	r4, r0, #20
 80156ae:	dd45      	ble.n	801573c <rshift+0xa0>
 80156b0:	f011 011f 	ands.w	r1, r1, #31
 80156b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80156b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80156bc:	d10c      	bne.n	80156d8 <rshift+0x3c>
 80156be:	f100 0710 	add.w	r7, r0, #16
 80156c2:	4629      	mov	r1, r5
 80156c4:	42b1      	cmp	r1, r6
 80156c6:	d334      	bcc.n	8015732 <rshift+0x96>
 80156c8:	1a9b      	subs	r3, r3, r2
 80156ca:	009b      	lsls	r3, r3, #2
 80156cc:	1eea      	subs	r2, r5, #3
 80156ce:	4296      	cmp	r6, r2
 80156d0:	bf38      	it	cc
 80156d2:	2300      	movcc	r3, #0
 80156d4:	4423      	add	r3, r4
 80156d6:	e015      	b.n	8015704 <rshift+0x68>
 80156d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80156dc:	f1c1 0820 	rsb	r8, r1, #32
 80156e0:	40cf      	lsrs	r7, r1
 80156e2:	f105 0e04 	add.w	lr, r5, #4
 80156e6:	46a1      	mov	r9, r4
 80156e8:	4576      	cmp	r6, lr
 80156ea:	46f4      	mov	ip, lr
 80156ec:	d815      	bhi.n	801571a <rshift+0x7e>
 80156ee:	1a9a      	subs	r2, r3, r2
 80156f0:	0092      	lsls	r2, r2, #2
 80156f2:	3a04      	subs	r2, #4
 80156f4:	3501      	adds	r5, #1
 80156f6:	42ae      	cmp	r6, r5
 80156f8:	bf38      	it	cc
 80156fa:	2200      	movcc	r2, #0
 80156fc:	18a3      	adds	r3, r4, r2
 80156fe:	50a7      	str	r7, [r4, r2]
 8015700:	b107      	cbz	r7, 8015704 <rshift+0x68>
 8015702:	3304      	adds	r3, #4
 8015704:	1b1a      	subs	r2, r3, r4
 8015706:	42a3      	cmp	r3, r4
 8015708:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801570c:	bf08      	it	eq
 801570e:	2300      	moveq	r3, #0
 8015710:	6102      	str	r2, [r0, #16]
 8015712:	bf08      	it	eq
 8015714:	6143      	streq	r3, [r0, #20]
 8015716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801571a:	f8dc c000 	ldr.w	ip, [ip]
 801571e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015722:	ea4c 0707 	orr.w	r7, ip, r7
 8015726:	f849 7b04 	str.w	r7, [r9], #4
 801572a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801572e:	40cf      	lsrs	r7, r1
 8015730:	e7da      	b.n	80156e8 <rshift+0x4c>
 8015732:	f851 cb04 	ldr.w	ip, [r1], #4
 8015736:	f847 cf04 	str.w	ip, [r7, #4]!
 801573a:	e7c3      	b.n	80156c4 <rshift+0x28>
 801573c:	4623      	mov	r3, r4
 801573e:	e7e1      	b.n	8015704 <rshift+0x68>

08015740 <__hexdig_fun>:
 8015740:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015744:	2b09      	cmp	r3, #9
 8015746:	d802      	bhi.n	801574e <__hexdig_fun+0xe>
 8015748:	3820      	subs	r0, #32
 801574a:	b2c0      	uxtb	r0, r0
 801574c:	4770      	bx	lr
 801574e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015752:	2b05      	cmp	r3, #5
 8015754:	d801      	bhi.n	801575a <__hexdig_fun+0x1a>
 8015756:	3847      	subs	r0, #71	; 0x47
 8015758:	e7f7      	b.n	801574a <__hexdig_fun+0xa>
 801575a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801575e:	2b05      	cmp	r3, #5
 8015760:	d801      	bhi.n	8015766 <__hexdig_fun+0x26>
 8015762:	3827      	subs	r0, #39	; 0x27
 8015764:	e7f1      	b.n	801574a <__hexdig_fun+0xa>
 8015766:	2000      	movs	r0, #0
 8015768:	4770      	bx	lr
	...

0801576c <__gethex>:
 801576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015770:	ed2d 8b02 	vpush	{d8}
 8015774:	b089      	sub	sp, #36	; 0x24
 8015776:	ee08 0a10 	vmov	s16, r0
 801577a:	9304      	str	r3, [sp, #16]
 801577c:	4bb4      	ldr	r3, [pc, #720]	; (8015a50 <__gethex+0x2e4>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	9301      	str	r3, [sp, #4]
 8015782:	4618      	mov	r0, r3
 8015784:	468b      	mov	fp, r1
 8015786:	4690      	mov	r8, r2
 8015788:	f7ea feb4 	bl	80004f4 <strlen>
 801578c:	9b01      	ldr	r3, [sp, #4]
 801578e:	f8db 2000 	ldr.w	r2, [fp]
 8015792:	4403      	add	r3, r0
 8015794:	4682      	mov	sl, r0
 8015796:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801579a:	9305      	str	r3, [sp, #20]
 801579c:	1c93      	adds	r3, r2, #2
 801579e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80157a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80157a6:	32fe      	adds	r2, #254	; 0xfe
 80157a8:	18d1      	adds	r1, r2, r3
 80157aa:	461f      	mov	r7, r3
 80157ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80157b0:	9100      	str	r1, [sp, #0]
 80157b2:	2830      	cmp	r0, #48	; 0x30
 80157b4:	d0f8      	beq.n	80157a8 <__gethex+0x3c>
 80157b6:	f7ff ffc3 	bl	8015740 <__hexdig_fun>
 80157ba:	4604      	mov	r4, r0
 80157bc:	2800      	cmp	r0, #0
 80157be:	d13a      	bne.n	8015836 <__gethex+0xca>
 80157c0:	9901      	ldr	r1, [sp, #4]
 80157c2:	4652      	mov	r2, sl
 80157c4:	4638      	mov	r0, r7
 80157c6:	f001 fd07 	bl	80171d8 <strncmp>
 80157ca:	4605      	mov	r5, r0
 80157cc:	2800      	cmp	r0, #0
 80157ce:	d168      	bne.n	80158a2 <__gethex+0x136>
 80157d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80157d4:	eb07 060a 	add.w	r6, r7, sl
 80157d8:	f7ff ffb2 	bl	8015740 <__hexdig_fun>
 80157dc:	2800      	cmp	r0, #0
 80157de:	d062      	beq.n	80158a6 <__gethex+0x13a>
 80157e0:	4633      	mov	r3, r6
 80157e2:	7818      	ldrb	r0, [r3, #0]
 80157e4:	2830      	cmp	r0, #48	; 0x30
 80157e6:	461f      	mov	r7, r3
 80157e8:	f103 0301 	add.w	r3, r3, #1
 80157ec:	d0f9      	beq.n	80157e2 <__gethex+0x76>
 80157ee:	f7ff ffa7 	bl	8015740 <__hexdig_fun>
 80157f2:	2301      	movs	r3, #1
 80157f4:	fab0 f480 	clz	r4, r0
 80157f8:	0964      	lsrs	r4, r4, #5
 80157fa:	4635      	mov	r5, r6
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	463a      	mov	r2, r7
 8015800:	4616      	mov	r6, r2
 8015802:	3201      	adds	r2, #1
 8015804:	7830      	ldrb	r0, [r6, #0]
 8015806:	f7ff ff9b 	bl	8015740 <__hexdig_fun>
 801580a:	2800      	cmp	r0, #0
 801580c:	d1f8      	bne.n	8015800 <__gethex+0x94>
 801580e:	9901      	ldr	r1, [sp, #4]
 8015810:	4652      	mov	r2, sl
 8015812:	4630      	mov	r0, r6
 8015814:	f001 fce0 	bl	80171d8 <strncmp>
 8015818:	b980      	cbnz	r0, 801583c <__gethex+0xd0>
 801581a:	b94d      	cbnz	r5, 8015830 <__gethex+0xc4>
 801581c:	eb06 050a 	add.w	r5, r6, sl
 8015820:	462a      	mov	r2, r5
 8015822:	4616      	mov	r6, r2
 8015824:	3201      	adds	r2, #1
 8015826:	7830      	ldrb	r0, [r6, #0]
 8015828:	f7ff ff8a 	bl	8015740 <__hexdig_fun>
 801582c:	2800      	cmp	r0, #0
 801582e:	d1f8      	bne.n	8015822 <__gethex+0xb6>
 8015830:	1bad      	subs	r5, r5, r6
 8015832:	00ad      	lsls	r5, r5, #2
 8015834:	e004      	b.n	8015840 <__gethex+0xd4>
 8015836:	2400      	movs	r4, #0
 8015838:	4625      	mov	r5, r4
 801583a:	e7e0      	b.n	80157fe <__gethex+0x92>
 801583c:	2d00      	cmp	r5, #0
 801583e:	d1f7      	bne.n	8015830 <__gethex+0xc4>
 8015840:	7833      	ldrb	r3, [r6, #0]
 8015842:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015846:	2b50      	cmp	r3, #80	; 0x50
 8015848:	d13b      	bne.n	80158c2 <__gethex+0x156>
 801584a:	7873      	ldrb	r3, [r6, #1]
 801584c:	2b2b      	cmp	r3, #43	; 0x2b
 801584e:	d02c      	beq.n	80158aa <__gethex+0x13e>
 8015850:	2b2d      	cmp	r3, #45	; 0x2d
 8015852:	d02e      	beq.n	80158b2 <__gethex+0x146>
 8015854:	1c71      	adds	r1, r6, #1
 8015856:	f04f 0900 	mov.w	r9, #0
 801585a:	7808      	ldrb	r0, [r1, #0]
 801585c:	f7ff ff70 	bl	8015740 <__hexdig_fun>
 8015860:	1e43      	subs	r3, r0, #1
 8015862:	b2db      	uxtb	r3, r3
 8015864:	2b18      	cmp	r3, #24
 8015866:	d82c      	bhi.n	80158c2 <__gethex+0x156>
 8015868:	f1a0 0210 	sub.w	r2, r0, #16
 801586c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015870:	f7ff ff66 	bl	8015740 <__hexdig_fun>
 8015874:	1e43      	subs	r3, r0, #1
 8015876:	b2db      	uxtb	r3, r3
 8015878:	2b18      	cmp	r3, #24
 801587a:	d91d      	bls.n	80158b8 <__gethex+0x14c>
 801587c:	f1b9 0f00 	cmp.w	r9, #0
 8015880:	d000      	beq.n	8015884 <__gethex+0x118>
 8015882:	4252      	negs	r2, r2
 8015884:	4415      	add	r5, r2
 8015886:	f8cb 1000 	str.w	r1, [fp]
 801588a:	b1e4      	cbz	r4, 80158c6 <__gethex+0x15a>
 801588c:	9b00      	ldr	r3, [sp, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	bf14      	ite	ne
 8015892:	2700      	movne	r7, #0
 8015894:	2706      	moveq	r7, #6
 8015896:	4638      	mov	r0, r7
 8015898:	b009      	add	sp, #36	; 0x24
 801589a:	ecbd 8b02 	vpop	{d8}
 801589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a2:	463e      	mov	r6, r7
 80158a4:	4625      	mov	r5, r4
 80158a6:	2401      	movs	r4, #1
 80158a8:	e7ca      	b.n	8015840 <__gethex+0xd4>
 80158aa:	f04f 0900 	mov.w	r9, #0
 80158ae:	1cb1      	adds	r1, r6, #2
 80158b0:	e7d3      	b.n	801585a <__gethex+0xee>
 80158b2:	f04f 0901 	mov.w	r9, #1
 80158b6:	e7fa      	b.n	80158ae <__gethex+0x142>
 80158b8:	230a      	movs	r3, #10
 80158ba:	fb03 0202 	mla	r2, r3, r2, r0
 80158be:	3a10      	subs	r2, #16
 80158c0:	e7d4      	b.n	801586c <__gethex+0x100>
 80158c2:	4631      	mov	r1, r6
 80158c4:	e7df      	b.n	8015886 <__gethex+0x11a>
 80158c6:	1bf3      	subs	r3, r6, r7
 80158c8:	3b01      	subs	r3, #1
 80158ca:	4621      	mov	r1, r4
 80158cc:	2b07      	cmp	r3, #7
 80158ce:	dc0b      	bgt.n	80158e8 <__gethex+0x17c>
 80158d0:	ee18 0a10 	vmov	r0, s16
 80158d4:	f000 fabe 	bl	8015e54 <_Balloc>
 80158d8:	4604      	mov	r4, r0
 80158da:	b940      	cbnz	r0, 80158ee <__gethex+0x182>
 80158dc:	4b5d      	ldr	r3, [pc, #372]	; (8015a54 <__gethex+0x2e8>)
 80158de:	4602      	mov	r2, r0
 80158e0:	21de      	movs	r1, #222	; 0xde
 80158e2:	485d      	ldr	r0, [pc, #372]	; (8015a58 <__gethex+0x2ec>)
 80158e4:	f001 fd48 	bl	8017378 <__assert_func>
 80158e8:	3101      	adds	r1, #1
 80158ea:	105b      	asrs	r3, r3, #1
 80158ec:	e7ee      	b.n	80158cc <__gethex+0x160>
 80158ee:	f100 0914 	add.w	r9, r0, #20
 80158f2:	f04f 0b00 	mov.w	fp, #0
 80158f6:	f1ca 0301 	rsb	r3, sl, #1
 80158fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80158fe:	f8cd b000 	str.w	fp, [sp]
 8015902:	9306      	str	r3, [sp, #24]
 8015904:	42b7      	cmp	r7, r6
 8015906:	d340      	bcc.n	801598a <__gethex+0x21e>
 8015908:	9802      	ldr	r0, [sp, #8]
 801590a:	9b00      	ldr	r3, [sp, #0]
 801590c:	f840 3b04 	str.w	r3, [r0], #4
 8015910:	eba0 0009 	sub.w	r0, r0, r9
 8015914:	1080      	asrs	r0, r0, #2
 8015916:	0146      	lsls	r6, r0, #5
 8015918:	6120      	str	r0, [r4, #16]
 801591a:	4618      	mov	r0, r3
 801591c:	f000 fb8c 	bl	8016038 <__hi0bits>
 8015920:	1a30      	subs	r0, r6, r0
 8015922:	f8d8 6000 	ldr.w	r6, [r8]
 8015926:	42b0      	cmp	r0, r6
 8015928:	dd63      	ble.n	80159f2 <__gethex+0x286>
 801592a:	1b87      	subs	r7, r0, r6
 801592c:	4639      	mov	r1, r7
 801592e:	4620      	mov	r0, r4
 8015930:	f000 ff30 	bl	8016794 <__any_on>
 8015934:	4682      	mov	sl, r0
 8015936:	b1a8      	cbz	r0, 8015964 <__gethex+0x1f8>
 8015938:	1e7b      	subs	r3, r7, #1
 801593a:	1159      	asrs	r1, r3, #5
 801593c:	f003 021f 	and.w	r2, r3, #31
 8015940:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015944:	f04f 0a01 	mov.w	sl, #1
 8015948:	fa0a f202 	lsl.w	r2, sl, r2
 801594c:	420a      	tst	r2, r1
 801594e:	d009      	beq.n	8015964 <__gethex+0x1f8>
 8015950:	4553      	cmp	r3, sl
 8015952:	dd05      	ble.n	8015960 <__gethex+0x1f4>
 8015954:	1eb9      	subs	r1, r7, #2
 8015956:	4620      	mov	r0, r4
 8015958:	f000 ff1c 	bl	8016794 <__any_on>
 801595c:	2800      	cmp	r0, #0
 801595e:	d145      	bne.n	80159ec <__gethex+0x280>
 8015960:	f04f 0a02 	mov.w	sl, #2
 8015964:	4639      	mov	r1, r7
 8015966:	4620      	mov	r0, r4
 8015968:	f7ff fe98 	bl	801569c <rshift>
 801596c:	443d      	add	r5, r7
 801596e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015972:	42ab      	cmp	r3, r5
 8015974:	da4c      	bge.n	8015a10 <__gethex+0x2a4>
 8015976:	ee18 0a10 	vmov	r0, s16
 801597a:	4621      	mov	r1, r4
 801597c:	f000 faaa 	bl	8015ed4 <_Bfree>
 8015980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015982:	2300      	movs	r3, #0
 8015984:	6013      	str	r3, [r2, #0]
 8015986:	27a3      	movs	r7, #163	; 0xa3
 8015988:	e785      	b.n	8015896 <__gethex+0x12a>
 801598a:	1e73      	subs	r3, r6, #1
 801598c:	9a05      	ldr	r2, [sp, #20]
 801598e:	9303      	str	r3, [sp, #12]
 8015990:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015994:	4293      	cmp	r3, r2
 8015996:	d019      	beq.n	80159cc <__gethex+0x260>
 8015998:	f1bb 0f20 	cmp.w	fp, #32
 801599c:	d107      	bne.n	80159ae <__gethex+0x242>
 801599e:	9b02      	ldr	r3, [sp, #8]
 80159a0:	9a00      	ldr	r2, [sp, #0]
 80159a2:	f843 2b04 	str.w	r2, [r3], #4
 80159a6:	9302      	str	r3, [sp, #8]
 80159a8:	2300      	movs	r3, #0
 80159aa:	9300      	str	r3, [sp, #0]
 80159ac:	469b      	mov	fp, r3
 80159ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80159b2:	f7ff fec5 	bl	8015740 <__hexdig_fun>
 80159b6:	9b00      	ldr	r3, [sp, #0]
 80159b8:	f000 000f 	and.w	r0, r0, #15
 80159bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80159c0:	4303      	orrs	r3, r0
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	f10b 0b04 	add.w	fp, fp, #4
 80159c8:	9b03      	ldr	r3, [sp, #12]
 80159ca:	e00d      	b.n	80159e8 <__gethex+0x27c>
 80159cc:	9b03      	ldr	r3, [sp, #12]
 80159ce:	9a06      	ldr	r2, [sp, #24]
 80159d0:	4413      	add	r3, r2
 80159d2:	42bb      	cmp	r3, r7
 80159d4:	d3e0      	bcc.n	8015998 <__gethex+0x22c>
 80159d6:	4618      	mov	r0, r3
 80159d8:	9901      	ldr	r1, [sp, #4]
 80159da:	9307      	str	r3, [sp, #28]
 80159dc:	4652      	mov	r2, sl
 80159de:	f001 fbfb 	bl	80171d8 <strncmp>
 80159e2:	9b07      	ldr	r3, [sp, #28]
 80159e4:	2800      	cmp	r0, #0
 80159e6:	d1d7      	bne.n	8015998 <__gethex+0x22c>
 80159e8:	461e      	mov	r6, r3
 80159ea:	e78b      	b.n	8015904 <__gethex+0x198>
 80159ec:	f04f 0a03 	mov.w	sl, #3
 80159f0:	e7b8      	b.n	8015964 <__gethex+0x1f8>
 80159f2:	da0a      	bge.n	8015a0a <__gethex+0x29e>
 80159f4:	1a37      	subs	r7, r6, r0
 80159f6:	4621      	mov	r1, r4
 80159f8:	ee18 0a10 	vmov	r0, s16
 80159fc:	463a      	mov	r2, r7
 80159fe:	f000 fc85 	bl	801630c <__lshift>
 8015a02:	1bed      	subs	r5, r5, r7
 8015a04:	4604      	mov	r4, r0
 8015a06:	f100 0914 	add.w	r9, r0, #20
 8015a0a:	f04f 0a00 	mov.w	sl, #0
 8015a0e:	e7ae      	b.n	801596e <__gethex+0x202>
 8015a10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015a14:	42a8      	cmp	r0, r5
 8015a16:	dd72      	ble.n	8015afe <__gethex+0x392>
 8015a18:	1b45      	subs	r5, r0, r5
 8015a1a:	42ae      	cmp	r6, r5
 8015a1c:	dc36      	bgt.n	8015a8c <__gethex+0x320>
 8015a1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a22:	2b02      	cmp	r3, #2
 8015a24:	d02a      	beq.n	8015a7c <__gethex+0x310>
 8015a26:	2b03      	cmp	r3, #3
 8015a28:	d02c      	beq.n	8015a84 <__gethex+0x318>
 8015a2a:	2b01      	cmp	r3, #1
 8015a2c:	d11c      	bne.n	8015a68 <__gethex+0x2fc>
 8015a2e:	42ae      	cmp	r6, r5
 8015a30:	d11a      	bne.n	8015a68 <__gethex+0x2fc>
 8015a32:	2e01      	cmp	r6, #1
 8015a34:	d112      	bne.n	8015a5c <__gethex+0x2f0>
 8015a36:	9a04      	ldr	r2, [sp, #16]
 8015a38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a3c:	6013      	str	r3, [r2, #0]
 8015a3e:	2301      	movs	r3, #1
 8015a40:	6123      	str	r3, [r4, #16]
 8015a42:	f8c9 3000 	str.w	r3, [r9]
 8015a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a48:	2762      	movs	r7, #98	; 0x62
 8015a4a:	601c      	str	r4, [r3, #0]
 8015a4c:	e723      	b.n	8015896 <__gethex+0x12a>
 8015a4e:	bf00      	nop
 8015a50:	0801d7f8 	.word	0x0801d7f8
 8015a54:	0801d780 	.word	0x0801d780
 8015a58:	0801d791 	.word	0x0801d791
 8015a5c:	1e71      	subs	r1, r6, #1
 8015a5e:	4620      	mov	r0, r4
 8015a60:	f000 fe98 	bl	8016794 <__any_on>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d1e6      	bne.n	8015a36 <__gethex+0x2ca>
 8015a68:	ee18 0a10 	vmov	r0, s16
 8015a6c:	4621      	mov	r1, r4
 8015a6e:	f000 fa31 	bl	8015ed4 <_Bfree>
 8015a72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a74:	2300      	movs	r3, #0
 8015a76:	6013      	str	r3, [r2, #0]
 8015a78:	2750      	movs	r7, #80	; 0x50
 8015a7a:	e70c      	b.n	8015896 <__gethex+0x12a>
 8015a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d1f2      	bne.n	8015a68 <__gethex+0x2fc>
 8015a82:	e7d8      	b.n	8015a36 <__gethex+0x2ca>
 8015a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d1d5      	bne.n	8015a36 <__gethex+0x2ca>
 8015a8a:	e7ed      	b.n	8015a68 <__gethex+0x2fc>
 8015a8c:	1e6f      	subs	r7, r5, #1
 8015a8e:	f1ba 0f00 	cmp.w	sl, #0
 8015a92:	d131      	bne.n	8015af8 <__gethex+0x38c>
 8015a94:	b127      	cbz	r7, 8015aa0 <__gethex+0x334>
 8015a96:	4639      	mov	r1, r7
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f000 fe7b 	bl	8016794 <__any_on>
 8015a9e:	4682      	mov	sl, r0
 8015aa0:	117b      	asrs	r3, r7, #5
 8015aa2:	2101      	movs	r1, #1
 8015aa4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015aa8:	f007 071f 	and.w	r7, r7, #31
 8015aac:	fa01 f707 	lsl.w	r7, r1, r7
 8015ab0:	421f      	tst	r7, r3
 8015ab2:	4629      	mov	r1, r5
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	bf18      	it	ne
 8015ab8:	f04a 0a02 	orrne.w	sl, sl, #2
 8015abc:	1b76      	subs	r6, r6, r5
 8015abe:	f7ff fded 	bl	801569c <rshift>
 8015ac2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015ac6:	2702      	movs	r7, #2
 8015ac8:	f1ba 0f00 	cmp.w	sl, #0
 8015acc:	d048      	beq.n	8015b60 <__gethex+0x3f4>
 8015ace:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	d015      	beq.n	8015b02 <__gethex+0x396>
 8015ad6:	2b03      	cmp	r3, #3
 8015ad8:	d017      	beq.n	8015b0a <__gethex+0x39e>
 8015ada:	2b01      	cmp	r3, #1
 8015adc:	d109      	bne.n	8015af2 <__gethex+0x386>
 8015ade:	f01a 0f02 	tst.w	sl, #2
 8015ae2:	d006      	beq.n	8015af2 <__gethex+0x386>
 8015ae4:	f8d9 0000 	ldr.w	r0, [r9]
 8015ae8:	ea4a 0a00 	orr.w	sl, sl, r0
 8015aec:	f01a 0f01 	tst.w	sl, #1
 8015af0:	d10e      	bne.n	8015b10 <__gethex+0x3a4>
 8015af2:	f047 0710 	orr.w	r7, r7, #16
 8015af6:	e033      	b.n	8015b60 <__gethex+0x3f4>
 8015af8:	f04f 0a01 	mov.w	sl, #1
 8015afc:	e7d0      	b.n	8015aa0 <__gethex+0x334>
 8015afe:	2701      	movs	r7, #1
 8015b00:	e7e2      	b.n	8015ac8 <__gethex+0x35c>
 8015b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b04:	f1c3 0301 	rsb	r3, r3, #1
 8015b08:	9315      	str	r3, [sp, #84]	; 0x54
 8015b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d0f0      	beq.n	8015af2 <__gethex+0x386>
 8015b10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015b14:	f104 0314 	add.w	r3, r4, #20
 8015b18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015b1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015b20:	f04f 0c00 	mov.w	ip, #0
 8015b24:	4618      	mov	r0, r3
 8015b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b2a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8015b2e:	d01c      	beq.n	8015b6a <__gethex+0x3fe>
 8015b30:	3201      	adds	r2, #1
 8015b32:	6002      	str	r2, [r0, #0]
 8015b34:	2f02      	cmp	r7, #2
 8015b36:	f104 0314 	add.w	r3, r4, #20
 8015b3a:	d13f      	bne.n	8015bbc <__gethex+0x450>
 8015b3c:	f8d8 2000 	ldr.w	r2, [r8]
 8015b40:	3a01      	subs	r2, #1
 8015b42:	42b2      	cmp	r2, r6
 8015b44:	d10a      	bne.n	8015b5c <__gethex+0x3f0>
 8015b46:	1171      	asrs	r1, r6, #5
 8015b48:	2201      	movs	r2, #1
 8015b4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015b4e:	f006 061f 	and.w	r6, r6, #31
 8015b52:	fa02 f606 	lsl.w	r6, r2, r6
 8015b56:	421e      	tst	r6, r3
 8015b58:	bf18      	it	ne
 8015b5a:	4617      	movne	r7, r2
 8015b5c:	f047 0720 	orr.w	r7, r7, #32
 8015b60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b62:	601c      	str	r4, [r3, #0]
 8015b64:	9b04      	ldr	r3, [sp, #16]
 8015b66:	601d      	str	r5, [r3, #0]
 8015b68:	e695      	b.n	8015896 <__gethex+0x12a>
 8015b6a:	4299      	cmp	r1, r3
 8015b6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015b70:	d8d8      	bhi.n	8015b24 <__gethex+0x3b8>
 8015b72:	68a3      	ldr	r3, [r4, #8]
 8015b74:	459b      	cmp	fp, r3
 8015b76:	db19      	blt.n	8015bac <__gethex+0x440>
 8015b78:	6861      	ldr	r1, [r4, #4]
 8015b7a:	ee18 0a10 	vmov	r0, s16
 8015b7e:	3101      	adds	r1, #1
 8015b80:	f000 f968 	bl	8015e54 <_Balloc>
 8015b84:	4681      	mov	r9, r0
 8015b86:	b918      	cbnz	r0, 8015b90 <__gethex+0x424>
 8015b88:	4b1a      	ldr	r3, [pc, #104]	; (8015bf4 <__gethex+0x488>)
 8015b8a:	4602      	mov	r2, r0
 8015b8c:	2184      	movs	r1, #132	; 0x84
 8015b8e:	e6a8      	b.n	80158e2 <__gethex+0x176>
 8015b90:	6922      	ldr	r2, [r4, #16]
 8015b92:	3202      	adds	r2, #2
 8015b94:	f104 010c 	add.w	r1, r4, #12
 8015b98:	0092      	lsls	r2, r2, #2
 8015b9a:	300c      	adds	r0, #12
 8015b9c:	f7fd fcd2 	bl	8013544 <memcpy>
 8015ba0:	4621      	mov	r1, r4
 8015ba2:	ee18 0a10 	vmov	r0, s16
 8015ba6:	f000 f995 	bl	8015ed4 <_Bfree>
 8015baa:	464c      	mov	r4, r9
 8015bac:	6923      	ldr	r3, [r4, #16]
 8015bae:	1c5a      	adds	r2, r3, #1
 8015bb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015bb4:	6122      	str	r2, [r4, #16]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	615a      	str	r2, [r3, #20]
 8015bba:	e7bb      	b.n	8015b34 <__gethex+0x3c8>
 8015bbc:	6922      	ldr	r2, [r4, #16]
 8015bbe:	455a      	cmp	r2, fp
 8015bc0:	dd0b      	ble.n	8015bda <__gethex+0x46e>
 8015bc2:	2101      	movs	r1, #1
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f7ff fd69 	bl	801569c <rshift>
 8015bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015bce:	3501      	adds	r5, #1
 8015bd0:	42ab      	cmp	r3, r5
 8015bd2:	f6ff aed0 	blt.w	8015976 <__gethex+0x20a>
 8015bd6:	2701      	movs	r7, #1
 8015bd8:	e7c0      	b.n	8015b5c <__gethex+0x3f0>
 8015bda:	f016 061f 	ands.w	r6, r6, #31
 8015bde:	d0fa      	beq.n	8015bd6 <__gethex+0x46a>
 8015be0:	4453      	add	r3, sl
 8015be2:	f1c6 0620 	rsb	r6, r6, #32
 8015be6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015bea:	f000 fa25 	bl	8016038 <__hi0bits>
 8015bee:	42b0      	cmp	r0, r6
 8015bf0:	dbe7      	blt.n	8015bc2 <__gethex+0x456>
 8015bf2:	e7f0      	b.n	8015bd6 <__gethex+0x46a>
 8015bf4:	0801d780 	.word	0x0801d780

08015bf8 <L_shift>:
 8015bf8:	f1c2 0208 	rsb	r2, r2, #8
 8015bfc:	0092      	lsls	r2, r2, #2
 8015bfe:	b570      	push	{r4, r5, r6, lr}
 8015c00:	f1c2 0620 	rsb	r6, r2, #32
 8015c04:	6843      	ldr	r3, [r0, #4]
 8015c06:	6804      	ldr	r4, [r0, #0]
 8015c08:	fa03 f506 	lsl.w	r5, r3, r6
 8015c0c:	432c      	orrs	r4, r5
 8015c0e:	40d3      	lsrs	r3, r2
 8015c10:	6004      	str	r4, [r0, #0]
 8015c12:	f840 3f04 	str.w	r3, [r0, #4]!
 8015c16:	4288      	cmp	r0, r1
 8015c18:	d3f4      	bcc.n	8015c04 <L_shift+0xc>
 8015c1a:	bd70      	pop	{r4, r5, r6, pc}

08015c1c <__match>:
 8015c1c:	b530      	push	{r4, r5, lr}
 8015c1e:	6803      	ldr	r3, [r0, #0]
 8015c20:	3301      	adds	r3, #1
 8015c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c26:	b914      	cbnz	r4, 8015c2e <__match+0x12>
 8015c28:	6003      	str	r3, [r0, #0]
 8015c2a:	2001      	movs	r0, #1
 8015c2c:	bd30      	pop	{r4, r5, pc}
 8015c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015c36:	2d19      	cmp	r5, #25
 8015c38:	bf98      	it	ls
 8015c3a:	3220      	addls	r2, #32
 8015c3c:	42a2      	cmp	r2, r4
 8015c3e:	d0f0      	beq.n	8015c22 <__match+0x6>
 8015c40:	2000      	movs	r0, #0
 8015c42:	e7f3      	b.n	8015c2c <__match+0x10>

08015c44 <__hexnan>:
 8015c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c48:	680b      	ldr	r3, [r1, #0]
 8015c4a:	115e      	asrs	r6, r3, #5
 8015c4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015c50:	f013 031f 	ands.w	r3, r3, #31
 8015c54:	b087      	sub	sp, #28
 8015c56:	bf18      	it	ne
 8015c58:	3604      	addne	r6, #4
 8015c5a:	2500      	movs	r5, #0
 8015c5c:	1f37      	subs	r7, r6, #4
 8015c5e:	4690      	mov	r8, r2
 8015c60:	6802      	ldr	r2, [r0, #0]
 8015c62:	9301      	str	r3, [sp, #4]
 8015c64:	4682      	mov	sl, r0
 8015c66:	f846 5c04 	str.w	r5, [r6, #-4]
 8015c6a:	46b9      	mov	r9, r7
 8015c6c:	463c      	mov	r4, r7
 8015c6e:	9502      	str	r5, [sp, #8]
 8015c70:	46ab      	mov	fp, r5
 8015c72:	7851      	ldrb	r1, [r2, #1]
 8015c74:	1c53      	adds	r3, r2, #1
 8015c76:	9303      	str	r3, [sp, #12]
 8015c78:	b341      	cbz	r1, 8015ccc <__hexnan+0x88>
 8015c7a:	4608      	mov	r0, r1
 8015c7c:	9205      	str	r2, [sp, #20]
 8015c7e:	9104      	str	r1, [sp, #16]
 8015c80:	f7ff fd5e 	bl	8015740 <__hexdig_fun>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d14f      	bne.n	8015d28 <__hexnan+0xe4>
 8015c88:	9904      	ldr	r1, [sp, #16]
 8015c8a:	9a05      	ldr	r2, [sp, #20]
 8015c8c:	2920      	cmp	r1, #32
 8015c8e:	d818      	bhi.n	8015cc2 <__hexnan+0x7e>
 8015c90:	9b02      	ldr	r3, [sp, #8]
 8015c92:	459b      	cmp	fp, r3
 8015c94:	dd13      	ble.n	8015cbe <__hexnan+0x7a>
 8015c96:	454c      	cmp	r4, r9
 8015c98:	d206      	bcs.n	8015ca8 <__hexnan+0x64>
 8015c9a:	2d07      	cmp	r5, #7
 8015c9c:	dc04      	bgt.n	8015ca8 <__hexnan+0x64>
 8015c9e:	462a      	mov	r2, r5
 8015ca0:	4649      	mov	r1, r9
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f7ff ffa8 	bl	8015bf8 <L_shift>
 8015ca8:	4544      	cmp	r4, r8
 8015caa:	d950      	bls.n	8015d4e <__hexnan+0x10a>
 8015cac:	2300      	movs	r3, #0
 8015cae:	f1a4 0904 	sub.w	r9, r4, #4
 8015cb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8015cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8015cba:	464c      	mov	r4, r9
 8015cbc:	461d      	mov	r5, r3
 8015cbe:	9a03      	ldr	r2, [sp, #12]
 8015cc0:	e7d7      	b.n	8015c72 <__hexnan+0x2e>
 8015cc2:	2929      	cmp	r1, #41	; 0x29
 8015cc4:	d156      	bne.n	8015d74 <__hexnan+0x130>
 8015cc6:	3202      	adds	r2, #2
 8015cc8:	f8ca 2000 	str.w	r2, [sl]
 8015ccc:	f1bb 0f00 	cmp.w	fp, #0
 8015cd0:	d050      	beq.n	8015d74 <__hexnan+0x130>
 8015cd2:	454c      	cmp	r4, r9
 8015cd4:	d206      	bcs.n	8015ce4 <__hexnan+0xa0>
 8015cd6:	2d07      	cmp	r5, #7
 8015cd8:	dc04      	bgt.n	8015ce4 <__hexnan+0xa0>
 8015cda:	462a      	mov	r2, r5
 8015cdc:	4649      	mov	r1, r9
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f7ff ff8a 	bl	8015bf8 <L_shift>
 8015ce4:	4544      	cmp	r4, r8
 8015ce6:	d934      	bls.n	8015d52 <__hexnan+0x10e>
 8015ce8:	f1a8 0204 	sub.w	r2, r8, #4
 8015cec:	4623      	mov	r3, r4
 8015cee:	f853 1b04 	ldr.w	r1, [r3], #4
 8015cf2:	f842 1f04 	str.w	r1, [r2, #4]!
 8015cf6:	429f      	cmp	r7, r3
 8015cf8:	d2f9      	bcs.n	8015cee <__hexnan+0xaa>
 8015cfa:	1b3b      	subs	r3, r7, r4
 8015cfc:	f023 0303 	bic.w	r3, r3, #3
 8015d00:	3304      	adds	r3, #4
 8015d02:	3401      	adds	r4, #1
 8015d04:	3e03      	subs	r6, #3
 8015d06:	42b4      	cmp	r4, r6
 8015d08:	bf88      	it	hi
 8015d0a:	2304      	movhi	r3, #4
 8015d0c:	4443      	add	r3, r8
 8015d0e:	2200      	movs	r2, #0
 8015d10:	f843 2b04 	str.w	r2, [r3], #4
 8015d14:	429f      	cmp	r7, r3
 8015d16:	d2fb      	bcs.n	8015d10 <__hexnan+0xcc>
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	b91b      	cbnz	r3, 8015d24 <__hexnan+0xe0>
 8015d1c:	4547      	cmp	r7, r8
 8015d1e:	d127      	bne.n	8015d70 <__hexnan+0x12c>
 8015d20:	2301      	movs	r3, #1
 8015d22:	603b      	str	r3, [r7, #0]
 8015d24:	2005      	movs	r0, #5
 8015d26:	e026      	b.n	8015d76 <__hexnan+0x132>
 8015d28:	3501      	adds	r5, #1
 8015d2a:	2d08      	cmp	r5, #8
 8015d2c:	f10b 0b01 	add.w	fp, fp, #1
 8015d30:	dd06      	ble.n	8015d40 <__hexnan+0xfc>
 8015d32:	4544      	cmp	r4, r8
 8015d34:	d9c3      	bls.n	8015cbe <__hexnan+0x7a>
 8015d36:	2300      	movs	r3, #0
 8015d38:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d3c:	2501      	movs	r5, #1
 8015d3e:	3c04      	subs	r4, #4
 8015d40:	6822      	ldr	r2, [r4, #0]
 8015d42:	f000 000f 	and.w	r0, r0, #15
 8015d46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015d4a:	6022      	str	r2, [r4, #0]
 8015d4c:	e7b7      	b.n	8015cbe <__hexnan+0x7a>
 8015d4e:	2508      	movs	r5, #8
 8015d50:	e7b5      	b.n	8015cbe <__hexnan+0x7a>
 8015d52:	9b01      	ldr	r3, [sp, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d0df      	beq.n	8015d18 <__hexnan+0xd4>
 8015d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d5c:	f1c3 0320 	rsb	r3, r3, #32
 8015d60:	fa22 f303 	lsr.w	r3, r2, r3
 8015d64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015d68:	401a      	ands	r2, r3
 8015d6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8015d6e:	e7d3      	b.n	8015d18 <__hexnan+0xd4>
 8015d70:	3f04      	subs	r7, #4
 8015d72:	e7d1      	b.n	8015d18 <__hexnan+0xd4>
 8015d74:	2004      	movs	r0, #4
 8015d76:	b007      	add	sp, #28
 8015d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d7c <_gettimeofday_r>:
 8015d7c:	b538      	push	{r3, r4, r5, lr}
 8015d7e:	4d07      	ldr	r5, [pc, #28]	; (8015d9c <_gettimeofday_r+0x20>)
 8015d80:	2300      	movs	r3, #0
 8015d82:	4604      	mov	r4, r0
 8015d84:	4608      	mov	r0, r1
 8015d86:	4611      	mov	r1, r2
 8015d88:	602b      	str	r3, [r5, #0]
 8015d8a:	f001 fb67 	bl	801745c <_gettimeofday>
 8015d8e:	1c43      	adds	r3, r0, #1
 8015d90:	d102      	bne.n	8015d98 <_gettimeofday_r+0x1c>
 8015d92:	682b      	ldr	r3, [r5, #0]
 8015d94:	b103      	cbz	r3, 8015d98 <_gettimeofday_r+0x1c>
 8015d96:	6023      	str	r3, [r4, #0]
 8015d98:	bd38      	pop	{r3, r4, r5, pc}
 8015d9a:	bf00      	nop
 8015d9c:	20003e84 	.word	0x20003e84

08015da0 <_isatty_r>:
 8015da0:	b538      	push	{r3, r4, r5, lr}
 8015da2:	4d06      	ldr	r5, [pc, #24]	; (8015dbc <_isatty_r+0x1c>)
 8015da4:	2300      	movs	r3, #0
 8015da6:	4604      	mov	r4, r0
 8015da8:	4608      	mov	r0, r1
 8015daa:	602b      	str	r3, [r5, #0]
 8015dac:	f7eb fd2b 	bl	8001806 <_isatty>
 8015db0:	1c43      	adds	r3, r0, #1
 8015db2:	d102      	bne.n	8015dba <_isatty_r+0x1a>
 8015db4:	682b      	ldr	r3, [r5, #0]
 8015db6:	b103      	cbz	r3, 8015dba <_isatty_r+0x1a>
 8015db8:	6023      	str	r3, [r4, #0]
 8015dba:	bd38      	pop	{r3, r4, r5, pc}
 8015dbc:	20003e84 	.word	0x20003e84

08015dc0 <_lseek_r>:
 8015dc0:	b538      	push	{r3, r4, r5, lr}
 8015dc2:	4d07      	ldr	r5, [pc, #28]	; (8015de0 <_lseek_r+0x20>)
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	4608      	mov	r0, r1
 8015dc8:	4611      	mov	r1, r2
 8015dca:	2200      	movs	r2, #0
 8015dcc:	602a      	str	r2, [r5, #0]
 8015dce:	461a      	mov	r2, r3
 8015dd0:	f7eb fd24 	bl	800181c <_lseek>
 8015dd4:	1c43      	adds	r3, r0, #1
 8015dd6:	d102      	bne.n	8015dde <_lseek_r+0x1e>
 8015dd8:	682b      	ldr	r3, [r5, #0]
 8015dda:	b103      	cbz	r3, 8015dde <_lseek_r+0x1e>
 8015ddc:	6023      	str	r3, [r4, #0]
 8015dde:	bd38      	pop	{r3, r4, r5, pc}
 8015de0:	20003e84 	.word	0x20003e84

08015de4 <__ascii_mbtowc>:
 8015de4:	b082      	sub	sp, #8
 8015de6:	b901      	cbnz	r1, 8015dea <__ascii_mbtowc+0x6>
 8015de8:	a901      	add	r1, sp, #4
 8015dea:	b142      	cbz	r2, 8015dfe <__ascii_mbtowc+0x1a>
 8015dec:	b14b      	cbz	r3, 8015e02 <__ascii_mbtowc+0x1e>
 8015dee:	7813      	ldrb	r3, [r2, #0]
 8015df0:	600b      	str	r3, [r1, #0]
 8015df2:	7812      	ldrb	r2, [r2, #0]
 8015df4:	1e10      	subs	r0, r2, #0
 8015df6:	bf18      	it	ne
 8015df8:	2001      	movne	r0, #1
 8015dfa:	b002      	add	sp, #8
 8015dfc:	4770      	bx	lr
 8015dfe:	4610      	mov	r0, r2
 8015e00:	e7fb      	b.n	8015dfa <__ascii_mbtowc+0x16>
 8015e02:	f06f 0001 	mvn.w	r0, #1
 8015e06:	e7f8      	b.n	8015dfa <__ascii_mbtowc+0x16>

08015e08 <memmove>:
 8015e08:	4288      	cmp	r0, r1
 8015e0a:	b510      	push	{r4, lr}
 8015e0c:	eb01 0402 	add.w	r4, r1, r2
 8015e10:	d902      	bls.n	8015e18 <memmove+0x10>
 8015e12:	4284      	cmp	r4, r0
 8015e14:	4623      	mov	r3, r4
 8015e16:	d807      	bhi.n	8015e28 <memmove+0x20>
 8015e18:	1e43      	subs	r3, r0, #1
 8015e1a:	42a1      	cmp	r1, r4
 8015e1c:	d008      	beq.n	8015e30 <memmove+0x28>
 8015e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015e26:	e7f8      	b.n	8015e1a <memmove+0x12>
 8015e28:	4402      	add	r2, r0
 8015e2a:	4601      	mov	r1, r0
 8015e2c:	428a      	cmp	r2, r1
 8015e2e:	d100      	bne.n	8015e32 <memmove+0x2a>
 8015e30:	bd10      	pop	{r4, pc}
 8015e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e3a:	e7f7      	b.n	8015e2c <memmove+0x24>

08015e3c <__malloc_lock>:
 8015e3c:	4801      	ldr	r0, [pc, #4]	; (8015e44 <__malloc_lock+0x8>)
 8015e3e:	f7fd bafa 	b.w	8013436 <__retarget_lock_acquire_recursive>
 8015e42:	bf00      	nop
 8015e44:	20003e78 	.word	0x20003e78

08015e48 <__malloc_unlock>:
 8015e48:	4801      	ldr	r0, [pc, #4]	; (8015e50 <__malloc_unlock+0x8>)
 8015e4a:	f7fd baf5 	b.w	8013438 <__retarget_lock_release_recursive>
 8015e4e:	bf00      	nop
 8015e50:	20003e78 	.word	0x20003e78

08015e54 <_Balloc>:
 8015e54:	b570      	push	{r4, r5, r6, lr}
 8015e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015e58:	4604      	mov	r4, r0
 8015e5a:	460d      	mov	r5, r1
 8015e5c:	b976      	cbnz	r6, 8015e7c <_Balloc+0x28>
 8015e5e:	2010      	movs	r0, #16
 8015e60:	f7fd fb50 	bl	8013504 <malloc>
 8015e64:	4602      	mov	r2, r0
 8015e66:	6260      	str	r0, [r4, #36]	; 0x24
 8015e68:	b920      	cbnz	r0, 8015e74 <_Balloc+0x20>
 8015e6a:	4b18      	ldr	r3, [pc, #96]	; (8015ecc <_Balloc+0x78>)
 8015e6c:	4818      	ldr	r0, [pc, #96]	; (8015ed0 <_Balloc+0x7c>)
 8015e6e:	2166      	movs	r1, #102	; 0x66
 8015e70:	f001 fa82 	bl	8017378 <__assert_func>
 8015e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e78:	6006      	str	r6, [r0, #0]
 8015e7a:	60c6      	str	r6, [r0, #12]
 8015e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015e7e:	68f3      	ldr	r3, [r6, #12]
 8015e80:	b183      	cbz	r3, 8015ea4 <_Balloc+0x50>
 8015e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e84:	68db      	ldr	r3, [r3, #12]
 8015e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015e8a:	b9b8      	cbnz	r0, 8015ebc <_Balloc+0x68>
 8015e8c:	2101      	movs	r1, #1
 8015e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8015e92:	1d72      	adds	r2, r6, #5
 8015e94:	0092      	lsls	r2, r2, #2
 8015e96:	4620      	mov	r0, r4
 8015e98:	f7fd fb6a 	bl	8013570 <_calloc_r>
 8015e9c:	b160      	cbz	r0, 8015eb8 <_Balloc+0x64>
 8015e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015ea2:	e00e      	b.n	8015ec2 <_Balloc+0x6e>
 8015ea4:	2221      	movs	r2, #33	; 0x21
 8015ea6:	2104      	movs	r1, #4
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f7fd fb61 	bl	8013570 <_calloc_r>
 8015eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015eb0:	60f0      	str	r0, [r6, #12]
 8015eb2:	68db      	ldr	r3, [r3, #12]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d1e4      	bne.n	8015e82 <_Balloc+0x2e>
 8015eb8:	2000      	movs	r0, #0
 8015eba:	bd70      	pop	{r4, r5, r6, pc}
 8015ebc:	6802      	ldr	r2, [r0, #0]
 8015ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015ec8:	e7f7      	b.n	8015eba <_Balloc+0x66>
 8015eca:	bf00      	nop
 8015ecc:	0801d80c 	.word	0x0801d80c
 8015ed0:	0801d823 	.word	0x0801d823

08015ed4 <_Bfree>:
 8015ed4:	b570      	push	{r4, r5, r6, lr}
 8015ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ed8:	4605      	mov	r5, r0
 8015eda:	460c      	mov	r4, r1
 8015edc:	b976      	cbnz	r6, 8015efc <_Bfree+0x28>
 8015ede:	2010      	movs	r0, #16
 8015ee0:	f7fd fb10 	bl	8013504 <malloc>
 8015ee4:	4602      	mov	r2, r0
 8015ee6:	6268      	str	r0, [r5, #36]	; 0x24
 8015ee8:	b920      	cbnz	r0, 8015ef4 <_Bfree+0x20>
 8015eea:	4b09      	ldr	r3, [pc, #36]	; (8015f10 <_Bfree+0x3c>)
 8015eec:	4809      	ldr	r0, [pc, #36]	; (8015f14 <_Bfree+0x40>)
 8015eee:	218a      	movs	r1, #138	; 0x8a
 8015ef0:	f001 fa42 	bl	8017378 <__assert_func>
 8015ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ef8:	6006      	str	r6, [r0, #0]
 8015efa:	60c6      	str	r6, [r0, #12]
 8015efc:	b13c      	cbz	r4, 8015f0e <_Bfree+0x3a>
 8015efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015f00:	6862      	ldr	r2, [r4, #4]
 8015f02:	68db      	ldr	r3, [r3, #12]
 8015f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015f08:	6021      	str	r1, [r4, #0]
 8015f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}
 8015f10:	0801d80c 	.word	0x0801d80c
 8015f14:	0801d823 	.word	0x0801d823

08015f18 <__multadd>:
 8015f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1c:	690d      	ldr	r5, [r1, #16]
 8015f1e:	4607      	mov	r7, r0
 8015f20:	460c      	mov	r4, r1
 8015f22:	461e      	mov	r6, r3
 8015f24:	f101 0c14 	add.w	ip, r1, #20
 8015f28:	2000      	movs	r0, #0
 8015f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8015f2e:	b299      	uxth	r1, r3
 8015f30:	fb02 6101 	mla	r1, r2, r1, r6
 8015f34:	0c1e      	lsrs	r6, r3, #16
 8015f36:	0c0b      	lsrs	r3, r1, #16
 8015f38:	fb02 3306 	mla	r3, r2, r6, r3
 8015f3c:	b289      	uxth	r1, r1
 8015f3e:	3001      	adds	r0, #1
 8015f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015f44:	4285      	cmp	r5, r0
 8015f46:	f84c 1b04 	str.w	r1, [ip], #4
 8015f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015f4e:	dcec      	bgt.n	8015f2a <__multadd+0x12>
 8015f50:	b30e      	cbz	r6, 8015f96 <__multadd+0x7e>
 8015f52:	68a3      	ldr	r3, [r4, #8]
 8015f54:	42ab      	cmp	r3, r5
 8015f56:	dc19      	bgt.n	8015f8c <__multadd+0x74>
 8015f58:	6861      	ldr	r1, [r4, #4]
 8015f5a:	4638      	mov	r0, r7
 8015f5c:	3101      	adds	r1, #1
 8015f5e:	f7ff ff79 	bl	8015e54 <_Balloc>
 8015f62:	4680      	mov	r8, r0
 8015f64:	b928      	cbnz	r0, 8015f72 <__multadd+0x5a>
 8015f66:	4602      	mov	r2, r0
 8015f68:	4b0c      	ldr	r3, [pc, #48]	; (8015f9c <__multadd+0x84>)
 8015f6a:	480d      	ldr	r0, [pc, #52]	; (8015fa0 <__multadd+0x88>)
 8015f6c:	21b5      	movs	r1, #181	; 0xb5
 8015f6e:	f001 fa03 	bl	8017378 <__assert_func>
 8015f72:	6922      	ldr	r2, [r4, #16]
 8015f74:	3202      	adds	r2, #2
 8015f76:	f104 010c 	add.w	r1, r4, #12
 8015f7a:	0092      	lsls	r2, r2, #2
 8015f7c:	300c      	adds	r0, #12
 8015f7e:	f7fd fae1 	bl	8013544 <memcpy>
 8015f82:	4621      	mov	r1, r4
 8015f84:	4638      	mov	r0, r7
 8015f86:	f7ff ffa5 	bl	8015ed4 <_Bfree>
 8015f8a:	4644      	mov	r4, r8
 8015f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015f90:	3501      	adds	r5, #1
 8015f92:	615e      	str	r6, [r3, #20]
 8015f94:	6125      	str	r5, [r4, #16]
 8015f96:	4620      	mov	r0, r4
 8015f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f9c:	0801d780 	.word	0x0801d780
 8015fa0:	0801d823 	.word	0x0801d823

08015fa4 <__s2b>:
 8015fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fa8:	460c      	mov	r4, r1
 8015faa:	4615      	mov	r5, r2
 8015fac:	461f      	mov	r7, r3
 8015fae:	2209      	movs	r2, #9
 8015fb0:	3308      	adds	r3, #8
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8015fb8:	2100      	movs	r1, #0
 8015fba:	2201      	movs	r2, #1
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	db09      	blt.n	8015fd4 <__s2b+0x30>
 8015fc0:	4630      	mov	r0, r6
 8015fc2:	f7ff ff47 	bl	8015e54 <_Balloc>
 8015fc6:	b940      	cbnz	r0, 8015fda <__s2b+0x36>
 8015fc8:	4602      	mov	r2, r0
 8015fca:	4b19      	ldr	r3, [pc, #100]	; (8016030 <__s2b+0x8c>)
 8015fcc:	4819      	ldr	r0, [pc, #100]	; (8016034 <__s2b+0x90>)
 8015fce:	21ce      	movs	r1, #206	; 0xce
 8015fd0:	f001 f9d2 	bl	8017378 <__assert_func>
 8015fd4:	0052      	lsls	r2, r2, #1
 8015fd6:	3101      	adds	r1, #1
 8015fd8:	e7f0      	b.n	8015fbc <__s2b+0x18>
 8015fda:	9b08      	ldr	r3, [sp, #32]
 8015fdc:	6143      	str	r3, [r0, #20]
 8015fde:	2d09      	cmp	r5, #9
 8015fe0:	f04f 0301 	mov.w	r3, #1
 8015fe4:	6103      	str	r3, [r0, #16]
 8015fe6:	dd16      	ble.n	8016016 <__s2b+0x72>
 8015fe8:	f104 0909 	add.w	r9, r4, #9
 8015fec:	46c8      	mov	r8, r9
 8015fee:	442c      	add	r4, r5
 8015ff0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015ff4:	4601      	mov	r1, r0
 8015ff6:	3b30      	subs	r3, #48	; 0x30
 8015ff8:	220a      	movs	r2, #10
 8015ffa:	4630      	mov	r0, r6
 8015ffc:	f7ff ff8c 	bl	8015f18 <__multadd>
 8016000:	45a0      	cmp	r8, r4
 8016002:	d1f5      	bne.n	8015ff0 <__s2b+0x4c>
 8016004:	f1a5 0408 	sub.w	r4, r5, #8
 8016008:	444c      	add	r4, r9
 801600a:	1b2d      	subs	r5, r5, r4
 801600c:	1963      	adds	r3, r4, r5
 801600e:	42bb      	cmp	r3, r7
 8016010:	db04      	blt.n	801601c <__s2b+0x78>
 8016012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016016:	340a      	adds	r4, #10
 8016018:	2509      	movs	r5, #9
 801601a:	e7f6      	b.n	801600a <__s2b+0x66>
 801601c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016020:	4601      	mov	r1, r0
 8016022:	3b30      	subs	r3, #48	; 0x30
 8016024:	220a      	movs	r2, #10
 8016026:	4630      	mov	r0, r6
 8016028:	f7ff ff76 	bl	8015f18 <__multadd>
 801602c:	e7ee      	b.n	801600c <__s2b+0x68>
 801602e:	bf00      	nop
 8016030:	0801d780 	.word	0x0801d780
 8016034:	0801d823 	.word	0x0801d823

08016038 <__hi0bits>:
 8016038:	0c03      	lsrs	r3, r0, #16
 801603a:	041b      	lsls	r3, r3, #16
 801603c:	b9d3      	cbnz	r3, 8016074 <__hi0bits+0x3c>
 801603e:	0400      	lsls	r0, r0, #16
 8016040:	2310      	movs	r3, #16
 8016042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016046:	bf04      	itt	eq
 8016048:	0200      	lsleq	r0, r0, #8
 801604a:	3308      	addeq	r3, #8
 801604c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016050:	bf04      	itt	eq
 8016052:	0100      	lsleq	r0, r0, #4
 8016054:	3304      	addeq	r3, #4
 8016056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801605a:	bf04      	itt	eq
 801605c:	0080      	lsleq	r0, r0, #2
 801605e:	3302      	addeq	r3, #2
 8016060:	2800      	cmp	r0, #0
 8016062:	db05      	blt.n	8016070 <__hi0bits+0x38>
 8016064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016068:	f103 0301 	add.w	r3, r3, #1
 801606c:	bf08      	it	eq
 801606e:	2320      	moveq	r3, #32
 8016070:	4618      	mov	r0, r3
 8016072:	4770      	bx	lr
 8016074:	2300      	movs	r3, #0
 8016076:	e7e4      	b.n	8016042 <__hi0bits+0xa>

08016078 <__lo0bits>:
 8016078:	6803      	ldr	r3, [r0, #0]
 801607a:	f013 0207 	ands.w	r2, r3, #7
 801607e:	4601      	mov	r1, r0
 8016080:	d00b      	beq.n	801609a <__lo0bits+0x22>
 8016082:	07da      	lsls	r2, r3, #31
 8016084:	d423      	bmi.n	80160ce <__lo0bits+0x56>
 8016086:	0798      	lsls	r0, r3, #30
 8016088:	bf49      	itett	mi
 801608a:	085b      	lsrmi	r3, r3, #1
 801608c:	089b      	lsrpl	r3, r3, #2
 801608e:	2001      	movmi	r0, #1
 8016090:	600b      	strmi	r3, [r1, #0]
 8016092:	bf5c      	itt	pl
 8016094:	600b      	strpl	r3, [r1, #0]
 8016096:	2002      	movpl	r0, #2
 8016098:	4770      	bx	lr
 801609a:	b298      	uxth	r0, r3
 801609c:	b9a8      	cbnz	r0, 80160ca <__lo0bits+0x52>
 801609e:	0c1b      	lsrs	r3, r3, #16
 80160a0:	2010      	movs	r0, #16
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	b90a      	cbnz	r2, 80160aa <__lo0bits+0x32>
 80160a6:	3008      	adds	r0, #8
 80160a8:	0a1b      	lsrs	r3, r3, #8
 80160aa:	071a      	lsls	r2, r3, #28
 80160ac:	bf04      	itt	eq
 80160ae:	091b      	lsreq	r3, r3, #4
 80160b0:	3004      	addeq	r0, #4
 80160b2:	079a      	lsls	r2, r3, #30
 80160b4:	bf04      	itt	eq
 80160b6:	089b      	lsreq	r3, r3, #2
 80160b8:	3002      	addeq	r0, #2
 80160ba:	07da      	lsls	r2, r3, #31
 80160bc:	d403      	bmi.n	80160c6 <__lo0bits+0x4e>
 80160be:	085b      	lsrs	r3, r3, #1
 80160c0:	f100 0001 	add.w	r0, r0, #1
 80160c4:	d005      	beq.n	80160d2 <__lo0bits+0x5a>
 80160c6:	600b      	str	r3, [r1, #0]
 80160c8:	4770      	bx	lr
 80160ca:	4610      	mov	r0, r2
 80160cc:	e7e9      	b.n	80160a2 <__lo0bits+0x2a>
 80160ce:	2000      	movs	r0, #0
 80160d0:	4770      	bx	lr
 80160d2:	2020      	movs	r0, #32
 80160d4:	4770      	bx	lr
	...

080160d8 <__i2b>:
 80160d8:	b510      	push	{r4, lr}
 80160da:	460c      	mov	r4, r1
 80160dc:	2101      	movs	r1, #1
 80160de:	f7ff feb9 	bl	8015e54 <_Balloc>
 80160e2:	4602      	mov	r2, r0
 80160e4:	b928      	cbnz	r0, 80160f2 <__i2b+0x1a>
 80160e6:	4b05      	ldr	r3, [pc, #20]	; (80160fc <__i2b+0x24>)
 80160e8:	4805      	ldr	r0, [pc, #20]	; (8016100 <__i2b+0x28>)
 80160ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80160ee:	f001 f943 	bl	8017378 <__assert_func>
 80160f2:	2301      	movs	r3, #1
 80160f4:	6144      	str	r4, [r0, #20]
 80160f6:	6103      	str	r3, [r0, #16]
 80160f8:	bd10      	pop	{r4, pc}
 80160fa:	bf00      	nop
 80160fc:	0801d780 	.word	0x0801d780
 8016100:	0801d823 	.word	0x0801d823

08016104 <__multiply>:
 8016104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016108:	4691      	mov	r9, r2
 801610a:	690a      	ldr	r2, [r1, #16]
 801610c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016110:	429a      	cmp	r2, r3
 8016112:	bfb8      	it	lt
 8016114:	460b      	movlt	r3, r1
 8016116:	460c      	mov	r4, r1
 8016118:	bfbc      	itt	lt
 801611a:	464c      	movlt	r4, r9
 801611c:	4699      	movlt	r9, r3
 801611e:	6927      	ldr	r7, [r4, #16]
 8016120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016124:	68a3      	ldr	r3, [r4, #8]
 8016126:	6861      	ldr	r1, [r4, #4]
 8016128:	eb07 060a 	add.w	r6, r7, sl
 801612c:	42b3      	cmp	r3, r6
 801612e:	b085      	sub	sp, #20
 8016130:	bfb8      	it	lt
 8016132:	3101      	addlt	r1, #1
 8016134:	f7ff fe8e 	bl	8015e54 <_Balloc>
 8016138:	b930      	cbnz	r0, 8016148 <__multiply+0x44>
 801613a:	4602      	mov	r2, r0
 801613c:	4b44      	ldr	r3, [pc, #272]	; (8016250 <__multiply+0x14c>)
 801613e:	4845      	ldr	r0, [pc, #276]	; (8016254 <__multiply+0x150>)
 8016140:	f240 115d 	movw	r1, #349	; 0x15d
 8016144:	f001 f918 	bl	8017378 <__assert_func>
 8016148:	f100 0514 	add.w	r5, r0, #20
 801614c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016150:	462b      	mov	r3, r5
 8016152:	2200      	movs	r2, #0
 8016154:	4543      	cmp	r3, r8
 8016156:	d321      	bcc.n	801619c <__multiply+0x98>
 8016158:	f104 0314 	add.w	r3, r4, #20
 801615c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016160:	f109 0314 	add.w	r3, r9, #20
 8016164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016168:	9202      	str	r2, [sp, #8]
 801616a:	1b3a      	subs	r2, r7, r4
 801616c:	3a15      	subs	r2, #21
 801616e:	f022 0203 	bic.w	r2, r2, #3
 8016172:	3204      	adds	r2, #4
 8016174:	f104 0115 	add.w	r1, r4, #21
 8016178:	428f      	cmp	r7, r1
 801617a:	bf38      	it	cc
 801617c:	2204      	movcc	r2, #4
 801617e:	9201      	str	r2, [sp, #4]
 8016180:	9a02      	ldr	r2, [sp, #8]
 8016182:	9303      	str	r3, [sp, #12]
 8016184:	429a      	cmp	r2, r3
 8016186:	d80c      	bhi.n	80161a2 <__multiply+0x9e>
 8016188:	2e00      	cmp	r6, #0
 801618a:	dd03      	ble.n	8016194 <__multiply+0x90>
 801618c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016190:	2b00      	cmp	r3, #0
 8016192:	d05a      	beq.n	801624a <__multiply+0x146>
 8016194:	6106      	str	r6, [r0, #16]
 8016196:	b005      	add	sp, #20
 8016198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801619c:	f843 2b04 	str.w	r2, [r3], #4
 80161a0:	e7d8      	b.n	8016154 <__multiply+0x50>
 80161a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80161a6:	f1ba 0f00 	cmp.w	sl, #0
 80161aa:	d024      	beq.n	80161f6 <__multiply+0xf2>
 80161ac:	f104 0e14 	add.w	lr, r4, #20
 80161b0:	46a9      	mov	r9, r5
 80161b2:	f04f 0c00 	mov.w	ip, #0
 80161b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80161ba:	f8d9 1000 	ldr.w	r1, [r9]
 80161be:	fa1f fb82 	uxth.w	fp, r2
 80161c2:	b289      	uxth	r1, r1
 80161c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80161c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80161cc:	f8d9 2000 	ldr.w	r2, [r9]
 80161d0:	4461      	add	r1, ip
 80161d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80161d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80161da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80161de:	b289      	uxth	r1, r1
 80161e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80161e4:	4577      	cmp	r7, lr
 80161e6:	f849 1b04 	str.w	r1, [r9], #4
 80161ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80161ee:	d8e2      	bhi.n	80161b6 <__multiply+0xb2>
 80161f0:	9a01      	ldr	r2, [sp, #4]
 80161f2:	f845 c002 	str.w	ip, [r5, r2]
 80161f6:	9a03      	ldr	r2, [sp, #12]
 80161f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80161fc:	3304      	adds	r3, #4
 80161fe:	f1b9 0f00 	cmp.w	r9, #0
 8016202:	d020      	beq.n	8016246 <__multiply+0x142>
 8016204:	6829      	ldr	r1, [r5, #0]
 8016206:	f104 0c14 	add.w	ip, r4, #20
 801620a:	46ae      	mov	lr, r5
 801620c:	f04f 0a00 	mov.w	sl, #0
 8016210:	f8bc b000 	ldrh.w	fp, [ip]
 8016214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016218:	fb09 220b 	mla	r2, r9, fp, r2
 801621c:	4492      	add	sl, r2
 801621e:	b289      	uxth	r1, r1
 8016220:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016224:	f84e 1b04 	str.w	r1, [lr], #4
 8016228:	f85c 2b04 	ldr.w	r2, [ip], #4
 801622c:	f8be 1000 	ldrh.w	r1, [lr]
 8016230:	0c12      	lsrs	r2, r2, #16
 8016232:	fb09 1102 	mla	r1, r9, r2, r1
 8016236:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801623a:	4567      	cmp	r7, ip
 801623c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016240:	d8e6      	bhi.n	8016210 <__multiply+0x10c>
 8016242:	9a01      	ldr	r2, [sp, #4]
 8016244:	50a9      	str	r1, [r5, r2]
 8016246:	3504      	adds	r5, #4
 8016248:	e79a      	b.n	8016180 <__multiply+0x7c>
 801624a:	3e01      	subs	r6, #1
 801624c:	e79c      	b.n	8016188 <__multiply+0x84>
 801624e:	bf00      	nop
 8016250:	0801d780 	.word	0x0801d780
 8016254:	0801d823 	.word	0x0801d823

08016258 <__pow5mult>:
 8016258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801625c:	4615      	mov	r5, r2
 801625e:	f012 0203 	ands.w	r2, r2, #3
 8016262:	4606      	mov	r6, r0
 8016264:	460f      	mov	r7, r1
 8016266:	d007      	beq.n	8016278 <__pow5mult+0x20>
 8016268:	4c25      	ldr	r4, [pc, #148]	; (8016300 <__pow5mult+0xa8>)
 801626a:	3a01      	subs	r2, #1
 801626c:	2300      	movs	r3, #0
 801626e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016272:	f7ff fe51 	bl	8015f18 <__multadd>
 8016276:	4607      	mov	r7, r0
 8016278:	10ad      	asrs	r5, r5, #2
 801627a:	d03d      	beq.n	80162f8 <__pow5mult+0xa0>
 801627c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801627e:	b97c      	cbnz	r4, 80162a0 <__pow5mult+0x48>
 8016280:	2010      	movs	r0, #16
 8016282:	f7fd f93f 	bl	8013504 <malloc>
 8016286:	4602      	mov	r2, r0
 8016288:	6270      	str	r0, [r6, #36]	; 0x24
 801628a:	b928      	cbnz	r0, 8016298 <__pow5mult+0x40>
 801628c:	4b1d      	ldr	r3, [pc, #116]	; (8016304 <__pow5mult+0xac>)
 801628e:	481e      	ldr	r0, [pc, #120]	; (8016308 <__pow5mult+0xb0>)
 8016290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016294:	f001 f870 	bl	8017378 <__assert_func>
 8016298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801629c:	6004      	str	r4, [r0, #0]
 801629e:	60c4      	str	r4, [r0, #12]
 80162a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80162a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80162a8:	b94c      	cbnz	r4, 80162be <__pow5mult+0x66>
 80162aa:	f240 2171 	movw	r1, #625	; 0x271
 80162ae:	4630      	mov	r0, r6
 80162b0:	f7ff ff12 	bl	80160d8 <__i2b>
 80162b4:	2300      	movs	r3, #0
 80162b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80162ba:	4604      	mov	r4, r0
 80162bc:	6003      	str	r3, [r0, #0]
 80162be:	f04f 0900 	mov.w	r9, #0
 80162c2:	07eb      	lsls	r3, r5, #31
 80162c4:	d50a      	bpl.n	80162dc <__pow5mult+0x84>
 80162c6:	4639      	mov	r1, r7
 80162c8:	4622      	mov	r2, r4
 80162ca:	4630      	mov	r0, r6
 80162cc:	f7ff ff1a 	bl	8016104 <__multiply>
 80162d0:	4639      	mov	r1, r7
 80162d2:	4680      	mov	r8, r0
 80162d4:	4630      	mov	r0, r6
 80162d6:	f7ff fdfd 	bl	8015ed4 <_Bfree>
 80162da:	4647      	mov	r7, r8
 80162dc:	106d      	asrs	r5, r5, #1
 80162de:	d00b      	beq.n	80162f8 <__pow5mult+0xa0>
 80162e0:	6820      	ldr	r0, [r4, #0]
 80162e2:	b938      	cbnz	r0, 80162f4 <__pow5mult+0x9c>
 80162e4:	4622      	mov	r2, r4
 80162e6:	4621      	mov	r1, r4
 80162e8:	4630      	mov	r0, r6
 80162ea:	f7ff ff0b 	bl	8016104 <__multiply>
 80162ee:	6020      	str	r0, [r4, #0]
 80162f0:	f8c0 9000 	str.w	r9, [r0]
 80162f4:	4604      	mov	r4, r0
 80162f6:	e7e4      	b.n	80162c2 <__pow5mult+0x6a>
 80162f8:	4638      	mov	r0, r7
 80162fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162fe:	bf00      	nop
 8016300:	0801d970 	.word	0x0801d970
 8016304:	0801d80c 	.word	0x0801d80c
 8016308:	0801d823 	.word	0x0801d823

0801630c <__lshift>:
 801630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016310:	460c      	mov	r4, r1
 8016312:	6849      	ldr	r1, [r1, #4]
 8016314:	6923      	ldr	r3, [r4, #16]
 8016316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801631a:	68a3      	ldr	r3, [r4, #8]
 801631c:	4607      	mov	r7, r0
 801631e:	4691      	mov	r9, r2
 8016320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016324:	f108 0601 	add.w	r6, r8, #1
 8016328:	42b3      	cmp	r3, r6
 801632a:	db0b      	blt.n	8016344 <__lshift+0x38>
 801632c:	4638      	mov	r0, r7
 801632e:	f7ff fd91 	bl	8015e54 <_Balloc>
 8016332:	4605      	mov	r5, r0
 8016334:	b948      	cbnz	r0, 801634a <__lshift+0x3e>
 8016336:	4602      	mov	r2, r0
 8016338:	4b2a      	ldr	r3, [pc, #168]	; (80163e4 <__lshift+0xd8>)
 801633a:	482b      	ldr	r0, [pc, #172]	; (80163e8 <__lshift+0xdc>)
 801633c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016340:	f001 f81a 	bl	8017378 <__assert_func>
 8016344:	3101      	adds	r1, #1
 8016346:	005b      	lsls	r3, r3, #1
 8016348:	e7ee      	b.n	8016328 <__lshift+0x1c>
 801634a:	2300      	movs	r3, #0
 801634c:	f100 0114 	add.w	r1, r0, #20
 8016350:	f100 0210 	add.w	r2, r0, #16
 8016354:	4618      	mov	r0, r3
 8016356:	4553      	cmp	r3, sl
 8016358:	db37      	blt.n	80163ca <__lshift+0xbe>
 801635a:	6920      	ldr	r0, [r4, #16]
 801635c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016360:	f104 0314 	add.w	r3, r4, #20
 8016364:	f019 091f 	ands.w	r9, r9, #31
 8016368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801636c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016370:	d02f      	beq.n	80163d2 <__lshift+0xc6>
 8016372:	f1c9 0e20 	rsb	lr, r9, #32
 8016376:	468a      	mov	sl, r1
 8016378:	f04f 0c00 	mov.w	ip, #0
 801637c:	681a      	ldr	r2, [r3, #0]
 801637e:	fa02 f209 	lsl.w	r2, r2, r9
 8016382:	ea42 020c 	orr.w	r2, r2, ip
 8016386:	f84a 2b04 	str.w	r2, [sl], #4
 801638a:	f853 2b04 	ldr.w	r2, [r3], #4
 801638e:	4298      	cmp	r0, r3
 8016390:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016394:	d8f2      	bhi.n	801637c <__lshift+0x70>
 8016396:	1b03      	subs	r3, r0, r4
 8016398:	3b15      	subs	r3, #21
 801639a:	f023 0303 	bic.w	r3, r3, #3
 801639e:	3304      	adds	r3, #4
 80163a0:	f104 0215 	add.w	r2, r4, #21
 80163a4:	4290      	cmp	r0, r2
 80163a6:	bf38      	it	cc
 80163a8:	2304      	movcc	r3, #4
 80163aa:	f841 c003 	str.w	ip, [r1, r3]
 80163ae:	f1bc 0f00 	cmp.w	ip, #0
 80163b2:	d001      	beq.n	80163b8 <__lshift+0xac>
 80163b4:	f108 0602 	add.w	r6, r8, #2
 80163b8:	3e01      	subs	r6, #1
 80163ba:	4638      	mov	r0, r7
 80163bc:	612e      	str	r6, [r5, #16]
 80163be:	4621      	mov	r1, r4
 80163c0:	f7ff fd88 	bl	8015ed4 <_Bfree>
 80163c4:	4628      	mov	r0, r5
 80163c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80163ce:	3301      	adds	r3, #1
 80163d0:	e7c1      	b.n	8016356 <__lshift+0x4a>
 80163d2:	3904      	subs	r1, #4
 80163d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80163d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80163dc:	4298      	cmp	r0, r3
 80163de:	d8f9      	bhi.n	80163d4 <__lshift+0xc8>
 80163e0:	e7ea      	b.n	80163b8 <__lshift+0xac>
 80163e2:	bf00      	nop
 80163e4:	0801d780 	.word	0x0801d780
 80163e8:	0801d823 	.word	0x0801d823

080163ec <__mcmp>:
 80163ec:	b530      	push	{r4, r5, lr}
 80163ee:	6902      	ldr	r2, [r0, #16]
 80163f0:	690c      	ldr	r4, [r1, #16]
 80163f2:	1b12      	subs	r2, r2, r4
 80163f4:	d10e      	bne.n	8016414 <__mcmp+0x28>
 80163f6:	f100 0314 	add.w	r3, r0, #20
 80163fa:	3114      	adds	r1, #20
 80163fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801640c:	42a5      	cmp	r5, r4
 801640e:	d003      	beq.n	8016418 <__mcmp+0x2c>
 8016410:	d305      	bcc.n	801641e <__mcmp+0x32>
 8016412:	2201      	movs	r2, #1
 8016414:	4610      	mov	r0, r2
 8016416:	bd30      	pop	{r4, r5, pc}
 8016418:	4283      	cmp	r3, r0
 801641a:	d3f3      	bcc.n	8016404 <__mcmp+0x18>
 801641c:	e7fa      	b.n	8016414 <__mcmp+0x28>
 801641e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016422:	e7f7      	b.n	8016414 <__mcmp+0x28>

08016424 <__mdiff>:
 8016424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016428:	460c      	mov	r4, r1
 801642a:	4606      	mov	r6, r0
 801642c:	4611      	mov	r1, r2
 801642e:	4620      	mov	r0, r4
 8016430:	4690      	mov	r8, r2
 8016432:	f7ff ffdb 	bl	80163ec <__mcmp>
 8016436:	1e05      	subs	r5, r0, #0
 8016438:	d110      	bne.n	801645c <__mdiff+0x38>
 801643a:	4629      	mov	r1, r5
 801643c:	4630      	mov	r0, r6
 801643e:	f7ff fd09 	bl	8015e54 <_Balloc>
 8016442:	b930      	cbnz	r0, 8016452 <__mdiff+0x2e>
 8016444:	4b3a      	ldr	r3, [pc, #232]	; (8016530 <__mdiff+0x10c>)
 8016446:	4602      	mov	r2, r0
 8016448:	f240 2132 	movw	r1, #562	; 0x232
 801644c:	4839      	ldr	r0, [pc, #228]	; (8016534 <__mdiff+0x110>)
 801644e:	f000 ff93 	bl	8017378 <__assert_func>
 8016452:	2301      	movs	r3, #1
 8016454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801645c:	bfa4      	itt	ge
 801645e:	4643      	movge	r3, r8
 8016460:	46a0      	movge	r8, r4
 8016462:	4630      	mov	r0, r6
 8016464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016468:	bfa6      	itte	ge
 801646a:	461c      	movge	r4, r3
 801646c:	2500      	movge	r5, #0
 801646e:	2501      	movlt	r5, #1
 8016470:	f7ff fcf0 	bl	8015e54 <_Balloc>
 8016474:	b920      	cbnz	r0, 8016480 <__mdiff+0x5c>
 8016476:	4b2e      	ldr	r3, [pc, #184]	; (8016530 <__mdiff+0x10c>)
 8016478:	4602      	mov	r2, r0
 801647a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801647e:	e7e5      	b.n	801644c <__mdiff+0x28>
 8016480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016484:	6926      	ldr	r6, [r4, #16]
 8016486:	60c5      	str	r5, [r0, #12]
 8016488:	f104 0914 	add.w	r9, r4, #20
 801648c:	f108 0514 	add.w	r5, r8, #20
 8016490:	f100 0e14 	add.w	lr, r0, #20
 8016494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801649c:	f108 0210 	add.w	r2, r8, #16
 80164a0:	46f2      	mov	sl, lr
 80164a2:	2100      	movs	r1, #0
 80164a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80164a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80164ac:	fa1f f883 	uxth.w	r8, r3
 80164b0:	fa11 f18b 	uxtah	r1, r1, fp
 80164b4:	0c1b      	lsrs	r3, r3, #16
 80164b6:	eba1 0808 	sub.w	r8, r1, r8
 80164ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80164be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80164c2:	fa1f f888 	uxth.w	r8, r8
 80164c6:	1419      	asrs	r1, r3, #16
 80164c8:	454e      	cmp	r6, r9
 80164ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80164ce:	f84a 3b04 	str.w	r3, [sl], #4
 80164d2:	d8e7      	bhi.n	80164a4 <__mdiff+0x80>
 80164d4:	1b33      	subs	r3, r6, r4
 80164d6:	3b15      	subs	r3, #21
 80164d8:	f023 0303 	bic.w	r3, r3, #3
 80164dc:	3304      	adds	r3, #4
 80164de:	3415      	adds	r4, #21
 80164e0:	42a6      	cmp	r6, r4
 80164e2:	bf38      	it	cc
 80164e4:	2304      	movcc	r3, #4
 80164e6:	441d      	add	r5, r3
 80164e8:	4473      	add	r3, lr
 80164ea:	469e      	mov	lr, r3
 80164ec:	462e      	mov	r6, r5
 80164ee:	4566      	cmp	r6, ip
 80164f0:	d30e      	bcc.n	8016510 <__mdiff+0xec>
 80164f2:	f10c 0203 	add.w	r2, ip, #3
 80164f6:	1b52      	subs	r2, r2, r5
 80164f8:	f022 0203 	bic.w	r2, r2, #3
 80164fc:	3d03      	subs	r5, #3
 80164fe:	45ac      	cmp	ip, r5
 8016500:	bf38      	it	cc
 8016502:	2200      	movcc	r2, #0
 8016504:	441a      	add	r2, r3
 8016506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801650a:	b17b      	cbz	r3, 801652c <__mdiff+0x108>
 801650c:	6107      	str	r7, [r0, #16]
 801650e:	e7a3      	b.n	8016458 <__mdiff+0x34>
 8016510:	f856 8b04 	ldr.w	r8, [r6], #4
 8016514:	fa11 f288 	uxtah	r2, r1, r8
 8016518:	1414      	asrs	r4, r2, #16
 801651a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801651e:	b292      	uxth	r2, r2
 8016520:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016524:	f84e 2b04 	str.w	r2, [lr], #4
 8016528:	1421      	asrs	r1, r4, #16
 801652a:	e7e0      	b.n	80164ee <__mdiff+0xca>
 801652c:	3f01      	subs	r7, #1
 801652e:	e7ea      	b.n	8016506 <__mdiff+0xe2>
 8016530:	0801d780 	.word	0x0801d780
 8016534:	0801d823 	.word	0x0801d823

08016538 <__ulp>:
 8016538:	b082      	sub	sp, #8
 801653a:	ed8d 0b00 	vstr	d0, [sp]
 801653e:	9b01      	ldr	r3, [sp, #4]
 8016540:	4912      	ldr	r1, [pc, #72]	; (801658c <__ulp+0x54>)
 8016542:	4019      	ands	r1, r3
 8016544:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016548:	2900      	cmp	r1, #0
 801654a:	dd05      	ble.n	8016558 <__ulp+0x20>
 801654c:	2200      	movs	r2, #0
 801654e:	460b      	mov	r3, r1
 8016550:	ec43 2b10 	vmov	d0, r2, r3
 8016554:	b002      	add	sp, #8
 8016556:	4770      	bx	lr
 8016558:	4249      	negs	r1, r1
 801655a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801655e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016562:	f04f 0200 	mov.w	r2, #0
 8016566:	f04f 0300 	mov.w	r3, #0
 801656a:	da04      	bge.n	8016576 <__ulp+0x3e>
 801656c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016570:	fa41 f300 	asr.w	r3, r1, r0
 8016574:	e7ec      	b.n	8016550 <__ulp+0x18>
 8016576:	f1a0 0114 	sub.w	r1, r0, #20
 801657a:	291e      	cmp	r1, #30
 801657c:	bfda      	itte	le
 801657e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016582:	fa20 f101 	lsrle.w	r1, r0, r1
 8016586:	2101      	movgt	r1, #1
 8016588:	460a      	mov	r2, r1
 801658a:	e7e1      	b.n	8016550 <__ulp+0x18>
 801658c:	7ff00000 	.word	0x7ff00000

08016590 <__b2d>:
 8016590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016592:	6905      	ldr	r5, [r0, #16]
 8016594:	f100 0714 	add.w	r7, r0, #20
 8016598:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801659c:	1f2e      	subs	r6, r5, #4
 801659e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80165a2:	4620      	mov	r0, r4
 80165a4:	f7ff fd48 	bl	8016038 <__hi0bits>
 80165a8:	f1c0 0320 	rsb	r3, r0, #32
 80165ac:	280a      	cmp	r0, #10
 80165ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801662c <__b2d+0x9c>
 80165b2:	600b      	str	r3, [r1, #0]
 80165b4:	dc14      	bgt.n	80165e0 <__b2d+0x50>
 80165b6:	f1c0 0e0b 	rsb	lr, r0, #11
 80165ba:	fa24 f10e 	lsr.w	r1, r4, lr
 80165be:	42b7      	cmp	r7, r6
 80165c0:	ea41 030c 	orr.w	r3, r1, ip
 80165c4:	bf34      	ite	cc
 80165c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80165ca:	2100      	movcs	r1, #0
 80165cc:	3015      	adds	r0, #21
 80165ce:	fa04 f000 	lsl.w	r0, r4, r0
 80165d2:	fa21 f10e 	lsr.w	r1, r1, lr
 80165d6:	ea40 0201 	orr.w	r2, r0, r1
 80165da:	ec43 2b10 	vmov	d0, r2, r3
 80165de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165e0:	42b7      	cmp	r7, r6
 80165e2:	bf3a      	itte	cc
 80165e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80165e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80165ec:	2100      	movcs	r1, #0
 80165ee:	380b      	subs	r0, #11
 80165f0:	d017      	beq.n	8016622 <__b2d+0x92>
 80165f2:	f1c0 0c20 	rsb	ip, r0, #32
 80165f6:	fa04 f500 	lsl.w	r5, r4, r0
 80165fa:	42be      	cmp	r6, r7
 80165fc:	fa21 f40c 	lsr.w	r4, r1, ip
 8016600:	ea45 0504 	orr.w	r5, r5, r4
 8016604:	bf8c      	ite	hi
 8016606:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801660a:	2400      	movls	r4, #0
 801660c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016610:	fa01 f000 	lsl.w	r0, r1, r0
 8016614:	fa24 f40c 	lsr.w	r4, r4, ip
 8016618:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801661c:	ea40 0204 	orr.w	r2, r0, r4
 8016620:	e7db      	b.n	80165da <__b2d+0x4a>
 8016622:	ea44 030c 	orr.w	r3, r4, ip
 8016626:	460a      	mov	r2, r1
 8016628:	e7d7      	b.n	80165da <__b2d+0x4a>
 801662a:	bf00      	nop
 801662c:	3ff00000 	.word	0x3ff00000

08016630 <__d2b>:
 8016630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016634:	4689      	mov	r9, r1
 8016636:	2101      	movs	r1, #1
 8016638:	ec57 6b10 	vmov	r6, r7, d0
 801663c:	4690      	mov	r8, r2
 801663e:	f7ff fc09 	bl	8015e54 <_Balloc>
 8016642:	4604      	mov	r4, r0
 8016644:	b930      	cbnz	r0, 8016654 <__d2b+0x24>
 8016646:	4602      	mov	r2, r0
 8016648:	4b25      	ldr	r3, [pc, #148]	; (80166e0 <__d2b+0xb0>)
 801664a:	4826      	ldr	r0, [pc, #152]	; (80166e4 <__d2b+0xb4>)
 801664c:	f240 310a 	movw	r1, #778	; 0x30a
 8016650:	f000 fe92 	bl	8017378 <__assert_func>
 8016654:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801665c:	bb35      	cbnz	r5, 80166ac <__d2b+0x7c>
 801665e:	2e00      	cmp	r6, #0
 8016660:	9301      	str	r3, [sp, #4]
 8016662:	d028      	beq.n	80166b6 <__d2b+0x86>
 8016664:	4668      	mov	r0, sp
 8016666:	9600      	str	r6, [sp, #0]
 8016668:	f7ff fd06 	bl	8016078 <__lo0bits>
 801666c:	9900      	ldr	r1, [sp, #0]
 801666e:	b300      	cbz	r0, 80166b2 <__d2b+0x82>
 8016670:	9a01      	ldr	r2, [sp, #4]
 8016672:	f1c0 0320 	rsb	r3, r0, #32
 8016676:	fa02 f303 	lsl.w	r3, r2, r3
 801667a:	430b      	orrs	r3, r1
 801667c:	40c2      	lsrs	r2, r0
 801667e:	6163      	str	r3, [r4, #20]
 8016680:	9201      	str	r2, [sp, #4]
 8016682:	9b01      	ldr	r3, [sp, #4]
 8016684:	61a3      	str	r3, [r4, #24]
 8016686:	2b00      	cmp	r3, #0
 8016688:	bf14      	ite	ne
 801668a:	2202      	movne	r2, #2
 801668c:	2201      	moveq	r2, #1
 801668e:	6122      	str	r2, [r4, #16]
 8016690:	b1d5      	cbz	r5, 80166c8 <__d2b+0x98>
 8016692:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016696:	4405      	add	r5, r0
 8016698:	f8c9 5000 	str.w	r5, [r9]
 801669c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80166a0:	f8c8 0000 	str.w	r0, [r8]
 80166a4:	4620      	mov	r0, r4
 80166a6:	b003      	add	sp, #12
 80166a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80166b0:	e7d5      	b.n	801665e <__d2b+0x2e>
 80166b2:	6161      	str	r1, [r4, #20]
 80166b4:	e7e5      	b.n	8016682 <__d2b+0x52>
 80166b6:	a801      	add	r0, sp, #4
 80166b8:	f7ff fcde 	bl	8016078 <__lo0bits>
 80166bc:	9b01      	ldr	r3, [sp, #4]
 80166be:	6163      	str	r3, [r4, #20]
 80166c0:	2201      	movs	r2, #1
 80166c2:	6122      	str	r2, [r4, #16]
 80166c4:	3020      	adds	r0, #32
 80166c6:	e7e3      	b.n	8016690 <__d2b+0x60>
 80166c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80166cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80166d0:	f8c9 0000 	str.w	r0, [r9]
 80166d4:	6918      	ldr	r0, [r3, #16]
 80166d6:	f7ff fcaf 	bl	8016038 <__hi0bits>
 80166da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80166de:	e7df      	b.n	80166a0 <__d2b+0x70>
 80166e0:	0801d780 	.word	0x0801d780
 80166e4:	0801d823 	.word	0x0801d823

080166e8 <__ratio>:
 80166e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	4688      	mov	r8, r1
 80166ee:	4669      	mov	r1, sp
 80166f0:	4681      	mov	r9, r0
 80166f2:	f7ff ff4d 	bl	8016590 <__b2d>
 80166f6:	a901      	add	r1, sp, #4
 80166f8:	4640      	mov	r0, r8
 80166fa:	ec55 4b10 	vmov	r4, r5, d0
 80166fe:	f7ff ff47 	bl	8016590 <__b2d>
 8016702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016706:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801670a:	eba3 0c02 	sub.w	ip, r3, r2
 801670e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016712:	1a9b      	subs	r3, r3, r2
 8016714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016718:	ec51 0b10 	vmov	r0, r1, d0
 801671c:	2b00      	cmp	r3, #0
 801671e:	bfd6      	itet	le
 8016720:	460a      	movle	r2, r1
 8016722:	462a      	movgt	r2, r5
 8016724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016728:	468b      	mov	fp, r1
 801672a:	462f      	mov	r7, r5
 801672c:	bfd4      	ite	le
 801672e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016736:	4620      	mov	r0, r4
 8016738:	ee10 2a10 	vmov	r2, s0
 801673c:	465b      	mov	r3, fp
 801673e:	4639      	mov	r1, r7
 8016740:	f7ea f9c6 	bl	8000ad0 <__aeabi_ddiv>
 8016744:	ec41 0b10 	vmov	d0, r0, r1
 8016748:	b003      	add	sp, #12
 801674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801674e <__copybits>:
 801674e:	3901      	subs	r1, #1
 8016750:	b570      	push	{r4, r5, r6, lr}
 8016752:	1149      	asrs	r1, r1, #5
 8016754:	6914      	ldr	r4, [r2, #16]
 8016756:	3101      	adds	r1, #1
 8016758:	f102 0314 	add.w	r3, r2, #20
 801675c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016760:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016764:	1f05      	subs	r5, r0, #4
 8016766:	42a3      	cmp	r3, r4
 8016768:	d30c      	bcc.n	8016784 <__copybits+0x36>
 801676a:	1aa3      	subs	r3, r4, r2
 801676c:	3b11      	subs	r3, #17
 801676e:	f023 0303 	bic.w	r3, r3, #3
 8016772:	3211      	adds	r2, #17
 8016774:	42a2      	cmp	r2, r4
 8016776:	bf88      	it	hi
 8016778:	2300      	movhi	r3, #0
 801677a:	4418      	add	r0, r3
 801677c:	2300      	movs	r3, #0
 801677e:	4288      	cmp	r0, r1
 8016780:	d305      	bcc.n	801678e <__copybits+0x40>
 8016782:	bd70      	pop	{r4, r5, r6, pc}
 8016784:	f853 6b04 	ldr.w	r6, [r3], #4
 8016788:	f845 6f04 	str.w	r6, [r5, #4]!
 801678c:	e7eb      	b.n	8016766 <__copybits+0x18>
 801678e:	f840 3b04 	str.w	r3, [r0], #4
 8016792:	e7f4      	b.n	801677e <__copybits+0x30>

08016794 <__any_on>:
 8016794:	f100 0214 	add.w	r2, r0, #20
 8016798:	6900      	ldr	r0, [r0, #16]
 801679a:	114b      	asrs	r3, r1, #5
 801679c:	4298      	cmp	r0, r3
 801679e:	b510      	push	{r4, lr}
 80167a0:	db11      	blt.n	80167c6 <__any_on+0x32>
 80167a2:	dd0a      	ble.n	80167ba <__any_on+0x26>
 80167a4:	f011 011f 	ands.w	r1, r1, #31
 80167a8:	d007      	beq.n	80167ba <__any_on+0x26>
 80167aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80167ae:	fa24 f001 	lsr.w	r0, r4, r1
 80167b2:	fa00 f101 	lsl.w	r1, r0, r1
 80167b6:	428c      	cmp	r4, r1
 80167b8:	d10b      	bne.n	80167d2 <__any_on+0x3e>
 80167ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80167be:	4293      	cmp	r3, r2
 80167c0:	d803      	bhi.n	80167ca <__any_on+0x36>
 80167c2:	2000      	movs	r0, #0
 80167c4:	bd10      	pop	{r4, pc}
 80167c6:	4603      	mov	r3, r0
 80167c8:	e7f7      	b.n	80167ba <__any_on+0x26>
 80167ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80167ce:	2900      	cmp	r1, #0
 80167d0:	d0f5      	beq.n	80167be <__any_on+0x2a>
 80167d2:	2001      	movs	r0, #1
 80167d4:	e7f6      	b.n	80167c4 <__any_on+0x30>

080167d6 <_realloc_r>:
 80167d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167da:	4680      	mov	r8, r0
 80167dc:	4614      	mov	r4, r2
 80167de:	460e      	mov	r6, r1
 80167e0:	b921      	cbnz	r1, 80167ec <_realloc_r+0x16>
 80167e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167e6:	4611      	mov	r1, r2
 80167e8:	f7fc bf44 	b.w	8013674 <_malloc_r>
 80167ec:	b92a      	cbnz	r2, 80167fa <_realloc_r+0x24>
 80167ee:	f7fc fed5 	bl	801359c <_free_r>
 80167f2:	4625      	mov	r5, r4
 80167f4:	4628      	mov	r0, r5
 80167f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167fa:	f000 fddb 	bl	80173b4 <_malloc_usable_size_r>
 80167fe:	4284      	cmp	r4, r0
 8016800:	4607      	mov	r7, r0
 8016802:	d802      	bhi.n	801680a <_realloc_r+0x34>
 8016804:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016808:	d812      	bhi.n	8016830 <_realloc_r+0x5a>
 801680a:	4621      	mov	r1, r4
 801680c:	4640      	mov	r0, r8
 801680e:	f7fc ff31 	bl	8013674 <_malloc_r>
 8016812:	4605      	mov	r5, r0
 8016814:	2800      	cmp	r0, #0
 8016816:	d0ed      	beq.n	80167f4 <_realloc_r+0x1e>
 8016818:	42bc      	cmp	r4, r7
 801681a:	4622      	mov	r2, r4
 801681c:	4631      	mov	r1, r6
 801681e:	bf28      	it	cs
 8016820:	463a      	movcs	r2, r7
 8016822:	f7fc fe8f 	bl	8013544 <memcpy>
 8016826:	4631      	mov	r1, r6
 8016828:	4640      	mov	r0, r8
 801682a:	f7fc feb7 	bl	801359c <_free_r>
 801682e:	e7e1      	b.n	80167f4 <_realloc_r+0x1e>
 8016830:	4635      	mov	r5, r6
 8016832:	e7df      	b.n	80167f4 <_realloc_r+0x1e>

08016834 <__ssputs_r>:
 8016834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016838:	688e      	ldr	r6, [r1, #8]
 801683a:	429e      	cmp	r6, r3
 801683c:	4682      	mov	sl, r0
 801683e:	460c      	mov	r4, r1
 8016840:	4690      	mov	r8, r2
 8016842:	461f      	mov	r7, r3
 8016844:	d838      	bhi.n	80168b8 <__ssputs_r+0x84>
 8016846:	898a      	ldrh	r2, [r1, #12]
 8016848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801684c:	d032      	beq.n	80168b4 <__ssputs_r+0x80>
 801684e:	6825      	ldr	r5, [r4, #0]
 8016850:	6909      	ldr	r1, [r1, #16]
 8016852:	eba5 0901 	sub.w	r9, r5, r1
 8016856:	6965      	ldr	r5, [r4, #20]
 8016858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801685c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016860:	3301      	adds	r3, #1
 8016862:	444b      	add	r3, r9
 8016864:	106d      	asrs	r5, r5, #1
 8016866:	429d      	cmp	r5, r3
 8016868:	bf38      	it	cc
 801686a:	461d      	movcc	r5, r3
 801686c:	0553      	lsls	r3, r2, #21
 801686e:	d531      	bpl.n	80168d4 <__ssputs_r+0xa0>
 8016870:	4629      	mov	r1, r5
 8016872:	f7fc feff 	bl	8013674 <_malloc_r>
 8016876:	4606      	mov	r6, r0
 8016878:	b950      	cbnz	r0, 8016890 <__ssputs_r+0x5c>
 801687a:	230c      	movs	r3, #12
 801687c:	f8ca 3000 	str.w	r3, [sl]
 8016880:	89a3      	ldrh	r3, [r4, #12]
 8016882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016886:	81a3      	strh	r3, [r4, #12]
 8016888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016890:	6921      	ldr	r1, [r4, #16]
 8016892:	464a      	mov	r2, r9
 8016894:	f7fc fe56 	bl	8013544 <memcpy>
 8016898:	89a3      	ldrh	r3, [r4, #12]
 801689a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168a2:	81a3      	strh	r3, [r4, #12]
 80168a4:	6126      	str	r6, [r4, #16]
 80168a6:	6165      	str	r5, [r4, #20]
 80168a8:	444e      	add	r6, r9
 80168aa:	eba5 0509 	sub.w	r5, r5, r9
 80168ae:	6026      	str	r6, [r4, #0]
 80168b0:	60a5      	str	r5, [r4, #8]
 80168b2:	463e      	mov	r6, r7
 80168b4:	42be      	cmp	r6, r7
 80168b6:	d900      	bls.n	80168ba <__ssputs_r+0x86>
 80168b8:	463e      	mov	r6, r7
 80168ba:	6820      	ldr	r0, [r4, #0]
 80168bc:	4632      	mov	r2, r6
 80168be:	4641      	mov	r1, r8
 80168c0:	f7ff faa2 	bl	8015e08 <memmove>
 80168c4:	68a3      	ldr	r3, [r4, #8]
 80168c6:	1b9b      	subs	r3, r3, r6
 80168c8:	60a3      	str	r3, [r4, #8]
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	4433      	add	r3, r6
 80168ce:	6023      	str	r3, [r4, #0]
 80168d0:	2000      	movs	r0, #0
 80168d2:	e7db      	b.n	801688c <__ssputs_r+0x58>
 80168d4:	462a      	mov	r2, r5
 80168d6:	f7ff ff7e 	bl	80167d6 <_realloc_r>
 80168da:	4606      	mov	r6, r0
 80168dc:	2800      	cmp	r0, #0
 80168de:	d1e1      	bne.n	80168a4 <__ssputs_r+0x70>
 80168e0:	6921      	ldr	r1, [r4, #16]
 80168e2:	4650      	mov	r0, sl
 80168e4:	f7fc fe5a 	bl	801359c <_free_r>
 80168e8:	e7c7      	b.n	801687a <__ssputs_r+0x46>
	...

080168ec <_svfiprintf_r>:
 80168ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f0:	4698      	mov	r8, r3
 80168f2:	898b      	ldrh	r3, [r1, #12]
 80168f4:	061b      	lsls	r3, r3, #24
 80168f6:	b09d      	sub	sp, #116	; 0x74
 80168f8:	4607      	mov	r7, r0
 80168fa:	460d      	mov	r5, r1
 80168fc:	4614      	mov	r4, r2
 80168fe:	d50e      	bpl.n	801691e <_svfiprintf_r+0x32>
 8016900:	690b      	ldr	r3, [r1, #16]
 8016902:	b963      	cbnz	r3, 801691e <_svfiprintf_r+0x32>
 8016904:	2140      	movs	r1, #64	; 0x40
 8016906:	f7fc feb5 	bl	8013674 <_malloc_r>
 801690a:	6028      	str	r0, [r5, #0]
 801690c:	6128      	str	r0, [r5, #16]
 801690e:	b920      	cbnz	r0, 801691a <_svfiprintf_r+0x2e>
 8016910:	230c      	movs	r3, #12
 8016912:	603b      	str	r3, [r7, #0]
 8016914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016918:	e0d1      	b.n	8016abe <_svfiprintf_r+0x1d2>
 801691a:	2340      	movs	r3, #64	; 0x40
 801691c:	616b      	str	r3, [r5, #20]
 801691e:	2300      	movs	r3, #0
 8016920:	9309      	str	r3, [sp, #36]	; 0x24
 8016922:	2320      	movs	r3, #32
 8016924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016928:	f8cd 800c 	str.w	r8, [sp, #12]
 801692c:	2330      	movs	r3, #48	; 0x30
 801692e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016ad8 <_svfiprintf_r+0x1ec>
 8016932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016936:	f04f 0901 	mov.w	r9, #1
 801693a:	4623      	mov	r3, r4
 801693c:	469a      	mov	sl, r3
 801693e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016942:	b10a      	cbz	r2, 8016948 <_svfiprintf_r+0x5c>
 8016944:	2a25      	cmp	r2, #37	; 0x25
 8016946:	d1f9      	bne.n	801693c <_svfiprintf_r+0x50>
 8016948:	ebba 0b04 	subs.w	fp, sl, r4
 801694c:	d00b      	beq.n	8016966 <_svfiprintf_r+0x7a>
 801694e:	465b      	mov	r3, fp
 8016950:	4622      	mov	r2, r4
 8016952:	4629      	mov	r1, r5
 8016954:	4638      	mov	r0, r7
 8016956:	f7ff ff6d 	bl	8016834 <__ssputs_r>
 801695a:	3001      	adds	r0, #1
 801695c:	f000 80aa 	beq.w	8016ab4 <_svfiprintf_r+0x1c8>
 8016960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016962:	445a      	add	r2, fp
 8016964:	9209      	str	r2, [sp, #36]	; 0x24
 8016966:	f89a 3000 	ldrb.w	r3, [sl]
 801696a:	2b00      	cmp	r3, #0
 801696c:	f000 80a2 	beq.w	8016ab4 <_svfiprintf_r+0x1c8>
 8016970:	2300      	movs	r3, #0
 8016972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801697a:	f10a 0a01 	add.w	sl, sl, #1
 801697e:	9304      	str	r3, [sp, #16]
 8016980:	9307      	str	r3, [sp, #28]
 8016982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016986:	931a      	str	r3, [sp, #104]	; 0x68
 8016988:	4654      	mov	r4, sl
 801698a:	2205      	movs	r2, #5
 801698c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016990:	4851      	ldr	r0, [pc, #324]	; (8016ad8 <_svfiprintf_r+0x1ec>)
 8016992:	f7e9 fd55 	bl	8000440 <memchr>
 8016996:	9a04      	ldr	r2, [sp, #16]
 8016998:	b9d8      	cbnz	r0, 80169d2 <_svfiprintf_r+0xe6>
 801699a:	06d0      	lsls	r0, r2, #27
 801699c:	bf44      	itt	mi
 801699e:	2320      	movmi	r3, #32
 80169a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169a4:	0711      	lsls	r1, r2, #28
 80169a6:	bf44      	itt	mi
 80169a8:	232b      	movmi	r3, #43	; 0x2b
 80169aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169ae:	f89a 3000 	ldrb.w	r3, [sl]
 80169b2:	2b2a      	cmp	r3, #42	; 0x2a
 80169b4:	d015      	beq.n	80169e2 <_svfiprintf_r+0xf6>
 80169b6:	9a07      	ldr	r2, [sp, #28]
 80169b8:	4654      	mov	r4, sl
 80169ba:	2000      	movs	r0, #0
 80169bc:	f04f 0c0a 	mov.w	ip, #10
 80169c0:	4621      	mov	r1, r4
 80169c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169c6:	3b30      	subs	r3, #48	; 0x30
 80169c8:	2b09      	cmp	r3, #9
 80169ca:	d94e      	bls.n	8016a6a <_svfiprintf_r+0x17e>
 80169cc:	b1b0      	cbz	r0, 80169fc <_svfiprintf_r+0x110>
 80169ce:	9207      	str	r2, [sp, #28]
 80169d0:	e014      	b.n	80169fc <_svfiprintf_r+0x110>
 80169d2:	eba0 0308 	sub.w	r3, r0, r8
 80169d6:	fa09 f303 	lsl.w	r3, r9, r3
 80169da:	4313      	orrs	r3, r2
 80169dc:	9304      	str	r3, [sp, #16]
 80169de:	46a2      	mov	sl, r4
 80169e0:	e7d2      	b.n	8016988 <_svfiprintf_r+0x9c>
 80169e2:	9b03      	ldr	r3, [sp, #12]
 80169e4:	1d19      	adds	r1, r3, #4
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	9103      	str	r1, [sp, #12]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	bfbb      	ittet	lt
 80169ee:	425b      	neglt	r3, r3
 80169f0:	f042 0202 	orrlt.w	r2, r2, #2
 80169f4:	9307      	strge	r3, [sp, #28]
 80169f6:	9307      	strlt	r3, [sp, #28]
 80169f8:	bfb8      	it	lt
 80169fa:	9204      	strlt	r2, [sp, #16]
 80169fc:	7823      	ldrb	r3, [r4, #0]
 80169fe:	2b2e      	cmp	r3, #46	; 0x2e
 8016a00:	d10c      	bne.n	8016a1c <_svfiprintf_r+0x130>
 8016a02:	7863      	ldrb	r3, [r4, #1]
 8016a04:	2b2a      	cmp	r3, #42	; 0x2a
 8016a06:	d135      	bne.n	8016a74 <_svfiprintf_r+0x188>
 8016a08:	9b03      	ldr	r3, [sp, #12]
 8016a0a:	1d1a      	adds	r2, r3, #4
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	9203      	str	r2, [sp, #12]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	bfb8      	it	lt
 8016a14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016a18:	3402      	adds	r4, #2
 8016a1a:	9305      	str	r3, [sp, #20]
 8016a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016ae8 <_svfiprintf_r+0x1fc>
 8016a20:	7821      	ldrb	r1, [r4, #0]
 8016a22:	2203      	movs	r2, #3
 8016a24:	4650      	mov	r0, sl
 8016a26:	f7e9 fd0b 	bl	8000440 <memchr>
 8016a2a:	b140      	cbz	r0, 8016a3e <_svfiprintf_r+0x152>
 8016a2c:	2340      	movs	r3, #64	; 0x40
 8016a2e:	eba0 000a 	sub.w	r0, r0, sl
 8016a32:	fa03 f000 	lsl.w	r0, r3, r0
 8016a36:	9b04      	ldr	r3, [sp, #16]
 8016a38:	4303      	orrs	r3, r0
 8016a3a:	3401      	adds	r4, #1
 8016a3c:	9304      	str	r3, [sp, #16]
 8016a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a42:	4826      	ldr	r0, [pc, #152]	; (8016adc <_svfiprintf_r+0x1f0>)
 8016a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a48:	2206      	movs	r2, #6
 8016a4a:	f7e9 fcf9 	bl	8000440 <memchr>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d038      	beq.n	8016ac4 <_svfiprintf_r+0x1d8>
 8016a52:	4b23      	ldr	r3, [pc, #140]	; (8016ae0 <_svfiprintf_r+0x1f4>)
 8016a54:	bb1b      	cbnz	r3, 8016a9e <_svfiprintf_r+0x1b2>
 8016a56:	9b03      	ldr	r3, [sp, #12]
 8016a58:	3307      	adds	r3, #7
 8016a5a:	f023 0307 	bic.w	r3, r3, #7
 8016a5e:	3308      	adds	r3, #8
 8016a60:	9303      	str	r3, [sp, #12]
 8016a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a64:	4433      	add	r3, r6
 8016a66:	9309      	str	r3, [sp, #36]	; 0x24
 8016a68:	e767      	b.n	801693a <_svfiprintf_r+0x4e>
 8016a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a6e:	460c      	mov	r4, r1
 8016a70:	2001      	movs	r0, #1
 8016a72:	e7a5      	b.n	80169c0 <_svfiprintf_r+0xd4>
 8016a74:	2300      	movs	r3, #0
 8016a76:	3401      	adds	r4, #1
 8016a78:	9305      	str	r3, [sp, #20]
 8016a7a:	4619      	mov	r1, r3
 8016a7c:	f04f 0c0a 	mov.w	ip, #10
 8016a80:	4620      	mov	r0, r4
 8016a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a86:	3a30      	subs	r2, #48	; 0x30
 8016a88:	2a09      	cmp	r2, #9
 8016a8a:	d903      	bls.n	8016a94 <_svfiprintf_r+0x1a8>
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d0c5      	beq.n	8016a1c <_svfiprintf_r+0x130>
 8016a90:	9105      	str	r1, [sp, #20]
 8016a92:	e7c3      	b.n	8016a1c <_svfiprintf_r+0x130>
 8016a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a98:	4604      	mov	r4, r0
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	e7f0      	b.n	8016a80 <_svfiprintf_r+0x194>
 8016a9e:	ab03      	add	r3, sp, #12
 8016aa0:	9300      	str	r3, [sp, #0]
 8016aa2:	462a      	mov	r2, r5
 8016aa4:	4b0f      	ldr	r3, [pc, #60]	; (8016ae4 <_svfiprintf_r+0x1f8>)
 8016aa6:	a904      	add	r1, sp, #16
 8016aa8:	4638      	mov	r0, r7
 8016aaa:	f3af 8000 	nop.w
 8016aae:	1c42      	adds	r2, r0, #1
 8016ab0:	4606      	mov	r6, r0
 8016ab2:	d1d6      	bne.n	8016a62 <_svfiprintf_r+0x176>
 8016ab4:	89ab      	ldrh	r3, [r5, #12]
 8016ab6:	065b      	lsls	r3, r3, #25
 8016ab8:	f53f af2c 	bmi.w	8016914 <_svfiprintf_r+0x28>
 8016abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016abe:	b01d      	add	sp, #116	; 0x74
 8016ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac4:	ab03      	add	r3, sp, #12
 8016ac6:	9300      	str	r3, [sp, #0]
 8016ac8:	462a      	mov	r2, r5
 8016aca:	4b06      	ldr	r3, [pc, #24]	; (8016ae4 <_svfiprintf_r+0x1f8>)
 8016acc:	a904      	add	r1, sp, #16
 8016ace:	4638      	mov	r0, r7
 8016ad0:	f7fd f816 	bl	8013b00 <_printf_i>
 8016ad4:	e7eb      	b.n	8016aae <_svfiprintf_r+0x1c2>
 8016ad6:	bf00      	nop
 8016ad8:	0801d058 	.word	0x0801d058
 8016adc:	0801d062 	.word	0x0801d062
 8016ae0:	00000000 	.word	0x00000000
 8016ae4:	08016835 	.word	0x08016835
 8016ae8:	0801d05e 	.word	0x0801d05e

08016aec <_sungetc_r>:
 8016aec:	b538      	push	{r3, r4, r5, lr}
 8016aee:	1c4b      	adds	r3, r1, #1
 8016af0:	4614      	mov	r4, r2
 8016af2:	d103      	bne.n	8016afc <_sungetc_r+0x10>
 8016af4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016af8:	4628      	mov	r0, r5
 8016afa:	bd38      	pop	{r3, r4, r5, pc}
 8016afc:	8993      	ldrh	r3, [r2, #12]
 8016afe:	f023 0320 	bic.w	r3, r3, #32
 8016b02:	8193      	strh	r3, [r2, #12]
 8016b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b06:	6852      	ldr	r2, [r2, #4]
 8016b08:	b2cd      	uxtb	r5, r1
 8016b0a:	b18b      	cbz	r3, 8016b30 <_sungetc_r+0x44>
 8016b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	dd08      	ble.n	8016b24 <_sungetc_r+0x38>
 8016b12:	6823      	ldr	r3, [r4, #0]
 8016b14:	1e5a      	subs	r2, r3, #1
 8016b16:	6022      	str	r2, [r4, #0]
 8016b18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016b1c:	6863      	ldr	r3, [r4, #4]
 8016b1e:	3301      	adds	r3, #1
 8016b20:	6063      	str	r3, [r4, #4]
 8016b22:	e7e9      	b.n	8016af8 <_sungetc_r+0xc>
 8016b24:	4621      	mov	r1, r4
 8016b26:	f000 fbdf 	bl	80172e8 <__submore>
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	d0f1      	beq.n	8016b12 <_sungetc_r+0x26>
 8016b2e:	e7e1      	b.n	8016af4 <_sungetc_r+0x8>
 8016b30:	6921      	ldr	r1, [r4, #16]
 8016b32:	6823      	ldr	r3, [r4, #0]
 8016b34:	b151      	cbz	r1, 8016b4c <_sungetc_r+0x60>
 8016b36:	4299      	cmp	r1, r3
 8016b38:	d208      	bcs.n	8016b4c <_sungetc_r+0x60>
 8016b3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016b3e:	42a9      	cmp	r1, r5
 8016b40:	d104      	bne.n	8016b4c <_sungetc_r+0x60>
 8016b42:	3b01      	subs	r3, #1
 8016b44:	3201      	adds	r2, #1
 8016b46:	6023      	str	r3, [r4, #0]
 8016b48:	6062      	str	r2, [r4, #4]
 8016b4a:	e7d5      	b.n	8016af8 <_sungetc_r+0xc>
 8016b4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b54:	6363      	str	r3, [r4, #52]	; 0x34
 8016b56:	2303      	movs	r3, #3
 8016b58:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b5a:	4623      	mov	r3, r4
 8016b5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016b60:	6023      	str	r3, [r4, #0]
 8016b62:	2301      	movs	r3, #1
 8016b64:	e7dc      	b.n	8016b20 <_sungetc_r+0x34>

08016b66 <__ssrefill_r>:
 8016b66:	b510      	push	{r4, lr}
 8016b68:	460c      	mov	r4, r1
 8016b6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b6c:	b169      	cbz	r1, 8016b8a <__ssrefill_r+0x24>
 8016b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b72:	4299      	cmp	r1, r3
 8016b74:	d001      	beq.n	8016b7a <__ssrefill_r+0x14>
 8016b76:	f7fc fd11 	bl	801359c <_free_r>
 8016b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b7c:	6063      	str	r3, [r4, #4]
 8016b7e:	2000      	movs	r0, #0
 8016b80:	6360      	str	r0, [r4, #52]	; 0x34
 8016b82:	b113      	cbz	r3, 8016b8a <__ssrefill_r+0x24>
 8016b84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016b86:	6023      	str	r3, [r4, #0]
 8016b88:	bd10      	pop	{r4, pc}
 8016b8a:	6923      	ldr	r3, [r4, #16]
 8016b8c:	6023      	str	r3, [r4, #0]
 8016b8e:	2300      	movs	r3, #0
 8016b90:	6063      	str	r3, [r4, #4]
 8016b92:	89a3      	ldrh	r3, [r4, #12]
 8016b94:	f043 0320 	orr.w	r3, r3, #32
 8016b98:	81a3      	strh	r3, [r4, #12]
 8016b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b9e:	e7f3      	b.n	8016b88 <__ssrefill_r+0x22>

08016ba0 <__ssvfiscanf_r>:
 8016ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba4:	460c      	mov	r4, r1
 8016ba6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016baa:	2100      	movs	r1, #0
 8016bac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016bb0:	49a6      	ldr	r1, [pc, #664]	; (8016e4c <__ssvfiscanf_r+0x2ac>)
 8016bb2:	91a0      	str	r1, [sp, #640]	; 0x280
 8016bb4:	f10d 0804 	add.w	r8, sp, #4
 8016bb8:	49a5      	ldr	r1, [pc, #660]	; (8016e50 <__ssvfiscanf_r+0x2b0>)
 8016bba:	4fa6      	ldr	r7, [pc, #664]	; (8016e54 <__ssvfiscanf_r+0x2b4>)
 8016bbc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016e58 <__ssvfiscanf_r+0x2b8>
 8016bc0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016bc4:	4606      	mov	r6, r0
 8016bc6:	91a1      	str	r1, [sp, #644]	; 0x284
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	7813      	ldrb	r3, [r2, #0]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	f000 815a 	beq.w	8016e86 <__ssvfiscanf_r+0x2e6>
 8016bd2:	5dd9      	ldrb	r1, [r3, r7]
 8016bd4:	f011 0108 	ands.w	r1, r1, #8
 8016bd8:	f102 0501 	add.w	r5, r2, #1
 8016bdc:	d019      	beq.n	8016c12 <__ssvfiscanf_r+0x72>
 8016bde:	6863      	ldr	r3, [r4, #4]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	dd0f      	ble.n	8016c04 <__ssvfiscanf_r+0x64>
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	781a      	ldrb	r2, [r3, #0]
 8016be8:	5cba      	ldrb	r2, [r7, r2]
 8016bea:	0712      	lsls	r2, r2, #28
 8016bec:	d401      	bmi.n	8016bf2 <__ssvfiscanf_r+0x52>
 8016bee:	462a      	mov	r2, r5
 8016bf0:	e7eb      	b.n	8016bca <__ssvfiscanf_r+0x2a>
 8016bf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016bf4:	3201      	adds	r2, #1
 8016bf6:	9245      	str	r2, [sp, #276]	; 0x114
 8016bf8:	6862      	ldr	r2, [r4, #4]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	3a01      	subs	r2, #1
 8016bfe:	6062      	str	r2, [r4, #4]
 8016c00:	6023      	str	r3, [r4, #0]
 8016c02:	e7ec      	b.n	8016bde <__ssvfiscanf_r+0x3e>
 8016c04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c06:	4621      	mov	r1, r4
 8016c08:	4630      	mov	r0, r6
 8016c0a:	4798      	blx	r3
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d0e9      	beq.n	8016be4 <__ssvfiscanf_r+0x44>
 8016c10:	e7ed      	b.n	8016bee <__ssvfiscanf_r+0x4e>
 8016c12:	2b25      	cmp	r3, #37	; 0x25
 8016c14:	d012      	beq.n	8016c3c <__ssvfiscanf_r+0x9c>
 8016c16:	469a      	mov	sl, r3
 8016c18:	6863      	ldr	r3, [r4, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f340 8091 	ble.w	8016d42 <__ssvfiscanf_r+0x1a2>
 8016c20:	6822      	ldr	r2, [r4, #0]
 8016c22:	7813      	ldrb	r3, [r2, #0]
 8016c24:	4553      	cmp	r3, sl
 8016c26:	f040 812e 	bne.w	8016e86 <__ssvfiscanf_r+0x2e6>
 8016c2a:	6863      	ldr	r3, [r4, #4]
 8016c2c:	3b01      	subs	r3, #1
 8016c2e:	6063      	str	r3, [r4, #4]
 8016c30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016c32:	3201      	adds	r2, #1
 8016c34:	3301      	adds	r3, #1
 8016c36:	6022      	str	r2, [r4, #0]
 8016c38:	9345      	str	r3, [sp, #276]	; 0x114
 8016c3a:	e7d8      	b.n	8016bee <__ssvfiscanf_r+0x4e>
 8016c3c:	9141      	str	r1, [sp, #260]	; 0x104
 8016c3e:	9143      	str	r1, [sp, #268]	; 0x10c
 8016c40:	7853      	ldrb	r3, [r2, #1]
 8016c42:	2b2a      	cmp	r3, #42	; 0x2a
 8016c44:	bf02      	ittt	eq
 8016c46:	2310      	moveq	r3, #16
 8016c48:	1c95      	addeq	r5, r2, #2
 8016c4a:	9341      	streq	r3, [sp, #260]	; 0x104
 8016c4c:	220a      	movs	r2, #10
 8016c4e:	46aa      	mov	sl, r5
 8016c50:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016c54:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016c58:	2b09      	cmp	r3, #9
 8016c5a:	d91d      	bls.n	8016c98 <__ssvfiscanf_r+0xf8>
 8016c5c:	487e      	ldr	r0, [pc, #504]	; (8016e58 <__ssvfiscanf_r+0x2b8>)
 8016c5e:	2203      	movs	r2, #3
 8016c60:	f7e9 fbee 	bl	8000440 <memchr>
 8016c64:	b140      	cbz	r0, 8016c78 <__ssvfiscanf_r+0xd8>
 8016c66:	2301      	movs	r3, #1
 8016c68:	eba0 0009 	sub.w	r0, r0, r9
 8016c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8016c70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c72:	4318      	orrs	r0, r3
 8016c74:	9041      	str	r0, [sp, #260]	; 0x104
 8016c76:	4655      	mov	r5, sl
 8016c78:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c7c:	2b78      	cmp	r3, #120	; 0x78
 8016c7e:	d806      	bhi.n	8016c8e <__ssvfiscanf_r+0xee>
 8016c80:	2b57      	cmp	r3, #87	; 0x57
 8016c82:	d810      	bhi.n	8016ca6 <__ssvfiscanf_r+0x106>
 8016c84:	2b25      	cmp	r3, #37	; 0x25
 8016c86:	d0c6      	beq.n	8016c16 <__ssvfiscanf_r+0x76>
 8016c88:	d856      	bhi.n	8016d38 <__ssvfiscanf_r+0x198>
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d064      	beq.n	8016d58 <__ssvfiscanf_r+0x1b8>
 8016c8e:	2303      	movs	r3, #3
 8016c90:	9347      	str	r3, [sp, #284]	; 0x11c
 8016c92:	230a      	movs	r3, #10
 8016c94:	9342      	str	r3, [sp, #264]	; 0x108
 8016c96:	e071      	b.n	8016d7c <__ssvfiscanf_r+0x1dc>
 8016c98:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016c9a:	fb02 1103 	mla	r1, r2, r3, r1
 8016c9e:	3930      	subs	r1, #48	; 0x30
 8016ca0:	9143      	str	r1, [sp, #268]	; 0x10c
 8016ca2:	4655      	mov	r5, sl
 8016ca4:	e7d3      	b.n	8016c4e <__ssvfiscanf_r+0xae>
 8016ca6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016caa:	2a20      	cmp	r2, #32
 8016cac:	d8ef      	bhi.n	8016c8e <__ssvfiscanf_r+0xee>
 8016cae:	a101      	add	r1, pc, #4	; (adr r1, 8016cb4 <__ssvfiscanf_r+0x114>)
 8016cb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016cb4:	08016d67 	.word	0x08016d67
 8016cb8:	08016c8f 	.word	0x08016c8f
 8016cbc:	08016c8f 	.word	0x08016c8f
 8016cc0:	08016dc5 	.word	0x08016dc5
 8016cc4:	08016c8f 	.word	0x08016c8f
 8016cc8:	08016c8f 	.word	0x08016c8f
 8016ccc:	08016c8f 	.word	0x08016c8f
 8016cd0:	08016c8f 	.word	0x08016c8f
 8016cd4:	08016c8f 	.word	0x08016c8f
 8016cd8:	08016c8f 	.word	0x08016c8f
 8016cdc:	08016c8f 	.word	0x08016c8f
 8016ce0:	08016ddb 	.word	0x08016ddb
 8016ce4:	08016db1 	.word	0x08016db1
 8016ce8:	08016d3f 	.word	0x08016d3f
 8016cec:	08016d3f 	.word	0x08016d3f
 8016cf0:	08016d3f 	.word	0x08016d3f
 8016cf4:	08016c8f 	.word	0x08016c8f
 8016cf8:	08016db5 	.word	0x08016db5
 8016cfc:	08016c8f 	.word	0x08016c8f
 8016d00:	08016c8f 	.word	0x08016c8f
 8016d04:	08016c8f 	.word	0x08016c8f
 8016d08:	08016c8f 	.word	0x08016c8f
 8016d0c:	08016deb 	.word	0x08016deb
 8016d10:	08016dbd 	.word	0x08016dbd
 8016d14:	08016d5f 	.word	0x08016d5f
 8016d18:	08016c8f 	.word	0x08016c8f
 8016d1c:	08016c8f 	.word	0x08016c8f
 8016d20:	08016de7 	.word	0x08016de7
 8016d24:	08016c8f 	.word	0x08016c8f
 8016d28:	08016db1 	.word	0x08016db1
 8016d2c:	08016c8f 	.word	0x08016c8f
 8016d30:	08016c8f 	.word	0x08016c8f
 8016d34:	08016d67 	.word	0x08016d67
 8016d38:	3b45      	subs	r3, #69	; 0x45
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	d8a7      	bhi.n	8016c8e <__ssvfiscanf_r+0xee>
 8016d3e:	2305      	movs	r3, #5
 8016d40:	e01b      	b.n	8016d7a <__ssvfiscanf_r+0x1da>
 8016d42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d44:	4621      	mov	r1, r4
 8016d46:	4630      	mov	r0, r6
 8016d48:	4798      	blx	r3
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	f43f af68 	beq.w	8016c20 <__ssvfiscanf_r+0x80>
 8016d50:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f040 808d 	bne.w	8016e72 <__ssvfiscanf_r+0x2d2>
 8016d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d5c:	e08f      	b.n	8016e7e <__ssvfiscanf_r+0x2de>
 8016d5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016d60:	f042 0220 	orr.w	r2, r2, #32
 8016d64:	9241      	str	r2, [sp, #260]	; 0x104
 8016d66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016d6c:	9241      	str	r2, [sp, #260]	; 0x104
 8016d6e:	2210      	movs	r2, #16
 8016d70:	2b6f      	cmp	r3, #111	; 0x6f
 8016d72:	9242      	str	r2, [sp, #264]	; 0x108
 8016d74:	bf34      	ite	cc
 8016d76:	2303      	movcc	r3, #3
 8016d78:	2304      	movcs	r3, #4
 8016d7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8016d7c:	6863      	ldr	r3, [r4, #4]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	dd42      	ble.n	8016e08 <__ssvfiscanf_r+0x268>
 8016d82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d84:	0659      	lsls	r1, r3, #25
 8016d86:	d404      	bmi.n	8016d92 <__ssvfiscanf_r+0x1f2>
 8016d88:	6823      	ldr	r3, [r4, #0]
 8016d8a:	781a      	ldrb	r2, [r3, #0]
 8016d8c:	5cba      	ldrb	r2, [r7, r2]
 8016d8e:	0712      	lsls	r2, r2, #28
 8016d90:	d441      	bmi.n	8016e16 <__ssvfiscanf_r+0x276>
 8016d92:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016d94:	2b02      	cmp	r3, #2
 8016d96:	dc50      	bgt.n	8016e3a <__ssvfiscanf_r+0x29a>
 8016d98:	466b      	mov	r3, sp
 8016d9a:	4622      	mov	r2, r4
 8016d9c:	a941      	add	r1, sp, #260	; 0x104
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f000 f876 	bl	8016e90 <_scanf_chars>
 8016da4:	2801      	cmp	r0, #1
 8016da6:	d06e      	beq.n	8016e86 <__ssvfiscanf_r+0x2e6>
 8016da8:	2802      	cmp	r0, #2
 8016daa:	f47f af20 	bne.w	8016bee <__ssvfiscanf_r+0x4e>
 8016dae:	e7cf      	b.n	8016d50 <__ssvfiscanf_r+0x1b0>
 8016db0:	220a      	movs	r2, #10
 8016db2:	e7dd      	b.n	8016d70 <__ssvfiscanf_r+0x1d0>
 8016db4:	2300      	movs	r3, #0
 8016db6:	9342      	str	r3, [sp, #264]	; 0x108
 8016db8:	2303      	movs	r3, #3
 8016dba:	e7de      	b.n	8016d7a <__ssvfiscanf_r+0x1da>
 8016dbc:	2308      	movs	r3, #8
 8016dbe:	9342      	str	r3, [sp, #264]	; 0x108
 8016dc0:	2304      	movs	r3, #4
 8016dc2:	e7da      	b.n	8016d7a <__ssvfiscanf_r+0x1da>
 8016dc4:	4629      	mov	r1, r5
 8016dc6:	4640      	mov	r0, r8
 8016dc8:	f000 f9ce 	bl	8017168 <__sccl>
 8016dcc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dd2:	9341      	str	r3, [sp, #260]	; 0x104
 8016dd4:	4605      	mov	r5, r0
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	e7cf      	b.n	8016d7a <__ssvfiscanf_r+0x1da>
 8016dda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016de0:	9341      	str	r3, [sp, #260]	; 0x104
 8016de2:	2300      	movs	r3, #0
 8016de4:	e7c9      	b.n	8016d7a <__ssvfiscanf_r+0x1da>
 8016de6:	2302      	movs	r3, #2
 8016de8:	e7c7      	b.n	8016d7a <__ssvfiscanf_r+0x1da>
 8016dea:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016dec:	06c3      	lsls	r3, r0, #27
 8016dee:	f53f aefe 	bmi.w	8016bee <__ssvfiscanf_r+0x4e>
 8016df2:	9b00      	ldr	r3, [sp, #0]
 8016df4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016df6:	1d19      	adds	r1, r3, #4
 8016df8:	9100      	str	r1, [sp, #0]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	f010 0f01 	tst.w	r0, #1
 8016e00:	bf14      	ite	ne
 8016e02:	801a      	strhne	r2, [r3, #0]
 8016e04:	601a      	streq	r2, [r3, #0]
 8016e06:	e6f2      	b.n	8016bee <__ssvfiscanf_r+0x4e>
 8016e08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e0a:	4621      	mov	r1, r4
 8016e0c:	4630      	mov	r0, r6
 8016e0e:	4798      	blx	r3
 8016e10:	2800      	cmp	r0, #0
 8016e12:	d0b6      	beq.n	8016d82 <__ssvfiscanf_r+0x1e2>
 8016e14:	e79c      	b.n	8016d50 <__ssvfiscanf_r+0x1b0>
 8016e16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016e18:	3201      	adds	r2, #1
 8016e1a:	9245      	str	r2, [sp, #276]	; 0x114
 8016e1c:	6862      	ldr	r2, [r4, #4]
 8016e1e:	3a01      	subs	r2, #1
 8016e20:	2a00      	cmp	r2, #0
 8016e22:	6062      	str	r2, [r4, #4]
 8016e24:	dd02      	ble.n	8016e2c <__ssvfiscanf_r+0x28c>
 8016e26:	3301      	adds	r3, #1
 8016e28:	6023      	str	r3, [r4, #0]
 8016e2a:	e7ad      	b.n	8016d88 <__ssvfiscanf_r+0x1e8>
 8016e2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e2e:	4621      	mov	r1, r4
 8016e30:	4630      	mov	r0, r6
 8016e32:	4798      	blx	r3
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d0a7      	beq.n	8016d88 <__ssvfiscanf_r+0x1e8>
 8016e38:	e78a      	b.n	8016d50 <__ssvfiscanf_r+0x1b0>
 8016e3a:	2b04      	cmp	r3, #4
 8016e3c:	dc0e      	bgt.n	8016e5c <__ssvfiscanf_r+0x2bc>
 8016e3e:	466b      	mov	r3, sp
 8016e40:	4622      	mov	r2, r4
 8016e42:	a941      	add	r1, sp, #260	; 0x104
 8016e44:	4630      	mov	r0, r6
 8016e46:	f000 f87d 	bl	8016f44 <_scanf_i>
 8016e4a:	e7ab      	b.n	8016da4 <__ssvfiscanf_r+0x204>
 8016e4c:	08016aed 	.word	0x08016aed
 8016e50:	08016b67 	.word	0x08016b67
 8016e54:	0801cef3 	.word	0x0801cef3
 8016e58:	0801d05e 	.word	0x0801d05e
 8016e5c:	4b0b      	ldr	r3, [pc, #44]	; (8016e8c <__ssvfiscanf_r+0x2ec>)
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f43f aec5 	beq.w	8016bee <__ssvfiscanf_r+0x4e>
 8016e64:	466b      	mov	r3, sp
 8016e66:	4622      	mov	r2, r4
 8016e68:	a941      	add	r1, sp, #260	; 0x104
 8016e6a:	4630      	mov	r0, r6
 8016e6c:	f3af 8000 	nop.w
 8016e70:	e798      	b.n	8016da4 <__ssvfiscanf_r+0x204>
 8016e72:	89a3      	ldrh	r3, [r4, #12]
 8016e74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016e78:	bf18      	it	ne
 8016e7a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8016e7e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e86:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016e88:	e7f9      	b.n	8016e7e <__ssvfiscanf_r+0x2de>
 8016e8a:	bf00      	nop
 8016e8c:	00000000 	.word	0x00000000

08016e90 <_scanf_chars>:
 8016e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e94:	4615      	mov	r5, r2
 8016e96:	688a      	ldr	r2, [r1, #8]
 8016e98:	4680      	mov	r8, r0
 8016e9a:	460c      	mov	r4, r1
 8016e9c:	b932      	cbnz	r2, 8016eac <_scanf_chars+0x1c>
 8016e9e:	698a      	ldr	r2, [r1, #24]
 8016ea0:	2a00      	cmp	r2, #0
 8016ea2:	bf0c      	ite	eq
 8016ea4:	2201      	moveq	r2, #1
 8016ea6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8016eaa:	608a      	str	r2, [r1, #8]
 8016eac:	6822      	ldr	r2, [r4, #0]
 8016eae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016f40 <_scanf_chars+0xb0>
 8016eb2:	06d1      	lsls	r1, r2, #27
 8016eb4:	bf5f      	itttt	pl
 8016eb6:	681a      	ldrpl	r2, [r3, #0]
 8016eb8:	1d11      	addpl	r1, r2, #4
 8016eba:	6019      	strpl	r1, [r3, #0]
 8016ebc:	6816      	ldrpl	r6, [r2, #0]
 8016ebe:	2700      	movs	r7, #0
 8016ec0:	69a0      	ldr	r0, [r4, #24]
 8016ec2:	b188      	cbz	r0, 8016ee8 <_scanf_chars+0x58>
 8016ec4:	2801      	cmp	r0, #1
 8016ec6:	d107      	bne.n	8016ed8 <_scanf_chars+0x48>
 8016ec8:	682a      	ldr	r2, [r5, #0]
 8016eca:	7811      	ldrb	r1, [r2, #0]
 8016ecc:	6962      	ldr	r2, [r4, #20]
 8016ece:	5c52      	ldrb	r2, [r2, r1]
 8016ed0:	b952      	cbnz	r2, 8016ee8 <_scanf_chars+0x58>
 8016ed2:	2f00      	cmp	r7, #0
 8016ed4:	d031      	beq.n	8016f3a <_scanf_chars+0xaa>
 8016ed6:	e022      	b.n	8016f1e <_scanf_chars+0x8e>
 8016ed8:	2802      	cmp	r0, #2
 8016eda:	d120      	bne.n	8016f1e <_scanf_chars+0x8e>
 8016edc:	682b      	ldr	r3, [r5, #0]
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016ee4:	071b      	lsls	r3, r3, #28
 8016ee6:	d41a      	bmi.n	8016f1e <_scanf_chars+0x8e>
 8016ee8:	6823      	ldr	r3, [r4, #0]
 8016eea:	06da      	lsls	r2, r3, #27
 8016eec:	bf5e      	ittt	pl
 8016eee:	682b      	ldrpl	r3, [r5, #0]
 8016ef0:	781b      	ldrbpl	r3, [r3, #0]
 8016ef2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016ef6:	682a      	ldr	r2, [r5, #0]
 8016ef8:	686b      	ldr	r3, [r5, #4]
 8016efa:	3201      	adds	r2, #1
 8016efc:	602a      	str	r2, [r5, #0]
 8016efe:	68a2      	ldr	r2, [r4, #8]
 8016f00:	3b01      	subs	r3, #1
 8016f02:	3a01      	subs	r2, #1
 8016f04:	606b      	str	r3, [r5, #4]
 8016f06:	3701      	adds	r7, #1
 8016f08:	60a2      	str	r2, [r4, #8]
 8016f0a:	b142      	cbz	r2, 8016f1e <_scanf_chars+0x8e>
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	dcd7      	bgt.n	8016ec0 <_scanf_chars+0x30>
 8016f10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016f14:	4629      	mov	r1, r5
 8016f16:	4640      	mov	r0, r8
 8016f18:	4798      	blx	r3
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d0d0      	beq.n	8016ec0 <_scanf_chars+0x30>
 8016f1e:	6823      	ldr	r3, [r4, #0]
 8016f20:	f013 0310 	ands.w	r3, r3, #16
 8016f24:	d105      	bne.n	8016f32 <_scanf_chars+0xa2>
 8016f26:	68e2      	ldr	r2, [r4, #12]
 8016f28:	3201      	adds	r2, #1
 8016f2a:	60e2      	str	r2, [r4, #12]
 8016f2c:	69a2      	ldr	r2, [r4, #24]
 8016f2e:	b102      	cbz	r2, 8016f32 <_scanf_chars+0xa2>
 8016f30:	7033      	strb	r3, [r6, #0]
 8016f32:	6923      	ldr	r3, [r4, #16]
 8016f34:	443b      	add	r3, r7
 8016f36:	6123      	str	r3, [r4, #16]
 8016f38:	2000      	movs	r0, #0
 8016f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f3e:	bf00      	nop
 8016f40:	0801cef3 	.word	0x0801cef3

08016f44 <_scanf_i>:
 8016f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f48:	4698      	mov	r8, r3
 8016f4a:	4b76      	ldr	r3, [pc, #472]	; (8017124 <_scanf_i+0x1e0>)
 8016f4c:	460c      	mov	r4, r1
 8016f4e:	4682      	mov	sl, r0
 8016f50:	4616      	mov	r6, r2
 8016f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f56:	b087      	sub	sp, #28
 8016f58:	ab03      	add	r3, sp, #12
 8016f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016f5e:	4b72      	ldr	r3, [pc, #456]	; (8017128 <_scanf_i+0x1e4>)
 8016f60:	69a1      	ldr	r1, [r4, #24]
 8016f62:	4a72      	ldr	r2, [pc, #456]	; (801712c <_scanf_i+0x1e8>)
 8016f64:	2903      	cmp	r1, #3
 8016f66:	bf18      	it	ne
 8016f68:	461a      	movne	r2, r3
 8016f6a:	68a3      	ldr	r3, [r4, #8]
 8016f6c:	9201      	str	r2, [sp, #4]
 8016f6e:	1e5a      	subs	r2, r3, #1
 8016f70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016f74:	bf88      	it	hi
 8016f76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016f7a:	4627      	mov	r7, r4
 8016f7c:	bf82      	ittt	hi
 8016f7e:	eb03 0905 	addhi.w	r9, r3, r5
 8016f82:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016f86:	60a3      	strhi	r3, [r4, #8]
 8016f88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016f8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016f90:	bf98      	it	ls
 8016f92:	f04f 0900 	movls.w	r9, #0
 8016f96:	6023      	str	r3, [r4, #0]
 8016f98:	463d      	mov	r5, r7
 8016f9a:	f04f 0b00 	mov.w	fp, #0
 8016f9e:	6831      	ldr	r1, [r6, #0]
 8016fa0:	ab03      	add	r3, sp, #12
 8016fa2:	7809      	ldrb	r1, [r1, #0]
 8016fa4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016fa8:	2202      	movs	r2, #2
 8016faa:	f7e9 fa49 	bl	8000440 <memchr>
 8016fae:	b328      	cbz	r0, 8016ffc <_scanf_i+0xb8>
 8016fb0:	f1bb 0f01 	cmp.w	fp, #1
 8016fb4:	d159      	bne.n	801706a <_scanf_i+0x126>
 8016fb6:	6862      	ldr	r2, [r4, #4]
 8016fb8:	b92a      	cbnz	r2, 8016fc6 <_scanf_i+0x82>
 8016fba:	6822      	ldr	r2, [r4, #0]
 8016fbc:	2308      	movs	r3, #8
 8016fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016fc2:	6063      	str	r3, [r4, #4]
 8016fc4:	6022      	str	r2, [r4, #0]
 8016fc6:	6822      	ldr	r2, [r4, #0]
 8016fc8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016fcc:	6022      	str	r2, [r4, #0]
 8016fce:	68a2      	ldr	r2, [r4, #8]
 8016fd0:	1e51      	subs	r1, r2, #1
 8016fd2:	60a1      	str	r1, [r4, #8]
 8016fd4:	b192      	cbz	r2, 8016ffc <_scanf_i+0xb8>
 8016fd6:	6832      	ldr	r2, [r6, #0]
 8016fd8:	1c51      	adds	r1, r2, #1
 8016fda:	6031      	str	r1, [r6, #0]
 8016fdc:	7812      	ldrb	r2, [r2, #0]
 8016fde:	f805 2b01 	strb.w	r2, [r5], #1
 8016fe2:	6872      	ldr	r2, [r6, #4]
 8016fe4:	3a01      	subs	r2, #1
 8016fe6:	2a00      	cmp	r2, #0
 8016fe8:	6072      	str	r2, [r6, #4]
 8016fea:	dc07      	bgt.n	8016ffc <_scanf_i+0xb8>
 8016fec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016ff0:	4631      	mov	r1, r6
 8016ff2:	4650      	mov	r0, sl
 8016ff4:	4790      	blx	r2
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	f040 8085 	bne.w	8017106 <_scanf_i+0x1c2>
 8016ffc:	f10b 0b01 	add.w	fp, fp, #1
 8017000:	f1bb 0f03 	cmp.w	fp, #3
 8017004:	d1cb      	bne.n	8016f9e <_scanf_i+0x5a>
 8017006:	6863      	ldr	r3, [r4, #4]
 8017008:	b90b      	cbnz	r3, 801700e <_scanf_i+0xca>
 801700a:	230a      	movs	r3, #10
 801700c:	6063      	str	r3, [r4, #4]
 801700e:	6863      	ldr	r3, [r4, #4]
 8017010:	4947      	ldr	r1, [pc, #284]	; (8017130 <_scanf_i+0x1ec>)
 8017012:	6960      	ldr	r0, [r4, #20]
 8017014:	1ac9      	subs	r1, r1, r3
 8017016:	f000 f8a7 	bl	8017168 <__sccl>
 801701a:	f04f 0b00 	mov.w	fp, #0
 801701e:	68a3      	ldr	r3, [r4, #8]
 8017020:	6822      	ldr	r2, [r4, #0]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d03d      	beq.n	80170a2 <_scanf_i+0x15e>
 8017026:	6831      	ldr	r1, [r6, #0]
 8017028:	6960      	ldr	r0, [r4, #20]
 801702a:	f891 c000 	ldrb.w	ip, [r1]
 801702e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017032:	2800      	cmp	r0, #0
 8017034:	d035      	beq.n	80170a2 <_scanf_i+0x15e>
 8017036:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801703a:	d124      	bne.n	8017086 <_scanf_i+0x142>
 801703c:	0510      	lsls	r0, r2, #20
 801703e:	d522      	bpl.n	8017086 <_scanf_i+0x142>
 8017040:	f10b 0b01 	add.w	fp, fp, #1
 8017044:	f1b9 0f00 	cmp.w	r9, #0
 8017048:	d003      	beq.n	8017052 <_scanf_i+0x10e>
 801704a:	3301      	adds	r3, #1
 801704c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8017050:	60a3      	str	r3, [r4, #8]
 8017052:	6873      	ldr	r3, [r6, #4]
 8017054:	3b01      	subs	r3, #1
 8017056:	2b00      	cmp	r3, #0
 8017058:	6073      	str	r3, [r6, #4]
 801705a:	dd1b      	ble.n	8017094 <_scanf_i+0x150>
 801705c:	6833      	ldr	r3, [r6, #0]
 801705e:	3301      	adds	r3, #1
 8017060:	6033      	str	r3, [r6, #0]
 8017062:	68a3      	ldr	r3, [r4, #8]
 8017064:	3b01      	subs	r3, #1
 8017066:	60a3      	str	r3, [r4, #8]
 8017068:	e7d9      	b.n	801701e <_scanf_i+0xda>
 801706a:	f1bb 0f02 	cmp.w	fp, #2
 801706e:	d1ae      	bne.n	8016fce <_scanf_i+0x8a>
 8017070:	6822      	ldr	r2, [r4, #0]
 8017072:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017076:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801707a:	d1bf      	bne.n	8016ffc <_scanf_i+0xb8>
 801707c:	2310      	movs	r3, #16
 801707e:	6063      	str	r3, [r4, #4]
 8017080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017084:	e7a2      	b.n	8016fcc <_scanf_i+0x88>
 8017086:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801708a:	6022      	str	r2, [r4, #0]
 801708c:	780b      	ldrb	r3, [r1, #0]
 801708e:	f805 3b01 	strb.w	r3, [r5], #1
 8017092:	e7de      	b.n	8017052 <_scanf_i+0x10e>
 8017094:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017098:	4631      	mov	r1, r6
 801709a:	4650      	mov	r0, sl
 801709c:	4798      	blx	r3
 801709e:	2800      	cmp	r0, #0
 80170a0:	d0df      	beq.n	8017062 <_scanf_i+0x11e>
 80170a2:	6823      	ldr	r3, [r4, #0]
 80170a4:	05db      	lsls	r3, r3, #23
 80170a6:	d50d      	bpl.n	80170c4 <_scanf_i+0x180>
 80170a8:	42bd      	cmp	r5, r7
 80170aa:	d909      	bls.n	80170c0 <_scanf_i+0x17c>
 80170ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80170b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80170b4:	4632      	mov	r2, r6
 80170b6:	4650      	mov	r0, sl
 80170b8:	4798      	blx	r3
 80170ba:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80170be:	464d      	mov	r5, r9
 80170c0:	42bd      	cmp	r5, r7
 80170c2:	d02d      	beq.n	8017120 <_scanf_i+0x1dc>
 80170c4:	6822      	ldr	r2, [r4, #0]
 80170c6:	f012 0210 	ands.w	r2, r2, #16
 80170ca:	d113      	bne.n	80170f4 <_scanf_i+0x1b0>
 80170cc:	702a      	strb	r2, [r5, #0]
 80170ce:	6863      	ldr	r3, [r4, #4]
 80170d0:	9e01      	ldr	r6, [sp, #4]
 80170d2:	4639      	mov	r1, r7
 80170d4:	4650      	mov	r0, sl
 80170d6:	47b0      	blx	r6
 80170d8:	6821      	ldr	r1, [r4, #0]
 80170da:	f8d8 3000 	ldr.w	r3, [r8]
 80170de:	f011 0f20 	tst.w	r1, #32
 80170e2:	d013      	beq.n	801710c <_scanf_i+0x1c8>
 80170e4:	1d1a      	adds	r2, r3, #4
 80170e6:	f8c8 2000 	str.w	r2, [r8]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	6018      	str	r0, [r3, #0]
 80170ee:	68e3      	ldr	r3, [r4, #12]
 80170f0:	3301      	adds	r3, #1
 80170f2:	60e3      	str	r3, [r4, #12]
 80170f4:	1bed      	subs	r5, r5, r7
 80170f6:	44ab      	add	fp, r5
 80170f8:	6925      	ldr	r5, [r4, #16]
 80170fa:	445d      	add	r5, fp
 80170fc:	6125      	str	r5, [r4, #16]
 80170fe:	2000      	movs	r0, #0
 8017100:	b007      	add	sp, #28
 8017102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017106:	f04f 0b00 	mov.w	fp, #0
 801710a:	e7ca      	b.n	80170a2 <_scanf_i+0x15e>
 801710c:	1d1a      	adds	r2, r3, #4
 801710e:	f8c8 2000 	str.w	r2, [r8]
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	f011 0f01 	tst.w	r1, #1
 8017118:	bf14      	ite	ne
 801711a:	8018      	strhne	r0, [r3, #0]
 801711c:	6018      	streq	r0, [r3, #0]
 801711e:	e7e6      	b.n	80170ee <_scanf_i+0x1aa>
 8017120:	2001      	movs	r0, #1
 8017122:	e7ed      	b.n	8017100 <_scanf_i+0x1bc>
 8017124:	0801a5f8 	.word	0x0801a5f8
 8017128:	080172e5 	.word	0x080172e5
 801712c:	08015489 	.word	0x08015489
 8017130:	0801d995 	.word	0x0801d995

08017134 <_read_r>:
 8017134:	b538      	push	{r3, r4, r5, lr}
 8017136:	4d07      	ldr	r5, [pc, #28]	; (8017154 <_read_r+0x20>)
 8017138:	4604      	mov	r4, r0
 801713a:	4608      	mov	r0, r1
 801713c:	4611      	mov	r1, r2
 801713e:	2200      	movs	r2, #0
 8017140:	602a      	str	r2, [r5, #0]
 8017142:	461a      	mov	r2, r3
 8017144:	f7ea fb0a 	bl	800175c <_read>
 8017148:	1c43      	adds	r3, r0, #1
 801714a:	d102      	bne.n	8017152 <_read_r+0x1e>
 801714c:	682b      	ldr	r3, [r5, #0]
 801714e:	b103      	cbz	r3, 8017152 <_read_r+0x1e>
 8017150:	6023      	str	r3, [r4, #0]
 8017152:	bd38      	pop	{r3, r4, r5, pc}
 8017154:	20003e84 	.word	0x20003e84

08017158 <nan>:
 8017158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017160 <nan+0x8>
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop
 8017160:	00000000 	.word	0x00000000
 8017164:	7ff80000 	.word	0x7ff80000

08017168 <__sccl>:
 8017168:	b570      	push	{r4, r5, r6, lr}
 801716a:	780b      	ldrb	r3, [r1, #0]
 801716c:	4604      	mov	r4, r0
 801716e:	2b5e      	cmp	r3, #94	; 0x5e
 8017170:	bf0b      	itete	eq
 8017172:	784b      	ldrbeq	r3, [r1, #1]
 8017174:	1c48      	addne	r0, r1, #1
 8017176:	1c88      	addeq	r0, r1, #2
 8017178:	2200      	movne	r2, #0
 801717a:	bf08      	it	eq
 801717c:	2201      	moveq	r2, #1
 801717e:	1e61      	subs	r1, r4, #1
 8017180:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017184:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017188:	42a9      	cmp	r1, r5
 801718a:	d1fb      	bne.n	8017184 <__sccl+0x1c>
 801718c:	b90b      	cbnz	r3, 8017192 <__sccl+0x2a>
 801718e:	3801      	subs	r0, #1
 8017190:	bd70      	pop	{r4, r5, r6, pc}
 8017192:	f082 0201 	eor.w	r2, r2, #1
 8017196:	54e2      	strb	r2, [r4, r3]
 8017198:	4605      	mov	r5, r0
 801719a:	4628      	mov	r0, r5
 801719c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80171a0:	292d      	cmp	r1, #45	; 0x2d
 80171a2:	d006      	beq.n	80171b2 <__sccl+0x4a>
 80171a4:	295d      	cmp	r1, #93	; 0x5d
 80171a6:	d0f3      	beq.n	8017190 <__sccl+0x28>
 80171a8:	b909      	cbnz	r1, 80171ae <__sccl+0x46>
 80171aa:	4628      	mov	r0, r5
 80171ac:	e7f0      	b.n	8017190 <__sccl+0x28>
 80171ae:	460b      	mov	r3, r1
 80171b0:	e7f1      	b.n	8017196 <__sccl+0x2e>
 80171b2:	786e      	ldrb	r6, [r5, #1]
 80171b4:	2e5d      	cmp	r6, #93	; 0x5d
 80171b6:	d0fa      	beq.n	80171ae <__sccl+0x46>
 80171b8:	42b3      	cmp	r3, r6
 80171ba:	dcf8      	bgt.n	80171ae <__sccl+0x46>
 80171bc:	3502      	adds	r5, #2
 80171be:	4619      	mov	r1, r3
 80171c0:	3101      	adds	r1, #1
 80171c2:	428e      	cmp	r6, r1
 80171c4:	5462      	strb	r2, [r4, r1]
 80171c6:	dcfb      	bgt.n	80171c0 <__sccl+0x58>
 80171c8:	1af1      	subs	r1, r6, r3
 80171ca:	3901      	subs	r1, #1
 80171cc:	1c58      	adds	r0, r3, #1
 80171ce:	42b3      	cmp	r3, r6
 80171d0:	bfa8      	it	ge
 80171d2:	2100      	movge	r1, #0
 80171d4:	1843      	adds	r3, r0, r1
 80171d6:	e7e0      	b.n	801719a <__sccl+0x32>

080171d8 <strncmp>:
 80171d8:	b510      	push	{r4, lr}
 80171da:	b17a      	cbz	r2, 80171fc <strncmp+0x24>
 80171dc:	4603      	mov	r3, r0
 80171de:	3901      	subs	r1, #1
 80171e0:	1884      	adds	r4, r0, r2
 80171e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80171e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80171ea:	4290      	cmp	r0, r2
 80171ec:	d101      	bne.n	80171f2 <strncmp+0x1a>
 80171ee:	42a3      	cmp	r3, r4
 80171f0:	d101      	bne.n	80171f6 <strncmp+0x1e>
 80171f2:	1a80      	subs	r0, r0, r2
 80171f4:	bd10      	pop	{r4, pc}
 80171f6:	2800      	cmp	r0, #0
 80171f8:	d1f3      	bne.n	80171e2 <strncmp+0xa>
 80171fa:	e7fa      	b.n	80171f2 <strncmp+0x1a>
 80171fc:	4610      	mov	r0, r2
 80171fe:	e7f9      	b.n	80171f4 <strncmp+0x1c>

08017200 <_strtoul_l.constprop.0>:
 8017200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017204:	4f36      	ldr	r7, [pc, #216]	; (80172e0 <_strtoul_l.constprop.0+0xe0>)
 8017206:	4686      	mov	lr, r0
 8017208:	460d      	mov	r5, r1
 801720a:	4628      	mov	r0, r5
 801720c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017210:	5de6      	ldrb	r6, [r4, r7]
 8017212:	f016 0608 	ands.w	r6, r6, #8
 8017216:	d1f8      	bne.n	801720a <_strtoul_l.constprop.0+0xa>
 8017218:	2c2d      	cmp	r4, #45	; 0x2d
 801721a:	d12f      	bne.n	801727c <_strtoul_l.constprop.0+0x7c>
 801721c:	782c      	ldrb	r4, [r5, #0]
 801721e:	2601      	movs	r6, #1
 8017220:	1c85      	adds	r5, r0, #2
 8017222:	2b00      	cmp	r3, #0
 8017224:	d057      	beq.n	80172d6 <_strtoul_l.constprop.0+0xd6>
 8017226:	2b10      	cmp	r3, #16
 8017228:	d109      	bne.n	801723e <_strtoul_l.constprop.0+0x3e>
 801722a:	2c30      	cmp	r4, #48	; 0x30
 801722c:	d107      	bne.n	801723e <_strtoul_l.constprop.0+0x3e>
 801722e:	7828      	ldrb	r0, [r5, #0]
 8017230:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017234:	2858      	cmp	r0, #88	; 0x58
 8017236:	d149      	bne.n	80172cc <_strtoul_l.constprop.0+0xcc>
 8017238:	786c      	ldrb	r4, [r5, #1]
 801723a:	2310      	movs	r3, #16
 801723c:	3502      	adds	r5, #2
 801723e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017242:	2700      	movs	r7, #0
 8017244:	fbb8 f8f3 	udiv	r8, r8, r3
 8017248:	fb03 f908 	mul.w	r9, r3, r8
 801724c:	ea6f 0909 	mvn.w	r9, r9
 8017250:	4638      	mov	r0, r7
 8017252:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017256:	f1bc 0f09 	cmp.w	ip, #9
 801725a:	d814      	bhi.n	8017286 <_strtoul_l.constprop.0+0x86>
 801725c:	4664      	mov	r4, ip
 801725e:	42a3      	cmp	r3, r4
 8017260:	dd22      	ble.n	80172a8 <_strtoul_l.constprop.0+0xa8>
 8017262:	2f00      	cmp	r7, #0
 8017264:	db1d      	blt.n	80172a2 <_strtoul_l.constprop.0+0xa2>
 8017266:	4580      	cmp	r8, r0
 8017268:	d31b      	bcc.n	80172a2 <_strtoul_l.constprop.0+0xa2>
 801726a:	d101      	bne.n	8017270 <_strtoul_l.constprop.0+0x70>
 801726c:	45a1      	cmp	r9, r4
 801726e:	db18      	blt.n	80172a2 <_strtoul_l.constprop.0+0xa2>
 8017270:	fb00 4003 	mla	r0, r0, r3, r4
 8017274:	2701      	movs	r7, #1
 8017276:	f815 4b01 	ldrb.w	r4, [r5], #1
 801727a:	e7ea      	b.n	8017252 <_strtoul_l.constprop.0+0x52>
 801727c:	2c2b      	cmp	r4, #43	; 0x2b
 801727e:	bf04      	itt	eq
 8017280:	782c      	ldrbeq	r4, [r5, #0]
 8017282:	1c85      	addeq	r5, r0, #2
 8017284:	e7cd      	b.n	8017222 <_strtoul_l.constprop.0+0x22>
 8017286:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801728a:	f1bc 0f19 	cmp.w	ip, #25
 801728e:	d801      	bhi.n	8017294 <_strtoul_l.constprop.0+0x94>
 8017290:	3c37      	subs	r4, #55	; 0x37
 8017292:	e7e4      	b.n	801725e <_strtoul_l.constprop.0+0x5e>
 8017294:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017298:	f1bc 0f19 	cmp.w	ip, #25
 801729c:	d804      	bhi.n	80172a8 <_strtoul_l.constprop.0+0xa8>
 801729e:	3c57      	subs	r4, #87	; 0x57
 80172a0:	e7dd      	b.n	801725e <_strtoul_l.constprop.0+0x5e>
 80172a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80172a6:	e7e6      	b.n	8017276 <_strtoul_l.constprop.0+0x76>
 80172a8:	2f00      	cmp	r7, #0
 80172aa:	da07      	bge.n	80172bc <_strtoul_l.constprop.0+0xbc>
 80172ac:	2322      	movs	r3, #34	; 0x22
 80172ae:	f8ce 3000 	str.w	r3, [lr]
 80172b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172b6:	b932      	cbnz	r2, 80172c6 <_strtoul_l.constprop.0+0xc6>
 80172b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172bc:	b106      	cbz	r6, 80172c0 <_strtoul_l.constprop.0+0xc0>
 80172be:	4240      	negs	r0, r0
 80172c0:	2a00      	cmp	r2, #0
 80172c2:	d0f9      	beq.n	80172b8 <_strtoul_l.constprop.0+0xb8>
 80172c4:	b107      	cbz	r7, 80172c8 <_strtoul_l.constprop.0+0xc8>
 80172c6:	1e69      	subs	r1, r5, #1
 80172c8:	6011      	str	r1, [r2, #0]
 80172ca:	e7f5      	b.n	80172b8 <_strtoul_l.constprop.0+0xb8>
 80172cc:	2430      	movs	r4, #48	; 0x30
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d1b5      	bne.n	801723e <_strtoul_l.constprop.0+0x3e>
 80172d2:	2308      	movs	r3, #8
 80172d4:	e7b3      	b.n	801723e <_strtoul_l.constprop.0+0x3e>
 80172d6:	2c30      	cmp	r4, #48	; 0x30
 80172d8:	d0a9      	beq.n	801722e <_strtoul_l.constprop.0+0x2e>
 80172da:	230a      	movs	r3, #10
 80172dc:	e7af      	b.n	801723e <_strtoul_l.constprop.0+0x3e>
 80172de:	bf00      	nop
 80172e0:	0801cef3 	.word	0x0801cef3

080172e4 <_strtoul_r>:
 80172e4:	f7ff bf8c 	b.w	8017200 <_strtoul_l.constprop.0>

080172e8 <__submore>:
 80172e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172ec:	460c      	mov	r4, r1
 80172ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80172f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172f4:	4299      	cmp	r1, r3
 80172f6:	d11d      	bne.n	8017334 <__submore+0x4c>
 80172f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80172fc:	f7fc f9ba 	bl	8013674 <_malloc_r>
 8017300:	b918      	cbnz	r0, 801730a <__submore+0x22>
 8017302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801730a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801730e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017310:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017314:	6360      	str	r0, [r4, #52]	; 0x34
 8017316:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801731a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801731e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017322:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017326:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801732a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801732e:	6020      	str	r0, [r4, #0]
 8017330:	2000      	movs	r0, #0
 8017332:	e7e8      	b.n	8017306 <__submore+0x1e>
 8017334:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017336:	0077      	lsls	r7, r6, #1
 8017338:	463a      	mov	r2, r7
 801733a:	f7ff fa4c 	bl	80167d6 <_realloc_r>
 801733e:	4605      	mov	r5, r0
 8017340:	2800      	cmp	r0, #0
 8017342:	d0de      	beq.n	8017302 <__submore+0x1a>
 8017344:	eb00 0806 	add.w	r8, r0, r6
 8017348:	4601      	mov	r1, r0
 801734a:	4632      	mov	r2, r6
 801734c:	4640      	mov	r0, r8
 801734e:	f7fc f8f9 	bl	8013544 <memcpy>
 8017352:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017356:	f8c4 8000 	str.w	r8, [r4]
 801735a:	e7e9      	b.n	8017330 <__submore+0x48>

0801735c <__ascii_wctomb>:
 801735c:	b149      	cbz	r1, 8017372 <__ascii_wctomb+0x16>
 801735e:	2aff      	cmp	r2, #255	; 0xff
 8017360:	bf85      	ittet	hi
 8017362:	238a      	movhi	r3, #138	; 0x8a
 8017364:	6003      	strhi	r3, [r0, #0]
 8017366:	700a      	strbls	r2, [r1, #0]
 8017368:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801736c:	bf98      	it	ls
 801736e:	2001      	movls	r0, #1
 8017370:	4770      	bx	lr
 8017372:	4608      	mov	r0, r1
 8017374:	4770      	bx	lr
	...

08017378 <__assert_func>:
 8017378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801737a:	4614      	mov	r4, r2
 801737c:	461a      	mov	r2, r3
 801737e:	4b09      	ldr	r3, [pc, #36]	; (80173a4 <__assert_func+0x2c>)
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	4605      	mov	r5, r0
 8017384:	68d8      	ldr	r0, [r3, #12]
 8017386:	b14c      	cbz	r4, 801739c <__assert_func+0x24>
 8017388:	4b07      	ldr	r3, [pc, #28]	; (80173a8 <__assert_func+0x30>)
 801738a:	9100      	str	r1, [sp, #0]
 801738c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017390:	4906      	ldr	r1, [pc, #24]	; (80173ac <__assert_func+0x34>)
 8017392:	462b      	mov	r3, r5
 8017394:	f7fb ff4a 	bl	801322c <fiprintf>
 8017398:	f000 f814 	bl	80173c4 <abort>
 801739c:	4b04      	ldr	r3, [pc, #16]	; (80173b0 <__assert_func+0x38>)
 801739e:	461c      	mov	r4, r3
 80173a0:	e7f3      	b.n	801738a <__assert_func+0x12>
 80173a2:	bf00      	nop
 80173a4:	20000088 	.word	0x20000088
 80173a8:	0801d997 	.word	0x0801d997
 80173ac:	0801d9a4 	.word	0x0801d9a4
 80173b0:	0801d9d2 	.word	0x0801d9d2

080173b4 <_malloc_usable_size_r>:
 80173b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173b8:	1f18      	subs	r0, r3, #4
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	bfbc      	itt	lt
 80173be:	580b      	ldrlt	r3, [r1, r0]
 80173c0:	18c0      	addlt	r0, r0, r3
 80173c2:	4770      	bx	lr

080173c4 <abort>:
 80173c4:	b508      	push	{r3, lr}
 80173c6:	2006      	movs	r0, #6
 80173c8:	f000 f82c 	bl	8017424 <raise>
 80173cc:	2001      	movs	r0, #1
 80173ce:	f7ea f9bb 	bl	8001748 <_exit>

080173d2 <_raise_r>:
 80173d2:	291f      	cmp	r1, #31
 80173d4:	b538      	push	{r3, r4, r5, lr}
 80173d6:	4604      	mov	r4, r0
 80173d8:	460d      	mov	r5, r1
 80173da:	d904      	bls.n	80173e6 <_raise_r+0x14>
 80173dc:	2316      	movs	r3, #22
 80173de:	6003      	str	r3, [r0, #0]
 80173e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173e4:	bd38      	pop	{r3, r4, r5, pc}
 80173e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80173e8:	b112      	cbz	r2, 80173f0 <_raise_r+0x1e>
 80173ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173ee:	b94b      	cbnz	r3, 8017404 <_raise_r+0x32>
 80173f0:	4620      	mov	r0, r4
 80173f2:	f000 f831 	bl	8017458 <_getpid_r>
 80173f6:	462a      	mov	r2, r5
 80173f8:	4601      	mov	r1, r0
 80173fa:	4620      	mov	r0, r4
 80173fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017400:	f000 b818 	b.w	8017434 <_kill_r>
 8017404:	2b01      	cmp	r3, #1
 8017406:	d00a      	beq.n	801741e <_raise_r+0x4c>
 8017408:	1c59      	adds	r1, r3, #1
 801740a:	d103      	bne.n	8017414 <_raise_r+0x42>
 801740c:	2316      	movs	r3, #22
 801740e:	6003      	str	r3, [r0, #0]
 8017410:	2001      	movs	r0, #1
 8017412:	e7e7      	b.n	80173e4 <_raise_r+0x12>
 8017414:	2400      	movs	r4, #0
 8017416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801741a:	4628      	mov	r0, r5
 801741c:	4798      	blx	r3
 801741e:	2000      	movs	r0, #0
 8017420:	e7e0      	b.n	80173e4 <_raise_r+0x12>
	...

08017424 <raise>:
 8017424:	4b02      	ldr	r3, [pc, #8]	; (8017430 <raise+0xc>)
 8017426:	4601      	mov	r1, r0
 8017428:	6818      	ldr	r0, [r3, #0]
 801742a:	f7ff bfd2 	b.w	80173d2 <_raise_r>
 801742e:	bf00      	nop
 8017430:	20000088 	.word	0x20000088

08017434 <_kill_r>:
 8017434:	b538      	push	{r3, r4, r5, lr}
 8017436:	4d07      	ldr	r5, [pc, #28]	; (8017454 <_kill_r+0x20>)
 8017438:	2300      	movs	r3, #0
 801743a:	4604      	mov	r4, r0
 801743c:	4608      	mov	r0, r1
 801743e:	4611      	mov	r1, r2
 8017440:	602b      	str	r3, [r5, #0]
 8017442:	f7ea f971 	bl	8001728 <_kill>
 8017446:	1c43      	adds	r3, r0, #1
 8017448:	d102      	bne.n	8017450 <_kill_r+0x1c>
 801744a:	682b      	ldr	r3, [r5, #0]
 801744c:	b103      	cbz	r3, 8017450 <_kill_r+0x1c>
 801744e:	6023      	str	r3, [r4, #0]
 8017450:	bd38      	pop	{r3, r4, r5, pc}
 8017452:	bf00      	nop
 8017454:	20003e84 	.word	0x20003e84

08017458 <_getpid_r>:
 8017458:	f7ea b95e 	b.w	8001718 <_getpid>

0801745c <_gettimeofday>:
 801745c:	4b02      	ldr	r3, [pc, #8]	; (8017468 <_gettimeofday+0xc>)
 801745e:	2258      	movs	r2, #88	; 0x58
 8017460:	601a      	str	r2, [r3, #0]
 8017462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017466:	4770      	bx	lr
 8017468:	20003e84 	.word	0x20003e84

0801746c <_init>:
 801746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801746e:	bf00      	nop
 8017470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017472:	bc08      	pop	{r3}
 8017474:	469e      	mov	lr, r3
 8017476:	4770      	bx	lr

08017478 <_fini>:
 8017478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801747a:	bf00      	nop
 801747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801747e:	bc08      	pop	{r3}
 8017480:	469e      	mov	lr, r3
 8017482:	4770      	bx	lr
