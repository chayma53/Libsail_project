
Fx_uSD_File_Edit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c24  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08011de4  08011de4  00021de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ed0  08011ed0  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08011ed0  08011ed0  00021ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ed8  08011ed8  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ed8  08011ed8  00021ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011edc  08011edc  00021edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08011ee0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000481c  20000090  20000090  00030090  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200048ac  200048ac  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004cb23  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a4c1  00000000  00000000  0007cbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b58  00000000  00000000  000870a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001438  00000000  00000000  00088bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034f51  00000000  00000000  0008a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003cf56  00000000  00000000  000bef81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109abf  00000000  00000000  000fbed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00205996  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c4  00000000  00000000  002059e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  0020aeac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011dcc 	.word	0x08011dcc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	08011dcc 	.word	0x08011dcc

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4919      	ldr	r1, [pc, #100]	; (800026c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4915      	ldr	r1, [pc, #84]	; (8000278 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490f      	ldr	r1, [pc, #60]	; (800027c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800024c:	f7ff bffe 	b.w	800024c <__tx_SVCallHandler>

08000250 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000250:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000252:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000256:	4770      	bx	lr

08000258 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000258:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800025a:	f000 f891 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000262:	4770      	bx	lr

08000264 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_NMIHandler>

08000268 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800026c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000270:	20004298 	.word	0x20004298
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000274:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000278:	001b773f 	.word	0x001b773f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	40ff0000 	.word	0x40ff0000

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20004338 	.word	0x20004338
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	2000429c 	.word	0x2000429c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	200042a0 	.word	0x200042a0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	200048a8 	.word	0x200048a8

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f010 ff4d 	bl	8011278 <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f010 fe38 	bl	8011058 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	20004344 	.word	0x20004344
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	200048a8 	.word	0x200048a8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	20004348 	.word	0x20004348
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	200043d4 	.word	0x200043d4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	200043d8 	.word	0x200043d8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	200043d0 	.word	0x200043d0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	200043cc 	.word	0x200043cc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20004338 	.word	0x20004338
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	2000429c 	.word	0x2000429c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	200042a0 	.word	0x200042a0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04

08000438 <__aeabi_uldivmod>:
 8000438:	b953      	cbnz	r3, 8000450 <__aeabi_uldivmod+0x18>
 800043a:	b94a      	cbnz	r2, 8000450 <__aeabi_uldivmod+0x18>
 800043c:	2900      	cmp	r1, #0
 800043e:	bf08      	it	eq
 8000440:	2800      	cmpeq	r0, #0
 8000442:	bf1c      	itt	ne
 8000444:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000448:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800044c:	f000 b974 	b.w	8000738 <__aeabi_idiv0>
 8000450:	f1ad 0c08 	sub.w	ip, sp, #8
 8000454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000464:	b004      	add	sp, #16
 8000466:	4770      	bx	lr

08000468 <__udivmoddi4>:
 8000468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800046c:	9d08      	ldr	r5, [sp, #32]
 800046e:	4604      	mov	r4, r0
 8000470:	468e      	mov	lr, r1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d14d      	bne.n	8000512 <__udivmoddi4+0xaa>
 8000476:	428a      	cmp	r2, r1
 8000478:	4694      	mov	ip, r2
 800047a:	d969      	bls.n	8000550 <__udivmoddi4+0xe8>
 800047c:	fab2 f282 	clz	r2, r2
 8000480:	b152      	cbz	r2, 8000498 <__udivmoddi4+0x30>
 8000482:	fa01 f302 	lsl.w	r3, r1, r2
 8000486:	f1c2 0120 	rsb	r1, r2, #32
 800048a:	fa20 f101 	lsr.w	r1, r0, r1
 800048e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000492:	ea41 0e03 	orr.w	lr, r1, r3
 8000496:	4094      	lsls	r4, r2
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	0c21      	lsrs	r1, r4, #16
 800049e:	fbbe f6f8 	udiv	r6, lr, r8
 80004a2:	fa1f f78c 	uxth.w	r7, ip
 80004a6:	fb08 e316 	mls	r3, r8, r6, lr
 80004aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004ae:	fb06 f107 	mul.w	r1, r6, r7
 80004b2:	4299      	cmp	r1, r3
 80004b4:	d90a      	bls.n	80004cc <__udivmoddi4+0x64>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004be:	f080 811f 	bcs.w	8000700 <__udivmoddi4+0x298>
 80004c2:	4299      	cmp	r1, r3
 80004c4:	f240 811c 	bls.w	8000700 <__udivmoddi4+0x298>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d4:	fb08 3310 	mls	r3, r8, r0, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb00 f707 	mul.w	r7, r0, r7
 80004e0:	42a7      	cmp	r7, r4
 80004e2:	d90a      	bls.n	80004fa <__udivmoddi4+0x92>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004ec:	f080 810a 	bcs.w	8000704 <__udivmoddi4+0x29c>
 80004f0:	42a7      	cmp	r7, r4
 80004f2:	f240 8107 	bls.w	8000704 <__udivmoddi4+0x29c>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	1be4      	subs	r4, r4, r7
 8000500:	2600      	movs	r6, #0
 8000502:	b11d      	cbz	r5, 800050c <__udivmoddi4+0xa4>
 8000504:	40d4      	lsrs	r4, r2
 8000506:	2300      	movs	r3, #0
 8000508:	e9c5 4300 	strd	r4, r3, [r5]
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	428b      	cmp	r3, r1
 8000514:	d909      	bls.n	800052a <__udivmoddi4+0xc2>
 8000516:	2d00      	cmp	r5, #0
 8000518:	f000 80ef 	beq.w	80006fa <__udivmoddi4+0x292>
 800051c:	2600      	movs	r6, #0
 800051e:	e9c5 0100 	strd	r0, r1, [r5]
 8000522:	4630      	mov	r0, r6
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	fab3 f683 	clz	r6, r3
 800052e:	2e00      	cmp	r6, #0
 8000530:	d14a      	bne.n	80005c8 <__udivmoddi4+0x160>
 8000532:	428b      	cmp	r3, r1
 8000534:	d302      	bcc.n	800053c <__udivmoddi4+0xd4>
 8000536:	4282      	cmp	r2, r0
 8000538:	f200 80f9 	bhi.w	800072e <__udivmoddi4+0x2c6>
 800053c:	1a84      	subs	r4, r0, r2
 800053e:	eb61 0303 	sbc.w	r3, r1, r3
 8000542:	2001      	movs	r0, #1
 8000544:	469e      	mov	lr, r3
 8000546:	2d00      	cmp	r5, #0
 8000548:	d0e0      	beq.n	800050c <__udivmoddi4+0xa4>
 800054a:	e9c5 4e00 	strd	r4, lr, [r5]
 800054e:	e7dd      	b.n	800050c <__udivmoddi4+0xa4>
 8000550:	b902      	cbnz	r2, 8000554 <__udivmoddi4+0xec>
 8000552:	deff      	udf	#255	; 0xff
 8000554:	fab2 f282 	clz	r2, r2
 8000558:	2a00      	cmp	r2, #0
 800055a:	f040 8092 	bne.w	8000682 <__udivmoddi4+0x21a>
 800055e:	eba1 010c 	sub.w	r1, r1, ip
 8000562:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000566:	fa1f fe8c 	uxth.w	lr, ip
 800056a:	2601      	movs	r6, #1
 800056c:	0c20      	lsrs	r0, r4, #16
 800056e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000572:	fb07 1113 	mls	r1, r7, r3, r1
 8000576:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800057a:	fb0e f003 	mul.w	r0, lr, r3
 800057e:	4288      	cmp	r0, r1
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x12c>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800058a:	d202      	bcs.n	8000592 <__udivmoddi4+0x12a>
 800058c:	4288      	cmp	r0, r1
 800058e:	f200 80cb 	bhi.w	8000728 <__udivmoddi4+0x2c0>
 8000592:	4643      	mov	r3, r8
 8000594:	1a09      	subs	r1, r1, r0
 8000596:	b2a4      	uxth	r4, r4
 8000598:	fbb1 f0f7 	udiv	r0, r1, r7
 800059c:	fb07 1110 	mls	r1, r7, r0, r1
 80005a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005a4:	fb0e fe00 	mul.w	lr, lr, r0
 80005a8:	45a6      	cmp	lr, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x156>
 80005ac:	eb1c 0404 	adds.w	r4, ip, r4
 80005b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005b4:	d202      	bcs.n	80005bc <__udivmoddi4+0x154>
 80005b6:	45a6      	cmp	lr, r4
 80005b8:	f200 80bb 	bhi.w	8000732 <__udivmoddi4+0x2ca>
 80005bc:	4608      	mov	r0, r1
 80005be:	eba4 040e 	sub.w	r4, r4, lr
 80005c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x9a>
 80005c8:	f1c6 0720 	rsb	r7, r6, #32
 80005cc:	40b3      	lsls	r3, r6
 80005ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80005d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005d6:	fa20 f407 	lsr.w	r4, r0, r7
 80005da:	fa01 f306 	lsl.w	r3, r1, r6
 80005de:	431c      	orrs	r4, r3
 80005e0:	40f9      	lsrs	r1, r7
 80005e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005e6:	fa00 f306 	lsl.w	r3, r0, r6
 80005ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ee:	0c20      	lsrs	r0, r4, #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fb09 1118 	mls	r1, r9, r8, r1
 80005f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000600:	4288      	cmp	r0, r1
 8000602:	fa02 f206 	lsl.w	r2, r2, r6
 8000606:	d90b      	bls.n	8000620 <__udivmoddi4+0x1b8>
 8000608:	eb1c 0101 	adds.w	r1, ip, r1
 800060c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000610:	f080 8088 	bcs.w	8000724 <__udivmoddi4+0x2bc>
 8000614:	4288      	cmp	r0, r1
 8000616:	f240 8085 	bls.w	8000724 <__udivmoddi4+0x2bc>
 800061a:	f1a8 0802 	sub.w	r8, r8, #2
 800061e:	4461      	add	r1, ip
 8000620:	1a09      	subs	r1, r1, r0
 8000622:	b2a4      	uxth	r4, r4
 8000624:	fbb1 f0f9 	udiv	r0, r1, r9
 8000628:	fb09 1110 	mls	r1, r9, r0, r1
 800062c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000630:	fb00 fe0e 	mul.w	lr, r0, lr
 8000634:	458e      	cmp	lr, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x1e2>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000640:	d26c      	bcs.n	800071c <__udivmoddi4+0x2b4>
 8000642:	458e      	cmp	lr, r1
 8000644:	d96a      	bls.n	800071c <__udivmoddi4+0x2b4>
 8000646:	3802      	subs	r0, #2
 8000648:	4461      	add	r1, ip
 800064a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800064e:	fba0 9402 	umull	r9, r4, r0, r2
 8000652:	eba1 010e 	sub.w	r1, r1, lr
 8000656:	42a1      	cmp	r1, r4
 8000658:	46c8      	mov	r8, r9
 800065a:	46a6      	mov	lr, r4
 800065c:	d356      	bcc.n	800070c <__udivmoddi4+0x2a4>
 800065e:	d053      	beq.n	8000708 <__udivmoddi4+0x2a0>
 8000660:	b15d      	cbz	r5, 800067a <__udivmoddi4+0x212>
 8000662:	ebb3 0208 	subs.w	r2, r3, r8
 8000666:	eb61 010e 	sbc.w	r1, r1, lr
 800066a:	fa01 f707 	lsl.w	r7, r1, r7
 800066e:	fa22 f306 	lsr.w	r3, r2, r6
 8000672:	40f1      	lsrs	r1, r6
 8000674:	431f      	orrs	r7, r3
 8000676:	e9c5 7100 	strd	r7, r1, [r5]
 800067a:	2600      	movs	r6, #0
 800067c:	4631      	mov	r1, r6
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	40d8      	lsrs	r0, r3
 8000688:	fa0c fc02 	lsl.w	ip, ip, r2
 800068c:	fa21 f303 	lsr.w	r3, r1, r3
 8000690:	4091      	lsls	r1, r2
 8000692:	4301      	orrs	r1, r0
 8000694:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000698:	fa1f fe8c 	uxth.w	lr, ip
 800069c:	fbb3 f0f7 	udiv	r0, r3, r7
 80006a0:	fb07 3610 	mls	r6, r7, r0, r3
 80006a4:	0c0b      	lsrs	r3, r1, #16
 80006a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006aa:	fb00 f60e 	mul.w	r6, r0, lr
 80006ae:	429e      	cmp	r6, r3
 80006b0:	fa04 f402 	lsl.w	r4, r4, r2
 80006b4:	d908      	bls.n	80006c8 <__udivmoddi4+0x260>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006be:	d22f      	bcs.n	8000720 <__udivmoddi4+0x2b8>
 80006c0:	429e      	cmp	r6, r3
 80006c2:	d92d      	bls.n	8000720 <__udivmoddi4+0x2b8>
 80006c4:	3802      	subs	r0, #2
 80006c6:	4463      	add	r3, ip
 80006c8:	1b9b      	subs	r3, r3, r6
 80006ca:	b289      	uxth	r1, r1
 80006cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80006d0:	fb07 3316 	mls	r3, r7, r6, r3
 80006d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d8:	fb06 f30e 	mul.w	r3, r6, lr
 80006dc:	428b      	cmp	r3, r1
 80006de:	d908      	bls.n	80006f2 <__udivmoddi4+0x28a>
 80006e0:	eb1c 0101 	adds.w	r1, ip, r1
 80006e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80006e8:	d216      	bcs.n	8000718 <__udivmoddi4+0x2b0>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d914      	bls.n	8000718 <__udivmoddi4+0x2b0>
 80006ee:	3e02      	subs	r6, #2
 80006f0:	4461      	add	r1, ip
 80006f2:	1ac9      	subs	r1, r1, r3
 80006f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006f8:	e738      	b.n	800056c <__udivmoddi4+0x104>
 80006fa:	462e      	mov	r6, r5
 80006fc:	4628      	mov	r0, r5
 80006fe:	e705      	b.n	800050c <__udivmoddi4+0xa4>
 8000700:	4606      	mov	r6, r0
 8000702:	e6e3      	b.n	80004cc <__udivmoddi4+0x64>
 8000704:	4618      	mov	r0, r3
 8000706:	e6f8      	b.n	80004fa <__udivmoddi4+0x92>
 8000708:	454b      	cmp	r3, r9
 800070a:	d2a9      	bcs.n	8000660 <__udivmoddi4+0x1f8>
 800070c:	ebb9 0802 	subs.w	r8, r9, r2
 8000710:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000714:	3801      	subs	r0, #1
 8000716:	e7a3      	b.n	8000660 <__udivmoddi4+0x1f8>
 8000718:	4646      	mov	r6, r8
 800071a:	e7ea      	b.n	80006f2 <__udivmoddi4+0x28a>
 800071c:	4620      	mov	r0, r4
 800071e:	e794      	b.n	800064a <__udivmoddi4+0x1e2>
 8000720:	4640      	mov	r0, r8
 8000722:	e7d1      	b.n	80006c8 <__udivmoddi4+0x260>
 8000724:	46d0      	mov	r8, sl
 8000726:	e77b      	b.n	8000620 <__udivmoddi4+0x1b8>
 8000728:	3b02      	subs	r3, #2
 800072a:	4461      	add	r1, ip
 800072c:	e732      	b.n	8000594 <__udivmoddi4+0x12c>
 800072e:	4630      	mov	r0, r6
 8000730:	e709      	b.n	8000546 <__udivmoddi4+0xde>
 8000732:	4464      	add	r4, ip
 8000734:	3802      	subs	r0, #2
 8000736:	e742      	b.n	80005be <__udivmoddi4+0x156>

08000738 <__aeabi_idiv0>:
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000744:	2334      	movs	r3, #52	; 0x34
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074c:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <tx_application_define+0x74>)
 800074e:	4919      	ldr	r1, [pc, #100]	; (80007b4 <tx_application_define+0x78>)
 8000750:	4819      	ldr	r0, [pc, #100]	; (80007b8 <tx_application_define+0x7c>)
 8000752:	f011 f83b 	bl	80117cc <_txe_byte_pool_create>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 800075c:	f000 f97e 	bl	8000a5c <Error_Handler>
 8000760:	e009      	b.n	8000776 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <tx_application_define+0x7c>)
 8000764:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 f82e 	bl	80007c8 <App_ThreadX_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 8000772:	f000 f973 	bl	8000a5c <Error_Handler>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000776:	2334      	movs	r3, #52	; 0x34
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <tx_application_define+0x80>)
 8000780:	490f      	ldr	r1, [pc, #60]	; (80007c0 <tx_application_define+0x84>)
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <tx_application_define+0x88>)
 8000784:	f011 f822 	bl	80117cc <_txe_byte_pool_create>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <tx_application_define+0x58>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Error */
    Error_Handler();
 800078e:	f000 f965 	bl	8000a5c <Error_Handler>
    /* USER CODE BEGIN MX_FileX_Init_Success */

    /* USER CODE END MX_FileX_Init_Success */
  }

}
 8000792:	e009      	b.n	80007a8 <tx_application_define+0x6c>
    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <tx_application_define+0x88>)
 8000796:	60fb      	str	r3, [r7, #12]
    if (MX_FileX_Init(memory_ptr) != FX_SUCCESS)
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f000 fb65 	bl	8000e68 <MX_FileX_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <tx_application_define+0x6c>
      Error_Handler();
 80007a4:	f000 f95a 	bl	8000a5c <Error_Handler>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000ac 	.word	0x200000ac
 80007b4:	08011de4 	.word	0x08011de4
 80007b8:	200004ac 	.word	0x200004ac
 80007bc:	200004e0 	.word	0x200004e0
 80007c0:	08011df8 	.word	0x08011df8
 80007c4:	200014e0 	.word	0x200014e0

080007c8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80007ea:	f00e fd91 	bl	800f310 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fdb1 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f80d 	bl	8000818 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LED */
  BSP_LED_Init(LED_GREEN);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fcde 	bl	80011c0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000804:	2002      	movs	r0, #2
 8000806:	f000 fcdb 	bl	80011c0 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f8d1 	bl	80009b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800080e:	f000 f8a7 	bl	8000960 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000812:	f7ff ffe8 	bl	80007e6 <MX_ThreadX_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0x24>

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f011 fac8 	bl	8011dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <SystemClock_Config+0xe0>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <SystemClock_Config+0xe0>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <SystemClock_Config+0xe0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <SystemClock_Config+0xe4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a26      	ldr	r2, [pc, #152]	; (80008fc <SystemClock_Config+0xe4>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <SystemClock_Config+0xe4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800088c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000896:	2308      	movs	r3, #8
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fa88 	bl	8002db8 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ae:	f000 f8d5 	bl	8000a5c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b2:	f001 fdb5 	bl	8002420 <HAL_PWREx_EnableOverDrive>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008bc:	f000 f8ce 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2105      	movs	r1, #5
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fdee 	bl	80024c0 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80008ea:	f000 f8b7 	bl	8000a5c <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	; 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_SDIO_SD_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 8000930:	f002 fcc6 	bl	80032c0 <HAL_SD_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800093a:	f000 f88f 	bl	8000a5c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_SDIO_SD_Init+0x58>)
 8000944:	f003 fa7a 	bl	8003e3c <HAL_SD_ConfigWideBusOperation>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f885 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20001514 	.word	0x20001514
 800095c:	40012c00 	.word	0x40012c00

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_DMA_Init+0x4c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <MX_DMA_Init+0x4c>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_DMA_Init+0x4c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	203b      	movs	r0, #59	; 0x3b
 8000988:	f000 fe2a 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800098c:	203b      	movs	r0, #59	; 0x3b
 800098e:	f000 fe43 	bl	8001618 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	2045      	movs	r0, #69	; 0x45
 8000998:	f000 fe22 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800099c:	2045      	movs	r0, #69	; 0x45
 800099e:	f000 fe3b 	bl	8001618 <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <MX_GPIO_Init+0x84>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_GPIO_Init+0x84>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_GPIO_Init+0x84>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <MX_GPIO_Init+0x84>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_GPIO_Init+0x84>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 fca9 	bl	80013a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40001000 	.word	0x40001000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_GREEN);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fc2d 	bl	80012c0 <BSP_LED_Off>
  while (1)
  {
    BSP_LED_Toggle(LED_RED);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f000 fc48 	bl	80012fc <BSP_LED_Toggle>
    HAL_Delay(200);
 8000a6c:	20c8      	movs	r0, #200	; 0xc8
 8000a6e:	f000 fcb7 	bl	80013e0 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 8000a72:	e7f8      	b.n	8000a66 <Error_Handler+0xa>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09a      	sub	sp, #104	; 0x68
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	223c      	movs	r2, #60	; 0x3c
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f011 f969 	bl	8011dbc <memset>
  if(hsd->Instance==SDIO)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a71      	ldr	r2, [pc, #452]	; (8000cb4 <HAL_SD_MspInit+0x1f0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	f040 80da 	bne.w	8000caa <HAL_SD_MspInit+0x1e6>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_SDIO;
 8000af6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000b00:	2300      	movs	r3, #0
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 ff17 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000b14:	f7ff ffa2 	bl	8000a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	4b66      	ldr	r3, [pc, #408]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a65      	ldr	r2, [pc, #404]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b63      	ldr	r3, [pc, #396]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b5f      	ldr	r3, [pc, #380]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a5e      	ldr	r2, [pc, #376]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b5c      	ldr	r3, [pc, #368]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a57      	ldr	r2, [pc, #348]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <HAL_SD_MspInit+0x1f4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000b6c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b70:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b86:	4619      	mov	r1, r3
 8000b88:	484c      	ldr	r0, [pc, #304]	; (8000cbc <HAL_SD_MspInit+0x1f8>)
 8000b8a:	f001 f95d 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4845      	ldr	r0, [pc, #276]	; (8000cc0 <HAL_SD_MspInit+0x1fc>)
 8000baa:	f001 f94d 	bl	8001e48 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000bae:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bb0:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <HAL_SD_MspInit+0x204>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000bb4:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbc:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b40      	ldr	r3, [pc, #256]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bce:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bd0:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000be2:	2220      	movs	r2, #32
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bec:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000bfa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000c02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000c08:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000c0a:	f000 fd21 	bl	8001650 <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_SD_MspInit+0x154>
    {
      Error_Handler();
 8000c14:	f7ff ff22 	bl	8000a5c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1e:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c26:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c28:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c30:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c34:	2240      	movs	r2, #64	; 0x40
 8000c36:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c44:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c4c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c54:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c58:	2220      	movs	r2, #32
 8000c5a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c80:	f000 fce6 	bl	8001650 <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_SD_MspInit+0x1ca>
    {
      Error_Handler();
 8000c8a:	f7ff fee7 	bl	8000a5c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2031      	movs	r0, #49	; 0x31
 8000ca0:	f000 fc9e 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ca4:	2031      	movs	r0, #49	; 0x31
 8000ca6:	f000 fcb7 	bl	8001618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3768      	adds	r7, #104	; 0x68
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	20001598 	.word	0x20001598
 8000cc8:	40026458 	.word	0x40026458
 8000ccc:	200015f8 	.word	0x200015f8
 8000cd0:	400264a0 	.word	0x400264a0

08000cd4 <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDIO)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_SD_MspDeInit+0x54>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d11b      	bne.n	8000d1e <HAL_SD_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_SD_MspDeInit+0x58>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_SD_MspDeInit+0x58>)
 8000cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000cf2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000cf6:	480e      	ldr	r0, [pc, #56]	; (8000d30 <HAL_SD_MspDeInit+0x5c>)
 8000cf8:	f001 fa52 	bl	80021a0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_8);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <HAL_SD_MspDeInit+0x60>)
 8000d00:	f001 fa4e 	bl	80021a0 <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(hsd->hdmarx);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fd4f 	bl	80017ac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsd->hdmatx);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd4a 	bl	80017ac <HAL_DMA_DeInit>

    /* SDIO interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 8000d18:	2031      	movs	r0, #49	; 0x31
 8000d1a:	f000 fc8b 	bl	8001634 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2036      	movs	r0, #54	; 0x36
 8000d4e:	f000 fc47 	bl	80015e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d52:	2036      	movs	r0, #54	; 0x36
 8000d54:	f000 fc60 	bl	8001618 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d74:	f107 0210 	add.w	r2, r7, #16
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fdaa 	bl	80028d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d84:	f001 fd94 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_InitTick+0xa8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_InitTick+0xac>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_InitTick+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_InitTick+0xac>)
 8000da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_InitTick+0xac>)
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_InitTick+0xac>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_InitTick+0xac>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_InitTick+0xac>)
 8000dbe:	f003 fda5 	bl	800490c <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_InitTick+0xac>)
 8000dca:	f003 fdf9 	bl	80049c0 <HAL_TIM_Base_Start_IT>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20001658 	.word	0x20001658
 8000de8:	40001000 	.word	0x40001000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <SDIO_IRQHandler+0x10>)
 8000e1e:	f002 fcdf 	bl	80037e0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20001514 	.word	0x20001514

08000e2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM6_DAC_IRQHandler+0x10>)
 8000e32:	f003 fe35 	bl	8004aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20001658 	.word	0x20001658

08000e40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA2_Stream3_IRQHandler+0x10>)
 8000e46:	f000 fd89 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20001598 	.word	0x20001598

08000e54 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <DMA2_Stream6_IRQHandler+0x10>)
 8000e5a:	f000 fd7f 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200015f8 	.word	0x200015f8

08000e68 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af08      	add	r7, sp, #32
 8000e6e:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN MX_FileX_Init */
  VOID *pointer;

  /* Allocate memory for the main thread's stack */
  ret = tx_byte_allocate(byte_pool, &pointer, DEFAULT_STACK_SIZE, TX_NO_WAIT);
 8000e78:	f107 010c 	add.w	r1, r7, #12
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e82:	6938      	ldr	r0, [r7, #16]
 8000e84:	f010 fc2e 	bl	80116e4 <_txe_byte_allocate>
 8000e88:	6178      	str	r0, [r7, #20]

  if (ret != FX_SUCCESS)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_FileX_Init+0x2c>
  {
    /* Failed at allocating memory */
    Error_Handler();
 8000e90:	f7ff fde4 	bl	8000a5c <Error_Handler>
  }

  /* Create the main thread.  */
  tx_thread_create(&fx_app_thread, "FileX App Thread", fx_thread_entry, 0, pointer, DEFAULT_STACK_SIZE,
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	22b4      	movs	r2, #180	; 0xb4
 8000e98:	9206      	str	r2, [sp, #24]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	9205      	str	r2, [sp, #20]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	9204      	str	r2, [sp, #16]
 8000ea2:	220a      	movs	r2, #10
 8000ea4:	9203      	str	r2, [sp, #12]
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	9202      	str	r2, [sp, #8]
 8000eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eae:	9201      	str	r2, [sp, #4]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <MX_FileX_Init+0x64>)
 8000eb6:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <MX_FileX_Init+0x68>)
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_FileX_Init+0x6c>)
 8000eba:	f010 fe5b 	bl	8011b74 <_txe_thread_create>
                   DEFAULT_THREAD_PRIO, DEFAULT_PREEMPTION_THRESHOLD, TX_NO_TIME_SLICE, TX_AUTO_START);

  /* Initialize FileX.  */
  fx_system_initialize();
 8000ebe:	f00b f81b 	bl	800bef8 <_fx_system_initialize>

  /* USER CODE END MX_FileX_Init */
  return ret;
 8000ec2:	697b      	ldr	r3, [r7, #20]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08000ed9 	.word	0x08000ed9
 8000ed0:	08011e0c 	.word	0x08011e0c
 8000ed4:	20003f38 	.word	0x20003f38

08000ed8 <fx_thread_entry>:

/* USER CODE BEGIN 1 */

void fx_thread_entry(ULONG thread_input)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b098      	sub	sp, #96	; 0x60
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]

  UINT status;
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";
 8000ee0:	4b54      	ldr	r3, [pc, #336]	; (8001034 <fx_thread_entry+0x15c>)
 8000ee2:	f107 0408 	add.w	r4, r7, #8
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ef0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ef2:	8023      	strh	r3, [r4, #0]
 8000ef4:	3402      	adds	r4, #2
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	7023      	strb	r3, [r4, #0]

  /* Open the SD disk driver.  */
  status =  fx_media_open(&sdio_disk, "STM32_SDIO_DISK", fx_stm32_sd_driver, 0,(VOID *) media_memory, sizeof(media_memory));
 8000efa:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <fx_thread_entry+0x160>)
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <fx_thread_entry+0x164>)
 8000f0e:	494c      	ldr	r1, [pc, #304]	; (8001040 <fx_thread_entry+0x168>)
 8000f10:	484c      	ldr	r0, [pc, #304]	; (8001044 <fx_thread_entry+0x16c>)
 8000f12:	f00d fbf3 	bl	800e6fc <_fxe_media_open>
 8000f16:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the media open status.  */
  if (status != FX_SUCCESS)
 8000f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <fx_thread_entry+0x4a>
  {
    Error_Handler();
 8000f1e:	f7ff fd9d 	bl	8000a5c <Error_Handler>
  }

  /* Create a file called STM32.TXT in the root directory.  */
  status =  fx_file_create(&sdio_disk, "STM32.TXT");
 8000f22:	4949      	ldr	r1, [pc, #292]	; (8001048 <fx_thread_entry+0x170>)
 8000f24:	4847      	ldr	r0, [pc, #284]	; (8001044 <fx_thread_entry+0x16c>)
 8000f26:	f00d fa47 	bl	800e3b8 <_fxe_file_create>
 8000f2a:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the create status.  */
  if (status != FX_SUCCESS)
 8000f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d004      	beq.n	8000f3c <fx_thread_entry+0x64>
  {
    /* Check for an already created status. This is expected on the
    second pass of this loop!  */
    if (status != FX_ALREADY_CREATED)
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	2b0b      	cmp	r3, #11
 8000f36:	d001      	beq.n	8000f3c <fx_thread_entry+0x64>
    {
      /* Create error, call error handler.  */
      Error_Handler();
 8000f38:	f7ff fd90 	bl	8000a5c <Error_Handler>
    }
  }

  /* Open the test file.  */
  status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_WRITE);
 8000f3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	4a40      	ldr	r2, [pc, #256]	; (8001048 <fx_thread_entry+0x170>)
 8000f46:	4941      	ldr	r1, [pc, #260]	; (800104c <fx_thread_entry+0x174>)
 8000f48:	483e      	ldr	r0, [pc, #248]	; (8001044 <fx_thread_entry+0x16c>)
 8000f4a:	f00d fa63 	bl	800e414 <_fxe_file_open>
 8000f4e:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file open status.  */
  if (status != FX_SUCCESS)
 8000f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <fx_thread_entry+0x82>
  {
    /* Error opening file, call error handler.  */
    Error_Handler();
 8000f56:	f7ff fd81 	bl	8000a5c <Error_Handler>
  }

  /* Seek to the beginning of the test file.  */
  status =  fx_file_seek(&fx_file, 0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	483b      	ldr	r0, [pc, #236]	; (800104c <fx_thread_entry+0x174>)
 8000f5e:	f00d fb13 	bl	800e588 <_fxe_file_seek>
 8000f62:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file seek status.  */
  if (status != FX_SUCCESS)
 8000f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <fx_thread_entry+0x96>
  {
    /* Error performing file seek, call error handler.  */
    Error_Handler();
 8000f6a:	f7ff fd77 	bl	8000a5c <Error_Handler>
  }

  /* Write a string to the test file.  */
  status =  fx_file_write(&fx_file, data, sizeof(data));
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	221f      	movs	r2, #31
 8000f74:	4619      	mov	r1, r3
 8000f76:	4835      	ldr	r0, [pc, #212]	; (800104c <fx_thread_entry+0x174>)
 8000f78:	f00d fb34 	bl	800e5e4 <_fxe_file_write>
 8000f7c:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file write status.  */
  if (status != FX_SUCCESS)
 8000f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <fx_thread_entry+0xb0>
  {
    /* Error writing to a file, call error handler.  */
    Error_Handler();
 8000f84:	f7ff fd6a 	bl	8000a5c <Error_Handler>
  }

  /* Close the test file.  */
  status =  fx_file_close(&fx_file);
 8000f88:	4830      	ldr	r0, [pc, #192]	; (800104c <fx_thread_entry+0x174>)
 8000f8a:	f00d f9e9 	bl	800e360 <_fxe_file_close>
 8000f8e:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file close status.  */
  if (status != FX_SUCCESS)
 8000f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <fx_thread_entry+0xc2>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 8000f96:	f7ff fd61 	bl	8000a5c <Error_Handler>
  }

  status = fx_media_flush(&sdio_disk);
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <fx_thread_entry+0x16c>)
 8000f9c:	f00d fb82 	bl	800e6a4 <_fxe_media_flush>
 8000fa0:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the media flush  status.  */
  if (status != FX_SUCCESS)
 8000fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <fx_thread_entry+0xd4>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 8000fa8:	f7ff fd58 	bl	8000a5c <Error_Handler>
  }

  /* Open the test file.  */
  status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_READ);
 8000fac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <fx_thread_entry+0x170>)
 8000fb6:	4925      	ldr	r1, [pc, #148]	; (800104c <fx_thread_entry+0x174>)
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <fx_thread_entry+0x16c>)
 8000fba:	f00d fa2b 	bl	800e414 <_fxe_file_open>
 8000fbe:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file open status.  */
  if (status != FX_SUCCESS)
 8000fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <fx_thread_entry+0xf2>
  {
    /* Error opening file, call error handler.  */
    Error_Handler();
 8000fc6:	f7ff fd49 	bl	8000a5c <Error_Handler>
  }

  /* Seek to the beginning of the test file.  */
  status =  fx_file_seek(&fx_file, 0);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	481f      	ldr	r0, [pc, #124]	; (800104c <fx_thread_entry+0x174>)
 8000fce:	f00d fadb 	bl	800e588 <_fxe_file_seek>
 8000fd2:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file seek status.  */
  if (status != FX_SUCCESS)
 8000fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <fx_thread_entry+0x106>
  {
    /* Error performing file seek, call error handler.  */
    Error_Handler();
 8000fda:	f7ff fd3f 	bl	8000a5c <Error_Handler>
  }

  /* Read the first 28 bytes of the test file.  */
  status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 8000fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fe6:	221f      	movs	r2, #31
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <fx_thread_entry+0x174>)
 8000fea:	f00d fa95 	bl	800e518 <_fxe_file_read>
 8000fee:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file read status.  */
  if ((status != FX_SUCCESS) || (bytes_read != sizeof(data)))
 8000ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <fx_thread_entry+0x124>
 8000ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ff8:	2b1f      	cmp	r3, #31
 8000ffa:	d001      	beq.n	8001000 <fx_thread_entry+0x128>
  {
    /* Error reading file, call error handler.  */
    Error_Handler();
 8000ffc:	f7ff fd2e 	bl	8000a5c <Error_Handler>
  }

  /* Close the test file.  */
  status =  fx_file_close(&fx_file);
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <fx_thread_entry+0x174>)
 8001002:	f00d f9ad 	bl	800e360 <_fxe_file_close>
 8001006:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the file close status.  */
  if (status != FX_SUCCESS)
 8001008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <fx_thread_entry+0x13a>
  {
    /* Error closing the file, call error handler.  */
    Error_Handler();
 800100e:	f7ff fd25 	bl	8000a5c <Error_Handler>
  }

  /* Close the media.  */
  status =  fx_media_close(&sdio_disk);
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <fx_thread_entry+0x16c>)
 8001014:	f00d fb1a 	bl	800e64c <_fxe_media_close>
 8001018:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* Check the media close status.  */
  if (status != FX_SUCCESS)
 800101a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <fx_thread_entry+0x14c>
  {
    /* Error closing the media, call error handler.  */
    Error_Handler();
 8001020:	f7ff fd1c 	bl	8000a5c <Error_Handler>
  }

  /* Loop Forever indicating success state */
  while(1)
  {
    BSP_LED_Toggle(LED_GREEN);
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f969 	bl	80012fc <BSP_LED_Toggle>
    tx_thread_sleep(50);
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	f00f fcb6 	bl	801099c <_tx_thread_sleep>
    BSP_LED_Toggle(LED_GREEN);
 8001030:	e7f8      	b.n	8001024 <fx_thread_entry+0x14c>
 8001032:	bf00      	nop
 8001034:	08011e3c 	.word	0x08011e3c
 8001038:	200016a0 	.word	0x200016a0
 800103c:	0800e871 	.word	0x0800e871
 8001040:	08011e20 	.word	0x08011e20
 8001044:	200018a0 	.word	0x200018a0
 8001048:	08011e30 	.word	0x08011e30
 800104c:	20003d58 	.word	0x20003d58

08001050 <fx_stm32_sd_init>:
* @brief Initializes the SD IP instance
* @param UINT instance SD instance to initialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_init(UINT instance)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN PRE_FX_SD_INIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_INIT */

#if (FX_STM32_SD_INIT == 1)
  MX_SDIO_SD_Init();
 800105c:	f7ff fc50 	bl	8000900 <MX_SDIO_SD_Init>

  /* USER CODE BEGIN POST_FX_SD_INIT */

  /* USER CODE END POST_FX_SD_INIT */

  return ret;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <fx_stm32_sd_deinit>:
* @brief Deinitializes the SD IP instance
* @param UINT instance SD instance to deinitialize
* @retval 0 on success error value otherwise
*/
INT fx_stm32_sd_deinit(UINT instance)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_FX_SD_DEINIT */
  UNUSED(instance);
  /* USER CODE END PRE_FX_SD_DEINIT */

  if(HAL_SD_DeInit(&hsd) != HAL_OK)
 8001078:	4806      	ldr	r0, [pc, #24]	; (8001094 <fx_stm32_sd_deinit+0x28>)
 800107a:	f002 f9cf 	bl	800341c <HAL_SD_DeInit>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <fx_stm32_sd_deinit+0x1c>
  {
    ret = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_FX_SD_DEINIT */

  /* USER CODE END POST_FX_SD_DEINIT */

  return ret;
 8001088:	68fb      	ldr	r3, [r7, #12]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20001514 	.word	0x20001514

08001098 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <fx_stm32_sd_get_status+0x28>)
 80010a6:	f002 ff63 	bl	8003f70 <HAL_SD_GetCardState>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d001      	beq.n	80010b4 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001514 	.word	0x20001514

080010c4 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <fx_stm32_sd_read_blocks+0x34>)
 80010de:	f002 f9bd 	bl	800345c <HAL_SD_ReadBlocks_DMA>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20001514 	.word	0x20001514

080010fc <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <fx_stm32_sd_write_blocks+0x34>)
 8001116:	f002 fa81 	bl	800361c <HAL_SD_WriteBlocks_DMA>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 8001124:	697b      	ldr	r3, [r7, #20]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20001514 	.word	0x20001514

08001134 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <HAL_SD_TxCpltCallback+0x18>)
 800113e:	f010 fcfb 	bl	8011b38 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20003fec 	.word	0x20003fec

08001150 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&transfer_semaphore);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <HAL_SD_RxCpltCallback+0x18>)
 800115a:	f010 fced 	bl	8011b38 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20003fec 	.word	0x20003fec

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001196:	f000 f8cf 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f010 fddd 	bl	8011d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fb28 	bl	80007f2 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80011b0:	08011ee0 	.word	0x08011ee0
  ldr r2, =_sbss
 80011b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011b8:	200048ac 	.word	0x200048ac

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d86d      	bhi.n	80012ac <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4a38      	ldr	r2, [pc, #224]	; (80012b4 <BSP_LED_Init+0xf4>)
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d847      	bhi.n	800127c <BSP_LED_Init+0xbc>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <BSP_LED_Init+0x34>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	08001223 	.word	0x08001223
 80011fc:	08001241 	.word	0x08001241
 8001200:	0800125f 	.word	0x0800125f
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <BSP_LED_Init+0xf8>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a2a      	ldr	r2, [pc, #168]	; (80012b8 <BSP_LED_Init+0xf8>)
 800120e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
      break;
 8001220:	e02d      	b.n	800127e <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <BSP_LED_Init+0xf8>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
      break;
 800123e:	e01e      	b.n	800127e <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <BSP_LED_Init+0xf8>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6313      	str	r3, [r2, #48]	; 0x30
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
      break;
 800125c:	e00f      	b.n	800127e <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <BSP_LED_Init+0xf8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
      break;
 800127a:	e000      	b.n	800127e <BSP_LED_Init+0xbe>
    default :
      break;
 800127c:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <BSP_LED_Init+0xfc>)
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	f107 021c 	add.w	r2, r7, #28
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fddb 	bl	8001e48 <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <BSP_LED_Init+0xfc>)
 8001296:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <BSP_LED_Init+0xf4>)
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f001 f886 	bl	80023b8 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 80012ac:	bf00      	nop
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	20000010 	.word	0x20000010

080012c0 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d80c      	bhi.n	80012ea <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <BSP_LED_Off+0x34>)
 80012d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <BSP_LED_Off+0x38>)
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	f001 f867 	bl	80023b8 <HAL_GPIO_WritePin>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000010 	.word	0x20000010
 80012f8:	20000000 	.word	0x20000000

080012fc <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d80c      	bhi.n	8001326 <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <BSP_LED_Toggle+0x34>)
 8001310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4907      	ldr	r1, [pc, #28]	; (8001334 <BSP_LED_Toggle+0x38>)
 8001318:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f001 f862 	bl	80023ea <HAL_GPIO_TogglePin>
  }
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000010 	.word	0x20000010
 8001334:	20000000 	.word	0x20000000

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_Init+0x40>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_Init+0x40>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x40>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f920 	bl	80015ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	200f      	movs	r0, #15
 800138c:	f7ff fcd4 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff fb70 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000028 	.word	0x20000028
 80013c4:	2000400c 	.word	0x2000400c

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000400c 	.word	0x2000400c

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff ffee 	bl	80013c8 <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffde 	bl	80013c8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000028 	.word	0x20000028

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db12      	blt.n	8001500 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	490a      	ldr	r1, [pc, #40]	; (800150c <__NVIC_DisableIRQ+0x44>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	3320      	adds	r3, #32
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f4:	f3bf 8f4f 	dsb	sy
}
 80014f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fa:	f3bf 8f6f 	isb	sy
}
 80014fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff28 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f2:	f7ff ff3d 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7ff ffb1 	bl	8001564 <NVIC_EncodePriority>
 8001602:	4602      	mov	r2, r0
 8001604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff80 	bl	8001510 <__NVIC_SetPriority>
}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff30 	bl	800148c <__NVIC_EnableIRQ>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff40 	bl	80014c8 <__NVIC_DisableIRQ>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff feb4 	bl	80013c8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e099      	b.n	80017a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168c:	e00f      	b.n	80016ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168e:	f7ff fe9b 	bl	80013c8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b05      	cmp	r3, #5
 800169a:	d908      	bls.n	80016ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e078      	b.n	80017a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e8      	bne.n	800168e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_DMA_Init+0x158>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2b04      	cmp	r3, #4
 8001706:	d107      	bne.n	8001718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4313      	orrs	r3, r2
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0307 	bic.w	r3, r3, #7
 800172e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	2b04      	cmp	r3, #4
 8001740:	d117      	bne.n	8001772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00e      	beq.n	8001772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fafb 	bl	8001d50 <DMA_CheckFifoParam>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800176e:	2301      	movs	r3, #1
 8001770:	e016      	b.n	80017a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fab2 	bl	8001ce4 <DMA_CalcBaseAndBitshift>
 8001780:	4603      	mov	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	f010803f 	.word	0xf010803f

080017ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e050      	b.n	8001860 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d101      	bne.n	80017ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80017ca:	2302      	movs	r3, #2
 80017cc:	e048      	b.n	8001860 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2221      	movs	r2, #33	; 0x21
 800180c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fa68 	bl	8001ce4 <DMA_CalcBaseAndBitshift>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	223f      	movs	r2, #63	; 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_DMA_Start_IT+0x26>
 800188a:	2302      	movs	r3, #2
 800188c:	e040      	b.n	8001910 <HAL_DMA_Start_IT+0xa8>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d12f      	bne.n	8001902 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2202      	movs	r2, #2
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f9e6 	bl	8001c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	223f      	movs	r2, #63	; 0x3f
 80018c2:	409a      	lsls	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0216 	orr.w	r2, r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0208 	orr.w	r2, r2, #8
 80018ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e005      	b.n	800190e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d004      	beq.n	8001936 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00c      	b.n	8001950 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2205      	movs	r2, #5
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001968:	4b8e      	ldr	r3, [pc, #568]	; (8001ba4 <HAL_DMA_IRQHandler+0x248>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a8e      	ldr	r2, [pc, #568]	; (8001ba8 <HAL_DMA_IRQHandler+0x24c>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2208      	movs	r2, #8
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01a      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	2208      	movs	r2, #8
 80019b6:	409a      	lsls	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	2201      	movs	r2, #1
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2204      	movs	r2, #4
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2204      	movs	r2, #4
 8001a22:	409a      	lsls	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f043 0204 	orr.w	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2210      	movs	r2, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03c      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e01f      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e016      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0208 	bic.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 808f 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8087 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2220      	movs	r2, #32
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d136      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0216 	bic.w	r2, r2, #22
 8001b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x1da>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	223f      	movs	r2, #63	; 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d07e      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
        }
        return;
 8001b72:	e079      	b.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d031      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
 8001ba0:	e02c      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
 8001ba2:	bf00      	nop
 8001ba4:	20000020 	.word	0x20000020
 8001ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e01e      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0210 	bic.w	r2, r2, #16
 8001bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d032      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d307      	bcc.n	8001c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x2cc>
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c68:	bf00      	nop
    }
  }
}
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d108      	bne.n	8001cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc6:	e007      	b.n	8001cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3b10      	subs	r3, #16
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <DMA_CalcBaseAndBitshift+0x64>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <DMA_CalcBaseAndBitshift+0x68>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d909      	bls.n	8001d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	659a      	str	r2, [r3, #88]	; 0x58
 8001d24:	e007      	b.n	8001d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	aaaaaaab 	.word	0xaaaaaaab
 8001d4c:	08011ec8 	.word	0x08011ec8

08001d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11f      	bne.n	8001daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d856      	bhi.n	8001e1e <DMA_CheckFifoParam+0xce>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <DMA_CheckFifoParam+0x28>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d9b 	.word	0x08001d9b
 8001d80:	08001d89 	.word	0x08001d89
 8001d84:	08001e1f 	.word	0x08001e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d046      	beq.n	8001e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e043      	b.n	8001e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da2:	d140      	bne.n	8001e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e03d      	b.n	8001e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d121      	bne.n	8001df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d837      	bhi.n	8001e2a <DMA_CheckFifoParam+0xda>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x70>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001dd7 	.word	0x08001dd7
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001de9 	.word	0x08001de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e030      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d025      	beq.n	8001e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de6:	e022      	b.n	8001e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001df6:	e01c      	b.n	8001e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d903      	bls.n	8001e06 <DMA_CheckFifoParam+0xb6>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d003      	beq.n	8001e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e04:	e018      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0a:	e015      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1c:	e00b      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e00a      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e008      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e006      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e004      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
    }
  } 
  
  return status; 
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e177      	b.n	8002154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f040 8166 	bne.w	800214e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d123      	bne.n	8001f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80c0 	beq.w	800214e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_GPIO_Init+0x324>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_GPIO_Init+0x324>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_GPIO_Init+0x324>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a61      	ldr	r2, [pc, #388]	; (8002170 <HAL_GPIO_Init+0x328>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_GPIO_Init+0x32c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d037      	beq.n	8002086 <HAL_GPIO_Init+0x23e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_GPIO_Init+0x330>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d031      	beq.n	8002082 <HAL_GPIO_Init+0x23a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_GPIO_Init+0x334>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02b      	beq.n	800207e <HAL_GPIO_Init+0x236>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a55      	ldr	r2, [pc, #340]	; (8002180 <HAL_GPIO_Init+0x338>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x232>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x33c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x22e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a53      	ldr	r2, [pc, #332]	; (8002188 <HAL_GPIO_Init+0x340>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x22a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x344>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x226>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_GPIO_Init+0x348>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x222>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_GPIO_Init+0x34c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x21e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4f      	ldr	r2, [pc, #316]	; (8002198 <HAL_GPIO_Init+0x350>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x21a>
 800205e:	2309      	movs	r3, #9
 8002060:	e012      	b.n	8002088 <HAL_GPIO_Init+0x240>
 8002062:	230a      	movs	r3, #10
 8002064:	e010      	b.n	8002088 <HAL_GPIO_Init+0x240>
 8002066:	2308      	movs	r3, #8
 8002068:	e00e      	b.n	8002088 <HAL_GPIO_Init+0x240>
 800206a:	2307      	movs	r3, #7
 800206c:	e00c      	b.n	8002088 <HAL_GPIO_Init+0x240>
 800206e:	2306      	movs	r3, #6
 8002070:	e00a      	b.n	8002088 <HAL_GPIO_Init+0x240>
 8002072:	2305      	movs	r3, #5
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x240>
 8002076:	2304      	movs	r3, #4
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x240>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x240>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x240>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x240>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	; (8002170 <HAL_GPIO_Init+0x328>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_GPIO_Init+0x354>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ca:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_GPIO_Init+0x354>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d0:	4b32      	ldr	r3, [pc, #200]	; (800219c <HAL_GPIO_Init+0x354>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f4:	4a29      	ldr	r2, [pc, #164]	; (800219c <HAL_GPIO_Init+0x354>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_GPIO_Init+0x354>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_GPIO_Init+0x354>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_GPIO_Init+0x354>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_GPIO_Init+0x354>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f67f ae84 	bls.w	8001e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40013800 	.word	0x40013800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40021400 	.word	0x40021400
 800218c:	40021800 	.word	0x40021800
 8002190:	40021c00 	.word	0x40021c00
 8002194:	40022000 	.word	0x40022000
 8002198:	40022400 	.word	0x40022400
 800219c:	40013c00 	.word	0x40013c00

080021a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e0d9      	b.n	8002370 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	f040 80c9 	bne.w	800236a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80021d8:	4a6b      	ldr	r2, [pc, #428]	; (8002388 <HAL_GPIO_DeInit+0x1e8>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	4013      	ands	r3, r2
 80021f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a63      	ldr	r2, [pc, #396]	; (800238c <HAL_GPIO_DeInit+0x1ec>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d037      	beq.n	8002272 <HAL_GPIO_DeInit+0xd2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a62      	ldr	r2, [pc, #392]	; (8002390 <HAL_GPIO_DeInit+0x1f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_GPIO_DeInit+0xce>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a61      	ldr	r2, [pc, #388]	; (8002394 <HAL_GPIO_DeInit+0x1f4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_DeInit+0xca>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_GPIO_DeInit+0x1f8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_DeInit+0xc6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a5f      	ldr	r2, [pc, #380]	; (800239c <HAL_GPIO_DeInit+0x1fc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_DeInit+0xc2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a5e      	ldr	r2, [pc, #376]	; (80023a0 <HAL_GPIO_DeInit+0x200>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_DeInit+0xbe>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_GPIO_DeInit+0x204>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_DeInit+0xba>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a5c      	ldr	r2, [pc, #368]	; (80023a8 <HAL_GPIO_DeInit+0x208>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_DeInit+0xb6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <HAL_GPIO_DeInit+0x20c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_DeInit+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a5a      	ldr	r2, [pc, #360]	; (80023b0 <HAL_GPIO_DeInit+0x210>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_DeInit+0xae>
 800224a:	2309      	movs	r3, #9
 800224c:	e012      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 800224e:	230a      	movs	r3, #10
 8002250:	e010      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 8002252:	2308      	movs	r3, #8
 8002254:	e00e      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 8002256:	2307      	movs	r3, #7
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 800225a:	2306      	movs	r3, #6
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_DeInit+0xd4>
 8002272:	2300      	movs	r3, #0
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d132      	bne.n	80022ea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	4949      	ldr	r1, [pc, #292]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 800228e:	4013      	ands	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002292:	4b48      	ldr	r3, [pc, #288]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	4946      	ldr	r1, [pc, #280]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80022a0:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	4942      	ldr	r1, [pc, #264]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	493f      	ldr	r1, [pc, #252]	; (80023b4 <HAL_GPIO_DeInit+0x214>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80022cc:	4a2e      	ldr	r2, [pc, #184]	; (8002388 <HAL_GPIO_DeInit+0x1e8>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	43da      	mvns	r2, r3
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <HAL_GPIO_DeInit+0x1e8>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	400a      	ands	r2, r1
 80022e4:	3302      	adds	r3, #2
 80022e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2103      	movs	r1, #3
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	08d2      	lsrs	r2, r2, #3
 8002320:	4019      	ands	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2103      	movs	r1, #3
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2103      	movs	r1, #3
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f af22 	bls.w	80021bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40013800 	.word	0x40013800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40021400 	.word	0x40021400
 80023a4:	40021800 	.word	0x40021800
 80023a8:	40021c00 	.word	0x40021c00
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40022400 	.word	0x40022400
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023fc:	887a      	ldrh	r2, [r7, #2]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	041a      	lsls	r2, r3, #16
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43d9      	mvns	r1, r3
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	400b      	ands	r3, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7fe ffbc 	bl	80013c8 <HAL_GetTick>
 8002450:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002452:	e009      	b.n	8002468 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002454:	f7fe ffb8 	bl	80013c8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002462:	d901      	bls.n	8002468 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e01f      	b.n	80024a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d1ee      	bne.n	8002454 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247c:	f7fe ffa4 	bl	80013c8 <HAL_GetTick>
 8002480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002482:	e009      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002484:	f7fe ffa0 	bl	80013c8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002492:	d901      	bls.n	8002498 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e007      	b.n	80024a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a4:	d1ee      	bne.n	8002484 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	420e0040 	.word	0x420e0040
 80024b8:	40007000 	.word	0x40007000
 80024bc:	420e0044 	.word	0x420e0044

080024c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0cc      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d4:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d90c      	bls.n	80024fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b65      	ldr	r3, [pc, #404]	; (8002678 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b8      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	494d      	ldr	r1, [pc, #308]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d044      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d119      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e07f      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d003      	beq.n	800257e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257a:	2b03      	cmp	r3, #3
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4b3f      	ldr	r3, [pc, #252]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06f      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e067      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4934      	ldr	r1, [pc, #208]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b0:	f7fe ff0a 	bl	80013c8 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe ff06 	bl	80013c8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e04f      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 020c 	and.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1eb      	bne.n	80025b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_RCC_ClockConfig+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d20c      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e032      	b.n	800266e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4916      	ldr	r1, [pc, #88]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	490e      	ldr	r1, [pc, #56]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002646:	f000 f821 	bl	800268c <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb66 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023c00 	.word	0x40023c00
 800267c:	40023800 	.word	0x40023800
 8002680:	08011eb0 	.word	0x08011eb0
 8002684:	20000020 	.word	0x20000020
 8002688:	20000024 	.word	0x20000024

0800268c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800268c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002690:	b094      	sub	sp, #80	; 0x50
 8002692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	647b      	str	r3, [r7, #68]	; 0x44
 8002698:	2300      	movs	r3, #0
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800269c:	2300      	movs	r3, #0
 800269e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a4:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCC_GetSysClockFreq+0x200>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d00d      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x40>
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	f200 80e1 	bhi.w	8002878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026be:	e0db      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_GetSysClockFreq+0x204>)
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026c4:	e0db      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c6:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_GetSysClockFreq+0x208>)
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ca:	e0d8      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_GetSysClockFreq+0x200>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d6:	4b6d      	ldr	r3, [pc, #436]	; (800288c <HAL_RCC_GetSysClockFreq+0x200>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_GetSysClockFreq+0x200>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	2200      	movs	r2, #0
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
 80026f6:	2300      	movs	r3, #0
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
 80026fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026fe:	4622      	mov	r2, r4
 8002700:	462b      	mov	r3, r5
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	0159      	lsls	r1, r3, #5
 800270c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002710:	0150      	lsls	r0, r2, #5
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4621      	mov	r1, r4
 8002718:	1a51      	subs	r1, r2, r1
 800271a:	6139      	str	r1, [r7, #16]
 800271c:	4629      	mov	r1, r5
 800271e:	eb63 0301 	sbc.w	r3, r3, r1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002730:	4659      	mov	r1, fp
 8002732:	018b      	lsls	r3, r1, #6
 8002734:	4651      	mov	r1, sl
 8002736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273a:	4651      	mov	r1, sl
 800273c:	018a      	lsls	r2, r1, #6
 800273e:	4651      	mov	r1, sl
 8002740:	ebb2 0801 	subs.w	r8, r2, r1
 8002744:	4659      	mov	r1, fp
 8002746:	eb63 0901 	sbc.w	r9, r3, r1
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275e:	4690      	mov	r8, r2
 8002760:	4699      	mov	r9, r3
 8002762:	4623      	mov	r3, r4
 8002764:	eb18 0303 	adds.w	r3, r8, r3
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	462b      	mov	r3, r5
 800276c:	eb49 0303 	adc.w	r3, r9, r3
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277e:	4629      	mov	r1, r5
 8002780:	024b      	lsls	r3, r1, #9
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002788:	4621      	mov	r1, r4
 800278a:	024a      	lsls	r2, r1, #9
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
 8002796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800279c:	f7fd fe4c 	bl	8000438 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a8:	e058      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_RCC_GetSysClockFreq+0x200>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	2200      	movs	r2, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	4611      	mov	r1, r2
 80027b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027ba:	623b      	str	r3, [r7, #32]
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c4:	4642      	mov	r2, r8
 80027c6:	464b      	mov	r3, r9
 80027c8:	f04f 0000 	mov.w	r0, #0
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	0159      	lsls	r1, r3, #5
 80027d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d6:	0150      	lsls	r0, r2, #5
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4641      	mov	r1, r8
 80027de:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e2:	4649      	mov	r1, r9
 80027e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002800:	eb63 050b 	sbc.w	r5, r3, fp
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	00eb      	lsls	r3, r5, #3
 800280e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002812:	00e2      	lsls	r2, r4, #3
 8002814:	4614      	mov	r4, r2
 8002816:	461d      	mov	r5, r3
 8002818:	4643      	mov	r3, r8
 800281a:	18e3      	adds	r3, r4, r3
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	464b      	mov	r3, r9
 8002820:	eb45 0303 	adc.w	r3, r5, r3
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002832:	4629      	mov	r1, r5
 8002834:	028b      	lsls	r3, r1, #10
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800283c:	4621      	mov	r1, r4
 800283e:	028a      	lsls	r2, r1, #10
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002846:	2200      	movs	r2, #0
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	61fa      	str	r2, [r7, #28]
 800284c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002850:	f7fd fdf2 	bl	8000438 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	3301      	adds	r3, #1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800286c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800286e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetSysClockFreq+0x204>)
 800287a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002880:	4618      	mov	r0, r3
 8002882:	3750      	adds	r7, #80	; 0x50
 8002884:	46bd      	mov	sp, r7
 8002886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	00f42400 	.word	0x00f42400
 8002894:	007a1200 	.word	0x007a1200

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000020 	.word	0x20000020

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b4:	f7ff fff0 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08011ec0 	.word	0x08011ec0

080028d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	220f      	movs	r2, #15
 80028e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_RCC_GetClockConfig+0x60>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40023c00 	.word	0x40023c00

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	4963      	ldr	r1, [pc, #396]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002986:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	495a      	ldr	r1, [pc, #360]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d075      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029c6:	f7fe fcff 	bl	80013c8 <HAL_GetTick>
 80029ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ce:	f7fe fcfb 	bl	80013c8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1dc      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e0:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	019a      	lsls	r2, r3, #6
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	071b      	lsls	r3, r3, #28
 8002a04:	493e      	ldr	r1, [pc, #248]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1e:	0f1b      	lsrs	r3, r3, #28
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	019a      	lsls	r2, r3, #6
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	431a      	orrs	r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	071b      	lsls	r3, r3, #28
 8002a38:	4931      	ldr	r1, [pc, #196]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a46:	f023 021f 	bic.w	r2, r3, #31
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	492b      	ldr	r1, [pc, #172]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	019a      	lsls	r2, r3, #6
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	071b      	lsls	r3, r3, #28
 8002a78:	4921      	ldr	r1, [pc, #132]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fc9f 	bl	80013c8 <HAL_GetTick>
 8002a8a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a8e:	f7fe fc9b 	bl	80013c8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e17c      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d112      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80ce 	beq.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ada:	f040 80c8 	bne.w	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fc70 	bl	80013c8 <HAL_GetTick>
 8002ae8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aea:	e00f      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002aec:	f7fe fc6c 	bl	80013c8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d908      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e14d      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470068 	.word	0x42470068
 8002b08:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b0c:	4ba5      	ldr	r3, [pc, #660]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b18:	d0e8      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02e      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b26:	4b9f      	ldr	r3, [pc, #636]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b38:	4b9a      	ldr	r3, [pc, #616]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	0f1b      	lsrs	r3, r3, #28
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	019a      	lsls	r2, r3, #6
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	4990      	ldr	r1, [pc, #576]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b6a:	4b8e      	ldr	r3, [pc, #568]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4989      	ldr	r1, [pc, #548]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02c      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b90:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ba2:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	0e1b      	lsrs	r3, r3, #24
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	019a      	lsls	r2, r3, #6
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	061b      	lsls	r3, r3, #24
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	071b      	lsls	r3, r3, #28
 8002bcc:	4975      	ldr	r1, [pc, #468]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bd4:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	4970      	ldr	r1, [pc, #448]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d024      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfe:	d11f      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	0e1b      	lsrs	r3, r3, #24
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	0f1b      	lsrs	r3, r3, #28
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	019a      	lsls	r2, r3, #6
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	071b      	lsls	r3, r3, #28
 8002c38:	495a      	ldr	r1, [pc, #360]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c46:	f7fe fbbf 	bl	80013c8 <HAL_GetTick>
 8002c4a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c4e:	f7fe fbbb 	bl	80013c8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e09c      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d1ef      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8083 	beq.w	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8c:	4b45      	ldr	r3, [pc, #276]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c98:	4b44      	ldr	r3, [pc, #272]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a43      	ldr	r2, [pc, #268]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fb90 	bl	80013c8 <HAL_GetTick>
 8002ca8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe fb8c 	bl	80013c8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e06d      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02f      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d028      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf8:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002cfe:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d114      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fb5a 	bl	80013c8 <HAL_GetTick>
 8002d14:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe fb56 	bl	80013c8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e035      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ee      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d46:	d10d      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	4911      	ldr	r1, [pc, #68]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
 8002d62:	e005      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d6e:	6093      	str	r3, [r2, #8]
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	4909      	ldr	r1, [pc, #36]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8002d96:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470070 	.word	0x42470070
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42470e40 	.word	0x42470e40
 8002db4:	424711e0 	.word	0x424711e0

08002db8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e273      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e24e      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b6d      	ldr	r3, [pc, #436]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6c      	ldr	r2, [pc, #432]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b69      	ldr	r3, [pc, #420]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a68      	ldr	r2, [pc, #416]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe faaa 	bl	80013c8 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe faa6 	bl	80013c8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e213      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fa96 	bl	80013c8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fa92 	bl	80013c8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1ff      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d11c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d116      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1d3      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4937      	ldr	r1, [pc, #220]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	e03a      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f28:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fa4b 	bl	80013c8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe fa47 	bl	80013c8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1b4      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fa2a 	bl	80013c8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f78:	f7fe fa26 	bl	80013c8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e193      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d036      	beq.n	8003010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fa0a 	bl	80013c8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fa06 	bl	80013c8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e173      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
 8002fd6:	e01b      	b.n	8003010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe f9f3 	bl	80013c8 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe f9ef 	bl	80013c8 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d907      	bls.n	8003004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e15c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	42470000 	.word	0x42470000
 8003000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b8a      	ldr	r3, [pc, #552]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ea      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8097 	beq.w	800314c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b83      	ldr	r3, [pc, #524]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	4b7f      	ldr	r3, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a7e      	ldr	r2, [pc, #504]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b7c      	ldr	r3, [pc, #496]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b79      	ldr	r3, [pc, #484]	; (8003234 <HAL_RCC_OscConfig+0x47c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x47c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCC_OscConfig+0x47c>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003066:	f7fe f9af 	bl	80013c8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7fe f9ab 	bl	80013c8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e118      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x47c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2ea>
 8003094:	4b66      	ldr	r3, [pc, #408]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a65      	ldr	r2, [pc, #404]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e01c      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x30c>
 80030aa:	4b61      	ldr	r3, [pc, #388]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a60      	ldr	r2, [pc, #384]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a5d      	ldr	r2, [pc, #372]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030c4:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a59      	ldr	r2, [pc, #356]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	4b57      	ldr	r3, [pc, #348]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80030d6:	f023 0304 	bic.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe f970 	bl	80013c8 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe f96c 	bl	80013c8 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0d7      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0ee      	beq.n	80030ec <HAL_RCC_OscConfig+0x334>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe f95a 	bl	80013c8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe f956 	bl	80013c8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0c1      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	4b40      	ldr	r3, [pc, #256]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ee      	bne.n	8003118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4a3a      	ldr	r2, [pc, #232]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80ad 	beq.w	80032b0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	d060      	beq.n	8003224 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d145      	bne.n	80031f6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_RCC_OscConfig+0x480>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe f92a 	bl	80013c8 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe f926 	bl	80013c8 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e093      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	071b      	lsls	r3, r3, #28
 80031c2:	491b      	ldr	r1, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x480>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe f8fb 	bl	80013c8 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d6:	f7fe f8f7 	bl	80013c8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e064      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x41e>
 80031f4:	e05c      	b.n	80032b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_RCC_OscConfig+0x480>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe f8e4 	bl	80013c8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe f8e0 	bl	80013c8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04d      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x44c>
 8003222:	e045      	b.n	80032b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d107      	bne.n	800323c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e040      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
 8003230:	40023800 	.word	0x40023800
 8003234:	40007000 	.word	0x40007000
 8003238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800323c:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <HAL_RCC_OscConfig+0x504>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d030      	beq.n	80032ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d129      	bne.n	80032ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d122      	bne.n	80032ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800326c:	4013      	ands	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003274:	4293      	cmp	r3, r2
 8003276:	d119      	bne.n	80032ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d10f      	bne.n	80032ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fbed 	bl	8000ac4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f814 	bl	8003320 <HAL_SD_InitCard>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00a      	b.n	8003318 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b08e      	sub	sp, #56	; 0x38
 8003324:	af04      	add	r7, sp, #16
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800333c:	2376      	movs	r3, #118	; 0x76
 800333e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681d      	ldr	r5, [r3, #0]
 8003344:	466c      	mov	r4, sp
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800334e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003358:	4628      	mov	r0, r5
 800335a:	f001 fd85 	bl	8004e68 <SDIO_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04c      	b.n	800340a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_SD_InitCard+0xf4>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fdbd 	bl	8004efa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_SD_InitCard+0xf4>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 ffee 	bl	8004368 <SD_PowerON>
 800338c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e02e      	b.n	800340a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 ff0d 	bl	80041cc <SD_InitCard>
 80033b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01b      	b.n	800340a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 fe2e 	bl	800503c <SDMMC_CmdBlockLength>
 80033e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00f      	beq.n	8003408 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_SD_InitCard+0xf8>)
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bdb0      	pop	{r4, r5, r7, pc}
 8003412:	bf00      	nop
 8003414:	422580a0 	.word	0x422580a0
 8003418:	004005ff 	.word	0x004005ff

0800341c <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e011      	b.n	8003452 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2203      	movs	r2, #3
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f001 f824 	bl	8004484 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd fc49 	bl	8000cd4 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0be      	b.n	8003602 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 80b7 	bne.w	8003600 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d907      	bls.n	80034b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0a5      	b.n	8003602 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a4c      	ldr	r2, [pc, #304]	; (800360c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80034e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3380      	adds	r3, #128	; 0x80
 800351c:	4619      	mov	r1, r3
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	025b      	lsls	r3, r3, #9
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	f7fe f99f 	bl	8001868 <HAL_DMA_Start_IT>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d017      	beq.n	8003560 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e050      	b.n	8003602 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	2b01      	cmp	r3, #1
 800356c:	d002      	beq.n	8003574 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	025b      	lsls	r3, r3, #9
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003578:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	025b      	lsls	r3, r3, #9
 800357e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003580:	2390      	movs	r3, #144	; 0x90
 8003582:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003584:	2302      	movs	r3, #2
 8003586:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003588:	2300      	movs	r3, #0
 800358a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f107 0210 	add.w	r2, r7, #16
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fd22 	bl	8004fe4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d90a      	bls.n	80035bc <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2282      	movs	r2, #130	; 0x82
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fd86 	bl	80050c4 <SDMMC_CmdReadMultiBlock>
 80035b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80035ba:	e009      	b.n	80035d0 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2281      	movs	r2, #129	; 0x81
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fd59 	bl	8005080 <SDMMC_CmdReadSingleBlock>
 80035ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e002      	b.n	8003602 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3730      	adds	r7, #48	; 0x30
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	08003fdb 	.word	0x08003fdb
 8003610:	0800404d 	.word	0x0800404d
 8003614:	004005ff 	.word	0x004005ff
 8003618:	4225858c 	.word	0x4225858c

0800361c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08c      	sub	sp, #48	; 0x30
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0c1      	b.n	80037c8 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	f040 80ba 	bne.w	80037c6 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	441a      	add	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	429a      	cmp	r2, r3
 8003664:	d907      	bls.n	8003676 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0a8      	b.n	80037c8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2203      	movs	r2, #3
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 021a 	orr.w	r2, r2, #26
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	4a4c      	ldr	r2, [pc, #304]	; (80037d4 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80036a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2200      	movs	r2, #0
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d002      	beq.n	80036bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	025b      	lsls	r3, r3, #9
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d90a      	bls.n	80036d8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	22a0      	movs	r2, #160	; 0xa0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fd3c 	bl	800514c <SDMMC_CmdWriteMultiBlock>
 80036d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036d6:	e009      	b.n	80036ec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2290      	movs	r2, #144	; 0x90
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fd0f 	bl	8005108 <SDMMC_CmdWriteSingleBlock>
 80036ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	431a      	orrs	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e057      	b.n	80037c8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003718:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3380      	adds	r3, #128	; 0x80
 800374e:	461a      	mov	r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	025b      	lsls	r3, r3, #9
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	f7fe f887 	bl	8001868 <HAL_DMA_Start_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 021a 	bic.w	r2, r2, #26
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e018      	b.n	80037c8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800379a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	025b      	lsls	r3, r3, #9
 80037a0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80037a2:	2390      	movs	r3, #144	; 0x90
 80037a4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f107 0210 	add.w	r2, r7, #16
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fc11 	bl	8004fe4 <SDIO_ConfigData>

      return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3730      	adds	r7, #48	; 0x30
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	08003fb1 	.word	0x08003fb1
 80037d4:	0800404d 	.word	0x0800404d
 80037d8:	004005ff 	.word	0x004005ff
 80037dc:	4225858c 	.word	0x4225858c

080037e0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_SD_IRQHandler+0x2e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 ffda 	bl	80047c0 <SD_Read_IT>
 800380c:	e155      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 808f 	beq.w	800393c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003836:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800383a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d039      	beq.n	80038ca <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_SD_IRQHandler+0x8a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d011      	beq.n	800388e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fc8e 	bl	8005190 <SDMMC_CmdStopTransfer>
 8003874:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f91f 	bl	8003acc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f240 523a 	movw	r2, #1338	; 0x53a
 8003896:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_SD_IRQHandler+0xda>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fc48 	bl	8001150 <HAL_SD_RxCpltCallback>
 80038c0:	e0fb      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fc36 	bl	8001134 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038c8:	e0f7      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80f2 	beq.w	8003aba <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fc53 	bl	8005190 <SDMMC_CmdStopTransfer>
 80038ea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8e4 	bl	8003acc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 80d5 	bne.w	8003aba <HAL_SD_IRQHandler+0x2da>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 80cf 	bne.w	8003aba <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0208 	bic.w	r2, r2, #8
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fd fbfd 	bl	8001134 <HAL_SD_TxCpltCallback>
}
 800393a:	e0be      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_SD_IRQHandler+0x17c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 ff84 	bl	8004862 <SD_Write_IT>
 800395a:	e0ae      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80a7 	beq.w	8003aba <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f043 0202 	orr.w	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	f043 0208 	orr.w	r2, r3, #8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	f043 0210 	orr.w	r2, r3, #16
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 fbcc 	bl	8005190 <SDMMC_CmdStopTransfer>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f855 	bl	8003acc <HAL_SD_ErrorCallback>
}
 8003a22:	e04a      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d045      	beq.n	8003aba <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <HAL_SD_IRQHandler+0x262>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_SD_IRQHandler+0x2e4>)
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd ff62 	bl	8001918 <HAL_DMA_Abort_IT>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02f      	beq.n	8003aba <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fb46 	bl	80040f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a64:	e029      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_SD_IRQHandler+0x29a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d011      	beq.n	8003a9e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <HAL_SD_IRQHandler+0x2e8>)
 8003a80:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd ff46 	bl	8001918 <HAL_DMA_Abort_IT>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fb61 	bl	800415e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a9c:	e00d      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f814 	bl	8003ae0 <HAL_SD_AbortCallback>
}
 8003ab8:	e7ff      	b.n	8003aba <HAL_SD_IRQHandler+0x2da>
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	080040f1 	.word	0x080040f1
 8003ac8:	0800415f 	.word	0x0800415f

08003acc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b02:	0f9b      	lsrs	r3, r3, #30
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b54:	0d1b      	lsrs	r3, r3, #20
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b72:	0bdb      	lsrs	r3, r3, #15
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b84:	0b9b      	lsrs	r3, r3, #14
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b96:	0b5b      	lsrs	r3, r3, #13
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d163      	bne.n	8003c8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc8:	009a      	lsls	r2, r3, #2
 8003bca:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bce:	4013      	ands	r3, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003bd4:	0f92      	lsrs	r2, r2, #30
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	0edb      	lsrs	r3, r3, #27
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf2:	0e1b      	lsrs	r3, r3, #24
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c04:	0d5b      	lsrs	r3, r3, #21
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	0c9b      	lsrs	r3, r3, #18
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c28:	0bdb      	lsrs	r3, r3, #15
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	7e1b      	ldrb	r3, [r3, #24]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c56:	fb03 f202 	mul.w	r2, r3, r2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	7a1b      	ldrb	r3, [r3, #8]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2201      	movs	r2, #1
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c78:	0a52      	lsrs	r2, r2, #9
 8003c7a:	fb03 f202 	mul.w	r2, r3, r2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
 8003c8a:	e031      	b.n	8003cf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d11d      	bne.n	8003cd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	029a      	lsls	r2, r3, #10
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
 8003cce:	e00f      	b.n	8003cf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_SD_GetCardCSD+0x344>)
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09d      	b.n	8003e2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf4:	0b9b      	lsrs	r3, r3, #14
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d06:	09db      	lsrs	r3, r3, #7
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	0fdb      	lsrs	r3, r3, #31
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	0f5b      	lsrs	r3, r3, #29
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	0e9b      	lsrs	r3, r3, #26
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	0d9b      	lsrs	r3, r3, #22
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	0d5b      	lsrs	r3, r3, #21
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	0bdb      	lsrs	r3, r3, #15
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	0b9b      	lsrs	r3, r3, #14
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	0b5b      	lsrs	r3, r3, #13
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	0b1b      	lsrs	r3, r3, #12
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	0a9b      	lsrs	r3, r3, #10
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	004005ff 	.word	0x004005ff

08003e3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b08e      	sub	sp, #56	; 0x38
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d02e      	beq.n	8003eba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d106      	bne.n	8003e72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e70:	e029      	b.n	8003ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e78:	d10a      	bne.n	8003e90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fb37 	bl	80044ee <SD_WideBus_Enable>
 8003e80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e8e:	e01a      	b.n	8003ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fb74 	bl	8004584 <SD_WideBus_Disable>
 8003e9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8003eaa:	e00c      	b.n	8003ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8003eb8:	e005      	b.n	8003ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ee4:	e01f      	b.n	8003f26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681d      	ldr	r5, [r3, #0]
 8003f0c:	466c      	mov	r4, sp
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 ffa1 	bl	8004e68 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 f884 	bl	800503c <SDMMC_CmdBlockLength>
 8003f34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00c      	beq.n	8003f56 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3728      	adds	r7, #40	; 0x28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bdb0      	pop	{r4, r5, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	004005ff 	.word	0x004005ff

08003f70 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa8b 	bl	800449e <SD_SendStatus>
 8003f88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	0a5b      	lsrs	r3, r3, #9
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003fa6:	693b      	ldr	r3, [r7, #16]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fcc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	2b82      	cmp	r3, #130	; 0x82
 8003fee:	d111      	bne.n	8004014 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f8cb 	bl	8005190 <SDMMC_CmdStopTransfer>
 8003ffa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff fd5c 	bl	8003acc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0208 	bic.w	r2, r2, #8
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f240 523a 	movw	r2, #1338	; 0x53a
 800402c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7fd f887 	bl	8001150 <HAL_SD_RxCpltCallback>
#endif
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fe08 	bl	8001c70 <HAL_DMA_GetError>
 8004060:	4603      	mov	r3, r0
 8004062:	2b02      	cmp	r3, #2
 8004064:	d03e      	beq.n	80040e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <SD_DMAError+0x36>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d12d      	bne.n	80040de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a19      	ldr	r2, [pc, #100]	; (80040ec <SD_DMAError+0xa0>)
 8004088:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004098:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80040a6:	6978      	ldr	r0, [r7, #20]
 80040a8:	f7ff ff62 	bl	8003f70 <HAL_SD_GetCardState>
 80040ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d002      	beq.n	80040ba <SD_DMAError+0x6e>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d10a      	bne.n	80040d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f866 	bl	8005190 <SDMMC_CmdStopTransfer>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	431a      	orrs	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f7ff fcf4 	bl	8003acc <HAL_SD_ErrorCallback>
#endif
  }
}
 80040e4:	bf00      	nop
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	004005ff 	.word	0x004005ff

080040f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f240 523a 	movw	r2, #1338	; 0x53a
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7ff ff31 	bl	8003f70 <HAL_SD_GetCardState>
 800410e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d002      	beq.n	800412a <SD_DMATxAbort+0x3a>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b05      	cmp	r3, #5
 8004128:	d10a      	bne.n	8004140 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f82e 	bl	8005190 <SDMMC_CmdStopTransfer>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	431a      	orrs	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff fcc9 	bl	8003ae0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800414e:	e002      	b.n	8004156 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fcbb 	bl	8003acc <HAL_SD_ErrorCallback>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f240 523a 	movw	r2, #1338	; 0x53a
 8004174:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff fefa 	bl	8003f70 <HAL_SD_GetCardState>
 800417c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d002      	beq.n	8004198 <SD_DMARxAbort+0x3a>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b05      	cmp	r3, #5
 8004196:	d10a      	bne.n	80041ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fff7 	bl	8005190 <SDMMC_CmdStopTransfer>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7ff fc92 	bl	8003ae0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041bc:	e002      	b.n	80041c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff fc84 	bl	8003acc <HAL_SD_ErrorCallback>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041cc:	b5b0      	push	{r4, r5, r7, lr}
 80041ce:	b094      	sub	sp, #80	; 0x50
 80041d0:	af04      	add	r7, sp, #16
 80041d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fea9 	bl	8004f34 <SDIO_GetPowerState>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041ec:	e0b8      	b.n	8004360 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d02f      	beq.n	8004256 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f8d2 	bl	80053a4 <SDMMC_CmdSendCID>
 8004200:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <SD_InitCard+0x40>
    {
      return errorstate;
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	e0a9      	b.n	8004360 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fed3 	bl	8004fbe <SDIO_GetResponse>
 8004218:	4602      	mov	r2, r0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2104      	movs	r1, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f000 feca 	bl	8004fbe <SDIO_GetResponse>
 800422a:	4602      	mov	r2, r0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2108      	movs	r1, #8
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fec1 	bl	8004fbe <SDIO_GetResponse>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	210c      	movs	r1, #12
 8004248:	4618      	mov	r0, r3
 800424a:	f000 feb8 	bl	8004fbe <SDIO_GetResponse>
 800424e:	4602      	mov	r2, r0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	2b03      	cmp	r3, #3
 800425c:	d00d      	beq.n	800427a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f107 020e 	add.w	r2, r7, #14
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f8d8 	bl	800541e <SDMMC_CmdSetRelAdd>
 800426e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <SD_InitCard+0xae>
    {
      return errorstate;
 8004276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004278:	e072      	b.n	8004360 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	2b03      	cmp	r3, #3
 8004280:	d036      	beq.n	80042f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004282:	89fb      	ldrh	r3, [r7, #14]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f001 f8a2 	bl	80053e0 <SDMMC_CmdSendCSD>
 800429c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800429e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80042a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a6:	e05b      	b.n	8004360 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fe85 	bl	8004fbe <SDIO_GetResponse>
 80042b4:	4602      	mov	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2104      	movs	r1, #4
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fe7c 	bl	8004fbe <SDIO_GetResponse>
 80042c6:	4602      	mov	r2, r0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2108      	movs	r1, #8
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fe73 	bl	8004fbe <SDIO_GetResponse>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	210c      	movs	r1, #12
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fe6a 	bl	8004fbe <SDIO_GetResponse>
 80042ea:	4602      	mov	r2, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2104      	movs	r1, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fe61 	bl	8004fbe <SDIO_GetResponse>
 80042fc:	4603      	mov	r3, r0
 80042fe:	0d1a      	lsrs	r2, r3, #20
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004304:	f107 0310 	add.w	r3, r7, #16
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fbf2 	bl	8003af4 <HAL_SD_GetCardCSD>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004316:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800431a:	e021      	b.n	8004360 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	2200      	movs	r2, #0
 8004328:	461c      	mov	r4, r3
 800432a:	4615      	mov	r5, r2
 800432c:	4622      	mov	r2, r4
 800432e:	462b      	mov	r3, r5
 8004330:	4608      	mov	r0, r1
 8004332:	f000 ff4f 	bl	80051d4 <SDMMC_CmdSelDesel>
 8004336:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <SD_InitCard+0x176>
  {
    return errorstate;
 800433e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004340:	e00e      	b.n	8004360 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	466c      	mov	r4, sp
 800434a:	f103 0210 	add.w	r2, r3, #16
 800434e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004354:	3304      	adds	r3, #4
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	4628      	mov	r0, r5
 800435a:	f000 fd85 	bl	8004e68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3740      	adds	r7, #64	; 0x40
 8004364:	46bd      	mov	sp, r7
 8004366:	bdb0      	pop	{r4, r5, r7, pc}

08004368 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 ff4a 	bl	800521a <SDMMC_CmdGoIdleState>
 8004386:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <SD_PowerON+0x2a>
  {
    return errorstate;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	e072      	b.n	8004478 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 ff5d 	bl	8005256 <SDMMC_CmdOperCond>
 800439c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ff33 	bl	800521a <SDMMC_CmdGoIdleState>
 80043b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	e05b      	b.n	8004478 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d137      	bne.n	800443e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ff5d 	bl	8005294 <SDMMC_CmdAppCommand>
 80043da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02d      	beq.n	800443e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043e6:	e047      	b.n	8004478 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 ff50 	bl	8005294 <SDMMC_CmdAppCommand>
 80043f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <SD_PowerON+0x98>
    {
      return errorstate;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	e03b      	b.n	8004478 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	491e      	ldr	r1, [pc, #120]	; (8004480 <SD_PowerON+0x118>)
 8004406:	4618      	mov	r0, r3
 8004408:	f000 ff66 	bl	80052d8 <SDMMC_CmdAppOperCommand>
 800440c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004418:	e02e      	b.n	8004478 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fdcc 	bl	8004fbe <SDIO_GetResponse>
 8004426:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0fdb      	lsrs	r3, r3, #31
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <SD_PowerON+0xcc>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <SD_PowerON+0xce>
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]

    count++;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004444:	4293      	cmp	r3, r2
 8004446:	d802      	bhi.n	800444e <SD_PowerON+0xe6>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0cc      	beq.n	80043e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004454:	4293      	cmp	r3, r2
 8004456:	d902      	bls.n	800445e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800445c:	e00c      	b.n	8004478 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
 800446e:	e002      	b.n	8004476 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	c1100000 	.word	0xc1100000

08004484 <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fd41 	bl	8004f18 <SDIO_PowerState_OFF>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80044ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b2:	e018      	b.n	80044e6 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f000 ffcd 	bl	8005460 <SDMMC_CmdSendStatus>
 80044c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <SD_SendStatus+0x34>
  {
    return errorstate;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	e009      	b.n	80044e6 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd70 	bl	8004fbe <SDIO_GetResponse>
 80044de:	4602      	mov	r2, r0
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fd5a 	bl	8004fbe <SDIO_GetResponse>
 800450a:	4603      	mov	r3, r0
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004514:	d102      	bne.n	800451c <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800451a:	e02f      	b.n	800457c <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800451c:	f107 030c 	add.w	r3, r7, #12
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f879 	bl	800461a <SD_FindSCR>
 8004528:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	e023      	b.n	800457c <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01c      	beq.n	8004578 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fea2 	bl	8005294 <SDMMC_CmdAppCommand>
 8004550:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	e00f      	b.n	800457c <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fedb 	bl	800531e <SDMMC_CmdBusWidth>
 8004568:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	e003      	b.n	800457c <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004574:	2300      	movs	r3, #0
 8004576:	e001      	b.n	800457c <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004578:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fd0f 	bl	8004fbe <SDIO_GetResponse>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045aa:	d102      	bne.n	80045b2 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b0:	e02f      	b.n	8004612 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045b2:	f107 030c 	add.w	r3, r7, #12
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f82e 	bl	800461a <SD_FindSCR>
 80045be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	e023      	b.n	8004612 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01c      	beq.n	800460e <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f000 fe57 	bl	8005294 <SDMMC_CmdAppCommand>
 80045e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	e00f      	b.n	8004612 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fe90 	bl	800531e <SDMMC_CmdBusWidth>
 80045fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e003      	b.n	8004612 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800460a:	2300      	movs	r3, #0
 800460c:	e001      	b.n	8004612 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800460e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800461a:	b590      	push	{r4, r7, lr}
 800461c:	b08f      	sub	sp, #60	; 0x3c
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004624:	f7fc fed0 	bl	80013c8 <HAL_GetTick>
 8004628:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2108      	movs	r1, #8
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fcfb 	bl	800503c <SDMMC_CmdBlockLength>
 8004646:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <SD_FindSCR+0x38>
  {
    return errorstate;
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	e0b2      	b.n	80047b8 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 fe18 	bl	8005294 <SDMMC_CmdAppCommand>
 8004664:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <SD_FindSCR+0x56>
  {
    return errorstate;
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	e0a3      	b.n	80047b8 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004674:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004676:	2308      	movs	r3, #8
 8004678:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800467a:	2330      	movs	r3, #48	; 0x30
 800467c:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800467e:	2302      	movs	r3, #2
 8004680:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004682:	2300      	movs	r3, #0
 8004684:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004686:	2301      	movs	r3, #1
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f107 0210 	add.w	r2, r7, #16
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fca5 	bl	8004fe4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fe5f 	bl	8005362 <SDMMC_CmdSendSCR>
 80046a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02a      	beq.n	8004702 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	e083      	b.n	80047b8 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00f      	beq.n	80046de <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	f107 0208 	add.w	r2, r7, #8
 80046ca:	18d4      	adds	r4, r2, r3
 80046cc:	4608      	mov	r0, r1
 80046ce:	f000 fbf6 	bl	8004ebe <SDIO_ReadFIFO>
 80046d2:	4603      	mov	r3, r0
 80046d4:	6023      	str	r3, [r4, #0]
      index++;
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	3301      	adds	r3, #1
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	e006      	b.n	80046ec <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80046ec:	f7fc fe6c 	bl	80013c8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fa:	d102      	bne.n	8004702 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80046fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004700:	e05a      	b.n	80047b8 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0cf      	beq.n	80046b0 <SD_FindSCR+0x96>
 8004710:	e000      	b.n	8004714 <SD_FindSCR+0xfa>
      break;
 8004712:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2208      	movs	r2, #8
 8004728:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800472a:	2308      	movs	r3, #8
 800472c:	e044      	b.n	80047b8 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2202      	movs	r2, #2
 8004742:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004744:	2302      	movs	r3, #2
 8004746:	e037      	b.n	80047b8 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2220      	movs	r2, #32
 800475c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800475e:	2320      	movs	r3, #32
 8004760:	e02a      	b.n	80047b8 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f240 523a 	movw	r2, #1338	; 0x53a
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	061a      	lsls	r2, r3, #24
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004778:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004782:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	0e1b      	lsrs	r3, r3, #24
 8004788:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	601a      	str	r2, [r3, #0]
    scr++;
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	3304      	adds	r3, #4
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	061a      	lsls	r2, r3, #24
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	0e1b      	lsrs	r3, r3, #24
 80047b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	373c      	adds	r7, #60	; 0x3c
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}

080047c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d03f      	beq.n	800485a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e033      	b.n	8004848 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fb6a 	bl	8004ebe <SDIO_ReadFIFO>
 80047ea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	701a      	strb	r2, [r3, #0]
      tmp++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3b01      	subs	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3b01      	subs	r3, #1
 800482a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	0e1b      	lsrs	r3, r3, #24
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3b01      	subs	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3301      	adds	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d9c8      	bls.n	80047e0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d043      	beq.n	8004904 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e037      	b.n	80048f2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	041a      	lsls	r2, r3, #16
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	061a      	lsls	r2, r3, #24
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3b01      	subs	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f107 0208 	add.w	r2, r7, #8
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 faf6 	bl	8004ed8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	3301      	adds	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b07      	cmp	r3, #7
 80048f6:	d9c4      	bls.n	8004882 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f839 	bl	80049aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 f9d8 	bl	8004d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e04e      	b.n	8004a76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <HAL_TIM_Base_Start_IT+0xc4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d01d      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <HAL_TIM_Base_Start_IT+0xcc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	; (8004a90 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d111      	bne.n	8004a64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d010      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a62:	e007      	b.n	8004a74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40001800 	.word	0x40001800

08004aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0202 	mvn.w	r2, #2
 8004acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8ee 	bl	8004cc4 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f8e0 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8f1 	bl	8004cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0204 	mvn.w	r2, #4
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8c4 	bl	8004cc4 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f8b6 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f8c7 	bl	8004cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0208 	mvn.w	r2, #8
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f89a 	bl	8004cc4 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f88c 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f89d 	bl	8004cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0210 	mvn.w	r2, #16
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f870 	bl	8004cc4 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f862 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f873 	bl	8004cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0201 	mvn.w	r2, #1
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fb ff0a 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f902 	bl	8004e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f838 	bl	8004cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0220 	mvn.w	r2, #32
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8cc 	bl	8004e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a40      	ldr	r2, [pc, #256]	; (8004e14 <TIM_Base_SetConfig+0x114>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1e:	d00f      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a3d      	ldr	r2, [pc, #244]	; (8004e18 <TIM_Base_SetConfig+0x118>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a3c      	ldr	r2, [pc, #240]	; (8004e1c <TIM_Base_SetConfig+0x11c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <TIM_Base_SetConfig+0x120>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3a      	ldr	r2, [pc, #232]	; (8004e24 <TIM_Base_SetConfig+0x124>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <TIM_Base_SetConfig+0x114>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02b      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d027      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <TIM_Base_SetConfig+0x118>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d023      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <TIM_Base_SetConfig+0x11c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <TIM_Base_SetConfig+0x120>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01b      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a29      	ldr	r2, [pc, #164]	; (8004e24 <TIM_Base_SetConfig+0x124>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d017      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <TIM_Base_SetConfig+0x128>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <TIM_Base_SetConfig+0x12c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <TIM_Base_SetConfig+0x130>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a25      	ldr	r2, [pc, #148]	; (8004e34 <TIM_Base_SetConfig+0x134>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <TIM_Base_SetConfig+0x138>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <TIM_Base_SetConfig+0x13c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d108      	bne.n	8004dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0xf8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <TIM_Base_SetConfig+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d103      	bne.n	8004e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	615a      	str	r2, [r3, #20]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40010400 	.word	0x40010400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	40001800 	.word	0x40001800
 8004e38:	40001c00 	.word	0x40001c00
 8004e3c:	40002000 	.word	0x40002000

08004e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e68:	b084      	sub	sp, #16
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	f107 001c 	add.w	r0, r7, #28
 8004e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004e86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004e8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004e8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004e92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004ea2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	b004      	add	sp, #16
 8004ebc:	4770      	bx	lr

08004ebe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2203      	movs	r2, #3
 8004f06:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004f08:	2002      	movs	r0, #2
 8004f0a:	f7fc fa69 	bl	80013e0 <HAL_Delay>
  
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0303 	and.w	r3, r3, #3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f8a:	f023 030f 	bic.w	r3, r3, #15
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	b2db      	uxtb	r3, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	461a      	mov	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
}  
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800500a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005010:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005016:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0

}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800504a:	2310      	movs	r3, #16
 800504c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ff74 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	2110      	movs	r1, #16
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa44 	bl	80054fc <SDMMC_GetCmdResp1>
 8005074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005076:	69fb      	ldr	r3, [r7, #28]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800508e:	2311      	movs	r3, #17
 8005090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff52 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	2111      	movs	r1, #17
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa22 	bl	80054fc <SDMMC_GetCmdResp1>
 80050b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ba:	69fb      	ldr	r3, [r7, #28]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050d2:	2312      	movs	r3, #18
 80050d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff30 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	2112      	movs	r1, #18
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa00 	bl	80054fc <SDMMC_GetCmdResp1>
 80050fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050fe:	69fb      	ldr	r3, [r7, #28]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005116:	2318      	movs	r3, #24
 8005118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005128:	f107 0308 	add.w	r3, r7, #8
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ff0e 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	2118      	movs	r1, #24
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9de 	bl	80054fc <SDMMC_GetCmdResp1>
 8005140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005142:	69fb      	ldr	r3, [r7, #28]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800515a:	2319      	movs	r3, #25
 800515c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800515e:	2340      	movs	r3, #64	; 0x40
 8005160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff feec 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	2119      	movs	r1, #25
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9bc 	bl	80054fc <SDMMC_GetCmdResp1>
 8005184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800519c:	230c      	movs	r3, #12
 800519e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a0:	2340      	movs	r3, #64	; 0x40
 80051a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fecb 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80051ba:	4a05      	ldr	r2, [pc, #20]	; (80051d0 <SDMMC_CmdStopTransfer+0x40>)
 80051bc:	210c      	movs	r1, #12
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f99c 	bl	80054fc <SDMMC_GetCmdResp1>
 80051c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	05f5e100 	.word	0x05f5e100

080051d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051e4:	2307      	movs	r3, #7
 80051e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051f6:	f107 0310 	add.w	r3, r7, #16
 80051fa:	4619      	mov	r1, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fea7 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005202:	f241 3288 	movw	r2, #5000	; 0x1388
 8005206:	2107      	movs	r1, #7
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f977 	bl	80054fc <SDMMC_GetCmdResp1>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005212:	4618      	mov	r0, r3
 8005214:	3728      	adds	r7, #40	; 0x28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b088      	sub	sp, #32
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005236:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fe86 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f92d 	bl	80054a4 <SDMMC_GetCmdError>
 800524a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800524c:	69fb      	ldr	r3, [r7, #28]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b088      	sub	sp, #32
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800525e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005264:	2308      	movs	r3, #8
 8005266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fe67 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fb24 	bl	80058d0 <SDMMC_GetCmdResp7>
 8005288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528a:	69fb      	ldr	r3, [r7, #28]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052a2:	2337      	movs	r3, #55	; 0x37
 80052a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe48 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	2137      	movs	r1, #55	; 0x37
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f918 	bl	80054fc <SDMMC_GetCmdResp1>
 80052cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ce:	69fb      	ldr	r3, [r7, #28]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80052ee:	2329      	movs	r3, #41	; 0x29
 80052f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052f2:	2340      	movs	r3, #64	; 0x40
 80052f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fe22 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa2b 	bl	8005768 <SDMMC_GetCmdResp3>
 8005312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005314:	69fb      	ldr	r3, [r7, #28]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800532c:	2306      	movs	r3, #6
 800532e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fe03 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	2106      	movs	r1, #6
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f8d3 	bl	80054fc <SDMMC_GetCmdResp1>
 8005356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005358:	69fb      	ldr	r3, [r7, #28]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b088      	sub	sp, #32
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800536e:	2333      	movs	r3, #51	; 0x33
 8005370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800537a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fde2 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	2133      	movs	r1, #51	; 0x33
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f8b2 	bl	80054fc <SDMMC_GetCmdResp1>
 8005398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053b0:	2302      	movs	r3, #2
 80053b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053b4:	23c0      	movs	r3, #192	; 0xc0
 80053b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fdc1 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f982 	bl	80056d8 <SDMMC_GetCmdResp2>
 80053d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053d6:	69fb      	ldr	r3, [r7, #28]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80053ee:	2309      	movs	r3, #9
 80053f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053f2:	23c0      	movs	r3, #192	; 0xc0
 80053f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fda2 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f963 	bl	80056d8 <SDMMC_GetCmdResp2>
 8005412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005414:	69fb      	ldr	r3, [r7, #28]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800542c:	2303      	movs	r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800543c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fd83 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	2103      	movs	r1, #3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9c8 	bl	80057e4 <SDMMC_GetCmdResp6>
 8005454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005456:	69fb      	ldr	r3, [r7, #28]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800546e:	230d      	movs	r3, #13
 8005470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800547a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800547e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff fd62 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	210d      	movs	r1, #13
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f832 	bl	80054fc <SDMMC_GetCmdResp1>
 8005498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <SDMMC_GetCmdError+0x50>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <SDMMC_GetCmdError+0x54>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0a5b      	lsrs	r3, r3, #9
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1e5a      	subs	r2, r3, #1
 80054c6:	60fa      	str	r2, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054d0:	e009      	b.n	80054e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f1      	beq.n	80054c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	22c5      	movs	r2, #197	; 0xc5
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000020 	.word	0x20000020
 80054f8:	10624dd3 	.word	0x10624dd3

080054fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	460b      	mov	r3, r1
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800550a:	4b70      	ldr	r3, [pc, #448]	; (80056cc <SDMMC_GetCmdResp1+0x1d0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a70      	ldr	r2, [pc, #448]	; (80056d0 <SDMMC_GetCmdResp1+0x1d4>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	0a5a      	lsrs	r2, r3, #9
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	1e5a      	subs	r2, r3, #1
 8005522:	61fa      	str	r2, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800552c:	e0c9      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ef      	beq.n	800551e <SDMMC_GetCmdResp1+0x22>
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ea      	bne.n	800551e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2204      	movs	r2, #4
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800555a:	2304      	movs	r3, #4
 800555c:	e0b1      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005570:	2301      	movs	r3, #1
 8005572:	e0a6      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	22c5      	movs	r2, #197	; 0xc5
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff fd12 	bl	8004fa4 <SDIO_GetCommandResponse>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	4293      	cmp	r3, r2
 8005588:	d001      	beq.n	800558e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800558a:	2301      	movs	r3, #1
 800558c:	e099      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800558e:	2100      	movs	r1, #0
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fd14 	bl	8004fbe <SDIO_GetResponse>
 8005596:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4b4e      	ldr	r3, [pc, #312]	; (80056d4 <SDMMC_GetCmdResp1+0x1d8>)
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e08d      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da02      	bge.n	80055b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b0:	e087      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055bc:	2340      	movs	r3, #64	; 0x40
 80055be:	e080      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	e079      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055dc:	e071      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ec:	e069      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fc:	e061      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800560c:	e059      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800561c:	e051      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800562c:	e049      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800563c:	e041      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564c:	e039      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800565c:	e031      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005668:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800566c:	e029      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005678:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800567c:	e021      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005688:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800568c:	e019      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005698:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800569c:	e011      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80056a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056ac:	e009      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056bc:	e001      	b.n	80056c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000020 	.word	0x20000020
 80056d0:	10624dd3 	.word	0x10624dd3
 80056d4:	fdffe008 	.word	0xfdffe008

080056d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <SDMMC_GetCmdResp2+0x88>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <SDMMC_GetCmdResp2+0x8c>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0a5b      	lsrs	r3, r3, #9
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1e5a      	subs	r2, r3, #1
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005704:	e026      	b.n	8005754 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ef      	beq.n	80056f6 <SDMMC_GetCmdResp2+0x1e>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ea      	bne.n	80056f6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2204      	movs	r2, #4
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005732:	2304      	movs	r3, #4
 8005734:	e00e      	b.n	8005754 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005748:	2301      	movs	r3, #1
 800574a:	e003      	b.n	8005754 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	22c5      	movs	r2, #197	; 0xc5
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000020 	.word	0x20000020
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <SDMMC_GetCmdResp3+0x74>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <SDMMC_GetCmdResp3+0x78>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	0a5b      	lsrs	r3, r3, #9
 800577c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	60fa      	str	r2, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005794:	e01b      	b.n	80057ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ef      	beq.n	8005786 <SDMMC_GetCmdResp3+0x1e>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ea      	bne.n	8005786 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057c2:	2304      	movs	r3, #4
 80057c4:	e003      	b.n	80057ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	22c5      	movs	r2, #197	; 0xc5
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000020 	.word	0x20000020
 80057e0:	10624dd3 	.word	0x10624dd3

080057e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	460b      	mov	r3, r1
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057f2:	4b35      	ldr	r3, [pc, #212]	; (80058c8 <SDMMC_GetCmdResp6+0xe4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a35      	ldr	r2, [pc, #212]	; (80058cc <SDMMC_GetCmdResp6+0xe8>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0a5b      	lsrs	r3, r3, #9
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	1e5a      	subs	r2, r3, #1
 800580c:	61fa      	str	r2, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005812:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005816:	e052      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ef      	beq.n	8005808 <SDMMC_GetCmdResp6+0x24>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ea      	bne.n	8005808 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2204      	movs	r2, #4
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005844:	2304      	movs	r3, #4
 8005846:	e03a      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800585a:	2301      	movs	r3, #1
 800585c:	e02f      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff fba0 	bl	8004fa4 <SDIO_GetCommandResponse>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	7afb      	ldrb	r3, [r7, #11]
 800586a:	4293      	cmp	r3, r2
 800586c:	d001      	beq.n	8005872 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800586e:	2301      	movs	r3, #1
 8005870:	e025      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	22c5      	movs	r2, #197	; 0xc5
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fb9f 	bl	8004fbe <SDIO_GetResponse>
 8005880:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005896:	2300      	movs	r3, #0
 8005898:	e011      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058a8:	e009      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b8:	e001      	b.n	80058be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000020 	.word	0x20000020
 80058cc:	10624dd3 	.word	0x10624dd3

080058d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058d8:	4b22      	ldr	r3, [pc, #136]	; (8005964 <SDMMC_GetCmdResp7+0x94>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <SDMMC_GetCmdResp7+0x98>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	0a5b      	lsrs	r3, r3, #9
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	60fa      	str	r2, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058fc:	e02c      	b.n	8005958 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0ef      	beq.n	80058ee <SDMMC_GetCmdResp7+0x1e>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ea      	bne.n	80058ee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2204      	movs	r2, #4
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800592a:	2304      	movs	r3, #4
 800592c:	e014      	b.n	8005958 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005940:	2301      	movs	r3, #1
 8005942:	e009      	b.n	8005958 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2240      	movs	r2, #64	; 0x40
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005956:	2300      	movs	r3, #0
  
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000020 	.word	0x20000020
 8005968:	10624dd3 	.word	0x10624dd3

0800596c <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800596c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005970:	b09e      	sub	sp, #120	; 0x78
 8005972:	af04      	add	r7, sp, #16
 8005974:	61f8      	str	r0, [r7, #28]
 8005976:	61b9      	str	r1, [r7, #24]
 8005978:	617a      	str	r2, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	015b      	lsls	r3, r3, #5
 8005998:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <_fx_directory_entry_read+0x3e>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80a1 	beq.w	8005aec <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 80059be:	2302      	movs	r3, #2
 80059c0:	e355      	b.n	800606e <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 80059c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ca:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 80059cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80059d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059d6:	fb01 f202 	mul.w	r2, r1, r2
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d028      	beq.n	8005a42 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01e      	beq.n	8005a36 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80059fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d319      	bcc.n	8005a36 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bf08      	it	eq
 8005a12:	4290      	cmpeq	r0, r2
 8005a14:	d10f      	bne.n	8005a36 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d109      	bne.n	8005a36 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2200      	movs	r2, #0
 8005a32:	651a      	str	r2, [r3, #80]	; 0x50
 8005a34:	e00a      	b.n	8005a4c <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a40:	e024      	b.n	8005a8c <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a46:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 8005a4c:	e01e      	b.n	8005a8c <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8005a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d907      	bls.n	8005a64 <_fx_directory_entry_read+0xf8>
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a5a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8005a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d301      	bcc.n	8005a68 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 8005a64:	2308      	movs	r3, #8
 8005a66:	e302      	b.n	800606e <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8005a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a70:	69f8      	ldr	r0, [r7, #28]
 8005a72:	f006 fc5b 	bl	800c32c <_fx_utility_FAT_entry_read>
 8005a76:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	e2f5      	b.n	800606e <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 8005a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a88:	3301      	adds	r3, #1
 8005a8a:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 8005a8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d3dc      	bcc.n	8005a4e <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8005a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9a:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005aa4:	4413      	add	r3, r2
 8005aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aa8:	4413      	add	r3, r2
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aae:	2200      	movs	r2, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005ab8:	2203      	movs	r2, #3
 8005aba:	9202      	str	r2, [sp, #8]
 8005abc:	2201      	movs	r2, #1
 8005abe:	9201      	str	r2, [sp, #4]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ac6:	69f8      	ldr	r0, [r7, #28]
 8005ac8:	f008 f83e 	bl	800db48 <_fx_utility_logical_sector_read>
 8005acc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	e2ca      	b.n	800606e <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ae2:	fb01 f202 	mul.w	r2, r1, r2
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aea:	e02f      	b.n	8005b4c <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af2:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8005afa:	4413      	add	r3, r2
 8005afc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b00:	2200      	movs	r2, #0
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b18:	69f8      	ldr	r0, [r7, #28]
 8005b1a:	f008 f815 	bl	800db48 <_fx_utility_logical_sector_read>
 8005b1e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	e2a1      	b.n	800606e <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b2e:	2300      	movs	r3, #0
 8005b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b34:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3c:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8005b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	4413      	add	r3, r2
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8005b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4698      	mov	r8, r3
 8005b5c:	4691      	mov	r9, r2
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b68:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2200      	movs	r2, #0
 8005b74:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	330b      	adds	r3, #11
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	f040 8129 	bne.w	8005dde <_fx_directory_entry_read+0x472>
 8005b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2be5      	cmp	r3, #229	; 0xe5
 8005b92:	f000 8124 	beq.w	8005dde <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 021f 	and.w	r2, r3, #31
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3b0d      	subs	r3, #13
 8005baa:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8005bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb8:	2bfe      	cmp	r3, #254	; 0xfe
 8005bba:	d908      	bls.n	8005bce <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8005bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 021f 	and.w	r2, r3, #31
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	619a      	str	r2, [r3, #24]
 8005bcc:	e015      	b.n	8005bfa <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd6:	330e      	adds	r3, #14
 8005bd8:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be0:	4413      	add	r3, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	3301      	adds	r3, #1
 8005bea:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8005bec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d202      	bcs.n	8005bfa <_fx_directory_entry_read+0x28e>
 8005bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf6:	2bff      	cmp	r3, #255	; 0xff
 8005bf8:	d9ef      	bls.n	8005bda <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 8005bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	3b01      	subs	r3, #1
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8005c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d168      	bne.n	8005cde <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c10:	2300      	movs	r3, #0
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
 8005c14:	e060      	b.n	8005cd8 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 8005c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c18:	2b0b      	cmp	r3, #11
 8005c1a:	d057      	beq.n	8005ccc <_fx_directory_entry_read+0x360>
 8005c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1e:	2b1a      	cmp	r3, #26
 8005c20:	d054      	beq.n	8005ccc <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 8005c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c24:	2b0d      	cmp	r3, #13
 8005c26:	d102      	bne.n	8005c2e <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 8005c28:	230c      	movs	r3, #12
 8005c2a:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 8005c2c:	e051      	b.n	8005cd2 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 8005c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c30:	3301      	adds	r3, #1
 8005c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c34:	4413      	add	r3, r2
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d014      	beq.n	8005c66 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3e:	3301      	adds	r3, #1
 8005c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2bff      	cmp	r3, #255	; 0xff
 8005c48:	d105      	bne.n	8005c56 <_fx_directory_entry_read+0x2ea>
 8005c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2bff      	cmp	r3, #255	; 0xff
 8005c54:	d007      	beq.n	8005c66 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5e:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8005c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d02e      	beq.n	8005cd0 <_fx_directory_entry_read+0x364>
 8005c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2bff      	cmp	r3, #255	; 0xff
 8005c7c:	d028      	beq.n	8005cd0 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8005c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c8c:	4413      	add	r3, r2
 8005c8e:	2bfe      	cmp	r3, #254	; 0xfe
 8005c90:	d908      	bls.n	8005ca4 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 8005c92:	2301      	movs	r3, #1
 8005c94:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9a:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 8005ca2:	e01c      	b.n	8005cde <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 8005ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca8:	18d1      	adds	r1, r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cbc:	4413      	add	r3, r2
 8005cbe:	4403      	add	r3, r0
 8005cc0:	780a      	ldrb	r2, [r1, #0]
 8005cc2:	701a      	strb	r2, [r3, #0]

                    j++;
 8005cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cca:	e002      	b.n	8005cd2 <_fx_directory_entry_read+0x366>
                        continue;
 8005ccc:	bf00      	nop
 8005cce:	e000      	b.n	8005cd2 <_fx_directory_entry_read+0x366>
                        continue;
 8005cd0:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8005cd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	667b      	str	r3, [r7, #100]	; 0x64
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	2b1f      	cmp	r3, #31
 8005cdc:	d99b      	bls.n	8005c16 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8005cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce0:	f103 0220 	add.w	r2, r3, #32
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d365      	bcc.n	8005db8 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <_fx_directory_entry_read+0x38e>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d038      	beq.n	8005d6c <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d206      	bcs.n	8005d14 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8005d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d08:	3301      	adds	r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0e:	3301      	adds	r3, #1
 8005d10:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8005d12:	e038      	b.n	8005d86 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8005d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1c:	69f8      	ldr	r0, [r7, #28]
 8005d1e:	f006 fb05 	bl	800c32c <_fx_utility_FAT_entry_read>
 8005d22:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	e19f      	b.n	800606e <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8005d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d907      	bls.n	8005d48 <_fx_directory_entry_read+0x3dc>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d3e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8005d42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d301      	bcc.n	8005d4c <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8005d48:	2308      	movs	r3, #8
 8005d4a:	e190      	b.n	800606e <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 8005d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4e:	3301      	adds	r3, #1
 8005d50:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8005d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5c:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8005d66:	4413      	add	r3, r2
 8005d68:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8005d6a:	e00c      	b.n	8005d86 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6e:	3301      	adds	r3, #1
 8005d70:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	4413      	add	r3, r2
 8005d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d301      	bcc.n	8005d86 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8005d82:	2308      	movs	r3, #8
 8005d84:	e173      	b.n	800606e <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d88:	2200      	movs	r2, #0
 8005d8a:	469a      	mov	sl, r3
 8005d8c:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8005d92:	2203      	movs	r2, #3
 8005d94:	9202      	str	r2, [sp, #8]
 8005d96:	2201      	movs	r2, #1
 8005d98:	9201      	str	r2, [sp, #4]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	465b      	mov	r3, fp
 8005da0:	69f8      	ldr	r0, [r7, #28]
 8005da2:	f007 fed1 	bl	800db48 <_fx_utility_logical_sector_read>
 8005da6:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 8005dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db0:	e15d      	b.n	800606e <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44
 8005db6:	e002      	b.n	8005dbe <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8005db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dba:	3320      	adds	r3, #32
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc4:	4413      	add	r3, r2
 8005dc6:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	3301      	adds	r3, #1
 8005dcc:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af12 	bne.w	8005bfa <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	615a      	str	r2, [r3, #20]
 8005ddc:	e001      	b.n	8005de2 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 8005de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	667b      	str	r3, [r7, #100]	; 0x64
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005e00:	e03d      	b.n	8005e7e <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 8005e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e06:	4413      	add	r3, r2
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d03b      	beq.n	8005e86 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 8005e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e12:	4413      	add	r3, r2
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b2e      	cmp	r3, #46	; 0x2e
 8005e18:	d101      	bne.n	8005e1e <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 8005e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e22:	4413      	add	r3, r2
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d105      	bne.n	8005e36 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 8005e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d122      	bne.n	8005e76 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 8005e30:	2301      	movs	r3, #1
 8005e32:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 8005e34:	e01f      	b.n	8005e76 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 8005e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d104      	bne.n	8005e46 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 8005e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 8005e42:	2301      	movs	r3, #1
 8005e44:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 8005e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d108      	bne.n	8005e5e <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8005e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	663a      	str	r2, [r7, #96]	; 0x60
 8005e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e54:	4413      	add	r3, r2
 8005e56:	222e      	movs	r2, #46	; 0x2e
 8005e58:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8005e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e62:	441a      	add	r2, r3
 8005e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e68:	440b      	add	r3, r1
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 8005e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e70:	3301      	adds	r3, #1
 8005e72:	663b      	str	r3, [r7, #96]	; 0x60
 8005e74:	e000      	b.n	8005e78 <_fx_directory_entry_read+0x50c>
            continue;
 8005e76:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8005e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e80:	2b0a      	cmp	r3, #10
 8005e82:	d9be      	bls.n	8005e02 <_fx_directory_entry_read+0x496>
 8005e84:	e000      	b.n	8005e88 <_fx_directory_entry_read+0x51c>
            break;
 8005e86:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <_fx_directory_entry_read+0x53a>
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2be5      	cmp	r3, #229	; 0xe5
 8005e96:	d106      	bne.n	8005ea6 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	22e5      	movs	r2, #229	; 0xe5
 8005e9e:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d114      	bne.n	8005ed8 <_fx_directory_entry_read+0x56c>
 8005eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d110      	bne.n	8005ed8 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eba:	e00a      	b.n	8005ed2 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8005ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec0:	441a      	add	r2, r3
 8005ec2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec6:	440b      	add	r3, r1
 8005ec8:	7812      	ldrb	r2, [r2, #0]
 8005eca:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8005ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ece:	3301      	adds	r3, #1
 8005ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	2b0a      	cmp	r3, #10
 8005ed6:	d9f1      	bls.n	8005ebc <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8005ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005edc:	4413      	add	r3, r2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8005ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee4:	330b      	adds	r3, #11
 8005ee6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8005ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	643a      	str	r2, [r7, #64]	; 0x40
 8005eee:	781a      	ldrb	r2, [r3, #0]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8005ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	643a      	str	r2, [r7, #64]	; 0x40
 8005efa:	781a      	ldrb	r2, [r3, #0]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8005f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02a      	beq.n	8005f5c <_fx_directory_entry_read+0x5f0>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	7f5b      	ldrb	r3, [r3, #29]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d024      	beq.n	8005f5c <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	663b      	str	r3, [r7, #96]	; 0x60
 8005f16:	e018      	b.n	8005f4a <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8005f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1c:	4413      	add	r3, r2
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d90f      	bls.n	8005f44 <_fx_directory_entry_read+0x5d8>
 8005f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f28:	4413      	add	r3, r2
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b5a      	cmp	r3, #90	; 0x5a
 8005f2e:	d809      	bhi.n	8005f44 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8005f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f34:	4413      	add	r3, r2
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3220      	adds	r2, #32
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8005f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f46:	3301      	adds	r3, #1
 8005f48:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f4c:	2b0b      	cmp	r3, #11
 8005f4e:	d805      	bhi.n	8005f5c <_fx_directory_entry_read+0x5f0>
 8005f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f54:	4413      	add	r3, r2
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1dd      	bne.n	8005f18 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	643a      	str	r2, [r7, #64]	; 0x40
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8005f68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005f6a:	f006 f979 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8005f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f76:	3302      	adds	r3, #2
 8005f78:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8005f7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005f7c:	f006 f970 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8005f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f88:	3302      	adds	r3, #2
 8005f8a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8005f8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005f8e:	f006 f967 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8005f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8005fa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005fa8:	f006 f95a 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	041a      	lsls	r2, r3, #16
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	635a      	str	r2, [r3, #52]	; 0x34
 8005fbc:	e002      	b.n	8005fc4 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8005fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8005fca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005fcc:	f006 f948 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd8:	3302      	adds	r3, #2
 8005fda:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8005fdc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005fde:	f006 f93f 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fea:	3302      	adds	r3, #2
 8005fec:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8005fee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ff0:	f006 f936 	bl	800c260 <_fx_utility_16_unsigned_read>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	441a      	add	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8006000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006002:	3302      	adds	r3, #2
 8006004:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8006006:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006008:	f006 f952 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800600c:	4603      	mov	r3, r0
 800600e:	2200      	movs	r2, #0
 8006010:	461c      	mov	r4, r3
 8006012:	4615      	mov	r5, r2
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2200      	movs	r2, #0
 800601e:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2200      	movs	r2, #0
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8006026:	6939      	ldr	r1, [r7, #16]
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2200      	movs	r2, #0
 8006038:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006044:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00f      	beq.n	800606c <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006056:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800605e:	69b9      	ldr	r1, [r7, #24]
 8006060:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3768      	adds	r7, #104	; 0x68
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006078 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8006078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800607c:	b0a2      	sub	sp, #136	; 0x88
 800607e:	af04      	add	r7, sp, #16
 8006080:	6178      	str	r0, [r7, #20]
 8006082:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2be5      	cmp	r3, #229	; 0xe5
 800609a:	d109      	bne.n	80060b0 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 80060a0:	2be5      	cmp	r3, #229	; 0xe5
 80060a2:	d105      	bne.n	80060b0 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2200      	movs	r2, #0
 80060ac:	711a      	strb	r2, [r3, #4]
 80060ae:	e001      	b.n	80060b4 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80060c0:	4613      	mov	r3, r2
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d316      	bcc.n	80060fc <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060d4:	1ad2      	subs	r2, r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	3302      	adds	r3, #2
 80060e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 80060f2:	4413      	add	r3, r2
 80060f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060fa:	e003      	b.n	8006104 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8006100:	2300      	movs	r3, #0
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800610e:	2303      	movs	r3, #3
 8006110:	9302      	str	r3, [sp, #8]
 8006112:	2301      	movs	r3, #1
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	9200      	str	r2, [sp, #0]
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	f007 fd13 	bl	800db48 <_fx_utility_logical_sector_read>
 8006122:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	f000 bdda 	b.w	8006ce4 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800613c:	4413      	add	r3, r2
 800613e:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 83cc 	beq.w	80068e2 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800614a:	2300      	movs	r3, #0
 800614c:	653b      	str	r3, [r7, #80]	; 0x50
 800614e:	2300      	movs	r3, #0
 8006150:	667b      	str	r3, [r7, #100]	; 0x64
 8006152:	2300      	movs	r3, #0
 8006154:	64bb      	str	r3, [r7, #72]	; 0x48
 8006156:	2300      	movs	r3, #0
 8006158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615a:	e02c      	b.n	80061b6 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b2e      	cmp	r3, #46	; 0x2e
 8006168:	d108      	bne.n	800617c <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01e      	beq.n	80061ae <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 8006170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 8006174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006176:	3301      	adds	r3, #1
 8006178:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800617a:	e019      	b.n	80061b0 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006182:	4413      	add	r3, r2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b20      	cmp	r3, #32
 8006188:	d012      	beq.n	80061b0 <_fx_directory_entry_write+0x138>
 800618a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800618c:	2b07      	cmp	r3, #7
 800618e:	d80f      	bhi.n	80061b0 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006196:	4413      	add	r3, r2
 8006198:	7819      	ldrb	r1, [r3, #0]
 800619a:	f107 021c 	add.w	r2, r7, #28
 800619e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a0:	4413      	add	r3, r2
 80061a2:	460a      	mov	r2, r1
 80061a4:	701a      	strb	r2, [r3, #0]
                i++;
 80061a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a8:	3301      	adds	r3, #1
 80061aa:	667b      	str	r3, [r7, #100]	; 0x64
 80061ac:	e000      	b.n	80061b0 <_fx_directory_entry_write+0x138>
                    continue;
 80061ae:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 80061b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b2:	3301      	adds	r3, #1
 80061b4:	653b      	str	r3, [r7, #80]	; 0x50
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1cb      	bne.n	800615c <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 80061c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c6:	663b      	str	r3, [r7, #96]	; 0x60
 80061c8:	e008      	b.n	80061dc <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 80061ca:	f107 021c 	add.w	r2, r7, #28
 80061ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d0:	4413      	add	r3, r2
 80061d2:	2220      	movs	r2, #32
 80061d4:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 80061d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d8:	3301      	adds	r3, #1
 80061da:	663b      	str	r3, [r7, #96]	; 0x60
 80061dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061de:	2b0a      	cmp	r3, #10
 80061e0:	d9f3      	bls.n	80061ca <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 80061e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d03e      	beq.n	8006266 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ee:	4413      	add	r3, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006200:	4413      	add	r3, r2
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620e:	4413      	add	r3, r2
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006220:	4413      	add	r3, r2
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622e:	4413      	add	r3, r2
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006240:	4413      	add	r3, r2
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 8006248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624a:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800624c:	e008      	b.n	8006260 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800624e:	f107 021c 	add.w	r2, r7, #28
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	4413      	add	r3, r2
 8006256:	2220      	movs	r2, #32
 8006258:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800625a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625c:	3301      	adds	r3, #1
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006262:	2b07      	cmp	r3, #7
 8006264:	d9f3      	bls.n	800624e <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 8006266:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006268:	4b8e      	ldr	r3, [pc, #568]	; (80064a4 <_fx_directory_entry_write+0x42c>)
 800626a:	fba3 2301 	umull	r2, r3, r3, r1
 800626e:	089a      	lsrs	r2, r3, #2
 8006270:	4613      	mov	r3, r2
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	1aca      	subs	r2, r1, r3
 800627c:	2a00      	cmp	r2, #0
 800627e:	d106      	bne.n	800628e <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 8006280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006282:	4a88      	ldr	r2, [pc, #544]	; (80064a4 <_fx_directory_entry_write+0x42c>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	089b      	lsrs	r3, r3, #2
 800628a:	657b      	str	r3, [r7, #84]	; 0x54
 800628c:	e006      	b.n	800629c <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800628e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006290:	4a84      	ldr	r2, [pc, #528]	; (80064a4 <_fx_directory_entry_write+0x42c>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	3301      	adds	r3, #1
 800629a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800629c:	2301      	movs	r3, #1
 800629e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 80062a8:	e03f      	b.n	800632a <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 80062aa:	f107 021c 	add.w	r2, r7, #28
 80062ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b0:	4413      	add	r3, r2
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d116      	bne.n	80062e6 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062be:	4413      	add	r3, r2
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d035      	beq.n	8006332 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062cc:	4413      	add	r3, r2
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b2e      	cmp	r3, #46	; 0x2e
 80062d2:	d002      	beq.n	80062da <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80062d8:	e02c      	b.n	8006334 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 80062da:	2308      	movs	r3, #8
 80062dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 80062de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e0:	3301      	adds	r3, #1
 80062e2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 80062e4:	e021      	b.n	800632a <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 80062e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d109      	bne.n	8006300 <_fx_directory_entry_write+0x288>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062f2:	4413      	add	r3, r2
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b2e      	cmp	r3, #46	; 0x2e
 80062f8:	d102      	bne.n	8006300 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 80062fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062fc:	3301      	adds	r3, #1
 80062fe:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 8006300:	f107 021c 	add.w	r2, r7, #28
 8006304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006306:	4413      	add	r3, r2
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6819      	ldr	r1, [r3, #0]
 800630e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006310:	440b      	add	r3, r1
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d002      	beq.n	800631e <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800631c:	e00a      	b.n	8006334 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800631e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006320:	3301      	adds	r3, #1
 8006322:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 8006324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006326:	3301      	adds	r3, #1
 8006328:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800632a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800632c:	2b0a      	cmp	r3, #10
 800632e:	d9bc      	bls.n	80062aa <_fx_directory_entry_write+0x232>
 8006330:	e000      	b.n	8006334 <_fx_directory_entry_write+0x2bc>
                    break;
 8006332:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 8006334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <_fx_directory_entry_write+0x2ce>
 800633a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800633e:	2b20      	cmp	r3, #32
 8006340:	d101      	bne.n	8006346 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800634c:	4413      	add	r3, r2
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 8006354:	2300      	movs	r3, #0
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 8006358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635a:	2b00      	cmp	r3, #0
 800635c:	d15a      	bne.n	8006414 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	b29b      	uxth	r3, r3
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800636a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636c:	2b03      	cmp	r3, #3
 800636e:	d901      	bls.n	8006374 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 8006370:	2303      	movs	r3, #3
 8006372:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 8006374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	667a      	str	r2, [r7, #100]	; 0x64
 800637a:	3368      	adds	r3, #104	; 0x68
 800637c:	f107 0210 	add.w	r2, r7, #16
 8006380:	4413      	add	r3, r2
 8006382:	227e      	movs	r2, #126	; 0x7e
 8006384:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 8006388:	2300      	movs	r3, #0
 800638a:	65bb      	str	r3, [r7, #88]	; 0x58
 800638c:	e03f      	b.n	800640e <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800638e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	0b1b      	lsrs	r3, r3, #12
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800639e:	e015      	b.n	80063cc <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 80063a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d105      	bne.n	80063b2 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063b0:	e00c      	b.n	80063cc <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 80063b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d105      	bne.n	80063c4 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c2:	e003      	b.n	80063cc <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 80063cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ce:	2b09      	cmp	r3, #9
 80063d0:	d90d      	bls.n	80063ee <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 80063d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	6679      	str	r1, [r7, #100]	; 0x64
 80063dc:	3237      	adds	r2, #55	; 0x37
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	3368      	adds	r3, #104	; 0x68
 80063e2:	f107 0110 	add.w	r1, r7, #16
 80063e6:	440b      	add	r3, r1
 80063e8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 80063ec:	e00c      	b.n	8006408 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 80063ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	6679      	str	r1, [r7, #100]	; 0x64
 80063f8:	3230      	adds	r2, #48	; 0x30
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	3368      	adds	r3, #104	; 0x68
 80063fe:	f107 0110 	add.w	r1, r7, #16
 8006402:	440b      	add	r3, r1
 8006404:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 8006408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800640a:	3301      	adds	r3, #1
 800640c:	65bb      	str	r3, [r7, #88]	; 0x58
 800640e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006410:	2b03      	cmp	r3, #3
 8006412:	d9bc      	bls.n	800638e <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800641a:	7f3b      	ldrb	r3, [r7, #28]
 800641c:	2be5      	cmp	r3, #229	; 0xe5
 800641e:	d104      	bne.n	800642a <_fx_directory_entry_write+0x3b2>
 8006420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 8006426:	238f      	movs	r3, #143	; 0x8f
 8006428:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800642a:	2300      	movs	r3, #0
 800642c:	667b      	str	r3, [r7, #100]	; 0x64
 800642e:	e01d      	b.n	800646c <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 8006430:	f107 021c 	add.w	r2, r7, #28
 8006434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006436:	4413      	add	r3, r2
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800643e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006442:	2b60      	cmp	r3, #96	; 0x60
 8006444:	d908      	bls.n	8006458 <_fx_directory_entry_write+0x3e0>
 8006446:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800644a:	2b7a      	cmp	r3, #122	; 0x7a
 800644c:	d804      	bhi.n	8006458 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800644e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006452:	3b20      	subs	r3, #32
 8006454:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 8006458:	f107 021c 	add.w	r2, r7, #28
 800645c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800645e:	4413      	add	r3, r2
 8006460:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8006464:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8006466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006468:	3301      	adds	r3, #1
 800646a:	667b      	str	r3, [r7, #100]	; 0x64
 800646c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800646e:	2b0a      	cmp	r3, #10
 8006470:	d9de      	bls.n	8006430 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	791b      	ldrb	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8095 	beq.w	80065a6 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800647c:	2300      	movs	r3, #0
 800647e:	667b      	str	r3, [r7, #100]	; 0x64
 8006480:	e008      	b.n	8006494 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 8006482:	f107 021c 	add.w	r2, r7, #28
 8006486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006488:	4413      	add	r3, r2
 800648a:	2220      	movs	r2, #32
 800648c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800648e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006490:	3301      	adds	r3, #1
 8006492:	667b      	str	r3, [r7, #100]	; 0x64
 8006494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006496:	2b0a      	cmp	r3, #10
 8006498:	d9f3      	bls.n	8006482 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800649a:	2300      	movs	r3, #0
 800649c:	667b      	str	r3, [r7, #100]	; 0x64
 800649e:	2300      	movs	r3, #0
 80064a0:	663b      	str	r3, [r7, #96]	; 0x60
 80064a2:	e023      	b.n	80064ec <_fx_directory_entry_write+0x474>
 80064a4:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ac:	4413      	add	r3, r2
 80064ae:	3304      	adds	r3, #4
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b2e      	cmp	r3, #46	; 0x2e
 80064b4:	d01e      	beq.n	80064f4 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d019      	beq.n	80064f8 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064c8:	4413      	add	r3, r2
 80064ca:	3304      	adds	r3, #4
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 80064d2:	f107 021c 	add.w	r2, r7, #28
 80064d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064d8:	4413      	add	r3, r2
 80064da:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80064de:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 80064e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e2:	3301      	adds	r3, #1
 80064e4:	667b      	str	r3, [r7, #100]	; 0x64
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	3301      	adds	r3, #1
 80064ea:	663b      	str	r3, [r7, #96]	; 0x60
 80064ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ee:	2b07      	cmp	r3, #7
 80064f0:	d9da      	bls.n	80064a8 <_fx_directory_entry_write+0x430>
 80064f2:	e002      	b.n	80064fa <_fx_directory_entry_write+0x482>
                    break;
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <_fx_directory_entry_write+0x482>
                    break;
 80064f8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fe:	4413      	add	r3, r2
 8006500:	3304      	adds	r3, #4
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d025      	beq.n	8006554 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8006508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650a:	3301      	adds	r3, #1
 800650c:	667b      	str	r3, [r7, #100]	; 0x64
 800650e:	2308      	movs	r3, #8
 8006510:	663b      	str	r3, [r7, #96]	; 0x60
 8006512:	e01a      	b.n	800654a <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006518:	4413      	add	r3, r2
 800651a:	3304      	adds	r3, #4
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d017      	beq.n	8006552 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006526:	4413      	add	r3, r2
 8006528:	3304      	adds	r3, #4
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 8006530:	f107 021c 	add.w	r2, r7, #28
 8006534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006536:	4413      	add	r3, r2
 8006538:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800653c:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800653e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006540:	3301      	adds	r3, #1
 8006542:	667b      	str	r3, [r7, #100]	; 0x64
 8006544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006546:	3301      	adds	r3, #1
 8006548:	663b      	str	r3, [r7, #96]	; 0x60
 800654a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800654c:	2b0a      	cmp	r3, #10
 800654e:	d9e1      	bls.n	8006514 <_fx_directory_entry_write+0x49c>
 8006550:	e000      	b.n	8006554 <_fx_directory_entry_write+0x4dc>
                        break;
 8006552:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8006554:	2300      	movs	r3, #0
 8006556:	663b      	str	r3, [r7, #96]	; 0x60
 8006558:	e01d      	b.n	8006596 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800655a:	f107 021c 	add.w	r2, r7, #28
 800655e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006560:	4413      	add	r3, r2
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006568:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800656c:	2b60      	cmp	r3, #96	; 0x60
 800656e:	d908      	bls.n	8006582 <_fx_directory_entry_write+0x50a>
 8006570:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006574:	2b7a      	cmp	r3, #122	; 0x7a
 8006576:	d804      	bhi.n	8006582 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006578:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800657c:	3b20      	subs	r3, #32
 800657e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 8006582:	f107 021c 	add.w	r2, r7, #28
 8006586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006588:	4413      	add	r3, r2
 800658a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800658e:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8006590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006592:	3301      	adds	r3, #1
 8006594:	663b      	str	r3, [r7, #96]	; 0x60
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	2b0a      	cmp	r3, #10
 800659a:	d9de      	bls.n	800655a <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800659c:	7f3b      	ldrb	r3, [r7, #28]
 800659e:	2be5      	cmp	r3, #229	; 0xe5
 80065a0:	d101      	bne.n	80065a6 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 80065a2:	238f      	movs	r3, #143	; 0x8f
 80065a4:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ac:	2300      	movs	r3, #0
 80065ae:	667b      	str	r3, [r7, #100]	; 0x64
 80065b0:	e016      	b.n	80065e0 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 80065b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065b6:	01db      	lsls	r3, r3, #7
 80065b8:	b25a      	sxtb	r2, r3
 80065ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	b25b      	sxtb	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b25b      	sxtb	r3, r3
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	f107 011c 	add.w	r1, r7, #28
 80065ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d0:	440b      	add	r3, r1
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 80065da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065dc:	3301      	adds	r3, #1
 80065de:	667b      	str	r3, [r7, #100]	; 0x64
 80065e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e2:	2b0a      	cmp	r3, #10
 80065e4:	d9e5      	bls.n	80065b2 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 80065e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f2:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 80065f4:	e0f3      	b.n	80067de <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 80065fc:	7f3b      	ldrb	r3, [r7, #28]
 80065fe:	2be5      	cmp	r3, #229	; 0xe5
 8006600:	d102      	bne.n	8006608 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8006602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006604:	22e5      	movs	r2, #229	; 0xe5
 8006606:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 8006608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660a:	330b      	adds	r3, #11
 800660c:	220f      	movs	r2, #15
 800660e:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 8006610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006612:	330c      	adds	r3, #12
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 8006618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661a:	330d      	adds	r3, #13
 800661c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006620:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 8006622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006624:	331a      	adds	r3, #26
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	331b      	adds	r3, #27
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 8006632:	2301      	movs	r3, #1
 8006634:	667b      	str	r3, [r7, #100]	; 0x64
 8006636:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006638:	4613      	mov	r3, r2
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	3b0d      	subs	r3, #13
 8006644:	663b      	str	r3, [r7, #96]	; 0x60
 8006646:	e03e      	b.n	80066c6 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 8006648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800664a:	2b0b      	cmp	r3, #11
 800664c:	d037      	beq.n	80066be <_fx_directory_entry_write+0x646>
 800664e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006650:	2b1a      	cmp	r3, #26
 8006652:	d034      	beq.n	80066be <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 8006654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006656:	2b0d      	cmp	r3, #13
 8006658:	d102      	bne.n	8006660 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800665a:	230c      	movs	r3, #12
 800665c:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800665e:	e02f      	b.n	80066c0 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 8006660:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 8006668:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800666a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800666c:	4413      	add	r3, r2
 800666e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8006672:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 8006674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006676:	3301      	adds	r3, #1
 8006678:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800667a:	4413      	add	r3, r2
 800667c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e00e      	b.n	80066a2 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800668a:	441a      	add	r2, r3
 800668c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800668e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006690:	440b      	add	r3, r1
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 8006696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006698:	3301      	adds	r3, #1
 800669a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800669c:	4413      	add	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a8:	4413      	add	r3, r2
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 80066b0:	23ff      	movs	r3, #255	; 0xff
 80066b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	3301      	adds	r3, #1
 80066ba:	663b      	str	r3, [r7, #96]	; 0x60
 80066bc:	e000      	b.n	80066c0 <_fx_directory_entry_write+0x648>
                    continue;
 80066be:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 80066c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c2:	3302      	adds	r3, #2
 80066c4:	667b      	str	r3, [r7, #100]	; 0x64
 80066c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c8:	2b1f      	cmp	r3, #31
 80066ca:	d9bd      	bls.n	8006648 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 80066cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ce:	3320      	adds	r3, #32
 80066d0:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	3320      	adds	r3, #32
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066de:	429a      	cmp	r2, r3
 80066e0:	d376      	bcc.n	80067d0 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	2200      	movs	r2, #0
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	60fa      	str	r2, [r7, #12]
 80066ea:	2303      	movs	r3, #3
 80066ec:	9302      	str	r3, [sp, #8]
 80066ee:	2301      	movs	r3, #1
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f007 fcb8 	bl	800e070 <_fx_utility_logical_sector_write>
 8006700:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	e2eb      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006712:	429a      	cmp	r2, r3
 8006714:	d335      	bcc.n	8006782 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	3b01      	subs	r3, #1
 800671c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800671e:	429a      	cmp	r2, r3
 8006720:	d206      	bcs.n	8006730 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	3301      	adds	r3, #1
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	3301      	adds	r3, #1
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
 800672e:	e032      	b.n	8006796 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8006730:	f107 0318 	add.w	r3, r7, #24
 8006734:	461a      	mov	r2, r3
 8006736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	f005 fdf7 	bl	800c32c <_fx_utility_FAT_entry_read>
 800673e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	e2cc      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	2b01      	cmp	r3, #1
 8006752:	d907      	bls.n	8006764 <_fx_directory_entry_write+0x6ec>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800675a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800675e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006760:	429a      	cmp	r2, r3
 8006762:	d301      	bcc.n	8006768 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8006764:	2308      	movs	r3, #8
 8006766:	e2bd      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8006768:	2300      	movs	r3, #0
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8006778:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800677c:	4413      	add	r3, r2
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006780:	e009      	b.n	8006796 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 8006782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006784:	3301      	adds	r3, #1
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800678e:	429a      	cmp	r2, r3
 8006790:	d301      	bcc.n	8006796 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8006792:	2308      	movs	r3, #8
 8006794:	e2a6      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8006796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006798:	2200      	movs	r2, #0
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80067a2:	2203      	movs	r2, #3
 80067a4:	9202      	str	r2, [sp, #8]
 80067a6:	2201      	movs	r2, #1
 80067a8:	9201      	str	r2, [sp, #4]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b0:	6978      	ldr	r0, [r7, #20]
 80067b2:	f007 f9c9 	bl	800db48 <_fx_utility_logical_sector_read>
 80067b6:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	e290      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 80067cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ce:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 80067d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d2:	3b01      	subs	r3, #1
 80067d4:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 80067d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067dc:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 80067de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f47f af08 	bne.w	80065f6 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	791b      	ldrb	r3, [r3, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d116      	bne.n	800681c <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 80067ee:	2300      	movs	r3, #0
 80067f0:	667b      	str	r3, [r7, #100]	; 0x64
 80067f2:	e00f      	b.n	8006814 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 80067f4:	f107 021c 	add.w	r2, r7, #28
 80067f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fa:	4413      	add	r3, r2
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 8006802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	677a      	str	r2, [r7, #116]	; 0x74
 8006808:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800680c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800680e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006810:	3301      	adds	r3, #1
 8006812:	667b      	str	r3, [r7, #100]	; 0x64
 8006814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006816:	2b0a      	cmp	r3, #10
 8006818:	d9ec      	bls.n	80067f4 <_fx_directory_entry_write+0x77c>
 800681a:	e1a5      	b.n	8006b68 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800681c:	2300      	movs	r3, #0
 800681e:	667b      	str	r3, [r7, #100]	; 0x64
 8006820:	e007      	b.n	8006832 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 8006822:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006826:	4413      	add	r3, r2
 8006828:	2220      	movs	r2, #32
 800682a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800682c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682e:	3301      	adds	r3, #1
 8006830:	667b      	str	r3, [r7, #100]	; 0x64
 8006832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006834:	2b0a      	cmp	r3, #10
 8006836:	d9f4      	bls.n	8006822 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006838:	2300      	movs	r3, #0
 800683a:	667b      	str	r3, [r7, #100]	; 0x64
 800683c:	2300      	movs	r3, #0
 800683e:	663b      	str	r3, [r7, #96]	; 0x60
 8006840:	e01c      	b.n	800687c <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006846:	4413      	add	r3, r2
 8006848:	3304      	adds	r3, #4
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b2e      	cmp	r3, #46	; 0x2e
 800684e:	d019      	beq.n	8006884 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d014      	beq.n	8006888 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800685e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006862:	4413      	add	r3, r2
 8006864:	6939      	ldr	r1, [r7, #16]
 8006866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006868:	440a      	add	r2, r1
 800686a:	3204      	adds	r2, #4
 800686c:	7812      	ldrb	r2, [r2, #0]
 800686e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006872:	3301      	adds	r3, #1
 8006874:	667b      	str	r3, [r7, #100]	; 0x64
 8006876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006878:	3301      	adds	r3, #1
 800687a:	663b      	str	r3, [r7, #96]	; 0x60
 800687c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800687e:	2b07      	cmp	r3, #7
 8006880:	d9df      	bls.n	8006842 <_fx_directory_entry_write+0x7ca>
 8006882:	e002      	b.n	800688a <_fx_directory_entry_write+0x812>
                    break;
 8006884:	bf00      	nop
 8006886:	e000      	b.n	800688a <_fx_directory_entry_write+0x812>
                    break;
 8006888:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8006898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689a:	3301      	adds	r3, #1
 800689c:	667b      	str	r3, [r7, #100]	; 0x64
 800689e:	2308      	movs	r3, #8
 80068a0:	663b      	str	r3, [r7, #96]	; 0x60
 80068a2:	e015      	b.n	80068d0 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a8:	4413      	add	r3, r2
 80068aa:	3304      	adds	r3, #4
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d012      	beq.n	80068d8 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 80068b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80068b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b6:	4413      	add	r3, r2
 80068b8:	6939      	ldr	r1, [r7, #16]
 80068ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068bc:	440a      	add	r2, r1
 80068be:	3204      	adds	r2, #4
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 80068c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c6:	3301      	adds	r3, #1
 80068c8:	667b      	str	r3, [r7, #100]	; 0x64
 80068ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068cc:	3301      	adds	r3, #1
 80068ce:	663b      	str	r3, [r7, #96]	; 0x60
 80068d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d2:	2b0a      	cmp	r3, #10
 80068d4:	d9e6      	bls.n	80068a4 <_fx_directory_entry_write+0x82c>
 80068d6:	e000      	b.n	80068da <_fx_directory_entry_write+0x862>
                        break;
 80068d8:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 80068da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068dc:	330b      	adds	r3, #11
 80068de:	677b      	str	r3, [r7, #116]	; 0x74
 80068e0:	e142      	b.n	8006b68 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80a1 	beq.w	8006a2e <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	f040 8096 	bne.w	8006a2e <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 8006902:	2300      	movs	r3, #0
 8006904:	663b      	str	r3, [r7, #96]	; 0x60
 8006906:	e08c      	b.n	8006a22 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2be5      	cmp	r3, #229	; 0xe5
 8006910:	d102      	bne.n	8006918 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 8006912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006914:	22e5      	movs	r2, #229	; 0xe5
 8006916:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 8006918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800691a:	3320      	adds	r3, #32
 800691c:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	3320      	adds	r3, #32
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692a:	429a      	cmp	r2, r3
 800692c:	d376      	bcc.n	8006a1c <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800692e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006930:	2200      	movs	r2, #0
 8006932:	4698      	mov	r8, r3
 8006934:	4691      	mov	r9, r2
 8006936:	2303      	movs	r3, #3
 8006938:	9302      	str	r3, [sp, #8]
 800693a:	2301      	movs	r3, #1
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	4642      	mov	r2, r8
 8006944:	464b      	mov	r3, r9
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f007 fb92 	bl	800e070 <_fx_utility_logical_sector_write>
 800694c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	e1c5      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800695e:	429a      	cmp	r2, r3
 8006960:	d335      	bcc.n	80069ce <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	3b01      	subs	r3, #1
 8006968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696a:	429a      	cmp	r2, r3
 800696c:	d206      	bcs.n	800697c <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	3301      	adds	r3, #1
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	3301      	adds	r3, #1
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
 800697a:	e032      	b.n	80069e2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800697c:	f107 0318 	add.w	r3, r7, #24
 8006980:	461a      	mov	r2, r3
 8006982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	f005 fcd1 	bl	800c32c <_fx_utility_FAT_entry_read>
 800698a:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	e1a6      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2b01      	cmp	r3, #1
 800699e:	d907      	bls.n	80069b0 <_fx_directory_entry_write+0x938>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069a6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80069aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d301      	bcc.n	80069b4 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 80069b0:	2308      	movs	r3, #8
 80069b2:	e197      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80069bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069be:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80069c8:	4413      	add	r3, r2
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069cc:	e009      	b.n	80069e2 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	3301      	adds	r3, #1
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d301      	bcc.n	80069e2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 80069de:	2308      	movs	r3, #8
 80069e0:	e180      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80069e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e4:	2200      	movs	r2, #0
 80069e6:	469a      	mov	sl, r3
 80069e8:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80069ee:	2203      	movs	r2, #3
 80069f0:	9202      	str	r2, [sp, #8]
 80069f2:	2201      	movs	r2, #1
 80069f4:	9201      	str	r2, [sp, #4]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4652      	mov	r2, sl
 80069fa:	465b      	mov	r3, fp
 80069fc:	6978      	ldr	r0, [r7, #20]
 80069fe:	f007 f8a3 	bl	800db48 <_fx_utility_logical_sector_read>
 8006a02:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	e16a      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 8006a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a1a:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 8006a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a1e:	3301      	adds	r3, #1
 8006a20:	663b      	str	r3, [r7, #96]	; 0x60
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	f4ff af6d 	bcc.w	8006908 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8006a2e:	2300      	movs	r3, #0
 8006a30:	663b      	str	r3, [r7, #96]	; 0x60
 8006a32:	e007      	b.n	8006a44 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 8006a34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a38:	4413      	add	r3, r2
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	3301      	adds	r3, #1
 8006a42:	663b      	str	r3, [r7, #96]	; 0x60
 8006a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a46:	2b0a      	cmp	r3, #10
 8006a48:	d9f4      	bls.n	8006a34 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a4e:	e007      	b.n	8006a60 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 8006a50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a54:	4413      	add	r3, r2
 8006a56:	222e      	movs	r2, #46	; 0x2e
 8006a58:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 8006a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a66:	4413      	add	r3, r2
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a6c:	d0f0      	beq.n	8006a50 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a74:	4413      	add	r3, r2
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d039      	beq.n	8006af0 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8006a80:	2300      	movs	r3, #0
 8006a82:	663b      	str	r3, [r7, #96]	; 0x60
 8006a84:	e02d      	b.n	8006ae2 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8c:	4413      	add	r3, r2
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b2e      	cmp	r3, #46	; 0x2e
 8006a92:	d02a      	beq.n	8006aea <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d025      	beq.n	8006aee <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa8:	4413      	add	r3, r2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006ab0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006ab4:	2b60      	cmp	r3, #96	; 0x60
 8006ab6:	d908      	bls.n	8006aca <_fx_directory_entry_write+0xa52>
 8006ab8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006abc:	2b7a      	cmp	r3, #122	; 0x7a
 8006abe:	d804      	bhi.n	8006aca <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006ac0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006ac4:	3b20      	subs	r3, #32
 8006ac6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8006aca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ace:	4413      	add	r3, r2
 8006ad0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8006ad4:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 8006ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad8:	3301      	adds	r3, #1
 8006ada:	667b      	str	r3, [r7, #100]	; 0x64
 8006adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ade:	3301      	adds	r3, #1
 8006ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae4:	2b07      	cmp	r3, #7
 8006ae6:	d9ce      	bls.n	8006a86 <_fx_directory_entry_write+0xa0e>
 8006ae8:	e002      	b.n	8006af0 <_fx_directory_entry_write+0xa78>
                    break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <_fx_directory_entry_write+0xa78>
                    break;
 8006aee:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af6:	4413      	add	r3, r2
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d031      	beq.n	8006b62 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8006afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b00:	3301      	adds	r3, #1
 8006b02:	667b      	str	r3, [r7, #100]	; 0x64
 8006b04:	2308      	movs	r3, #8
 8006b06:	663b      	str	r3, [r7, #96]	; 0x60
 8006b08:	e026      	b.n	8006b58 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b10:	4413      	add	r3, r2
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d023      	beq.n	8006b60 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	4413      	add	r3, r2
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8006b26:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006b2a:	2b60      	cmp	r3, #96	; 0x60
 8006b2c:	d908      	bls.n	8006b40 <_fx_directory_entry_write+0xac8>
 8006b2e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006b32:	2b7a      	cmp	r3, #122	; 0x7a
 8006b34:	d804      	bhi.n	8006b40 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 8006b36:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006b3a:	3b20      	subs	r3, #32
 8006b3c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 8006b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b44:	4413      	add	r3, r2
 8006b46:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8006b4a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 8006b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b4e:	3301      	adds	r3, #1
 8006b50:	667b      	str	r3, [r7, #100]	; 0x64
 8006b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b54:	3301      	adds	r3, #1
 8006b56:	663b      	str	r3, [r7, #96]	; 0x60
 8006b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b5a:	2b0a      	cmp	r3, #10
 8006b5c:	d9d5      	bls.n	8006b0a <_fx_directory_entry_write+0xa92>
 8006b5e:	e000      	b.n	8006b62 <_fx_directory_entry_write+0xaea>
                    break;
 8006b60:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8006b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b64:	330b      	adds	r3, #11
 8006b66:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 8006b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	677a      	str	r2, [r7, #116]	; 0x74
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	7f12      	ldrb	r2, [r2, #28]
 8006b72:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 8006b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	677a      	str	r2, [r7, #116]	; 0x74
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	7f52      	ldrb	r2, [r2, #29]
 8006b7e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 8006b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	677a      	str	r2, [r7, #116]	; 0x74
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	7f92      	ldrb	r2, [r2, #30]
 8006b8a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	4619      	mov	r1, r3
 8006b92:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006b94:	f005 fb77 	bl	800c286 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006ba6:	f005 fb6e 	bl	800c286 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bac:	3302      	adds	r3, #2
 8006bae:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006bb8:	f005 fb65 	bl	800c286 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 8006bd2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006bd4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006bd6:	f005 fb56 	bl	800c286 <_fx_utility_16_unsigned_write>
 8006bda:	e003      	b.n	8006be4 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 8006bdc:	2100      	movs	r1, #0
 8006bde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006be0:	f005 fb51 	bl	800c286 <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be6:	3302      	adds	r3, #2
 8006be8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006bf2:	f005 fb48 	bl	800c286 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	4619      	mov	r1, r3
 8006c02:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006c04:	f005 fb3f 	bl	800c286 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	4619      	mov	r1, r3
 8006c14:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006c16:	f005 fb36 	bl	800c286 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 8006c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006c26:	4613      	mov	r3, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006c2c:	f005 fb5d 	bl	800c2ea <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	2200      	movs	r2, #0
 8006c34:	461c      	mov	r4, r3
 8006c36:	4615      	mov	r5, r2
 8006c38:	2303      	movs	r3, #3
 8006c3a:	9302      	str	r3, [sp, #8]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4622      	mov	r2, r4
 8006c46:	462b      	mov	r3, r5
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	f007 fa11 	bl	800e070 <_fx_utility_logical_sector_write>
 8006c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	e044      	b.n	8006ce4 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d03e      	beq.n	8006ce2 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 8006c70:	4299      	cmp	r1, r3
 8006c72:	bf08      	it	eq
 8006c74:	4290      	cmpeq	r0, r2
 8006c76:	d134      	bne.n	8006ce2 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d12d      	bne.n	8006ce2 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	7f1a      	ldrb	r2, [r3, #28]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	7f5a      	ldrb	r2, [r3, #29]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	7f9a      	ldrb	r2, [r3, #30]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3778      	adds	r7, #120	; 0x78
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cee:	bf00      	nop

08006cf0 <_fx_directory_free_search>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8006cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf4:	b0a8      	sub	sp, #160	; 0xa0
 8006cf6:	af04      	add	r7, sp, #16
 8006cf8:	6278      	str	r0, [r7, #36]	; 0x24
 8006cfa:	6239      	str	r1, [r7, #32]
 8006cfc:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d12:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	2200      	movs	r2, #0
 8006d18:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b2e      	cmp	r3, #46	; 0x2e
 8006d22:	d108      	bne.n	8006d36 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d2e:	d102      	bne.n	8006d36 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 8006d30:	230c      	movs	r3, #12
 8006d32:	f000 bc17 	b.w	8007564 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d42:	e13d      	b.n	8006fc0 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d4c:	4413      	add	r3, r2
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d908      	bls.n	8006d66 <_fx_directory_free_search+0x76>
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d5c:	4413      	add	r3, r2
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b5a      	cmp	r3, #90	; 0x5a
 8006d62:	f240 8121 	bls.w	8006fa8 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b2f      	cmp	r3, #47	; 0x2f
 8006d74:	d908      	bls.n	8006d88 <_fx_directory_free_search+0x98>
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7e:	4413      	add	r3, r2
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b39      	cmp	r3, #57	; 0x39
 8006d84:	f240 8112 	bls.w	8006fac <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d90:	4413      	add	r3, r2
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b60      	cmp	r3, #96	; 0x60
 8006d96:	d90b      	bls.n	8006db0 <_fx_directory_free_search+0xc0>
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da0:	4413      	add	r3, r2
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b7a      	cmp	r3, #122	; 0x7a
 8006da6:	d803      	bhi.n	8006db0 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2201      	movs	r2, #1
 8006dac:	615a      	str	r2, [r3, #20]
 8006dae:	e102      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d103      	bne.n	8006dc8 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	615a      	str	r2, [r3, #20]
 8006dc6:	e0f6      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dd0:	4413      	add	r3, r2
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd6:	d114      	bne.n	8006e02 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 8006dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10c      	bne.n	8006dfa <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 8006de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 8006de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 80e2 	bne.w	8006fb6 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2201      	movs	r2, #1
 8006df6:	615a      	str	r2, [r3, #20]
 8006df8:	e0dd      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	615a      	str	r2, [r3, #20]
 8006e00:	e0d9      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2be5      	cmp	r3, #229	; 0xe5
 8006e10:	d103      	bne.n	8006e1a <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	2201      	movs	r2, #1
 8006e16:	615a      	str	r2, [r3, #20]
 8006e18:	e0cd      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e22:	4413      	add	r3, r2
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b25b      	sxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f2c0 80c1 	blt.w	8006fb0 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e36:	4413      	add	r3, r2
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b7e      	cmp	r3, #126	; 0x7e
 8006e3c:	f000 80ba 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e48:	4413      	add	r3, r2
 8006e4a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 8006e4c:	2b2d      	cmp	r3, #45	; 0x2d
 8006e4e:	f000 80b1 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e5a:	4413      	add	r3, r2
 8006e5c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 8006e5e:	2b5f      	cmp	r3, #95	; 0x5f
 8006e60:	f000 80a8 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e6c:	4413      	add	r3, r2
 8006e6e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 8006e70:	2b7d      	cmp	r3, #125	; 0x7d
 8006e72:	f000 809f 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e7e:	4413      	add	r3, r2
 8006e80:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 8006e82:	2b7b      	cmp	r3, #123	; 0x7b
 8006e84:	f000 8096 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e90:	4413      	add	r3, r2
 8006e92:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 8006e94:	2b28      	cmp	r3, #40	; 0x28
 8006e96:	f000 808d 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea2:	4413      	add	r3, r2
 8006ea4:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 8006ea6:	2b29      	cmp	r3, #41	; 0x29
 8006ea8:	f000 8084 	beq.w	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eb4:	4413      	add	r3, r2
 8006eb6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 8006eb8:	2b60      	cmp	r3, #96	; 0x60
 8006eba:	d07b      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ec4:	4413      	add	r3, r2
 8006ec6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 8006ec8:	2b27      	cmp	r3, #39	; 0x27
 8006eca:	d073      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ed4:	4413      	add	r3, r2
 8006ed6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 8006ed8:	2b21      	cmp	r3, #33	; 0x21
 8006eda:	d06b      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ee4:	4413      	add	r3, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 8006ee8:	2b23      	cmp	r3, #35	; 0x23
 8006eea:	d063      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ef4:	4413      	add	r3, r2
 8006ef6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 8006ef8:	2b24      	cmp	r3, #36	; 0x24
 8006efa:	d05b      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f04:	4413      	add	r3, r2
 8006f06:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 8006f08:	2b26      	cmp	r3, #38	; 0x26
 8006f0a:	d053      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f14:	4413      	add	r3, r2
 8006f16:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 8006f18:	2b40      	cmp	r3, #64	; 0x40
 8006f1a:	d04b      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f24:	4413      	add	r3, r2
 8006f26:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 8006f28:	2b5e      	cmp	r3, #94	; 0x5e
 8006f2a:	d043      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f34:	4413      	add	r3, r2
 8006f36:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 8006f38:	2b25      	cmp	r3, #37	; 0x25
 8006f3a:	d03b      	beq.n	8006fb4 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f44:	4413      	add	r3, r2
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b2b      	cmp	r3, #43	; 0x2b
 8006f4a:	d027      	beq.n	8006f9c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f54:	4413      	add	r3, r2
 8006f56:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 8006f58:	2b2c      	cmp	r3, #44	; 0x2c
 8006f5a:	d01f      	beq.n	8006f9c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f64:	4413      	add	r3, r2
 8006f66:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 8006f68:	2b3b      	cmp	r3, #59	; 0x3b
 8006f6a:	d017      	beq.n	8006f9c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 8006f78:	2b3d      	cmp	r3, #61	; 0x3d
 8006f7a:	d00f      	beq.n	8006f9c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f84:	4413      	add	r3, r2
 8006f86:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 8006f88:	2b5b      	cmp	r3, #91	; 0x5b
 8006f8a:	d007      	beq.n	8006f9c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f94:	4413      	add	r3, r2
 8006f96:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 8006f98:	2b5d      	cmp	r3, #93	; 0x5d
 8006f9a:	d103      	bne.n	8006fa4 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	615a      	str	r2, [r3, #20]
 8006fa2:	e008      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 8006fa4:	230c      	movs	r3, #12
 8006fa6:	e2dd      	b.n	8007564 <_fx_directory_free_search+0x874>
            continue;
 8006fa8:	bf00      	nop
 8006faa:	e004      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
            continue;
 8006fac:	bf00      	nop
 8006fae:	e002      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
            continue;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <_fx_directory_free_search+0x2c6>
            continue;
 8006fb4:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 8006fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc8:	4413      	add	r3, r2
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f47f aeb9 	bne.w	8006d44 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 8006fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 8006fda:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d902      	bls.n	8006fee <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	2201      	movs	r2, #1
 8006fec:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 8006fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff2:	2b0c      	cmp	r3, #12
 8006ff4:	d818      	bhi.n	8007028 <_fx_directory_free_search+0x338>
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d114      	bne.n	8007028 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 8007004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007008:	2b08      	cmp	r3, #8
 800700a:	d806      	bhi.n	800701a <_fx_directory_free_search+0x32a>
 800700c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b08      	cmp	r3, #8
 8007018:	d928      	bls.n	800706c <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	2201      	movs	r2, #1
 800701e:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 8007020:	2302      	movs	r3, #2
 8007022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 8007026:	e021      	b.n	800706c <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 8007028:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800702c:	4b95      	ldr	r3, [pc, #596]	; (8007284 <_fx_directory_free_search+0x594>)
 800702e:	fba3 2301 	umull	r2, r3, r3, r1
 8007032:	089a      	lsrs	r2, r3, #2
 8007034:	4613      	mov	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	1aca      	subs	r2, r1, r3
 8007040:	2a00      	cmp	r2, #0
 8007042:	d109      	bne.n	8007058 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 8007044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007048:	4a8e      	ldr	r2, [pc, #568]	; (8007284 <_fx_directory_free_search+0x594>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	089b      	lsrs	r3, r3, #2
 8007050:	3301      	adds	r3, #1
 8007052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007056:	e00a      	b.n	800706e <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 8007058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800705c:	4a89      	ldr	r2, [pc, #548]	; (8007284 <_fx_directory_free_search+0x594>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	089b      	lsrs	r3, r3, #2
 8007064:	3302      	adds	r3, #2
 8007066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800706a:	e000      	b.n	800706e <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800706c:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800707e:	4613      	mov	r3, r2
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8007086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007088:	2200      	movs	r2, #0
 800708a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800708c:	2302      	movs	r3, #2
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007090:	e006      	b.n	80070a0 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007096:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800709c:	2300      	movs	r3, #0
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 80070a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a2:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 80070a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ae:	f7fe fc5d 	bl	800596c <_fx_directory_entry_read>
 80070b2:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 80070b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <_fx_directory_free_search+0x3ce>
        {
            return(status);
 80070ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070bc:	e252      	b.n	8007564 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2be5      	cmp	r3, #229	; 0xe5
 80070c6:	d103      	bne.n	80070d0 <_fx_directory_free_search+0x3e0>
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	791b      	ldrb	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d16b      	bne.n	80071b2 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 80070da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d91a      	bls.n	8007118 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d115      	bne.n	8007118 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2200      	movs	r2, #0
 80070f0:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	23e5      	movs	r3, #229	; 0xe5
 80070f8:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	2300      	movs	r3, #0
 8007102:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007108:	f7fe ffb6 	bl	8006078 <_fx_directory_entry_write>
 800710c:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 8007114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007116:	e225      	b.n	8007564 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 8007118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800711a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800711c:	429a      	cmp	r2, r3
 800711e:	d109      	bne.n	8007134 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800712a:	4613      	mov	r3, r2
 800712c:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 8007134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	3301      	adds	r3, #1
 800713c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007140:	429a      	cmp	r2, r3
 8007142:	d838      	bhi.n	80071b6 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 8007144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007146:	2200      	movs	r2, #0
 8007148:	461c      	mov	r4, r3
 800714a:	4615      	mov	r5, r2
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007156:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2200      	movs	r2, #0
 800715c:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007164:	f3ef 8310 	mrs	r3, PRIMASK
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800716c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800716e:	b672      	cpsid	i
#endif
    return(int_posture);
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 8007172:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 8007174:	4b44      	ldr	r3, [pc, #272]	; (8007288 <_fx_directory_free_search+0x598>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800717c:	4b43      	ldr	r3, [pc, #268]	; (800728c <_fx_directory_free_search+0x59c>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <_fx_directory_free_search+0x59c>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	629a      	str	r2, [r3, #40]	; 0x28
 800718c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 8007198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800719c:	2b01      	cmp	r3, #1
 800719e:	d103      	bne.n	80071a8 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2200      	movs	r2, #0
 80071a4:	615a      	str	r2, [r3, #20]
 80071a6:	e002      	b.n	80071ae <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2201      	movs	r2, #1
 80071ac:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 80071ae:	2300      	movs	r3, #0
 80071b0:	e1d8      	b.n	8007564 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 80071b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	3301      	adds	r3, #1
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	f200 81c9 	bhi.w	8007558 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80071c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	4413      	add	r3, r2
 80071d2:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e4:	4413      	add	r3, r2
 80071e6:	1e5a      	subs	r2, r3, #1
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters > clusters_needed))
 80071f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <_fx_directory_free_search+0x512>
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 81ab 	beq.w	8007558 <_fx_directory_free_search+0x868>
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007208:	429a      	cmp	r2, r3
 800720a:	f080 81a5 	bcs.w	8007558 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800720e:	2300      	movs	r3, #0
 8007210:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 8007218:	2300      	movs	r3, #0
 800721a:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007222:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 8007224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007226:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 8007228:	e10b      	b.n	8007442 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800722a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800722c:	3b01      	subs	r3, #1
 800722e:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 8007236:	230a      	movs	r3, #10
 8007238:	e194      	b.n	8007564 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800723a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800723e:	461a      	mov	r2, r3
 8007240:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007244:	f005 f872 	bl	800c32c <_fx_utility_FAT_entry_read>
 8007248:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800724a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 8007250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007252:	e187      	b.n	8007564 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 8007254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007256:	3b01      	subs	r3, #1
 8007258:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	2b00      	cmp	r3, #0
 800725e:	d117      	bne.n	8007290 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 8007260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	3302      	adds	r3, #2
 8007276:	429a      	cmp	r2, r3
 8007278:	d316      	bcc.n	80072a8 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	2202      	movs	r2, #2
 800727e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 8007282:	e011      	b.n	80072a8 <_fx_directory_free_search+0x5b8>
 8007284:	4ec4ec4f 	.word	0x4ec4ec4f
 8007288:	2000401c 	.word	0x2000401c
 800728c:	20004018 	.word	0x20004018
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 8007290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007292:	3301      	adds	r3, #1
 8007294:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	3302      	adds	r3, #2
 800729c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800729e:	429a      	cmp	r2, r3
 80072a0:	d3c6      	bcc.n	8007230 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 80072a2:	2302      	movs	r3, #2
 80072a4:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 80072a6:	e7c3      	b.n	8007230 <_fx_directory_free_search+0x540>
                            break;
 80072a8:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 80072ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b0:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 80072ba:	440b      	add	r3, r1
 80072bc:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80072c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c6:	2200      	movs	r2, #0
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80072d0:	2303      	movs	r3, #3
 80072d2:	9302      	str	r3, [sp, #8]
 80072d4:	2301      	movs	r3, #1
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	9200      	str	r2, [sp, #0]
 80072da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072e0:	f006 fc32 	bl	800db48 <_fx_utility_logical_sector_read>
 80072e4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 80072e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 80072ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ee:	e139      	b.n	8007564 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 80072fe:	e00d      	b.n	800731c <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 8007300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 8007308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800730c:	3304      	adds	r3, #4
 800730e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 8007312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007316:	3304      	adds	r3, #4
 8007318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007324:	429a      	cmp	r2, r3
 8007326:	d3eb      	bcc.n	8007300 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8007328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732a:	2200      	movs	r2, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 8007334:	2303      	movs	r3, #3
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	2301      	movs	r3, #1
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	9200      	str	r2, [sp, #0]
 800733e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007344:	f006 fe94 	bl	800e070 <_fx_utility_logical_sector_write>
 8007348:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800734a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 8007350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007352:	e107      	b.n	8007564 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 8007354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007356:	2b01      	cmp	r3, #1
 8007358:	d95a      	bls.n	8007410 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800735a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735c:	3301      	adds	r3, #1
 800735e:	2200      	movs	r2, #0
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007366:	3b01      	subs	r3, #1
 8007368:	2200      	movs	r2, #0
 800736a:	4698      	mov	r8, r3
 800736c:	4691      	mov	r9, r2
 800736e:	2301      	movs	r3, #1
 8007370:	9302      	str	r3, [sp, #8]
 8007372:	e9cd 8900 	strd	r8, r9, [sp]
 8007376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800737c:	f006 f9ce 	bl	800d71c <_fx_utility_logical_sector_flush>
 8007380:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 8007382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	e0eb      	b.n	8007564 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800738c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738e:	3b01      	subs	r3, #1
 8007390:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 8007392:	e03a      	b.n	800740a <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2290      	movs	r2, #144	; 0x90
 80073ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 80073bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c0:	441a      	add	r2, r3
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	2201      	movs	r2, #1
 80073cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	2203      	movs	r2, #3
 80073d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	2201      	movs	r2, #1
 80073dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80073e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073e8:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007402:	e0af      	b.n	8007564 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 8007404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007406:	3b01      	subs	r3, #1
 8007408:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800740a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1c1      	bne.n	8007394 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 8007410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 8007416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007418:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800741a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8007420:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007422:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007426:	f005 f9aa 	bl	800c77e <_fx_utility_FAT_entry_write>
 800742a:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800742c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	e096      	b.n	8007564 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 8007436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007438:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007440:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 8007442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007444:	2b00      	cmp	r3, #0
 8007446:	f47f aef0 	bne.w	800722a <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007450:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8007454:	461a      	mov	r2, r3
 8007456:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800745a:	f005 f990 	bl	800c77e <_fx_utility_FAT_entry_write>
 800745e:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8007460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 8007466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007468:	e07c      	b.n	8007564 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800746a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 8007470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	673b      	str	r3, [r7, #112]	; 0x70
 8007476:	e002      	b.n	800747e <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800747e:	2300      	movs	r3, #0
 8007480:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 8007482:	2300      	movs	r3, #0
 8007484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007488:	e024      	b.n	80074d4 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800748a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800748e:	461a      	mov	r2, r3
 8007490:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007494:	f004 ff4a 	bl	800c32c <_fx_utility_FAT_entry_read>
 8007498:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800749a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800749e:	3301      	adds	r3, #1
 80074a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 80074a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	e05a      	b.n	8007564 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 80074ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d909      	bls.n	80074c8 <_fx_directory_free_search+0x7d8>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d005      	beq.n	80074c8 <_fx_directory_free_search+0x7d8>
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d901      	bls.n	80074cc <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 80074c8:	2303      	movs	r3, #3
 80074ca:	e04b      	b.n	8007564 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 80074cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074ce:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074da:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80074de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d3d2      	bcc.n	800748a <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80074e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ea:	1ad2      	subs	r2, r2, r3
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f6:	fb03 f202 	mul.w	r2, r3, r2
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	fb02 f303 	mul.w	r3, r2, r3
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007506:	4413      	add	r3, r2
 8007508:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2be5      	cmp	r3, #229	; 0xe5
 8007512:	d103      	bne.n	800751c <_fx_directory_free_search+0x82c>
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800751c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751e:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 8007520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007522:	2200      	movs	r2, #0
 8007524:	469a      	mov	sl, r3
 8007526:	4693      	mov	fp, r2
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <_fx_directory_free_search+0x852>
 8007536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007538:	2b00      	cmp	r3, #0
 800753a:	d102      	bne.n	8007542 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007540:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 8007542:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007544:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007548:	f005 f919 	bl	800c77e <_fx_utility_FAT_entry_write>
 800754c:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 8007554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007556:	e005      	b.n	8007564 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800755c:	429a      	cmp	r2, r3
 800755e:	f63f ada1 	bhi.w	80070a4 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 8007562:	230a      	movs	r3, #10
}
 8007564:	4618      	mov	r0, r3
 8007566:	3790      	adds	r7, #144	; 0x90
 8007568:	46bd      	mov	sp, r7
 800756a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756e:	bf00      	nop

08007570 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b5c      	cmp	r3, #92	; 0x5c
 8007586:	d003      	beq.n	8007590 <_fx_directory_name_extract+0x20>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b2f      	cmp	r3, #47	; 0x2f
 800758e:	d106      	bne.n	800759e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3301      	adds	r3, #1
 8007594:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 8007596:	e002      	b.n	800759e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3301      	adds	r3, #1
 800759c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d0f8      	beq.n	8007598 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 80075aa:	e015      	b.n	80075d8 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b5c      	cmp	r3, #92	; 0x5c
 80075b2:	d017      	beq.n	80075e4 <_fx_directory_name_extract+0x74>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b2f      	cmp	r3, #47	; 0x2f
 80075ba:	d013      	beq.n	80075e4 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	d00f      	beq.n	80075e2 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	440a      	add	r2, r1
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e5      	bne.n	80075ac <_fx_directory_name_extract+0x3c>
 80075e0:	e000      	b.n	80075e4 <_fx_directory_name_extract+0x74>
            break;
 80075e2:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 80075fa:	e007      	b.n	800760c <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b01      	subs	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b20      	cmp	r3, #32
 8007616:	d0f1      	beq.n	80075fc <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 8007620:	2300      	movs	r3, #0
 8007622:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 8007624:	687b      	ldr	r3, [r7, #4]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <_fx_directory_search>:
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 8007634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007638:	b0c0      	sub	sp, #256	; 0x100
 800763a:	af00      	add	r7, sp, #0
 800763c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800763e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007640:	627a      	str	r2, [r7, #36]	; 0x24
 8007642:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800766a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	2300      	movs	r3, #0
 800767a:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b5c      	cmp	r3, #92	; 0x5c
 8007682:	d003      	beq.n	800768c <_fx_directory_search+0x58>
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b2f      	cmp	r3, #47	; 0x2f
 800768a:	d103      	bne.n	8007694 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007692:	e044      	b.n	800771e <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 8007694:	4bab      	ldr	r3, [pc, #684]	; (8007944 <_fx_directory_search+0x310>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769c:	2b00      	cmp	r3, #0
 800769e:	d022      	beq.n	80076e6 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 80076a0:	4ba8      	ldr	r3, [pc, #672]	; (8007944 <_fx_directory_search+0x310>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d016      	beq.n	80076de <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 80076b0:	4ba4      	ldr	r3, [pc, #656]	; (8007944 <_fx_directory_search+0x310>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80076bc:	4619      	mov	r1, r3
 80076be:	2370      	movs	r3, #112	; 0x70
 80076c0:	461a      	mov	r2, r3
 80076c2:	f00a fb6d 	bl	8011da0 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 80076c6:	4b9f      	ldr	r3, [pc, #636]	; (8007944 <_fx_directory_search+0x310>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ce:	3370      	adds	r3, #112	; 0x70
 80076d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 80076d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076dc:	e01f      	b.n	800771e <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076e4:	e01b      	b.n	800771e <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d012      	beq.n	8007718 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80076f8:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 80076fc:	2370      	movs	r3, #112	; 0x70
 80076fe:	461a      	mov	r2, r3
 8007700:	f00a fb4e 	bl	8011da0 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800770a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800770e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007716:	e002      	b.n	800771e <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 81b9 	beq.w	8007a9c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800772a:	2300      	movs	r3, #0
 800772c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b5c      	cmp	r3, #92	; 0x5c
 8007736:	d02d      	beq.n	8007794 <_fx_directory_search+0x160>
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b2f      	cmp	r3, #47	; 0x2f
 800773e:	d14c      	bne.n	80077da <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8007740:	e028      	b.n	8007794 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 8007742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	4413      	add	r3, r2
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 8007750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	4413      	add	r3, r2
 8007758:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 8007762:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007766:	2b5c      	cmp	r3, #92	; 0x5c
 8007768:	d102      	bne.n	8007770 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800776a:	232f      	movs	r3, #47	; 0x2f
 800776c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 8007770:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007774:	2b5c      	cmp	r3, #92	; 0x5c
 8007776:	d102      	bne.n	800777e <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 8007778:	232f      	movs	r3, #47	; 0x2f
 800777a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800777e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8007782:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007786:	429a      	cmp	r2, r3
 8007788:	d110      	bne.n	80077ac <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778e:	3301      	adds	r3, #1
 8007790:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007798:	2bfe      	cmp	r3, #254	; 0xfe
 800779a:	d808      	bhi.n	80077ae <_fx_directory_search+0x17a>
 800779c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1cb      	bne.n	8007742 <_fx_directory_search+0x10e>
 80077aa:	e000      	b.n	80077ae <_fx_directory_search+0x17a>
                    break;
 80077ac:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 80077ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	4413      	add	r3, r2
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077be:	4413      	add	r3, r2
 80077c0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4299      	cmp	r1, r3
 80077c8:	d003      	beq.n	80077d2 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 80077d0:	e0cf      	b.n	8007972 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 80077d8:	e0cb      	b.n	8007972 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 80077da:	2301      	movs	r3, #1
 80077dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 80077e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d043      	beq.n	8007870 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 80077e8:	e029      	b.n	800783e <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 80077ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 80077fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007804:	4413      	add	r3, r2
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800780c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007810:	2b5c      	cmp	r3, #92	; 0x5c
 8007812:	d102      	bne.n	800781a <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 8007814:	232f      	movs	r3, #47	; 0x2f
 8007816:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800781a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800781e:	2b5c      	cmp	r3, #92	; 0x5c
 8007820:	d102      	bne.n	8007828 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 8007822:	232f      	movs	r3, #47	; 0x2f
 8007824:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Move to next character.  */
                    v++;
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782c:	3301      	adds	r3, #1
 800782e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

                    /* Is the name the same?  */
                    if (alpha != beta)
 8007832:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8007836:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800783a:	429a      	cmp	r2, r3
 800783c:	d10c      	bne.n	8007858 <_fx_directory_search+0x224>
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	2bfe      	cmp	r3, #254	; 0xfe
 8007844:	d809      	bhi.n	800785a <_fx_directory_search+0x226>
 8007846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784e:	4413      	add	r3, r2
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1c9      	bne.n	80077ea <_fx_directory_search+0x1b6>
 8007856:	e000      	b.n	800785a <_fx_directory_search+0x226>
                    {

                        /* Break out of loop!  */
                        break;
 8007858:	bf00      	nop
                    }
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800785a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800785e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007862:	4413      	add	r3, r2
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800786a:	2300      	movs	r3, #0
 800786c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 8007870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d07c      	beq.n	8007972 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8007878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787e:	4413      	add	r3, r2
 8007880:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b5c      	cmp	r3, #92	; 0x5c
 8007888:	d00c      	beq.n	80078a4 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800788a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007890:	4413      	add	r3, r2
 8007892:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007896:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 8007898:	2b2f      	cmp	r3, #47	; 0x2f
 800789a:	d003      	beq.n	80078a4 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078a2:	e004      	b.n	80078ae <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	3301      	adds	r3, #1
 80078aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 80078b4:	e02d      	b.n	8007912 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 80078b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078bc:	4413      	add	r3, r2
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 80078c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 80078d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80078da:	2b5c      	cmp	r3, #92	; 0x5c
 80078dc:	d102      	bne.n	80078e4 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 80078de:	232f      	movs	r3, #47	; 0x2f
 80078e0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 80078e4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80078e8:	2b5c      	cmp	r3, #92	; 0x5c
 80078ea:	d102      	bne.n	80078f2 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 80078ec:	232f      	movs	r3, #47	; 0x2f
 80078ee:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 80078f2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80078f6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d119      	bne.n	8007932 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007902:	3301      	adds	r3, #1
 8007904:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 8007908:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800790c:	3301      	adds	r3, #1
 800790e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 8007912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007916:	2bfe      	cmp	r3, #254	; 0xfe
 8007918:	d80c      	bhi.n	8007934 <_fx_directory_search+0x300>
 800791a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800791c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007920:	4413      	add	r3, r2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <_fx_directory_search+0x300>
 8007928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1c2      	bne.n	80078b6 <_fx_directory_search+0x282>
 8007930:	e000      	b.n	8007934 <_fx_directory_search+0x300>
                        break;
 8007932:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	2bff      	cmp	r3, #255	; 0xff
 800793a:	d905      	bls.n	8007948 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007942:	e016      	b.n	8007972 <_fx_directory_search+0x33e>
 8007944:	2000429c 	.word	0x2000429c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 8007948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d010      	beq.n	8007972 <_fx_directory_search+0x33e>
 8007950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007956:	4413      	add	r3, r2
 8007958:	7819      	ldrb	r1, [r3, #0]
 800795a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	4413      	add	r3, r2
 8007962:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	4299      	cmp	r1, r3
 800796a:	d002      	beq.n	8007972 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800796c:	2300      	movs	r3, #0
 800796e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 8007972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8090 	beq.w	8007a9c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	4610      	mov	r0, r2
 800798a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800798e:	2270      	movs	r2, #112	; 0x70
 8007990:	4619      	mov	r1, r3
 8007992:	f00a fa05 	bl	8011da0 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800799c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800799e:	2300      	movs	r3, #0
 80079a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079a4:	e01d      	b.n	80079e2 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 80079a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079ae:	4413      	add	r3, r2
 80079b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 80079bc:	7812      	ldrb	r2, [r2, #0]
 80079be:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 80079c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079c8:	4413      	add	r3, r2
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 80079d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079d4:	2bfe      	cmp	r3, #254	; 0xfe
 80079d6:	d909      	bls.n	80079ec <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 80079d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079dc:	3301      	adds	r3, #1
 80079de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079e6:	2bff      	cmp	r3, #255	; 0xff
 80079e8:	d9dd      	bls.n	80079a6 <_fx_directory_search+0x372>
 80079ea:	e000      	b.n	80079ee <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 80079ec:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d041      	beq.n	8007a78 <_fx_directory_search+0x444>
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d03c      	beq.n	8007a78 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a10:	2270      	movs	r2, #112	; 0x70
 8007a12:	4619      	mov	r1, r3
 8007a14:	f00a f9c4 	bl	8011da0 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a1e:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a30:	e01c      	b.n	8007a6c <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 8007a32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a3a:	441a      	add	r2, r3
 8007a3c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a44:	440b      	add	r3, r1
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 8007a4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a52:	4413      	add	r3, r2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d103      	bne.n	8007a62 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8007a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5e:	2bfe      	cmp	r3, #254	; 0xfe
 8007a60:	d909      	bls.n	8007a76 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a70:	2bff      	cmp	r3, #255	; 0xff
 8007a72:	d9de      	bls.n	8007a32 <_fx_directory_search+0x3fe>
 8007a74:	e000      	b.n	8007a78 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 8007a76:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 8007a78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 8007a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a88:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e2ff      	b.n	800809c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8007a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 8007aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 8007aac:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 8007ab4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aba:	f7ff fd59 	bl	8007570 <_fx_directory_name_extract>
 8007abe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 8007ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80be 	beq.w	8007c46 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8007aca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007ace:	2300      	movs	r3, #0
 8007ad0:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 8007ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007ae2:	e02b      	b.n	8007b3c <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 8007ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ae8:	3301      	adds	r3, #1
 8007aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8007aee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007af2:	461a      	mov	r2, r3
 8007af4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8007af8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007afa:	f004 fc17 	bl	800c32c <_fx_utility_FAT_entry_read>
 8007afe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 8007b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 8007b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b0e:	e2c5      	b.n	800809c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 8007b10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d90b      	bls.n	8007b30 <_fx_directory_search+0x4fc>
 8007b18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d005      	beq.n	8007b30 <_fx_directory_search+0x4fc>
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d201      	bcs.n	8007b34 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 8007b30:	2303      	movs	r3, #3
 8007b32:	e2b3      	b.n	800809c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 8007b34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007b42:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8007b46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d3ca      	bcc.n	8007ae4 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	2200      	movs	r2, #0
 8007b54:	469a      	mov	sl, r3
 8007b56:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	613b      	str	r3, [r7, #16]
 8007b60:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8007b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b66:	4603      	mov	r3, r0
 8007b68:	fb03 f20b 	mul.w	r2, r3, fp
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	fb0a f303 	mul.w	r3, sl, r3
 8007b72:	4413      	add	r3, r2
 8007b74:	4602      	mov	r2, r0
 8007b76:	fbaa 4502 	umull	r4, r5, sl, r2
 8007b7a:	442b      	add	r3, r5
 8007b7c:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 8007b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b82:	2200      	movs	r2, #0
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	60fa      	str	r2, [r7, #12]
 8007b88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	fb03 f205 	mul.w	r2, r3, r5
 8007b92:	460b      	mov	r3, r1
 8007b94:	fb04 f303 	mul.w	r3, r4, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	fba4 8902 	umull	r8, r9, r4, r2
 8007ba0:	444b      	add	r3, r9
 8007ba2:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8007bb0:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 8007bb4:	ea4f 1359 	mov.w	r3, r9, lsr #5
 8007bb8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 8007bbc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007bc0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007bc4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d046      	beq.n	8007c5c <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 8007bd6:	6a3a      	ldr	r2, [r7, #32]
 8007bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	2370      	movs	r3, #112	; 0x70
 8007be2:	461a      	mov	r2, r3
 8007be4:	f00a f8dc 	bl	8011da0 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8007be8:	6a3a      	ldr	r2, [r7, #32]
 8007bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007bee:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 8007bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c00:	e01c      	b.n	8007c3c <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 8007c02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c0a:	18d1      	adds	r1, r2, r3
 8007c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c14:	441a      	add	r2, r3
 8007c16:	780b      	ldrb	r3, [r1, #0]
 8007c18:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 8007c1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c22:	4413      	add	r3, r2
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 8007c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2e:	2bfe      	cmp	r3, #254	; 0xfe
 8007c30:	d913      	bls.n	8007c5a <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c36:	3301      	adds	r3, #1
 8007c38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c40:	2bff      	cmp	r3, #255	; 0xff
 8007c42:	d9de      	bls.n	8007c02 <_fx_directory_search+0x5ce>
 8007c44:	e00a      	b.n	8007c5c <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	603b      	str	r3, [r7, #0]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c54:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8007c58:	e000      	b.n	8007c5c <_fx_directory_search+0x628>
                            break;
 8007c5a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 8007c68:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c74:	f7fd fe7a 	bl	800596c <_fx_directory_entry_read>
 8007c78:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 8007c7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c80:	3301      	adds	r3, #1
 8007c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 8007c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <_fx_directory_search+0x660>
            {
                return(status);
 8007c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c92:	e203      	b.n	800809c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80c6 	beq.w	8007e2c <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	7f1b      	ldrb	r3, [r3, #28]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f040 80a9 	bne.w	8007e00 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2be5      	cmp	r3, #229	; 0xe5
 8007cb6:	d104      	bne.n	8007cc2 <_fx_directory_search+0x68e>
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	791b      	ldrb	r3, [r3, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80a1 	beq.w	8007e04 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 8007cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 8007cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 8007cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 8007ce6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007cea:	2b60      	cmp	r3, #96	; 0x60
 8007cec:	d908      	bls.n	8007d00 <_fx_directory_search+0x6cc>
 8007cee:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007cf2:	2b7a      	cmp	r3, #122	; 0x7a
 8007cf4:	d804      	bhi.n	8007d00 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 8007cf6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007cfa:	3b20      	subs	r3, #32
 8007cfc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 8007d00:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007d04:	2b60      	cmp	r3, #96	; 0x60
 8007d06:	d908      	bls.n	8007d1a <_fx_directory_search+0x6e6>
 8007d08:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007d0c:	2b7a      	cmp	r3, #122	; 0x7a
 8007d0e:	d804      	bhi.n	8007d1a <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8007d10:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007d14:	3b20      	subs	r3, #32
 8007d16:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 8007d1a:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8007d1e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d10f      	bne.n	8007d46 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 8007d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 8007d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 8007d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1c6      	bne.n	8007cd2 <_fx_directory_search+0x69e>
 8007d44:	e000      	b.n	8007d48 <_fx_directory_search+0x714>
                    break;
 8007d46:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8007d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <_fx_directory_search+0x736>
 8007d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d103      	bne.n	8007d6a <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 8007d62:	2301      	movs	r3, #1
 8007d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d68:	e04d      	b.n	8007e06 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d049      	beq.n	8007e06 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 8007d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 8007d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 8007d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 8007d96:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007d9a:	2b60      	cmp	r3, #96	; 0x60
 8007d9c:	d908      	bls.n	8007db0 <_fx_directory_search+0x77c>
 8007d9e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007da2:	2b7a      	cmp	r3, #122	; 0x7a
 8007da4:	d804      	bhi.n	8007db0 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 8007da6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007daa:	3b20      	subs	r3, #32
 8007dac:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 8007db0:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8007db4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d10f      	bne.n	8007ddc <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 8007dbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 8007dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 8007dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1d3      	bne.n	8007d82 <_fx_directory_search+0x74e>
 8007dda:	e000      	b.n	8007dde <_fx_directory_search+0x7aa>
                        break;
 8007ddc:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 8007dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10e      	bne.n	8007e06 <_fx_directory_search+0x7d2>
 8007de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d106      	bne.n	8007e06 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007dfe:	e002      	b.n	8007e06 <_fx_directory_search+0x7d2>
                continue;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <_fx_directory_search+0x7d2>
                continue;
 8007e04:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 8007e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	61fa      	str	r2, [r7, #28]
 8007e10:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007e14:	69b9      	ldr	r1, [r7, #24]
 8007e16:	4291      	cmp	r1, r2
 8007e18:	69f9      	ldr	r1, [r7, #28]
 8007e1a:	eb71 0303 	sbcs.w	r3, r1, r3
 8007e1e:	d206      	bcs.n	8007e2e <_fx_directory_search+0x7fa>
 8007e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f43f af1f 	beq.w	8007c68 <_fx_directory_search+0x634>
 8007e2a:	e000      	b.n	8007e2e <_fx_directory_search+0x7fa>
                break;
 8007e2c:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 8007e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 8007e36:	2304      	movs	r3, #4
 8007e38:	e130      	b.n	800809c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	7f1b      	ldrb	r3, [r3, #28]
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d04f      	beq.n	8007ee6 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	2370      	movs	r3, #112	; 0x70
 8007e50:	461a      	mov	r2, r3
 8007e52:	f009 ffa5 	bl	8011da0 <memcpy>
            search_dir_ptr =  &search_dir;
 8007e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 8007e5e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007e62:	2300      	movs	r3, #0
 8007e64:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 8007e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d13f      	bne.n	8007ef0 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 8007e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d02e      	beq.n	8007ede <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	2370      	movs	r3, #112	; 0x70
 8007e94:	461a      	mov	r2, r3
 8007e96:	f009 ff83 	bl	8011da0 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ea0:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 8007ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eb2:	e010      	b.n	8007ed6 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 8007eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ebc:	18d1      	adds	r1, r2, r3
 8007ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec6:	441a      	add	r2, r3
 8007ec8:	780b      	ldrb	r3, [r1, #0]
 8007eca:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 8007ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eda:	2bff      	cmp	r3, #255	; 0xff
 8007edc:	d9ea      	bls.n	8007eb4 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ee4:	e004      	b.n	8007ef0 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 8007eec:	2304      	movs	r3, #4
 8007eee:	e0d5      	b.n	800809c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f47f add6 	bne.w	8007aa4 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 8007efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b5c      	cmp	r3, #92	; 0x5c
 8007f06:	d028      	beq.n	8007f5a <_fx_directory_search+0x926>
 8007f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f10:	d023      	beq.n	8007f5a <_fx_directory_search+0x926>
 8007f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01f      	beq.n	8007f5a <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8007f1a:	e012      	b.n	8007f42 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 8007f1c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f24:	4413      	add	r3, r2
 8007f26:	7819      	ldrb	r1, [r3, #0]
 8007f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007f34:	460a      	mov	r2, r1
 8007f36:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 8007f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f46:	2bfe      	cmp	r3, #254	; 0xfe
 8007f48:	d807      	bhi.n	8007f5a <_fx_directory_search+0x926>
 8007f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f52:	4413      	add	r3, r2
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e0      	bne.n	8007f1c <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 8007f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b5c      	cmp	r3, #92	; 0x5c
 8007f62:	d012      	beq.n	8007f8a <_fx_directory_search+0x956>
 8007f64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b2f      	cmp	r3, #47	; 0x2f
 8007f6c:	d00d      	beq.n	8007f8a <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f72:	2bfe      	cmp	r3, #254	; 0xfe
 8007f74:	d809      	bhi.n	8007f8a <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f82:	4413      	add	r3, r2
 8007f84:	222f      	movs	r2, #47	; 0x2f
 8007f86:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8007f90:	e017      	b.n	8007fc2 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 8007f92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007f96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f9a:	4413      	add	r3, r2
 8007f9c:	7819      	ldrb	r1, [r3, #0]
 8007f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007faa:	460a      	mov	r2, r1
 8007fac:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 8007fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 8007fb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	2bff      	cmp	r3, #255	; 0xff
 8007fc8:	d807      	bhi.n	8007fda <_fx_directory_search+0x9a6>
 8007fca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007fce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fd2:	4413      	add	r3, r2
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1db      	bne.n	8007f92 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fde:	2bff      	cmp	r3, #255	; 0xff
 8007fe0:	d808      	bhi.n	8007ff4 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 8007fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e003      	b.n	8007ffc <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 8007ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800800a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800800e:	4611      	mov	r1, r2
 8008010:	2270      	movs	r2, #112	; 0x70
 8008012:	4618      	mov	r0, r3
 8008014:	f009 fec4 	bl	8011da0 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	2201      	movs	r2, #1
 800801c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8008020:	e003      	b.n	800802a <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8008032:	4611      	mov	r1, r2
 8008034:	2270      	movs	r2, #112	; 0x70
 8008036:	4618      	mov	r0, r3
 8008038:	f009 feb2 	bl	8011da0 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8008048:	2300      	movs	r3, #0
 800804a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800804e:	e01e      	b.n	800808e <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008058:	4413      	add	r3, r2
 800805a:	7819      	ldrb	r1, [r3, #0]
 800805c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008062:	4413      	add	r3, r2
 8008064:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8008068:	460a      	mov	r2, r1
 800806a:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008074:	4413      	add	r3, r2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800807c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008080:	2bfe      	cmp	r3, #254	; 0xfe
 8008082:	d909      	bls.n	8008098 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 8008084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008088:	3301      	adds	r3, #1
 800808a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800808e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008092:	2bff      	cmp	r3, #255	; 0xff
 8008094:	d9dc      	bls.n	8008050 <_fx_directory_search+0xa1c>
 8008096:	e000      	b.n	800809a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 8008098:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080a2:	46bd      	mov	sp, r7
 80080a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080080a8 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a49      	ldr	r2, [pc, #292]	; (80081dc <_fx_file_close+0x134>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d001      	beq.n	80080be <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 80080ba:	2307      	movs	r3, #7
 80080bc:	e08a      	b.n	80081d4 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a42      	ldr	r2, [pc, #264]	; (80081e0 <_fx_file_close+0x138>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d001      	beq.n	80080e0 <_fx_file_close+0x38>
 80080dc:	2311      	movs	r3, #17
 80080de:	e079      	b.n	80081d4 <_fx_file_close+0x12c>
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80080e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80080ea:	4618      	mov	r0, r3
 80080ec:	f007 fafe 	bl	800f6ec <_tx_mutex_get>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <_fx_file_close+0x52>
 80080f6:	2311      	movs	r3, #17
 80080f8:	e06c      	b.n	80081d4 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d104      	bne.n	800810e <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800810c:	e014      	b.n	8008138 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 8008116:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 8008120:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d104      	bne.n	8008138 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800813e:	1e5a      	subs	r2, r3, #1
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a26      	ldr	r2, [pc, #152]	; (80081e4 <_fx_file_close+0x13c>)
 800814a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d138      	bne.n	80081c6 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 8008158:	2b00      	cmp	r3, #0
 800815a:	d034      	beq.n	80081c6 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800815c:	f3ef 8310 	mrs	r3, PRIMASK
 8008160:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008162:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008164:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008166:	b672      	cpsid	i
    return(int_posture);
 8008168:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800816a:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800816c:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <_fx_file_close+0x140>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 8008176:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <_fx_file_close+0x144>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <_fx_file_close+0x144>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f383 8810 	msr	PRIMASK, r3
}
 8008194:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3368      	adds	r3, #104	; 0x68
 80081a6:	4619      	mov	r1, r3
 80081a8:	69f8      	ldr	r0, [r7, #28]
 80081aa:	f7fd ff65 	bl	8006078 <_fx_directory_entry_write>
 80081ae:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80081bc:	4618      	mov	r0, r3
 80081be:	f007 fd1b 	bl	800fbf8 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	e006      	b.n	80081d4 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80081cc:	4618      	mov	r0, r3
 80081ce:	f007 fd13 	bl	800fbf8 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3720      	adds	r7, #32
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	46494c45 	.word	0x46494c45
 80081e0:	4d454449 	.word	0x4d454449
 80081e4:	46494c43 	.word	0x46494c43
 80081e8:	2000401c 	.word	0x2000401c
 80081ec:	20004018 	.word	0x20004018

080081f0 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b0c5      	sub	sp, #276	; 0x114
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fe:	6018      	str	r0, [r3, #0]
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008208:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800820a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 8008228:	2300      	movs	r3, #0
 800822a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800823c:	e020      	b.n	8008280 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800823e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b5c      	cmp	r3, #92	; 0x5c
 8008246:	d004      	beq.n	8008252 <_fx_file_create+0x62>
 8008248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b2f      	cmp	r3, #47	; 0x2f
 8008250:	d103      	bne.n	800825a <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 8008252:	2300      	movs	r3, #0
 8008254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008258:	e00d      	b.n	8008276 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800825a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b20      	cmp	r3, #32
 8008262:	d103      	bne.n	800826c <_fx_file_create+0x7c>
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008270:	3301      	adds	r3, #1
 8008272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 8008276:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800827a:	3301      	adds	r3, #1
 800827c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 8008280:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1d9      	bne.n	800823e <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <_fx_file_create+0xaa>
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	2bff      	cmp	r3, #255	; 0xff
 8008298:	d901      	bls.n	800829e <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800829a:	230c      	movs	r3, #12
 800829c:	e10a      	b.n	80084b4 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800829e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80082ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80082b0:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 80082b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80082c0:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80082cc:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 80082d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80082dc:	2200      	movs	r2, #0
 80082de:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a74      	ldr	r2, [pc, #464]	; (80084c0 <_fx_file_create+0x2d0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d001      	beq.n	80082f6 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 80082f2:	2311      	movs	r3, #17
 80082f4:	e0de      	b.n	80084b4 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a6f      	ldr	r2, [pc, #444]	; (80084c0 <_fx_file_create+0x2d0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d001      	beq.n	800830c <_fx_file_create+0x11c>
 8008308:	2311      	movs	r3, #17
 800830a:	e0d3      	b.n	80084b4 <_fx_file_create+0x2c4>
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800831a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800831e:	4618      	mov	r0, r3
 8008320:	f007 f9e4 	bl	800f6ec <_tx_mutex_get>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <_fx_file_create+0x13e>
 800832a:	2311      	movs	r3, #17
 800832c:	e0c2      	b.n	80084b4 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800832e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800834e:	4618      	mov	r0, r3
 8008350:	f007 fc52 	bl	800fbf8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8008354:	2323      	movs	r3, #35	; 0x23
 8008356:	e0ad      	b.n	80084b4 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 8008358:	f107 0408 	add.w	r4, r7, #8
 800835c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008364:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8008368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8008370:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	4623      	mov	r3, r4
 8008378:	6809      	ldr	r1, [r1, #0]
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	f7ff f95a 	bl	8007634 <_fx_directory_search>
 8008380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 8008384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10b      	bne.n	80083a4 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800838c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800839a:	4618      	mov	r0, r3
 800839c:	f007 fc2c 	bl	800fbf8 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 80083a0:	230b      	movs	r3, #11
 80083a2:	e087      	b.n	80084b4 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 80083a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083aa:	4611      	mov	r1, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff f8df 	bl	8007570 <_fx_directory_name_extract>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80083b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80083c6:	4618      	mov	r0, r3
 80083c8:	f007 fc16 	bl	800fbf8 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 80083cc:	230d      	movs	r3, #13
 80083ce:	e071      	b.n	80084b4 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 80083d0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80083d4:	f107 0108 	add.w	r1, r7, #8
 80083d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	f7fe fc85 	bl	8006cf0 <_fx_directory_free_search>
 80083e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 80083ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00c      	beq.n	800840c <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 80083f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008400:	4618      	mov	r0, r3
 8008402:	f007 fbf9 	bl	800fbf8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8008406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840a:	e053      	b.n	80084b4 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800840c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008410:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff f8ab 	bl	8007570 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800841a:	f3ef 8310 	mrs	r3, PRIMASK
 800841e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 8008422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 8008426:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800842a:	b672      	cpsid	i
    return(int_posture);
 800842c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 8008430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 8008434:	4b23      	ldr	r3, [pc, #140]	; (80084c4 <_fx_file_create+0x2d4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800843c:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <_fx_file_create+0x2d8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800844c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008450:	f383 8810 	msr	PRIMASK, r3
}
 8008454:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 8008456:	2320      	movs	r3, #32
 8008458:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800846e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b2e      	cmp	r3, #46	; 0x2e
 8008474:	d106      	bne.n	8008484 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 8008476:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800847a:	f043 0302 	orr.w	r3, r3, #2
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 8008484:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008490:	4611      	mov	r1, r2
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	f7fd fdf0 	bl	8006078 <_fx_directory_entry_write>
 8008498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800849c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80084aa:	4618      	mov	r0, r3
 80084ac:	f007 fba4 	bl	800fbf8 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 80084b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd90      	pop	{r4, r7, pc}
 80084be:	bf00      	nop
 80084c0:	4d454449 	.word	0x4d454449
 80084c4:	2000401c 	.word	0x2000401c
 80084c8:	20004018 	.word	0x20004018

080084cc <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 80084cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d0:	b0c2      	sub	sp, #264	; 0x108
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80084d8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80084e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4bcf      	ldr	r3, [pc, #828]	; (8008828 <_fx_file_extended_seek+0x35c>)
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d001      	beq.n	80084f2 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 80084ee:	2307      	movs	r3, #7
 80084f0:	e2b5      	b.n	8008a5e <_fx_file_extended_seek+0x592>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 80084f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008500:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800850e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008514:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	4bc3      	ldr	r3, [pc, #780]	; (800882c <_fx_file_extended_seek+0x360>)
 8008520:	429a      	cmp	r2, r3
 8008522:	d001      	beq.n	8008528 <_fx_file_extended_seek+0x5c>
 8008524:	2311      	movs	r3, #17
 8008526:	e29a      	b.n	8008a5e <_fx_file_extended_seek+0x592>
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008534:	4618      	mov	r0, r3
 8008536:	f007 f8d9 	bl	800f6ec <_tx_mutex_get>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <_fx_file_extended_seek+0x78>
 8008540:	2311      	movs	r3, #17
 8008542:	e28c      	b.n	8008a5e <_fx_file_extended_seek+0x592>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 8008544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008548:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800854c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008550:	428b      	cmp	r3, r1
 8008552:	bf08      	it	eq
 8008554:	4282      	cmpeq	r2, r0
 8008556:	d108      	bne.n	800856a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008560:	4618      	mov	r0, r3
 8008562:	f007 fb49 	bl	800fbf8 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 8008566:	2300      	movs	r3, #0
 8008568:	e279      	b.n	8008a5e <_fx_file_extended_seek+0x592>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800856a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8008576:	fb02 f303 	mul.w	r3, r2, r3
 800857a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800857e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d108      	bne.n	8008598 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800858e:	4618      	mov	r0, r3
 8008590:	f007 fb32 	bl	800fbf8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8008594:	2302      	movs	r3, #2
 8008596:	e262      	b.n	8008a5e <_fx_file_extended_seek+0x592>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 8008598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800859c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80085a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80085a4:	4290      	cmp	r0, r2
 80085a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80085aa:	d205      	bcs.n	80085b8 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 80085ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085b0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80085b4:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 80085b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085cc:	2200      	movs	r2, #0
 80085ce:	469a      	mov	sl, r3
 80085d0:	4693      	mov	fp, r2
 80085d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80085d6:	460b      	mov	r3, r1
 80085d8:	fb0a f203 	mul.w	r2, sl, r3
 80085dc:	4603      	mov	r3, r0
 80085de:	fb03 f30b 	mul.w	r3, r3, fp
 80085e2:	4413      	add	r3, r2
 80085e4:	4602      	mov	r2, r0
 80085e6:	fba2 450a 	umull	r4, r5, r2, sl
 80085ea:	442b      	add	r3, r5
 80085ec:	461d      	mov	r5, r3
 80085ee:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80085f2:	42a2      	cmp	r2, r4
 80085f4:	41ab      	sbcs	r3, r5
 80085f6:	f0c0 8156 	bcc.w	80088a6 <_fx_file_extended_seek+0x3da>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 80085fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008600:	2200      	movs	r2, #0
 8008602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008606:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800860a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800860e:	2200      	movs	r2, #0
 8008610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008614:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008618:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800861c:	462b      	mov	r3, r5
 800861e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8008622:	4652      	mov	r2, sl
 8008624:	fb02 f203 	mul.w	r2, r2, r3
 8008628:	465b      	mov	r3, fp
 800862a:	4621      	mov	r1, r4
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	4413      	add	r3, r2
 8008632:	4622      	mov	r2, r4
 8008634:	4651      	mov	r1, sl
 8008636:	fba2 8901 	umull	r8, r9, r2, r1
 800863a:	444b      	add	r3, r9
 800863c:	4699      	mov	r9, r3
 800863e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008642:	4590      	cmp	r8, r2
 8008644:	eb79 0303 	sbcs.w	r3, r9, r3
 8008648:	d225      	bcs.n	8008696 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800864a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 8008654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	2200      	movs	r2, #0
 8008664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008668:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800866c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008670:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8008674:	4621      	mov	r1, r4
 8008676:	1a51      	subs	r1, r2, r1
 8008678:	6139      	str	r1, [r7, #16]
 800867a:	4629      	mov	r1, r5
 800867c:	eb63 0301 	sbc.w	r3, r3, r1
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008686:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800868a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008694:	e0b7      	b.n	8008806 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 8008696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800869a:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800869c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086a0:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 80086a2:	4413      	add	r3, r2
 80086a4:	3b01      	subs	r3, #1
 80086a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 80086aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	1e5a      	subs	r2, r3, #1
 80086b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086c0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 80086c4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80086c8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80086cc:	4621      	mov	r1, r4
 80086ce:	1a51      	subs	r1, r2, r1
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4629      	mov	r1, r5
 80086d4:	eb63 0301 	sbc.w	r3, r3, r1
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80086de:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 80086e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80086ee:	e08a      	b.n	8008806 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 80086f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f4:	3301      	adds	r3, #1
 80086f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 80086fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80086fe:	461a      	mov	r2, r3
 8008700:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008704:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008708:	f003 fe10 	bl	800c32c <_fx_utility_FAT_entry_read>
 800870c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8008710:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008714:	2b00      	cmp	r3, #0
 8008716:	d009      	beq.n	800872c <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8008718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008720:	4618      	mov	r0, r3
 8008722:	f007 fa69 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8008726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800872a:	e198      	b.n	8008a5e <_fx_file_extended_seek+0x592>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 8008734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008738:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800873c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008740:	2200      	movs	r2, #0
 8008742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008746:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800874a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800874e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8008752:	4621      	mov	r1, r4
 8008754:	4291      	cmp	r1, r2
 8008756:	4629      	mov	r1, r5
 8008758:	eb71 0303 	sbcs.w	r3, r1, r3
 800875c:	d216      	bcs.n	800878c <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800875e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008762:	2200      	movs	r2, #0
 8008764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008768:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800876c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008770:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008774:	4621      	mov	r1, r4
 8008776:	1a51      	subs	r1, r2, r1
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	4629      	mov	r1, r5
 800877c:	eb63 0301 	sbc.w	r3, r3, r1
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008786:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800878a:	e03c      	b.n	8008806 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800878c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008794:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8008796:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800879a:	1e5a      	subs	r2, r3, #1
 800879c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a0:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 80087a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087b0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80087b4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80087b8:	4621      	mov	r1, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	4283      	cmp	r3, r0
 80087be:	bf08      	it	eq
 80087c0:	428a      	cmpeq	r2, r1
 80087c2:	d135      	bne.n	8008830 <_fx_file_extended_seek+0x364>
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d931      	bls.n	8008830 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 80087cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80087d4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 80087d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087dc:	4293      	cmp	r3, r2
 80087de:	d227      	bcs.n	8008830 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 80087e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 80087ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087f6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 8008804:	e014      	b.n	8008830 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880a:	2b01      	cmp	r3, #1
 800880c:	d911      	bls.n	8008832 <_fx_file_extended_seek+0x366>
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008812:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008816:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881e:	4293      	cmp	r3, r2
 8008820:	f4ff af66 	bcc.w	80086f0 <_fx_file_extended_seek+0x224>
 8008824:	e005      	b.n	8008832 <_fx_file_extended_seek+0x366>
 8008826:	bf00      	nop
 8008828:	46494c45 	.word	0x46494c45
 800882c:	4d454449 	.word	0x4d454449
                    break;
 8008830:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 8008832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008836:	2200      	movs	r2, #0
 8008838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800883c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008840:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008844:	2200      	movs	r2, #0
 8008846:	67bb      	str	r3, [r7, #120]	; 0x78
 8008848:	67fa      	str	r2, [r7, #124]	; 0x7c
 800884a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800884e:	462b      	mov	r3, r5
 8008850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008854:	4642      	mov	r2, r8
 8008856:	fb02 f203 	mul.w	r2, r2, r3
 800885a:	464b      	mov	r3, r9
 800885c:	4621      	mov	r1, r4
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	4413      	add	r3, r2
 8008864:	4622      	mov	r2, r4
 8008866:	4641      	mov	r1, r8
 8008868:	fba2 1201 	umull	r1, r2, r2, r1
 800886c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008870:	460a      	mov	r2, r1
 8008872:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008876:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800887a:	4413      	add	r3, r2
 800887c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008880:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008884:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8008888:	4621      	mov	r1, r4
 800888a:	4291      	cmp	r1, r2
 800888c:	4629      	mov	r1, r5
 800888e:	eb71 0303 	sbcs.w	r3, r1, r3
 8008892:	d22f      	bcs.n	80088f4 <_fx_file_extended_seek+0x428>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008898:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800889c:	4618      	mov	r0, r3
 800889e:	f007 f9ab 	bl	800fbf8 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 80088a2:	2308      	movs	r3, #8
 80088a4:	e0db      	b.n	8008a5e <_fx_file_extended_seek+0x592>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 80088a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088aa:	2200      	movs	r2, #0
 80088ac:	673b      	str	r3, [r7, #112]	; 0x70
 80088ae:	677a      	str	r2, [r7, #116]	; 0x74
 80088b0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80088b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80088b8:	f7f7 fdbe 	bl	8000438 <__aeabi_uldivmod>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088c4:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 80088c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ca:	695a      	ldr	r2, [r3, #20]
 80088cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 80088d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d8:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 80088da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088de:	2200      	movs	r2, #0
 80088e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80088e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80088e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80088ec:	f7f7 fda4 	bl	8000438 <__aeabi_uldivmod>
 80088f0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 80088f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088f8:	2200      	movs	r2, #0
 80088fa:	663b      	str	r3, [r7, #96]	; 0x60
 80088fc:	667a      	str	r2, [r7, #100]	; 0x64
 80088fe:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008902:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008906:	4621      	mov	r1, r4
 8008908:	4628      	mov	r0, r5
 800890a:	4283      	cmp	r3, r0
 800890c:	bf08      	it	eq
 800890e:	428a      	cmpeq	r2, r1
 8008910:	d151      	bne.n	80089b6 <_fx_file_extended_seek+0x4ea>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8008912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8008918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891c:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800891e:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8008920:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8008924:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800892c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008930:	1e51      	subs	r1, r2, #1
 8008932:	65b9      	str	r1, [r7, #88]	; 0x58
 8008934:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8008938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	2200      	movs	r2, #0
 8008942:	653b      	str	r3, [r7, #80]	; 0x50
 8008944:	657a      	str	r2, [r7, #84]	; 0x54
 8008946:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800894a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800894e:	f7f7 fd73 	bl	8000438 <__aeabi_uldivmod>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 8008956:	4613      	mov	r3, r2
 8008958:	4423      	add	r3, r4
 800895a:	2200      	movs	r2, #0
 800895c:	64bb      	str	r3, [r7, #72]	; 0x48
 800895e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008964:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008968:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800896c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008970:	1e51      	subs	r1, r2, #1
 8008972:	6439      	str	r1, [r7, #64]	; 0x40
 8008974:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8008978:	647b      	str	r3, [r7, #68]	; 0x44
 800897a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	2200      	movs	r2, #0
 8008982:	63bb      	str	r3, [r7, #56]	; 0x38
 8008984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008986:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800898a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800898e:	f7f7 fd53 	bl	8000438 <__aeabi_uldivmod>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800899c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80089a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80089a4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 80089a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b2:	631a      	str	r2, [r3, #48]	; 0x30
 80089b4:	e04b      	b.n	8008a4e <_fx_file_extended_seek+0x582>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80089b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80089bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c0:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80089c2:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80089c4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80089c8:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 80089d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	2200      	movs	r2, #0
 80089d8:	633b      	str	r3, [r7, #48]	; 0x30
 80089da:	637a      	str	r2, [r7, #52]	; 0x34
 80089dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089e0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80089e4:	f7f7 fd28 	bl	8000438 <__aeabi_uldivmod>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 80089ec:	4613      	mov	r3, r2
 80089ee:	4423      	add	r3, r4
 80089f0:	2200      	movs	r2, #0
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80089fe:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8008a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	2200      	movs	r2, #0
 8008a0a:	623b      	str	r3, [r7, #32]
 8008a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8008a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a12:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8008a16:	f7f7 fd0f 	bl	8000438 <__aeabi_uldivmod>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 8008a24:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008a28:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008a2c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8008a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	2200      	movs	r2, #0
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	61fa      	str	r2, [r7, #28]
 8008a3c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8008a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a44:	f7f7 fcf8 	bl	8000438 <__aeabi_uldivmod>
 8008a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 8008a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008a56:	4618      	mov	r0, r3
 8008a58:	f007 f8ce 	bl	800fbf8 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008a64:	46bd      	mov	sp, r7
 8008a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a6a:	bf00      	nop

08008a6c <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 8008a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a70:	b0e8      	sub	sp, #416	; 0x1a0
 8008a72:	af02      	add	r7, sp, #8
 8008a74:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 8008a78:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008a7c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008a80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 8008a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4bd9      	ldr	r3, [pc, #868]	; (8008df8 <_fx_file_open+0x38c>)
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d002      	beq.n	8008a9c <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 8008a96:	2311      	movs	r3, #17
 8008a98:	f000 bcc4 	b.w	8009424 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 8008a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008aa0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008aaa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 8008aae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 8008ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d006      	beq.n	8008ad0 <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 8008ac2:	4bce      	ldr	r3, [pc, #824]	; (8008dfc <_fx_file_open+0x390>)
 8008ac4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8008ac8:	2318      	movs	r3, #24
 8008aca:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 8008ace:	e006      	b.n	8008ade <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 8008ad0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8008ad4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 8008ad8:	2318      	movs	r3, #24
 8008ada:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 8008ade:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d106      	bne.n	8008af4 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 8008aec:	2301      	movs	r3, #1
 8008aee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008af2:	e002      	b.n	8008afa <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8008afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4bbd      	ldr	r3, [pc, #756]	; (8008df8 <_fx_file_open+0x38c>)
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d002      	beq.n	8008b0c <_fx_file_open+0xa0>
 8008b06:	2311      	movs	r3, #17
 8008b08:	f000 bc8c 	b.w	8009424 <_fx_file_open+0x9b8>
 8008b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b10:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f006 fde7 	bl	800f6ec <_tx_mutex_get>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <_fx_file_open+0xbe>
 8008b24:	2311      	movs	r3, #17
 8008b26:	f000 bc7d 	b.w	8009424 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 8008b2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008b2e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8008b32:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008b36:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 8008b38:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 8008b42:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008b46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008b54:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008b58:	f7fe fd6c 	bl	8007634 <_fx_directory_search>
 8008b5c:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 8008b60:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8008b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b6c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008b70:	4618      	mov	r0, r3
 8008b72:	f007 f841 	bl	800fbf8 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 8008b76:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008b7a:	f000 bc53 	b.w	8009424 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 8008b7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008b82:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8008b86:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8008b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b96:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f007 f82c 	bl	800fbf8 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 8008ba0:	2305      	movs	r3, #5
 8008ba2:	f000 bc3f 	b.w	8009424 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 8008ba6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d160      	bne.n	8008c70 <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 8008bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8008bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bbe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f007 f818 	bl	800fbf8 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 8008bc8:	2323      	movs	r3, #35	; 0x23
 8008bca:	f000 bc2b 	b.w	8009424 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 8008bce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008bd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d009      	beq.n	8008bf2 <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 8008bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008be2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008be6:	4618      	mov	r0, r3
 8008be8:	f007 f806 	bl	800fbf8 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 8008bec:	2306      	movs	r3, #6
 8008bee:	f000 bc19 	b.w	8009424 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 8008bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bf6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008bfa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 8008bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008c06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 8008c0a:	e02d      	b.n	8008c68 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8008c0c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8008c10:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8008c14:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c18:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	bf08      	it	eq
 8008c20:	4290      	cmpeq	r0, r2
 8008c22:	d117      	bne.n	8008c54 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 8008c24:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8008c28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8008c2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d10d      	bne.n	8008c54 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 8008c38:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8008c3c:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d108      	bne.n	8008c54 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8008c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c46:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f006 ffd4 	bl	800fbf8 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 8008c50:	2306      	movs	r3, #6
 8008c52:	e3e7      	b.n	8009424 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 8008c54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8008c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 8008c5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008c62:	3b01      	subs	r3, #1
 8008c64:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 8008c68:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1cd      	bne.n	8008c0c <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8008c70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 8008c7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c80:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8008c84:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8008c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8008c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8008c94:	fb02 f303 	mul.w	r3, r2, r3
 8008c98:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 8008c9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8008ca4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d108      	bne.n	8008cbe <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8008cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cb0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f006 ff9f 	bl	800fbf8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e3b2      	b.n	8009424 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 8008cd0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 8008cd8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8103 	beq.w	8008ee8 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 8008ce2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cec:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008cf0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8008cf4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	eb11 0a02 	adds.w	sl, r1, r2
 8008cfe:	4629      	mov	r1, r5
 8008d00:	eb41 0b03 	adc.w	fp, r1, r3
 8008d04:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
 8008d08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d0c:	f14b 33ff 	adc.w	r3, fp, #4294967295	; 0xffffffff
 8008d10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d14:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d1e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008d22:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8008d26:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8008d2a:	f7f7 fb85 	bl	8000438 <__aeabi_uldivmod>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4610      	mov	r0, r2
 8008d34:	4619      	mov	r1, r3
 8008d36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d40:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008d44:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8008d48:	4623      	mov	r3, r4
 8008d4a:	fb03 f201 	mul.w	r2, r3, r1
 8008d4e:	462b      	mov	r3, r5
 8008d50:	fb00 f303 	mul.w	r3, r0, r3
 8008d54:	4413      	add	r3, r2
 8008d56:	4622      	mov	r2, r4
 8008d58:	fba0 8902 	umull	r8, r9, r0, r2
 8008d5c:	444b      	add	r3, r9
 8008d5e:	4699      	mov	r9, r3
 8008d60:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 8008d64:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 8008d68:	e12f      	b.n	8008fca <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 8008d6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 8008d74:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8008d7e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008d82:	f003 fad3 	bl	800c32c <_fx_utility_FAT_entry_read>
 8008d86:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 8008d8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8008d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d96:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f006 ff2c 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8008da0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008da4:	e33e      	b.n	8009424 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 8008da6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008daa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d006      	beq.n	8008dc0 <_fx_file_open+0x354>
 8008db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008db8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d908      	bls.n	8008dd2 <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8008dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dc4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f006 ff15 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e328      	b.n	8009424 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 8008dd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d10f      	bne.n	8008e00 <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 8008de0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00e      	beq.n	8008e06 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 8008de8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008df4:	619a      	str	r2, [r3, #24]
 8008df6:	e006      	b.n	8008e06 <_fx_file_open+0x39a>
 8008df8:	4d454449 	.word	0x4d454449
 8008dfc:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 8008e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008e0a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 8008e0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008e12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 8008e16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e20:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008e24:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8008e28:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	4291      	cmp	r1, r2
 8008e30:	4649      	mov	r1, r9
 8008e32:	eb71 0303 	sbcs.w	r3, r1, r3
 8008e36:	d216      	bcs.n	8008e66 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 8008e38:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e42:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008e46:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8008e4a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8008e4e:	4641      	mov	r1, r8
 8008e50:	1a51      	subs	r1, r2, r1
 8008e52:	6039      	str	r1, [r7, #0]
 8008e54:	4649      	mov	r1, r9
 8008e56:	eb63 0301 	sbc.w	r3, r3, r1
 8008e5a:	607b      	str	r3, [r7, #4]
 8008e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e60:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 8008e64:	e040      	b.n	8008ee8 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 8008e66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d13b      	bne.n	8008ee8 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 8008e70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008e74:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008e78:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 8008e7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008e7e:	1e5a      	subs	r2, r3, #1
 8008e80:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008e84:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 8008e86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e90:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e94:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8008e98:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8008e9c:	4641      	mov	r1, r8
 8008e9e:	4648      	mov	r0, r9
 8008ea0:	4283      	cmp	r3, r0
 8008ea2:	bf08      	it	eq
 8008ea4:	428a      	cmpeq	r2, r1
 8008ea6:	d11f      	bne.n	8008ee8 <_fx_file_open+0x47c>
 8008ea8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d91b      	bls.n	8008ee8 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8008eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008eb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008eb8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8008ebc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d211      	bcs.n	8008ee8 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 8008ec4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ec8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008ecc:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 8008ece:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008eda:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 8008edc:	f04f 0200 	mov.w	r2, #0
 8008ee0:	f04f 0300 	mov.w	r3, #0
 8008ee4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 8008ee8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d90a      	bls.n	8008f06 <_fx_file_open+0x49a>
 8008ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ef4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008ef8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8008efc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008f00:	4293      	cmp	r3, r2
 8008f02:	f4ff af32 	bcc.w	8008d6a <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8008f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f12:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 8008f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8008f26:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 8008f30:	4652      	mov	r2, sl
 8008f32:	fb02 f203 	mul.w	r2, r2, r3
 8008f36:	465b      	mov	r3, fp
 8008f38:	4641      	mov	r1, r8
 8008f3a:	fb01 f303 	mul.w	r3, r1, r3
 8008f3e:	4413      	add	r3, r2
 8008f40:	4642      	mov	r2, r8
 8008f42:	4651      	mov	r1, sl
 8008f44:	fba2 4501 	umull	r4, r5, r2, r1
 8008f48:	442b      	add	r3, r5
 8008f4a:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 8008f4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f56:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 8008f5a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	fb03 f205 	mul.w	r2, r3, r5
 8008f64:	460b      	mov	r3, r1
 8008f66:	fb04 f303 	mul.w	r3, r4, r3
 8008f6a:	4413      	add	r3, r2
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	fba4 1202 	umull	r1, r2, r4, r2
 8008f72:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8008f76:	460a      	mov	r2, r1
 8008f78:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8008f7c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008f80:	4413      	add	r3, r2
 8008f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008f86:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8008f8a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 8008f8e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 8008f92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008f96:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8008f9a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8008f9e:	4282      	cmp	r2, r0
 8008fa0:	418b      	sbcs	r3, r1
 8008fa2:	d309      	bcc.n	8008fb8 <_fx_file_open+0x54c>
 8008fa4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00e      	beq.n	8008fca <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 8008fac:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008fb0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d908      	bls.n	8008fca <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 8008fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fbc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f006 fe19 	bl	800fbf8 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	e22c      	b.n	8009424 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 8008fca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008fce:	4baa      	ldr	r3, [pc, #680]	; (8009278 <_fx_file_open+0x80c>)
 8008fd0:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 8008fd2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008fd6:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8008fda:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008fde:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 8008fe0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fe8:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 8008fea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008fee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008ff2:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 8008ff4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 8008ffc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009000:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009004:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 8009006:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800900a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800900e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009012:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 8009014:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009018:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800901c:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800901e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009022:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8009026:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800902a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800902e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009032:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8009036:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800903a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800903e:	2300      	movs	r3, #0
 8009040:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 8009044:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009048:	2b00      	cmp	r3, #0
 800904a:	d163      	bne.n	8009114 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800904c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009050:	695a      	ldr	r2, [r3, #20]
 8009052:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009056:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 8009058:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800905c:	2200      	movs	r2, #0
 800905e:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009060:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	2200      	movs	r2, #0
 8009068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800906c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8009070:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	3b02      	subs	r3, #2
 8009078:	2200      	movs	r2, #0
 800907a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800907e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009082:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009088:	2200      	movs	r2, #0
 800908a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800908e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 8009092:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8009096:	462b      	mov	r3, r5
 8009098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800909c:	4642      	mov	r2, r8
 800909e:	fb02 f203 	mul.w	r2, r2, r3
 80090a2:	464b      	mov	r3, r9
 80090a4:	4621      	mov	r1, r4
 80090a6:	fb01 f303 	mul.w	r3, r1, r3
 80090aa:	4413      	add	r3, r2
 80090ac:	4622      	mov	r2, r4
 80090ae:	4641      	mov	r1, r8
 80090b0:	fba2 1201 	umull	r1, r2, r2, r1
 80090b4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80090b8:	460a      	mov	r2, r1
 80090ba:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80090be:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80090c2:	4413      	add	r3, r2
 80090c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80090c8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80090cc:	4623      	mov	r3, r4
 80090ce:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80090d2:	4602      	mov	r2, r0
 80090d4:	189b      	adds	r3, r3, r2
 80090d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090da:	460b      	mov	r3, r1
 80090dc:	462a      	mov	r2, r5
 80090de:	eb42 0303 	adc.w	r3, r2, r3
 80090e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80090ee:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 80090f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090f6:	2200      	movs	r2, #0
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 80090fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090fe:	2200      	movs	r2, #0
 8009100:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 8009102:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8009112:	e140      	b.n	8009396 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 8009114:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009118:	2200      	movs	r2, #0
 800911a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800911e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009122:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8009126:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	4283      	cmp	r3, r0
 8009130:	bf08      	it	eq
 8009132:	428a      	cmpeq	r2, r1
 8009134:	f040 80a2 	bne.w	800927c <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009138:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800913c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800913e:	2200      	movs	r2, #0
 8009140:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009144:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8009148:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009154:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009158:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800915c:	460b      	mov	r3, r1
 800915e:	3b02      	subs	r3, #2
 8009160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009164:	4613      	mov	r3, r2
 8009166:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800916a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800916e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009174:	2200      	movs	r2, #0
 8009176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800917a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800917e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009182:	462b      	mov	r3, r5
 8009184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009188:	4642      	mov	r2, r8
 800918a:	fb02 f203 	mul.w	r2, r2, r3
 800918e:	464b      	mov	r3, r9
 8009190:	4621      	mov	r1, r4
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	4413      	add	r3, r2
 8009198:	4622      	mov	r2, r4
 800919a:	4641      	mov	r1, r8
 800919c:	fba2 1201 	umull	r1, r2, r2, r1
 80091a0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80091a4:	460a      	mov	r2, r1
 80091a6:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80091aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80091ae:	4413      	add	r3, r2
 80091b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80091b4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80091b8:	4623      	mov	r3, r4
 80091ba:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80091be:	4602      	mov	r2, r0
 80091c0:	189b      	adds	r3, r3, r2
 80091c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091c6:	460b      	mov	r3, r1
 80091c8:	462a      	mov	r2, r5
 80091ca:	eb42 0303 	adc.w	r3, r2, r3
 80091ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 80091d2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80091d6:	1e51      	subs	r1, r2, #1
 80091d8:	67b9      	str	r1, [r7, #120]	; 0x78
 80091da:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80091de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e6:	2200      	movs	r2, #0
 80091e8:	673b      	str	r3, [r7, #112]	; 0x70
 80091ea:	677a      	str	r2, [r7, #116]	; 0x74
 80091ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80091f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80091f4:	f7f7 f920 	bl	8000438 <__aeabi_uldivmod>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	2300      	movs	r3, #0
 80091fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8009200:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8009202:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8009206:	4623      	mov	r3, r4
 8009208:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800920c:	4602      	mov	r2, r0
 800920e:	189b      	adds	r3, r3, r2
 8009210:	663b      	str	r3, [r7, #96]	; 0x60
 8009212:	460b      	mov	r3, r1
 8009214:	462a      	mov	r2, r5
 8009216:	eb42 0303 	adc.w	r3, r2, r3
 800921a:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800921c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009220:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009224:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 8009228:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800922c:	1e51      	subs	r1, r2, #1
 800922e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009230:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8009234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	2200      	movs	r2, #0
 800923e:	653b      	str	r3, [r7, #80]	; 0x50
 8009240:	657a      	str	r2, [r7, #84]	; 0x54
 8009242:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800924a:	f7f7 f8f5 	bl	8000438 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009256:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 8009258:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800925c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009260:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009264:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 8009268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800926c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800926e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009272:	631a      	str	r2, [r3, #48]	; 0x30
 8009274:	e08f      	b.n	8009396 <_fx_file_open+0x92a>
 8009276:	bf00      	nop
 8009278:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800927c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009282:	2200      	movs	r2, #0
 8009284:	64bb      	str	r3, [r7, #72]	; 0x48
 8009286:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 8009288:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	2200      	movs	r2, #0
 8009290:	643b      	str	r3, [r7, #64]	; 0x40
 8009292:	647a      	str	r2, [r7, #68]	; 0x44
 8009294:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009298:	460b      	mov	r3, r1
 800929a:	3b02      	subs	r3, #2
 800929c:	63bb      	str	r3, [r7, #56]	; 0x38
 800929e:	4613      	mov	r3, r2
 80092a0:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 80092a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ac:	2200      	movs	r2, #0
 80092ae:	633b      	str	r3, [r7, #48]	; 0x30
 80092b0:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 80092b2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80092b6:	462b      	mov	r3, r5
 80092b8:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80092bc:	4642      	mov	r2, r8
 80092be:	fb02 f203 	mul.w	r2, r2, r3
 80092c2:	464b      	mov	r3, r9
 80092c4:	4621      	mov	r1, r4
 80092c6:	fb01 f303 	mul.w	r3, r1, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	4622      	mov	r2, r4
 80092ce:	4641      	mov	r1, r8
 80092d0:	fba2 1201 	umull	r1, r2, r2, r1
 80092d4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80092d8:	460a      	mov	r2, r1
 80092da:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80092de:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80092e2:	4413      	add	r3, r2
 80092e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80092e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80092ec:	4623      	mov	r3, r4
 80092ee:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80092f2:	4602      	mov	r2, r0
 80092f4:	189b      	adds	r3, r3, r2
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80092f8:	460b      	mov	r3, r1
 80092fa:	462a      	mov	r2, r5
 80092fc:	eb42 0303 	adc.w	r3, r2, r3
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 8009302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	2200      	movs	r2, #0
 800930a:	623b      	str	r3, [r7, #32]
 800930c:	627a      	str	r2, [r7, #36]	; 0x24
 800930e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009312:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8009316:	f7f7 f88f 	bl	8000438 <__aeabi_uldivmod>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	2300      	movs	r3, #0
 8009320:	61ba      	str	r2, [r7, #24]
 8009322:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8009324:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8009328:	4623      	mov	r3, r4
 800932a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800932e:	4602      	mov	r2, r0
 8009330:	189b      	adds	r3, r3, r2
 8009332:	613b      	str	r3, [r7, #16]
 8009334:	460b      	mov	r3, r1
 8009336:	462a      	mov	r2, r5
 8009338:	eb42 0303 	adc.w	r3, r2, r3
 800933c:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800933e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009342:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009346:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800934a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	2200      	movs	r2, #0
 8009352:	60bb      	str	r3, [r7, #8]
 8009354:	60fa      	str	r2, [r7, #12]
 8009356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800935a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800935e:	f7f7 f86b 	bl	8000438 <__aeabi_uldivmod>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800936a:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800936c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009370:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009374:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009378:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800937c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8009380:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009384:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009386:	fbb3 f1f2 	udiv	r1, r3, r2
 800938a:	fb01 f202 	mul.w	r2, r1, r2
 800938e:	1a9a      	subs	r2, r3, r2
 8009390:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009394:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 8009396:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800939a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01f      	beq.n	80093e2 <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 80093a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80093aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 80093b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80093b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80093bc:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 80093be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80093c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80093c6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 80093c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80093cc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80093d0:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 80093d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80093da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80093de:	65da      	str	r2, [r3, #92]	; 0x5c
 80093e0:	e00f      	b.n	8009402 <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 80093e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80093ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 80093ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80093f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80093f6:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 80093f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80093fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009400:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 8009402:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009406:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009410:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 8009414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009418:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800941c:	4618      	mov	r0, r3
 800941e:	f006 fbeb 	bl	800fbf8 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800942a:	46bd      	mov	sp, r7
 800942c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009430 <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8009430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009434:	b0aa      	sub	sp, #168	; 0xa8
 8009436:	af04      	add	r7, sp, #16
 8009438:	66f8      	str	r0, [r7, #108]	; 0x6c
 800943a:	66b9      	str	r1, [r7, #104]	; 0x68
 800943c:	667a      	str	r2, [r7, #100]	; 0x64
 800943e:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 8009440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	4b9d      	ldr	r3, [pc, #628]	; (80096bc <_fx_file_read+0x28c>)
 8009446:	429a      	cmp	r2, r3
 8009448:	d001      	beq.n	800944e <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800944a:	2307      	movs	r3, #7
 800944c:	e28d      	b.n	800996a <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800944e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009452:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 8009454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009456:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800945e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 8009462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009466:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8009468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	4b94      	ldr	r3, [pc, #592]	; (80096c0 <_fx_file_read+0x290>)
 800946e:	429a      	cmp	r2, r3
 8009470:	d001      	beq.n	8009476 <_fx_file_read+0x46>
 8009472:	2311      	movs	r3, #17
 8009474:	e279      	b.n	800996a <_fx_file_read+0x53a>
 8009476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009478:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800947c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009480:	4618      	mov	r0, r3
 8009482:	f006 f933 	bl	800f6ec <_tx_mutex_get>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <_fx_file_read+0x60>
 800948c:	2311      	movs	r3, #17
 800948e:	e26c      	b.n	800996a <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 8009490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009492:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 8009496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009498:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800949c:	4290      	cmp	r0, r2
 800949e:	eb71 0303 	sbcs.w	r3, r1, r3
 80094a2:	d30a      	bcc.n	80094ba <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 80094a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094a6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80094aa:	4618      	mov	r0, r3
 80094ac:	f006 fba4 	bl	800fbf8 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 80094b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 80094b6:	2309      	movs	r3, #9
 80094b8:	e257      	b.n	800996a <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 80094ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 80094c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094c2:	2200      	movs	r2, #0
 80094c4:	4698      	mov	r8, r3
 80094c6:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 80094c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ca:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80094ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80094d4:	1a84      	subs	r4, r0, r2
 80094d6:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 80094da:	4544      	cmp	r4, r8
 80094dc:	eb75 0309 	sbcs.w	r3, r5, r9
 80094e0:	d209      	bcs.n	80094f6 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 80094e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80094e8:	4611      	mov	r1, r2
 80094ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80094f0:	4613      	mov	r3, r2
 80094f2:	1acb      	subs	r3, r1, r3
 80094f4:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 80094f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 80094fc:	e20a      	b.n	8009914 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 80094fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	2b00      	cmp	r3, #0
 8009504:	d105      	bne.n	8009512 <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 8009506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800950a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800950e:	4293      	cmp	r3, r2
 8009510:	d24d      	bcs.n	80095ae <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 8009512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009514:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8009518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800951a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800951c:	2304      	movs	r3, #4
 800951e:	9302      	str	r3, [sp, #8]
 8009520:	2301      	movs	r3, #1
 8009522:	9301      	str	r3, [sp, #4]
 8009524:	9200      	str	r2, [sp, #0]
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800952c:	f004 fb0c 	bl	800db48 <_fx_utility_logical_sector_read>
 8009530:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 8009532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 8009538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800953a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800953e:	4618      	mov	r0, r3
 8009540:	f006 fb5a 	bl	800fbf8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 8009544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009546:	e210      	b.n	800996a <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8009548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800954a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800954c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 8009556:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800955a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800955e:	429a      	cmp	r2, r3
 8009560:	d903      	bls.n	800956a <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 8009562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800956a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800956c:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800956e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 8009572:	4413      	add	r3, r2
 8009574:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009578:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800957c:	4618      	mov	r0, r3
 800957e:	f004 fedf 	bl	800e340 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 8009582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800958a:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958e:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 8009590:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800959e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80095a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095a6:	4413      	add	r3, r2
 80095a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095ac:	e108      	b.n	80097c0 <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 80095ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 80095be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ca:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80095cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 80095d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095da:	e033      	b.n	8009644 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80095dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80095e0:	461a      	mov	r2, r3
 80095e2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80095e6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80095e8:	f002 fea0 	bl	800c32c <_fx_utility_FAT_entry_read>
 80095ec:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 80095ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <_fx_file_read+0x1da>
 80095f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d907      	bls.n	800960a <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 80095fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009600:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8009604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8009606:	429a      	cmp	r2, r3
 8009608:	d20c      	bcs.n	8009624 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800960a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800960c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009610:	4618      	mov	r0, r3
 8009612:	f006 faf1 	bl	800fbf8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 8009616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <_fx_file_read+0x1f0>
                        {
                            return(status);
 800961c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961e:	e1a4      	b.n	800996a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8009620:	2308      	movs	r3, #8
 8009622:	e1a2      	b.n	800996a <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 8009624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800962c:	429a      	cmp	r2, r3
 800962e:	d110      	bne.n	8009652 <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 8009630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 8009636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 8009644:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800964c:	429a      	cmp	r2, r3
 800964e:	d3c5      	bcc.n	80095dc <_fx_file_read+0x1ac>
 8009650:	e000      	b.n	8009654 <_fx_file_read+0x224>
                        break;
 8009652:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 8009654:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800965c:	429a      	cmp	r2, r3
 800965e:	d203      	bcs.n	8009668 <_fx_file_read+0x238>
            {
                sectors = i;
 8009660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 8009668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800966c:	2b01      	cmp	r3, #1
 800966e:	d129      	bne.n	80096c4 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 8009670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009672:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 8009676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009678:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800967a:	2304      	movs	r3, #4
 800967c:	9302      	str	r3, [sp, #8]
 800967e:	2301      	movs	r3, #1
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	9200      	str	r2, [sp, #0]
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800968a:	f004 fa5d 	bl	800db48 <_fx_utility_logical_sector_read>
 800968e:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 8009690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009692:	2b00      	cmp	r3, #0
 8009694:	d007      	beq.n	80096a6 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 8009696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009698:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800969c:	4618      	mov	r0, r3
 800969e:	f006 faab 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 80096a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096a4:	e161      	b.n	800996a <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 80096a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096a8:	6898      	ldr	r0, [r3, #8]
 80096aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	461a      	mov	r2, r3
 80096b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80096b4:	f004 fe44 	bl	800e340 <_fx_utility_memory_copy>
 80096b8:	e02f      	b.n	800971a <_fx_file_read+0x2ea>
 80096ba:	bf00      	nop
 80096bc:	46494c45 	.word	0x46494c45
 80096c0:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 80096c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c6:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 80096ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80096d0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 80096d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80096da:	2304      	movs	r3, #4
 80096dc:	9302      	str	r3, [sp, #8]
 80096de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80096f0:	f004 fa2a 	bl	800db48 <_fx_utility_logical_sector_read>
 80096f4:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 80096f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80096fc:	461a      	mov	r2, r3
 80096fe:	2300      	movs	r3, #0
 8009700:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 8009704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800970a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800970c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009710:	4618      	mov	r0, r3
 8009712:	f006 fa71 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 8009716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009718:	e127      	b.n	800996a <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800971a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 8009720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009724:	3b01      	subs	r3, #1
 8009726:	2200      	movs	r2, #0
 8009728:	65bb      	str	r3, [r7, #88]	; 0x58
 800972a:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800972c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8009730:	4623      	mov	r3, r4
 8009732:	18c3      	adds	r3, r0, r3
 8009734:	653b      	str	r3, [r7, #80]	; 0x50
 8009736:	462b      	mov	r3, r5
 8009738:	eb41 0303 	adc.w	r3, r1, r3
 800973c:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800973e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009740:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009744:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8009748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800974a:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800974c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800974e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009754:	4413      	add	r3, r2
 8009756:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 8009758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800975a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 8009760:	18ca      	adds	r2, r1, r3
 8009762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009764:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 8009766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800976a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800976e:	4413      	add	r3, r2
 8009770:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 8009772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009776:	fbb1 f3f2 	udiv	r3, r1, r2
 800977a:	fb02 f303 	mul.w	r3, r2, r3
 800977e:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 8009780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009782:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 8009784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 8009788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800978a:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800978c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800978e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009792:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 8009794:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800979c:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 80097a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 80097aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097b2:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 80097b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ba:	4413      	add	r3, r2
 80097bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 80097c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 80097c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 80097c8:	429a      	cmp	r2, r3
 80097ca:	f0c0 80a3 	bcc.w	8009914 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 80097ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d11a      	bne.n	800980c <_fx_file_read+0x3dc>
 80097d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80097dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80097de:	2000      	movs	r0, #0
 80097e0:	64b9      	str	r1, [r7, #72]	; 0x48
 80097e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80097e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80097e8:	4621      	mov	r1, r4
 80097ea:	1851      	adds	r1, r2, r1
 80097ec:	6439      	str	r1, [r7, #64]	; 0x40
 80097ee:	4629      	mov	r1, r5
 80097f0:	414b      	adcs	r3, r1
 80097f2:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 80097f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 80097fa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80097fe:	4621      	mov	r1, r4
 8009800:	4291      	cmp	r1, r2
 8009802:	4629      	mov	r1, r5
 8009804:	eb71 0303 	sbcs.w	r3, r1, r3
 8009808:	f080 808a 	bcs.w	8009920 <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800980c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009814:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 8009816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800981a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800981c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800981e:	429a      	cmp	r2, r3
 8009820:	d368      	bcc.n	80098f4 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 8009822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009824:	6a19      	ldr	r1, [r3, #32]
 8009826:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800982a:	461a      	mov	r2, r3
 800982c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800982e:	f002 fd7d 	bl	800c32c <_fx_utility_FAT_entry_read>
 8009832:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 8009834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10a      	bne.n	8009850 <_fx_file_read+0x420>
 800983a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800983c:	2b01      	cmp	r3, #1
 800983e:	d907      	bls.n	8009850 <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 8009840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009842:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009846:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800984a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800984c:	429a      	cmp	r2, r3
 800984e:	d20c      	bcs.n	800986a <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 8009850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009852:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009856:	4618      	mov	r0, r3
 8009858:	f006 f9ce 	bl	800fbf8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800985c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <_fx_file_read+0x436>
                        {
                            return(status);
 8009862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009864:	e081      	b.n	800996a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 8009866:	2308      	movs	r3, #8
 8009868:	e07f      	b.n	800996a <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800986a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800986c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986e:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 8009870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009878:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800987a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800987c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987e:	2200      	movs	r2, #0
 8009880:	63bb      	str	r3, [r7, #56]	; 0x38
 8009882:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 8009884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009886:	2200      	movs	r2, #0
 8009888:	633b      	str	r3, [r7, #48]	; 0x30
 800988a:	637a      	str	r2, [r7, #52]	; 0x34
 800988c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009890:	460b      	mov	r3, r1
 8009892:	3b02      	subs	r3, #2
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28
 8009896:	4613      	mov	r3, r2
 8009898:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800989c:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800989e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a2:	2200      	movs	r2, #0
 80098a4:	623b      	str	r3, [r7, #32]
 80098a6:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 80098a8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80098ac:	462b      	mov	r3, r5
 80098ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80098b2:	4642      	mov	r2, r8
 80098b4:	fb02 f203 	mul.w	r2, r2, r3
 80098b8:	464b      	mov	r3, r9
 80098ba:	4621      	mov	r1, r4
 80098bc:	fb01 f303 	mul.w	r3, r1, r3
 80098c0:	4413      	add	r3, r2
 80098c2:	4622      	mov	r2, r4
 80098c4:	4641      	mov	r1, r8
 80098c6:	fba2 ab01 	umull	sl, fp, r2, r1
 80098ca:	445b      	add	r3, fp
 80098cc:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 80098ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80098d2:	460b      	mov	r3, r1
 80098d4:	eb13 030a 	adds.w	r3, r3, sl
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	4613      	mov	r3, r2
 80098dc:	eb43 030b 	adc.w	r3, r3, fp
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80098e8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 80098ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098ee:	2300      	movs	r3, #0
 80098f0:	6393      	str	r3, [r2, #56]	; 0x38
 80098f2:	e00c      	b.n	800990e <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 80098f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80098fa:	1c51      	adds	r1, r2, #1
 80098fc:	6139      	str	r1, [r7, #16]
 80098fe:	f143 0300 	adc.w	r3, r3, #0
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009906:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800990a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800990e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009910:	2300      	movs	r3, #0
 8009912:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 8009914:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009918:	2b00      	cmp	r3, #0
 800991a:	f47f adf0 	bne.w	80094fe <_fx_file_read+0xce>
 800991e:	e000      	b.n	8009922 <_fx_file_read+0x4f2>
                break;
 8009920:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 8009922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009924:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009928:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800992a:	2000      	movs	r0, #0
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009934:	4621      	mov	r1, r4
 8009936:	1851      	adds	r1, r2, r1
 8009938:	6039      	str	r1, [r7, #0]
 800993a:	4629      	mov	r1, r5
 800993c:	eb43 0101 	adc.w	r1, r3, r1
 8009940:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 8009942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009944:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009948:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800994c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800994e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009950:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 8009952:	4b08      	ldr	r3, [pc, #32]	; (8009974 <_fx_file_read+0x544>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800995c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800995e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009962:	4618      	mov	r0, r3
 8009964:	f006 f948 	bl	800fbf8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3798      	adds	r7, #152	; 0x98
 800996e:	46bd      	mov	sp, r7
 8009970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009974:	20004018 	.word	0x20004018

08009978 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	2000      	movs	r0, #0
 8009986:	460a      	mov	r2, r1
 8009988:	4603      	mov	r3, r0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7fe fd9e 	bl	80084cc <_fx_file_extended_seek>
 8009990:	4603      	mov	r3, r0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800999c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099a0:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80099a4:	af04      	add	r7, sp, #16
 80099a6:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 80099aa:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80099ae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 80099b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	4bd9      	ldr	r3, [pc, #868]	; (8009d20 <_fx_file_write+0x384>)
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d002      	beq.n	80099c4 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 80099be:	2307      	movs	r3, #7
 80099c0:	f000 bf26 	b.w	800a810 <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 80099c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80099c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 80099ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80099d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80099dc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 80099e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80099e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80099e8:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80099ec:	2000      	movs	r0, #0
 80099ee:	460c      	mov	r4, r1
 80099f0:	4605      	mov	r5, r0
 80099f2:	eb12 0804 	adds.w	r8, r2, r4
 80099f6:	eb43 0905 	adc.w	r9, r3, r5
 80099fa:	f1b9 0f01 	cmp.w	r9, #1
 80099fe:	d302      	bcc.n	8009a06 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 8009a00:	230a      	movs	r3, #10
 8009a02:	f000 bf05 	b.w	800a810 <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 8009a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	4bc5      	ldr	r3, [pc, #788]	; (8009d24 <_fx_file_write+0x388>)
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d002      	beq.n	8009a18 <_fx_file_write+0x7c>
 8009a12:	2311      	movs	r3, #17
 8009a14:	f000 befc 	b.w	800a810 <_fx_file_write+0xe74>
 8009a18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a1c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009a24:	4618      	mov	r0, r3
 8009a26:	f005 fe61 	bl	800f6ec <_tx_mutex_get>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <_fx_file_write+0x9a>
 8009a30:	2311      	movs	r3, #17
 8009a32:	f000 beed 	b.w	800a810 <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 8009a36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d009      	beq.n	8009a56 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8009a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a46:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f006 f8d4 	bl	800fbf8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 8009a50:	2323      	movs	r3, #35	; 0x23
 8009a52:	f000 bedd 	b.w	800a810 <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 8009a56:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d009      	beq.n	8009a74 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 8009a60:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a64:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f006 f8c5 	bl	800fbf8 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 8009a6e:	2306      	movs	r3, #6
 8009a70:	f000 bece 	b.w	800a810 <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009a74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8009a7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 8009a88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d109      	bne.n	8009aa4 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 8009a90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009a94:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f006 f8ad 	bl	800fbf8 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	f000 beb6 	b.w	800a810 <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 8009aaa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009aae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8009ab2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009ab6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009aba:	ebb0 0a02 	subs.w	sl, r0, r2
 8009abe:	eb61 0b03 	sbc.w	fp, r1, r3
 8009ac2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8009acc:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8009ad0:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	459a      	cmp	sl, r3
 8009ad8:	4613      	mov	r3, r2
 8009ada:	eb7b 0303 	sbcs.w	r3, fp, r3
 8009ade:	f080 82a9 	bcs.w	800a034 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8009ae2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8009ae6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8009aea:	4413      	add	r3, r2
 8009aec:	3b01      	subs	r3, #1
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009af4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8009af8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009afc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8009b00:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009b04:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8009b08:	1a84      	subs	r4, r0, r2
 8009b0a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8009b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8009b12:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009b16:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8009b1a:	4623      	mov	r3, r4
 8009b1c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8009b20:	4602      	mov	r2, r0
 8009b22:	189b      	adds	r3, r3, r2
 8009b24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009b28:	460b      	mov	r3, r1
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	eb42 0303 	adc.w	r3, r2, r3
 8009b30:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 8009b34:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009b3e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8009b42:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8009b46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009b4a:	f7f6 fc75 	bl	8000438 <__aeabi_uldivmod>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 8009b52:	4613      	mov	r3, r2
 8009b54:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 8009b58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009b5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d909      	bls.n	8009b7a <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 8009b66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009b6a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f006 f842 	bl	800fbf8 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 8009b74:	230a      	movs	r3, #10
 8009b76:	f000 be4b 	b.w	800a810 <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 8009b7a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009b84:	441a      	add	r2, r3
 8009b86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009b8a:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 8009b8c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009b90:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8009b94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009b9e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009ba2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009bac:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8009bb0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8009bb4:	464b      	mov	r3, r9
 8009bb6:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 8009bba:	4652      	mov	r2, sl
 8009bbc:	fb02 f203 	mul.w	r2, r2, r3
 8009bc0:	465b      	mov	r3, fp
 8009bc2:	4644      	mov	r4, r8
 8009bc4:	fb04 f303 	mul.w	r3, r4, r3
 8009bc8:	4413      	add	r3, r2
 8009bca:	4642      	mov	r2, r8
 8009bcc:	4654      	mov	r4, sl
 8009bce:	fba2 4204 	umull	r4, r2, r2, r4
 8009bd2:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8009bdc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009be0:	4413      	add	r3, r2
 8009be2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8009be6:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8009bea:	4623      	mov	r3, r4
 8009bec:	18c3      	adds	r3, r0, r3
 8009bee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	eb41 0303 	adc.w	r3, r1, r3
 8009bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009bfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d308      	bcc.n	8009c16 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 8009c04:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8009c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c0c:	f04f 0300 	mov.w	r3, #0
 8009c10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8009c14:	e03d      	b.n	8009c92 <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 8009c16:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009c1a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8009c1e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c28:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009c2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009c36:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8009c3a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009c3e:	464b      	mov	r3, r9
 8009c40:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 8009c44:	4652      	mov	r2, sl
 8009c46:	fb02 f203 	mul.w	r2, r2, r3
 8009c4a:	465b      	mov	r3, fp
 8009c4c:	4644      	mov	r4, r8
 8009c4e:	fb04 f303 	mul.w	r3, r4, r3
 8009c52:	4413      	add	r3, r2
 8009c54:	4642      	mov	r2, r8
 8009c56:	4654      	mov	r4, sl
 8009c58:	fba2 4204 	umull	r4, r2, r2, r4
 8009c5c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8009c60:	4622      	mov	r2, r4
 8009c62:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8009c66:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009c70:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8009c74:	4623      	mov	r3, r4
 8009c76:	18c3      	adds	r3, r0, r3
 8009c78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	eb41 0303 	adc.w	r3, r1, r3
 8009c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 8009c86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009c8a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009c8e:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 8009c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009c96:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009c98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009c9c:	1ad2      	subs	r2, r2, r3
 8009c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009ca2:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 8009ca4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 8009cae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 8009cb8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cc0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 8009cc4:	e16f      	b.n	8009fa6 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 8009cc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 8009cd0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 8009cd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009cdc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f005 ff89 	bl	800fbf8 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 8009ce6:	230a      	movs	r3, #10
 8009ce8:	f000 bd92 	b.w	800a810 <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 8009cec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8009cf6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8009cfa:	f002 fb17 	bl	800c32c <_fx_utility_FAT_entry_read>
 8009cfe:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 8009d02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00e      	beq.n	8009d28 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 8009d0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009d0e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009d12:	4618      	mov	r0, r3
 8009d14:	f005 ff70 	bl	800fbf8 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 8009d18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8009d1c:	f000 bd78 	b.w	800a810 <_fx_file_write+0xe74>
 8009d20:	46494c45 	.word	0x46494c45
 8009d24:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 8009d28:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 8009d32:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d116      	bne.n	8009d68 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 8009d3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8009d48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009d4c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009d50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	3302      	adds	r3, #2
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d316      	bcc.n	8009d8a <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8009d5c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8009d60:	2302      	movs	r3, #2
 8009d62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 8009d66:	e010      	b.n	8009d8a <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 8009d68:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 8009d72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d78:	1c9a      	adds	r2, r3, #2
 8009d7a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d3a6      	bcc.n	8009cd0 <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 8009d82:	2302      	movs	r3, #2
 8009d84:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 8009d88:	e7a2      	b.n	8009cd0 <_fx_file_write+0x334>
                        break;
 8009d8a:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 8009d8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 8009d94:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009d98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 8009d9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 808f 	beq.w	8009ec4 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 8009da6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009daa:	69da      	ldr	r2, [r3, #28]
 8009dac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d009      	beq.n	8009dc8 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 8009db4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8009db8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8009dbc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8009dc0:	f002 fcdd 	bl	800c77e <_fx_utility_FAT_entry_write>
 8009dc4:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 8009dc8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00a      	beq.n	8009de6 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 8009dd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009dd4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f005 ff0d 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 8009dde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8009de2:	f000 bd15 	b.w	800a810 <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 8009de6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8009dec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df2:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 8009df4:	429a      	cmp	r2, r3
 8009df6:	f0c0 80cc 	bcc.w	8009f92 <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 8009dfa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 8009e00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 8009e06:	429a      	cmp	r2, r3
 8009e08:	f0c0 80c3 	bcc.w	8009f92 <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8009e0c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009e10:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009e14:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 8009e16:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009e22:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 8009e24:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009e28:	2300      	movs	r3, #0
 8009e2a:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009e2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e38:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8009e3c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009e40:	3b02      	subs	r3, #2
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e48:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009e4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e58:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8009e5c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8009e60:	462b      	mov	r3, r5
 8009e62:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8009e66:	4642      	mov	r2, r8
 8009e68:	fb02 f203 	mul.w	r2, r2, r3
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	4621      	mov	r1, r4
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	4413      	add	r3, r2
 8009e76:	4622      	mov	r2, r4
 8009e78:	4641      	mov	r1, r8
 8009e7a:	fba2 1201 	umull	r1, r2, r2, r1
 8009e7e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8009e82:	460a      	mov	r2, r1
 8009e84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8009e88:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009e92:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8009e96:	4623      	mov	r3, r4
 8009e98:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	189b      	adds	r3, r3, r2
 8009ea0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	460a      	mov	r2, r1
 8009ea8:	4153      	adcs	r3, r2
 8009eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009eae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009eb2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009eb6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 8009eba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ec2:	e066      	b.n	8009f92 <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 8009ec4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009ec8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009ecc:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 8009ece:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009ed2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009ed6:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 8009ed8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009edc:	2300      	movs	r3, #0
 8009ede:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009ee0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009eec:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8009ef0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009ef4:	3b02      	subs	r3, #2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009efc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009f00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 8009f10:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8009f14:	462b      	mov	r3, r5
 8009f16:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f1a:	4642      	mov	r2, r8
 8009f1c:	fb02 f203 	mul.w	r2, r2, r3
 8009f20:	464b      	mov	r3, r9
 8009f22:	4621      	mov	r1, r4
 8009f24:	fb01 f303 	mul.w	r3, r1, r3
 8009f28:	4413      	add	r3, r2
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	fba2 1201 	umull	r1, r2, r2, r1
 8009f32:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8009f36:	460a      	mov	r2, r1
 8009f38:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8009f3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009f40:	4413      	add	r3, r2
 8009f42:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009f46:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8009f4a:	4623      	mov	r3, r4
 8009f4c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8009f50:	4602      	mov	r2, r0
 8009f52:	189b      	adds	r3, r3, r2
 8009f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f58:	462b      	mov	r3, r5
 8009f5a:	460a      	mov	r2, r1
 8009f5c:	4153      	adcs	r3, r2
 8009f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f62:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009f66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009f6a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 8009f6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009f72:	2300      	movs	r3, #0
 8009f74:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 8009f76:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8009f7a:	f04f 0200 	mov.w	r2, #0
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 8009f86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009f8a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009f8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 8009f92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009f96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 8009f9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 8009fa6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f47f ae8b 	bne.w	8009cc6 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 8009fb0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009fb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009fb8:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8009fc2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8009fc6:	f002 fbda 	bl	800c77e <_fx_utility_FAT_entry_write>
 8009fca:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 8009fce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 8009fd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8009fda:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f005 fe0a 	bl	800fbf8 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 8009fe4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8009fe8:	f000 bc12 	b.w	800a810 <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 8009fec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d019      	beq.n	800a02a <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 8009ff6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800a000:	4619      	mov	r1, r3
 800a002:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800a006:	f002 fbba 	bl	800c77e <_fx_utility_FAT_entry_write>
 800a00a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800a00e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800a016:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a01a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a01e:	4618      	mov	r0, r3
 800a020:	f005 fdea 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800a024:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a028:	e3f2      	b.n	800a810 <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800a02a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800a02e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800a032:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800a034:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800a03a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800a040:	429a      	cmp	r2, r3
 800a042:	d31b      	bcc.n	800a07c <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800a044:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a048:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a04c:	1c51      	adds	r1, r2, #1
 800a04e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800a052:	f143 0300 	adc.w	r3, r3, #0
 800a056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a05a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a05e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a062:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800a066:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a072:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800a074:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800a078:	2300      	movs	r3, #0
 800a07a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800a07c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800a080:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800a084:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a088:	2200      	movs	r2, #0
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	617a      	str	r2, [r7, #20]
 800a08e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a092:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800a096:	e290      	b.n	800a5ba <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800a098:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d111      	bne.n	800a0c6 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800a0a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0ae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800a0b2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800a0b6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	428a      	cmp	r2, r1
 800a0be:	4629      	mov	r1, r5
 800a0c0:	418b      	sbcs	r3, r1
 800a0c2:	f080 8096 	bcs.w	800a1f2 <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800a0c6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a0ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800a0ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a0d2:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	9302      	str	r3, [sp, #8]
 800a0d8:	2301      	movs	r3, #1
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	9200      	str	r2, [sp, #0]
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800a0e6:	f003 fd2f 	bl	800db48 <_fx_utility_logical_sector_read>
 800a0ea:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800a0ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800a0f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a0fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a0fe:	4618      	mov	r0, r3
 800a100:	f005 fd7a 	bl	800fbf8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800a104:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a108:	e382      	b.n	800a810 <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800a10a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a10e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800a110:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800a11c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a120:	2200      	movs	r2, #0
 800a122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a126:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800a12a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800a12e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800a132:	4621      	mov	r1, r4
 800a134:	428a      	cmp	r2, r1
 800a136:	4629      	mov	r1, r5
 800a138:	418b      	sbcs	r3, r1
 800a13a:	d203      	bcs.n	800a144 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800a13c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800a140:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800a144:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a148:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800a14a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800a150:	4413      	add	r3, r2
 800a152:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800a156:	4619      	mov	r1, r3
 800a158:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800a15c:	f004 f8f0 	bl	800e340 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800a160:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a164:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800a168:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a16c:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800a16e:	2304      	movs	r3, #4
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	2301      	movs	r3, #1
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	9200      	str	r2, [sp, #0]
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800a180:	f003 ff76 	bl	800e070 <_fx_utility_logical_sector_write>
 800a184:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800a188:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800a190:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a194:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a198:	4618      	mov	r0, r3
 800a19a:	f005 fd2d 	bl	800fbf8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800a19e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a1a2:	e335      	b.n	800a810 <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800a1a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a1a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1aa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a1ae:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800a1b0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a1b4:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800a1b6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a1c4:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800a1c8:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	1a51      	subs	r1, r2, r1
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	eb63 0301 	sbc.w	r3, r3, r1
 800a1d8:	60fb      	str	r3, [r7, #12]
 800a1da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a1de:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800a1e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800a1e6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a1f0:	e10d      	b.n	800a40e <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800a1f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a202:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800a206:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800a20a:	f7f6 f915 	bl	8000438 <__aeabi_uldivmod>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4613      	mov	r3, r2
 800a214:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800a218:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a222:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a226:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800a22a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a22e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800a230:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800a23c:	e03f      	b.n	800a2be <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a23e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800a242:	461a      	mov	r2, r3
 800a244:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800a248:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800a24c:	f002 f86e 	bl	800c32c <_fx_utility_FAT_entry_read>
 800a250:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800a254:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10d      	bne.n	800a278 <_fx_file_write+0x8dc>
 800a25c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a260:	2b01      	cmp	r3, #1
 800a262:	d909      	bls.n	800a278 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800a264:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a268:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a26c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800a270:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800a274:	429a      	cmp	r2, r3
 800a276:	d20f      	bcs.n	800a298 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800a278:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a27c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a280:	4618      	mov	r0, r3
 800a282:	f005 fcb9 	bl	800fbf8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800a286:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800a28e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a292:	e2bd      	b.n	800a810 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800a294:	2308      	movs	r3, #8
 800a296:	e2bb      	b.n	800a810 <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800a298:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d112      	bne.n	800a2cc <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800a2a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a2aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800a2ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a2b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2b4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800a2be:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800a2c2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d3b9      	bcc.n	800a23e <_fx_file_write+0x8a2>
 800a2ca:	e000      	b.n	800a2ce <_fx_file_write+0x932>
                        break;
 800a2cc:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800a2ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800a2d2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d203      	bcs.n	800a2e2 <_fx_file_write+0x946>
            {
                sectors = i;
 800a2da:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800a2de:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800a2e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a2e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800a2ea:	2304      	movs	r3, #4
 800a2ec:	9302      	str	r3, [sp, #8]
 800a2ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800a302:	f003 feb5 	bl	800e070 <_fx_utility_logical_sector_write>
 800a306:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800a30a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d009      	beq.n	800a326 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800a312:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a316:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a31a:	4618      	mov	r0, r3
 800a31c:	f005 fc6c 	bl	800fbf8 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800a320:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a324:	e274      	b.n	800a810 <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800a326:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a32a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800a32e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a332:	3b01      	subs	r3, #1
 800a334:	2200      	movs	r2, #0
 800a336:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a33a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800a33e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800a342:	4623      	mov	r3, r4
 800a344:	18c3      	adds	r3, r0, r3
 800a346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a34a:	462b      	mov	r3, r5
 800a34c:	eb41 0303 	adc.w	r3, r1, r3
 800a350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800a354:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a358:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a35c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800a360:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a364:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800a366:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a370:	4413      	add	r3, r2
 800a372:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800a374:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800a37a:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800a37e:	18ca      	adds	r2, r1, r3
 800a380:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a384:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800a386:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a390:	4413      	add	r3, r2
 800a392:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800a394:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800a39a:	fbb1 f3f2 	udiv	r3, r1, r2
 800a39e:	fb02 f303 	mul.w	r3, r2, r3
 800a3a2:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800a3a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800a3aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a3ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800a3b0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800a3b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800a3ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800a3be:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800a3c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a3c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3c6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a3ca:	fb02 f303 	mul.w	r3, r2, r3
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800a3d8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800a3dc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	1a51      	subs	r1, r2, r1
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	eb63 0301 	sbc.w	r3, r3, r1
 800a3ec:	607b      	str	r3, [r7, #4]
 800a3ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a3f2:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800a3f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a3fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3fc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800a400:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800a404:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800a408:	4413      	add	r3, r2
 800a40a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800a40e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800a414:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800a41a:	429a      	cmp	r2, r3
 800a41c:	f0c0 80cd 	bcc.w	800a5ba <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800a420:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800a424:	4313      	orrs	r3, r2
 800a426:	d11f      	bne.n	800a468 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800a428:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a42c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a430:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800a434:	2000      	movs	r0, #0
 800a436:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a43a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800a43e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800a442:	4621      	mov	r1, r4
 800a444:	1851      	adds	r1, r2, r1
 800a446:	67b9      	str	r1, [r7, #120]	; 0x78
 800a448:	4629      	mov	r1, r5
 800a44a:	414b      	adcs	r3, r1
 800a44c:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800a44e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a452:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800a456:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a45a:	4621      	mov	r1, r4
 800a45c:	4291      	cmp	r1, r2
 800a45e:	4629      	mov	r1, r5
 800a460:	eb71 0303 	sbcs.w	r3, r1, r3
 800a464:	f080 80af 	bcs.w	800a5c6 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800a468:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a474:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800a476:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800a47c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800a482:	429a      	cmp	r2, r3
 800a484:	f0c0 8086 	bcc.w	800a594 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800a488:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a48c:	6a19      	ldr	r1, [r3, #32]
 800a48e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800a492:	461a      	mov	r2, r3
 800a494:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800a498:	f001 ff48 	bl	800c32c <_fx_utility_FAT_entry_read>
 800a49c:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800a4a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10d      	bne.n	800a4c4 <_fx_file_write+0xb28>
 800a4a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d909      	bls.n	800a4c4 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800a4b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a4b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a4b8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800a4bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d20f      	bcs.n	800a4e4 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800a4c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a4c8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f005 fb93 	bl	800fbf8 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800a4d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <_fx_file_write+0xb44>
                        {
                            return(status);
 800a4da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a4de:	e197      	b.n	800a810 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	e195      	b.n	800a810 <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800a4e4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800a4e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a4ec:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800a4ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a4fa:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a4fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a502:	2200      	movs	r2, #0
 800a504:	673b      	str	r3, [r7, #112]	; 0x70
 800a506:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800a508:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a50c:	2200      	movs	r2, #0
 800a50e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a510:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a512:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a516:	460b      	mov	r3, r1
 800a518:	3b02      	subs	r3, #2
 800a51a:	663b      	str	r3, [r7, #96]	; 0x60
 800a51c:	4613      	mov	r3, r2
 800a51e:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800a522:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a524:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52a:	2200      	movs	r2, #0
 800a52c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a52e:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800a530:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a534:	462b      	mov	r3, r5
 800a536:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800a53a:	4642      	mov	r2, r8
 800a53c:	fb02 f203 	mul.w	r2, r2, r3
 800a540:	464b      	mov	r3, r9
 800a542:	4621      	mov	r1, r4
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	4413      	add	r3, r2
 800a54a:	4622      	mov	r2, r4
 800a54c:	4641      	mov	r1, r8
 800a54e:	fba2 1201 	umull	r1, r2, r2, r1
 800a552:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800a556:	460a      	mov	r2, r1
 800a558:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800a55c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800a560:	4413      	add	r3, r2
 800a562:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a566:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800a56a:	4623      	mov	r3, r4
 800a56c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800a570:	4602      	mov	r2, r0
 800a572:	189b      	adds	r3, r3, r2
 800a574:	653b      	str	r3, [r7, #80]	; 0x50
 800a576:	462b      	mov	r3, r5
 800a578:	460a      	mov	r2, r1
 800a57a:	4153      	adcs	r3, r2
 800a57c:	657b      	str	r3, [r7, #84]	; 0x54
 800a57e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a582:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a586:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800a58a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800a58e:	2300      	movs	r3, #0
 800a590:	6393      	str	r3, [r2, #56]	; 0x38
 800a592:	e00e      	b.n	800a5b2 <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800a594:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a598:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a59c:	1c51      	adds	r1, r2, #1
 800a59e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a5a0:	f143 0300 	adc.w	r3, r3, #0
 800a5a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a5aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a5ae:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800a5b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800a5ba:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	f47f ad6a 	bne.w	800a098 <_fx_file_write+0x6fc>
 800a5c4:	e000      	b.n	800a5c8 <_fx_file_write+0xc2c>
                break;
 800a5c6:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800a5c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a5cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a5d0:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	6439      	str	r1, [r7, #64]	; 0x40
 800a5d8:	6478      	str	r0, [r7, #68]	; 0x44
 800a5da:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800a5de:	4621      	mov	r1, r4
 800a5e0:	1851      	adds	r1, r2, r1
 800a5e2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	eb43 0101 	adc.w	r1, r3, r1
 800a5ea:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800a5ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a5f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a5f4:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800a5f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a5fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800a600:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800a604:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800a608:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a60c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800a610:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800a614:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800a618:	4290      	cmp	r0, r2
 800a61a:	eb71 0303 	sbcs.w	r3, r1, r3
 800a61e:	f080 80de 	bcs.w	800a7de <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800a622:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a626:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a62a:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800a62e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800a632:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a636:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a63a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800a63e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a642:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a646:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800a64a:	e0c3      	b.n	800a7d4 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800a64c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800a650:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a654:	429a      	cmp	r2, r3
 800a656:	f000 80b3 	beq.w	800a7c0 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800a65a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a65e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800a662:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a666:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800a66a:	4299      	cmp	r1, r3
 800a66c:	bf08      	it	eq
 800a66e:	4290      	cmpeq	r0, r2
 800a670:	f040 80a6 	bne.w	800a7c0 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800a674:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a678:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800a67c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800a684:	429a      	cmp	r2, r3
 800a686:	f040 809b 	bne.w	800a7c0 <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800a68a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a68e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a692:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800a696:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800a69a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a69e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a6a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a6a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800a6aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a6ae:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800a6b2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800a6b6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800a6ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a6be:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800a6c2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800a6c6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800a6ca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a6ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a6d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a6d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800a6da:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a6e4:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800a6e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a6ea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800a6ee:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800a6f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800a6f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d15f      	bne.n	800a7c0 <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800a700:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a70a:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800a70c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a710:	695a      	ldr	r2, [r3, #20]
 800a712:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a716:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800a718:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a71c:	2200      	movs	r2, #0
 800a71e:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a720:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a726:	2200      	movs	r2, #0
 800a728:	633b      	str	r3, [r7, #48]	; 0x30
 800a72a:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800a72c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	3b02      	subs	r3, #2
 800a734:	2200      	movs	r2, #0
 800a736:	62bb      	str	r3, [r7, #40]	; 0x28
 800a738:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a73a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a73e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a740:	2200      	movs	r2, #0
 800a742:	623b      	str	r3, [r7, #32]
 800a744:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800a746:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800a74a:	462b      	mov	r3, r5
 800a74c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a750:	4642      	mov	r2, r8
 800a752:	fb02 f203 	mul.w	r2, r2, r3
 800a756:	464b      	mov	r3, r9
 800a758:	4621      	mov	r1, r4
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	4413      	add	r3, r2
 800a760:	4622      	mov	r2, r4
 800a762:	4641      	mov	r1, r8
 800a764:	fba2 1201 	umull	r1, r2, r2, r1
 800a768:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800a76c:	460a      	mov	r2, r1
 800a76e:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800a772:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800a776:	4413      	add	r3, r2
 800a778:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a77c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a780:	4623      	mov	r3, r4
 800a782:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800a786:	4602      	mov	r2, r0
 800a788:	189b      	adds	r3, r3, r2
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	462b      	mov	r3, r5
 800a78e:	460a      	mov	r2, r1
 800a790:	4153      	adcs	r3, r2
 800a792:	61fb      	str	r3, [r7, #28]
 800a794:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a798:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a79c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 800a7a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 800a7a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 800a7b0:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800a7b4:	f04f 0200 	mov.w	r2, #0
 800a7b8:	f04f 0300 	mov.w	r3, #0
 800a7bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800a7c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800a7c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 800a7ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 800a7d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f47f af37 	bne.w	800a64c <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 800a7de:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 800a7e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a7ea:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d006      	beq.n	800a800 <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 800a7f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a7f6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800a7fa:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800a7fe:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800a800:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a804:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a808:	4618      	mov	r0, r3
 800a80a:	f005 f9f5 	bl	800fbf8 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800a816:	46bd      	mov	sp, r7
 800a818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a81c <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a3f      	ldr	r2, [pc, #252]	; (800a934 <_fx_media_abort+0x118>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d001      	beq.n	800a840 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800a83c:	2311      	movs	r3, #17
 800a83e:	e074      	b.n	800a92a <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a3b      	ldr	r2, [pc, #236]	; (800a934 <_fx_media_abort+0x118>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d001      	beq.n	800a84e <_fx_media_abort+0x32>
 800a84a:	2311      	movs	r3, #17
 800a84c:	e06d      	b.n	800a92a <_fx_media_abort+0x10e>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a858:	4618      	mov	r0, r3
 800a85a:	f004 ff47 	bl	800f6ec <_tx_mutex_get>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <_fx_media_abort+0x4c>
 800a864:	2311      	movs	r3, #17
 800a866:	e060      	b.n	800a92a <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a86e:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a876:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800a878:	e008      	b.n	800a88c <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	4a2e      	ldr	r2, [pc, #184]	; (800a938 <_fx_media_abort+0x11c>)
 800a87e:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a884:	61bb      	str	r3, [r7, #24]
        open_count--;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	3b01      	subs	r3, #1
 800a88a:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f3      	bne.n	800a87a <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2203      	movs	r2, #3
 800a896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2290      	movs	r2, #144	; 0x90
 800a89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b0:	613b      	str	r3, [r7, #16]
    return(posture);
 800a8b2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a8b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8b6:	b672      	cpsid	i
    return(int_posture);
 800a8b8:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800a8ba:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800a8bc:	4b1f      	ldr	r3, [pc, #124]	; (800a93c <_fx_media_abort+0x120>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d103      	bne.n	800a8cc <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800a8c4:	4b1e      	ldr	r3, [pc, #120]	; (800a940 <_fx_media_abort+0x124>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	e019      	b.n	800a900 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800a8d8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800a8e8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800a8ec:	4b14      	ldr	r3, [pc, #80]	; (800a940 <_fx_media_abort+0x124>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d104      	bne.n	800a900 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a8fc:	4a10      	ldr	r2, [pc, #64]	; (800a940 <_fx_media_abort+0x124>)
 800a8fe:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800a900:	4b0e      	ldr	r3, [pc, #56]	; (800a93c <_fx_media_abort+0x120>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3b01      	subs	r3, #1
 800a906:	4a0d      	ldr	r2, [pc, #52]	; (800a93c <_fx_media_abort+0x120>)
 800a908:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a0d      	ldr	r2, [pc, #52]	; (800a944 <_fx_media_abort+0x128>)
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	f383 8810 	msr	PRIMASK, r3
}
 800a91a:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a922:	4618      	mov	r0, r3
 800a924:	f004 fe38 	bl	800f598 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3720      	adds	r7, #32
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	4d454449 	.word	0x4d454449
 800a938:	46494c41 	.word	0x46494c41
 800a93c:	20004014 	.word	0x20004014
 800a940:	20004010 	.word	0x20004010
 800a944:	4d454441 	.word	0x4d454441

0800a948 <_fx_media_boot_info_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800a948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a958:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	330b      	adds	r3, #11
 800a95e:	4618      	mov	r0, r3
 800a960:	f001 fc7e 	bl	800c260 <_fx_utility_16_unsigned_read>
 800a964:	4602      	mov	r2, r0
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800a972:	2302      	movs	r3, #2
 800a974:	e08c      	b.n	800aa90 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3318      	adds	r3, #24
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 fc70 	bl	800c260 <_fx_utility_16_unsigned_read>
 800a980:	4602      	mov	r2, r0
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	331a      	adds	r3, #26
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 fc68 	bl	800c260 <_fx_utility_16_unsigned_read>
 800a990:	4602      	mov	r2, r0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3313      	adds	r3, #19
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 fc60 	bl	800c260 <_fx_utility_16_unsigned_read>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4698      	mov	r8, r3
 800a9a6:	4691      	mov	r9, r2
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	d10b      	bne.n	800a9d0 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3320      	adds	r3, #32
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 fc77 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	461c      	mov	r4, r3
 800a9c8:	4615      	mov	r5, r2
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	d101      	bne.n	800a9de <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800a9da:	2302      	movs	r3, #2
 800a9dc:	e058      	b.n	800aa90 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	330e      	adds	r3, #14
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fc3c 	bl	800c260 <_fx_utility_16_unsigned_read>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e04a      	b.n	800aa90 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	330d      	adds	r3, #13
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800aa0e:	2302      	movs	r3, #2
 800aa10:	e03e      	b.n	800aa90 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3316      	adds	r3, #22
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 fc22 	bl	800c260 <_fx_utility_16_unsigned_read>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d107      	bne.n	800aa3a <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3324      	adds	r3, #36	; 0x24
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f001 fc3e 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800aa34:	4602      	mov	r2, r0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800aa42:	2302      	movs	r3, #2
 800aa44:	e024      	b.n	800aa90 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3310      	adds	r3, #16
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e018      	b.n	800aa90 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	331c      	adds	r3, #28
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 fc24 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3311      	adds	r3, #17
 800aa72:	4618      	mov	r0, r3
 800aa74:	f001 fbf4 	bl	800c260 <_fx_utility_16_unsigned_read>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	332c      	adds	r3, #44	; 0x2c
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 fc14 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800aa9c <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b092      	sub	sp, #72	; 0x48
 800aaa0:	af04      	add	r7, sp, #16
 800aaa2:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4aa6      	ldr	r2, [pc, #664]	; (800ad44 <_fx_media_close+0x2a8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d001      	beq.n	800aab2 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800aaae:	2311      	movs	r3, #17
 800aab0:	e1c2      	b.n	800ae38 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4aa3      	ldr	r2, [pc, #652]	; (800ad44 <_fx_media_close+0x2a8>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d001      	beq.n	800aac0 <_fx_media_close+0x24>
 800aabc:	2311      	movs	r3, #17
 800aabe:	e1bb      	b.n	800ae38 <_fx_media_close+0x39c>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800aac6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aaca:	4618      	mov	r0, r3
 800aacc:	f004 fe0e 	bl	800f6ec <_tx_mutex_get>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <_fx_media_close+0x3e>
 800aad6:	2311      	movs	r3, #17
 800aad8:	e1ae      	b.n	800ae38 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800aae0:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800aae8:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800aaea:	e046      	b.n	800ab7a <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d139      	bne.n	800ab68 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf6:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d035      	beq.n	800ab68 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aafc:	f3ef 8310 	mrs	r3, PRIMASK
 800ab00:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab02:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab04:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab06:	b672      	cpsid	i
    return(int_posture);
 800ab08:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800ab0a:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800ab0c:	4b8e      	ldr	r3, [pc, #568]	; (800ad48 <_fx_media_close+0x2ac>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800ab16:	4b8d      	ldr	r3, [pc, #564]	; (800ad4c <_fx_media_close+0x2b0>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f383 8810 	msr	PRIMASK, r3
}
 800ab2a:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800ab32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab34:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	3368      	adds	r3, #104	; 0x68
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7fb fa9a 	bl	8006078 <_fx_directory_entry_write>
 800ab44:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00a      	beq.n	800ab62 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ab52:	4618      	mov	r0, r3
 800ab54:	f005 f850 	bl	800fbf8 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff fe5f 	bl	800a81c <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800ab5e:	2390      	movs	r3, #144	; 0x90
 800ab60:	e16a      	b.n	800ae38 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	2200      	movs	r2, #0
 800ab66:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	4a79      	ldr	r2, [pc, #484]	; (800ad50 <_fx_media_close+0x2b4>)
 800ab6c:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab72:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800ab74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab76:	3b01      	subs	r3, #1
 800ab78:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800ab7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1b5      	bne.n	800aaec <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 fef0 	bl	800c966 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f002 fa3e 	bl	800d008 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ab92:	2100      	movs	r1, #0
 800ab94:	9102      	str	r1, [sp, #8]
 800ab96:	e9cd 2300 	strd	r2, r3, [sp]
 800ab9a:	f04f 0201 	mov.w	r2, #1
 800ab9e:	f04f 0300 	mov.w	r3, #0
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f002 fdba 	bl	800d71c <_fx_utility_logical_sector_flush>
 800aba8:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00a      	beq.n	800abc6 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800abb6:	4618      	mov	r0, r3
 800abb8:	f005 f81e 	bl	800fbf8 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff fe2d 	bl	800a81c <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800abc2:	2390      	movs	r3, #144	; 0x90
 800abc4:	e138      	b.n	800ae38 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 80ca 	beq.w	800ad64 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800abd8:	429a      	cmp	r2, r3
 800abda:	f000 80c3 	beq.w	800ad64 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 80bd 	bne.w	800ad64 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	69d9      	ldr	r1, [r3, #28]
 800abf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abfe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	2200      	movs	r2, #0
 800ac08:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2290      	movs	r2, #144	; 0x90
 800ac16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2203      	movs	r2, #3
 800ac38:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ac64:	4618      	mov	r0, r3
 800ac66:	f004 ffc7 	bl	800fbf8 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff fdd6 	bl	800a81c <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800ac70:	2390      	movs	r3, #144	; 0x90
 800ac72:	e0e1      	b.n	800ae38 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800ac7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac7e:	f001 fb17 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800ac82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	4a33      	ldr	r2, [pc, #204]	; (800ad54 <_fx_media_close+0x2b8>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d16b      	bne.n	800ad64 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 fb0c 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800ac98:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	4a2e      	ldr	r2, [pc, #184]	; (800ad58 <_fx_media_close+0x2bc>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d160      	bne.n	800ad64 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acac:	4619      	mov	r1, r3
 800acae:	4610      	mov	r0, r2
 800acb0:	f001 fb1b 	bl	800c2ea <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acc0:	4619      	mov	r1, r3
 800acc2:	4610      	mov	r0, r2
 800acc4:	f001 fb11 	bl	800c2ea <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2290      	movs	r2, #144	; 0x90
 800acd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2203      	movs	r2, #3
 800acf6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ad08:	1c5a      	adds	r2, r3, #1
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d017      	beq.n	800ad5c <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f004 ff60 	bl	800fbf8 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff fd6f 	bl	800a81c <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800ad3e:	2390      	movs	r3, #144	; 0x90
 800ad40:	e07a      	b.n	800ae38 <_fx_media_close+0x39c>
 800ad42:	bf00      	nop
 800ad44:	4d454449 	.word	0x4d454449
 800ad48:	2000401c 	.word	0x2000401c
 800ad4c:	20004018 	.word	0x20004018
 800ad50:	46494c43 	.word	0x46494c43
 800ad54:	41615252 	.word	0x41615252
 800ad58:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2202      	movs	r2, #2
 800ad76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2290      	movs	r2, #144	; 0x90
 800ad7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2208      	movs	r2, #8
 800ad90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2290      	movs	r2, #144	; 0x90
 800ad98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ada6:	f3ef 8310 	mrs	r3, PRIMASK
 800adaa:	613b      	str	r3, [r7, #16]
    return(posture);
 800adac:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800adae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800adb0:	b672      	cpsid	i
    return(int_posture);
 800adb2:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800adb4:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800adb6:	4b22      	ldr	r3, [pc, #136]	; (800ae40 <_fx_media_close+0x3a4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d103      	bne.n	800adc6 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800adbe:	4b21      	ldr	r3, [pc, #132]	; (800ae44 <_fx_media_close+0x3a8>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e019      	b.n	800adfa <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800add2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800ade2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800ade6:	4b17      	ldr	r3, [pc, #92]	; (800ae44 <_fx_media_close+0x3a8>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	429a      	cmp	r2, r3
 800adee:	d104      	bne.n	800adfa <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800adf6:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <_fx_media_close+0x3a8>)
 800adf8:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800adfa:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <_fx_media_close+0x3a4>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	4a0f      	ldr	r2, [pc, #60]	; (800ae40 <_fx_media_close+0x3a4>)
 800ae02:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a10      	ldr	r2, [pc, #64]	; (800ae48 <_fx_media_close+0x3ac>)
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f383 8810 	msr	PRIMASK, r3
}
 800ae14:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f004 fbbb 	bl	800f598 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3738      	adds	r7, #56	; 0x38
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	20004014 	.word	0x20004014
 800ae44:	20004010 	.word	0x20004010
 800ae48:	4d454443 	.word	0x4d454443

0800ae4c <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b090      	sub	sp, #64	; 0x40
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4aa2      	ldr	r2, [pc, #648]	; (800b0f0 <_fx_media_flush+0x2a4>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d001      	beq.n	800ae70 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800ae6c:	2311      	movs	r3, #17
 800ae6e:	e175      	b.n	800b15c <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a9e      	ldr	r2, [pc, #632]	; (800b0f0 <_fx_media_flush+0x2a4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d001      	beq.n	800ae7e <_fx_media_flush+0x32>
 800ae7a:	2311      	movs	r3, #17
 800ae7c:	e16e      	b.n	800b15c <_fx_media_flush+0x310>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ae84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f004 fc2f 	bl	800f6ec <_tx_mutex_get>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <_fx_media_flush+0x4c>
 800ae94:	2311      	movs	r3, #17
 800ae96:	e161      	b.n	800b15c <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f004 fea5 	bl	800fbf8 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800aeae:	2323      	movs	r3, #35	; 0x23
 800aeb0:	e154      	b.n	800b15c <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800aeb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800aec0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800aec2:	e040      	b.n	800af46 <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d136      	bne.n	800af3a <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d032      	beq.n	800af3a <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aed4:	f3ef 8310 	mrs	r3, PRIMASK
 800aed8:	613b      	str	r3, [r7, #16]
    return(posture);
 800aeda:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800aedc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aede:	b672      	cpsid	i
    return(int_posture);
 800aee0:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800aee2:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800aee4:	4b83      	ldr	r3, [pc, #524]	; (800b0f4 <_fx_media_flush+0x2a8>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800aeee:	4b82      	ldr	r3, [pc, #520]	; (800b0f8 <_fx_media_flush+0x2ac>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f383 8810 	msr	PRIMASK, r3
}
 800af02:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800af0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af0c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	3368      	adds	r3, #104	; 0x68
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7fb f8ae 	bl	8006078 <_fx_directory_entry_write>
 800af1c:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	2b00      	cmp	r3, #0
 800af22:	d007      	beq.n	800af34 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800af2a:	4618      	mov	r0, r3
 800af2c:	f004 fe64 	bl	800fbf8 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	e113      	b.n	800b15c <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	2200      	movs	r2, #0
 800af38:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af3e:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	3b01      	subs	r3, #1
 800af44:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1bb      	bne.n	800aec4 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 fd0a 	bl	800c966 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f002 f858 	bl	800d008 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800af5e:	2100      	movs	r1, #0
 800af60:	9102      	str	r1, [sp, #8]
 800af62:	e9cd 2300 	strd	r2, r3, [sp]
 800af66:	f04f 0201 	mov.w	r2, #1
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f002 fbd4 	bl	800d71c <_fx_utility_logical_sector_flush>
 800af74:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d007      	beq.n	800af8c <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800af82:	4618      	mov	r0, r3
 800af84:	f004 fe38 	bl	800fbf8 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	e0e7      	b.n	800b15c <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80bb 	beq.w	800b10c <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800af9e:	429a      	cmp	r2, r3
 800afa0:	f000 80b4 	beq.w	800b10c <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	69d9      	ldr	r1, [r3, #28]
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	2200      	movs	r2, #0
 800afc2:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2290      	movs	r2, #144	; 0x90
 800afd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a3a      	ldr	r2, [r7, #32]
 800afd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2203      	movs	r2, #3
 800aff2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d007      	beq.n	800b028 <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b01e:	4618      	mov	r0, r3
 800b020:	f004 fdea 	bl	800fbf8 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800b024:	2390      	movs	r3, #144	; 0x90
 800b026:	e099      	b.n	800b15c <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b02e:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800b030:	6a38      	ldr	r0, [r7, #32]
 800b032:	f001 f93d 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800b036:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	4a30      	ldr	r2, [pc, #192]	; (800b0fc <_fx_media_flush+0x2b0>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d165      	bne.n	800b10c <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b046:	4618      	mov	r0, r3
 800b048:	f001 f932 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800b04c:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	4a2b      	ldr	r2, [pc, #172]	; (800b100 <_fx_media_flush+0x2b4>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d15a      	bne.n	800b10c <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b060:	4619      	mov	r1, r3
 800b062:	4610      	mov	r0, r2
 800b064:	f001 f941 	bl	800c2ea <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f001 f937 	bl	800c2ea <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2290      	movs	r2, #144	; 0x90
 800b088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a3a      	ldr	r2, [r7, #32]
 800b090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d011      	beq.n	800b104 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f004 fd86 	bl	800fbf8 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800b0ec:	2390      	movs	r3, #144	; 0x90
 800b0ee:	e035      	b.n	800b15c <_fx_media_flush+0x310>
 800b0f0:	4d454449 	.word	0x4d454449
 800b0f4:	2000401c 	.word	0x2000401c
 800b0f8:	20004018 	.word	0x20004018
 800b0fc:	41615252 	.word	0x41615252
 800b100:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2202      	movs	r2, #2
 800b11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2290      	movs	r2, #144	; 0x90
 800b126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d007      	beq.n	800b14e <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b144:	4618      	mov	r0, r3
 800b146:	f004 fd57 	bl	800fbf8 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800b14a:	2390      	movs	r3, #144	; 0x90
 800b14c:	e006      	b.n	800b15c <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b154:	4618      	mov	r0, r3
 800b156:	f004 fd4f 	bl	800fbf8 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3730      	adds	r7, #48	; 0x30
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800b164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b168:	b09a      	sub	sp, #104	; 0x68
 800b16a:	af04      	add	r7, sp, #16
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800b174:	4bba      	ldr	r3, [pc, #744]	; (800b460 <_fx_media_open+0x2fc>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	4bba      	ldr	r3, [pc, #744]	; (800b464 <_fx_media_open+0x300>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	431a      	orrs	r2, r3
 800b17e:	4bba      	ldr	r3, [pc, #744]	; (800b468 <_fx_media_open+0x304>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4313      	orrs	r3, r2
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800b188:	4bb8      	ldr	r3, [pc, #736]	; (800b46c <_fx_media_open+0x308>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d102      	bne.n	800b196 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800b190:	2322      	movs	r3, #34	; 0x22
 800b192:	f000 bd51 	b.w	800bc38 <_fx_media_open+0xad4>
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1a8:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b1ae:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800b1ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1cc:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2290      	movs	r2, #144	; 0x90
 800b3ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800b3f2:	2390      	movs	r3, #144	; 0x90
 800b3f4:	f000 bc20 	b.w	800bc38 <_fx_media_open+0xad4>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2205      	movs	r2, #5
 800b40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2290      	movs	r2, #144	; 0x90
 800b412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b41a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2201      	movs	r2, #1
 800b422:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2201      	movs	r2, #1
 800b42a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d016      	beq.n	800b470 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2208      	movs	r2, #8
 800b446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2290      	movs	r2, #144	; 0x90
 800b44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800b45c:	2301      	movs	r3, #1
 800b45e:	e3eb      	b.n	800bc38 <_fx_media_open+0xad4>
 800b460:	20004028 	.word	0x20004028
 800b464:	2000402c 	.word	0x2000402c
 800b468:	20004030 	.word	0x20004030
 800b46c:	2000002c 	.word	0x2000002c
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f7ff fa69 	bl	800a948 <_fx_media_boot_info_extract>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00e      	beq.n	800b49a <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2208      	movs	r2, #8
 800b480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2290      	movs	r2, #144	; 0x90
 800b488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800b496:	2302      	movs	r3, #2
 800b498:	e3ce      	b.n	800bc38 <_fx_media_open+0xad4>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4a0:	3330      	adds	r3, #48	; 0x30
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 fedc 	bl	800c260 <_fx_utility_16_unsigned_read>
 800b4a8:	63f8      	str	r0, [r7, #60]	; 0x3c

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	615a      	str	r2, [r3, #20]

    /* Is there at least one?  */
    if (media_ptr -> fx_media_sector_cache_size == 0)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10e      	bne.n	800b4de <_fx_media_open+0x37a>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2208      	movs	r2, #8
 800b4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2290      	movs	r2, #144	; 0x90
 800b4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800b4da:	2321      	movs	r3, #33	; 0x21
 800b4dc:	e3ac      	b.n	800bc38 <_fx_media_open+0xad4>
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e6:	d903      	bls.n	800b4f0 <_fx_media_open+0x38c>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ee:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800b4fc:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800b4fe:	e01c      	b.n	800b53a <_fx_media_open+0x3d6>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800b500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b502:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b504:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800b506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b510:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800b514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b516:	2200      	movs	r2, #0
 800b518:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800b51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b51c:	2200      	movs	r2, #0
 800b51e:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800b520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b522:	f103 0218 	add.w	r2, r3, #24
 800b526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b528:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800b52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b52c:	3318      	adds	r3, #24
 800b52e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b536:	4413      	add	r3, r2
 800b538:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800b53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1dd      	bne.n	800b500 <_fx_media_open+0x39c>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800b544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b546:	3b18      	subs	r3, #24
 800b548:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800b54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54c:	2200      	movs	r2, #0
 800b54e:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800b550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b552:	1e5a      	subs	r2, r3, #1
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	2b0f      	cmp	r3, #15
 800b574:	d91a      	bls.n	800b5ac <_fx_media_open+0x448>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	695a      	ldr	r2, [r3, #20]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	3b01      	subs	r3, #1
 800b580:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6959      	ldr	r1, [r3, #20]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800b58e:	429a      	cmp	r2, r3
 800b590:	d10c      	bne.n	800b5ac <_fx_media_open+0x448>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	695b      	ldr	r3, [r3, #20]
 800b59c:	089b      	lsrs	r3, r3, #2
 800b59e:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b5a6:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800b5aa:	e002      	b.n	800b5b2 <_fx_media_open+0x44e>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b6:	e023      	b.n	800b600 <_fx_media_open+0x49c>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800b5b8:	68f9      	ldr	r1, [r7, #12]
 800b5ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5bc:	4613      	mov	r3, r2
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800b5ce:	68f9      	ldr	r1, [r7, #12]
 800b5d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800b5e4:	68f9      	ldr	r1, [r7, #12]
 800b5e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	005b      	lsls	r3, r3, #1
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b602:	2b0f      	cmp	r3, #15
 800b604:	d9d8      	bls.n	800b5b8 <_fx_media_open+0x454>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800b606:	2300      	movs	r3, #0
 800b608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b60a:	e009      	b.n	800b620 <_fx_media_open+0x4bc>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b610:	4413      	add	r3, r2
 800b612:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800b616:	2200      	movs	r2, #0
 800b618:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800b61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b61c:	3301      	adds	r3, #1
 800b61e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b622:	2b7f      	cmp	r3, #127	; 0x7f
 800b624:	d9f2      	bls.n	800b60c <_fx_media_open+0x4a8>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800b632:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800b636:	441a      	add	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b640:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800b646:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800b648:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800b64e:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800b65e:	441a      	add	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b66a:	68f9      	ldr	r1, [r7, #12]
 800b66c:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800b66e:	2000      	movs	r0, #0
 800b670:	460c      	mov	r4, r1
 800b672:	4605      	mov	r5, r0
 800b674:	ebb2 0804 	subs.w	r8, r2, r4
 800b678:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b680:	2200      	movs	r2, #0
 800b682:	469a      	mov	sl, r3
 800b684:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800b686:	4652      	mov	r2, sl
 800b688:	465b      	mov	r3, fp
 800b68a:	4640      	mov	r0, r8
 800b68c:	4649      	mov	r1, r9
 800b68e:	f7f4 fed3 	bl	8000438 <__aeabi_uldivmod>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d819      	bhi.n	800b6da <_fx_media_open+0x576>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800b6c4:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6d4:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800b6d8:	e037      	b.n	800b74a <_fx_media_open+0x5e6>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d819      	bhi.n	800b71a <_fx_media_open+0x5b6>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6fe:	461a      	mov	r2, r3
 800b700:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800b704:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b70e:	461a      	mov	r2, r3
 800b710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b714:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800b718:	e017      	b.n	800b74a <_fx_media_open+0x5e6>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2201      	movs	r2, #1
 800b724:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b72a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b732:	461a      	mov	r2, r3
 800b734:	4b94      	ldr	r3, [pc, #592]	; (800b988 <_fx_media_open+0x824>)
 800b736:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b740:	461a      	mov	r2, r3
 800b742:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b746:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d15f      	bne.n	800b812 <_fx_media_open+0x6ae>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b756:	2b01      	cmp	r3, #1
 800b758:	d801      	bhi.n	800b75e <_fx_media_open+0x5fa>
            {
                return(FX_MEDIA_INVALID);
 800b75a:	2302      	movs	r3, #2
 800b75c:	e26c      	b.n	800bc38 <_fx_media_open+0xad4>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b766:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800b768:	68f9      	ldr	r1, [r7, #12]
 800b76a:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800b76c:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800b770:	441a      	add	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800b780:	f107 0310 	add.w	r3, r7, #16
 800b784:	461a      	mov	r2, r3
 800b786:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 fdcf 	bl	800c32c <_fx_utility_FAT_entry_read>
 800b78e:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800b790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b792:	3301      	adds	r3, #1
 800b794:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00e      	beq.n	800b7ba <_fx_media_open+0x656>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2208      	movs	r2, #8
 800b7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2290      	movs	r2, #144	; 0x90
 800b7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e23e      	b.n	800bc38 <_fx_media_open+0xad4>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d004      	beq.n	800b7cc <_fx_media_open+0x668>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d90e      	bls.n	800b7ea <_fx_media_open+0x686>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2208      	movs	r2, #8
 800b7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2290      	movs	r2, #144	; 0x90
 800b7d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e226      	b.n	800bc38 <_fx_media_open+0xad4>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	4a67      	ldr	r2, [pc, #412]	; (800b98c <_fx_media_open+0x828>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d802      	bhi.n	800b7f8 <_fx_media_open+0x694>
            {
                break;
            }
            cluster_number = FAT_entry;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800b7f6:	e7c3      	b.n	800b780 <_fx_media_open+0x61c>
                break;
 800b7f8:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b800:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800b808:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b80c:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 808e 	beq.w	800b946 <_fx_media_open+0x7e2>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	69d9      	ldr	r1, [r3, #28]
 800b836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b83e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	69db      	ldr	r3, [r3, #28]
 800b846:	2200      	movs	r2, #0
 800b848:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2290      	movs	r2, #144	; 0x90
 800b856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b85e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2203      	movs	r2, #3
 800b878:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d150      	bne.n	800b940 <_fx_media_open+0x7dc>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800b8a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8a8:	f000 fd02 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800b8ac:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	4a37      	ldr	r2, [pc, #220]	; (800b990 <_fx_media_open+0x82c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d140      	bne.n	800b938 <_fx_media_open+0x7d4>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 fcf7 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800b8c2:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	4a33      	ldr	r2, [pc, #204]	; (800b994 <_fx_media_open+0x830>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d131      	bne.n	800b930 <_fx_media_open+0x7cc>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 fcec 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fcdf 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b902:	429a      	cmp	r2, r3
 800b904:	d80c      	bhi.n	800b920 <_fx_media_open+0x7bc>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800b912:	429a      	cmp	r2, r3
 800b914:	d804      	bhi.n	800b920 <_fx_media_open+0x7bc>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d812      	bhi.n	800b946 <_fx_media_open+0x7e2>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b92e:	e00a      	b.n	800b946 <_fx_media_open+0x7e2>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	669a      	str	r2, [r3, #104]	; 0x68
 800b936:	e006      	b.n	800b946 <_fx_media_open+0x7e2>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	669a      	str	r2, [r3, #104]	; 0x68
 800b93e:	e002      	b.n	800b946 <_fx_media_open+0x7e2>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d03f      	beq.n	800b9ce <_fx_media_open+0x86a>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800b94e:	2302      	movs	r3, #2
 800b950:	657b      	str	r3, [r7, #84]	; 0x54
 800b952:	e035      	b.n	800b9c0 <_fx_media_open+0x85c>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800b954:	f107 0310 	add.w	r3, r7, #16
 800b958:	461a      	mov	r2, r3
 800b95a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 fce5 	bl	800c32c <_fx_utility_FAT_entry_read>
 800b962:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b966:	2b00      	cmp	r3, #0
 800b968:	d016      	beq.n	800b998 <_fx_media_open+0x834>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2208      	movs	r2, #8
 800b96e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2290      	movs	r2, #144	; 0x90
 800b976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800b984:	2303      	movs	r3, #3
 800b986:	e157      	b.n	800bc38 <_fx_media_open+0xad4>
 800b988:	0ffffff0 	.word	0x0ffffff0
 800b98c:	0fffffef 	.word	0x0fffffef
 800b990:	41615252 	.word	0x41615252
 800b994:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10d      	bne.n	800b9ba <_fx_media_open+0x856>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d103      	bne.n	800b9ba <_fx_media_open+0x856>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800b9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9bc:	3301      	adds	r3, #1
 800b9be:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c4:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800b9c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d3c3      	bcc.n	800b954 <_fx_media_open+0x7f0>
 800b9cc:	e0b4      	b.n	800bb38 <_fx_media_open+0x9d4>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f040 80b0 	bne.w	800bb38 <_fx_media_open+0x9d4>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b9de:	2101      	movs	r1, #1
 800b9e0:	9102      	str	r1, [sp, #8]
 800b9e2:	e9cd 2300 	strd	r2, r3, [sp]
 800b9e6:	f04f 0201 	mov.w	r2, #1
 800b9ea:	f04f 0300 	mov.w	r3, #0
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f001 fe94 	bl	800d71c <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9f8:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800b9fe:	2300      	movs	r3, #0
 800ba00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba02:	e093      	b.n	800bb2c <_fx_media_open+0x9c8>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba0a:	4413      	add	r3, r2
 800ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d902      	bls.n	800ba28 <_fx_media_open+0x8c4>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2290      	movs	r2, #144	; 0x90
 800ba34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2202      	movs	r2, #2
 800ba56:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00e      	beq.n	800ba8c <_fx_media_open+0x928>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2208      	movs	r2, #8
 800ba72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2290      	movs	r2, #144	; 0x90
 800ba7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e0d5      	b.n	800bc38 <_fx_media_open+0xad4>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba92:	fb02 f303 	mul.w	r3, r2, r3
 800ba96:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba9c:	e03d      	b.n	800bb1a <_fx_media_open+0x9b6>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d009      	beq.n	800baba <_fx_media_open+0x956>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baac:	4413      	add	r3, r2
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800bab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bab4:	3304      	adds	r3, #4
 800bab6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bab8:	e011      	b.n	800bade <_fx_media_open+0x97a>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	689a      	ldr	r2, [r3, #8]
 800babe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bac0:	4413      	add	r3, r2
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bacc:	3301      	adds	r3, #1
 800bace:	4413      	add	r3, r2
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800bad4:	430b      	orrs	r3, r1
 800bad6:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800bad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bada:	3302      	adds	r3, #2
 800badc:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10d      	bne.n	800bb00 <_fx_media_open+0x99c>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d103      	bne.n	800bb00 <_fx_media_open+0x99c>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bafc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800bb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb02:	3301      	adds	r3, #1
 800bb04:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0a:	3302      	adds	r3, #2
 800bb0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d303      	bcc.n	800bb1a <_fx_media_open+0x9b6>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb16:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800bb18:	e003      	b.n	800bb22 <_fx_media_open+0x9be>
            for (j = 0; j < bytes_in_buffer;)
 800bb1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d3bd      	bcc.n	800ba9e <_fx_media_open+0x93a>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb28:	4413      	add	r3, r2
 800bb2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb32:	429a      	cmp	r2, r3
 800bb34:	f4ff af66 	bcc.w	800ba04 <_fx_media_open+0x8a0>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d103      	bne.n	800bb4a <_fx_media_open+0x9e6>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2202      	movs	r2, #2
 800bb46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bb64:	2200      	movs	r2, #0
 800bb66:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bb9e:	2200      	movs	r2, #0
 800bba0:	4928      	ldr	r1, [pc, #160]	; (800bc44 <_fx_media_open+0xae0>)
 800bba2:	4618      	mov	r0, r3
 800bba4:	f003 fc9e 	bl	800f4e4 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bba8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbac:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bbae:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bbb0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbb2:	b672      	cpsid	i
    return(int_posture);
 800bbb4:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4a23      	ldr	r2, [pc, #140]	; (800bc48 <_fx_media_open+0xae4>)
 800bbbc:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800bbbe:	4b23      	ldr	r3, [pc, #140]	; (800bc4c <_fx_media_open+0xae8>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d017      	beq.n	800bbf6 <_fx_media_open+0xa92>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800bbc6:	4b21      	ldr	r3, [pc, #132]	; (800bc4c <_fx_media_open+0xae8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bbce:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800bbd0:	4b1e      	ldr	r3, [pc, #120]	; (800bc4c <_fx_media_open+0xae8>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6a3a      	ldr	r2, [r7, #32]
 800bbe6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800bbea:	4b18      	ldr	r3, [pc, #96]	; (800bc4c <_fx_media_open+0xae8>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800bbf4:	e00a      	b.n	800bc0c <_fx_media_open+0xaa8>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800bbf6:	4a15      	ldr	r2, [pc, #84]	; (800bc4c <_fx_media_open+0xae8>)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800bc0c:	4b10      	ldr	r3, [pc, #64]	; (800bc50 <_fx_media_open+0xaec>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3301      	adds	r3, #1
 800bc12:	4a0f      	ldr	r2, [pc, #60]	; (800bc50 <_fx_media_open+0xaec>)
 800bc14:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d004      	beq.n	800bc2a <_fx_media_open+0xac6>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	4798      	blx	r3
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f383 8810 	msr	PRIMASK, r3
}
 800bc34:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3758      	adds	r7, #88	; 0x58
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc42:	bf00      	nop
 800bc44:	08011e5c 	.word	0x08011e5c
 800bc48:	4d454449 	.word	0x4d454449
 800bc4c:	20004010 	.word	0x20004010
 800bc50:	20004014 	.word	0x20004014

0800bc54 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800bc54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bc58:	b090      	sub	sp, #64	; 0x40
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	60b9      	str	r1, [r7, #8]
 800bc60:	607a      	str	r2, [r7, #4]
 800bc62:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800bc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2be9      	cmp	r3, #233	; 0xe9
 800bc72:	d008      	beq.n	800bc86 <_fx_partition_offset_calculate+0x32>
 800bc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2beb      	cmp	r3, #235	; 0xeb
 800bc7a:	d17d      	bne.n	800bd78 <_fx_partition_offset_calculate+0x124>
 800bc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7e:	3302      	adds	r3, #2
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b90      	cmp	r3, #144	; 0x90
 800bc84:	d178      	bne.n	800bd78 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800bc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc88:	3316      	adds	r3, #22
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d118      	bne.n	800bcc2 <_fx_partition_offset_calculate+0x6e>
 800bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc92:	3317      	adds	r3, #23
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d113      	bne.n	800bcc2 <_fx_partition_offset_calculate+0x6e>
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9c:	3324      	adds	r3, #36	; 0x24
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10e      	bne.n	800bcc2 <_fx_partition_offset_calculate+0x6e>
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	3325      	adds	r3, #37	; 0x25
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d109      	bne.n	800bcc2 <_fx_partition_offset_calculate+0x6e>
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	3326      	adds	r3, #38	; 0x26
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <_fx_partition_offset_calculate+0x6e>
 800bcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcba:	3327      	adds	r3, #39	; 0x27
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d05a      	beq.n	800bd78 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800bcc2:	f04f 0200 	mov.w	r2, #0
 800bcc6:	f04f 0300 	mov.w	r3, #0
 800bcca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	3313      	adds	r3, #19
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d104      	bne.n	800bce2 <_fx_partition_offset_calculate+0x8e>
 800bcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcda:	3314      	adds	r3, #20
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00d      	beq.n	800bcfe <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800bce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce4:	3314      	adds	r3, #20
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	021b      	lsls	r3, r3, #8
 800bcea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcec:	3213      	adds	r2, #19
 800bcee:	7812      	ldrb	r2, [r2, #0]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4698      	mov	r8, r3
 800bcf6:	4691      	mov	r9, r2
 800bcf8:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800bcfc:	e02a      	b.n	800bd54 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd00:	3320      	adds	r3, #32
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10e      	bne.n	800bd26 <_fx_partition_offset_calculate+0xd2>
 800bd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0a:	3321      	adds	r3, #33	; 0x21
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d109      	bne.n	800bd26 <_fx_partition_offset_calculate+0xd2>
 800bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd14:	3322      	adds	r3, #34	; 0x22
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d104      	bne.n	800bd26 <_fx_partition_offset_calculate+0xd2>
 800bd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1e:	3323      	adds	r3, #35	; 0x23
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d016      	beq.n	800bd54 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800bd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd28:	3323      	adds	r3, #35	; 0x23
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd30:	3322      	adds	r3, #34	; 0x22
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800bd36:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800bd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3a:	3321      	adds	r3, #33	; 0x21
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800bd40:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800bd42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd44:	3220      	adds	r2, #32
 800bd46:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800bd48:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	461c      	mov	r4, r3
 800bd4e:	4615      	mov	r5, r2
 800bd50:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800bd54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	d00d      	beq.n	800bd78 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d002      	beq.n	800bd68 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800bd6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800bd74:	2300      	movs	r3, #0
 800bd76:	e032      	b.n	800bdde <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b55      	cmp	r3, #85	; 0x55
 800bd82:	d105      	bne.n	800bd90 <_fx_partition_offset_calculate+0x13c>
 800bd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2baa      	cmp	r3, #170	; 0xaa
 800bd8e:	d001      	beq.n	800bd94 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800bd90:	2304      	movs	r3, #4
 800bd92:	e024      	b.n	800bdde <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800bd94:	f107 0110 	add.w	r1, r7, #16
 800bd98:	f107 0014 	add.w	r0, r7, #20
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f000 f822 	bl	800bde8 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d301      	bcc.n	800bdb0 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800bdac:	2304      	movs	r3, #4
 800bdae:	e016      	b.n	800bdde <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d007      	beq.n	800bdc6 <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	3340      	adds	r3, #64	; 0x40
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d007      	beq.n	800bddc <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	3340      	adds	r3, #64	; 0x40
 800bdd2:	443b      	add	r3, r7
 800bdd4:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3740      	adds	r7, #64	; 0x40
 800bde2:	46bd      	mov	sp, r7
 800bde4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800bde8 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b089      	sub	sp, #36	; 0x24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800bdfa:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e06f      	b.n	800bee2 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	3304      	adds	r3, #4
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	4413      	add	r3, r2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10e      	bne.n	800be2e <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4413      	add	r3, r2
 800be28:	2200      	movs	r2, #0
 800be2a:	605a      	str	r2, [r3, #4]
 800be2c:	e051      	b.n	800bed2 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	3308      	adds	r3, #8
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4413      	add	r3, r2
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	3309      	adds	r3, #9
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4413      	add	r3, r2
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	021b      	lsls	r3, r3, #8
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	4313      	orrs	r3, r2
 800be4a:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	330a      	adds	r3, #10
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	4413      	add	r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	041b      	lsls	r3, r3, #16
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	330b      	adds	r3, #11
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	061b      	lsls	r3, r3, #24
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4413      	add	r3, r2
 800be7a:	6979      	ldr	r1, [r7, #20]
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	440a      	add	r2, r1
 800be80:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	330c      	adds	r3, #12
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4413      	add	r3, r2
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	330d      	adds	r3, #13
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	4413      	add	r3, r2
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	330e      	adds	r3, #14
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	4413      	add	r3, r2
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	041b      	lsls	r3, r3, #16
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	4313      	orrs	r3, r2
 800beb0:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	330f      	adds	r3, #15
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	4413      	add	r3, r2
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	061b      	lsls	r3, r3, #24
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	00db      	lsls	r3, r3, #3
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	4413      	add	r3, r2
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	3310      	adds	r3, #16
 800bee0:	61fb      	str	r3, [r7, #28]
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800bee8:	d98b      	bls.n	800be02 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3724      	adds	r7, #36	; 0x24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800befe:	4b27      	ldr	r3, [pc, #156]	; (800bf9c <_fx_system_initialize+0xa4>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800bf04:	4b26      	ldr	r3, [pc, #152]	; (800bfa0 <_fx_system_initialize+0xa8>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800bf0a:	4b26      	ldr	r3, [pc, #152]	; (800bfa4 <_fx_system_initialize+0xac>)
 800bf0c:	f644 2221 	movw	r2, #18977	; 0x4a21
 800bf10:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800bf12:	4b25      	ldr	r3, [pc, #148]	; (800bfa8 <_fx_system_initialize+0xb0>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800bf18:	4b24      	ldr	r3, [pc, #144]	; (800bfac <_fx_system_initialize+0xb4>)
 800bf1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf1e:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800bf20:	4b23      	ldr	r3, [pc, #140]	; (800bfb0 <_fx_system_initialize+0xb8>)
 800bf22:	2210      	movs	r2, #16
 800bf24:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800bf26:	2301      	movs	r3, #1
 800bf28:	9302      	str	r3, [sp, #8]
 800bf2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf2e:	9301      	str	r3, [sp, #4]
 800bf30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	4b1f      	ldr	r3, [pc, #124]	; (800bfb4 <_fx_system_initialize+0xbc>)
 800bf38:	4a1f      	ldr	r2, [pc, #124]	; (800bfb8 <_fx_system_initialize+0xc0>)
 800bf3a:	4920      	ldr	r1, [pc, #128]	; (800bfbc <_fx_system_initialize+0xc4>)
 800bf3c:	4820      	ldr	r0, [pc, #128]	; (800bfc0 <_fx_system_initialize+0xc8>)
 800bf3e:	f005 f937 	bl	80111b0 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800bf42:	4b20      	ldr	r3, [pc, #128]	; (800bfc4 <_fx_system_initialize+0xcc>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf4a:	4a1e      	ldr	r2, [pc, #120]	; (800bfc4 <_fx_system_initialize+0xcc>)
 800bf4c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800bf4e:	4b1d      	ldr	r3, [pc, #116]	; (800bfc4 <_fx_system_initialize+0xcc>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf56:	4a1b      	ldr	r2, [pc, #108]	; (800bfc4 <_fx_system_initialize+0xcc>)
 800bf58:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <_fx_system_initialize+0xd0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf62:	4a19      	ldr	r2, [pc, #100]	; (800bfc8 <_fx_system_initialize+0xd0>)
 800bf64:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800bf66:	4b18      	ldr	r3, [pc, #96]	; (800bfc8 <_fx_system_initialize+0xd0>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf6e:	4a16      	ldr	r2, [pc, #88]	; (800bfc8 <_fx_system_initialize+0xd0>)
 800bf70:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800bf72:	4b15      	ldr	r3, [pc, #84]	; (800bfc8 <_fx_system_initialize+0xd0>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f043 0310 	orr.w	r3, r3, #16
 800bf7a:	4a13      	ldr	r2, [pc, #76]	; (800bfc8 <_fx_system_initialize+0xd0>)
 800bf7c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <_fx_system_initialize+0xd4>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800bf86:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <_fx_system_initialize+0xd4>)
 800bf88:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800bf8a:	4b10      	ldr	r3, [pc, #64]	; (800bfcc <_fx_system_initialize+0xd4>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800bf92:	4a0e      	ldr	r2, [pc, #56]	; (800bfcc <_fx_system_initialize+0xd4>)
 800bf94:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800bf96:	bf00      	nop
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	20004010 	.word	0x20004010
 800bfa0:	20004014 	.word	0x20004014
 800bfa4:	20004018 	.word	0x20004018
 800bfa8:	2000401c 	.word	0x2000401c
 800bfac:	20004020 	.word	0x20004020
 800bfb0:	20004024 	.word	0x20004024
 800bfb4:	46585359 	.word	0x46585359
 800bfb8:	0800bfd1 	.word	0x0800bfd1
 800bfbc:	08011e70 	.word	0x08011e70
 800bfc0:	20004034 	.word	0x20004034
 800bfc4:	20004028 	.word	0x20004028
 800bfc8:	2000402c 	.word	0x2000402c
 800bfcc:	20004030 	.word	0x20004030

0800bfd0 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b089      	sub	sp, #36	; 0x24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a9d      	ldr	r2, [pc, #628]	; (800c250 <_fx_system_timer_entry+0x280>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	f040 8132 	bne.w	800c246 <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800bfe2:	4b9c      	ldr	r3, [pc, #624]	; (800c254 <_fx_system_timer_entry+0x284>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 031f 	and.w	r3, r3, #31
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800bfee:	4b99      	ldr	r3, [pc, #612]	; (800c254 <_fx_system_timer_entry+0x284>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	095b      	lsrs	r3, r3, #5
 800bff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bff8:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800bffa:	4b96      	ldr	r3, [pc, #600]	; (800c254 <_fx_system_timer_entry+0x284>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	0adb      	lsrs	r3, r3, #11
 800c000:	f003 031f 	and.w	r3, r3, #31
 800c004:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800c006:	4b94      	ldr	r3, [pc, #592]	; (800c258 <_fx_system_timer_entry+0x288>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 031f 	and.w	r3, r3, #31
 800c00e:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800c010:	4b91      	ldr	r3, [pc, #580]	; (800c258 <_fx_system_timer_entry+0x288>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	095b      	lsrs	r3, r3, #5
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800c01c:	4b8e      	ldr	r3, [pc, #568]	; (800c258 <_fx_system_timer_entry+0x288>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	0a5b      	lsrs	r3, r3, #9
 800c022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c026:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800c02a:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	330a      	adds	r3, #10
 800c030:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	2b3b      	cmp	r3, #59	; 0x3b
 800c036:	f240 80d4 	bls.w	800c1e2 <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4a87      	ldr	r2, [pc, #540]	; (800c25c <_fx_system_timer_entry+0x28c>)
 800c03e:	fba2 2303 	umull	r2, r3, r2, r3
 800c042:	095b      	lsrs	r3, r3, #5
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	4413      	add	r3, r2
 800c048:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	4b83      	ldr	r3, [pc, #524]	; (800c25c <_fx_system_timer_entry+0x28c>)
 800c04e:	fba3 1302 	umull	r1, r3, r3, r2
 800c052:	0959      	lsrs	r1, r3, #5
 800c054:	460b      	mov	r3, r1
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	1a5b      	subs	r3, r3, r1
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2b3b      	cmp	r3, #59	; 0x3b
 800c064:	f240 80bd 	bls.w	800c1e2 <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	4a7c      	ldr	r2, [pc, #496]	; (800c25c <_fx_system_timer_entry+0x28c>)
 800c06c:	fba2 2303 	umull	r2, r3, r2, r3
 800c070:	095b      	lsrs	r3, r3, #5
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	4413      	add	r3, r2
 800c076:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	4b78      	ldr	r3, [pc, #480]	; (800c25c <_fx_system_timer_entry+0x28c>)
 800c07c:	fba3 1302 	umull	r1, r3, r3, r2
 800c080:	0959      	lsrs	r1, r3, #5
 800c082:	460b      	mov	r3, r1
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	1a5b      	subs	r3, r3, r1
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	2b17      	cmp	r3, #23
 800c092:	f240 80a6 	bls.w	800c1e2 <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]
                    day++;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	3301      	adds	r3, #1
 800c09e:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	2b0b      	cmp	r3, #11
 800c0a6:	f200 80cb 	bhi.w	800c240 <_fx_system_timer_entry+0x270>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <_fx_system_timer_entry+0xe0>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c0e1 	.word	0x0800c0e1
 800c0b4:	0800c0f3 	.word	0x0800c0f3
 800c0b8:	0800c121 	.word	0x0800c121
 800c0bc:	0800c133 	.word	0x0800c133
 800c0c0:	0800c145 	.word	0x0800c145
 800c0c4:	0800c157 	.word	0x0800c157
 800c0c8:	0800c169 	.word	0x0800c169
 800c0cc:	0800c17b 	.word	0x0800c17b
 800c0d0:	0800c18d 	.word	0x0800c18d
 800c0d4:	0800c19f 	.word	0x0800c19f
 800c0d8:	0800c1b1 	.word	0x0800c1b1
 800c0dc:	0800c1c3 	.word	0x0800c1c3

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	2b1f      	cmp	r3, #31
 800c0e4:	d97f      	bls.n	800c1e6 <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	613b      	str	r3, [r7, #16]
                            month++;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c0f0:	e079      	b.n	800c1e6 <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	f003 0303 	and.w	r3, r3, #3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d108      	bne.n	800c10e <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2b1d      	cmp	r3, #29
 800c100:	d973      	bls.n	800c1ea <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800c102:	2301      	movs	r3, #1
 800c104:	613b      	str	r3, [r7, #16]
                                month++;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3301      	adds	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800c10c:	e06d      	b.n	800c1ea <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b1c      	cmp	r3, #28
 800c112:	d96a      	bls.n	800c1ea <_fx_system_timer_entry+0x21a>
                                day = 1;
 800c114:	2301      	movs	r3, #1
 800c116:	613b      	str	r3, [r7, #16]
                                month++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
                        break;
 800c11e:	e064      	b.n	800c1ea <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2b1f      	cmp	r3, #31
 800c124:	d963      	bls.n	800c1ee <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c126:	2301      	movs	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
                            month++;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3301      	adds	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c130:	e05d      	b.n	800c1ee <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2b1e      	cmp	r3, #30
 800c136:	d95c      	bls.n	800c1f2 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c138:	2301      	movs	r3, #1
 800c13a:	613b      	str	r3, [r7, #16]
                            month++;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	3301      	adds	r3, #1
 800c140:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c142:	e056      	b.n	800c1f2 <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b1f      	cmp	r3, #31
 800c148:	d955      	bls.n	800c1f6 <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c14a:	2301      	movs	r3, #1
 800c14c:	613b      	str	r3, [r7, #16]
                            month++;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c154:	e04f      	b.n	800c1f6 <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2b1e      	cmp	r3, #30
 800c15a:	d94e      	bls.n	800c1fa <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c15c:	2301      	movs	r3, #1
 800c15e:	613b      	str	r3, [r7, #16]
                            month++;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3301      	adds	r3, #1
 800c164:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c166:	e048      	b.n	800c1fa <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2b1f      	cmp	r3, #31
 800c16c:	d947      	bls.n	800c1fe <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c16e:	2301      	movs	r3, #1
 800c170:	613b      	str	r3, [r7, #16]
                            month++;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c178:	e041      	b.n	800c1fe <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	2b1f      	cmp	r3, #31
 800c17e:	d940      	bls.n	800c202 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c180:	2301      	movs	r3, #1
 800c182:	613b      	str	r3, [r7, #16]
                            month++;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3301      	adds	r3, #1
 800c188:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c18a:	e03a      	b.n	800c202 <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	2b1e      	cmp	r3, #30
 800c190:	d939      	bls.n	800c206 <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c192:	2301      	movs	r3, #1
 800c194:	613b      	str	r3, [r7, #16]
                            month++;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c19c:	e033      	b.n	800c206 <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	2b1f      	cmp	r3, #31
 800c1a2:	d932      	bls.n	800c20a <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	613b      	str	r3, [r7, #16]
                            month++;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c1ae:	e02c      	b.n	800c20a <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b1e      	cmp	r3, #30
 800c1b4:	d92b      	bls.n	800c20e <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	613b      	str	r3, [r7, #16]
                            month++;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c1c0:	e025      	b.n	800c20e <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b1f      	cmp	r3, #31
 800c1c6:	d924      	bls.n	800c212 <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	613b      	str	r3, [r7, #16]
                            month = 1;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f640 023b 	movw	r2, #2107	; 0x83b
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d831      	bhi.n	800c244 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 800c1e0:	e017      	b.n	800c212 <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 800c1e2:	bf00      	nop
 800c1e4:	e016      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1e6:	bf00      	nop
 800c1e8:	e014      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1ea:	bf00      	nop
 800c1ec:	e012      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1ee:	bf00      	nop
 800c1f0:	e010      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1f2:	bf00      	nop
 800c1f4:	e00e      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1f6:	bf00      	nop
 800c1f8:	e00c      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1fa:	bf00      	nop
 800c1fc:	e00a      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c1fe:	bf00      	nop
 800c200:	e008      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c202:	bf00      	nop
 800c204:	e006      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c206:	bf00      	nop
 800c208:	e004      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c20a:	bf00      	nop
 800c20c:	e002      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c20e:	bf00      	nop
 800c210:	e000      	b.n	800c214 <_fx_system_timer_entry+0x244>
                        break;
 800c212:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800c21a:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800c220:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800c226:	4a0c      	ldr	r2, [pc, #48]	; (800c258 <_fx_system_timer_entry+0x288>)
 800c228:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800c232:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	085b      	lsrs	r3, r3, #1
 800c238:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800c23a:	4a06      	ldr	r2, [pc, #24]	; (800c254 <_fx_system_timer_entry+0x284>)
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	e002      	b.n	800c246 <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 800c240:	bf00      	nop
 800c242:	e000      	b.n	800c246 <_fx_system_timer_entry+0x276>
                                return;
 800c244:	bf00      	nop
    }
}
 800c246:	3724      	adds	r7, #36	; 0x24
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	46585359 	.word	0x46585359
 800c254:	2000401c 	.word	0x2000401c
 800c258:	20004018 	.word	0x20004018
 800c25c:	88888889 	.word	0x88888889

0800c260 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3301      	adds	r3, #1
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800c274:	4313      	orrs	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800c278:	68fb      	ldr	r3, [r7, #12]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800c286:	b480      	push	{r7}
 800c288:	b083      	sub	sp, #12
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	b2da      	uxtb	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	0a1a      	lsrs	r2, r3, #8
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	b2d2      	uxtb	r2, r2
 800c2a2:	701a      	strb	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3303      	adds	r3, #3
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800c2c8:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800c2d2:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b083      	sub	sp, #12
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	0a1a      	lsrs	r2, r3, #8
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3301      	adds	r3, #1
 800c304:	b2d2      	uxtb	r2, r2
 800c306:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	0c1a      	lsrs	r2, r3, #16
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	3302      	adds	r3, #2
 800c310:	b2d2      	uxtb	r2, r2
 800c312:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	0e1a      	lsrs	r2, r3, #24
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3303      	adds	r3, #3
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	701a      	strb	r2, [r3, #0]
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <_fx_utility_FAT_entry_read>:
/*                                            disable fat entry refresh,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800c32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c330:	b098      	sub	sp, #96	; 0x60
 800c332:	af04      	add	r7, sp, #16
 800c334:	61f8      	str	r0, [r7, #28]
 800c336:	61b9      	str	r1, [r7, #24]
 800c338:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	f003 0303 	and.w	r3, r3, #3
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800c360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c362:	4613      	mov	r3, r2
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	4413      	add	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800c36e:	69fa      	ldr	r2, [r7, #28]
 800c370:	4413      	add	r3, r2
 800c372:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800c374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	69ba      	ldr	r2, [r7, #24]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d105      	bne.n	800c38a <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800c37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c386:	2300      	movs	r3, #0
 800c388:	e1f4      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800c38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c38c:	330c      	adds	r3, #12
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	69ba      	ldr	r2, [r7, #24]
 800c392:	429a      	cmp	r2, r3
 800c394:	d11d      	bne.n	800c3d2 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800c396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c398:	330c      	adds	r3, #12
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800c3a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800c3ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	330c      	adds	r3, #12
 800c3b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800c3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3be:	330c      	adds	r3, #12
 800c3c0:	461c      	mov	r4, r3
 800c3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e1d0      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800c3d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3d4:	3318      	adds	r3, #24
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d127      	bne.n	800c42e <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800c3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e0:	3318      	adds	r3, #24
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800c3e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ee:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800c3f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	3318      	adds	r3, #24
 800c3fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c406:	f103 0218 	add.w	r2, r3, #24
 800c40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c40c:	4614      	mov	r4, r2
 800c40e:	330c      	adds	r3, #12
 800c410:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800c418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c41a:	330c      	adds	r3, #12
 800c41c:	461c      	mov	r4, r3
 800c41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c426:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c42a:	2300      	movs	r3, #0
 800c42c:	e1a2      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800c42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c430:	3324      	adds	r3, #36	; 0x24
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d131      	bne.n	800c49e <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800c43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43c:	3324      	adds	r3, #36	; 0x24
 800c43e:	685a      	ldr	r2, [r3, #4]
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800c444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c44a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c44c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800c450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c454:	4614      	mov	r4, r2
 800c456:	3324      	adds	r3, #36	; 0x24
 800c458:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c45c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800c460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c462:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c468:	4614      	mov	r4, r2
 800c46a:	3318      	adds	r3, #24
 800c46c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c476:	f103 0218 	add.w	r2, r3, #24
 800c47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47c:	4614      	mov	r4, r2
 800c47e:	330c      	adds	r3, #12
 800c480:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800c488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c48a:	330c      	adds	r3, #12
 800c48c:	461c      	mov	r4, r3
 800c48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c496:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c49a:	2300      	movs	r3, #0
 800c49c:	e16a      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 800c49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4a0:	1cda      	adds	r2, r3, #3
 800c4a2:	69f9      	ldr	r1, [r7, #28]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	4413      	add	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	440b      	add	r3, r1
 800c4ae:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d008      	beq.n	800c4ca <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800c4b8:	69f8      	ldr	r0, [r7, #28]
 800c4ba:	f000 fa54 	bl	800c966 <_fx_utility_FAT_flush>
 800c4be:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 800c4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c8:	e154      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800c4d0:	1e5a      	subs	r2, r3, #1
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 80a7 	beq.w	800c63e <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	005a      	lsls	r2, r3, #1
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	085b      	lsrs	r3, r3, #1
 800c4fa:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c502:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c50a:	4413      	add	r3, r2
 800c50c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	2200      	movs	r2, #0
 800c512:	60bb      	str	r3, [r7, #8]
 800c514:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c51a:	2202      	movs	r2, #2
 800c51c:	9202      	str	r2, [sp, #8]
 800c51e:	2201      	movs	r2, #1
 800c520:	9201      	str	r2, [sp, #4]
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c528:	69f8      	ldr	r0, [r7, #28]
 800c52a:	f001 fb0d 	bl	800db48 <_fx_utility_logical_sector_read>
 800c52e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800c530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 800c536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c538:	e11c      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c540:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800c542:	69fa      	ldr	r2, [r7, #28]
 800c544:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c546:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800c54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	4413      	add	r3, r2
 800c558:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	d030      	beq.n	800c5c6 <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 800c564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	091b      	lsrs	r3, r3, #4
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 800c56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c570:	3301      	adds	r3, #1
 800c572:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c578:	3b01      	subs	r3, #1
 800c57a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d11b      	bne.n	800c5b8 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800c580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c582:	3301      	adds	r3, #1
 800c584:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	2200      	movs	r2, #0
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c592:	2202      	movs	r2, #2
 800c594:	9202      	str	r2, [sp, #8]
 800c596:	2201      	movs	r2, #1
 800c598:	9201      	str	r2, [sp, #4]
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a0:	69f8      	ldr	r0, [r7, #28]
 800c5a2:	f001 fad1 	bl	800db48 <_fx_utility_logical_sector_read>
 800c5a6:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b0:	e0e0      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800c5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	011b      	lsls	r3, r3, #4
 800c5be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5c4:	e02f      	b.n	800c626 <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 800c5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 800c5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d11b      	bne.n	800c616 <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800c5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	469a      	mov	sl, r3
 800c5ea:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	9202      	str	r2, [sp, #8]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	9201      	str	r2, [sp, #4]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4652      	mov	r2, sl
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	69f8      	ldr	r0, [r7, #28]
 800c600:	f001 faa2 	bl	800db48 <_fx_utility_logical_sector_read>
 800c604:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800c606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 800c60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60e:	e0b1      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 800c616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	021b      	lsls	r3, r3, #8
 800c61c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c622:	4313      	orrs	r3, r2
 800c624:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 800c626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c628:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800c62c:	d303      	bcc.n	800c636 <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 800c62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c630:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800c634:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	e078      	b.n	800c730 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c642:	2b00      	cmp	r3, #0
 800c644:	d139      	bne.n	800c6ba <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c652:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c65a:	4413      	add	r3, r2
 800c65c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c660:	2200      	movs	r2, #0
 800c662:	4698      	mov	r8, r3
 800c664:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c66a:	2202      	movs	r2, #2
 800c66c:	9202      	str	r2, [sp, #8]
 800c66e:	2201      	movs	r2, #1
 800c670:	9201      	str	r2, [sp, #4]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	4642      	mov	r2, r8
 800c676:	464b      	mov	r3, r9
 800c678:	69f8      	ldr	r0, [r7, #28]
 800c67a:	f001 fa65 	bl	800db48 <_fx_utility_logical_sector_read>
 800c67e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800c680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 800c686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c688:	e074      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c690:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800c692:	69fa      	ldr	r2, [r7, #28]
 800c694:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c696:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800c69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a6:	4413      	add	r3, r2
 800c6a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 800c6aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c6ac:	f7ff fdd8 	bl	800c260 <_fx_utility_16_unsigned_read>
 800c6b0:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	e03a      	b.n	800c730 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c6:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c6ce:	4413      	add	r3, r2
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6dc:	fb01 f202 	mul.w	r2, r1, r2
 800c6e0:	1a9b      	subs	r3, r3, r2
 800c6e2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	461c      	mov	r4, r3
 800c6ea:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	9202      	str	r2, [sp, #8]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	462b      	mov	r3, r5
 800c6fe:	69f8      	ldr	r0, [r7, #28]
 800c700:	f001 fa22 	bl	800db48 <_fx_utility_logical_sector_read>
 800c704:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800c706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 800c70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70e:	e031      	b.n	800c774 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	689a      	ldr	r2, [r3, #8]
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	4413      	add	r3, r2
 800c718:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 800c71a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c71c:	f7ff fdc8 	bl	800c2b0 <_fx_utility_32_unsigned_read>
 800c720:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c728:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c72e:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800c730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c732:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c738:	4614      	mov	r4, r2
 800c73a:	3318      	adds	r3, #24
 800c73c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c746:	f103 0218 	add.w	r2, r3, #24
 800c74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c74c:	4614      	mov	r4, r2
 800c74e:	330c      	adds	r3, #12
 800c750:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800c758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c75a:	330c      	adds	r3, #12
 800c75c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c75e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c760:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800c764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c770:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3750      	adds	r7, #80	; 0x50
 800c778:	46bd      	mov	sp, r7
 800c77a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c77e <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 800c77e:	b590      	push	{r4, r7, lr}
 800c780:	b089      	sub	sp, #36	; 0x24
 800c782:	af00      	add	r7, sp, #0
 800c784:	60f8      	str	r0, [r7, #12]
 800c786:	60b9      	str	r1, [r7, #8]
 800c788:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f003 0303 	and.w	r3, r3, #3
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800c7b0:	69ba      	ldr	r2, [r7, #24]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	4413      	add	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]
 800c7c8:	e051      	b.n	800c86e <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 800c7ca:	69fa      	ldr	r2, [r7, #28]
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	4413      	add	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	4413      	add	r3, r2
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d142      	bne.n	800c868 <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 800c7e2:	69fa      	ldr	r2, [r7, #28]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 800c7f6:	69fa      	ldr	r2, [r7, #28]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	461a      	mov	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	4413      	add	r3, r2
 800c806:	2201      	movs	r2, #1
 800c808:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c810:	2b00      	cmp	r3, #0
 800c812:	d027      	beq.n	800c864 <_fx_utility_FAT_entry_write+0xe6>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d124      	bne.n	800c864 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800c820:	1c5a      	adds	r2, r3, #1
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2206      	movs	r2, #6
 800c82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2290      	movs	r2, #144	; 0x90
 800c834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3b02      	subs	r3, #2
 800c840:	68f9      	ldr	r1, [r7, #12]
 800c842:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800c844:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 800c864:	2300      	movs	r3, #0
 800c866:	e07a      	b.n	800c95e <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	3301      	adds	r3, #1
 800c86c:	61fb      	str	r3, [r7, #28]
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	2b03      	cmp	r3, #3
 800c872:	d9aa      	bls.n	800c7ca <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800c87a:	1e5a      	subs	r2, r3, #1
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	1cda      	adds	r2, r3, #3
 800c894:	68f9      	ldr	r1, [r7, #12]
 800c896:	4613      	mov	r3, r2
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	440b      	add	r3, r1
 800c8a0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d108      	bne.n	800c8bc <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f000 f85b 	bl	800c966 <_fx_utility_FAT_flush>
 800c8b0:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	e050      	b.n	800c95e <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	3318      	adds	r3, #24
 800c8c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f103 0218 	add.w	r2, r3, #24
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	4614      	mov	r4, r2
 800c8da:	330c      	adds	r3, #12
 800c8dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	330c      	adds	r3, #12
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d027      	beq.n	800c95c <_fx_utility_FAT_entry_write+0x1de>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d124      	bne.n	800c95c <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2206      	movs	r2, #6
 800c924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2290      	movs	r2, #144	; 0x90
 800c92c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	3b02      	subs	r3, #2
 800c938:	68f9      	ldr	r1, [r7, #12]
 800c93a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800c93c:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 800c940:	441a      	add	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3724      	adds	r7, #36	; 0x24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd90      	pop	{r4, r7, pc}

0800c966 <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 800c966:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c96a:	b09a      	sub	sp, #104	; 0x68
 800c96c:	af04      	add	r7, sp, #16
 800c96e:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800c97e:	2300      	movs	r3, #0
 800c980:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c982:	e337      	b.n	800cff4 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 800c984:	69f9      	ldr	r1, [r7, #28]
 800c986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c988:	4613      	mov	r3, r2
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	440b      	add	r3, r1
 800c992:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 8325 	beq.w	800cfe8 <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 800c99e:	69f9      	ldr	r1, [r7, #28]
 800c9a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	4413      	add	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	440b      	add	r3, r1
 800c9ac:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 816c 	beq.w	800cc96 <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800c9be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c0:	005a      	lsls	r2, r3, #1
 800c9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c4:	4413      	add	r3, r2
 800c9c6:	085b      	lsrs	r3, r3, #1
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9d0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c9d8:	4413      	add	r3, r2
 800c9da:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 800c9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9e0:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	461c      	mov	r4, r3
 800c9e8:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c9ee:	2302      	movs	r3, #2
 800c9f0:	9302      	str	r3, [sp, #8]
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	9301      	str	r3, [sp, #4]
 800c9f6:	9200      	str	r2, [sp, #0]
 800c9f8:	4622      	mov	r2, r4
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	69f8      	ldr	r0, [r7, #28]
 800c9fe:	f001 f8a3 	bl	800db48 <_fx_utility_logical_sector_read>
 800ca02:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	e2f7      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 800ca0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca14:	d037      	beq.n	800ca86 <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 800ca1c:	69f9      	ldr	r1, [r7, #28]
 800ca1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca20:	4613      	mov	r3, r2
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	4413      	add	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	440b      	add	r3, r1
 800ca2a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800ca32:	69f9      	ldr	r1, [r7, #28]
 800ca34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca36:	4613      	mov	r3, r2
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	440b      	add	r3, r1
 800ca40:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800ca48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d005      	beq.n	800ca5e <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800ca52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca54:	091b      	lsrs	r3, r3, #4
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca5a:	7013      	strb	r3, [r2, #0]
 800ca5c:	e010      	b.n	800ca80 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca66:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	0a1b      	lsrs	r3, r3, #8
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 030f 	and.w	r3, r3, #15
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca7e:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 800ca80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca84:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800ca86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca88:	653b      	str	r3, [r7, #80]	; 0x50
 800ca8a:	e0a0      	b.n	800cbce <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 800ca8c:	69f9      	ldr	r1, [r7, #28]
 800ca8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	440b      	add	r3, r1
 800ca9a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 808a 	beq.w	800cbba <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800caa6:	69f9      	ldr	r1, [r7, #28]
 800caa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800caaa:	4613      	mov	r3, r2
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	440b      	add	r3, r1
 800cab4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800cabc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cabe:	005a      	lsls	r2, r3, #1
 800cac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac2:	4413      	add	r3, r2
 800cac4:	085b      	lsrs	r3, r3, #1
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cacc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cace:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cad6:	4413      	add	r3, r2
 800cad8:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 800cada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cadc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cade:	429a      	cmp	r2, r3
 800cae0:	d16d      	bne.n	800cbbe <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800cae2:	69f9      	ldr	r1, [r7, #28]
 800cae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cae6:	4613      	mov	r3, r2
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	4413      	add	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	440b      	add	r3, r1
 800caf0:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cafe:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cb04:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 800cb08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb12:	3b01      	subs	r3, #1
 800cb14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d101      	bne.n	800cb1e <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 800cb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1c:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	689a      	ldr	r2, [r3, #8]
 800cb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb24:	4413      	add	r3, r2
 800cb26:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800cb28:	69f9      	ldr	r1, [r7, #28]
 800cb2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	440b      	add	r3, r1
 800cb36:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800cb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d01b      	beq.n	800cb80 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	f003 030f 	and.w	r3, r3, #15
 800cb50:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	011b      	lsls	r3, r3, #4
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb64:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800cb66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d029      	beq.n	800cbc2 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	3301      	adds	r3, #1
 800cb72:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	091b      	lsrs	r3, r3, #4
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7c:	7013      	strb	r3, [r2, #0]
 800cb7e:	e023      	b.n	800cbc8 <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb86:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800cb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d01a      	beq.n	800cbc6 <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	3301      	adds	r3, #1
 800cb94:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb9e:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	0a1b      	lsrs	r3, r3, #8
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	f003 030f 	and.w	r3, r3, #15
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbb6:	7013      	strb	r3, [r2, #0]
 800cbb8:	e006      	b.n	800cbc8 <_fx_utility_FAT_flush+0x262>
                        continue;
 800cbba:	bf00      	nop
 800cbbc:	e004      	b.n	800cbc8 <_fx_utility_FAT_flush+0x262>
                        continue;
 800cbbe:	bf00      	nop
 800cbc0:	e002      	b.n	800cbc8 <_fx_utility_FAT_flush+0x262>
                            continue;
 800cbc2:	bf00      	nop
 800cbc4:	e000      	b.n	800cbc8 <_fx_utility_FAT_flush+0x262>
                            continue;
 800cbc6:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbca:	3301      	adds	r3, #1
 800cbcc:	653b      	str	r3, [r7, #80]	; 0x50
 800cbce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd0:	2b0f      	cmp	r3, #15
 800cbd2:	f67f af5b 	bls.w	800ca8c <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cbd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd8:	2200      	movs	r2, #0
 800cbda:	4698      	mov	r8, r3
 800cbdc:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	9302      	str	r3, [sp, #8]
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	9301      	str	r3, [sp, #4]
 800cbea:	9200      	str	r2, [sp, #0]
 800cbec:	4642      	mov	r2, r8
 800cbee:	464b      	mov	r3, r9
 800cbf0:	69f8      	ldr	r0, [r7, #28]
 800cbf2:	f001 fa3d 	bl	800e070 <_fx_utility_logical_sector_write>
 800cbf6:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	e1fd      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d105      	bne.n	800cc1a <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc12:	0a9b      	lsrs	r3, r3, #10
 800cc14:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cc18:	e006      	b.n	800cc28 <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1e:	0a9b      	lsrs	r3, r3, #10
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	3301      	adds	r3, #1
 800cc24:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 800cc28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 800cc30:	2302      	movs	r3, #2
 800cc32:	e1e4      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc3a:	1ad2      	subs	r2, r2, r3
 800cc3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cc40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc44:	08db      	lsrs	r3, r3, #3
 800cc46:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cc48:	69fa      	ldr	r2, [r7, #28]
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc5c:	1a9a      	subs	r2, r3, r2
 800cc5e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cc62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc66:	f003 0207 	and.w	r2, r3, #7
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	4093      	lsls	r3, r2
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	430b      	orrs	r3, r1
 800cc72:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cc74:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800cc76:	69fa      	ldr	r2, [r7, #28]
 800cc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800cc80:	460b      	mov	r3, r1
 800cc82:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 800cc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc8a:	f000 81af 	beq.w	800cfec <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 800cc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc90:	3301      	adds	r3, #1
 800cc92:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cc94:	e6a5      	b.n	800c9e2 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f040 80d2 	bne.w	800ce44 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 800cca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccac:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ccb4:	4413      	add	r3, r2
 800ccb6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800ccb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccba:	2200      	movs	r2, #0
 800ccbc:	469a      	mov	sl, r3
 800ccbe:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	9200      	str	r2, [sp, #0]
 800ccce:	4652      	mov	r2, sl
 800ccd0:	465b      	mov	r3, fp
 800ccd2:	69f8      	ldr	r0, [r7, #28]
 800ccd4:	f000 ff38 	bl	800db48 <_fx_utility_logical_sector_read>
 800ccd8:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	e18c      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce6:	653b      	str	r3, [r7, #80]	; 0x50
 800cce8:	e057      	b.n	800cd9a <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800ccea:	69f9      	ldr	r1, [r7, #28]
 800ccec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccee:	4613      	mov	r3, r2
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	4413      	add	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	440b      	add	r3, r1
 800ccf8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d045      	beq.n	800cd8e <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800cd02:	69f9      	ldr	r1, [r7, #28]
 800cd04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	440b      	add	r3, r1
 800cd10:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 800cd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd24:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cd2c:	4413      	add	r3, r2
 800cd2e:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800cd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d12c      	bne.n	800cd92 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd3e:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cd44:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800cd48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	689a      	ldr	r2, [r3, #8]
 800cd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd54:	4413      	add	r3, r2
 800cd56:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800cd58:	69f9      	ldr	r1, [r7, #28]
 800cd5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	4413      	add	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	440b      	add	r3, r1
 800cd66:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 800cd6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd72:	f7ff fa88 	bl	800c286 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800cd76:	69f9      	ldr	r1, [r7, #28]
 800cd78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	e002      	b.n	800cd94 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800cd8e:	bf00      	nop
 800cd90:	e000      	b.n	800cd94 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800cd92:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cd94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd96:	3301      	adds	r3, #1
 800cd98:	653b      	str	r3, [r7, #80]	; 0x50
 800cd9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd9c:	2b0f      	cmp	r3, #15
 800cd9e:	d9a4      	bls.n	800ccea <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cda2:	2200      	movs	r2, #0
 800cda4:	613b      	str	r3, [r7, #16]
 800cda6:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cdac:	2302      	movs	r3, #2
 800cdae:	9302      	str	r3, [sp, #8]
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	9301      	str	r3, [sp, #4]
 800cdb4:	9200      	str	r2, [sp, #0]
 800cdb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cdba:	69f8      	ldr	r0, [r7, #28]
 800cdbc:	f001 f958 	bl	800e070 <_fx_utility_logical_sector_write>
 800cdc0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d001      	beq.n	800cdcc <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	e118      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d105      	bne.n	800cde4 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cddc:	0a9b      	lsrs	r3, r3, #10
 800cdde:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cde2:	e006      	b.n	800cdf2 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde8:	0a9b      	lsrs	r3, r3, #10
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	3301      	adds	r3, #1
 800cdee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdf8:	1ad2      	subs	r2, r2, r3
 800cdfa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cdfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce02:	08db      	lsrs	r3, r3, #3
 800ce04:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800ce06:	69fa      	ldr	r2, [r7, #28]
 800ce08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce1a:	1a9a      	subs	r2, r3, r2
 800ce1c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ce20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce24:	f003 0207 	and.w	r2, r3, #7
 800ce28:	2301      	movs	r3, #1
 800ce2a:	4093      	lsls	r3, r2
 800ce2c:	b25b      	sxtb	r3, r3
 800ce2e:	430b      	orrs	r3, r1
 800ce30:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800ce32:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800ce34:	69fa      	ldr	r2, [r7, #28]
 800ce36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce38:	4413      	add	r3, r2
 800ce3a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800ce3e:	460b      	mov	r3, r1
 800ce40:	7013      	strb	r3, [r2, #0]
 800ce42:	e0d4      	b.n	800cfee <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 800ce44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce50:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ce58:	4413      	add	r3, r2
 800ce5a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800ce5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce5e:	2200      	movs	r2, #0
 800ce60:	60bb      	str	r3, [r7, #8]
 800ce62:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800ce68:	2302      	movs	r3, #2
 800ce6a:	9302      	str	r3, [sp, #8]
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	9301      	str	r3, [sp, #4]
 800ce70:	9200      	str	r2, [sp, #0]
 800ce72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce76:	69f8      	ldr	r0, [r7, #28]
 800ce78:	f000 fe66 	bl	800db48 <_fx_utility_logical_sector_read>
 800ce7c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	e0ba      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800ce88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce8c:	e057      	b.n	800cf3e <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800ce8e:	69f9      	ldr	r1, [r7, #28]
 800ce90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce92:	4613      	mov	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4413      	add	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	440b      	add	r3, r1
 800ce9c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d045      	beq.n	800cf32 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800cea6:	69f9      	ldr	r1, [r7, #28]
 800cea8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ceaa:	4613      	mov	r3, r2
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 800cebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cec8:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ced0:	4413      	add	r3, r2
 800ced2:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800ced4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d12c      	bne.n	800cf36 <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cee2:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cee8:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800ceec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	689a      	ldr	r2, [r3, #8]
 800cef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef8:	4413      	add	r3, r2
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800cefc:	69f9      	ldr	r1, [r7, #28]
 800cefe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf00:	4613      	mov	r3, r2
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	440b      	add	r3, r1
 800cf0a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 800cf12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf16:	f7ff f9e8 	bl	800c2ea <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800cf1a:	69f9      	ldr	r1, [r7, #28]
 800cf1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	440b      	add	r3, r1
 800cf28:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	e002      	b.n	800cf38 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 800cf32:	bf00      	nop
 800cf34:	e000      	b.n	800cf38 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 800cf36:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cf38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	653b      	str	r3, [r7, #80]	; 0x50
 800cf3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf40:	2b0f      	cmp	r3, #15
 800cf42:	d9a4      	bls.n	800ce8e <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cf44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf46:	2200      	movs	r2, #0
 800cf48:	603b      	str	r3, [r7, #0]
 800cf4a:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cf50:	2302      	movs	r3, #2
 800cf52:	9302      	str	r3, [sp, #8]
 800cf54:	2301      	movs	r3, #1
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	9200      	str	r2, [sp, #0]
 800cf5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf5e:	69f8      	ldr	r0, [r7, #28]
 800cf60:	f001 f886 	bl	800e070 <_fx_utility_logical_sector_write>
 800cf64:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800cf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	e046      	b.n	800cffe <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d105      	bne.n	800cf88 <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf80:	0a9b      	lsrs	r3, r3, #10
 800cf82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cf86:	e006      	b.n	800cf96 <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf8c:	0a9b      	lsrs	r3, r3, #10
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	3301      	adds	r3, #1
 800cf92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf9c:	1ad2      	subs	r2, r2, r3
 800cf9e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cfa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa6:	08db      	lsrs	r3, r3, #3
 800cfa8:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	4413      	add	r3, r2
 800cfb0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfbe:	1a9a      	subs	r2, r3, r2
 800cfc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cfc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc8:	f003 0207 	and.w	r2, r3, #7
 800cfcc:	2301      	movs	r3, #1
 800cfce:	4093      	lsls	r3, r2
 800cfd0:	b25b      	sxtb	r3, r3
 800cfd2:	430b      	orrs	r3, r1
 800cfd4:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cfd6:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800cfd8:	69fa      	ldr	r2, [r7, #28]
 800cfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfdc:	4413      	add	r3, r2
 800cfde:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	7013      	strb	r3, [r2, #0]
 800cfe6:	e002      	b.n	800cfee <_fx_utility_FAT_flush+0x688>
            continue;
 800cfe8:	bf00      	nop
 800cfea:	e000      	b.n	800cfee <_fx_utility_FAT_flush+0x688>
                    break;
 800cfec:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800cfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff0:	3301      	adds	r3, #1
 800cff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff6:	2b0f      	cmp	r3, #15
 800cff8:	f67f acc4 	bls.w	800c984 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3758      	adds	r7, #88	; 0x58
 800d002:	46bd      	mov	sp, r7
 800d004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d008 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 800d008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d00c:	b092      	sub	sp, #72	; 0x48
 800d00e:	af04      	add	r7, sp, #16
 800d010:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d105      	bne.n	800d02a <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d022:	0a9b      	lsrs	r3, r3, #10
 800d024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d028:	e006      	b.n	800d038 <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d02e:	0a9b      	lsrs	r3, r3, #10
 800d030:	b2db      	uxtb	r3, r3
 800d032:	3301      	adds	r3, #1
 800d034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800d038:	2300      	movs	r3, #0
 800d03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d03c:	e089      	b.n	800d152 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	08db      	lsrs	r3, r3, #3
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	4413      	add	r3, r2
 800d046:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 800d04a:	461a      	mov	r2, r3
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	fa42 f303 	asr.w	r3, r2, r3
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d075      	beq.n	800d14a <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 800d05e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d064:	fb03 f202 	mul.w	r2, r3, r2
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d06c:	4413      	add	r3, r2
 800d06e:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 800d070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d076:	4413      	add	r3, r2
 800d078:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d082:	4413      	add	r3, r2
 800d084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d086:	429a      	cmp	r2, r3
 800d088:	d95a      	bls.n	800d140 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d092:	4413      	add	r3, r2
 800d094:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 800d096:	e053      	b.n	800d140 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800d098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09a:	2200      	movs	r2, #0
 800d09c:	613b      	str	r3, [r7, #16]
 800d09e:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800d0a4:	2302      	movs	r3, #2
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	9301      	str	r3, [sp, #4]
 800d0ac:	9200      	str	r2, [sp, #0]
 800d0ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d0b2:	69f8      	ldr	r0, [r7, #28]
 800d0b4:	f000 fd48 	bl	800db48 <_fx_utility_logical_sector_read>
 800d0b8:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	e05c      	b.n	800d17e <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 800d0cc:	e032      	b.n	800d134 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 800d0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	60bb      	str	r3, [r7, #8]
 800d0d4:	60fa      	str	r2, [r7, #12]
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4698      	mov	r8, r3
 800d0dc:	4691      	mov	r9, r2
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	469a      	mov	sl, r3
 800d0e6:	4693      	mov	fp, r2
 800d0e8:	fb0a f209 	mul.w	r2, sl, r9
 800d0ec:	fb08 f30b 	mul.w	r3, r8, fp
 800d0f0:	4413      	add	r3, r2
 800d0f2:	fba8 450a 	umull	r4, r5, r8, sl
 800d0f6:	442b      	add	r3, r5
 800d0f8:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 800d0fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d0fe:	460b      	mov	r3, r1
 800d100:	191b      	adds	r3, r3, r4
 800d102:	603b      	str	r3, [r7, #0]
 800d104:	4613      	mov	r3, r2
 800d106:	416b      	adcs	r3, r5
 800d108:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 800d10e:	2302      	movs	r3, #2
 800d110:	9302      	str	r3, [sp, #8]
 800d112:	2301      	movs	r3, #1
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	9200      	str	r2, [sp, #0]
 800d118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d11c:	69f8      	ldr	r0, [r7, #28]
 800d11e:	f000 ffa7 	bl	800e070 <_fx_utility_logical_sector_write>
 800d122:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	e027      	b.n	800d17e <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	3b01      	subs	r3, #1
 800d132:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1c9      	bne.n	800d0ce <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 800d13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13c:	3301      	adds	r3, #1
 800d13e:	637b      	str	r3, [r7, #52]	; 0x34
 800d140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d144:	429a      	cmp	r2, r3
 800d146:	d3a7      	bcc.n	800d098 <_fx_utility_FAT_map_flush+0x90>
 800d148:	e000      	b.n	800d14c <_fx_utility_FAT_map_flush+0x144>
            continue;
 800d14a:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	3301      	adds	r3, #1
 800d150:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d158:	f4ff af71 	bcc.w	800d03e <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800d15c:	2300      	movs	r3, #0
 800d15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d160:	e009      	b.n	800d176 <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800d162:	69fa      	ldr	r2, [r7, #28]
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	4413      	add	r3, r2
 800d168:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	3301      	adds	r3, #1
 800d174:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	2b7f      	cmp	r3, #127	; 0x7f
 800d17a:	d9f2      	bls.n	800d162 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3738      	adds	r7, #56	; 0x38
 800d182:	46bd      	mov	sp, r7
 800d184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d188 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 800d188:	b480      	push	{r7}
 800d18a:	b08f      	sub	sp, #60	; 0x3c
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 8275 	beq.w	800d688 <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d1a6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6a1a      	ldr	r2, [r3, #32]
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	f003 031f 	and.w	r3, r3, #31
 800d1b8:	2101      	movs	r1, #1
 800d1ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d1be:	431a      	orrs	r2, r3
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800d1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	005b      	lsls	r3, r3, #1
 800d1d0:	4413      	add	r3, r2
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800d1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e0:	7c5b      	ldrb	r3, [r3, #17]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d015      	beq.n	800d212 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 800d1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d1ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1f0:	4299      	cmp	r1, r3
 800d1f2:	bf08      	it	eq
 800d1f4:	4290      	cmpeq	r0, r2
 800d1f6:	d10c      	bne.n	800d212 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800d1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d20e:	2300      	movs	r3, #0
 800d210:	e27e      	b.n	800d710 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	3318      	adds	r3, #24
 800d216:	7c5b      	ldrb	r3, [r3, #17]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d060      	beq.n	800d2de <_fx_utility_logical_sector_cache_entry_read+0x156>
 800d21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21e:	3318      	adds	r3, #24
 800d220:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d224:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d228:	4299      	cmp	r1, r3
 800d22a:	bf08      	it	eq
 800d22c:	4290      	cmpeq	r0, r2
 800d22e:	d156      	bne.n	800d2de <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d232:	3318      	adds	r3, #24
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800d24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d250:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d254:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25a:	7c1b      	ldrb	r3, [r3, #16]
 800d25c:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800d260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d262:	7c5b      	ldrb	r3, [r3, #17]
 800d264:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800d268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26a:	7c9b      	ldrb	r3, [r3, #18]
 800d26c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d272:	3318      	adds	r3, #24
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d278:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 800d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27c:	3318      	adds	r3, #24
 800d27e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d282:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d284:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28a:	3318      	adds	r3, #24
 800d28c:	7c1a      	ldrb	r2, [r3, #16]
 800d28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d290:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 800d292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d294:	3318      	adds	r3, #24
 800d296:	7c5a      	ldrb	r2, [r3, #17]
 800d298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29a:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	3318      	adds	r3, #24
 800d2a0:	7c9a      	ldrb	r2, [r3, #18]
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a8:	3318      	adds	r3, #24
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800d2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b0:	f103 0118 	add.w	r1, r3, #24
 800d2b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800d2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2be:	3318      	adds	r3, #24
 800d2c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d2c4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800d2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c8:	3318      	adds	r3, #24
 800d2ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d2ce:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 800d2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d2:	3318      	adds	r3, #24
 800d2d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d2d8:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e218      	b.n	800d710 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 800d2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e0:	3330      	adds	r3, #48	; 0x30
 800d2e2:	7c5b      	ldrb	r3, [r3, #17]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 8086 	beq.w	800d3f6 <_fx_utility_logical_sector_cache_entry_read+0x26e>
 800d2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ec:	3330      	adds	r3, #48	; 0x30
 800d2ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d2f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2f6:	4299      	cmp	r1, r3
 800d2f8:	bf08      	it	eq
 800d2fa:	4290      	cmpeq	r0, r2
 800d2fc:	d17b      	bne.n	800d3f6 <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d300:	3330      	adds	r3, #48	; 0x30
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800d31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d322:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d328:	7c1b      	ldrb	r3, [r3, #16]
 800d32a:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	7c5b      	ldrb	r3, [r3, #17]
 800d332:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d338:	7c9b      	ldrb	r3, [r3, #18]
 800d33a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d340:	3330      	adds	r3, #48	; 0x30
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d346:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 800d348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34a:	3330      	adds	r3, #48	; 0x30
 800d34c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d350:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d352:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800d356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d358:	3330      	adds	r3, #48	; 0x30
 800d35a:	7c1a      	ldrb	r2, [r3, #16]
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 800d360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d362:	3330      	adds	r3, #48	; 0x30
 800d364:	7c5a      	ldrb	r2, [r3, #17]
 800d366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d368:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 800d36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36c:	3330      	adds	r3, #48	; 0x30
 800d36e:	7c9a      	ldrb	r2, [r3, #18]
 800d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d372:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d376:	f103 0218 	add.w	r2, r3, #24
 800d37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37c:	3330      	adds	r3, #48	; 0x30
 800d37e:	6812      	ldr	r2, [r2, #0]
 800d380:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 800d382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d384:	3318      	adds	r3, #24
 800d386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d388:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800d38c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d390:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d396:	f103 0218 	add.w	r2, r3, #24
 800d39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39c:	3330      	adds	r3, #48	; 0x30
 800d39e:	7c12      	ldrb	r2, [r2, #16]
 800d3a0:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 800d3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a4:	f103 0218 	add.w	r2, r3, #24
 800d3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3aa:	3330      	adds	r3, #48	; 0x30
 800d3ac:	7c52      	ldrb	r2, [r2, #17]
 800d3ae:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 800d3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b2:	f103 0218 	add.w	r2, r3, #24
 800d3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b8:	3330      	adds	r3, #48	; 0x30
 800d3ba:	7c92      	ldrb	r2, [r2, #18]
 800d3bc:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800d3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c0:	3318      	adds	r3, #24
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c8:	f103 0118 	add.w	r1, r3, #24
 800d3cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	3318      	adds	r3, #24
 800d3d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d3dc:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800d3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e0:	3318      	adds	r3, #24
 800d3e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d3e6:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 800d3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ea:	3318      	adds	r3, #24
 800d3ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d3f0:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e18c      	b.n	800d710 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 800d3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f8:	3348      	adds	r3, #72	; 0x48
 800d3fa:	7c5b      	ldrb	r3, [r3, #17]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 80ac 	beq.w	800d55a <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 800d402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d404:	3348      	adds	r3, #72	; 0x48
 800d406:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d40a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d40e:	4299      	cmp	r1, r3
 800d410:	bf08      	it	eq
 800d412:	4290      	cmpeq	r0, r2
 800d414:	f040 80a1 	bne.w	800d55a <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 800d418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41a:	3348      	adds	r3, #72	; 0x48
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800d430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800d436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d438:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d43c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d442:	7c1b      	ldrb	r3, [r3, #16]
 800d444:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800d448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44a:	7c5b      	ldrb	r3, [r3, #17]
 800d44c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800d450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d452:	7c9b      	ldrb	r3, [r3, #18]
 800d454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 800d458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45a:	3348      	adds	r3, #72	; 0x48
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d460:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 800d462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d464:	3348      	adds	r3, #72	; 0x48
 800d466:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d46a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d46c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 800d470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d472:	3348      	adds	r3, #72	; 0x48
 800d474:	7c1a      	ldrb	r2, [r3, #16]
 800d476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d478:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 800d47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47c:	3348      	adds	r3, #72	; 0x48
 800d47e:	7c5a      	ldrb	r2, [r3, #17]
 800d480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d482:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 800d484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d486:	3348      	adds	r3, #72	; 0x48
 800d488:	7c9a      	ldrb	r2, [r3, #18]
 800d48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d48c:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d490:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d496:	3348      	adds	r3, #72	; 0x48
 800d498:	6812      	ldr	r2, [r2, #0]
 800d49a:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 800d49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49e:	3330      	adds	r3, #48	; 0x30
 800d4a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a2:	f102 0148 	add.w	r1, r2, #72	; 0x48
 800d4a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d4aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800d4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b6:	3348      	adds	r3, #72	; 0x48
 800d4b8:	7c12      	ldrb	r2, [r2, #16]
 800d4ba:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 800d4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c4:	3348      	adds	r3, #72	; 0x48
 800d4c6:	7c52      	ldrb	r2, [r2, #17]
 800d4c8:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 800d4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d2:	3348      	adds	r3, #72	; 0x48
 800d4d4:	7c92      	ldrb	r2, [r2, #18]
 800d4d6:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4da:	f103 0218 	add.w	r2, r3, #24
 800d4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e0:	3330      	adds	r3, #48	; 0x30
 800d4e2:	6812      	ldr	r2, [r2, #0]
 800d4e4:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	3318      	adds	r3, #24
 800d4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4ec:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800d4f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d4f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fa:	f103 0218 	add.w	r2, r3, #24
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d500:	3330      	adds	r3, #48	; 0x30
 800d502:	7c12      	ldrb	r2, [r2, #16]
 800d504:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 800d506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d508:	f103 0218 	add.w	r2, r3, #24
 800d50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50e:	3330      	adds	r3, #48	; 0x30
 800d510:	7c52      	ldrb	r2, [r2, #17]
 800d512:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 800d514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d516:	f103 0218 	add.w	r2, r3, #24
 800d51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d51c:	3330      	adds	r3, #48	; 0x30
 800d51e:	7c92      	ldrb	r2, [r2, #18]
 800d520:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800d522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d524:	3318      	adds	r3, #24
 800d526:	693a      	ldr	r2, [r7, #16]
 800d528:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800d52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52c:	f103 0118 	add.w	r1, r3, #24
 800d530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d534:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800d538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53a:	3318      	adds	r3, #24
 800d53c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d540:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800d542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d544:	3318      	adds	r3, #24
 800d546:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d54a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 800d54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54e:	3318      	adds	r3, #24
 800d550:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d554:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d556:	2300      	movs	r3, #0
 800d558:	e0da      	b.n	800d710 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 800d55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55c:	3348      	adds	r3, #72	; 0x48
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 800d562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d564:	3348      	adds	r3, #72	; 0x48
 800d566:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d56a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	3348      	adds	r3, #72	; 0x48
 800d572:	7c1b      	ldrb	r3, [r3, #16]
 800d574:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 800d578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57a:	3348      	adds	r3, #72	; 0x48
 800d57c:	7c5b      	ldrb	r3, [r3, #17]
 800d57e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 800d582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d584:	3348      	adds	r3, #72	; 0x48
 800d586:	7c9b      	ldrb	r3, [r3, #18]
 800d588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d594:	3348      	adds	r3, #72	; 0x48
 800d596:	6812      	ldr	r2, [r2, #0]
 800d598:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 800d59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59c:	3330      	adds	r3, #48	; 0x30
 800d59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5a0:	f102 0148 	add.w	r1, r2, #72	; 0x48
 800d5a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d5a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b4:	3348      	adds	r3, #72	; 0x48
 800d5b6:	7c12      	ldrb	r2, [r2, #16]
 800d5b8:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 800d5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c2:	3348      	adds	r3, #72	; 0x48
 800d5c4:	7c52      	ldrb	r2, [r2, #17]
 800d5c6:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d0:	3348      	adds	r3, #72	; 0x48
 800d5d2:	7c92      	ldrb	r2, [r2, #18]
 800d5d4:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d8:	f103 0218 	add.w	r2, r3, #24
 800d5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5de:	3330      	adds	r3, #48	; 0x30
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 800d5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e6:	3318      	adds	r3, #24
 800d5e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ea:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800d5ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d5f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f8:	f103 0218 	add.w	r2, r3, #24
 800d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fe:	3330      	adds	r3, #48	; 0x30
 800d600:	7c12      	ldrb	r2, [r2, #16]
 800d602:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 800d604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d606:	f103 0218 	add.w	r2, r3, #24
 800d60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60c:	3330      	adds	r3, #48	; 0x30
 800d60e:	7c52      	ldrb	r2, [r2, #17]
 800d610:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 800d612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d614:	f103 0218 	add.w	r2, r3, #24
 800d618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61a:	3330      	adds	r3, #48	; 0x30
 800d61c:	7c92      	ldrb	r2, [r2, #18]
 800d61e:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 800d620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d622:	3318      	adds	r3, #24
 800d624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d626:	6812      	ldr	r2, [r2, #0]
 800d628:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 800d62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62c:	f103 0118 	add.w	r1, r3, #24
 800d630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d632:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d636:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63c:	3318      	adds	r3, #24
 800d63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d640:	7c12      	ldrb	r2, [r2, #16]
 800d642:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 800d644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d646:	3318      	adds	r3, #24
 800d648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d64a:	7c52      	ldrb	r2, [r2, #17]
 800d64c:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	3318      	adds	r3, #24
 800d652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d654:	7c92      	ldrb	r2, [r2, #18]
 800d656:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65c:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 800d65e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d664:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 800d668:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66e:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 800d670:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d676:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 800d678:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67e:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 800d680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	e042      	b.n	800d70e <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 800d694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d696:	2200      	movs	r2, #0
 800d698:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 800d69a:	e033      	b.n	800d704 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800d69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69e:	7c5b      	ldrb	r3, [r3, #17]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d025      	beq.n	800d6f0 <_fx_utility_logical_sector_cache_entry_read+0x568>
 800d6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d6aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6ae:	4299      	cmp	r1, r3
 800d6b0:	bf08      	it	eq
 800d6b2:	4290      	cmpeq	r0, r2
 800d6b4:	d11c      	bne.n	800d6f0 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 800d6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00b      	beq.n	800d6de <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c8:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 800d6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6cc:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 800d6ce:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d6:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6dc:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e00f      	b.n	800d710 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d005      	beq.n	800d704 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 800d6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6fc:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 800d6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d700:	695b      	ldr	r3, [r3, #20]
 800d702:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	1e5a      	subs	r2, r3, #1
 800d708:	633a      	str	r2, [r7, #48]	; 0x30
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1c6      	bne.n	800d69c <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 800d70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#else
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 800d710:	4618      	mov	r0, r3
 800d712:	373c      	adds	r7, #60	; 0x3c
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <_fx_utility_logical_sector_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 800d71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d720:	b094      	sub	sp, #80	; 0x50
 800d722:	af00      	add	r7, sp, #0
 800d724:	61f8      	str	r0, [r7, #28]
 800d726:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 800d72a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d72e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d732:	1884      	adds	r4, r0, r2
 800d734:	eb41 0503 	adc.w	r5, r1, r3
 800d738:	1e63      	subs	r3, r4, #1
 800d73a:	60bb      	str	r3, [r7, #8]
 800d73c:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d746:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74e:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	2b00      	cmp	r3, #0
 800d756:	f040 80b4 	bne.w	800d8c2 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	69db      	ldr	r3, [r3, #28]
 800d764:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 800d766:	e09f      	b.n	800d8a8 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d103      	bne.n	800d776 <_fx_utility_logical_sector_flush+0x5a>
 800d76e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 81de 	beq.w	800db32 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 800d776:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d77a:	4313      	orrs	r3, r2
 800d77c:	f000 81db 	beq.w	800db36 <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 800d780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d782:	7c5b      	ldrb	r3, [r3, #17]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 808c 	beq.w	800d8a2 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d78c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 800d790:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d794:	4290      	cmp	r0, r2
 800d796:	eb71 0303 	sbcs.w	r3, r1, r3
 800d79a:	f0c0 8082 	bcc.w	800d8a2 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 800d79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d7a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d7a8:	4290      	cmp	r0, r2
 800d7aa:	eb71 0303 	sbcs.w	r3, r1, r3
 800d7ae:	d378      	bcc.n	800d8a2 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b2:	7c1b      	ldrb	r3, [r3, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d04d      	beq.n	800d854 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d148      	bne.n	800d854 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2290      	movs	r2, #144	; 0x90
 800d7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800d7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800d7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800d7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d800:	7c9b      	ldrb	r3, [r3, #18]
 800d802:	461a      	mov	r2, r3
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d80c:	7c9b      	ldrb	r3, [r3, #18]
 800d80e:	2b04      	cmp	r3, #4
 800d810:	d003      	beq.n	800d81a <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	2201      	movs	r2, #1
 800d816:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d820:	69f8      	ldr	r0, [r7, #28]
 800d822:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	2200      	movs	r2, #0
 800d828:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d83c:	e17f      	b.n	800db3e <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800d83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d840:	2200      	movs	r2, #0
 800d842:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d848:	1e5a      	subs	r2, r3, #1
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	3b01      	subs	r3, #1
 800d852:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 800d854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d856:	2b00      	cmp	r3, #0
 800d858:	d018      	beq.n	800d88c <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	2200      	movs	r2, #0
 800d85e:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800d860:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d86a:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d870:	7c1b      	ldrb	r3, [r3, #16]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800d876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d878:	2200      	movs	r2, #0
 800d87a:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d880:	1e5a      	subs	r2, r3, #1
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	3b01      	subs	r3, #1
 800d88a:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 800d88c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d890:	1e51      	subs	r1, r2, #1
 800d892:	6039      	str	r1, [r7, #0]
 800d894:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800d898:	607b      	str	r3, [r7, #4]
 800d89a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d89e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 800d8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 800d8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8aa:	1e5a      	subs	r2, r3, #1
 800d8ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f000 8144 	beq.w	800db3c <_fx_utility_logical_sector_flush+0x420>
 800d8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	f47f af54 	bne.w	800d768 <_fx_utility_logical_sector_flush+0x4c>
 800d8c0:	e13c      	b.n	800db3c <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	6a1b      	ldr	r3, [r3, #32]
 800d8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 800d8d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d8d6:	2a20      	cmp	r2, #32
 800d8d8:	f173 0300 	sbcs.w	r3, r3, #0
 800d8dc:	d202      	bcs.n	800d8e4 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8e2:	e121      	b.n	800db28 <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 800d8e8:	e11e      	b.n	800db28 <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d103      	bne.n	800d8f8 <_fx_utility_logical_sector_flush+0x1dc>
 800d8f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 8121 	beq.w	800db3a <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 800d8f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	f000 811d 	beq.w	800db3c <_fx_utility_logical_sector_flush+0x420>
 800d902:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d906:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d90a:	4290      	cmp	r0, r2
 800d90c:	eb71 0303 	sbcs.w	r3, r1, r3
 800d910:	f0c0 8114 	bcc.w	800db3c <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 800d914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d916:	2b00      	cmp	r3, #0
 800d918:	d015      	beq.n	800d946 <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d922:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d926:	4013      	ands	r3, r2
 800d928:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	f003 031f 	and.w	r3, r3, #31
 800d930:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 800d932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	63bb      	str	r3, [r7, #56]	; 0x38
 800d938:	e00d      	b.n	800d956 <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	085b      	lsrs	r3, r3, #1
 800d93e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 800d940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d942:	3301      	adds	r3, #1
 800d944:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 800d946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0f4      	beq.n	800d93a <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 800d950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 800d956:	2300      	movs	r3, #0
 800d958:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800d95a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d95c:	4613      	mov	r3, r2
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	4413      	add	r3, r2
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d968:	69fa      	ldr	r2, [r7, #28]
 800d96a:	4413      	add	r3, r2
 800d96c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 800d96e:	2300      	movs	r3, #0
 800d970:	647b      	str	r3, [r7, #68]	; 0x44
 800d972:	e0a7      	b.n	800dac4 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800d974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d976:	7c5b      	ldrb	r3, [r3, #17]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 8089 	beq.w	800da90 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d980:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800d984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d988:	4290      	cmp	r0, r2
 800d98a:	eb71 0303 	sbcs.w	r3, r1, r3
 800d98e:	d37f      	bcc.n	800da90 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 800d990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d992:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d996:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d99a:	4290      	cmp	r0, r2
 800d99c:	eb71 0303 	sbcs.w	r3, r1, r3
 800d9a0:	d376      	bcc.n	800da90 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9a4:	7c1b      	ldrb	r3, [r3, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d04d      	beq.n	800da46 <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d148      	bne.n	800da46 <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800d9ba:	1c5a      	adds	r2, r3, #1
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	2290      	movs	r2, #144	; 0x90
 800d9ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800d9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800d9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800d9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f2:	7c9b      	ldrb	r3, [r3, #18]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800d9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fe:	7c9b      	ldrb	r3, [r3, #18]
 800da00:	2b04      	cmp	r3, #4
 800da02:	d003      	beq.n	800da0c <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	2201      	movs	r2, #1
 800da08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800da12:	69f8      	ldr	r0, [r7, #28]
 800da14:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	2200      	movs	r2, #0
 800da1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d003      	beq.n	800da30 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da2e:	e086      	b.n	800db3e <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800da30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da32:	2200      	movs	r2, #0
 800da34:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3a:	1e5a      	subs	r2, r3, #1
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	3b01      	subs	r3, #1
 800da44:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 800da46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d018      	beq.n	800da7e <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800da4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da4e:	2200      	movs	r2, #0
 800da50:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800da52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800da54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da5c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 800da60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da62:	7c1b      	ldrb	r3, [r3, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00a      	beq.n	800da7e <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800da68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da6a:	2200      	movs	r2, #0
 800da6c:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	1e5a      	subs	r2, r3, #1
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	3b01      	subs	r3, #1
 800da7c:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 800da7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800da82:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 800da86:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 800da8a:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800da8e:	e006      	b.n	800da9e <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 800da90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da92:	7c5b      	ldrb	r3, [r3, #17]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 800da98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9a:	3301      	adds	r3, #1
 800da9c:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <_fx_utility_logical_sector_flush+0x38e>
 800daa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d011      	beq.n	800dace <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 800daaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800daae:	4313      	orrs	r3, r2
 800dab0:	d102      	bne.n	800dab8 <_fx_utility_logical_sector_flush+0x39c>
 800dab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00c      	beq.n	800dad2 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 800dab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daba:	3318      	adds	r3, #24
 800dabc:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 800dabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac0:	3301      	adds	r3, #1
 800dac2:	647b      	str	r3, [r7, #68]	; 0x44
 800dac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	f67f af54 	bls.w	800d974 <_fx_utility_logical_sector_flush+0x258>
 800dacc:	e002      	b.n	800dad4 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 800dace:	bf00      	nop
 800dad0:	e000      	b.n	800dad4 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 800dad2:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	3380      	adds	r3, #128	; 0x80
 800dad8:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 800dada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dade:	429a      	cmp	r2, r3
 800dae0:	f4ff af3b 	bcc.w	800d95a <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 800dae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00c      	beq.n	800db04 <_fx_utility_logical_sector_flush+0x3e8>
 800daea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daec:	2b00      	cmp	r3, #0
 800daee:	d109      	bne.n	800db04 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	6a1a      	ldr	r2, [r3, #32]
 800daf4:	2101      	movs	r1, #1
 800daf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daf8:	fa01 f303 	lsl.w	r3, r1, r3
 800dafc:	43db      	mvns	r3, r3
 800dafe:	401a      	ands	r2, r3
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 800db04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db06:	2b00      	cmp	r3, #0
 800db08:	d008      	beq.n	800db1c <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 800db0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800db0e:	f112 0a01 	adds.w	sl, r2, #1
 800db12:	f143 0b00 	adc.w	fp, r3, #0
 800db16:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800db1a:	e005      	b.n	800db28 <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	085b      	lsrs	r3, r3, #1
 800db20:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 800db22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db24:	3301      	adds	r3, #1
 800db26:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f47f aedd 	bne.w	800d8ea <_fx_utility_logical_sector_flush+0x1ce>
 800db30:	e004      	b.n	800db3c <_fx_utility_logical_sector_flush+0x420>
                break;
 800db32:	bf00      	nop
 800db34:	e002      	b.n	800db3c <_fx_utility_logical_sector_flush+0x420>
                break;
 800db36:	bf00      	nop
 800db38:	e000      	b.n	800db3c <_fx_utility_logical_sector_flush+0x420>
                break;
 800db3a:	bf00      	nop
        }
    }
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3750      	adds	r7, #80	; 0x50
 800db42:	46bd      	mov	sp, r7
 800db44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db48 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 800db48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db4c:	b09c      	sub	sp, #112	; 0x70
 800db4e:	af04      	add	r7, sp, #16
 800db50:	64f8      	str	r0, [r7, #76]	; 0x4c
 800db52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 800db56:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d106      	bne.n	800db6c <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 800db5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db60:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db68:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 800db6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db76:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800db7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db7c:	689a      	ldr	r2, [r3, #8]
 800db7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db82:	4293      	cmp	r3, r2
 800db84:	f0c0 80d9 	bcc.w	800dd3a <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 800db88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8a:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800db8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db90:	4293      	cmp	r3, r2
 800db92:	f200 80d2 	bhi.w	800dd3a <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 800db96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dba0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dba2:	f7ff faf1 	bl	800d188 <_fx_utility_logical_sector_cache_entry_read>
 800dba6:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 800dba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e259      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 800dbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 800dbc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbc2:	7c5b      	ldrb	r3, [r3, #17]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d049      	beq.n	800dc5c <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 800dbc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbca:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d045      	beq.n	800dc5c <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 800dbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbda:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800dbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800dbe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe8:	2290      	movs	r2, #144	; 0x90
 800dbea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800dbee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800dbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 800dc04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc06:	2201      	movs	r2, #1
 800dc08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800dc0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc0e:	7c9b      	ldrb	r3, [r3, #18]
 800dc10:	461a      	mov	r2, r3
 800dc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800dc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc1a:	7c9b      	ldrb	r3, [r3, #18]
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d003      	beq.n	800dc28 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800dc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc22:	2201      	movs	r2, #1
 800dc24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dc2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dc30:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800dc32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc34:	2200      	movs	r2, #0
 800dc36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 800dc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d003      	beq.n	800dc4c <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 800dc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc4a:	e20c      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800dc4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc4e:	2200      	movs	r2, #0
 800dc50:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 800dc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	1e5a      	subs	r2, r3, #1
 800dc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc5a:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 800dc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dc66:	4290      	cmp	r0, r2
 800dc68:	eb71 0303 	sbcs.w	r3, r1, r3
 800dc6c:	d301      	bcc.n	800dc72 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 800dc6e:	2389      	movs	r3, #137	; 0x89
 800dc70:	e1f9      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800dc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc74:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc7c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800dc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc82:	2200      	movs	r2, #0
 800dc84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800dc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8a:	2290      	movs	r2, #144	; 0x90
 800dc8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800dc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800dc9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 800dca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca4:	2201      	movs	r2, #1
 800dca6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800dcaa:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800dcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 800dcb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800dcb8:	2b04      	cmp	r3, #4
 800dcba:	d103      	bne.n	800dcc4 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 800dcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dcc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dcca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dccc:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 800dcce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800dcd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d11a      	bne.n	800dd16 <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 800dce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dce6:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800dcea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcec:	2201      	movs	r2, #1
 800dcee:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 800dcf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcf2:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800dcf6:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 800dcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d015      	beq.n	800dd2a <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 800dcfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 800dd00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd02:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 800dd04:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 800dd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd08:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 800dd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd0c:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800dd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd12:	61da      	str	r2, [r3, #28]
 800dd14:	e009      	b.n	800dd2a <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800dd16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd18:	2200      	movs	r2, #0
 800dd1a:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800dd1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd26:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800dd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd30:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800dd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd38:	e195      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 800dd3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd3e:	2200      	movs	r2, #0
 800dd40:	469a      	mov	sl, r3
 800dd42:	4693      	mov	fp, r2
 800dd44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd48:	eb1a 0402 	adds.w	r4, sl, r2
 800dd4c:	eb4b 0503 	adc.w	r5, fp, r3
 800dd50:	f114 38ff 	adds.w	r8, r4, #4294967295	; 0xffffffff
 800dd54:	f145 39ff 	adc.w	r9, r5, #4294967295	; 0xffffffff
 800dd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd5e:	2300      	movs	r3, #0
 800dd60:	63ba      	str	r2, [r7, #56]	; 0x38
 800dd62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd64:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4543      	cmp	r3, r8
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	eb73 0309 	sbcs.w	r3, r3, r9
 800dd72:	d22c      	bcs.n	800ddce <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 800dd74:	2389      	movs	r3, #137	; 0x89
 800dd76:	e176      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 800dd78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd84:	f7ff fa00 	bl	800d188 <_fx_utility_logical_sector_cache_entry_read>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d124      	bne.n	800ddd8 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800dd8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd90:	6898      	ldr	r0, [r3, #8]
 800dd92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd96:	461a      	mov	r2, r3
 800dd98:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dd9c:	f000 fad0 	bl	800e340 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 800dda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dda4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dda8:	4413      	add	r3, r2
 800ddaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 800ddae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ddb2:	1c51      	adds	r1, r2, #1
 800ddb4:	61b9      	str	r1, [r7, #24]
 800ddb6:	f143 0300 	adc.w	r3, r3, #0
 800ddba:	61fb      	str	r3, [r7, #28]
 800ddbc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ddc0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 800ddc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 800ddce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1d0      	bne.n	800dd78 <_fx_utility_logical_sector_read+0x230>
 800ddd6:	e000      	b.n	800ddda <_fx_utility_logical_sector_read+0x292>
                break;
 800ddd8:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 800ddda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddde:	2200      	movs	r2, #0
 800dde0:	633b      	str	r3, [r7, #48]	; 0x30
 800dde2:	637a      	str	r2, [r7, #52]	; 0x34
 800dde4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dde8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ddec:	4621      	mov	r1, r4
 800ddee:	1889      	adds	r1, r1, r2
 800ddf0:	62b9      	str	r1, [r7, #40]	; 0x28
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	eb43 0101 	adc.w	r1, r3, r1
 800ddf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ddfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ddfe:	460b      	mov	r3, r1
 800de00:	3b01      	subs	r3, #1
 800de02:	613b      	str	r3, [r7, #16]
 800de04:	4613      	mov	r3, r2
 800de06:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800de0a:	617b      	str	r3, [r7, #20]
 800de0c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800de10:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 800de14:	e02b      	b.n	800de6e <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 800de16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800de20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de22:	f7ff f9b1 	bl	800d188 <_fx_utility_logical_sector_cache_entry_read>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d125      	bne.n	800de78 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 800de2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2e:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 800de30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de34:	3b01      	subs	r3, #1
 800de36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800de3a:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 800de3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de42:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 800de44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 800de48:	461a      	mov	r2, r3
 800de4a:	f000 fa79 	bl	800e340 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 800de4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800de52:	1e51      	subs	r1, r2, #1
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800de60:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 800de64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de68:	3b01      	subs	r3, #1
 800de6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 800de6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1cf      	bne.n	800de16 <_fx_utility_logical_sector_read+0x2ce>
 800de76:	e000      	b.n	800de7a <_fx_utility_logical_sector_read+0x332>
                break;
 800de78:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 800de7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 800de82:	2300      	movs	r3, #0
 800de84:	e0ef      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 800de86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de8a:	2200      	movs	r2, #0
 800de8c:	623b      	str	r3, [r7, #32]
 800de8e:	627a      	str	r2, [r7, #36]	; 0x24
 800de90:	2301      	movs	r3, #1
 800de92:	9302      	str	r3, [sp, #8]
 800de94:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800de98:	e9cd 3400 	strd	r3, r4, [sp]
 800de9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dea0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dea2:	f7ff fc3b 	bl	800d71c <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800dea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800deb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb6:	2200      	movs	r2, #0
 800deb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800debc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800debe:	2290      	movs	r2, #144	; 0x90
 800dec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800dec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800deca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800dece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ded0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 800ded6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dedc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800dee0:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800dee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 800deea:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800deee:	2b04      	cmp	r3, #4
 800def0:	d103      	bne.n	800defa <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 800def2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def4:	2201      	movs	r2, #1
 800def6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800defa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800df00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df02:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 800df04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df06:	2200      	movs	r2, #0
 800df08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 800df0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df12:	2b00      	cmp	r3, #0
 800df14:	f040 80a4 	bne.w	800e060 <_fx_utility_logical_sector_read+0x518>
 800df18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df1a:	695b      	ldr	r3, [r3, #20]
 800df1c:	089b      	lsrs	r3, r3, #2
 800df1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800df22:	429a      	cmp	r2, r3
 800df24:	f080 809c 	bcs.w	800e060 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 800df28:	e095      	b.n	800e056 <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 800df2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df36:	f7ff f927 	bl	800d188 <_fx_utility_logical_sector_cache_entry_read>
 800df3a:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 800df3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d101      	bne.n	800df46 <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 800df42:	2300      	movs	r3, #0
 800df44:	e08f      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 800df46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df48:	7c5b      	ldrb	r3, [r3, #17]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d049      	beq.n	800dfe2 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 800df4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df50:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 800df52:	2b00      	cmp	r3, #0
 800df54:	d045      	beq.n	800dfe2 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 800df56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df58:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df60:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800df64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df66:	2201      	movs	r2, #1
 800df68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800df6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df6e:	2290      	movs	r2, #144	; 0x90
 800df70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800df74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800df7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800df84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 800df8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df8c:	2201      	movs	r2, #1
 800df8e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800df92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df94:	7c9b      	ldrb	r3, [r3, #18]
 800df96:	461a      	mov	r2, r3
 800df98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df9a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800df9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa0:	7c9b      	ldrb	r3, [r3, #18]
 800dfa2:	2b04      	cmp	r3, #4
 800dfa4:	d003      	beq.n	800dfae <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800dfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dfb4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dfb6:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800dfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 800dfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 800dfca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfd0:	e049      	b.n	800e066 <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800dfd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 800dfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	1e5a      	subs	r2, r3, #1
 800dfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe0:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 800dfe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dfe4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dfe8:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800dfec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfee:	2201      	movs	r2, #1
 800dff0:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 800dff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dff4:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800dff8:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 800dffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00a      	beq.n	800e016 <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 800e000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 800e002:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e004:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 800e006:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 800e008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e00a:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 800e00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e00e:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800e010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e012:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e014:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 800e016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e018:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 800e01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 800e01e:	461a      	mov	r2, r3
 800e020:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e024:	f000 f98c 	bl	800e340 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 800e028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e030:	4413      	add	r3, r2
 800e032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 800e036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e03a:	1c51      	adds	r1, r2, #1
 800e03c:	6039      	str	r1, [r7, #0]
 800e03e:	f143 0300 	adc.w	r3, r3, #0
 800e042:	607b      	str	r3, [r7, #4]
 800e044:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e048:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 800e04c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e050:	3b01      	subs	r3, #1
 800e052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 800e056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f47f af65 	bne.w	800df2a <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800e060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 800e066:	4618      	mov	r0, r3
 800e068:	3760      	adds	r7, #96	; 0x60
 800e06a:	46bd      	mov	sp, r7
 800e06c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e070 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 800e070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e074:	b096      	sub	sp, #88	; 0x58
 800e076:	af04      	add	r7, sp, #16
 800e078:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e07a:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 800e084:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800e088:	2b02      	cmp	r3, #2
 800e08a:	d106      	bne.n	800e09a <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 800e08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 800e09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	689a      	ldr	r2, [r3, #8]
 800e0ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	f0c0 80d8 	bcc.w	800e264 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 800e0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b6:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800e0b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	f200 80d2 	bhi.w	800e264 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d030      	beq.n	800e12a <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 800e0c8:	6a3a      	ldr	r2, [r7, #32]
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e0d0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800e0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0dc:	4613      	mov	r3, r2
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	4413      	add	r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800e0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0ea:	4413      	add	r3, r2
 800e0ec:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0f2:	e016      	b.n	800e122 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800e0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0f6:	7c5b      	ldrb	r3, [r3, #17]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00c      	beq.n	800e116 <_fx_utility_logical_sector_write+0xa6>
 800e0fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e102:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e106:	4299      	cmp	r1, r3
 800e108:	bf08      	it	eq
 800e10a:	4290      	cmpeq	r0, r2
 800e10c:	d103      	bne.n	800e116 <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 800e10e:	2301      	movs	r3, #1
 800e110:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 800e114:	e02d      	b.n	800e172 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 800e116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e118:	3301      	adds	r3, #1
 800e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e11e:	3318      	adds	r3, #24
 800e120:	647b      	str	r3, [r7, #68]	; 0x44
 800e122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e124:	2b03      	cmp	r3, #3
 800e126:	d9e5      	bls.n	800e0f4 <_fx_utility_logical_sector_write+0x84>
 800e128:	e023      	b.n	800e172 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 800e12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	69db      	ldr	r3, [r3, #28]
 800e134:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 800e136:	e017      	b.n	800e168 <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800e138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e13a:	7c5b      	ldrb	r3, [r3, #17]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00c      	beq.n	800e15a <_fx_utility_logical_sector_write+0xea>
 800e140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e142:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e146:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e14a:	4299      	cmp	r1, r3
 800e14c:	bf08      	it	eq
 800e14e:	4290      	cmpeq	r0, r2
 800e150:	d103      	bne.n	800e15a <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 800e152:	2301      	movs	r3, #1
 800e154:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 800e158:	e00b      	b.n	800e172 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 800e15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d002      	beq.n	800e168 <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 800e162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e164:	695b      	ldr	r3, [r3, #20]
 800e166:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 800e168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e16a:	1e5a      	subs	r2, r3, #1
 800e16c:	643a      	str	r2, [r7, #64]	; 0x40
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1e2      	bne.n	800e138 <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 800e172:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00d      	beq.n	800e196 <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 800e17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e17c:	7c1b      	ldrb	r3, [r3, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d107      	bne.n	800e192 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 800e182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	1c5a      	adds	r2, r3, #1
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 800e18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e18e:	2201      	movs	r2, #1
 800e190:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 800e192:	2300      	movs	r3, #0
 800e194:	e0cf      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 800e196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	d004      	beq.n	800e1a8 <_fx_utility_logical_sector_write+0x138>
 800e19e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1a2:	1c51      	adds	r1, r2, #1
 800e1a4:	430b      	orrs	r3, r1
 800e1a6:	d101      	bne.n	800e1ac <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 800e1a8:	2389      	movs	r3, #137	; 0x89
 800e1aa:	e0c4      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 800e1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	61bb      	str	r3, [r7, #24]
 800e1b2:	61fa      	str	r2, [r7, #28]
 800e1b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1b8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800e1bc:	4621      	mov	r1, r4
 800e1be:	1889      	adds	r1, r1, r2
 800e1c0:	6139      	str	r1, [r7, #16]
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	eb43 0101 	adc.w	r1, r3, r1
 800e1c8:	6179      	str	r1, [r7, #20]
 800e1ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	f113 3aff 	adds.w	sl, r3, #4294967295	; 0xffffffff
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	f143 3bff 	adc.w	fp, r3, #4294967295	; 0xffffffff
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e1e0:	4592      	cmp	sl, r2
 800e1e2:	eb7b 0303 	sbcs.w	r3, fp, r3
 800e1e6:	d301      	bcc.n	800e1ec <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 800e1e8:	2389      	movs	r3, #137	; 0x89
 800e1ea:	e0a4      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	2290      	movs	r2, #144	; 0x90
 800e206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e20e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800e212:	6a3a      	ldr	r2, [r7, #32]
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e21e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800e222:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 800e22c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800e230:	2b04      	cmp	r3, #4
 800e232:	d003      	beq.n	800e23c <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	2201      	movs	r2, #1
 800e238:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e244:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	2200      	movs	r2, #0
 800e24a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e254:	2b00      	cmp	r3, #0
 800e256:	d003      	beq.n	800e260 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e25e:	e06a      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 800e260:	2300      	movs	r3, #0
 800e262:	e068      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 800e264:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e268:	4313      	orrs	r3, r2
 800e26a:	d004      	beq.n	800e276 <_fx_utility_logical_sector_write+0x206>
 800e26c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e270:	1c51      	adds	r1, r2, #1
 800e272:	430b      	orrs	r3, r1
 800e274:	d101      	bne.n	800e27a <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 800e276:	2389      	movs	r3, #137	; 0x89
 800e278:	e05d      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 800e27a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e27c:	2200      	movs	r2, #0
 800e27e:	60bb      	str	r3, [r7, #8]
 800e280:	60fa      	str	r2, [r7, #12]
 800e282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e286:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e28a:	4651      	mov	r1, sl
 800e28c:	eb11 0802 	adds.w	r8, r1, r2
 800e290:	4659      	mov	r1, fp
 800e292:	eb41 0903 	adc.w	r9, r1, r3
 800e296:	f118 34ff 	adds.w	r4, r8, #4294967295	; 0xffffffff
 800e29a:	f149 35ff 	adc.w	r5, r9, #4294967295	; 0xffffffff
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e2a4:	4294      	cmp	r4, r2
 800e2a6:	eb75 0303 	sbcs.w	r3, r5, r3
 800e2aa:	d301      	bcc.n	800e2b0 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 800e2ac:	2389      	movs	r3, #137	; 0x89
 800e2ae:	e042      	b.n	800e336 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 800e2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	603b      	str	r3, [r7, #0]
 800e2b6:	607a      	str	r2, [r7, #4]
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	9302      	str	r3, [sp, #8]
 800e2bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e2c0:	e9cd 3400 	strd	r3, r4, [sp]
 800e2c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e2c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2ca:	f7ff fa27 	bl	800d71c <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	2201      	movs	r2, #1
 800e2e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	2290      	movs	r2, #144	; 0x90
 800e2e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800e2f4:	6a3a      	ldr	r2, [r7, #32]
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e300:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800e304:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 800e30e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800e312:	2b04      	cmp	r3, #4
 800e314:	d003      	beq.n	800e31e <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	2201      	movs	r2, #1
 800e31a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e326:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	2200      	movs	r2, #0
 800e32c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 800e336:	4618      	mov	r0, r3
 800e338:	3748      	adds	r7, #72	; 0x48
 800e33a:	46bd      	mov	sp, r7
 800e33c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e340 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68f9      	ldr	r1, [r7, #12]
 800e350:	68b8      	ldr	r0, [r7, #8]
 800e352:	f003 fd25 	bl	8011da0 <memcpy>
}
 800e356:	bf00      	nop
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 800e36e:	2318      	movs	r3, #24
 800e370:	e018      	b.n	800e3a4 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e372:	f3ef 8305 	mrs	r3, IPSR
 800e376:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800e378:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e37a:	4b0c      	ldr	r3, [pc, #48]	; (800e3ac <_fxe_file_close+0x4c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4313      	orrs	r3, r2
 800e380:	2b00      	cmp	r3, #0
 800e382:	d108      	bne.n	800e396 <_fxe_file_close+0x36>
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <_fxe_file_close+0x50>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d004      	beq.n	800e396 <_fxe_file_close+0x36>
 800e38c:	4b08      	ldr	r3, [pc, #32]	; (800e3b0 <_fxe_file_close+0x50>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a08      	ldr	r2, [pc, #32]	; (800e3b4 <_fxe_file_close+0x54>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d101      	bne.n	800e39a <_fxe_file_close+0x3a>
 800e396:	2320      	movs	r3, #32
 800e398:	e004      	b.n	800e3a4 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7f9 fe84 	bl	80080a8 <_fx_file_close>
 800e3a0:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	20000088 	.word	0x20000088
 800e3b0:	2000429c 	.word	0x2000429c
 800e3b4:	200043e8 	.word	0x200043e8

0800e3b8 <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d101      	bne.n	800e3cc <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 800e3c8:	2318      	movs	r3, #24
 800e3ca:	e019      	b.n	800e400 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e3cc:	f3ef 8305 	mrs	r3, IPSR
 800e3d0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800e3d2:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e3d4:	4b0c      	ldr	r3, [pc, #48]	; (800e408 <_fxe_file_create+0x50>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d108      	bne.n	800e3f0 <_fxe_file_create+0x38>
 800e3de:	4b0b      	ldr	r3, [pc, #44]	; (800e40c <_fxe_file_create+0x54>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d004      	beq.n	800e3f0 <_fxe_file_create+0x38>
 800e3e6:	4b09      	ldr	r3, [pc, #36]	; (800e40c <_fxe_file_create+0x54>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a09      	ldr	r2, [pc, #36]	; (800e410 <_fxe_file_create+0x58>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d101      	bne.n	800e3f4 <_fxe_file_create+0x3c>
 800e3f0:	2320      	movs	r3, #32
 800e3f2:	e005      	b.n	800e400 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 800e3f4:	6839      	ldr	r1, [r7, #0]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7f9 fefa 	bl	80081f0 <_fx_file_create>
 800e3fc:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	20000088 	.word	0x20000088
 800e40c:	2000429c 	.word	0x2000429c
 800e410:	200043e8 	.word	0x200043e8

0800e414 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00b      	beq.n	800e440 <_fxe_file_open+0x2c>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a36      	ldr	r2, [pc, #216]	; (800e508 <_fxe_file_open+0xf4>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d106      	bne.n	800e440 <_fxe_file_open+0x2c>
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d003      	beq.n	800e440 <_fxe_file_open+0x2c>
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800e43e:	d001      	beq.n	800e444 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 800e440:	2318      	movs	r3, #24
 800e442:	e05d      	b.n	800e500 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d007      	beq.n	800e45a <_fxe_file_open+0x46>
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d004      	beq.n	800e45a <_fxe_file_open+0x46>
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b01      	cmp	r3, #1
 800e454:	d001      	beq.n	800e45a <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 800e456:	2306      	movs	r3, #6
 800e458:	e052      	b.n	800e500 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e45a:	f3ef 8305 	mrs	r3, IPSR
 800e45e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e460:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e462:	4b2a      	ldr	r3, [pc, #168]	; (800e50c <_fxe_file_open+0xf8>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4313      	orrs	r3, r2
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d108      	bne.n	800e47e <_fxe_file_open+0x6a>
 800e46c:	4b28      	ldr	r3, [pc, #160]	; (800e510 <_fxe_file_open+0xfc>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d004      	beq.n	800e47e <_fxe_file_open+0x6a>
 800e474:	4b26      	ldr	r3, [pc, #152]	; (800e510 <_fxe_file_open+0xfc>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a26      	ldr	r2, [pc, #152]	; (800e514 <_fxe_file_open+0x100>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d101      	bne.n	800e482 <_fxe_file_open+0x6e>
 800e47e:	2320      	movs	r3, #32
 800e480:	e03e      	b.n	800e500 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a20      	ldr	r2, [pc, #128]	; (800e508 <_fxe_file_open+0xf4>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d001      	beq.n	800e490 <_fxe_file_open+0x7c>
 800e48c:	2311      	movs	r3, #17
 800e48e:	e037      	b.n	800e500 <_fxe_file_open+0xec>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e496:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e49a:	4618      	mov	r0, r3
 800e49c:	f001 f926 	bl	800f6ec <_tx_mutex_get>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <_fxe_file_open+0x96>
 800e4a6:	2311      	movs	r3, #17
 800e4a8:	e02a      	b.n	800e500 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e4b0:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e4b8:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 800e4ba:	e00e      	b.n	800e4da <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d107      	bne.n	800e4d4 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f001 fb94 	bl	800fbf8 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 800e4d0:	2318      	movs	r3, #24
 800e4d2:	e015      	b.n	800e500 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4d8:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	1e5a      	subs	r2, r3, #1
 800e4de:	61ba      	str	r2, [r7, #24]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1eb      	bne.n	800e4bc <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f001 fb84 	bl	800fbf8 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	68b9      	ldr	r1, [r7, #8]
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f7fa fab8 	bl	8008a6c <_fx_file_open>
 800e4fc:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 800e4fe:	697b      	ldr	r3, [r7, #20]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3720      	adds	r7, #32
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	4d454449 	.word	0x4d454449
 800e50c:	20000088 	.word	0x20000088
 800e510:	2000429c 	.word	0x2000429c
 800e514:	200043e8 	.word	0x200043e8

0800e518 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
 800e524:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d005      	beq.n	800e538 <_fxe_file_read+0x20>
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <_fxe_file_read+0x20>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d101      	bne.n	800e53c <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 800e538:	2318      	movs	r3, #24
 800e53a:	e01b      	b.n	800e574 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e53c:	f3ef 8305 	mrs	r3, IPSR
 800e540:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e542:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e544:	4b0d      	ldr	r3, [pc, #52]	; (800e57c <_fxe_file_read+0x64>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4313      	orrs	r3, r2
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d108      	bne.n	800e560 <_fxe_file_read+0x48>
 800e54e:	4b0c      	ldr	r3, [pc, #48]	; (800e580 <_fxe_file_read+0x68>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d004      	beq.n	800e560 <_fxe_file_read+0x48>
 800e556:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <_fxe_file_read+0x68>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a0a      	ldr	r2, [pc, #40]	; (800e584 <_fxe_file_read+0x6c>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d101      	bne.n	800e564 <_fxe_file_read+0x4c>
 800e560:	2320      	movs	r3, #32
 800e562:	e007      	b.n	800e574 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	68b9      	ldr	r1, [r7, #8]
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f7fa ff60 	bl	8009430 <_fx_file_read>
 800e570:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 800e572:	697b      	ldr	r3, [r7, #20]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3718      	adds	r7, #24
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20000088 	.word	0x20000088
 800e580:	2000429c 	.word	0x2000429c
 800e584:	200043e8 	.word	0x200043e8

0800e588 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 800e598:	2318      	movs	r3, #24
 800e59a:	e019      	b.n	800e5d0 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e59c:	f3ef 8305 	mrs	r3, IPSR
 800e5a0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800e5a2:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e5a4:	4b0c      	ldr	r3, [pc, #48]	; (800e5d8 <_fxe_file_seek+0x50>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d108      	bne.n	800e5c0 <_fxe_file_seek+0x38>
 800e5ae:	4b0b      	ldr	r3, [pc, #44]	; (800e5dc <_fxe_file_seek+0x54>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d004      	beq.n	800e5c0 <_fxe_file_seek+0x38>
 800e5b6:	4b09      	ldr	r3, [pc, #36]	; (800e5dc <_fxe_file_seek+0x54>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a09      	ldr	r2, [pc, #36]	; (800e5e0 <_fxe_file_seek+0x58>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d101      	bne.n	800e5c4 <_fxe_file_seek+0x3c>
 800e5c0:	2320      	movs	r3, #32
 800e5c2:	e005      	b.n	800e5d0 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7fb f9d6 	bl	8009978 <_fx_file_seek>
 800e5cc:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20000088 	.word	0x20000088
 800e5dc:	2000429c 	.word	0x2000429c
 800e5e0:	200043e8 	.word	0x200043e8

0800e5e4 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d002      	beq.n	800e5fc <_fxe_file_write+0x18>
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 800e5fc:	2318      	movs	r3, #24
 800e5fe:	e01a      	b.n	800e636 <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e600:	f3ef 8305 	mrs	r3, IPSR
 800e604:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e606:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e608:	4b0d      	ldr	r3, [pc, #52]	; (800e640 <_fxe_file_write+0x5c>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d108      	bne.n	800e624 <_fxe_file_write+0x40>
 800e612:	4b0c      	ldr	r3, [pc, #48]	; (800e644 <_fxe_file_write+0x60>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d004      	beq.n	800e624 <_fxe_file_write+0x40>
 800e61a:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <_fxe_file_write+0x60>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a0a      	ldr	r2, [pc, #40]	; (800e648 <_fxe_file_write+0x64>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d101      	bne.n	800e628 <_fxe_file_write+0x44>
 800e624:	2320      	movs	r3, #32
 800e626:	e006      	b.n	800e636 <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	68b9      	ldr	r1, [r7, #8]
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f7fb f9b5 	bl	800999c <_fx_file_write>
 800e632:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 800e634:	697b      	ldr	r3, [r7, #20]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	20000088 	.word	0x20000088
 800e644:	2000429c 	.word	0x2000429c
 800e648:	200043e8 	.word	0x200043e8

0800e64c <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 800e65a:	2318      	movs	r3, #24
 800e65c:	e018      	b.n	800e690 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e65e:	f3ef 8305 	mrs	r3, IPSR
 800e662:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800e664:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e666:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <_fxe_media_close+0x4c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d108      	bne.n	800e682 <_fxe_media_close+0x36>
 800e670:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <_fxe_media_close+0x50>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d004      	beq.n	800e682 <_fxe_media_close+0x36>
 800e678:	4b08      	ldr	r3, [pc, #32]	; (800e69c <_fxe_media_close+0x50>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a08      	ldr	r2, [pc, #32]	; (800e6a0 <_fxe_media_close+0x54>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d101      	bne.n	800e686 <_fxe_media_close+0x3a>
 800e682:	2320      	movs	r3, #32
 800e684:	e004      	b.n	800e690 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7fc fa08 	bl	800aa9c <_fx_media_close>
 800e68c:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 800e68e:	68fb      	ldr	r3, [r7, #12]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	20000088 	.word	0x20000088
 800e69c:	2000429c 	.word	0x2000429c
 800e6a0:	200043e8 	.word	0x200043e8

0800e6a4 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 800e6b2:	2318      	movs	r3, #24
 800e6b4:	e018      	b.n	800e6e8 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e6b6:	f3ef 8305 	mrs	r3, IPSR
 800e6ba:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800e6bc:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e6be:	4b0c      	ldr	r3, [pc, #48]	; (800e6f0 <_fxe_media_flush+0x4c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d108      	bne.n	800e6da <_fxe_media_flush+0x36>
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	; (800e6f4 <_fxe_media_flush+0x50>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <_fxe_media_flush+0x36>
 800e6d0:	4b08      	ldr	r3, [pc, #32]	; (800e6f4 <_fxe_media_flush+0x50>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a08      	ldr	r2, [pc, #32]	; (800e6f8 <_fxe_media_flush+0x54>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d101      	bne.n	800e6de <_fxe_media_flush+0x3a>
 800e6da:	2320      	movs	r3, #32
 800e6dc:	e004      	b.n	800e6e8 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7fc fbb4 	bl	800ae4c <_fx_media_flush>
 800e6e4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20000088 	.word	0x20000088
 800e6f4:	2000429c 	.word	0x2000429c
 800e6f8:	200043e8 	.word	0x200043e8

0800e6fc <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08e      	sub	sp, #56	; 0x38
 800e700:	af02      	add	r7, sp, #8
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00a      	beq.n	800e726 <_fxe_media_open+0x2a>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d007      	beq.n	800e726 <_fxe_media_open+0x2a>
 800e716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d004      	beq.n	800e726 <_fxe_media_open+0x2a>
 800e71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e71e:	f242 42b8 	movw	r2, #9400	; 0x24b8
 800e722:	4293      	cmp	r3, r2
 800e724:	d001      	beq.n	800e72a <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 800e726:	2318      	movs	r3, #24
 800e728:	e071      	b.n	800e80e <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e72a:	f3ef 8305 	mrs	r3, IPSR
 800e72e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e730:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e732:	4b39      	ldr	r3, [pc, #228]	; (800e818 <_fxe_media_open+0x11c>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4313      	orrs	r3, r2
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d108      	bne.n	800e74e <_fxe_media_open+0x52>
 800e73c:	4b37      	ldr	r3, [pc, #220]	; (800e81c <_fxe_media_open+0x120>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <_fxe_media_open+0x52>
 800e744:	4b35      	ldr	r3, [pc, #212]	; (800e81c <_fxe_media_open+0x120>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a35      	ldr	r2, [pc, #212]	; (800e820 <_fxe_media_open+0x124>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d101      	bne.n	800e752 <_fxe_media_open+0x56>
 800e74e:	2320      	movs	r3, #32
 800e750:	e05d      	b.n	800e80e <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 800e752:	4b34      	ldr	r3, [pc, #208]	; (800e824 <_fxe_media_open+0x128>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	425b      	negs	r3, r3
 800e75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e75e:	4013      	ands	r3, r2
 800e760:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	2b01      	cmp	r3, #1
 800e766:	d004      	beq.n	800e772 <_fxe_media_open+0x76>
 800e768:	4b2e      	ldr	r3, [pc, #184]	; (800e824 <_fxe_media_open+0x128>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e76e:	429a      	cmp	r2, r3
 800e770:	d001      	beq.n	800e776 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 800e772:	2302      	movs	r3, #2
 800e774:	e04b      	b.n	800e80e <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 800e776:	4b2c      	ldr	r3, [pc, #176]	; (800e828 <_fxe_media_open+0x12c>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	425b      	negs	r3, r3
 800e780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e782:	4013      	ands	r3, r2
 800e784:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d004      	beq.n	800e796 <_fxe_media_open+0x9a>
 800e78c:	4b26      	ldr	r3, [pc, #152]	; (800e828 <_fxe_media_open+0x12c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e792:	429a      	cmp	r2, r3
 800e794:	d001      	beq.n	800e79a <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 800e796:	2302      	movs	r3, #2
 800e798:	e039      	b.n	800e80e <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 800e79a:	f001 ff99 	bl	80106d0 <_tx_thread_identify>
 800e79e:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800e7a0:	f107 0314 	add.w	r3, r7, #20
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	6a38      	ldr	r0, [r7, #32]
 800e7aa:	f001 ffef 	bl	801078c <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 800e7ae:	4b1f      	ldr	r3, [pc, #124]	; (800e82c <_fxe_media_open+0x130>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 800e7b4:	4b1e      	ldr	r3, [pc, #120]	; (800e830 <_fxe_media_open+0x134>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 800e7ba:	e010      	b.n	800e7de <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d108      	bne.n	800e7d6 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f107 0214 	add.w	r2, r7, #20
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	6a38      	ldr	r0, [r7, #32]
 800e7ce:	f001 ffdd 	bl	801078c <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 800e7d2:	2318      	movs	r3, #24
 800e7d4:	e01b      	b.n	800e80e <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 800e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	1e5a      	subs	r2, r3, #1
 800e7e2:	62ba      	str	r2, [r7, #40]	; 0x28
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1e9      	bne.n	800e7bc <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f107 0214 	add.w	r2, r7, #20
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6a38      	ldr	r0, [r7, #32]
 800e7f2:	f001 ffcb 	bl	801078c <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 800e7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	68b9      	ldr	r1, [r7, #8]
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f7fc fcad 	bl	800b164 <_fx_media_open>
 800e80a:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 800e80c:	69fb      	ldr	r3, [r7, #28]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3730      	adds	r7, #48	; 0x30
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20000088 	.word	0x20000088
 800e81c:	2000429c 	.word	0x2000429c
 800e820:	200043e8 	.word	0x200043e8
 800e824:	20004020 	.word	0x20004020
 800e828:	20004024 	.word	0x20004024
 800e82c:	20004010 	.word	0x20004010
 800e830:	20004014 	.word	0x20004014

0800e834 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 800e83c:	f002 fc9a 	bl	8011174 <_tx_time_get>
 800e840:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 800e842:	e007      	b.n	800e854 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7f2 fc27 	bl	8001098 <fx_stm32_sd_get_status>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d101      	bne.n	800e854 <check_sd_status+0x20>
    {
      return 0;
 800e850:	2300      	movs	r3, #0
 800e852:	e008      	b.n	800e866 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 800e854:	f002 fc8e 	bl	8011174 <_tx_time_get>
 800e858:	4602      	mov	r2, r0
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e862:	d3ef      	bcc.n	800e844 <check_sd_status+0x10>
    }
  }

  return 1;
 800e864:	2301      	movs	r3, #1
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
	...

0800e870 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 800e878:	4b85      	ldr	r3, [pc, #532]	; (800ea90 <fx_stm32_sd_driver+0x220>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d10a      	bne.n	800e896 <fx_stm32_sd_driver+0x26>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 800e880:	2000      	movs	r0, #0
 800e882:	f7ff ffd7 	bl	800e834 <check_sd_status>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <fx_stm32_sd_driver+0x26>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2290      	movs	r2, #144	; 0x90
 800e890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e894:	e0f8      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	617b      	str	r3, [r7, #20]
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8a0:	2b08      	cmp	r3, #8
 800e8a2:	f200 80e7 	bhi.w	800ea74 <fx_stm32_sd_driver+0x204>
 800e8a6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <fx_stm32_sd_driver+0x3c>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e94b 	.word	0x0800e94b
 800e8b0:	0800e97f 	.word	0x0800e97f
 800e8b4:	0800e9b1 	.word	0x0800e9b1
 800e8b8:	0800e9bb 	.word	0x0800e9bb
 800e8bc:	0800e8d1 	.word	0x0800e8d1
 800e8c0:	0800e9c5 	.word	0x0800e9c5
 800e8c4:	0800ea75 	.word	0x0800ea75
 800e8c8:	0800ea59 	.word	0x0800ea59
 800e8cc:	0800e91f 	.word	0x0800e91f
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 800e8d8:	2320      	movs	r3, #32
 800e8da:	2201      	movs	r2, #1
 800e8dc:	496d      	ldr	r1, [pc, #436]	; (800ea94 <fx_stm32_sd_driver+0x224>)
 800e8de:	486e      	ldr	r0, [pc, #440]	; (800ea98 <fx_stm32_sd_driver+0x228>)
 800e8e0:	f003 f814 	bl	801190c <_txe_semaphore_create>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d003      	beq.n	800e8f2 <fx_stm32_sd_driver+0x82>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2290      	movs	r2, #144	; 0x90
 800e8ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (FX_STM32_SD_INIT == 1)
      /* Initialize the SD instance */
      if (is_initialized == 0)
 800e8f2:	4b67      	ldr	r3, [pc, #412]	; (800ea90 <fx_stm32_sd_driver+0x220>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f040 80c1 	bne.w	800ea7e <fx_stm32_sd_driver+0x20e>
      {
        status = fx_stm32_sd_init(FX_STM32_SD_INSTANCE);
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	f7f2 fba7 	bl	8001050 <fx_stm32_sd_init>
 800e902:	4603      	mov	r3, r0
 800e904:	613b      	str	r3, [r7, #16]

        if (status == 0)
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d103      	bne.n	800e914 <fx_stm32_sd_driver+0xa4>
        {
          is_initialized = 1;
 800e90c:	4b60      	ldr	r3, [pc, #384]	; (800ea90 <fx_stm32_sd_driver+0x220>)
 800e90e:	2201      	movs	r2, #1
 800e910:	601a      	str	r2, [r3, #0]
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 800e912:	e0b4      	b.n	800ea7e <fx_stm32_sd_driver+0x20e>
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2290      	movs	r2, #144	; 0x90
 800e918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e91c:	e0af      	b.n	800ea7e <fx_stm32_sd_driver+0x20e>
    }

  case FX_DRIVER_UNINIT:
    {
#if (FX_STM32_SD_INIT == 1)
      if (fx_stm32_sd_deinit(FX_STM32_SD_INSTANCE) != 0)
 800e91e:	2000      	movs	r0, #0
 800e920:	f7f2 fba4 	bl	800106c <fx_stm32_sd_deinit>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d004      	beq.n	800e934 <fx_stm32_sd_driver+0xc4>
      {
        media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2290      	movs	r2, #144	; 0x90
 800e92e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e932:	e003      	b.n	800e93c <fx_stm32_sd_driver+0xcc>
      }
      else
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      is_initialized = 0;
 800e93c:	4b54      	ldr	r3, [pc, #336]	; (800ea90 <fx_stm32_sd_driver+0x220>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 800e942:	4855      	ldr	r0, [pc, #340]	; (800ea98 <fx_stm32_sd_driver+0x228>)
 800e944:	f003 f878 	bl	8011a38 <_txe_semaphore_delete>
      break;
 800e948:	e09e      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2290      	movs	r2, #144	; 0x90
 800e94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95c:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f898 	bl	800ea9c <sd_read_data>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f040 8087 	bne.w	800ea82 <fx_stm32_sd_driver+0x212>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800e97c:	e081      	b.n	800ea82 <fx_stm32_sd_driver+0x212>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2290      	movs	r2, #144	; 0x90
 800e982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e990:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f906 	bl	800ebac <sd_write_data>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d16f      	bne.n	800ea86 <fx_stm32_sd_driver+0x216>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800e9ae:	e06a      	b.n	800ea86 <fx_stm32_sd_driver+0x216>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e9b8:	e066      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 800e9c2:	e061      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f864 	bl	800ea9c <sd_read_data>
 800e9d4:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d004      	beq.n	800e9e6 <fx_stm32_sd_driver+0x176>
      {
        media_ptr->fx_media_driver_status = status;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	693a      	ldr	r2, [r7, #16]
 800e9e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800e9e4:	e050      	b.n	800ea88 <fx_stm32_sd_driver+0x218>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800e9f0:	f107 0308 	add.w	r3, r7, #8
 800e9f4:	f107 020c 	add.w	r2, r7, #12
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	f7fd f92b 	bl	800bc54 <_fx_partition_offset_calculate>
 800e9fe:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d004      	beq.n	800ea10 <fx_stm32_sd_driver+0x1a0>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2290      	movs	r2, #144	; 0x90
 800ea0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800ea0e:	e03b      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d01b      	beq.n	800ea4e <fx_stm32_sd_driver+0x1de>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 800ea16:	2000      	movs	r0, #0
 800ea18:	f7ff ff0c 	bl	800e834 <check_sd_status>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <fx_stm32_sd_driver+0x1bc>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2290      	movs	r2, #144	; 0x90
 800ea26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 800ea2a:	e02d      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800ea2c:	68f9      	ldr	r1, [r7, #12]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f830 	bl	800ea9c <sd_read_data>
 800ea3c:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d004      	beq.n	800ea4e <fx_stm32_sd_driver+0x1de>
        {
          media_ptr->fx_media_driver_status = status;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 800ea4c:	e01c      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800ea56:	e017      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2100      	movs	r1, #0
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f8a2 	bl	800ebac <sd_write_data>
 800ea68:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 800ea72:	e009      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2290      	movs	r2, #144	; 0x90
 800ea78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800ea7c:	e004      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
      break;
 800ea7e:	bf00      	nop
 800ea80:	e002      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
      break;
 800ea82:	bf00      	nop
 800ea84:	e000      	b.n	800ea88 <fx_stm32_sd_driver+0x218>
      break;
 800ea86:	bf00      	nop
    }
  }
}
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20004260 	.word	0x20004260
 800ea94:	08011e84 	.word	0x08011e84
 800ea98:	20003fec 	.word	0x20003fec

0800ea9c <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b088      	sub	sp, #32
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
 800eaa8:	603b      	str	r3, [r7, #0]
  INT i = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61fb      	str	r3, [r7, #28]
  UINT status;
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);
 800eaae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eab2:	483c      	ldr	r0, [pc, #240]	; (800eba4 <sd_read_data+0x108>)
 800eab4:	f002 fffe 	bl	8011ab4 <_txe_semaphore_get>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <sd_read_data+0x26>
 800eabe:	2390      	movs	r3, #144	; 0x90
 800eac0:	e06b      	b.n	800eb9a <sd_read_data+0xfe>

  if (use_scratch_buffer)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d03f      	beq.n	800eb48 <sd_read_data+0xac>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eace:	617b      	str	r3, [r7, #20]

    for (i = 0; i < num_sectors; i++)
 800ead0:	2300      	movs	r3, #0
 800ead2:	61fb      	str	r3, [r7, #28]
 800ead4:	e02a      	b.n	800eb2c <sd_read_data+0x90>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	1c53      	adds	r3, r2, #1
 800eada:	60bb      	str	r3, [r7, #8]
 800eadc:	2301      	movs	r3, #1
 800eade:	4932      	ldr	r1, [pc, #200]	; (800eba8 <sd_read_data+0x10c>)
 800eae0:	2000      	movs	r0, #0
 800eae2:	f7f2 faef 	bl	80010c4 <fx_stm32_sd_read_blocks>
 800eae6:	4603      	mov	r3, r0
 800eae8:	61bb      	str	r3, [r7, #24]

      if (status != 0)
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d006      	beq.n	800eafe <sd_read_data+0x62>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
 800eaf0:	482c      	ldr	r0, [pc, #176]	; (800eba4 <sd_read_data+0x108>)
 800eaf2:	f003 f821 	bl	8011b38 <_txe_semaphore_put>
 800eaf6:	2390      	movs	r3, #144	; 0x90
 800eaf8:	61bb      	str	r3, [r7, #24]
        return FX_IO_ERROR;
 800eafa:	2390      	movs	r3, #144	; 0x90
 800eafc:	e04d      	b.n	800eb9a <sd_read_data+0xfe>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800eafe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eb02:	4828      	ldr	r0, [pc, #160]	; (800eba4 <sd_read_data+0x108>)
 800eb04:	f002 ffd6 	bl	8011ab4 <_txe_semaphore_get>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <sd_read_data+0x76>
 800eb0e:	2390      	movs	r3, #144	; 0x90
 800eb10:	e043      	b.n	800eb9a <sd_read_data+0xfe>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800eb12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb16:	6979      	ldr	r1, [r7, #20]
 800eb18:	4823      	ldr	r0, [pc, #140]	; (800eba8 <sd_read_data+0x10c>)
 800eb1a:	f7ff fc11 	bl	800e340 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800eb24:	617b      	str	r3, [r7, #20]
    for (i = 0; i < num_sectors; i++)
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	61fb      	str	r3, [r7, #28]
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d8d0      	bhi.n	800ead6 <sd_read_data+0x3a>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d102      	bne.n	800eb42 <sd_read_data+0xa6>
    {
      status = FX_SUCCESS;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	61bb      	str	r3, [r7, #24]
 800eb40:	e022      	b.n	800eb88 <sd_read_data+0xec>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800eb42:	2321      	movs	r3, #33	; 0x21
 800eb44:	61bb      	str	r3, [r7, #24]
 800eb46:	e01f      	b.n	800eb88 <sd_read_data+0xec>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	2000      	movs	r0, #0
 800eb54:	f7f2 fab6 	bl	80010c4 <fx_stm32_sd_read_blocks>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	61bb      	str	r3, [r7, #24]

    if (status != 0)
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d006      	beq.n	800eb70 <sd_read_data+0xd4>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);
 800eb62:	4810      	ldr	r0, [pc, #64]	; (800eba4 <sd_read_data+0x108>)
 800eb64:	f002 ffe8 	bl	8011b38 <_txe_semaphore_put>
 800eb68:	2390      	movs	r3, #144	; 0x90
 800eb6a:	61bb      	str	r3, [r7, #24]

      return FX_IO_ERROR;
 800eb6c:	2390      	movs	r3, #144	; 0x90
 800eb6e:	e014      	b.n	800eb9a <sd_read_data+0xfe>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800eb70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eb74:	480b      	ldr	r0, [pc, #44]	; (800eba4 <sd_read_data+0x108>)
 800eb76:	f002 ff9d 	bl	8011ab4 <_txe_semaphore_get>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <sd_read_data+0xe8>
 800eb80:	2390      	movs	r3, #144	; 0x90
 800eb82:	e00a      	b.n	800eb9a <sd_read_data+0xfe>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

    status = FX_SUCCESS;
 800eb84:	2300      	movs	r3, #0
 800eb86:	61bb      	str	r3, [r7, #24]
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
 800eb88:	4806      	ldr	r0, [pc, #24]	; (800eba4 <sd_read_data+0x108>)
 800eb8a:	f002 ffd5 	bl	8011b38 <_txe_semaphore_put>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <sd_read_data+0xfc>
 800eb94:	2390      	movs	r3, #144	; 0x90
 800eb96:	e000      	b.n	800eb9a <sd_read_data+0xfe>
  return status;
 800eb98:	69bb      	ldr	r3, [r7, #24]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3720      	adds	r7, #32
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20003fec 	.word	0x20003fec
 800eba8:	20004060 	.word	0x20004060

0800ebac <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
  INT i = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61fb      	str	r3, [r7, #28]
  UINT status;
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);
 800ebbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ebc2:	483c      	ldr	r0, [pc, #240]	; (800ecb4 <sd_write_data+0x108>)
 800ebc4:	f002 ff76 	bl	8011ab4 <_txe_semaphore_get>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d001      	beq.n	800ebd2 <sd_write_data+0x26>
 800ebce:	2390      	movs	r3, #144	; 0x90
 800ebd0:	e06b      	b.n	800ecaa <sd_write_data+0xfe>

  if (use_scratch_buffer)
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d03f      	beq.n	800ec58 <sd_write_data+0xac>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebde:	617b      	str	r3, [r7, #20]

    for (i = 0; i < num_sectors; i++)
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	61fb      	str	r3, [r7, #28]
 800ebe4:	e02a      	b.n	800ec3c <sd_write_data+0x90>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800ebe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebea:	4933      	ldr	r1, [pc, #204]	; (800ecb8 <sd_write_data+0x10c>)
 800ebec:	6978      	ldr	r0, [r7, #20]
 800ebee:	f7ff fba7 	bl	800e340 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ebf8:	617b      	str	r3, [r7, #20]
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	1c53      	adds	r3, r2, #1
 800ebfe:	60bb      	str	r3, [r7, #8]
 800ec00:	2301      	movs	r3, #1
 800ec02:	492d      	ldr	r1, [pc, #180]	; (800ecb8 <sd_write_data+0x10c>)
 800ec04:	2000      	movs	r0, #0
 800ec06:	f7f2 fa79 	bl	80010fc <fx_stm32_sd_write_blocks>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	61bb      	str	r3, [r7, #24]

      if (status != 0)
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d006      	beq.n	800ec22 <sd_write_data+0x76>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
 800ec14:	4827      	ldr	r0, [pc, #156]	; (800ecb4 <sd_write_data+0x108>)
 800ec16:	f002 ff8f 	bl	8011b38 <_txe_semaphore_put>
 800ec1a:	2390      	movs	r3, #144	; 0x90
 800ec1c:	61bb      	str	r3, [r7, #24]
        return FX_IO_ERROR;
 800ec1e:	2390      	movs	r3, #144	; 0x90
 800ec20:	e043      	b.n	800ecaa <sd_write_data+0xfe>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800ec22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ec26:	4823      	ldr	r0, [pc, #140]	; (800ecb4 <sd_write_data+0x108>)
 800ec28:	f002 ff44 	bl	8011ab4 <_txe_semaphore_get>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <sd_write_data+0x8a>
 800ec32:	2390      	movs	r3, #144	; 0x90
 800ec34:	e039      	b.n	800ecaa <sd_write_data+0xfe>
    for (i = 0; i < num_sectors; i++)
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	61fb      	str	r3, [r7, #28]
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d8d0      	bhi.n	800ebe6 <sd_write_data+0x3a>
    }

    if (i == num_sectors)
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d102      	bne.n	800ec52 <sd_write_data+0xa6>
    {
      status = FX_SUCCESS;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	61bb      	str	r3, [r7, #24]
 800ec50:	e022      	b.n	800ec98 <sd_write_data+0xec>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800ec52:	2321      	movs	r3, #33	; 0x21
 800ec54:	61bb      	str	r3, [r7, #24]
 800ec56:	e01f      	b.n	800ec98 <sd_write_data+0xec>
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	2000      	movs	r0, #0
 800ec64:	f7f2 fa4a 	bl	80010fc <fx_stm32_sd_write_blocks>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	61bb      	str	r3, [r7, #24]

    if (status != 0)
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d006      	beq.n	800ec80 <sd_write_data+0xd4>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
 800ec72:	4810      	ldr	r0, [pc, #64]	; (800ecb4 <sd_write_data+0x108>)
 800ec74:	f002 ff60 	bl	8011b38 <_txe_semaphore_put>
 800ec78:	2390      	movs	r3, #144	; 0x90
 800ec7a:	61bb      	str	r3, [r7, #24]
      return FX_IO_ERROR;
 800ec7c:	2390      	movs	r3, #144	; 0x90
 800ec7e:	e014      	b.n	800ecaa <sd_write_data+0xfe>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800ec80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ec84:	480b      	ldr	r0, [pc, #44]	; (800ecb4 <sd_write_data+0x108>)
 800ec86:	f002 ff15 	bl	8011ab4 <_txe_semaphore_get>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <sd_write_data+0xe8>
 800ec90:	2390      	movs	r3, #144	; 0x90
 800ec92:	e00a      	b.n	800ecaa <sd_write_data+0xfe>

    status = FX_SUCCESS;
 800ec94:	2300      	movs	r3, #0
 800ec96:	61bb      	str	r3, [r7, #24]
  }

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);
 800ec98:	4806      	ldr	r0, [pc, #24]	; (800ecb4 <sd_write_data+0x108>)
 800ec9a:	f002 ff4d 	bl	8011b38 <_txe_semaphore_put>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <sd_write_data+0xfc>
 800eca4:	2390      	movs	r3, #144	; 0x90
 800eca6:	e000      	b.n	800ecaa <sd_write_data+0xfe>


  return status;
 800eca8:	69bb      	ldr	r3, [r7, #24]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3720      	adds	r7, #32
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20003fec 	.word	0x20003fec
 800ecb8:	20004060 	.word	0x20004060

0800ecbc <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b096      	sub	sp, #88	; 0x58
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
 800ecc8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3303      	adds	r3, #3
 800ecce:	f023 0303 	bic.w	r3, r3, #3
 800ecd2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ecd4:	f3ef 8310 	mrs	r3, PRIMASK
 800ecd8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ecda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ecdc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ecde:	b672      	cpsid	i
    return(int_posture);
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800ece2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ece4:	4b55      	ldr	r3, [pc, #340]	; (800ee3c <_tx_byte_allocate+0x180>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800ecea:	2300      	movs	r3, #0
 800ecec:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecf2:	621a      	str	r2, [r3, #32]
 800ecf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfa:	f383 8810 	msr	PRIMASK, r3
}
 800ecfe:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800ed00:	6879      	ldr	r1, [r7, #4]
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f000 f9b2 	bl	800f06c <_tx_byte_pool_search>
 800ed08:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ed12:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed14:	b672      	cpsid	i
    return(int_posture);
 800ed16:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800ed18:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800ed1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <_tx_byte_allocate+0x6a>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800ed20:	2301      	movs	r3, #1
 800ed22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed24:	e006      	b.n	800ed34 <_tx_byte_allocate+0x78>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6a1b      	ldr	r3, [r3, #32]
 800ed2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d101      	bne.n	800ed34 <_tx_byte_allocate+0x78>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800ed30:	2301      	movs	r3, #1
 800ed32:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800ed34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d0d9      	beq.n	800ecee <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed3e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800ed40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d008      	beq.n	800ed58 <_tx_byte_allocate+0x9c>
 800ed46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed48:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	f383 8810 	msr	PRIMASK, r3
}
 800ed50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800ed52:	2300      	movs	r3, #0
 800ed54:	653b      	str	r3, [r7, #80]	; 0x50
 800ed56:	e06c      	b.n	800ee32 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d061      	beq.n	800ee22 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ed5e:	4b38      	ldr	r3, [pc, #224]	; (800ee40 <_tx_byte_allocate+0x184>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d007      	beq.n	800ed76 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800ed66:	2310      	movs	r3, #16
 800ed68:	653b      	str	r3, [r7, #80]	; 0x50
 800ed6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed6c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	f383 8810 	msr	PRIMASK, r3
}
 800ed74:	e05d      	b.n	800ee32 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800ed76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed78:	4a32      	ldr	r2, [pc, #200]	; (800ee44 <_tx_byte_allocate+0x188>)
 800ed7a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800ed7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800ed82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800ed88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ed8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda0:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda6:	1c5a      	adds	r2, r3, #1
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800edac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d109      	bne.n	800edc6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edb6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800edb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edbc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800edbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edc2:	675a      	str	r2, [r3, #116]	; 0x74
 800edc4:	e011      	b.n	800edea <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800edcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edd0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800edd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edd6:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800edd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eddc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800edde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ede2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ede4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ede8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800edea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edec:	2209      	movs	r2, #9
 800edee:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800edf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf2:	2201      	movs	r2, #1
 800edf4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800edf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800edfc:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <_tx_byte_allocate+0x184>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	4a0f      	ldr	r2, [pc, #60]	; (800ee40 <_tx_byte_allocate+0x184>)
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	f383 8810 	msr	PRIMASK, r3
}
 800ee10:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ee12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ee14:	f001 ff90 	bl	8010d38 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ee18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ee20:	e007      	b.n	800ee32 <_tx_byte_allocate+0x176>
 800ee22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f383 8810 	msr	PRIMASK, r3
}
 800ee2c:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800ee2e:	2310      	movs	r3, #16
 800ee30:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800ee32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3758      	adds	r7, #88	; 0x58
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	2000429c 	.word	0x2000429c
 800ee40:	20004338 	.word	0x20004338
 800ee44:	0800ee49 	.word	0x0800ee49

0800ee48 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b08e      	sub	sp, #56	; 0x38
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee52:	f3ef 8310 	mrs	r3, PRIMASK
 800ee56:	623b      	str	r3, [r7, #32]
    return(posture);
 800ee58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ee5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee5c:	b672      	cpsid	i
    return(int_posture);
 800ee5e:	69fb      	ldr	r3, [r7, #28]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800ee60:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee66:	4a33      	ldr	r2, [pc, #204]	; (800ef34 <_tx_byte_pool_cleanup+0xec>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d158      	bne.n	800ef1e <_tx_byte_pool_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d152      	bne.n	800ef1e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee7c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d04c      	beq.n	800ef1e <_tx_byte_pool_cleanup+0xd6>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a2b      	ldr	r2, [pc, #172]	; (800ef38 <_tx_byte_pool_cleanup+0xf0>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d147      	bne.n	800ef1e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d043      	beq.n	800ef1e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea0:	1e5a      	subs	r2, r3, #1
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800eea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeaa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d103      	bne.n	800eeba <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	625a      	str	r2, [r3, #36]	; 0x24
 800eeb8:	e013      	b.n	800eee2 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeca:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d102      	bne.n	800eee2 <_tx_byte_pool_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eee0:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee6:	2b09      	cmp	r3, #9
 800eee8:	d119      	bne.n	800ef1e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2210      	movs	r2, #16
 800eeee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800eef2:	4b12      	ldr	r3, [pc, #72]	; (800ef3c <_tx_byte_pool_cleanup+0xf4>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3301      	adds	r3, #1
 800eef8:	4a10      	ldr	r2, [pc, #64]	; (800ef3c <_tx_byte_pool_cleanup+0xf4>)
 800eefa:	6013      	str	r3, [r2, #0]
 800eefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eefe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	f383 8810 	msr	PRIMASK, r3
}
 800ef06:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f001 fe01 	bl	8010b10 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef0e:	f3ef 8310 	mrs	r3, PRIMASK
 800ef12:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ef14:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ef16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ef18:	b672      	cpsid	i
    return(int_posture);
 800ef1a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ef1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f383 8810 	msr	PRIMASK, r3
}
 800ef28:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ef2a:	bf00      	nop
 800ef2c:	3738      	adds	r7, #56	; 0x38
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	0800ee49 	.word	0x0800ee49
 800ef38:	42595445 	.word	0x42595445
 800ef3c:	20004338 	.word	0x20004338

0800ef40 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08e      	sub	sp, #56	; 0x38
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
 800ef4c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ef4e:	2234      	movs	r2, #52	; 0x34
 800ef50:	2100      	movs	r1, #0
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f002 ff32 	bl	8011dbc <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	f023 0303 	bic.w	r3, r3, #3
 800ef5e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	f1a3 0208 	sub.w	r2, r3, #8
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ef92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	4413      	add	r3, r2
 800ef98:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ef9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef9c:	3b04      	subs	r3, #4
 800ef9e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800efa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efac:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800efae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb0:	3b04      	subs	r3, #4
 800efb2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800efb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800efc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efca:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800efd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd2:	3304      	adds	r3, #4
 800efd4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800efd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800efda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efdc:	4a1f      	ldr	r2, [pc, #124]	; (800f05c <_tx_byte_pool_create+0x11c>)
 800efde:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efe6:	f3ef 8310 	mrs	r3, PRIMASK
 800efea:	61bb      	str	r3, [r7, #24]
    return(posture);
 800efec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800efee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eff0:	b672      	cpsid	i
    return(int_posture);
 800eff2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800eff4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	4a19      	ldr	r2, [pc, #100]	; (800f060 <_tx_byte_pool_create+0x120>)
 800effa:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800effc:	4b19      	ldr	r3, [pc, #100]	; (800f064 <_tx_byte_pool_create+0x124>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d109      	bne.n	800f018 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800f004:	4a18      	ldr	r2, [pc, #96]	; (800f068 <_tx_byte_pool_create+0x128>)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	631a      	str	r2, [r3, #48]	; 0x30
 800f016:	e011      	b.n	800f03c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800f018:	4b13      	ldr	r3, [pc, #76]	; (800f068 <_tx_byte_pool_create+0x128>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f022:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	69fa      	ldr	r2, [r7, #28]
 800f034:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6a3a      	ldr	r2, [r7, #32]
 800f03a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800f03c:	4b09      	ldr	r3, [pc, #36]	; (800f064 <_tx_byte_pool_create+0x124>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	3301      	adds	r3, #1
 800f042:	4a08      	ldr	r2, [pc, #32]	; (800f064 <_tx_byte_pool_create+0x124>)
 800f044:	6013      	str	r3, [r2, #0]
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	f383 8810 	msr	PRIMASK, r3
}
 800f050:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3738      	adds	r7, #56	; 0x38
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	ffffeeee 	.word	0xffffeeee
 800f060:	42595445 	.word	0x42595445
 800f064:	20004290 	.word	0x20004290
 800f068:	2000428c 	.word	0x2000428c

0800f06c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b097      	sub	sp, #92	; 0x5c
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800f076:	2300      	movs	r3, #0
 800f078:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f07a:	f3ef 8310 	mrs	r3, PRIMASK
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f082:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f084:	b672      	cpsid	i
    return(int_posture);
 800f086:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800f088:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	689a      	ldr	r2, [r3, #8]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	3b02      	subs	r3, #2
 800f094:	00db      	lsls	r3, r3, #3
 800f096:	4413      	add	r3, r2
 800f098:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d308      	bcc.n	800f0b4 <_tx_byte_pool_search+0x48>
 800f0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	f383 8810 	msr	PRIMASK, r3
}
 800f0ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	653b      	str	r3, [r7, #80]	; 0x50
 800f0b2:	e0dd      	b.n	800f270 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800f0b4:	4b72      	ldr	r3, [pc, #456]	; (800f280 <_tx_byte_pool_search+0x214>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f0be:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	695b      	ldr	r3, [r3, #20]
 800f0c4:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800f0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0da:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800f0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a68      	ldr	r2, [pc, #416]	; (800f284 <_tx_byte_pool_search+0x218>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d143      	bne.n	800f16e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800f0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d104      	bne.n	800f0f6 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0f0:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0f8:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800f0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800f100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800f108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f10a:	3b08      	subs	r3, #8
 800f10c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800f10e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	d257      	bcs.n	800f1c6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800f116:	2300      	movs	r3, #0
 800f118:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	3304      	adds	r3, #4
 800f11e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a56      	ldr	r2, [pc, #344]	; (800f284 <_tx_byte_pool_search+0x218>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d113      	bne.n	800f156 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	1e5a      	subs	r2, r3, #1
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	695b      	ldr	r3, [r3, #20]
 800f148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d114      	bne.n	800f178 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f152:	615a      	str	r2, [r3, #20]
 800f154:	e010      	b.n	800f178 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800f160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f162:	2b00      	cmp	r3, #0
 800f164:	d008      	beq.n	800f178 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800f166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f168:	3b01      	subs	r3, #1
 800f16a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f16c:	e004      	b.n	800f178 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f170:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800f178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d002      	beq.n	800f184 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800f17e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f180:	3b01      	subs	r3, #1
 800f182:	64bb      	str	r3, [r7, #72]	; 0x48
 800f184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f186:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	f383 8810 	msr	PRIMASK, r3
}
 800f18e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f190:	f3ef 8310 	mrs	r3, PRIMASK
 800f194:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f196:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f198:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f19a:	b672      	cpsid	i
    return(int_posture);
 800f19c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800f19e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d009      	beq.n	800f1be <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	695b      	ldr	r3, [r3, #20]
 800f1ae:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f1bc:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800f1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d186      	bne.n	800f0d2 <_tx_byte_pool_search+0x66>
 800f1c4:	e000      	b.n	800f1c8 <_tx_byte_pool_search+0x15c>
                    break;
 800f1c6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800f1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d048      	beq.n	800f260 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800f1ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	2b13      	cmp	r3, #19
 800f1d6:	d91e      	bls.n	800f216 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	3308      	adds	r3, #8
 800f1dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1de:	4413      	add	r3, r2
 800f1e0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e4:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1e8:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800f1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1fe:	4a21      	ldr	r2, [pc, #132]	; (800f284 <_tx_byte_pool_search+0x218>)
 800f200:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800f20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f210:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800f216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f218:	3304      	adds	r3, #4
 800f21a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	689a      	ldr	r2, [r3, #8]
 800f22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	f1a3 0208 	sub.w	r2, r3, #8
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	695b      	ldr	r3, [r3, #20]
 800f23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d105      	bne.n	800f24c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f242:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	615a      	str	r2, [r3, #20]
 800f24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f383 8810 	msr	PRIMASK, r3
}
 800f256:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800f258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f25a:	3308      	adds	r3, #8
 800f25c:	653b      	str	r3, [r7, #80]	; 0x50
 800f25e:	e007      	b.n	800f270 <_tx_byte_pool_search+0x204>
 800f260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f262:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	f383 8810 	msr	PRIMASK, r3
}
 800f26a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800f26c:	2300      	movs	r3, #0
 800f26e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800f270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800f272:	4618      	mov	r0, r3
 800f274:	375c      	adds	r7, #92	; 0x5c
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	2000429c 	.word	0x2000429c
 800f284:	ffffeeee 	.word	0xffffeeee

0800f288 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800f28c:	f001 fa3e 	bl	801070c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800f290:	f002 f814 	bl	80112bc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800f294:	4b12      	ldr	r3, [pc, #72]	; (800f2e0 <_tx_initialize_high_level+0x58>)
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]
 800f29a:	4b12      	ldr	r3, [pc, #72]	; (800f2e4 <_tx_initialize_high_level+0x5c>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800f2a0:	4b11      	ldr	r3, [pc, #68]	; (800f2e8 <_tx_initialize_high_level+0x60>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	4b11      	ldr	r3, [pc, #68]	; (800f2ec <_tx_initialize_high_level+0x64>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800f2ac:	4b10      	ldr	r3, [pc, #64]	; (800f2f0 <_tx_initialize_high_level+0x68>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	4b10      	ldr	r3, [pc, #64]	; (800f2f4 <_tx_initialize_high_level+0x6c>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800f2b8:	4b0f      	ldr	r3, [pc, #60]	; (800f2f8 <_tx_initialize_high_level+0x70>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <_tx_initialize_high_level+0x74>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800f2c4:	4b0e      	ldr	r3, [pc, #56]	; (800f300 <_tx_initialize_high_level+0x78>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	4b0e      	ldr	r3, [pc, #56]	; (800f304 <_tx_initialize_high_level+0x7c>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800f2d0:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <_tx_initialize_high_level+0x80>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <_tx_initialize_high_level+0x84>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]
#endif
}
 800f2dc:	bf00      	nop
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	20004264 	.word	0x20004264
 800f2e4:	20004268 	.word	0x20004268
 800f2e8:	2000426c 	.word	0x2000426c
 800f2ec:	20004270 	.word	0x20004270
 800f2f0:	20004274 	.word	0x20004274
 800f2f4:	20004278 	.word	0x20004278
 800f2f8:	20004284 	.word	0x20004284
 800f2fc:	20004288 	.word	0x20004288
 800f300:	2000428c 	.word	0x2000428c
 800f304:	20004290 	.word	0x20004290
 800f308:	2000427c 	.word	0x2000427c
 800f30c:	20004280 	.word	0x20004280

0800f310 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800f314:	4b10      	ldr	r3, [pc, #64]	; (800f358 <_tx_initialize_kernel_enter+0x48>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800f31c:	d00c      	beq.n	800f338 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f31e:	4b0e      	ldr	r3, [pc, #56]	; (800f358 <_tx_initialize_kernel_enter+0x48>)
 800f320:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f324:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800f326:	f7f0 ff6b 	bl	8000200 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 800f32a:	f7ff ffad 	bl	800f288 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800f32e:	4b0b      	ldr	r3, [pc, #44]	; (800f35c <_tx_initialize_kernel_enter+0x4c>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	4a09      	ldr	r2, [pc, #36]	; (800f35c <_tx_initialize_kernel_enter+0x4c>)
 800f336:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f338:	4b07      	ldr	r3, [pc, #28]	; (800f358 <_tx_initialize_kernel_enter+0x48>)
 800f33a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f33e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800f340:	4b07      	ldr	r3, [pc, #28]	; (800f360 <_tx_initialize_kernel_enter+0x50>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4618      	mov	r0, r3
 800f346:	f7f1 f9f9 	bl	800073c <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800f34a:	4b03      	ldr	r3, [pc, #12]	; (800f358 <_tx_initialize_kernel_enter+0x48>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800f350:	f7f0 ff96 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800f354:	bf00      	nop
 800f356:	bd80      	pop	{r7, pc}
 800f358:	20000088 	.word	0x20000088
 800f35c:	20004338 	.word	0x20004338
 800f360:	20004294 	.word	0x20004294

0800f364 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08e      	sub	sp, #56	; 0x38
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f36e:	f3ef 8310 	mrs	r3, PRIMASK
 800f372:	623b      	str	r3, [r7, #32]
    return(posture);
 800f374:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f376:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f378:	b672      	cpsid	i
    return(int_posture);
 800f37a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800f37c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f382:	4a33      	ldr	r2, [pc, #204]	; (800f450 <_tx_mutex_cleanup+0xec>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d158      	bne.n	800f43a <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d152      	bne.n	800f43a <_tx_mutex_cleanup+0xd6>
        {
   
            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f398:	633b      	str	r3, [r7, #48]	; 0x30
    
            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d04c      	beq.n	800f43a <_tx_mutex_cleanup+0xd6>
            {
    
                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800f3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a2b      	ldr	r2, [pc, #172]	; (800f454 <_tx_mutex_cleanup+0xf0>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d147      	bne.n	800f43a <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	69db      	ldr	r3, [r3, #28]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d043      	beq.n	800f43a <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ba:	69db      	ldr	r3, [r3, #28]
 800f3bc:	1e5a      	subs	r2, r3, #1
 800f3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c0:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	69db      	ldr	r3, [r3, #28]
 800f3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d103      	bne.n	800f3d6 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	619a      	str	r2, [r3, #24]
 800f3d4:	e013      	b.n	800f3fe <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */
    
                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3e6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3ec:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d102      	bne.n	800f3fe <_tx_mutex_cleanup+0x9a>
                            {
            
                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3fc:	619a      	str	r2, [r3, #24]
                            }
                        }
 
                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f402:	2b0d      	cmp	r3, #13
 800f404:	d119      	bne.n	800f43a <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	221d      	movs	r2, #29
 800f40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f40e:	4b12      	ldr	r3, [pc, #72]	; (800f458 <_tx_mutex_cleanup+0xf4>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	3301      	adds	r3, #1
 800f414:	4a10      	ldr	r2, [pc, #64]	; (800f458 <_tx_mutex_cleanup+0xf4>)
 800f416:	6013      	str	r3, [r2, #0]
 800f418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	f383 8810 	msr	PRIMASK, r3
}
 800f422:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE
    
                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 fb73 	bl	8010b10 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f42a:	f3ef 8310 	mrs	r3, PRIMASK
 800f42e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f430:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f432:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f434:	b672      	cpsid	i
    return(int_posture);
 800f436:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f438:	637b      	str	r3, [r7, #52]	; 0x34
 800f43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f383 8810 	msr	PRIMASK, r3
}
 800f444:	bf00      	nop
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f446:	bf00      	nop
 800f448:	3738      	adds	r7, #56	; 0x38
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	0800f365 	.word	0x0800f365
 800f454:	4d555445 	.word	0x4d555445
 800f458:	20004338 	.word	0x20004338

0800f45c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08a      	sub	sp, #40	; 0x28
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f464:	f3ef 8310 	mrs	r3, PRIMASK
 800f468:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f46a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f46c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f46e:	b672      	cpsid	i
    return(int_posture);
 800f470:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f472:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f474:	4b1a      	ldr	r3, [pc, #104]	; (800f4e0 <_tx_mutex_thread_release+0x84>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	3301      	adds	r3, #1
 800f47a:	4a19      	ldr	r2, [pc, #100]	; (800f4e0 <_tx_mutex_thread_release+0x84>)
 800f47c:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {
    
        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f484:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800f486:	6a3b      	ldr	r3, [r7, #32]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d017      	beq.n	800f4bc <_tx_mutex_thread_release+0x60>
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	2201      	movs	r2, #1
 800f490:	609a      	str	r2, [r3, #8]
 800f492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f494:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f383 8810 	msr	PRIMASK, r3
}
 800f49c:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800f49e:	6a38      	ldr	r0, [r7, #32]
 800f4a0:	f000 fbaa 	bl	800fbf8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4a4:	f3ef 8310 	mrs	r3, PRIMASK
 800f4a8:	617b      	str	r3, [r7, #20]
    return(posture);
 800f4aa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f4ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f4ae:	b672      	cpsid	i
    return(int_posture);
 800f4b0:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800f4b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f4ba:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800f4bc:	6a3b      	ldr	r3, [r7, #32]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1dd      	bne.n	800f47e <_tx_mutex_thread_release+0x22>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800f4c2:	4b07      	ldr	r3, [pc, #28]	; (800f4e0 <_tx_mutex_thread_release+0x84>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	4a05      	ldr	r2, [pc, #20]	; (800f4e0 <_tx_mutex_thread_release+0x84>)
 800f4ca:	6013      	str	r3, [r2, #0]
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	f383 8810 	msr	PRIMASK, r3
}
 800f4d6:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 800f4d8:	bf00      	nop
 800f4da:	3728      	adds	r7, #40	; 0x28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	20004338 	.word	0x20004338

0800f4e4 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b08a      	sub	sp, #40	; 0x28
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800f4f0:	2234      	movs	r2, #52	; 0x34
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f002 fc61 	bl	8011dbc <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f506:	f3ef 8310 	mrs	r3, PRIMASK
 800f50a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f50c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f50e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f510:	b672      	cpsid	i
    return(int_posture);
 800f512:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800f514:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	4a1a      	ldr	r2, [pc, #104]	; (800f584 <_tx_mutex_create+0xa0>)
 800f51a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800f51c:	4b1a      	ldr	r3, [pc, #104]	; (800f588 <_tx_mutex_create+0xa4>)
 800f51e:	4a1b      	ldr	r2, [pc, #108]	; (800f58c <_tx_mutex_create+0xa8>)
 800f520:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f522:	4b1b      	ldr	r3, [pc, #108]	; (800f590 <_tx_mutex_create+0xac>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d109      	bne.n	800f53e <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800f52a:	4a1a      	ldr	r2, [pc, #104]	; (800f594 <_tx_mutex_create+0xb0>)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	625a      	str	r2, [r3, #36]	; 0x24
 800f53c:	e011      	b.n	800f562 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800f53e:	4b15      	ldr	r3, [pc, #84]	; (800f594 <_tx_mutex_create+0xb0>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f548:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	69fa      	ldr	r2, [r7, #28]
 800f55a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6a3a      	ldr	r2, [r7, #32]
 800f560:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800f562:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <_tx_mutex_create+0xac>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3301      	adds	r3, #1
 800f568:	4a09      	ldr	r2, [pc, #36]	; (800f590 <_tx_mutex_create+0xac>)
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	f383 8810 	msr	PRIMASK, r3
}
 800f576:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f578:	2300      	movs	r3, #0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3728      	adds	r7, #40	; 0x28
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	4d555445 	.word	0x4d555445
 800f588:	2000433c 	.word	0x2000433c
 800f58c:	0800f45d 	.word	0x0800f45d
 800f590:	20004280 	.word	0x20004280
 800f594:	2000427c 	.word	0x2000427c

0800f598 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b096      	sub	sp, #88	; 0x58
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800f5a8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5aa:	b672      	cpsid	i
    return(int_posture);
 800f5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800f5ae:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800f5b6:	4b4a      	ldr	r3, [pc, #296]	; (800f6e0 <_tx_mutex_delete+0x148>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	4a48      	ldr	r2, [pc, #288]	; (800f6e0 <_tx_mutex_delete+0x148>)
 800f5be:	6013      	str	r3, [r2, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f5c0:	4b47      	ldr	r3, [pc, #284]	; (800f6e0 <_tx_mutex_delete+0x148>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d103      	bne.n	800f5d0 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800f5c8:	4b46      	ldr	r3, [pc, #280]	; (800f6e4 <_tx_mutex_delete+0x14c>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	601a      	str	r2, [r3, #0]
 800f5ce:	e013      	b.n	800f5f8 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a1b      	ldr	r3, [r3, #32]
 800f5d4:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5da:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800f5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5e0:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800f5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5e6:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800f5e8:	4b3e      	ldr	r3, [pc, #248]	; (800f6e4 <_tx_mutex_delete+0x14c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d102      	bne.n	800f5f8 <_tx_mutex_delete+0x60>
        {
        
            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800f5f2:	4a3c      	ldr	r2, [pc, #240]	; (800f6e4 <_tx_mutex_delete+0x14c>)
 800f5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5f6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f5f8:	4b3b      	ldr	r3, [pc, #236]	; (800f6e8 <_tx_mutex_delete+0x150>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	4a3a      	ldr	r2, [pc, #232]	; (800f6e8 <_tx_mutex_delete+0x150>)
 800f600:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	699b      	ldr	r3, [r3, #24]
 800f606:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800f620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f622:	2b00      	cmp	r3, #0
 800f624:	d013      	beq.n	800f64e <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2201      	movs	r2, #1
 800f62a:	609a      	str	r2, [r3, #8]
 800f62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f62e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f632:	f383 8810 	msr	PRIMASK, r3
}
 800f636:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fadd 	bl	800fbf8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f63e:	f3ef 8310 	mrs	r3, PRIMASK
 800f642:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800f646:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f648:	b672      	cpsid	i
    return(int_posture);
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800f64c:	657b      	str	r3, [r7, #84]	; 0x54
 800f64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f650:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	f383 8810 	msr	PRIMASK, r3
}
 800f658:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800f65a:	e024      	b.n	800f6a6 <_tx_mutex_delete+0x10e>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 800f65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f65e:	3b01      	subs	r3, #1
 800f660:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f662:	f3ef 8310 	mrs	r3, PRIMASK
 800f666:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f668:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f66a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f66c:	b672      	cpsid	i
    return(int_posture);
 800f66e:	69bb      	ldr	r3, [r7, #24]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 800f670:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f674:	2200      	movs	r2, #0
 800f676:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800f678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67a:	2201      	movs	r2, #1
 800f67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800f680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800f686:	4b18      	ldr	r3, [pc, #96]	; (800f6e8 <_tx_mutex_delete+0x150>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	3301      	adds	r3, #1
 800f68c:	4a16      	ldr	r2, [pc, #88]	; (800f6e8 <_tx_mutex_delete+0x150>)
 800f68e:	6013      	str	r3, [r2, #0]
 800f690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f692:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	f383 8810 	msr	PRIMASK, r3
}
 800f69a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f69c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f69e:	f001 fa37 	bl	8010b10 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800f6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a4:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 800f6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1d7      	bne.n	800f65c <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800f6b0:	613b      	str	r3, [r7, #16]
    return(posture);
 800f6b2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f6b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f6b6:	b672      	cpsid	i
    return(int_posture);
 800f6b8:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800f6ba:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800f6bc:	4b0a      	ldr	r3, [pc, #40]	; (800f6e8 <_tx_mutex_delete+0x150>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	4a09      	ldr	r2, [pc, #36]	; (800f6e8 <_tx_mutex_delete+0x150>)
 800f6c4:	6013      	str	r3, [r2, #0]
 800f6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f383 8810 	msr	PRIMASK, r3
}
 800f6d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800f6d2:	f001 f9e3 	bl	8010a9c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3758      	adds	r7, #88	; 0x58
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	20004280 	.word	0x20004280
 800f6e4:	2000427c 	.word	0x2000427c
 800f6e8:	20004338 	.word	0x20004338

0800f6ec <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b092      	sub	sp, #72	; 0x48
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f6f6:	f3ef 8310 	mrs	r3, PRIMASK
 800f6fa:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f6fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f700:	b672      	cpsid	i
    return(int_posture);
 800f702:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800f704:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f706:	4b7a      	ldr	r3, [pc, #488]	; (800f8f0 <_tx_mutex_get+0x204>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d144      	bne.n	800f79e <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f71e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800f720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f722:	2b00      	cmp	r3, #0
 800f724:	d032      	beq.n	800f78c <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	691b      	ldr	r3, [r3, #16]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d106      	bne.n	800f73c <_tx_mutex_get+0x50>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800f72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2220      	movs	r2, #32
 800f73a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800f73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f73e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f742:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800f744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00f      	beq.n	800f76a <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800f74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f74e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800f750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f760:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f766:	62da      	str	r2, [r3, #44]	; 0x2c
 800f768:	e009      	b.n	800f77e <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800f76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800f77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f788:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800f78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f78e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	f383 8810 	msr	PRIMASK, r3
}
 800f796:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f798:	2300      	movs	r3, #0
 800f79a:	647b      	str	r3, [r7, #68]	; 0x44
 800f79c:	e0a2      	b.n	800f8e4 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d10d      	bne.n	800f7c4 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just 
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	1c5a      	adds	r2, r3, #1
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	609a      	str	r2, [r3, #8]
 800f7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	f383 8810 	msr	PRIMASK, r3
}
 800f7bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	647b      	str	r3, [r7, #68]	; 0x44
 800f7c2:	e08f      	b.n	800f8e4 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f000 8084 	beq.w	800f8d4 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f7cc:	4b49      	ldr	r3, [pc, #292]	; (800f8f4 <_tx_mutex_get+0x208>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d008      	beq.n	800f7e6 <_tx_mutex_get+0xfa>
 800f7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	f383 8810 	msr	PRIMASK, r3
}
 800f7de:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800f7e0:	231d      	movs	r3, #29
 800f7e2:	647b      	str	r3, [r7, #68]	; 0x44
 800f7e4:	e07e      	b.n	800f8e4 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800f7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ee:	4a42      	ldr	r2, [pc, #264]	; (800f8f8 <_tx_mutex_get+0x20c>)
 800f7f0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800f7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f802:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	69db      	ldr	r3, [r3, #28]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d109      	bne.n	800f822 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f812:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f818:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f81e:	675a      	str	r2, [r3, #116]	; 0x74
 800f820:	e011      	b.n	800f846 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	699b      	ldr	r3, [r3, #24]
 800f826:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f82c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f832:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f838:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f83e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f844:	675a      	str	r2, [r3, #116]	; 0x74
                }
            
                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	69db      	ldr	r3, [r3, #28]
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800f850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f852:	220d      	movs	r2, #13
 800f854:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f858:	2201      	movs	r2, #1
 800f85a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f862:	4b24      	ldr	r3, [pc, #144]	; (800f8f4 <_tx_mutex_get+0x208>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3301      	adds	r3, #1
 800f868:	4a22      	ldr	r2, [pc, #136]	; (800f8f4 <_tx_mutex_get+0x208>)
 800f86a:	6013      	str	r3, [r2, #0]
 800f86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	f383 8810 	msr	PRIMASK, r3
}
 800f876:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread 
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d121      	bne.n	800f8c4 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f888:	429a      	cmp	r2, r3
 800f88a:	d903      	bls.n	800f894 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800f88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800f894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d204      	bcs.n	800f8ac <_tx_mutex_get+0x1c0>
                    {
                    
                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800f8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800f8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d905      	bls.n	800f8c4 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800f8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8c0:	f000 f8ce 	bl	800fa60 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f8c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f8c6:	f001 fa37 	bl	8010d38 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8d0:	647b      	str	r3, [r7, #68]	; 0x44
 800f8d2:	e007      	b.n	800f8e4 <_tx_mutex_get+0x1f8>
 800f8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f383 8810 	msr	PRIMASK, r3
}
 800f8de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800f8e0:	231d      	movs	r3, #29
 800f8e2:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800f8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3748      	adds	r7, #72	; 0x48
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	2000429c 	.word	0x2000429c
 800f8f4:	20004338 	.word	0x20004338
 800f8f8:	0800f365 	.word	0x0800f365

0800f8fc <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b092      	sub	sp, #72	; 0x48
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f904:	f3ef 8310 	mrs	r3, PRIMASK
 800f908:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f90c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f90e:	b672      	cpsid	i
    return(int_posture);
 800f910:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f912:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	69db      	ldr	r3, [r3, #28]
 800f918:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800f91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d805      	bhi.n	800f92c <_tx_mutex_prioritize+0x30>
 800f920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f922:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	f383 8810 	msr	PRIMASK, r3
}
 800f92a:	e092      	b.n	800fa52 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800f92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d114      	bne.n	800f95c <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	699b      	ldr	r3, [r3, #24]
 800f936:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800f938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f93c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f946:	429a      	cmp	r2, r3
 800f948:	d202      	bcs.n	800f950 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f94e:	619a      	str	r2, [r3, #24]
 800f950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f952:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	f383 8810 	msr	PRIMASK, r3
}
 800f95a:	e07a      	b.n	800fa52 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	699b      	ldr	r3, [r3, #24]
 800f960:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96a:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800f96c:	4b3b      	ldr	r3, [pc, #236]	; (800fa5c <_tx_mutex_prioritize+0x160>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3301      	adds	r3, #1
 800f972:	4a3a      	ldr	r2, [pc, #232]	; (800fa5c <_tx_mutex_prioritize+0x160>)
 800f974:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800f976:	2300      	movs	r3, #0
 800f978:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800f97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f982:	429a      	cmp	r2, r3
 800f984:	d201      	bcs.n	800f98a <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800f986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f98c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f383 8810 	msr	PRIMASK, r3
}
 800f994:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f996:	f3ef 8310 	mrs	r3, PRIMASK
 800f99a:	617b      	str	r3, [r7, #20]
    return(posture);
 800f99c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f99e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f9a0:	b672      	cpsid	i
    return(int_posture);
 800f9a2:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800f9a4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	699b      	ldr	r3, [r3, #24]
 800f9aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d002      	beq.n	800f9b6 <_tx_mutex_prioritize+0xba>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f9b4:	e006      	b.n	800f9c4 <_tx_mutex_prioritize+0xc8>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	69db      	ldr	r3, [r3, #28]
 800f9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d001      	beq.n	800f9c4 <_tx_mutex_prioritize+0xc8>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d103      	bne.n	800f9d2 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f9d0:	e00c      	b.n	800f9ec <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	699b      	ldr	r3, [r3, #24]
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	69db      	ldr	r3, [r3, #28]
 800f9dc:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9e6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800f9ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d1c2      	bne.n	800f97a <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800f9f4:	4b19      	ldr	r3, [pc, #100]	; (800fa5c <_tx_mutex_prioritize+0x160>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	4a18      	ldr	r2, [pc, #96]	; (800fa5c <_tx_mutex_prioritize+0x160>)
 800f9fc:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800f9fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d01d      	beq.n	800fa42 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800fa06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800fa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa10:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa16:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800fa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa1c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa22:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800fa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa28:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800fa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa2e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800fa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa34:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa3a:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa40:	619a      	str	r2, [r3, #24]
 800fa42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	f383 8810 	msr	PRIMASK, r3
}
 800fa4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fa4e:	f001 f825 	bl	8010a9c <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800fa52:	2300      	movs	r3, #0
#endif
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3748      	adds	r7, #72	; 0x48
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	20004338 	.word	0x20004338

0800fa60 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b092      	sub	sp, #72	; 0x48
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa6a:	f3ef 8310 	mrs	r3, PRIMASK
 800fa6e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800fa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800fa72:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa74:	b672      	cpsid	i
    return(int_posture);
 800fa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800fa78:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d017      	beq.n	800fab2 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	683a      	ldr	r2, [r7, #0]
 800fa86:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa8e:	683a      	ldr	r2, [r7, #0]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d905      	bls.n	800faa0 <_tx_mutex_priority_change+0x40>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	63da      	str	r2, [r3, #60]	; 0x3c
 800fa9e:	e002      	b.n	800faa6 <_tx_mutex_priority_change+0x46>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	683a      	ldr	r2, [r7, #0]
 800faa4:	63da      	str	r2, [r3, #60]	; 0x3c
 800faa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800faaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faac:	f383 8810 	msr	PRIMASK, r3
}
 800fab0:	e096      	b.n	800fbe0 <_tx_mutex_priority_change+0x180>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800fab2:	4b4d      	ldr	r3, [pc, #308]	; (800fbe8 <_tx_mutex_priority_change+0x188>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800fabe:	4b4b      	ldr	r3, [pc, #300]	; (800fbec <_tx_mutex_priority_change+0x18c>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	3302      	adds	r3, #2
 800fac4:	4a49      	ldr	r2, [pc, #292]	; (800fbec <_tx_mutex_priority_change+0x18c>)
 800fac6:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	220e      	movs	r2, #14
 800facc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	64da      	str	r2, [r3, #76]	; 0x4c
 800fada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fadc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	f383 8810 	msr	PRIMASK, r3
}
 800fae4:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the 
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f001 f926 	bl	8010d38 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800faec:	f3ef 8310 	mrs	r3, PRIMASK
 800faf0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800faf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800faf4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800faf6:	b672      	cpsid	i
    return(int_posture);
 800faf8:	6a3b      	ldr	r3, [r7, #32]

        /* Disable interrupts.  */
        TX_DISABLE
 800fafa:	647b      	str	r3, [r7, #68]	; 0x44

        /* At this point, the preempt disable flag is still set, so we still have 
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb08:	683a      	ldr	r2, [r7, #0]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d905      	bls.n	800fb1a <_tx_mutex_priority_change+0xba>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	63da      	str	r2, [r3, #60]	; 0x3c
 800fb18:	e002      	b.n	800fb20 <_tx_mutex_priority_change+0xc0>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	683a      	ldr	r2, [r7, #0]
 800fb1e:	63da      	str	r2, [r3, #60]	; 0x3c
 800fb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb22:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	f383 8810 	msr	PRIMASK, r3
}
 800fb2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 ffef 	bl	8010b10 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fb32:	f3ef 8310 	mrs	r3, PRIMASK
 800fb36:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fb38:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fb3a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb3c:	b672      	cpsid	i
    return(int_posture);
 800fb3e:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800fb40:	647b      	str	r3, [r7, #68]	; 0x44
#endif
        
        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800fb42:	4b29      	ldr	r3, [pc, #164]	; (800fbe8 <_tx_mutex_priority_change+0x188>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d041      	beq.n	800fbd4 <_tx_mutex_priority_change+0x174>
        {
        
            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d13d      	bne.n	800fbd4 <_tx_mutex_priority_change+0x174>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d811      	bhi.n	800fb88 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d133      	bne.n	800fbd4 <_tx_mutex_priority_change+0x174>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800fb6c:	4a1e      	ldr	r2, [pc, #120]	; (800fbe8 <_tx_mutex_priority_change+0x188>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800fb72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d22c      	bcs.n	800fbd4 <_tx_mutex_priority_change+0x174>
                        {
                        
                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7e:	491c      	ldr	r1, [pc, #112]	; (800fbf0 <_tx_mutex_priority_change+0x190>)
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fb86:	e025      	b.n	800fbd4 <_tx_mutex_priority_change+0x174>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d21f      	bcs.n	800fbd4 <_tx_mutex_priority_change+0x174>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d80d      	bhi.n	800fbbc <_tx_mutex_priority_change+0x15c>
                        {
                
                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800fba0:	4a11      	ldr	r2, [pc, #68]	; (800fbe8 <_tx_mutex_priority_change+0x188>)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800fba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d212      	bcs.n	800fbd4 <_tx_mutex_priority_change+0x174>
                            {
                        
                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb2:	490f      	ldr	r1, [pc, #60]	; (800fbf0 <_tx_mutex_priority_change+0x190>)
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fbba:	e00b      	b.n	800fbd4 <_tx_mutex_priority_change+0x174>
                            TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                            _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                            /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                            TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc6:	637b      	str	r3, [r7, #52]	; 0x34
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800fbc8:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <_tx_mutex_priority_change+0x194>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	4a08      	ldr	r2, [pc, #32]	; (800fbf4 <_tx_mutex_priority_change+0x194>)
 800fbd2:	6013      	str	r3, [r2, #0]
 800fbd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f383 8810 	msr	PRIMASK, r3
}
 800fbde:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800fbe0:	bf00      	nop
 800fbe2:	3748      	adds	r7, #72	; 0x48
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	200042a0 	.word	0x200042a0
 800fbec:	20004338 	.word	0x20004338
 800fbf0:	200042b8 	.word	0x200042b8
 800fbf4:	200042b0 	.word	0x200042b0

0800fbf8 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b0a6      	sub	sp, #152	; 0x98
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800fc00:	2320      	movs	r3, #32
 800fc02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc06:	f3ef 8310 	mrs	r3, PRIMASK
 800fc0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800fc0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800fc0e:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc10:	b672      	cpsid	i
    return(int_posture);
 800fc12:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800fc14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	f000 81ff 	beq.w	8010020 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800fc28:	4ba3      	ldr	r3, [pc, #652]	; (800feb8 <_tx_mutex_put+0x2c0>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d00d      	beq.n	800fc54 <_tx_mutex_put+0x5c>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800fc38:	4ba0      	ldr	r3, [pc, #640]	; (800febc <_tx_mutex_put+0x2c4>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d109      	bne.n	800fc54 <_tx_mutex_put+0x5c>
 800fc40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc44:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc48:	f383 8810 	msr	PRIMASK, r3
}
 800fc4c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800fc4e:	231e      	movs	r3, #30
 800fc50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }
        
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800fc54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc58:	2b20      	cmp	r3, #32
 800fc5a:	f040 81eb 	bne.w	8010034 <_tx_mutex_put+0x43c>
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	1e5a      	subs	r2, r3, #1
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00a      	beq.n	800fc86 <_tx_mutex_put+0x8e>
 800fc70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc74:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc78:	f383 8810 	msr	PRIMASK, r3
}
 800fc7c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fc84:	e1d6      	b.n	8010034 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800fc86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10a      	bne.n	800fca2 <_tx_mutex_put+0xaa>
 800fc8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc90:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc94:	f383 8810 	msr	PRIMASK, r3
}
 800fc98:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fca0:	e1c8      	b.n	8010034 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800fca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fca8:	1e5a      	subs	r2, r3, #1
 800fcaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800fcb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d104      	bne.n	800fcc4 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800fcba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800fcc2:	e019      	b.n	800fcf8 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcd0:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800fcd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fcd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fcd8:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800fcda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fce0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800fce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d104      	bne.n	800fcf8 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800fcee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fcf4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	699b      	ldr	r3, [r3, #24]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d110      	bne.n	800fd22 <_tx_mutex_put+0x12a>
                    {
                    
                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10c      	bne.n	800fd22 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	60da      	str	r2, [r3, #12]
 800fd0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd12:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd16:	f383 8810 	msr	PRIMASK, r3
}
 800fd1a:	bf00      	nop
                            
                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }
                     
                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800fd22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd26:	2b20      	cmp	r3, #32
 800fd28:	f040 8184 	bne.w	8010034 <_tx_mutex_put+0x43c>
                    {
   
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800fd32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	691b      	ldr	r3, [r3, #16]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d155      	bne.n	800fdf0 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fd44:	4b5d      	ldr	r3, [pc, #372]	; (800febc <_tx_mutex_put+0x2c4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	4a5c      	ldr	r2, [pc, #368]	; (800febc <_tx_mutex_put+0x2c4>)
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd52:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd56:	f383 8810 	msr	PRIMASK, r3
}
 800fd5a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fd5c:	2320      	movs	r3, #32
 800fd5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            
                            /* Search the owned mutexes for this thread to determine the highest priority for this 
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800fd62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fd68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fd6c:	e01f      	b.n	800fdae <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800fd6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d10b      	bne.n	800fd90 <_tx_mutex_put+0x198>
                                {
                            
                                    /* Determine if highest priority field of the mutex is higher than the priority to 
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800fd78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d904      	bls.n	800fd90 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800fd86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800fd90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800fd9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fda0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d102      	bne.n	800fdae <_tx_mutex_put+0x1b6>
                                {
                            
                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fdae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1db      	bne.n	800fd6e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fdb6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdba:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800fdbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800fdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800fdc0:	b672      	cpsid	i
    return(int_posture);
 800fdc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fdc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fdc8:	4b3c      	ldr	r3, [pc, #240]	; (800febc <_tx_mutex_put+0x2c4>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	4a3b      	ldr	r2, [pc, #236]	; (800febc <_tx_mutex_put+0x2c4>)
 800fdd0:	6013      	str	r3, [r2, #0]
#endif
                       
                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800fdd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fdd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fdd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                                
                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800fddc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fde0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d203      	bcs.n	800fdf0 <_tx_mutex_put+0x1f8>
                            {
                            
                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800fde8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fdec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	69db      	ldr	r3, [r3, #28]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d920      	bls.n	800fe3a <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d11c      	bne.n	800fe3a <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800fe00:	4b2e      	ldr	r3, [pc, #184]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	3301      	adds	r3, #1
 800fe06:	4a2d      	ldr	r2, [pc, #180]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe0e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe12:	f383 8810 	msr	PRIMASK, r3
}
 800fe16:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fd6f 	bl	800f8fc <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe1e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe22:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800fe26:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe28:	b672      	cpsid	i
    return(int_posture);
 800fe2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800fe2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800fe30:	4b22      	ldr	r3, [pc, #136]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	4a21      	ldr	r2, [pc, #132]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe38:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	699b      	ldr	r3, [r3, #24]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d13e      	bne.n	800fec0 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fe42:	4b1e      	ldr	r3, [pc, #120]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3301      	adds	r3, #1
 800fe48:	4a1c      	ldr	r2, [pc, #112]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe4a:	6013      	str	r3, [r2, #0]
 800fe4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe50:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe54:	f383 8810 	msr	PRIMASK, r3
}
 800fe58:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that 
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2220      	movs	r2, #32
 800fe5e:	629a      	str	r2, [r3, #40]	; 0x28
  
                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d006      	beq.n	800fe7c <_tx_mutex_put+0x284>
                            {
                      
                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff fdf2 	bl	800fa60 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe7c:	f3ef 8310 	mrs	r3, PRIMASK
 800fe80:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fe82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fe84:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe86:	b672      	cpsid	i
    return(int_posture);
 800fe88:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800fe8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fe8e:	4b0b      	ldr	r3, [pc, #44]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	3b01      	subs	r3, #1
 800fe94:	4a09      	ldr	r2, [pc, #36]	; (800febc <_tx_mutex_put+0x2c4>)
 800fe96:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	60da      	str	r2, [r3, #12]
 800fe9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fea2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea6:	f383 8810 	msr	PRIMASK, r3
}
 800feaa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800feac:	f000 fdf6 	bl	8010a9c <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800feb0:	2300      	movs	r3, #0
 800feb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800feb6:	e0bd      	b.n	8010034 <_tx_mutex_put+0x43c>
 800feb8:	2000429c 	.word	0x2000429c
 800febc:	20004338 	.word	0x20004338
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d10a      	bne.n	800fee4 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        
                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800fed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2220      	movs	r2, #32
 800fee2:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800fee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800feea:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800feec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10a      	bne.n	800ff08 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800fef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	631a      	str	r2, [r3, #48]	; 0x30
 800ff06:	e016      	b.n	800ff36 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800ff08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800ff12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff18:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800ff1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800ff22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ff2c:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ff34:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800ff36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2201      	movs	r2, #1
 800ff44:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ff4a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	69db      	ldr	r3, [r3, #28]
 800ff50:	1e5a      	subs	r2, r3, #1
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	61da      	str	r2, [r3, #28]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	69db      	ldr	r3, [r3, #28]
 800ff5a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ff5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d103      	bne.n	800ff6a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	619a      	str	r2, [r3, #24]
 800ff68:	e00e      	b.n	800ff88 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ff6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff6e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff74:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ff76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff7a:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ff7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff80:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ff82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff86:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ff88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ff8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff90:	2200      	movs	r2, #0
 800ff92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ff96:	4b2a      	ldr	r3, [pc, #168]	; (8010040 <_tx_mutex_put+0x448>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	4a28      	ldr	r2, [pc, #160]	; (8010040 <_tx_mutex_put+0x448>)
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffa4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	f383 8810 	msr	PRIMASK, r3
}
 800ffac:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d12d      	bne.n	8010012 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */
        
                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d01c      	beq.n	800fff8 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7ff fc9c 	bl	800f8fc <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ffc4:	f3ef 8310 	mrs	r3, PRIMASK
 800ffc8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ffca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ffcc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ffce:	b672      	cpsid	i
    return(int_posture);
 800ffd0:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800ffd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800ffdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d003      	beq.n	800ffea <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800ffe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	629a      	str	r2, [r3, #40]	; 0x28
 800ffea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	f383 8810 	msr	PRIMASK, r3
}
 800fff6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */
                    
                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800fff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fffe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010002:	429a      	cmp	r2, r3
 8010004:	d005      	beq.n	8010012 <_tx_mutex_put+0x41a>
                                {
        
                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8010006:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801000a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801000e:	f7ff fd27 	bl	800fa60 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8010012:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010014:	f000 fd7c 	bl	8010b10 <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8010018:	2300      	movs	r3, #0
 801001a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801001e:	e009      	b.n	8010034 <_tx_mutex_put+0x43c>
 8010020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010024:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f383 8810 	msr	PRIMASK, r3
}
 801002c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 801002e:	231e      	movs	r3, #30
 8010030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8010034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8010038:	4618      	mov	r0, r3
 801003a:	3798      	adds	r7, #152	; 0x98
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	20004338 	.word	0x20004338

08010044 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08e      	sub	sp, #56	; 0x38
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801004e:	f3ef 8310 	mrs	r3, PRIMASK
 8010052:	623b      	str	r3, [r7, #32]
    return(posture);
 8010054:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010056:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010058:	b672      	cpsid	i
    return(int_posture);
 801005a:	69fb      	ldr	r3, [r7, #28]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 801005c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010062:	4a33      	ldr	r2, [pc, #204]	; (8010130 <_tx_semaphore_cleanup+0xec>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d158      	bne.n	801011a <_tx_semaphore_cleanup+0xd6>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d152      	bne.n	801011a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010078:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	d04c      	beq.n	801011a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8010080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	4a2b      	ldr	r2, [pc, #172]	; (8010134 <_tx_semaphore_cleanup+0xf0>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d147      	bne.n	801011a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801008a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d043      	beq.n	801011a <_tx_semaphore_cleanup+0xd6>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2200      	movs	r2, #0
 8010096:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8010098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009a:	691b      	ldr	r3, [r3, #16]
 801009c:	1e5a      	subs	r2, r3, #1
 801009e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80100a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80100a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d103      	bne.n	80100b6 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	2200      	movs	r2, #0
 80100b2:	60da      	str	r2, [r3, #12]
 80100b4:	e013      	b.n	80100de <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ba:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100c0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80100c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100c6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80100c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100cc:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d102      	bne.n	80100de <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100dc:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e2:	2b06      	cmp	r3, #6
 80100e4:	d119      	bne.n	801011a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	220d      	movs	r2, #13
 80100ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80100ee:	4b12      	ldr	r3, [pc, #72]	; (8010138 <_tx_semaphore_cleanup+0xf4>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	3301      	adds	r3, #1
 80100f4:	4a10      	ldr	r2, [pc, #64]	; (8010138 <_tx_semaphore_cleanup+0xf4>)
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	f383 8810 	msr	PRIMASK, r3
}
 8010102:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 fd03 	bl	8010b10 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801010a:	f3ef 8310 	mrs	r3, PRIMASK
 801010e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010110:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010112:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010114:	b672      	cpsid	i
    return(int_posture);
 8010116:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010118:	637b      	str	r3, [r7, #52]	; 0x34
 801011a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f383 8810 	msr	PRIMASK, r3
}
 8010124:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010126:	bf00      	nop
 8010128:	3738      	adds	r7, #56	; 0x38
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	08010045 	.word	0x08010045
 8010134:	53454d41 	.word	0x53454d41
 8010138:	20004338 	.word	0x20004338

0801013c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b08a      	sub	sp, #40	; 0x28
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8010148:	2220      	movs	r2, #32
 801014a:	2100      	movs	r1, #0
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f001 fe35 	bl	8011dbc <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	68ba      	ldr	r2, [r7, #8]
 8010156:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801015e:	f3ef 8310 	mrs	r3, PRIMASK
 8010162:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010164:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010166:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010168:	b672      	cpsid	i
    return(int_posture);
 801016a:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 801016c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	4a18      	ldr	r2, [pc, #96]	; (80101d4 <_tx_semaphore_create+0x98>)
 8010172:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8010174:	4b18      	ldr	r3, [pc, #96]	; (80101d8 <_tx_semaphore_create+0x9c>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d109      	bne.n	8010190 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801017c:	4a17      	ldr	r2, [pc, #92]	; (80101dc <_tx_semaphore_create+0xa0>)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	619a      	str	r2, [r3, #24]
 801018e:	e011      	b.n	80101b4 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8010190:	4b12      	ldr	r3, [pc, #72]	; (80101dc <_tx_semaphore_create+0xa0>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	699b      	ldr	r3, [r3, #24]
 801019a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	69fa      	ldr	r2, [r7, #28]
 80101ac:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6a3a      	ldr	r2, [r7, #32]
 80101b2:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80101b4:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <_tx_semaphore_create+0x9c>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	3301      	adds	r3, #1
 80101ba:	4a07      	ldr	r2, [pc, #28]	; (80101d8 <_tx_semaphore_create+0x9c>)
 80101bc:	6013      	str	r3, [r2, #0]
 80101be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	f383 8810 	msr	PRIMASK, r3
}
 80101c8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3728      	adds	r7, #40	; 0x28
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	53454d41 	.word	0x53454d41
 80101d8:	20004268 	.word	0x20004268
 80101dc:	20004264 	.word	0x20004264

080101e0 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b092      	sub	sp, #72	; 0x48
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80101e8:	f3ef 8310 	mrs	r3, PRIMASK
 80101ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80101f0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80101f2:	b672      	cpsid	i
    return(int_posture);
 80101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80101f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80101fe:	4b3d      	ldr	r3, [pc, #244]	; (80102f4 <_tx_semaphore_delete+0x114>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3b01      	subs	r3, #1
 8010204:	4a3b      	ldr	r2, [pc, #236]	; (80102f4 <_tx_semaphore_delete+0x114>)
 8010206:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8010208:	4b3a      	ldr	r3, [pc, #232]	; (80102f4 <_tx_semaphore_delete+0x114>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d103      	bne.n	8010218 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8010210:	4b39      	ldr	r3, [pc, #228]	; (80102f8 <_tx_semaphore_delete+0x118>)
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	e013      	b.n	8010240 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	695b      	ldr	r3, [r3, #20]
 801021c:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010228:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801022a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801022e:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8010230:	4b31      	ldr	r3, [pc, #196]	; (80102f8 <_tx_semaphore_delete+0x118>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	429a      	cmp	r2, r3
 8010238:	d102      	bne.n	8010240 <_tx_semaphore_delete+0x60>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801023a:	4a2f      	ldr	r2, [pc, #188]	; (80102f8 <_tx_semaphore_delete+0x118>)
 801023c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010240:	4b2e      	ldr	r3, [pc, #184]	; (80102fc <_tx_semaphore_delete+0x11c>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	3301      	adds	r3, #1
 8010246:	4a2d      	ldr	r2, [pc, #180]	; (80102fc <_tx_semaphore_delete+0x11c>)
 8010248:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	611a      	str	r2, [r3, #16]
 8010262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010264:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	f383 8810 	msr	PRIMASK, r3
}
 801026c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 801026e:	e024      	b.n	80102ba <_tx_semaphore_delete+0xda>
    {
    
        /* Decrement the suspension count.  */
        suspended_count--;
 8010270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010272:	3b01      	subs	r3, #1
 8010274:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010276:	f3ef 8310 	mrs	r3, PRIMASK
 801027a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801027c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801027e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010280:	b672      	cpsid	i
    return(int_posture);
 8010282:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8010284:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010288:	2200      	movs	r2, #0
 801028a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 801028c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801028e:	2201      	movs	r2, #1
 8010290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8010294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010298:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801029a:	4b18      	ldr	r3, [pc, #96]	; (80102fc <_tx_semaphore_delete+0x11c>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	3301      	adds	r3, #1
 80102a0:	4a16      	ldr	r2, [pc, #88]	; (80102fc <_tx_semaphore_delete+0x11c>)
 80102a2:	6013      	str	r3, [r2, #0]
 80102a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102a8:	6a3b      	ldr	r3, [r7, #32]
 80102aa:	f383 8810 	msr	PRIMASK, r3
}
 80102ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80102b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80102b2:	f000 fc2d 	bl	8010b10 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80102b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b8:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80102ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1d7      	bne.n	8010270 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102c0:	f3ef 8310 	mrs	r3, PRIMASK
 80102c4:	613b      	str	r3, [r7, #16]
    return(posture);
 80102c6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80102c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102ca:	b672      	cpsid	i
    return(int_posture);
 80102cc:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80102ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <_tx_semaphore_delete+0x11c>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	4a09      	ldr	r2, [pc, #36]	; (80102fc <_tx_semaphore_delete+0x11c>)
 80102d8:	6013      	str	r3, [r2, #0]
 80102da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	f383 8810 	msr	PRIMASK, r3
}
 80102e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80102e6:	f000 fbd9 	bl	8010a9c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3748      	adds	r7, #72	; 0x48
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20004268 	.word	0x20004268
 80102f8:	20004264 	.word	0x20004264
 80102fc:	20004338 	.word	0x20004338

08010300 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b08e      	sub	sp, #56	; 0x38
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801030a:	2300      	movs	r3, #0
 801030c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801030e:	f3ef 8310 	mrs	r3, PRIMASK
 8010312:	623b      	str	r3, [r7, #32]
    return(posture);
 8010314:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010316:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010318:	b672      	cpsid	i
    return(int_posture);
 801031a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801031c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00a      	beq.n	801033c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	689b      	ldr	r3, [r3, #8]
 801032a:	1e5a      	subs	r2, r3, #1
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	609a      	str	r2, [r3, #8]
 8010330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010332:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	f383 8810 	msr	PRIMASK, r3
}
 801033a:	e068      	b.n	801040e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d05d      	beq.n	80103fe <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010342:	4b35      	ldr	r3, [pc, #212]	; (8010418 <_tx_semaphore_get+0x118>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d008      	beq.n	801035c <_tx_semaphore_get+0x5c>
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	f383 8810 	msr	PRIMASK, r3
}
 8010354:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8010356:	230d      	movs	r3, #13
 8010358:	637b      	str	r3, [r7, #52]	; 0x34
 801035a:	e058      	b.n	801040e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801035c:	4b2f      	ldr	r3, [pc, #188]	; (801041c <_tx_semaphore_get+0x11c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	4a2e      	ldr	r2, [pc, #184]	; (8010420 <_tx_semaphore_get+0x120>)
 8010366:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8010368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801036e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010374:	1c5a      	adds	r2, r3, #1
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d109      	bne.n	8010398 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010388:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801038e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8010390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010394:	675a      	str	r2, [r3, #116]	; 0x74
 8010396:	e011      	b.n	80103bc <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801039e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103a2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80103a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103a8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ae:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103b4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80103b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103ba:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	691b      	ldr	r3, [r3, #16]
 80103c0:	1c5a      	adds	r2, r3, #1
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	2206      	movs	r2, #6
 80103ca:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	2201      	movs	r2, #1
 80103d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80103d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d4:	683a      	ldr	r2, [r7, #0]
 80103d6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80103d8:	4b0f      	ldr	r3, [pc, #60]	; (8010418 <_tx_semaphore_get+0x118>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3301      	adds	r3, #1
 80103de:	4a0e      	ldr	r2, [pc, #56]	; (8010418 <_tx_semaphore_get+0x118>)
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	f383 8810 	msr	PRIMASK, r3
}
 80103ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80103ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103f0:	f000 fca2 	bl	8010d38 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103fa:	637b      	str	r3, [r7, #52]	; 0x34
 80103fc:	e007      	b.n	801040e <_tx_semaphore_get+0x10e>
 80103fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010400:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f383 8810 	msr	PRIMASK, r3
}
 8010408:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801040a:	230d      	movs	r3, #13
 801040c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801040e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010410:	4618      	mov	r0, r3
 8010412:	3738      	adds	r7, #56	; 0x38
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	20004338 	.word	0x20004338
 801041c:	2000429c 	.word	0x2000429c
 8010420:	08010045 	.word	0x08010045

08010424 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b08c      	sub	sp, #48	; 0x30
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801042c:	f3ef 8310 	mrs	r3, PRIMASK
 8010430:	617b      	str	r3, [r7, #20]
    return(posture);
 8010432:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010434:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010436:	b672      	cpsid	i
    return(int_posture);
 8010438:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801043a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	691b      	ldr	r3, [r3, #16]
 8010440:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	2b00      	cmp	r3, #0
 8010446:	d114      	bne.n	8010472 <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	1c5a      	adds	r2, r3, #1
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	69db      	ldr	r3, [r3, #28]
 8010456:	61bb      	str	r3, [r7, #24]
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f383 8810 	msr	PRIMASK, r3
}
 8010462:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d040      	beq.n	80104ec <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	4798      	blx	r3
 8010470:	e03c      	b.n	80104ec <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8010478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047a:	3b01      	subs	r3, #1
 801047c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801047e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010480:	2b00      	cmp	r3, #0
 8010482:	d103      	bne.n	801048c <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	60da      	str	r2, [r3, #12]
 801048a:	e00e      	b.n	80104aa <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 801048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010490:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6a3a      	ldr	r2, [r7, #32]
 8010496:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801049c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	69fa      	ldr	r2, [r7, #28]
 80104a2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	6a3a      	ldr	r2, [r7, #32]
 80104a8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104ae:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	2200      	movs	r2, #0
 80104b4:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80104bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104be:	2200      	movs	r2, #0
 80104c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80104c4:	4b0c      	ldr	r3, [pc, #48]	; (80104f8 <_tx_semaphore_put+0xd4>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3301      	adds	r3, #1
 80104ca:	4a0b      	ldr	r2, [pc, #44]	; (80104f8 <_tx_semaphore_put+0xd4>)
 80104cc:	6013      	str	r3, [r2, #0]
 80104ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	f383 8810 	msr	PRIMASK, r3
}
 80104d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80104da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104dc:	f000 fb18 	bl	8010b10 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3730      	adds	r7, #48	; 0x30
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	20004338 	.word	0x20004338

080104fc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b092      	sub	sp, #72	; 0x48
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
 8010508:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801050a:	2300      	movs	r3, #0
 801050c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801050e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010510:	21ef      	movs	r1, #239	; 0xef
 8010512:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010514:	f001 fc52 	bl	8011dbc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8010518:	22b4      	movs	r2, #180	; 0xb4
 801051a:	2100      	movs	r1, #0
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f001 fc4d 	bl	8011dbc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010538:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801053e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010544:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801054a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010552:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010558:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2220      	movs	r2, #32
 801055e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8010562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010564:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8010566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010568:	3b01      	subs	r3, #1
 801056a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801056c:	4413      	add	r3, r2
 801056e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010574:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801057a:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010580:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2203      	movs	r2, #3
 8010588:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	4a48      	ldr	r2, [pc, #288]	; (80106b0 <_tx_thread_create+0x1b4>)
 801058e:	655a      	str	r2, [r3, #84]	; 0x54
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8010596:	4947      	ldr	r1, [pc, #284]	; (80106b4 <_tx_thread_create+0x1b8>)
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f7ef fed1 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801059e:	f3ef 8310 	mrs	r3, PRIMASK
 80105a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80105a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80105a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80105a8:	b672      	cpsid	i
    return(int_posture);
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80105ac:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	4a41      	ldr	r2, [pc, #260]	; (80106b8 <_tx_thread_create+0x1bc>)
 80105b2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80105b4:	4b41      	ldr	r3, [pc, #260]	; (80106bc <_tx_thread_create+0x1c0>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10b      	bne.n	80105d4 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80105bc:	4a40      	ldr	r2, [pc, #256]	; (80106c0 <_tx_thread_create+0x1c4>)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80105d2:	e016      	b.n	8010602 <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80105d4:	4b3a      	ldr	r3, [pc, #232]	; (80106c0 <_tx_thread_create+0x1c4>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80105da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80105e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e4:	68fa      	ldr	r2, [r7, #12]
 80105e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80105ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8010602:	4b2e      	ldr	r3, [pc, #184]	; (80106bc <_tx_thread_create+0x1c0>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	3301      	adds	r3, #1
 8010608:	4a2c      	ldr	r2, [pc, #176]	; (80106bc <_tx_thread_create+0x1c0>)
 801060a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801060c:	4b2d      	ldr	r3, [pc, #180]	; (80106c4 <_tx_thread_create+0x1c8>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3301      	adds	r3, #1
 8010612:	4a2c      	ldr	r2, [pc, #176]	; (80106c4 <_tx_thread_create+0x1c8>)
 8010614:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8010616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010618:	2b01      	cmp	r3, #1
 801061a:	d129      	bne.n	8010670 <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801061c:	f3ef 8305 	mrs	r3, IPSR
 8010620:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8010622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010624:	4b28      	ldr	r3, [pc, #160]	; (80106c8 <_tx_thread_create+0x1cc>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4313      	orrs	r3, r2
 801062a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801062e:	d30d      	bcc.n	801064c <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010630:	4b26      	ldr	r3, [pc, #152]	; (80106cc <_tx_thread_create+0x1d0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8010636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010638:	2b00      	cmp	r3, #0
 801063a:	d009      	beq.n	8010650 <_tx_thread_create+0x154>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801063c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801063e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010640:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8010642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010648:	63da      	str	r2, [r3, #60]	; 0x3c
 801064a:	e001      	b.n	8010650 <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801064c:	2300      	movs	r3, #0
 801064e:	647b      	str	r3, [r7, #68]	; 0x44
 8010650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010652:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	f383 8810 	msr	PRIMASK, r3
}
 801065a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f000 fa57 	bl	8010b10 <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8010662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01e      	beq.n	80106a6 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801066a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801066c:	63da      	str	r2, [r3, #60]	; 0x3c
 801066e:	e01a      	b.n	80106a6 <_tx_thread_create+0x1aa>
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	f383 8810 	msr	PRIMASK, r3
}
 801067a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801067c:	f3ef 8310 	mrs	r3, PRIMASK
 8010680:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010682:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010684:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010686:	b672      	cpsid	i
    return(int_posture);
 8010688:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801068a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801068c:	4b0d      	ldr	r3, [pc, #52]	; (80106c4 <_tx_thread_create+0x1c8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	3b01      	subs	r3, #1
 8010692:	4a0c      	ldr	r2, [pc, #48]	; (80106c4 <_tx_thread_create+0x1c8>)
 8010694:	6013      	str	r3, [r2, #0]
 8010696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010698:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	f383 8810 	msr	PRIMASK, r3
}
 80106a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80106a2:	f000 f9fb 	bl	8010a9c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3748      	adds	r7, #72	; 0x48
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	080110fd 	.word	0x080110fd
 80106b4:	080108bd 	.word	0x080108bd
 80106b8:	54485244 	.word	0x54485244
 80106bc:	200042a8 	.word	0x200042a8
 80106c0:	200042a4 	.word	0x200042a4
 80106c4:	20004338 	.word	0x20004338
 80106c8:	20000088 	.word	0x20000088
 80106cc:	200042a0 	.word	0x200042a0

080106d0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b087      	sub	sp, #28
 80106d4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106d6:	f3ef 8310 	mrs	r3, PRIMASK
 80106da:	60bb      	str	r3, [r7, #8]
    return(posture);
 80106dc:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80106de:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80106e0:	b672      	cpsid	i
    return(int_posture);
 80106e2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80106e4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80106e6:	4b08      	ldr	r3, [pc, #32]	; (8010708 <_tx_thread_identify+0x38>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	613b      	str	r3, [r7, #16]
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f383 8810 	msr	PRIMASK, r3
}
 80106f6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80106f8:	693b      	ldr	r3, [r7, #16]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	371c      	adds	r7, #28
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop
 8010708:	2000429c 	.word	0x2000429c

0801070c <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8010710:	4b13      	ldr	r3, [pc, #76]	; (8010760 <_tx_thread_initialize+0x54>)
 8010712:	2200      	movs	r2, #0
 8010714:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8010716:	4b13      	ldr	r3, [pc, #76]	; (8010764 <_tx_thread_initialize+0x58>)
 8010718:	2200      	movs	r2, #0
 801071a:	601a      	str	r2, [r3, #0]
 801071c:	4b12      	ldr	r3, [pc, #72]	; (8010768 <_tx_thread_initialize+0x5c>)
 801071e:	2200      	movs	r2, #0
 8010720:	601a      	str	r2, [r3, #0]
 8010722:	4b12      	ldr	r3, [pc, #72]	; (801076c <_tx_thread_initialize+0x60>)
 8010724:	2200      	movs	r2, #0
 8010726:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010728:	4b11      	ldr	r3, [pc, #68]	; (8010770 <_tx_thread_initialize+0x64>)
 801072a:	2220      	movs	r2, #32
 801072c:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801072e:	2280      	movs	r2, #128	; 0x80
 8010730:	2100      	movs	r1, #0
 8010732:	4810      	ldr	r0, [pc, #64]	; (8010774 <_tx_thread_initialize+0x68>)
 8010734:	f001 fb42 	bl	8011dbc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8010738:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <_tx_thread_initialize+0x6c>)
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801073e:	4b0f      	ldr	r3, [pc, #60]	; (801077c <_tx_thread_initialize+0x70>)
 8010740:	2200      	movs	r2, #0
 8010742:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8010744:	4b0e      	ldr	r3, [pc, #56]	; (8010780 <_tx_thread_initialize+0x74>)
 8010746:	2200      	movs	r2, #0
 8010748:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801074a:	4b0e      	ldr	r3, [pc, #56]	; (8010784 <_tx_thread_initialize+0x78>)
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 8010750:	4b0d      	ldr	r3, [pc, #52]	; (8010788 <_tx_thread_initialize+0x7c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 8010758:	4a0b      	ldr	r2, [pc, #44]	; (8010788 <_tx_thread_initialize+0x7c>)
 801075a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801075c:	bf00      	nop
 801075e:	bd80      	pop	{r7, pc}
 8010760:	2000429c 	.word	0x2000429c
 8010764:	200042a0 	.word	0x200042a0
 8010768:	200042ac 	.word	0x200042ac
 801076c:	200042b0 	.word	0x200042b0
 8010770:	200042b4 	.word	0x200042b4
 8010774:	200042b8 	.word	0x200042b8
 8010778:	200042a4 	.word	0x200042a4
 801077c:	200042a8 	.word	0x200042a8
 8010780:	20004338 	.word	0x20004338
 8010784:	2000433c 	.word	0x2000433c
 8010788:	20004340 	.word	0x20004340

0801078c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b08e      	sub	sp, #56	; 0x38
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8010798:	2300      	movs	r3, #0
 801079a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801079c:	f3ef 8310 	mrs	r3, PRIMASK
 80107a0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80107a4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80107a6:	b672      	cpsid	i
    return(int_posture);
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80107aa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d902      	bls.n	80107be <_tx_thread_preemption_change+0x32>
    {
            
        /* Return error.  */
        status =  TX_THRESH_ERROR;
 80107b8:	2318      	movs	r3, #24
 80107ba:	633b      	str	r3, [r7, #48]	; 0x30
 80107bc:	e06b      	b.n	8010896 <_tx_thread_preemption_change+0x10a>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d114      	bne.n	80107f4 <_tx_thread_preemption_change+0x68>
        {

            /* Determine if this thread is at the head of the list.  */
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ce:	4a37      	ldr	r2, [pc, #220]	; (80108ac <_tx_thread_preemption_change+0x120>)
 80107d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d10c      	bne.n	80107f4 <_tx_thread_preemption_change+0x68>
                map_index =  (thread_ptr -> tx_thread_priority)/((UINT) 32);
#endif

                /* Yes, this thread is at the front of the list.  Make sure
                   the preempted bit is cleared for this thread.  */
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107de:	2201      	movs	r2, #1
 80107e0:	fa02 f303 	lsl.w	r3, r2, r3
 80107e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80107e6:	4b32      	ldr	r3, [pc, #200]	; (80108b0 <_tx_thread_preemption_change+0x124>)
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ec:	43db      	mvns	r3, r3
 80107ee:	4013      	ands	r3, r2
 80107f0:	4a2f      	ldr	r2, [pc, #188]	; (80108b0 <_tx_thread_preemption_change+0x124>)
 80107f2:	6013      	str	r3, [r2, #0]
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801080c:	68ba      	ldr	r2, [r7, #8]
 801080e:	429a      	cmp	r2, r3
 8010810:	d203      	bcs.n	801081a <_tx_thread_preemption_change+0x8e>
        {
    
            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	68ba      	ldr	r2, [r7, #8]
 8010816:	63da      	str	r2, [r3, #60]	; 0x3c
 8010818:	e004      	b.n	8010824 <_tx_thread_preemption_change+0x98>
        }
        else
        {
    
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010828:	4b22      	ldr	r3, [pc, #136]	; (80108b4 <_tx_thread_preemption_change+0x128>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	429a      	cmp	r2, r3
 801082e:	d932      	bls.n	8010896 <_tx_thread_preemption_change+0x10a>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8010830:	4b20      	ldr	r3, [pc, #128]	; (80108b4 <_tx_thread_preemption_change+0x128>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	429a      	cmp	r2, r3
 8010838:	d92d      	bls.n	8010896 <_tx_thread_preemption_change+0x10a>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 801083a:	4b1f      	ldr	r3, [pc, #124]	; (80108b8 <_tx_thread_preemption_change+0x12c>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	429a      	cmp	r2, r3
 8010842:	d128      	bne.n	8010896 <_tx_thread_preemption_change+0x10a>
                    /* Preemption needs to take place.  */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                    /* Determine if this thread has preemption threshold set.  */
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084c:	429a      	cmp	r2, r3
 801084e:	d00b      	beq.n	8010868 <_tx_thread_preemption_change+0xdc>
                        TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                        _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                        /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010854:	2201      	movs	r2, #1
 8010856:	fa02 f303 	lsl.w	r3, r2, r3
 801085a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 801085c:	4b14      	ldr	r3, [pc, #80]	; (80108b0 <_tx_thread_preemption_change+0x124>)
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010862:	4313      	orrs	r3, r2
 8010864:	4a12      	ldr	r2, [pc, #72]	; (80108b0 <_tx_thread_preemption_change+0x124>)
 8010866:	6013      	str	r3, [r2, #0]
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010868:	4b12      	ldr	r3, [pc, #72]	; (80108b4 <_tx_thread_preemption_change+0x128>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4a0f      	ldr	r2, [pc, #60]	; (80108ac <_tx_thread_preemption_change+0x120>)
 801086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010872:	4a11      	ldr	r2, [pc, #68]	; (80108b8 <_tx_thread_preemption_change+0x12c>)
 8010874:	6013      	str	r3, [r2, #0]
 8010876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010878:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	f383 8810 	msr	PRIMASK, r3
}
 8010880:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8010882:	f000 f90b 	bl	8010a9c <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010886:	f3ef 8310 	mrs	r3, PRIMASK
 801088a:	623b      	str	r3, [r7, #32]
    return(posture);
 801088c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801088e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010890:	b672      	cpsid	i
    return(int_posture);
 8010892:	69fb      	ldr	r3, [r7, #28]
                    
                    /* Disable interrupts.  */
                    TX_DISABLE
 8010894:	637b      	str	r3, [r7, #52]	; 0x34
 8010896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010898:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	f383 8810 	msr	PRIMASK, r3
}
 80108a0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3738      	adds	r7, #56	; 0x38
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	200042b8 	.word	0x200042b8
 80108b0:	200042b0 	.word	0x200042b0
 80108b4:	200042b4 	.word	0x200042b4
 80108b8:	200042a0 	.word	0x200042a0

080108bc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b08c      	sub	sp, #48	; 0x30
 80108c0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80108c2:	4b33      	ldr	r3, [pc, #204]	; (8010990 <_tx_thread_shell_entry+0xd4>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108c8:	f3ef 8310 	mrs	r3, PRIMASK
 80108cc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80108ce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80108d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108d2:	b672      	cpsid	i
    return(int_posture);
 80108d4:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 80108d6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80108d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80108de:	627b      	str	r3, [r7, #36]	; 0x24
 80108e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	f383 8810 	msr	PRIMASK, r3
}
 80108ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80108ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	2100      	movs	r1, #0
 80108f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108f8:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80108fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010900:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010902:	4610      	mov	r0, r2
 8010904:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8010906:	4b23      	ldr	r3, [pc, #140]	; (8010994 <_tx_thread_shell_entry+0xd8>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d003      	beq.n	8010916 <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801090e:	4b21      	ldr	r3, [pc, #132]	; (8010994 <_tx_thread_shell_entry+0xd8>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010914:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010916:	f3ef 8310 	mrs	r3, PRIMASK
 801091a:	607b      	str	r3, [r7, #4]
    return(posture);
 801091c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801091e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010920:	b672      	cpsid	i
    return(int_posture);
 8010922:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8010924:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8010926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010928:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801092c:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	2201      	movs	r2, #1
 8010932:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010936:	2201      	movs	r2, #1
 8010938:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093c:	2200      	movs	r2, #0
 801093e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010940:	4b15      	ldr	r3, [pc, #84]	; (8010998 <_tx_thread_shell_entry+0xdc>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	3301      	adds	r3, #1
 8010946:	4a14      	ldr	r2, [pc, #80]	; (8010998 <_tx_thread_shell_entry+0xdc>)
 8010948:	6013      	str	r3, [r2, #0]
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f383 8810 	msr	PRIMASK, r3
}
 8010954:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8010956:	f3ef 8314 	mrs	r3, CONTROL
 801095a:	60fb      	str	r3, [r7, #12]
    return(control_value);
 801095c:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 801095e:	623b      	str	r3, [r7, #32]
 8010960:	6a3b      	ldr	r3, [r7, #32]
 8010962:	f023 0304 	bic.w	r3, r3, #4
 8010966:	623b      	str	r3, [r7, #32]
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	f383 8814 	msr	CONTROL, r3
}
 8010972:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	2b00      	cmp	r3, #0
 8010978:	d003      	beq.n	8010982 <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	2101      	movs	r1, #1
 801097e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010980:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8010982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010984:	f000 f9d8 	bl	8010d38 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010988:	bf00      	nop
 801098a:	3730      	adds	r7, #48	; 0x30
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	2000429c 	.word	0x2000429c
 8010994:	2000433c 	.word	0x2000433c
 8010998:	20004338 	.word	0x20004338

0801099c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b08e      	sub	sp, #56	; 0x38
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80109a4:	f3ef 8310 	mrs	r3, PRIMASK
 80109a8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80109aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80109ac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80109ae:	b672      	cpsid	i
    return(int_posture);
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80109b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80109b4:	4b35      	ldr	r3, [pc, #212]	; (8010a8c <_tx_thread_sleep+0xf0>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80109ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d108      	bne.n	80109d2 <_tx_thread_sleep+0x36>
 80109c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	f383 8810 	msr	PRIMASK, r3
}
 80109ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80109cc:	2313      	movs	r3, #19
 80109ce:	637b      	str	r3, [r7, #52]	; 0x34
 80109d0:	e056      	b.n	8010a80 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80109d2:	f3ef 8305 	mrs	r3, IPSR
 80109d6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80109d8:	69fa      	ldr	r2, [r7, #28]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80109da:	4b2d      	ldr	r3, [pc, #180]	; (8010a90 <_tx_thread_sleep+0xf4>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4313      	orrs	r3, r2
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d008      	beq.n	80109f6 <_tx_thread_sleep+0x5a>
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	f383 8810 	msr	PRIMASK, r3
}
 80109ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80109f0:	2313      	movs	r3, #19
 80109f2:	637b      	str	r3, [r7, #52]	; 0x34
 80109f4:	e044      	b.n	8010a80 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80109f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f8:	4a26      	ldr	r2, [pc, #152]	; (8010a94 <_tx_thread_sleep+0xf8>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d108      	bne.n	8010a10 <_tx_thread_sleep+0x74>
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	f383 8810 	msr	PRIMASK, r3
}
 8010a08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010a0a:	2313      	movs	r3, #19
 8010a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a0e:	e037      	b.n	8010a80 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d108      	bne.n	8010a28 <_tx_thread_sleep+0x8c>
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f383 8810 	msr	PRIMASK, r3
}
 8010a20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8010a22:	2300      	movs	r3, #0
 8010a24:	637b      	str	r3, [r7, #52]	; 0x34
 8010a26:	e02b      	b.n	8010a80 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010a28:	4b1b      	ldr	r3, [pc, #108]	; (8010a98 <_tx_thread_sleep+0xfc>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d008      	beq.n	8010a42 <_tx_thread_sleep+0xa6>
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f383 8810 	msr	PRIMASK, r3
}
 8010a3a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8010a3c:	2313      	movs	r3, #19
 8010a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010a40:	e01e      	b.n	8010a80 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8010a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a44:	2204      	movs	r2, #4
 8010a46:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a50:	2200      	movs	r2, #0
 8010a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8010a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010a5c:	4b0e      	ldr	r3, [pc, #56]	; (8010a98 <_tx_thread_sleep+0xfc>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3301      	adds	r3, #1
 8010a62:	4a0d      	ldr	r2, [pc, #52]	; (8010a98 <_tx_thread_sleep+0xfc>)
 8010a64:	6013      	str	r3, [r2, #0]
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	f383 8810 	msr	PRIMASK, r3
}
 8010a70:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a74:	f000 f960 	bl	8010d38 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 8010a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3738      	adds	r7, #56	; 0x38
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	2000429c 	.word	0x2000429c
 8010a90:	20000088 	.word	0x20000088
 8010a94:	200043e8 	.word	0x200043e8
 8010a98:	20004338 	.word	0x20004338

08010a9c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b089      	sub	sp, #36	; 0x24
 8010aa0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010aa2:	4b17      	ldr	r3, [pc, #92]	; (8010b00 <_tx_thread_system_preempt_check+0x64>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d121      	bne.n	8010af2 <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010aae:	4b15      	ldr	r3, [pc, #84]	; (8010b04 <_tx_thread_system_preempt_check+0x68>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8010ab4:	4b14      	ldr	r3, [pc, #80]	; (8010b08 <_tx_thread_system_preempt_check+0x6c>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8010aba:	69ba      	ldr	r2, [r7, #24]
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d017      	beq.n	8010af2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010ac2:	4b12      	ldr	r3, [pc, #72]	; (8010b0c <_tx_thread_system_preempt_check+0x70>)
 8010ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ac8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010aca:	f3ef 8305 	mrs	r3, IPSR
 8010ace:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010ad0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d10c      	bne.n	8010af0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8010ada:	60fb      	str	r3, [r7, #12]
    return(posture);
 8010adc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8010ade:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010ae0:	b662      	cpsie	i
}
 8010ae2:	bf00      	nop
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f383 8810 	msr	PRIMASK, r3
}
 8010aee:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8010af0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8010af2:	bf00      	nop
 8010af4:	3724      	adds	r7, #36	; 0x24
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop
 8010b00:	20004338 	.word	0x20004338
 8010b04:	2000429c 	.word	0x2000429c
 8010b08:	200042a0 	.word	0x200042a0
 8010b0c:	e000ed04 	.word	0xe000ed04

08010b10 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b096      	sub	sp, #88	; 0x58
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b18:	f3ef 8310 	mrs	r3, PRIMASK
 8010b1c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8010b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8010b20:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b22:	b672      	cpsid	i
    return(int_posture);
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010b26:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d005      	beq.n	8010b3c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	334c      	adds	r3, #76	; 0x4c
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 fc9f 	bl	8011478 <_tx_timer_system_deactivate>
 8010b3a:	e002      	b.n	8010b42 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010b42:	4b75      	ldr	r3, [pc, #468]	; (8010d18 <_tx_thread_system_resume+0x208>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3b01      	subs	r3, #1
 8010b48:	4a73      	ldr	r2, [pc, #460]	; (8010d18 <_tx_thread_system_resume+0x208>)
 8010b4a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f040 8096 	bne.w	8010c82 <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f000 80aa 	beq.w	8010cb4 <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f040 8085 	bne.w	8010c74 <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b74:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8010b76:	4a69      	ldr	r2, [pc, #420]	; (8010d1c <_tx_thread_system_resume+0x20c>)
 8010b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8010b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d166      	bne.n	8010c54 <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8010b86:	4965      	ldr	r1, [pc, #404]	; (8010d1c <_tx_thread_system_resume+0x20c>)
 8010b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ba4:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8010ba6:	4b5e      	ldr	r3, [pc, #376]	; (8010d20 <_tx_thread_system_resume+0x210>)
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bac:	4313      	orrs	r3, r2
 8010bae:	4a5c      	ldr	r2, [pc, #368]	; (8010d20 <_tx_thread_system_resume+0x210>)
 8010bb0:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8010bb2:	4b5c      	ldr	r3, [pc, #368]	; (8010d24 <_tx_thread_system_resume+0x214>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d27b      	bcs.n	8010cb4 <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8010bbc:	4a59      	ldr	r2, [pc, #356]	; (8010d24 <_tx_thread_system_resume+0x214>)
 8010bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bc0:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8010bc2:	4b59      	ldr	r3, [pc, #356]	; (8010d28 <_tx_thread_system_resume+0x218>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8010bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d103      	bne.n	8010bd6 <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8010bce:	4a56      	ldr	r2, [pc, #344]	; (8010d28 <_tx_thread_system_resume+0x218>)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6013      	str	r3, [r2, #0]
 8010bd4:	e06e      	b.n	8010cb4 <_tx_thread_system_resume+0x1a4>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8010bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d269      	bcs.n	8010cb4 <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8010be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d00b      	beq.n	8010c04 <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8010bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010bf6:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8010bf8:	4b4c      	ldr	r3, [pc, #304]	; (8010d2c <_tx_thread_system_resume+0x21c>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	4a4a      	ldr	r2, [pc, #296]	; (8010d2c <_tx_thread_system_resume+0x21c>)
 8010c02:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8010c04:	4a48      	ldr	r2, [pc, #288]	; (8010d28 <_tx_thread_system_resume+0x218>)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6013      	str	r3, [r2, #0]
 8010c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c10:	f383 8810 	msr	PRIMASK, r3
}
 8010c14:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010c16:	4b40      	ldr	r3, [pc, #256]	; (8010d18 <_tx_thread_system_resume+0x208>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8010c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d174      	bne.n	8010d0c <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010c22:	4b43      	ldr	r3, [pc, #268]	; (8010d30 <_tx_thread_system_resume+0x220>)
 8010c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c28:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010c2a:	f3ef 8305 	mrs	r3, IPSR
 8010c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d10c      	bne.n	8010c50 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c36:	f3ef 8310 	mrs	r3, PRIMASK
 8010c3a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8010c3e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010c40:	b662      	cpsie	i
}
 8010c42:	bf00      	nop
 8010c44:	6a3b      	ldr	r3, [r7, #32]
 8010c46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	f383 8810 	msr	PRIMASK, r3
}
 8010c4e:	bf00      	nop
}
 8010c50:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8010c52:	e05b      	b.n	8010d0c <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8010c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c58:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8010c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8010c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c6a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c70:	621a      	str	r2, [r3, #32]
 8010c72:	e01f      	b.n	8010cb4 <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2203      	movs	r2, #3
 8010c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8010c80:	e018      	b.n	8010cb4 <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d014      	beq.n	8010cb4 <_tx_thread_system_resume+0x1a4>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c8e:	2b02      	cmp	r3, #2
 8010c90:	d010      	beq.n	8010cb4 <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d106      	bne.n	8010ca8 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8010ca6:	e005      	b.n	8010cb4 <_tx_thread_system_resume+0x1a4>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2203      	movs	r2, #3
 8010cb2:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010cb4:	4b1f      	ldr	r3, [pc, #124]	; (8010d34 <_tx_thread_system_resume+0x224>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cbc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	f383 8810 	msr	PRIMASK, r3
}
 8010cc4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010cc6:	4b18      	ldr	r3, [pc, #96]	; (8010d28 <_tx_thread_system_resume+0x218>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d020      	beq.n	8010d12 <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010cd0:	4b11      	ldr	r3, [pc, #68]	; (8010d18 <_tx_thread_system_resume+0x208>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8010cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d11a      	bne.n	8010d12 <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010cdc:	4b14      	ldr	r3, [pc, #80]	; (8010d30 <_tx_thread_system_resume+0x220>)
 8010cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ce2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ce4:	f3ef 8305 	mrs	r3, IPSR
 8010ce8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010cea:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10f      	bne.n	8010d10 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8010cf4:	613b      	str	r3, [r7, #16]
    return(posture);
 8010cf6:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8010cf8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010cfa:	b662      	cpsie	i
}
 8010cfc:	bf00      	nop
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	f383 8810 	msr	PRIMASK, r3
}
 8010d08:	bf00      	nop
}
 8010d0a:	e001      	b.n	8010d10 <_tx_thread_system_resume+0x200>
                                return;
 8010d0c:	bf00      	nop
 8010d0e:	e000      	b.n	8010d12 <_tx_thread_system_resume+0x202>
 8010d10:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8010d12:	3758      	adds	r7, #88	; 0x58
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	20004338 	.word	0x20004338
 8010d1c:	200042b8 	.word	0x200042b8
 8010d20:	200042ac 	.word	0x200042ac
 8010d24:	200042b4 	.word	0x200042b4
 8010d28:	200042a0 	.word	0x200042a0
 8010d2c:	200042b0 	.word	0x200042b0
 8010d30:	e000ed04 	.word	0xe000ed04
 8010d34:	2000429c 	.word	0x2000429c

08010d38 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b0a0      	sub	sp, #128	; 0x80
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010d40:	4b5a      	ldr	r3, [pc, #360]	; (8010eac <_tx_thread_system_suspend+0x174>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d46:	f3ef 8310 	mrs	r3, PRIMASK
 8010d4a:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8010d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8010d4e:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d50:	b672      	cpsid	i
    return(int_posture);
 8010d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010d54:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d112      	bne.n	8010d84 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d62:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8010d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d008      	beq.n	8010d7c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8010d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d70:	d004      	beq.n	8010d7c <_tx_thread_system_suspend+0x44>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	334c      	adds	r3, #76	; 0x4c
 8010d76:	4618      	mov	r0, r3
 8010d78:	f000 fb1c 	bl	80113b4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	69db      	ldr	r3, [r3, #28]
 8010d80:	4a4b      	ldr	r2, [pc, #300]	; (8010eb0 <_tx_thread_system_suspend+0x178>)
 8010d82:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010d84:	4b4b      	ldr	r3, [pc, #300]	; (8010eb4 <_tx_thread_system_suspend+0x17c>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	4a4a      	ldr	r2, [pc, #296]	; (8010eb4 <_tx_thread_system_suspend+0x17c>)
 8010d8c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	f040 8122 	bne.w	8010fdc <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a1b      	ldr	r3, [r3, #32]
 8010da8:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8010daa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d027      	beq.n	8010e02 <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db6:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8010db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010dbc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8010dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010dc2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8010dc4:	4a3c      	ldr	r2, [pc, #240]	; (8010eb8 <_tx_thread_system_suspend+0x180>)
 8010dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	f040 808b 	bne.w	8010eea <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8010dd4:	4938      	ldr	r1, [pc, #224]	; (8010eb8 <_tx_thread_system_suspend+0x180>)
 8010dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8010dde:	4b37      	ldr	r3, [pc, #220]	; (8010ebc <_tx_thread_system_suspend+0x184>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	f000 8081 	beq.w	8010eea <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8010de8:	2201      	movs	r2, #1
 8010dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dec:	fa02 f303 	lsl.w	r3, r2, r3
 8010df0:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8010df2:	4b32      	ldr	r3, [pc, #200]	; (8010ebc <_tx_thread_system_suspend+0x184>)
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010df8:	43db      	mvns	r3, r3
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	4a2f      	ldr	r2, [pc, #188]	; (8010ebc <_tx_thread_system_suspend+0x184>)
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	e073      	b.n	8010eea <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8010e02:	4a2d      	ldr	r2, [pc, #180]	; (8010eb8 <_tx_thread_system_suspend+0x180>)
 8010e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e06:	2100      	movs	r1, #0
 8010e08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e10:	fa02 f303 	lsl.w	r3, r2, r3
 8010e14:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8010e16:	4b2a      	ldr	r3, [pc, #168]	; (8010ec0 <_tx_thread_system_suspend+0x188>)
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e1c:	43db      	mvns	r3, r3
 8010e1e:	4013      	ands	r3, r2
 8010e20:	4a27      	ldr	r2, [pc, #156]	; (8010ec0 <_tx_thread_system_suspend+0x188>)
 8010e22:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8010e24:	4b25      	ldr	r3, [pc, #148]	; (8010ebc <_tx_thread_system_suspend+0x184>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00b      	beq.n	8010e44 <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e30:	fa02 f303 	lsl.w	r3, r2, r3
 8010e34:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8010e36:	4b21      	ldr	r3, [pc, #132]	; (8010ebc <_tx_thread_system_suspend+0x184>)
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e3c:	43db      	mvns	r3, r3
 8010e3e:	4013      	ands	r3, r2
 8010e40:	4a1e      	ldr	r2, [pc, #120]	; (8010ebc <_tx_thread_system_suspend+0x184>)
 8010e42:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8010e44:	2300      	movs	r3, #0
 8010e46:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8010e48:	4b1d      	ldr	r3, [pc, #116]	; (8010ec0 <_tx_thread_system_suspend+0x188>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8010e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d13d      	bne.n	8010ed0 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010e54:	4b1b      	ldr	r3, [pc, #108]	; (8010ec4 <_tx_thread_system_suspend+0x18c>)
 8010e56:	2220      	movs	r2, #32
 8010e58:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8010e5a:	4b1b      	ldr	r3, [pc, #108]	; (8010ec8 <_tx_thread_system_suspend+0x190>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	601a      	str	r2, [r3, #0]
 8010e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e66:	f383 8810 	msr	PRIMASK, r3
}
 8010e6a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010e6c:	4b11      	ldr	r3, [pc, #68]	; (8010eb4 <_tx_thread_system_suspend+0x17c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8010e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f040 80db 	bne.w	8011030 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010e7a:	4b14      	ldr	r3, [pc, #80]	; (8010ecc <_tx_thread_system_suspend+0x194>)
 8010e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010e82:	f3ef 8305 	mrs	r3, IPSR
 8010e86:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8010e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d10c      	bne.n	8010ea8 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010e92:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8010e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 8010e96:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010e98:	b662      	cpsie	i
}
 8010e9a:	bf00      	nop
 8010e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea2:	f383 8810 	msr	PRIMASK, r3
}
 8010ea6:	bf00      	nop
}
 8010ea8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8010eaa:	e0c1      	b.n	8011030 <_tx_thread_system_suspend+0x2f8>
 8010eac:	2000429c 	.word	0x2000429c
 8010eb0:	200048a8 	.word	0x200048a8
 8010eb4:	20004338 	.word	0x20004338
 8010eb8:	200042b8 	.word	0x200042b8
 8010ebc:	200042b0 	.word	0x200042b0
 8010ec0:	200042ac 	.word	0x200042ac
 8010ec4:	200042b4 	.word	0x200042b4
 8010ec8:	200042a0 	.word	0x200042a0
 8010ecc:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8010ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ed2:	fa93 f3a3 	rbit	r3, r3
 8010ed6:	663b      	str	r3, [r7, #96]	; 0x60
 8010ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010eda:	fab3 f383 	clz	r3, r3
 8010ede:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8010ee0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ee4:	4413      	add	r3, r2
 8010ee6:	4a56      	ldr	r2, [pc, #344]	; (8011040 <_tx_thread_system_suspend+0x308>)
 8010ee8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8010eea:	4b56      	ldr	r3, [pc, #344]	; (8011044 <_tx_thread_system_suspend+0x30c>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d173      	bne.n	8010fdc <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010ef4:	4b52      	ldr	r3, [pc, #328]	; (8011040 <_tx_thread_system_suspend+0x308>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a53      	ldr	r2, [pc, #332]	; (8011048 <_tx_thread_system_suspend+0x310>)
 8010efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010efe:	4a51      	ldr	r2, [pc, #324]	; (8011044 <_tx_thread_system_suspend+0x30c>)
 8010f00:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8010f02:	4b52      	ldr	r3, [pc, #328]	; (801104c <_tx_thread_system_suspend+0x314>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d043      	beq.n	8010f92 <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8010f0a:	4b51      	ldr	r3, [pc, #324]	; (8011050 <_tx_thread_system_suspend+0x318>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	4a4f      	ldr	r2, [pc, #316]	; (8011050 <_tx_thread_system_suspend+0x318>)
 8010f12:	6013      	str	r3, [r2, #0]
 8010f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f16:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1a:	f383 8810 	msr	PRIMASK, r3
}
 8010f1e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f20:	f3ef 8310 	mrs	r3, PRIMASK
 8010f24:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8010f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8010f28:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f2a:	b672      	cpsid	i
    return(int_posture);
 8010f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8010f2e:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8010f30:	4b47      	ldr	r3, [pc, #284]	; (8011050 <_tx_thread_system_suspend+0x318>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	4a46      	ldr	r2, [pc, #280]	; (8011050 <_tx_thread_system_suspend+0x318>)
 8010f38:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8010f3e:	4b43      	ldr	r3, [pc, #268]	; (801104c <_tx_thread_system_suspend+0x314>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8010f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f46:	fa93 f3a3 	rbit	r3, r3
 8010f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8010f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f4e:	fab3 f383 	clz	r3, r3
 8010f52:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8010f54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f58:	4413      	add	r3, r2
 8010f5a:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8010f5c:	4a3a      	ldr	r2, [pc, #232]	; (8011048 <_tx_thread_system_suspend+0x310>)
 8010f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f66:	4b36      	ldr	r3, [pc, #216]	; (8011040 <_tx_thread_system_suspend+0x308>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d811      	bhi.n	8010f92 <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its 
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8010f6e:	4a36      	ldr	r2, [pc, #216]	; (8011048 <_tx_thread_system_suspend+0x310>)
 8010f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f76:	4a33      	ldr	r2, [pc, #204]	; (8011044 <_tx_thread_system_suspend+0x30c>)
 8010f78:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010f82:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8010f84:	4b31      	ldr	r3, [pc, #196]	; (801104c <_tx_thread_system_suspend+0x314>)
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f8a:	43db      	mvns	r3, r3
 8010f8c:	4013      	ands	r3, r2
 8010f8e:	4a2f      	ldr	r2, [pc, #188]	; (801104c <_tx_thread_system_suspend+0x314>)
 8010f90:	6013      	str	r3, [r2, #0]
 8010f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f98:	f383 8810 	msr	PRIMASK, r3
}
 8010f9c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010f9e:	4b2c      	ldr	r3, [pc, #176]	; (8011050 <_tx_thread_system_suspend+0x318>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 8010fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d144      	bne.n	8011034 <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010faa:	4b2a      	ldr	r3, [pc, #168]	; (8011054 <_tx_thread_system_suspend+0x31c>)
 8010fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fb0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010fb2:	f3ef 8305 	mrs	r3, IPSR
 8010fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8010fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d10c      	bne.n	8010fd8 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8010fc2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8010fc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010fc8:	b662      	cpsie	i
}
 8010fca:	bf00      	nop
 8010fcc:	6a3b      	ldr	r3, [r7, #32]
 8010fce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	f383 8810 	msr	PRIMASK, r3
}
 8010fd6:	bf00      	nop
}
 8010fd8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8010fda:	e02b      	b.n	8011034 <_tx_thread_system_suspend+0x2fc>
 8010fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010fde:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fe0:	69bb      	ldr	r3, [r7, #24]
 8010fe2:	f383 8810 	msr	PRIMASK, r3
}
 8010fe6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010fe8:	4b16      	ldr	r3, [pc, #88]	; (8011044 <_tx_thread_system_suspend+0x30c>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d022      	beq.n	8011038 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010ff2:	4b17      	ldr	r3, [pc, #92]	; (8011050 <_tx_thread_system_suspend+0x318>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 8010ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d11c      	bne.n	8011038 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010ffe:	4b15      	ldr	r3, [pc, #84]	; (8011054 <_tx_thread_system_suspend+0x31c>)
 8011000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011004:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011006:	f3ef 8305 	mrs	r3, IPSR
 801100a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801100c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 801100e:	2b00      	cmp	r3, #0
 8011010:	d10c      	bne.n	801102c <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011012:	f3ef 8310 	mrs	r3, PRIMASK
 8011016:	613b      	str	r3, [r7, #16]
    return(posture);
 8011018:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801101a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801101c:	b662      	cpsie	i
}
 801101e:	bf00      	nop
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	f383 8810 	msr	PRIMASK, r3
}
 801102a:	bf00      	nop
}
 801102c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801102e:	e003      	b.n	8011038 <_tx_thread_system_suspend+0x300>
                return;
 8011030:	bf00      	nop
 8011032:	e002      	b.n	801103a <_tx_thread_system_suspend+0x302>
            return;
 8011034:	bf00      	nop
 8011036:	e000      	b.n	801103a <_tx_thread_system_suspend+0x302>
    return;
 8011038:	bf00      	nop
}
 801103a:	3780      	adds	r7, #128	; 0x80
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	200042b4 	.word	0x200042b4
 8011044:	200042a0 	.word	0x200042a0
 8011048:	200042b8 	.word	0x200042b8
 801104c:	200042b0 	.word	0x200042b0
 8011050:	20004338 	.word	0x20004338
 8011054:	e000ed04 	.word	0xe000ed04

08011058 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8011058:	b480      	push	{r7}
 801105a:	b087      	sub	sp, #28
 801105c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801105e:	4b21      	ldr	r3, [pc, #132]	; (80110e4 <_tx_thread_time_slice+0x8c>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011064:	f3ef 8310 	mrs	r3, PRIMASK
 8011068:	60fb      	str	r3, [r7, #12]
    return(posture);
 801106a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801106c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801106e:	b672      	cpsid	i
    return(int_posture);
 8011070:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8011072:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011074:	4b1c      	ldr	r3, [pc, #112]	; (80110e8 <_tx_thread_time_slice+0x90>)
 8011076:	2200      	movs	r2, #0
 8011078:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d024      	beq.n	80110ca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011084:	2b00      	cmp	r3, #0
 8011086:	d120      	bne.n	80110ca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	69da      	ldr	r2, [r3, #28]
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	699b      	ldr	r3, [r3, #24]
 8011094:	4a15      	ldr	r2, [pc, #84]	; (80110ec <_tx_thread_time_slice+0x94>)
 8011096:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	6a1b      	ldr	r3, [r3, #32]
 801109c:	697a      	ldr	r2, [r7, #20]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d013      	beq.n	80110ca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d10d      	bne.n	80110ca <_tx_thread_time_slice+0x72>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	6a12      	ldr	r2, [r2, #32]
 80110b6:	490e      	ldr	r1, [pc, #56]	; (80110f0 <_tx_thread_time_slice+0x98>)
 80110b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80110bc:	4b0d      	ldr	r3, [pc, #52]	; (80110f4 <_tx_thread_time_slice+0x9c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a0b      	ldr	r2, [pc, #44]	; (80110f0 <_tx_thread_time_slice+0x98>)
 80110c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110c6:	4a0c      	ldr	r2, [pc, #48]	; (80110f8 <_tx_thread_time_slice+0xa0>)
 80110c8:	6013      	str	r3, [r2, #0]
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f383 8810 	msr	PRIMASK, r3
}
 80110d4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80110d6:	bf00      	nop
 80110d8:	371c      	adds	r7, #28
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	2000429c 	.word	0x2000429c
 80110e8:	20004348 	.word	0x20004348
 80110ec:	200048a8 	.word	0x200048a8
 80110f0:	200042b8 	.word	0x200042b8
 80110f4:	200042b4 	.word	0x200042b4
 80110f8:	200042a0 	.word	0x200042a0

080110fc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b08a      	sub	sp, #40	; 0x28
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011108:	f3ef 8310 	mrs	r3, PRIMASK
 801110c:	617b      	str	r3, [r7, #20]
    return(posture);
 801110e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011110:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011112:	b672      	cpsid	i
    return(int_posture);
 8011114:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8011116:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801111c:	2b04      	cmp	r3, #4
 801111e:	d10e      	bne.n	801113e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8011120:	4b13      	ldr	r3, [pc, #76]	; (8011170 <_tx_thread_timeout+0x74>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	3301      	adds	r3, #1
 8011126:	4a12      	ldr	r2, [pc, #72]	; (8011170 <_tx_thread_timeout+0x74>)
 8011128:	6013      	str	r3, [r2, #0]
 801112a:	6a3b      	ldr	r3, [r7, #32]
 801112c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f383 8810 	msr	PRIMASK, r3
}
 8011134:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011138:	f7ff fcea 	bl	8010b10 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801113c:	e013      	b.n	8011166 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011142:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8011144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801114a:	61bb      	str	r3, [r7, #24]
 801114c:	6a3b      	ldr	r3, [r7, #32]
 801114e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	f383 8810 	msr	PRIMASK, r3
}
 8011156:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d003      	beq.n	8011166 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	69b9      	ldr	r1, [r7, #24]
 8011162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011164:	4798      	blx	r3
}
 8011166:	bf00      	nop
 8011168:	3728      	adds	r7, #40	; 0x28
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	20004338 	.word	0x20004338

08011174 <_tx_time_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8011174:	b480      	push	{r7}
 8011176:	b087      	sub	sp, #28
 8011178:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801117a:	f3ef 8310 	mrs	r3, PRIMASK
 801117e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011180:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8011182:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011184:	b672      	cpsid	i
    return(int_posture);
 8011186:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8011188:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 801118a:	4b08      	ldr	r3, [pc, #32]	; (80111ac <_tx_time_get+0x38>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	613b      	str	r3, [r7, #16]
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	f383 8810 	msr	PRIMASK, r3
}
 801119a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 801119c:	693b      	ldr	r3, [r7, #16]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	371c      	adds	r7, #28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	20004344 	.word	0x20004344

080111b0 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b08a      	sub	sp, #40	; 0x28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
 80111bc:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 80111be:	222c      	movs	r2, #44	; 0x2c
 80111c0:	2100      	movs	r1, #0
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f000 fdfa 	bl	8011dbc <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	68ba      	ldr	r2, [r7, #8]
 80111cc:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111d2:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111d8:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	683a      	ldr	r2, [r7, #0]
 80111e4:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111e6:	f3ef 8310 	mrs	r3, PRIMASK
 80111ea:	61bb      	str	r3, [r7, #24]
    return(posture);
 80111ec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80111ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80111f0:	b672      	cpsid	i
    return(int_posture);
 80111f2:	697b      	ldr	r3, [r7, #20]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80111f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	4a1c      	ldr	r2, [pc, #112]	; (801126c <_tx_timer_create+0xbc>)
 80111fa:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 80111fc:	4b1c      	ldr	r3, [pc, #112]	; (8011270 <_tx_timer_create+0xc0>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d109      	bne.n	8011218 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8011204:	4a1b      	ldr	r2, [pc, #108]	; (8011274 <_tx_timer_create+0xc4>)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	629a      	str	r2, [r3, #40]	; 0x28
 8011216:	e011      	b.n	801123c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8011218:	4b16      	ldr	r3, [pc, #88]	; (8011274 <_tx_timer_create+0xc4>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801121e:	6a3b      	ldr	r3, [r7, #32]
 8011220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011222:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	68fa      	ldr	r2, [r7, #12]
 8011228:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6a3a      	ldr	r2, [r7, #32]
 801123a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801123c:	4b0c      	ldr	r3, [pc, #48]	; (8011270 <_tx_timer_create+0xc0>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	3301      	adds	r3, #1
 8011242:	4a0b      	ldr	r2, [pc, #44]	; (8011270 <_tx_timer_create+0xc0>)
 8011244:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8011246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011248:	2b01      	cmp	r3, #1
 801124a:	d104      	bne.n	8011256 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	3308      	adds	r3, #8
 8011250:	4618      	mov	r0, r3
 8011252:	f000 f8af 	bl	80113b4 <_tx_timer_system_activate>
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	f383 8810 	msr	PRIMASK, r3
}
 8011260:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011262:	2300      	movs	r3, #0
}
 8011264:	4618      	mov	r0, r3
 8011266:	3728      	adds	r7, #40	; 0x28
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	4154494d 	.word	0x4154494d
 8011270:	200043e0 	.word	0x200043e0
 8011274:	200043dc 	.word	0x200043dc

08011278 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801127e:	f3ef 8310 	mrs	r3, PRIMASK
 8011282:	607b      	str	r3, [r7, #4]
    return(posture);
 8011284:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011286:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011288:	b672      	cpsid	i
    return(int_posture);
 801128a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 801128c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801128e:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <_tx_timer_expiration_process+0x3c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	3301      	adds	r3, #1
 8011294:	4a07      	ldr	r2, [pc, #28]	; (80112b4 <_tx_timer_expiration_process+0x3c>)
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	f383 8810 	msr	PRIMASK, r3
}
 80112a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80112a4:	4804      	ldr	r0, [pc, #16]	; (80112b8 <_tx_timer_expiration_process+0x40>)
 80112a6:	f7ff fc33 	bl	8010b10 <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80112aa:	bf00      	nop
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	20004338 	.word	0x20004338
 80112b8:	200043e8 	.word	0x200043e8

080112bc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80112bc:	b590      	push	{r4, r7, lr}
 80112be:	b089      	sub	sp, #36	; 0x24
 80112c0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80112c2:	4b28      	ldr	r3, [pc, #160]	; (8011364 <_tx_timer_initialize+0xa8>)
 80112c4:	2200      	movs	r2, #0
 80112c6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80112c8:	4b27      	ldr	r3, [pc, #156]	; (8011368 <_tx_timer_initialize+0xac>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80112ce:	4b27      	ldr	r3, [pc, #156]	; (801136c <_tx_timer_initialize+0xb0>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80112d4:	4b26      	ldr	r3, [pc, #152]	; (8011370 <_tx_timer_initialize+0xb4>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80112da:	4b26      	ldr	r3, [pc, #152]	; (8011374 <_tx_timer_initialize+0xb8>)
 80112dc:	2200      	movs	r2, #0
 80112de:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80112e0:	2280      	movs	r2, #128	; 0x80
 80112e2:	2100      	movs	r1, #0
 80112e4:	4824      	ldr	r0, [pc, #144]	; (8011378 <_tx_timer_initialize+0xbc>)
 80112e6:	f000 fd69 	bl	8011dbc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80112ea:	4b24      	ldr	r3, [pc, #144]	; (801137c <_tx_timer_initialize+0xc0>)
 80112ec:	4a22      	ldr	r2, [pc, #136]	; (8011378 <_tx_timer_initialize+0xbc>)
 80112ee:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80112f0:	4b23      	ldr	r3, [pc, #140]	; (8011380 <_tx_timer_initialize+0xc4>)
 80112f2:	4a21      	ldr	r2, [pc, #132]	; (8011378 <_tx_timer_initialize+0xbc>)
 80112f4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80112f6:	4b23      	ldr	r3, [pc, #140]	; (8011384 <_tx_timer_initialize+0xc8>)
 80112f8:	4a23      	ldr	r2, [pc, #140]	; (8011388 <_tx_timer_initialize+0xcc>)
 80112fa:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80112fc:	4b21      	ldr	r3, [pc, #132]	; (8011384 <_tx_timer_initialize+0xc8>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	3304      	adds	r3, #4
 8011302:	4a20      	ldr	r2, [pc, #128]	; (8011384 <_tx_timer_initialize+0xc8>)
 8011304:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8011306:	4b21      	ldr	r3, [pc, #132]	; (801138c <_tx_timer_initialize+0xd0>)
 8011308:	4a21      	ldr	r2, [pc, #132]	; (8011390 <_tx_timer_initialize+0xd4>)
 801130a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801130c:	4b21      	ldr	r3, [pc, #132]	; (8011394 <_tx_timer_initialize+0xd8>)
 801130e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011312:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8011314:	4b20      	ldr	r3, [pc, #128]	; (8011398 <_tx_timer_initialize+0xdc>)
 8011316:	2200      	movs	r2, #0
 8011318:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 801131a:	4b1c      	ldr	r3, [pc, #112]	; (801138c <_tx_timer_initialize+0xd0>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a1d      	ldr	r2, [pc, #116]	; (8011394 <_tx_timer_initialize+0xd8>)
 8011320:	6812      	ldr	r2, [r2, #0]
 8011322:	491d      	ldr	r1, [pc, #116]	; (8011398 <_tx_timer_initialize+0xdc>)
 8011324:	6809      	ldr	r1, [r1, #0]
 8011326:	481c      	ldr	r0, [pc, #112]	; (8011398 <_tx_timer_initialize+0xdc>)
 8011328:	6800      	ldr	r0, [r0, #0]
 801132a:	2400      	movs	r4, #0
 801132c:	9405      	str	r4, [sp, #20]
 801132e:	2400      	movs	r4, #0
 8011330:	9404      	str	r4, [sp, #16]
 8011332:	9003      	str	r0, [sp, #12]
 8011334:	9102      	str	r1, [sp, #8]
 8011336:	9201      	str	r2, [sp, #4]
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	4b18      	ldr	r3, [pc, #96]	; (801139c <_tx_timer_initialize+0xe0>)
 801133c:	4a18      	ldr	r2, [pc, #96]	; (80113a0 <_tx_timer_initialize+0xe4>)
 801133e:	4919      	ldr	r1, [pc, #100]	; (80113a4 <_tx_timer_initialize+0xe8>)
 8011340:	4819      	ldr	r0, [pc, #100]	; (80113a8 <_tx_timer_initialize+0xec>)
 8011342:	f7ff f8db 	bl	80104fc <_tx_thread_create>
 8011346:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1e5      	bne.n	801131a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801134e:	4b17      	ldr	r3, [pc, #92]	; (80113ac <_tx_timer_initialize+0xf0>)
 8011350:	2200      	movs	r2, #0
 8011352:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8011354:	4b16      	ldr	r3, [pc, #88]	; (80113b0 <_tx_timer_initialize+0xf4>)
 8011356:	2200      	movs	r2, #0
 8011358:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801135a:	bf00      	nop
 801135c:	370c      	adds	r7, #12
 801135e:	46bd      	mov	sp, r7
 8011360:	bd90      	pop	{r4, r7, pc}
 8011362:	bf00      	nop
 8011364:	20004344 	.word	0x20004344
 8011368:	200048a8 	.word	0x200048a8
 801136c:	20004348 	.word	0x20004348
 8011370:	200043d8 	.word	0x200043d8
 8011374:	200043e4 	.word	0x200043e4
 8011378:	2000434c 	.word	0x2000434c
 801137c:	200043cc 	.word	0x200043cc
 8011380:	200043d4 	.word	0x200043d4
 8011384:	200043d0 	.word	0x200043d0
 8011388:	200043c8 	.word	0x200043c8
 801138c:	2000449c 	.word	0x2000449c
 8011390:	200044a8 	.word	0x200044a8
 8011394:	200044a0 	.word	0x200044a0
 8011398:	200044a4 	.word	0x200044a4
 801139c:	4154494d 	.word	0x4154494d
 80113a0:	080114e9 	.word	0x080114e9
 80113a4:	08011e9c 	.word	0x08011e9c
 80113a8:	200043e8 	.word	0x200043e8
 80113ac:	200043dc 	.word	0x200043dc
 80113b0:	200043e0 	.word	0x200043e0

080113b4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b089      	sub	sp, #36	; 0x24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d04a      	beq.n	801145e <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113ce:	d046      	beq.n	801145e <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	699b      	ldr	r3, [r3, #24]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d142      	bne.n	801145e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	2b20      	cmp	r3, #32
 80113dc:	d902      	bls.n	80113e4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80113de:	231f      	movs	r3, #31
 80113e0:	61bb      	str	r3, [r7, #24]
 80113e2:	e002      	b.n	80113ea <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	3b01      	subs	r3, #1
 80113e8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80113ea:	4b20      	ldr	r3, [pc, #128]	; (801146c <_tx_timer_system_activate+0xb8>)
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	009b      	lsls	r3, r3, #2
 80113f2:	4413      	add	r3, r2
 80113f4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80113f6:	4b1e      	ldr	r3, [pc, #120]	; (8011470 <_tx_timer_system_activate+0xbc>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	69fa      	ldr	r2, [r7, #28]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d30b      	bcc.n	8011418 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8011400:	4b1b      	ldr	r3, [pc, #108]	; (8011470 <_tx_timer_system_activate+0xbc>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	69fa      	ldr	r2, [r7, #28]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	109b      	asrs	r3, r3, #2
 801140a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801140c:	4b19      	ldr	r3, [pc, #100]	; (8011474 <_tx_timer_system_activate+0xc0>)
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	4413      	add	r3, r2
 8011416:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d109      	bne.n	8011434 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	e011      	b.n	8011458 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68ba      	ldr	r2, [r7, #8]
 8011456:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	69fa      	ldr	r2, [r7, #28]
 801145c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801145e:	bf00      	nop
 8011460:	3724      	adds	r7, #36	; 0x24
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr
 801146a:	bf00      	nop
 801146c:	200043d4 	.word	0x200043d4
 8011470:	200043d0 	.word	0x200043d0
 8011474:	200043cc 	.word	0x200043cc

08011478 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011478:	b480      	push	{r7}
 801147a:	b087      	sub	sp, #28
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	699b      	ldr	r3, [r3, #24]
 8011484:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d026      	beq.n	80114da <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	429a      	cmp	r2, r3
 8011498:	d108      	bne.n	80114ac <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d117      	bne.n	80114d4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	2200      	movs	r2, #0
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	e013      	b.n	80114d4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	695b      	ldr	r3, [r3, #20]
 80114b0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	68fa      	ldr	r2, [r7, #12]
 80114b6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	693a      	ldr	r2, [r7, #16]
 80114bc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d105      	bne.n	80114d4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	697a      	ldr	r2, [r7, #20]
 80114cc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	619a      	str	r2, [r3, #24]
    }
}
 80114da:	bf00      	nop
 80114dc:	371c      	adds	r7, #28
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr
	...

080114e8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b098      	sub	sp, #96	; 0x60
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80114f0:	2300      	movs	r3, #0
 80114f2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a73      	ldr	r2, [pc, #460]	; (80116c4 <_tx_timer_thread_entry+0x1dc>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	f040 80de 	bne.w	80116ba <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80114fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011502:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8011504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8011506:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011508:	b672      	cpsid	i
    return(int_posture);
 801150a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801150c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801150e:	4b6e      	ldr	r3, [pc, #440]	; (80116c8 <_tx_timer_thread_entry+0x1e0>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d003      	beq.n	8011524 <_tx_timer_thread_entry+0x3c>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f107 020c 	add.w	r2, r7, #12
 8011522:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8011524:	4b68      	ldr	r3, [pc, #416]	; (80116c8 <_tx_timer_thread_entry+0x1e0>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2200      	movs	r2, #0
 801152a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 801152c:	4b66      	ldr	r3, [pc, #408]	; (80116c8 <_tx_timer_thread_entry+0x1e0>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	3304      	adds	r3, #4
 8011532:	4a65      	ldr	r2, [pc, #404]	; (80116c8 <_tx_timer_thread_entry+0x1e0>)
 8011534:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8011536:	4b64      	ldr	r3, [pc, #400]	; (80116c8 <_tx_timer_thread_entry+0x1e0>)
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	4b64      	ldr	r3, [pc, #400]	; (80116cc <_tx_timer_thread_entry+0x1e4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	429a      	cmp	r2, r3
 8011540:	d103      	bne.n	801154a <_tx_timer_thread_entry+0x62>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8011542:	4b63      	ldr	r3, [pc, #396]	; (80116d0 <_tx_timer_thread_entry+0x1e8>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a60      	ldr	r2, [pc, #384]	; (80116c8 <_tx_timer_thread_entry+0x1e0>)
 8011548:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801154a:	4b62      	ldr	r3, [pc, #392]	; (80116d4 <_tx_timer_thread_entry+0x1ec>)
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]
 8011550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011552:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011556:	f383 8810 	msr	PRIMASK, r3
}
 801155a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801155c:	f3ef 8310 	mrs	r3, PRIMASK
 8011560:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8011562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8011564:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011566:	b672      	cpsid	i
    return(int_posture);
 8011568:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801156a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801156c:	e07f      	b.n	801166e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	64bb      	str	r3, [r7, #72]	; 0x48
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8011578:	2300      	movs	r3, #0
 801157a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801157c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801157e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011580:	429a      	cmp	r2, r3
 8011582:	d102      	bne.n	801158a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8011584:	2300      	movs	r3, #0
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	e00e      	b.n	80115a8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801158a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158c:	695b      	ldr	r3, [r3, #20]
 801158e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011594:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801159a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801159c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801159e:	f107 020c 	add.w	r2, r7, #12
 80115a2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80115a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115a6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80115a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b20      	cmp	r3, #32
 80115ae:	d911      	bls.n	80115d4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80115b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 80115b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ba:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80115c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115c2:	f107 0208 	add.w	r2, r7, #8
 80115c6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80115c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115cc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80115ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115d0:	60bb      	str	r3, [r7, #8]
 80115d2:	e01a      	b.n	801160a <_tx_timer_thread_entry+0x122>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80115d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115d6:	689b      	ldr	r3, [r3, #8]
 80115d8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80115da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80115e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115e2:	685a      	ldr	r2, [r3, #4]
 80115e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115e6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80115e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d009      	beq.n	8011604 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80115f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115f2:	f107 0208 	add.w	r2, r7, #8
 80115f6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80115f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115fc:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80115fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011600:	60bb      	str	r3, [r7, #8]
 8011602:	e002      	b.n	801160a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8011604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011606:	2200      	movs	r2, #0
 8011608:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801160a:	4a33      	ldr	r2, [pc, #204]	; (80116d8 <_tx_timer_thread_entry+0x1f0>)
 801160c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801160e:	6013      	str	r3, [r2, #0]
 8011610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011612:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011616:	f383 8810 	msr	PRIMASK, r3
}
 801161a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 801161c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801161e:	2b00      	cmp	r3, #0
 8011620:	d002      	beq.n	8011628 <_tx_timer_thread_entry+0x140>
                {
            
                    (timeout_function) (timeout_param);
 8011622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011624:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011626:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011628:	f3ef 8310 	mrs	r3, PRIMASK
 801162c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8011630:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8011632:	b672      	cpsid	i
    return(int_posture);
 8011634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011636:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8011638:	4b27      	ldr	r3, [pc, #156]	; (80116d8 <_tx_timer_thread_entry+0x1f0>)
 801163a:	2200      	movs	r2, #0
 801163c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011642:	429a      	cmp	r2, r3
 8011644:	d105      	bne.n	8011652 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8011646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011648:	2200      	movs	r2, #0
 801164a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801164c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801164e:	f7ff feb1 	bl	80113b4 <_tx_timer_system_activate>
 8011652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011654:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	f383 8810 	msr	PRIMASK, r3
}
 801165c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801165e:	f3ef 8310 	mrs	r3, PRIMASK
 8011662:	623b      	str	r3, [r7, #32]
    return(posture);
 8011664:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011666:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011668:	b672      	cpsid	i
    return(int_posture);
 801166a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 801166c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	f47f af7c 	bne.w	801156e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8011676:	4b17      	ldr	r3, [pc, #92]	; (80116d4 <_tx_timer_thread_entry+0x1ec>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d116      	bne.n	80116ac <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801167e:	4b17      	ldr	r3, [pc, #92]	; (80116dc <_tx_timer_thread_entry+0x1f4>)
 8011680:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011684:	2203      	movs	r2, #3
 8011686:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801168a:	2201      	movs	r2, #1
 801168c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801168e:	4b14      	ldr	r3, [pc, #80]	; (80116e0 <_tx_timer_thread_entry+0x1f8>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	3301      	adds	r3, #1
 8011694:	4a12      	ldr	r2, [pc, #72]	; (80116e0 <_tx_timer_thread_entry+0x1f8>)
 8011696:	6013      	str	r3, [r2, #0]
 8011698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801169a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	f383 8810 	msr	PRIMASK, r3
}
 80116a2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80116a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80116a6:	f7ff fb47 	bl	8010d38 <_tx_thread_system_suspend>
 80116aa:	e728      	b.n	80114fe <_tx_timer_thread_entry+0x16>
 80116ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	f383 8810 	msr	PRIMASK, r3
}
 80116b6:	bf00      	nop
            TX_DISABLE
 80116b8:	e721      	b.n	80114fe <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80116ba:	bf00      	nop
 80116bc:	3760      	adds	r7, #96	; 0x60
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	4154494d 	.word	0x4154494d
 80116c8:	200043d4 	.word	0x200043d4
 80116cc:	200043d0 	.word	0x200043d0
 80116d0:	200043cc 	.word	0x200043cc
 80116d4:	200043d8 	.word	0x200043d8
 80116d8:	200043e4 	.word	0x200043e4
 80116dc:	200043e8 	.word	0x200043e8
 80116e0:	20004338 	.word	0x20004338

080116e4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b08a      	sub	sp, #40	; 0x28
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
 80116f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80116f2:	2300      	movs	r3, #0
 80116f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d102      	bne.n	8011702 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80116fc:	2302      	movs	r3, #2
 80116fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011700:	e029      	b.n	8011756 <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4a2d      	ldr	r2, [pc, #180]	; (80117bc <_txe_byte_allocate+0xd8>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d002      	beq.n	8011712 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801170c:	2302      	movs	r3, #2
 801170e:	627b      	str	r3, [r7, #36]	; 0x24
 8011710:	e021      	b.n	8011756 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d102      	bne.n	801171e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8011718:	2303      	movs	r3, #3
 801171a:	627b      	str	r3, [r7, #36]	; 0x24
 801171c:	e01b      	b.n	8011756 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d102      	bne.n	801172a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8011724:	2305      	movs	r3, #5
 8011726:	627b      	str	r3, [r7, #36]	; 0x24
 8011728:	e015      	b.n	8011756 <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	69db      	ldr	r3, [r3, #28]
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	429a      	cmp	r2, r3
 8011732:	d902      	bls.n	801173a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8011734:	2305      	movs	r3, #5
 8011736:	627b      	str	r3, [r7, #36]	; 0x24
 8011738:	e00d      	b.n	8011756 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d00a      	beq.n	8011756 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011740:	f3ef 8305 	mrs	r3, IPSR
 8011744:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8011746:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011748:	4b1d      	ldr	r3, [pc, #116]	; (80117c0 <_txe_byte_allocate+0xdc>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4313      	orrs	r3, r2
 801174e:	2b00      	cmp	r3, #0
 8011750:	d001      	beq.n	8011756 <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011752:	2304      	movs	r3, #4
 8011754:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8011756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	d108      	bne.n	801176e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801175c:	4b19      	ldr	r3, [pc, #100]	; (80117c4 <_txe_byte_allocate+0xe0>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8011762:	6a3b      	ldr	r3, [r7, #32]
 8011764:	4a18      	ldr	r2, [pc, #96]	; (80117c8 <_txe_byte_allocate+0xe4>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d101      	bne.n	801176e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801176a:	2313      	movs	r3, #19
 801176c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011770:	2b00      	cmp	r3, #0
 8011772:	d114      	bne.n	801179e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011774:	f3ef 8305 	mrs	r3, IPSR
 8011778:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801177a:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801177c:	4b10      	ldr	r3, [pc, #64]	; (80117c0 <_txe_byte_allocate+0xdc>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4313      	orrs	r3, r2
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00b      	beq.n	801179e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011786:	f3ef 8305 	mrs	r3, IPSR
 801178a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801178c:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801178e:	4b0c      	ldr	r3, [pc, #48]	; (80117c0 <_txe_byte_allocate+0xdc>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	4313      	orrs	r3, r2
 8011794:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011798:	d201      	bcs.n	801179e <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801179a:	2313      	movs	r3, #19
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d106      	bne.n	80117b2 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	68b9      	ldr	r1, [r7, #8]
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f7fd fa86 	bl	800ecbc <_tx_byte_allocate>
 80117b0:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80117b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3728      	adds	r7, #40	; 0x28
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	42595445 	.word	0x42595445
 80117c0:	20000088 	.word	0x20000088
 80117c4:	2000429c 	.word	0x2000429c
 80117c8:	200043e8 	.word	0x200043e8

080117cc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b092      	sub	sp, #72	; 0x48
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80117da:	2300      	movs	r3, #0
 80117dc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d102      	bne.n	80117ea <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80117e4:	2302      	movs	r3, #2
 80117e6:	647b      	str	r3, [r7, #68]	; 0x44
 80117e8:	e075      	b.n	80118d6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80117ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ec:	2b34      	cmp	r3, #52	; 0x34
 80117ee:	d002      	beq.n	80117f6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80117f0:	2302      	movs	r3, #2
 80117f2:	647b      	str	r3, [r7, #68]	; 0x44
 80117f4:	e06f      	b.n	80118d6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117f6:	f3ef 8310 	mrs	r3, PRIMASK
 80117fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80117fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80117fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011800:	b672      	cpsid	i
    return(int_posture);
 8011802:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8011804:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011806:	4b3b      	ldr	r3, [pc, #236]	; (80118f4 <_txe_byte_pool_create+0x128>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	3301      	adds	r3, #1
 801180c:	4a39      	ldr	r2, [pc, #228]	; (80118f4 <_txe_byte_pool_create+0x128>)
 801180e:	6013      	str	r3, [r2, #0]
 8011810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011812:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011816:	f383 8810 	msr	PRIMASK, r3
}
 801181a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801181c:	4b36      	ldr	r3, [pc, #216]	; (80118f8 <_txe_byte_pool_create+0x12c>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8011822:	2300      	movs	r3, #0
 8011824:	643b      	str	r3, [r7, #64]	; 0x40
 8011826:	e009      	b.n	801183c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8011828:	68fa      	ldr	r2, [r7, #12]
 801182a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801182c:	429a      	cmp	r2, r3
 801182e:	d00b      	beq.n	8011848 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8011830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011834:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8011836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011838:	3301      	adds	r3, #1
 801183a:	643b      	str	r3, [r7, #64]	; 0x40
 801183c:	4b2f      	ldr	r3, [pc, #188]	; (80118fc <_txe_byte_pool_create+0x130>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011842:	429a      	cmp	r2, r3
 8011844:	d3f0      	bcc.n	8011828 <_txe_byte_pool_create+0x5c>
 8011846:	e000      	b.n	801184a <_txe_byte_pool_create+0x7e>
                break;
 8011848:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801184a:	f3ef 8310 	mrs	r3, PRIMASK
 801184e:	623b      	str	r3, [r7, #32]
    return(posture);
 8011850:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011852:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011854:	b672      	cpsid	i
    return(int_posture);
 8011856:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011858:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801185a:	4b26      	ldr	r3, [pc, #152]	; (80118f4 <_txe_byte_pool_create+0x128>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	3b01      	subs	r3, #1
 8011860:	4a24      	ldr	r2, [pc, #144]	; (80118f4 <_txe_byte_pool_create+0x128>)
 8011862:	6013      	str	r3, [r2, #0]
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186a:	f383 8810 	msr	PRIMASK, r3
}
 801186e:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011870:	f7ff f914 	bl	8010a9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8011874:	68fa      	ldr	r2, [r7, #12]
 8011876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011878:	429a      	cmp	r2, r3
 801187a:	d102      	bne.n	8011882 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 801187c:	2302      	movs	r3, #2
 801187e:	647b      	str	r3, [r7, #68]	; 0x44
 8011880:	e029      	b.n	80118d6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d102      	bne.n	801188e <_txe_byte_pool_create+0xc2>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8011888:	2303      	movs	r3, #3
 801188a:	647b      	str	r3, [r7, #68]	; 0x44
 801188c:	e023      	b.n	80118d6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	2b63      	cmp	r3, #99	; 0x63
 8011892:	d802      	bhi.n	801189a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8011894:	2305      	movs	r3, #5
 8011896:	647b      	str	r3, [r7, #68]	; 0x44
 8011898:	e01d      	b.n	80118d6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801189a:	4b19      	ldr	r3, [pc, #100]	; (8011900 <_txe_byte_pool_create+0x134>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80118a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a2:	4a18      	ldr	r2, [pc, #96]	; (8011904 <_txe_byte_pool_create+0x138>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d101      	bne.n	80118ac <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80118a8:	2313      	movs	r3, #19
 80118aa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118ac:	f3ef 8305 	mrs	r3, IPSR
 80118b0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80118b2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80118b4:	4b14      	ldr	r3, [pc, #80]	; (8011908 <_txe_byte_pool_create+0x13c>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4313      	orrs	r3, r2
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00b      	beq.n	80118d6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118be:	f3ef 8305 	mrs	r3, IPSR
 80118c2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80118c4:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80118c6:	4b10      	ldr	r3, [pc, #64]	; (8011908 <_txe_byte_pool_create+0x13c>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80118d0:	d201      	bcs.n	80118d6 <_txe_byte_pool_create+0x10a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80118d2:	2313      	movs	r3, #19
 80118d4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80118d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d106      	bne.n	80118ea <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	68b9      	ldr	r1, [r7, #8]
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7fd fb2c 	bl	800ef40 <_tx_byte_pool_create>
 80118e8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80118ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3748      	adds	r7, #72	; 0x48
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	20004338 	.word	0x20004338
 80118f8:	2000428c 	.word	0x2000428c
 80118fc:	20004290 	.word	0x20004290
 8011900:	2000429c 	.word	0x2000429c
 8011904:	200043e8 	.word	0x200043e8
 8011908:	20000088 	.word	0x20000088

0801190c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b092      	sub	sp, #72	; 0x48
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
 8011918:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801191a:	2300      	movs	r3, #0
 801191c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d102      	bne.n	801192a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011924:	230c      	movs	r3, #12
 8011926:	647b      	str	r3, [r7, #68]	; 0x44
 8011928:	e054      	b.n	80119d4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	2b20      	cmp	r3, #32
 801192e:	d002      	beq.n	8011936 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011930:	230c      	movs	r3, #12
 8011932:	647b      	str	r3, [r7, #68]	; 0x44
 8011934:	e04e      	b.n	80119d4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011936:	f3ef 8310 	mrs	r3, PRIMASK
 801193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801193e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011940:	b672      	cpsid	i
    return(int_posture);
 8011942:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011944:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011946:	4b36      	ldr	r3, [pc, #216]	; (8011a20 <_txe_semaphore_create+0x114>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3301      	adds	r3, #1
 801194c:	4a34      	ldr	r2, [pc, #208]	; (8011a20 <_txe_semaphore_create+0x114>)
 801194e:	6013      	str	r3, [r2, #0]
 8011950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011952:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011956:	f383 8810 	msr	PRIMASK, r3
}
 801195a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801195c:	4b31      	ldr	r3, [pc, #196]	; (8011a24 <_txe_semaphore_create+0x118>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8011962:	2300      	movs	r3, #0
 8011964:	643b      	str	r3, [r7, #64]	; 0x40
 8011966:	e009      	b.n	801197c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801196c:	429a      	cmp	r2, r3
 801196e:	d00b      	beq.n	8011988 <_txe_semaphore_create+0x7c>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8011970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011972:	695b      	ldr	r3, [r3, #20]
 8011974:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8011976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011978:	3301      	adds	r3, #1
 801197a:	643b      	str	r3, [r7, #64]	; 0x40
 801197c:	4b2a      	ldr	r3, [pc, #168]	; (8011a28 <_txe_semaphore_create+0x11c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011982:	429a      	cmp	r2, r3
 8011984:	d3f0      	bcc.n	8011968 <_txe_semaphore_create+0x5c>
 8011986:	e000      	b.n	801198a <_txe_semaphore_create+0x7e>
                break;
 8011988:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801198a:	f3ef 8310 	mrs	r3, PRIMASK
 801198e:	623b      	str	r3, [r7, #32]
    return(posture);
 8011990:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011992:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011994:	b672      	cpsid	i
    return(int_posture);
 8011996:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011998:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801199a:	4b21      	ldr	r3, [pc, #132]	; (8011a20 <_txe_semaphore_create+0x114>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	3b01      	subs	r3, #1
 80119a0:	4a1f      	ldr	r2, [pc, #124]	; (8011a20 <_txe_semaphore_create+0x114>)
 80119a2:	6013      	str	r3, [r2, #0]
 80119a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119aa:	f383 8810 	msr	PRIMASK, r3
}
 80119ae:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80119b0:	f7ff f874 	bl	8010a9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d102      	bne.n	80119c2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80119bc:	230c      	movs	r3, #12
 80119be:	647b      	str	r3, [r7, #68]	; 0x44
 80119c0:	e008      	b.n	80119d4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80119c2:	4b1a      	ldr	r3, [pc, #104]	; (8011a2c <_txe_semaphore_create+0x120>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80119c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ca:	4a19      	ldr	r2, [pc, #100]	; (8011a30 <_txe_semaphore_create+0x124>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d101      	bne.n	80119d4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80119d0:	2313      	movs	r3, #19
 80119d2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80119d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d114      	bne.n	8011a04 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80119da:	f3ef 8305 	mrs	r3, IPSR
 80119de:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80119e0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80119e2:	4b14      	ldr	r3, [pc, #80]	; (8011a34 <_txe_semaphore_create+0x128>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4313      	orrs	r3, r2
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00b      	beq.n	8011a04 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80119ec:	f3ef 8305 	mrs	r3, IPSR
 80119f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80119f2:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80119f4:	4b0f      	ldr	r3, [pc, #60]	; (8011a34 <_txe_semaphore_create+0x128>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	4313      	orrs	r3, r2
 80119fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80119fe:	d201      	bcs.n	8011a04 <_txe_semaphore_create+0xf8>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011a00:	2313      	movs	r3, #19
 8011a02:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d105      	bne.n	8011a16 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	68b9      	ldr	r1, [r7, #8]
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	f7fe fb94 	bl	801013c <_tx_semaphore_create>
 8011a14:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3748      	adds	r7, #72	; 0x48
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	20004338 	.word	0x20004338
 8011a24:	20004264 	.word	0x20004264
 8011a28:	20004268 	.word	0x20004268
 8011a2c:	2000429c 	.word	0x2000429c
 8011a30:	200043e8 	.word	0x200043e8
 8011a34:	20000088 	.word	0x20000088

08011a38 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b086      	sub	sp, #24
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011a40:	2300      	movs	r3, #0
 8011a42:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d102      	bne.n	8011a50 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011a4a:	230c      	movs	r3, #12
 8011a4c:	617b      	str	r3, [r7, #20]
 8011a4e:	e01c      	b.n	8011a8a <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a13      	ldr	r2, [pc, #76]	; (8011aa4 <_txe_semaphore_delete+0x6c>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d002      	beq.n	8011a60 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011a5a:	230c      	movs	r3, #12
 8011a5c:	617b      	str	r3, [r7, #20]
 8011a5e:	e014      	b.n	8011a8a <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a60:	f3ef 8305 	mrs	r3, IPSR
 8011a64:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011a66:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011a68:	4b0f      	ldr	r3, [pc, #60]	; (8011aa8 <_txe_semaphore_delete+0x70>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011a72:	2313      	movs	r3, #19
 8011a74:	617b      	str	r3, [r7, #20]
 8011a76:	e008      	b.n	8011a8a <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011a78:	4b0c      	ldr	r3, [pc, #48]	; (8011aac <_txe_semaphore_delete+0x74>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	4a0b      	ldr	r2, [pc, #44]	; (8011ab0 <_txe_semaphore_delete+0x78>)
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d101      	bne.n	8011a8a <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011a86:	2313      	movs	r3, #19
 8011a88:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d103      	bne.n	8011a98 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f7fe fba5 	bl	80101e0 <_tx_semaphore_delete>
 8011a96:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011a98:	697b      	ldr	r3, [r7, #20]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3718      	adds	r7, #24
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	53454d41 	.word	0x53454d41
 8011aa8:	20000088 	.word	0x20000088
 8011aac:	2000429c 	.word	0x2000429c
 8011ab0:	200043e8 	.word	0x200043e8

08011ab4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011ac8:	230c      	movs	r3, #12
 8011aca:	617b      	str	r3, [r7, #20]
 8011acc:	e01f      	b.n	8011b0e <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	4a15      	ldr	r2, [pc, #84]	; (8011b28 <_txe_semaphore_get+0x74>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d002      	beq.n	8011ade <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011ad8:	230c      	movs	r3, #12
 8011ada:	617b      	str	r3, [r7, #20]
 8011adc:	e017      	b.n	8011b0e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d014      	beq.n	8011b0e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ae4:	f3ef 8305 	mrs	r3, IPSR
 8011ae8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011aea:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011aec:	4b0f      	ldr	r3, [pc, #60]	; (8011b2c <_txe_semaphore_get+0x78>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d002      	beq.n	8011afc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011af6:	2304      	movs	r3, #4
 8011af8:	617b      	str	r3, [r7, #20]
 8011afa:	e008      	b.n	8011b0e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011afc:	4b0c      	ldr	r3, [pc, #48]	; (8011b30 <_txe_semaphore_get+0x7c>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	4a0b      	ldr	r2, [pc, #44]	; (8011b34 <_txe_semaphore_get+0x80>)
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d101      	bne.n	8011b0e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011b0a:	2304      	movs	r3, #4
 8011b0c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d104      	bne.n	8011b1e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8011b14:	6839      	ldr	r1, [r7, #0]
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7fe fbf2 	bl	8010300 <_tx_semaphore_get>
 8011b1c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011b1e:	697b      	ldr	r3, [r7, #20]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3718      	adds	r7, #24
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	53454d41 	.word	0x53454d41
 8011b2c:	20000088 	.word	0x20000088
 8011b30:	2000429c 	.word	0x2000429c
 8011b34:	200043e8 	.word	0x200043e8

08011b38 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d102      	bne.n	8011b4c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011b46:	230c      	movs	r3, #12
 8011b48:	60fb      	str	r3, [r7, #12]
 8011b4a:	e00b      	b.n	8011b64 <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a07      	ldr	r2, [pc, #28]	; (8011b70 <_txe_semaphore_put+0x38>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d002      	beq.n	8011b5c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011b56:	230c      	movs	r3, #12
 8011b58:	60fb      	str	r3, [r7, #12]
 8011b5a:	e003      	b.n	8011b64 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7fe fc61 	bl	8010424 <_tx_semaphore_put>
 8011b62:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011b64:	68fb      	ldr	r3, [r7, #12]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	53454d41 	.word	0x53454d41

08011b74 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b09a      	sub	sp, #104	; 0x68
 8011b78:	af06      	add	r7, sp, #24
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
 8011b80:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011b82:	2300      	movs	r3, #0
 8011b84:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d102      	bne.n	8011b92 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011b8c:	230e      	movs	r3, #14
 8011b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b90:	e0bb      	b.n	8011d0a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8011b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b94:	2bb4      	cmp	r3, #180	; 0xb4
 8011b96:	d002      	beq.n	8011b9e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011b98:	230e      	movs	r3, #14
 8011b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b9c:	e0b5      	b.n	8011d0a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8011ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8011ba6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ba8:	b672      	cpsid	i
    return(int_posture);
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011bac:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011bae:	4b64      	ldr	r3, [pc, #400]	; (8011d40 <_txe_thread_create+0x1cc>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	4a62      	ldr	r2, [pc, #392]	; (8011d40 <_txe_thread_create+0x1cc>)
 8011bb6:	6013      	str	r3, [r2, #0]
 8011bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	f383 8810 	msr	PRIMASK, r3
}
 8011bc2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8011bc8:	4b5e      	ldr	r3, [pc, #376]	; (8011d44 <_txe_thread_create+0x1d0>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bd0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8011bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bd8:	4413      	add	r3, r2
 8011bda:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8011bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bde:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011be0:	2300      	movs	r3, #0
 8011be2:	647b      	str	r3, [r7, #68]	; 0x44
 8011be4:	e02b      	b.n	8011c3e <_txe_thread_create+0xca>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d101      	bne.n	8011bf2 <_txe_thread_create+0x7e>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8011bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d028      	beq.n	8011c4a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8011bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d308      	bcc.n	8011c14 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8011c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c04:	691b      	ldr	r3, [r3, #16]
 8011c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d203      	bcs.n	8011c14 <_txe_thread_create+0xa0>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011c10:	2301      	movs	r3, #1
 8011c12:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8011c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d308      	bcc.n	8011c30 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8011c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c20:	691b      	ldr	r3, [r3, #16]
 8011c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d203      	bcs.n	8011c30 <_txe_thread_create+0xbc>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	65bb      	str	r3, [r7, #88]	; 0x58
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8011c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c36:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8011c3e:	4b42      	ldr	r3, [pc, #264]	; (8011d48 <_txe_thread_create+0x1d4>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d3ce      	bcc.n	8011be6 <_txe_thread_create+0x72>
 8011c48:	e000      	b.n	8011c4c <_txe_thread_create+0xd8>
                break;
 8011c4a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8011c50:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011c52:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011c54:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c56:	b672      	cpsid	i
    return(int_posture);
 8011c58:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011c5a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011c5c:	4b38      	ldr	r3, [pc, #224]	; (8011d40 <_txe_thread_create+0x1cc>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	4a37      	ldr	r2, [pc, #220]	; (8011d40 <_txe_thread_create+0x1cc>)
 8011c64:	6013      	str	r3, [r2, #0]
 8011c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c68:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	f383 8810 	msr	PRIMASK, r3
}
 8011c70:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011c72:	f7fe ff13 	bl	8010a9c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d102      	bne.n	8011c84 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8011c7e:	230e      	movs	r3, #14
 8011c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c82:	e042      	b.n	8011d0a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8011c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d102      	bne.n	8011c90 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c8e:	e03c      	b.n	8011d0a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d102      	bne.n	8011c9c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011c96:	2303      	movs	r3, #3
 8011c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c9a:	e036      	b.n	8011d0a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8011c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c9e:	2bc7      	cmp	r3, #199	; 0xc7
 8011ca0:	d802      	bhi.n	8011ca8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8011ca2:	2305      	movs	r3, #5
 8011ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ca6:	e030      	b.n	8011d0a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8011ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011caa:	2b1f      	cmp	r3, #31
 8011cac:	d902      	bls.n	8011cb4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8011cae:	230f      	movs	r3, #15
 8011cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cb2:	e02a      	b.n	8011d0a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8011cb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d902      	bls.n	8011cc2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8011cbc:	2318      	movs	r3, #24
 8011cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cc0:	e023      	b.n	8011d0a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8011cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d902      	bls.n	8011cce <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8011cc8:	2310      	movs	r3, #16
 8011cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ccc:	e01d      	b.n	8011d0a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8011cce:	4b1f      	ldr	r3, [pc, #124]	; (8011d4c <_txe_thread_create+0x1d8>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8011cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd6:	4a1e      	ldr	r2, [pc, #120]	; (8011d50 <_txe_thread_create+0x1dc>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d101      	bne.n	8011ce0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011cdc:	2313      	movs	r3, #19
 8011cde:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ce0:	f3ef 8305 	mrs	r3, IPSR
 8011ce4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011ce6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011ce8:	4b1a      	ldr	r3, [pc, #104]	; (8011d54 <_txe_thread_create+0x1e0>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4313      	orrs	r3, r2
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d00b      	beq.n	8011d0a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011cf2:	f3ef 8305 	mrs	r3, IPSR
 8011cf6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011cf8:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011cfa:	4b16      	ldr	r3, [pc, #88]	; (8011d54 <_txe_thread_create+0x1e0>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011d04:	d201      	bcs.n	8011d0a <_txe_thread_create+0x196>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011d06:	2313      	movs	r3, #19
 8011d08:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d112      	bne.n	8011d36 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8011d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d12:	9305      	str	r3, [sp, #20]
 8011d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d16:	9304      	str	r3, [sp, #16]
 8011d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d1a:	9303      	str	r3, [sp, #12]
 8011d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d1e:	9302      	str	r3, [sp, #8]
 8011d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d22:	9301      	str	r3, [sp, #4]
 8011d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	68b9      	ldr	r1, [r7, #8]
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f7fe fbe4 	bl	80104fc <_tx_thread_create>
 8011d34:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8011d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3750      	adds	r7, #80	; 0x50
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	20004338 	.word	0x20004338
 8011d44:	200042a4 	.word	0x200042a4
 8011d48:	200042a8 	.word	0x200042a8
 8011d4c:	2000429c 	.word	0x2000429c
 8011d50:	200043e8 	.word	0x200043e8
 8011d54:	20000088 	.word	0x20000088

08011d58 <__libc_init_array>:
 8011d58:	b570      	push	{r4, r5, r6, lr}
 8011d5a:	4d0d      	ldr	r5, [pc, #52]	; (8011d90 <__libc_init_array+0x38>)
 8011d5c:	4c0d      	ldr	r4, [pc, #52]	; (8011d94 <__libc_init_array+0x3c>)
 8011d5e:	1b64      	subs	r4, r4, r5
 8011d60:	10a4      	asrs	r4, r4, #2
 8011d62:	2600      	movs	r6, #0
 8011d64:	42a6      	cmp	r6, r4
 8011d66:	d109      	bne.n	8011d7c <__libc_init_array+0x24>
 8011d68:	4d0b      	ldr	r5, [pc, #44]	; (8011d98 <__libc_init_array+0x40>)
 8011d6a:	4c0c      	ldr	r4, [pc, #48]	; (8011d9c <__libc_init_array+0x44>)
 8011d6c:	f000 f82e 	bl	8011dcc <_init>
 8011d70:	1b64      	subs	r4, r4, r5
 8011d72:	10a4      	asrs	r4, r4, #2
 8011d74:	2600      	movs	r6, #0
 8011d76:	42a6      	cmp	r6, r4
 8011d78:	d105      	bne.n	8011d86 <__libc_init_array+0x2e>
 8011d7a:	bd70      	pop	{r4, r5, r6, pc}
 8011d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d80:	4798      	blx	r3
 8011d82:	3601      	adds	r6, #1
 8011d84:	e7ee      	b.n	8011d64 <__libc_init_array+0xc>
 8011d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d8a:	4798      	blx	r3
 8011d8c:	3601      	adds	r6, #1
 8011d8e:	e7f2      	b.n	8011d76 <__libc_init_array+0x1e>
 8011d90:	08011ed8 	.word	0x08011ed8
 8011d94:	08011ed8 	.word	0x08011ed8
 8011d98:	08011ed8 	.word	0x08011ed8
 8011d9c:	08011edc 	.word	0x08011edc

08011da0 <memcpy>:
 8011da0:	440a      	add	r2, r1
 8011da2:	4291      	cmp	r1, r2
 8011da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011da8:	d100      	bne.n	8011dac <memcpy+0xc>
 8011daa:	4770      	bx	lr
 8011dac:	b510      	push	{r4, lr}
 8011dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011db6:	4291      	cmp	r1, r2
 8011db8:	d1f9      	bne.n	8011dae <memcpy+0xe>
 8011dba:	bd10      	pop	{r4, pc}

08011dbc <memset>:
 8011dbc:	4402      	add	r2, r0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d100      	bne.n	8011dc6 <memset+0xa>
 8011dc4:	4770      	bx	lr
 8011dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dca:	e7f9      	b.n	8011dc0 <memset+0x4>

08011dcc <_init>:
 8011dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dce:	bf00      	nop
 8011dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dd2:	bc08      	pop	{r3}
 8011dd4:	469e      	mov	lr, r3
 8011dd6:	4770      	bx	lr

08011dd8 <_fini>:
 8011dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dda:	bf00      	nop
 8011ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dde:	bc08      	pop	{r3}
 8011de0:	469e      	mov	lr, r3
 8011de2:	4770      	bx	lr
